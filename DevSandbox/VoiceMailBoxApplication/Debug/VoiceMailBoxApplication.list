
VoiceMailBoxApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e00c  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800e1c0  0800e1c0  0000f1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1f0  0800e1f0  0001007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1f0  0800e1f0  0000f1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1f8  0800e1f8  0001007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1f8  0800e1f8  0000f1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e1fc  0800e1fc  0000f1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800e200  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001007c  2**0
                  CONTENTS
 10 .bss          00000da4  2000007c  2000007c  0001007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e20  20000e20  0001007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c054  00000000  00000000  000100ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f52  00000000  00000000  0003c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002480  00000000  00000000  00042058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c37  00000000  00000000  000444d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033d4d  00000000  00000000  0004610f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031c9d  00000000  00000000  00079e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011633d  00000000  00000000  000abaf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c1e36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009ea8  00000000  00000000  001c1e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  001cbd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	@ (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	@ (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	00000000 	.word	0x00000000
 80001d4:	0800e1a8 	.word	0x0800e1a8

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	@ (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	@ (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000080 	.word	0x20000080
 80001f0:	0800e1a8 	.word	0x0800e1a8

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b96a 	b.w	80004e0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	460c      	mov	r4, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14e      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000230:	4694      	mov	ip, r2
 8000232:	458c      	cmp	ip, r1
 8000234:	4686      	mov	lr, r0
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	d962      	bls.n	8000302 <__udivmoddi4+0xde>
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0320 	rsb	r3, r2, #32
 8000242:	4091      	lsls	r1, r2
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	fa0c fc02 	lsl.w	ip, ip, r2
 800024c:	4319      	orrs	r1, r3
 800024e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000252:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000256:	fa1f f68c 	uxth.w	r6, ip
 800025a:	fbb1 f4f7 	udiv	r4, r1, r7
 800025e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000262:	fb07 1114 	mls	r1, r7, r4, r1
 8000266:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026a:	fb04 f106 	mul.w	r1, r4, r6
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f104 30ff 	add.w	r0, r4, #4294967295
 800027a:	f080 8112 	bcs.w	80004a2 <__udivmoddi4+0x27e>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 810f 	bls.w	80004a2 <__udivmoddi4+0x27e>
 8000284:	3c02      	subs	r4, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a59      	subs	r1, r3, r1
 800028a:	fa1f f38e 	uxth.w	r3, lr
 800028e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000292:	fb07 1110 	mls	r1, r7, r0, r1
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb00 f606 	mul.w	r6, r0, r6
 800029e:	429e      	cmp	r6, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x94>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002aa:	f080 80fc 	bcs.w	80004a6 <__udivmoddi4+0x282>
 80002ae:	429e      	cmp	r6, r3
 80002b0:	f240 80f9 	bls.w	80004a6 <__udivmoddi4+0x282>
 80002b4:	4463      	add	r3, ip
 80002b6:	3802      	subs	r0, #2
 80002b8:	1b9b      	subs	r3, r3, r6
 80002ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002be:	2100      	movs	r1, #0
 80002c0:	b11d      	cbz	r5, 80002ca <__udivmoddi4+0xa6>
 80002c2:	40d3      	lsrs	r3, r2
 80002c4:	2200      	movs	r2, #0
 80002c6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d905      	bls.n	80002de <__udivmoddi4+0xba>
 80002d2:	b10d      	cbz	r5, 80002d8 <__udivmoddi4+0xb4>
 80002d4:	e9c5 0100 	strd	r0, r1, [r5]
 80002d8:	2100      	movs	r1, #0
 80002da:	4608      	mov	r0, r1
 80002dc:	e7f5      	b.n	80002ca <__udivmoddi4+0xa6>
 80002de:	fab3 f183 	clz	r1, r3
 80002e2:	2900      	cmp	r1, #0
 80002e4:	d146      	bne.n	8000374 <__udivmoddi4+0x150>
 80002e6:	42a3      	cmp	r3, r4
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xcc>
 80002ea:	4290      	cmp	r0, r2
 80002ec:	f0c0 80f0 	bcc.w	80004d0 <__udivmoddi4+0x2ac>
 80002f0:	1a86      	subs	r6, r0, r2
 80002f2:	eb64 0303 	sbc.w	r3, r4, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	d0e6      	beq.n	80002ca <__udivmoddi4+0xa6>
 80002fc:	e9c5 6300 	strd	r6, r3, [r5]
 8000300:	e7e3      	b.n	80002ca <__udivmoddi4+0xa6>
 8000302:	2a00      	cmp	r2, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x204>
 8000308:	eba1 040c 	sub.w	r4, r1, ip
 800030c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000310:	fa1f f78c 	uxth.w	r7, ip
 8000314:	2101      	movs	r1, #1
 8000316:	fbb4 f6f8 	udiv	r6, r4, r8
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb08 4416 	mls	r4, r8, r6, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb07 f006 	mul.w	r0, r7, r6
 800032a:	4298      	cmp	r0, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x11c>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 34ff 	add.w	r4, r6, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x11a>
 8000338:	4298      	cmp	r0, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2b4>
 800033e:	4626      	mov	r6, r4
 8000340:	1a1c      	subs	r4, r3, r0
 8000342:	fa1f f38e 	uxth.w	r3, lr
 8000346:	fbb4 f0f8 	udiv	r0, r4, r8
 800034a:	fb08 4410 	mls	r4, r8, r0, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb00 f707 	mul.w	r7, r0, r7
 8000356:	429f      	cmp	r7, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x148>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x146>
 8000364:	429f      	cmp	r7, r3
 8000366:	f200 80b0 	bhi.w	80004ca <__udivmoddi4+0x2a6>
 800036a:	4620      	mov	r0, r4
 800036c:	1bdb      	subs	r3, r3, r7
 800036e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0x9c>
 8000374:	f1c1 0620 	rsb	r6, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 f706 	lsr.w	r7, r2, r6
 800037e:	431f      	orrs	r7, r3
 8000380:	fa20 fc06 	lsr.w	ip, r0, r6
 8000384:	fa04 f301 	lsl.w	r3, r4, r1
 8000388:	ea43 030c 	orr.w	r3, r3, ip
 800038c:	40f4      	lsrs	r4, r6
 800038e:	fa00 f801 	lsl.w	r8, r0, r1
 8000392:	0c38      	lsrs	r0, r7, #16
 8000394:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000398:	fbb4 fef0 	udiv	lr, r4, r0
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	fb00 441e 	mls	r4, r0, lr, r4
 80003a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ac:	45a1      	cmp	r9, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	d90a      	bls.n	80003ca <__udivmoddi4+0x1a6>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ba:	f080 8084 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80003be:	45a1      	cmp	r9, r4
 80003c0:	f240 8081 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80003c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	eba4 0409 	sub.w	r4, r4, r9
 80003ce:	fa1f f983 	uxth.w	r9, r3
 80003d2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d6:	fb00 4413 	mls	r4, r0, r3, r4
 80003da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003de:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1d2>
 80003e6:	193c      	adds	r4, r7, r4
 80003e8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ec:	d267      	bcs.n	80004be <__udivmoddi4+0x29a>
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d965      	bls.n	80004be <__udivmoddi4+0x29a>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003fa:	fba0 9302 	umull	r9, r3, r0, r2
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	429c      	cmp	r4, r3
 8000404:	46ce      	mov	lr, r9
 8000406:	469c      	mov	ip, r3
 8000408:	d351      	bcc.n	80004ae <__udivmoddi4+0x28a>
 800040a:	d04e      	beq.n	80004aa <__udivmoddi4+0x286>
 800040c:	b155      	cbz	r5, 8000424 <__udivmoddi4+0x200>
 800040e:	ebb8 030e 	subs.w	r3, r8, lr
 8000412:	eb64 040c 	sbc.w	r4, r4, ip
 8000416:	fa04 f606 	lsl.w	r6, r4, r6
 800041a:	40cb      	lsrs	r3, r1
 800041c:	431e      	orrs	r6, r3
 800041e:	40cc      	lsrs	r4, r1
 8000420:	e9c5 6400 	strd	r6, r4, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	e750      	b.n	80002ca <__udivmoddi4+0xa6>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f103 	lsr.w	r1, r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa24 f303 	lsr.w	r3, r4, r3
 8000438:	4094      	lsls	r4, r2
 800043a:	430c      	orrs	r4, r1
 800043c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000440:	fa00 fe02 	lsl.w	lr, r0, r2
 8000444:	fa1f f78c 	uxth.w	r7, ip
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3110 	mls	r1, r8, r0, r3
 8000450:	0c23      	lsrs	r3, r4, #16
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f107 	mul.w	r1, r0, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x24c>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 36ff 	add.w	r6, r0, #4294967295
 8000466:	d22c      	bcs.n	80004c2 <__udivmoddi4+0x29e>
 8000468:	4299      	cmp	r1, r3
 800046a:	d92a      	bls.n	80004c2 <__udivmoddi4+0x29e>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb3 f1f8 	udiv	r1, r3, r8
 8000478:	fb08 3311 	mls	r3, r8, r1, r3
 800047c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000480:	fb01 f307 	mul.w	r3, r1, r7
 8000484:	42a3      	cmp	r3, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x276>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000490:	d213      	bcs.n	80004ba <__udivmoddi4+0x296>
 8000492:	42a3      	cmp	r3, r4
 8000494:	d911      	bls.n	80004ba <__udivmoddi4+0x296>
 8000496:	3902      	subs	r1, #2
 8000498:	4464      	add	r4, ip
 800049a:	1ae4      	subs	r4, r4, r3
 800049c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a0:	e739      	b.n	8000316 <__udivmoddi4+0xf2>
 80004a2:	4604      	mov	r4, r0
 80004a4:	e6f0      	b.n	8000288 <__udivmoddi4+0x64>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e706      	b.n	80002b8 <__udivmoddi4+0x94>
 80004aa:	45c8      	cmp	r8, r9
 80004ac:	d2ae      	bcs.n	800040c <__udivmoddi4+0x1e8>
 80004ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7a8      	b.n	800040c <__udivmoddi4+0x1e8>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e7ed      	b.n	800049a <__udivmoddi4+0x276>
 80004be:	4603      	mov	r3, r0
 80004c0:	e799      	b.n	80003f6 <__udivmoddi4+0x1d2>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e7d4      	b.n	8000470 <__udivmoddi4+0x24c>
 80004c6:	46d6      	mov	lr, sl
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1a6>
 80004ca:	4463      	add	r3, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e74d      	b.n	800036c <__udivmoddi4+0x148>
 80004d0:	4606      	mov	r6, r0
 80004d2:	4623      	mov	r3, r4
 80004d4:	4608      	mov	r0, r1
 80004d6:	e70f      	b.n	80002f8 <__udivmoddi4+0xd4>
 80004d8:	3e02      	subs	r6, #2
 80004da:	4463      	add	r3, ip
 80004dc:	e730      	b.n	8000340 <__udivmoddi4+0x11c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <test>:

// Voice Mail Box
namespace VMB
{
	int test()
	{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
		return 5;
 80004e8:	2305      	movs	r3, #5
	}
 80004ea:	4618      	mov	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <setup>:
#include "application.h"
#include "LibVoiceMailBox.hpp"

void setup()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
	int a = VMB::test();
 80004fa:	f7ff fff3 	bl	80004e4 <test>
 80004fe:	6078      	str	r0, [r7, #4]
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <loop>:
void loop()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f001 fb7b 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f82b 	bl	8000578 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000522:	f000 f89b 	bl	800065c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fc85 	bl	8000e34 <MX_GPIO_Init>
  MX_CRC_Init();
 800052a:	f000 f8c3 	bl	80006b4 <MX_CRC_Init>
  MX_DMA2D_Init();
 800052e:	f000 f8d5 	bl	80006dc <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000532:	f000 f905 	bl	8000740 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000536:	f000 fc2d 	bl	8000d94 <MX_FMC_Init>
  MX_I2C1_Init();
 800053a:	f000 fa01 	bl	8000940 <MX_I2C1_Init>
  MX_I2C2_Init();
 800053e:	f000 fa2d 	bl	800099c <MX_I2C2_Init>
  MX_LTDC_Init();
 8000542:	f000 fa59 	bl	80009f8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000546:	f000 fad5 	bl	8000af4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800054a:	f000 faff 	bl	8000b4c <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 800054e:	f000 fb5b 	bl	8000c08 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8000552:	f000 fb7b 	bl	8000c4c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000556:	f000 fbc9 	bl	8000cec <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800055a:	f000 fbf1 	bl	8000d40 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800055e:	f00a ff53 	bl	800b408 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000562:	f00d f9cb 	bl	800d8fc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000566:	f7ff ffc5 	bl	80004f4 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800056a:	f00d f9ed 	bl	800d948 <MX_USB_HOST_Process>
    loop();
 800056e:	f7ff ffcb 	bl	8000508 <loop>
    MX_USB_HOST_Process();
 8000572:	bf00      	nop
 8000574:	e7f9      	b.n	800056a <main+0x54>
	...

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2234      	movs	r2, #52	@ 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f00d fd80 	bl	800e08c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000654 <SystemClock_Config+0xdc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000654 <SystemClock_Config+0xdc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b29      	ldr	r3, [pc, #164]	@ (8000654 <SystemClock_Config+0xdc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b26      	ldr	r3, [pc, #152]	@ (8000658 <SystemClock_Config+0xe0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a25      	ldr	r2, [pc, #148]	@ (8000658 <SystemClock_Config+0xe0>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <SystemClock_Config+0xe0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005ec:	23b4      	movs	r3, #180	@ 0xb4
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80005f4:	2306      	movs	r3, #6
 80005f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80005f8:	2306      	movs	r3, #6
 80005fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4618      	mov	r0, r3
 8000602:	f006 f9bf 	bl	8006984 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800060c:	f000 fdb0 	bl	8001170 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000610:	f005 fc16 	bl	8005e40 <HAL_PWREx_EnableOverDrive>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800061a:	f000 fda9 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000634:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2105      	movs	r1, #5
 800063c:	4618      	mov	r0, r3
 800063e:	f005 fd11 	bl	8006064 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000648:	f000 fd92 	bl	8001170 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	@ 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b090      	sub	sp, #64	@ 0x40
 8000660:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	223c      	movs	r2, #60	@ 0x3c
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f00d fd0f 	bl	800e08c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 800066e:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8000672:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000674:	2390      	movs	r3, #144	@ 0x90
 8000676:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000680:	2306      	movs	r3, #6
 8000682:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800068c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800068e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f005 ff34 	bl	8006508 <HAL_RCCEx_PeriphCLKConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80006a6:	f000 fd63 	bl	8001170 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3740      	adds	r7, #64	@ 0x40
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_CRC_Init+0x20>)
 80006ba:	4a07      	ldr	r2, [pc, #28]	@ (80006d8 <MX_CRC_Init+0x24>)
 80006bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_CRC_Init+0x20>)
 80006c0:	f001 fbf0 	bl	8001ea4 <HAL_CRC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ca:	f000 fd51 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000098 	.word	0x20000098
 80006d8:	40023000 	.word	0x40023000

080006dc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006e0:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_DMA2D_Init+0x5c>)
 80006e2:	4a16      	ldr	r2, [pc, #88]	@ (800073c <MX_DMA2D_Init+0x60>)
 80006e4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006e6:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <MX_DMA2D_Init+0x5c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_DMA2D_Init+0x5c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_DMA2D_Init+0x5c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_DMA2D_Init+0x5c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_DMA2D_Init+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_DMA2D_Init+0x5c>)
 8000706:	2200      	movs	r2, #0
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <MX_DMA2D_Init+0x5c>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000710:	4809      	ldr	r0, [pc, #36]	@ (8000738 <MX_DMA2D_Init+0x5c>)
 8000712:	f001 fbe3 	bl	8001edc <HAL_DMA2D_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800071c:	f000 fd28 	bl	8001170 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000720:	2101      	movs	r1, #1
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_DMA2D_Init+0x5c>)
 8000724:	f001 fd34 	bl	8002190 <HAL_DMA2D_ConfigLayer>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800072e:	f000 fd1f 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000a0 	.word	0x200000a0
 800073c:	4002b000 	.word	0x4002b000

08000740 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b0aa      	sub	sp, #168	@ 0xa8
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000746:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000752:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000756:	2224      	movs	r2, #36	@ 0x24
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f00d fc96 	bl	800e08c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000760:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000772:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000776:	2234      	movs	r2, #52	@ 0x34
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f00d fc86 	bl	800e08c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	222c      	movs	r2, #44	@ 0x2c
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f00d fc80 	bl	800e08c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800078c:	4b6a      	ldr	r3, [pc, #424]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 800078e:	4a6b      	ldr	r2, [pc, #428]	@ (800093c <MX_DSIHOST_DSI_Init+0x1fc>)
 8000790:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000792:	4b69      	ldr	r3, [pc, #420]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000798:	4b67      	ldr	r3, [pc, #412]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 800079a:	2204      	movs	r2, #4
 800079c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800079e:	4b66      	ldr	r3, [pc, #408]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 80007a4:	237d      	movs	r3, #125	@ 0x7d
 80007a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80007b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ba:	4619      	mov	r1, r3
 80007bc:	485e      	ldr	r0, [pc, #376]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 80007be:	f001 fd79 	bl	80022b4 <HAL_DSI_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 80007c8:	f000 fcd2 	bl	8001170 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80007fe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000802:	4619      	mov	r1, r3
 8000804:	484c      	ldr	r0, [pc, #304]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000806:	f002 fa69 	bl	8002cdc <HAL_DSI_ConfigHostTimeouts>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000810:	f000 fcae 	bl	8001170 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000814:	231c      	movs	r3, #28
 8000816:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000818:	2321      	movs	r3, #33	@ 0x21
 800081a:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800081c:	230f      	movs	r3, #15
 800081e:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000820:	2319      	movs	r3, #25
 8000822:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8000828:	230a      	movs	r3, #10
 800082a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800082c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000830:	4619      	mov	r1, r3
 8000832:	4841      	ldr	r0, [pc, #260]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000834:	f002 f9e8 	bl	8002c08 <HAL_DSI_ConfigPhyTimer>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800083e:	f000 fc97 	bl	8001170 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000842:	2104      	movs	r1, #4
 8000844:	483c      	ldr	r0, [pc, #240]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000846:	f002 f9b7 	bl	8002bb8 <HAL_DSI_ConfigFlowControl>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000850:	f000 fc8e 	bl	8001170 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000854:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000858:	4837      	ldr	r0, [pc, #220]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 800085a:	f002 fb05 	bl	8002e68 <HAL_DSI_SetLowPowerRXFilter>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000864:	f000 fc84 	bl	8001170 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	4833      	ldr	r0, [pc, #204]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 800086c:	f001 fea2 	bl	80025b4 <HAL_DSI_ConfigErrorMonitor>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000876:	f000 fc7b 	bl	8001170 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800087a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000880:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000884:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800088a:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800088c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000890:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089c:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800089e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008a2:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80008a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 80008aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80008b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80008b4:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 80008b6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80008ba:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80008bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80008c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ca:	4619      	mov	r1, r3
 80008cc:	481a      	ldr	r0, [pc, #104]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008ce:	f002 f915 	bl	8002afc <HAL_DSI_ConfigCommand>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 80008d8:	f000 fc4a 	bl	8001170 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 80008e0:	2305      	movs	r3, #5
 80008e2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 80008e4:	23c8      	movs	r3, #200	@ 0xc8
 80008e6:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80008e8:	2310      	movs	r3, #16
 80008ea:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80008f0:	2304      	movs	r3, #4
 80008f2:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000900:	2340      	movs	r3, #64	@ 0x40
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	480a      	ldr	r0, [pc, #40]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 800090e:	f002 f81d 	bl	800294c <HAL_DSI_ConfigAdaptedCommandMode>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000918:	f000 fc2a 	bl	8001170 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	4806      	ldr	r0, [pc, #24]	@ (8000938 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000920:	f001 ffec 	bl	80028fc <HAL_DSI_SetGenericVCID>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 800092a:	f000 fc21 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	37a8      	adds	r7, #168	@ 0xa8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000e0 	.word	0x200000e0
 800093c:	40016c00 	.word	0x40016c00

08000940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000946:	4a13      	ldr	r2, [pc, #76]	@ (8000994 <MX_I2C1_Init+0x54>)
 8000948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_I2C1_Init+0x50>)
 800094c:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <MX_I2C1_Init+0x58>)
 800094e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_I2C1_Init+0x50>)
 800095e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000962:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_I2C1_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_I2C1_Init+0x50>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_I2C1_Init+0x50>)
 800097e:	f004 fdb3 	bl	80054e8 <HAL_I2C_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000988:	f000 fbf2 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000fc 	.word	0x200000fc
 8000994:	40005400 	.word	0x40005400
 8000998:	000186a0 	.word	0x000186a0

0800099c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_I2C2_Init+0x50>)
 80009a2:	4a13      	ldr	r2, [pc, #76]	@ (80009f0 <MX_I2C2_Init+0x54>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_I2C2_Init+0x50>)
 80009a8:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <MX_I2C2_Init+0x58>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_I2C2_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_I2C2_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_I2C2_Init+0x50>)
 80009ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <MX_I2C2_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_I2C2_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <MX_I2C2_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_I2C2_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_I2C2_Init+0x50>)
 80009da:	f004 fd85 	bl	80054e8 <HAL_I2C_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009e4:	f000 fbc4 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000150 	.word	0x20000150
 80009f0:	40005800 	.word	0x40005800
 80009f4:	000186a0 	.word	0x000186a0

080009f8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	@ 0x38
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2234      	movs	r2, #52	@ 0x34
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f00d fb41 	bl	800e08c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a0a:	4b38      	ldr	r3, [pc, #224]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a0c:	4a38      	ldr	r2, [pc, #224]	@ (8000af0 <MX_LTDC_Init+0xf8>)
 8000a0e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a10:	4b36      	ldr	r3, [pc, #216]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a16:	4b35      	ldr	r3, [pc, #212]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a1c:	4b33      	ldr	r3, [pc, #204]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a22:	4b32      	ldr	r3, [pc, #200]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000a28:	4b30      	ldr	r3, [pc, #192]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000a34:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000a40:	4b2a      	ldr	r3, [pc, #168]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a42:	22c9      	movs	r2, #201	@ 0xc9
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000a46:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a48:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8000a4e:	4b27      	ldr	r3, [pc, #156]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a50:	22ca      	movs	r2, #202	@ 0xca
 8000a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000a54:	4b25      	ldr	r3, [pc, #148]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a56:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a5c:	4b23      	ldr	r3, [pc, #140]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a64:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a74:	481d      	ldr	r0, [pc, #116]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000a76:	f004 fe7b 	bl	8005770 <HAL_LTDC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000a80:	f000 fb76 	bl	8001170 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000a88:	23c8      	movs	r3, #200	@ 0xc8
 8000a8a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000a90:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000a94:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a96:	2302      	movs	r3, #2
 8000a98:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a9a:	23ff      	movs	r3, #255	@ 0xff
 8000a9c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000aa2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000aa6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000aac:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000ab2:	23c8      	movs	r3, #200	@ 0xc8
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000ab6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000aba:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_LTDC_Init+0xf4>)
 8000ad6:	f004 ffdd 	bl	8005a94 <HAL_LTDC_ConfigLayer>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000ae0:	f000 fb46 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3738      	adds	r7, #56	@ 0x38
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200001a4 	.word	0x200001a4
 8000af0:	40016800 	.word	0x40016800

08000af4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <MX_QUADSPI_Init+0x50>)
 8000afa:	4a13      	ldr	r2, [pc, #76]	@ (8000b48 <MX_QUADSPI_Init+0x54>)
 8000afc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_QUADSPI_Init+0x50>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <MX_QUADSPI_Init+0x50>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_QUADSPI_Init+0x50>)
 8000b0c:	2210      	movs	r2, #16
 8000b0e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_QUADSPI_Init+0x50>)
 8000b12:	2218      	movs	r2, #24
 8000b14:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <MX_QUADSPI_Init+0x50>)
 8000b18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b1c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_QUADSPI_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b24:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <MX_QUADSPI_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <MX_QUADSPI_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <MX_QUADSPI_Init+0x50>)
 8000b32:	f005 f9d5 	bl	8005ee0 <HAL_QSPI_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f000 fb18 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000024c 	.word	0x2000024c
 8000b48:	a0001000 	.word	0xa0001000

08000b4c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b50:	4b2a      	ldr	r3, [pc, #168]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b52:	4a2b      	ldr	r2, [pc, #172]	@ (8000c00 <MX_SAI1_Init+0xb4>)
 8000b54:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b56:	4b29      	ldr	r3, [pc, #164]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b5c:	4b27      	ldr	r3, [pc, #156]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000b62:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b64:	2240      	movs	r2, #64	@ 0x40
 8000b66:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b68:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b6e:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b74:	4b21      	ldr	r3, [pc, #132]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b80:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b94:	4a1b      	ldr	r2, [pc, #108]	@ (8000c04 <MX_SAI1_Init+0xb8>)
 8000b96:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b98:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000bda:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_SAI1_Init+0xb0>)
 8000be8:	f006 f950 	bl	8006e8c <HAL_SAI_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000bf2:	f000 fabd 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000298 	.word	0x20000298
 8000c00:	40015804 	.word	0x40015804
 8000c04:	0002ee00 	.word	0x0002ee00

08000c08 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <MX_SDIO_SD_Init+0x3c>)
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c48 <MX_SDIO_SD_Init+0x40>)
 8000c10:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_SDIO_SD_Init+0x3c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <MX_SDIO_SD_Init+0x3c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_SDIO_SD_Init+0x3c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <MX_SDIO_SD_Init+0x3c>)
 8000c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c2a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <MX_SDIO_SD_Init+0x3c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000c32:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <MX_SDIO_SD_Init+0x3c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000320 	.word	0x20000320
 8000c48:	40012c00 	.word	0x40012c00

08000c4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <MX_TIM1_Init+0x98>)
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce8 <MX_TIM1_Init+0x9c>)
 8000c6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_TIM1_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <MX_TIM1_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_TIM1_Init+0x98>)
 8000c7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <MX_TIM1_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <MX_TIM1_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_TIM1_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c94:	4813      	ldr	r0, [pc, #76]	@ (8000ce4 <MX_TIM1_Init+0x98>)
 8000c96:	f007 fce2 	bl	800865e <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 fa66 	bl	8001170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <MX_TIM1_Init+0x98>)
 8000cb2:	f007 fe83 	bl	80089bc <HAL_TIM_ConfigClockSource>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000cbc:	f000 fa58 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_TIM1_Init+0x98>)
 8000cce:	f008 f8ab 	bl	8008e28 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cd8:	f000 fa4a 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200003a4 	.word	0x200003a4
 8000ce8:	40010000 	.word	0x40010000

08000cec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_USART3_UART_Init+0x4c>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <MX_USART3_UART_Init+0x50>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <MX_USART3_UART_Init+0x4c>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_USART3_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_USART3_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <MX_USART3_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_USART3_UART_Init+0x4c>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <MX_USART3_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_USART3_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_USART3_UART_Init+0x4c>)
 8000d24:	f008 f910 	bl	8008f48 <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d2e:	f000 fa1f 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200003ec 	.word	0x200003ec
 8000d3c:	40004800 	.word	0x40004800

08000d40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_USART6_UART_Init+0x4c>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <MX_USART6_UART_Init+0x50>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <MX_USART6_UART_Init+0x4c>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_USART6_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_USART6_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <MX_USART6_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_USART6_UART_Init+0x4c>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <MX_USART6_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_USART6_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_USART6_UART_Init+0x4c>)
 8000d78:	f008 f8e6 	bl	8008f48 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d82:	f000 f9f5 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000434 	.word	0x20000434
 8000d90:	40011400 	.word	0x40011400

08000d94 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000dae:	4a20      	ldr	r2, [pc, #128]	@ (8000e30 <MX_FMC_Init+0x9c>)
 8000db0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000db2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000dcc:	2240      	movs	r2, #64	@ 0x40
 8000dce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000dd2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000dd6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000de0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000de4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000de6:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000de8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dec:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000e00:	2307      	movs	r3, #7
 8000e02:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000e04:	2303      	movs	r3, #3
 8000e06:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <MX_FMC_Init+0x98>)
 8000e16:	f007 fbee 	bl	80085f6 <HAL_SDRAM_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000e20:	f000 f9a6 	bl	8001170 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000047c 	.word	0x2000047c
 8000e30:	a0000140 	.word	0xa0000140

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b090      	sub	sp, #64	@ 0x40
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e4e:	4bae      	ldr	r3, [pc, #696]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4aad      	ldr	r2, [pc, #692]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000e54:	f043 0310 	orr.w	r3, r3, #16
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4bab      	ldr	r3, [pc, #684]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e6a:	4ba7      	ldr	r3, [pc, #668]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4aa6      	ldr	r2, [pc, #664]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4ba4      	ldr	r3, [pc, #656]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
 8000e86:	4ba0      	ldr	r3, [pc, #640]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a9f      	ldr	r2, [pc, #636]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b9d      	ldr	r3, [pc, #628]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	623b      	str	r3, [r7, #32]
 8000e9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	4b99      	ldr	r3, [pc, #612]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a98      	ldr	r2, [pc, #608]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b96      	ldr	r3, [pc, #600]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	61fb      	str	r3, [r7, #28]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	4b92      	ldr	r3, [pc, #584]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a91      	ldr	r2, [pc, #580]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b8f      	ldr	r3, [pc, #572]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	4b8b      	ldr	r3, [pc, #556]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a8a      	ldr	r2, [pc, #552]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b88      	ldr	r3, [pc, #544]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b84      	ldr	r3, [pc, #528]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a83      	ldr	r2, [pc, #524]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b81      	ldr	r3, [pc, #516]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b7d      	ldr	r3, [pc, #500]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a7c      	ldr	r2, [pc, #496]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b76      	ldr	r3, [pc, #472]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a75      	ldr	r2, [pc, #468]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b73      	ldr	r3, [pc, #460]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b6c      	ldr	r3, [pc, #432]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4b68      	ldr	r3, [pc, #416]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a67      	ldr	r2, [pc, #412]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b65      	ldr	r3, [pc, #404]	@ (8001108 <MX_GPIO_Init+0x2d4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	210c      	movs	r1, #12
 8000f82:	4862      	ldr	r0, [pc, #392]	@ (800110c <MX_GPIO_Init+0x2d8>)
 8000f84:	f002 f962 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2130      	movs	r1, #48	@ 0x30
 8000f8c:	4860      	ldr	r0, [pc, #384]	@ (8001110 <MX_GPIO_Init+0x2dc>)
 8000f8e:	f002 f95d 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2108      	movs	r1, #8
 8000f96:	485f      	ldr	r0, [pc, #380]	@ (8001114 <MX_GPIO_Init+0x2e0>)
 8000f98:	f002 f958 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2140      	movs	r1, #64	@ 0x40
 8000fa0:	485d      	ldr	r0, [pc, #372]	@ (8001118 <MX_GPIO_Init+0x2e4>)
 8000fa2:	f002 f953 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2105      	movs	r1, #5
 8000faa:	485c      	ldr	r0, [pc, #368]	@ (800111c <MX_GPIO_Init+0x2e8>)
 8000fac:	f002 f94e 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2180      	movs	r1, #128	@ 0x80
 8000fb4:	485a      	ldr	r0, [pc, #360]	@ (8001120 <MX_GPIO_Init+0x2ec>)
 8000fb6:	f002 f949 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	4859      	ldr	r0, [pc, #356]	@ (8001124 <MX_GPIO_Init+0x2f0>)
 8000fc0:	f002 f944 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	484c      	ldr	r0, [pc, #304]	@ (800110c <MX_GPIO_Init+0x2d8>)
 8000fdc:	f001 ff72 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ff0:	2306      	movs	r3, #6
 8000ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4848      	ldr	r0, [pc, #288]	@ (800111c <MX_GPIO_Init+0x2e8>)
 8000ffc:	f001 ff62 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8001000:	2380      	movs	r3, #128	@ 0x80
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001004:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001008:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001012:	4619      	mov	r1, r3
 8001014:	4841      	ldr	r0, [pc, #260]	@ (800111c <MX_GPIO_Init+0x2e8>)
 8001016:	f001 ff55 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800101a:	2330      	movs	r3, #48	@ 0x30
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800101e:	2311      	movs	r3, #17
 8001020:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102e:	4619      	mov	r1, r3
 8001030:	4837      	ldr	r0, [pc, #220]	@ (8001110 <MX_GPIO_Init+0x2dc>)
 8001032:	f001 ff47 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001036:	2308      	movs	r3, #8
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800103a:	2311      	movs	r3, #17
 800103c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104a:	4619      	mov	r1, r3
 800104c:	4831      	ldr	r0, [pc, #196]	@ (8001114 <MX_GPIO_Init+0x2e0>)
 800104e:	f001 ff39 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001052:	2340      	movs	r3, #64	@ 0x40
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001056:	2311      	movs	r3, #17
 8001058:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001066:	4619      	mov	r1, r3
 8001068:	482b      	ldr	r0, [pc, #172]	@ (8001118 <MX_GPIO_Init+0x2e4>)
 800106a:	f001 ff2b 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 800106e:	2305      	movs	r3, #5
 8001070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001082:	4619      	mov	r1, r3
 8001084:	4825      	ldr	r0, [pc, #148]	@ (800111c <MX_GPIO_Init+0x2e8>)
 8001086:	f001 ff1d 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 800108a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800109c:	2302      	movs	r3, #2
 800109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a4:	4619      	mov	r1, r3
 80010a6:	481a      	ldr	r0, [pc, #104]	@ (8001110 <MX_GPIO_Init+0x2dc>)
 80010a8:	f001 ff0c 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80010ac:	2304      	movs	r3, #4
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b0:	2300      	movs	r3, #0
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	4816      	ldr	r0, [pc, #88]	@ (8001118 <MX_GPIO_Init+0x2e4>)
 80010c0:	f001 ff00 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80010c4:	2320      	movs	r3, #32
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d6:	4619      	mov	r1, r3
 80010d8:	4813      	ldr	r0, [pc, #76]	@ (8001128 <MX_GPIO_Init+0x2f4>)
 80010da:	f001 fef3 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010de:	2380      	movs	r3, #128	@ 0x80
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f2:	4619      	mov	r1, r3
 80010f4:	480a      	ldr	r0, [pc, #40]	@ (8001120 <MX_GPIO_Init+0x2ec>)
 80010f6:	f001 fee5 	bl	8002ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80010fa:	2308      	movs	r3, #8
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	e012      	b.n	800112c <MX_GPIO_Init+0x2f8>
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40021000 	.word	0x40021000
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40022800 	.word	0x40022800
 8001118:	40021800 	.word	0x40021800
 800111c:	40020400 	.word	0x40020400
 8001120:	40021c00 	.word	0x40021c00
 8001124:	40020000 	.word	0x40020000
 8001128:	40022400 	.word	0x40022400
 800112c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001136:	4619      	mov	r1, r3
 8001138:	4803      	ldr	r0, [pc, #12]	@ (8001148 <MX_GPIO_Init+0x314>)
 800113a:	f001 fec3 	bl	8002ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800113e:	bf00      	nop
 8001140:	3740      	adds	r7, #64	@ 0x40
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40020000 	.word	0x40020000

0800114c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a04      	ldr	r2, [pc, #16]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800115e:	f000 fd7b 	bl	8001c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40001000 	.word	0x40001000

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <Error_Handler+0x8>

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	4a0f      	ldr	r2, [pc, #60]	@ (80011c8 <HAL_MspInit+0x4c>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001190:	6453      	str	r3, [r2, #68]	@ 0x44
 8001192:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <HAL_MspInit+0x4c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <HAL_MspInit+0x4c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <HAL_MspInit+0x4c>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_MspInit+0x4c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001208 <HAL_CRC_MspInit+0x3c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10d      	bne.n	80011fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <HAL_CRC_MspInit+0x40>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a09      	ldr	r2, [pc, #36]	@ (800120c <HAL_CRC_MspInit+0x40>)
 80011e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <HAL_CRC_MspInit+0x40>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023000 	.word	0x40023000
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0e      	ldr	r2, [pc, #56]	@ (8001258 <HAL_DMA2D_MspInit+0x48>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d115      	bne.n	800124e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <HAL_DMA2D_MspInit+0x4c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a0c      	ldr	r2, [pc, #48]	@ (800125c <HAL_DMA2D_MspInit+0x4c>)
 800122c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_DMA2D_MspInit+0x4c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	205a      	movs	r0, #90	@ 0x5a
 8001244:	f000 fe04 	bl	8001e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001248:	205a      	movs	r0, #90	@ 0x5a
 800124a:	f000 fe1d 	bl	8001e88 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	4002b000 	.word	0x4002b000
 800125c:	40023800 	.word	0x40023800

08001260 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	@ 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1d      	ldr	r2, [pc, #116]	@ (80012f4 <HAL_DSI_MspInit+0x94>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d133      	bne.n	80012ea <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <HAL_DSI_MspInit+0x98>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <HAL_DSI_MspInit+0x98>)
 800128c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001290:	6453      	str	r3, [r2, #68]	@ 0x44
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_DSI_MspInit+0x98>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_DSI_MspInit+0x98>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <HAL_DSI_MspInit+0x98>)
 80012a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_DSI_MspInit+0x98>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80012ba:	2304      	movs	r3, #4
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80012ca:	230d      	movs	r3, #13
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4809      	ldr	r0, [pc, #36]	@ (80012fc <HAL_DSI_MspInit+0x9c>)
 80012d6:	f001 fdf5 	bl	8002ec4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	205c      	movs	r0, #92	@ 0x5c
 80012e0:	f000 fdb6 	bl	8001e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80012e4:	205c      	movs	r0, #92	@ 0x5c
 80012e6:	f000 fdcf 	bl	8001e88 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	@ 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40016c00 	.word	0x40016c00
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40022400 	.word	0x40022400

08001300 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	@ 0x30
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a32      	ldr	r2, [pc, #200]	@ (80013e8 <HAL_I2C_MspInit+0xe8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d12d      	bne.n	800137e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a30      	ldr	r2, [pc, #192]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b2e      	ldr	r3, [pc, #184]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800133e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001344:	2312      	movs	r3, #18
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001348:	2301      	movs	r3, #1
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001350:	2304      	movs	r3, #4
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4825      	ldr	r0, [pc, #148]	@ (80013f0 <HAL_I2C_MspInit+0xf0>)
 800135c:	f001 fdb2 	bl	8002ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	4a20      	ldr	r2, [pc, #128]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 800136a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800136e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001370:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800137c:	e030      	b.n	80013e0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <HAL_I2C_MspInit+0xf4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d12b      	bne.n	80013e0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001390:	4a16      	ldr	r2, [pc, #88]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 8001392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001396:	6313      	str	r3, [r2, #48]	@ 0x30
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80013a4:	2330      	movs	r3, #48	@ 0x30
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a8:	2312      	movs	r3, #18
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013b4:	2304      	movs	r3, #4
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <HAL_I2C_MspInit+0xf8>)
 80013c0:	f001 fd80 	bl	8002ec4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013cc:	4a07      	ldr	r2, [pc, #28]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 80013ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <HAL_I2C_MspInit+0xec>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3730      	adds	r7, #48	@ 0x30
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40005400 	.word	0x40005400
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40005800 	.word	0x40005800
 80013f8:	40021c00 	.word	0x40021c00

080013fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0e      	ldr	r2, [pc, #56]	@ (8001444 <HAL_LTDC_MspInit+0x48>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d115      	bne.n	800143a <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <HAL_LTDC_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <HAL_LTDC_MspInit+0x4c>)
 8001418:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800141c:	6453      	str	r3, [r2, #68]	@ 0x44
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_LTDC_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2058      	movs	r0, #88	@ 0x58
 8001430:	f000 fd0e 	bl	8001e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001434:	2058      	movs	r0, #88	@ 0x58
 8001436:	f000 fd27 	bl	8001e88 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40016800 	.word	0x40016800
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a31      	ldr	r2, [pc, #196]	@ (8001530 <HAL_QSPI_MspInit+0xe4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d15b      	bne.n	8001526 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b30      	ldr	r3, [pc, #192]	@ (8001534 <HAL_QSPI_MspInit+0xe8>)
 8001474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001476:	4a2f      	ldr	r2, [pc, #188]	@ (8001534 <HAL_QSPI_MspInit+0xe8>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6393      	str	r3, [r2, #56]	@ 0x38
 800147e:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <HAL_QSPI_MspInit+0xe8>)
 8001480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b29      	ldr	r3, [pc, #164]	@ (8001534 <HAL_QSPI_MspInit+0xe8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a28      	ldr	r2, [pc, #160]	@ (8001534 <HAL_QSPI_MspInit+0xe8>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <HAL_QSPI_MspInit+0xe8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <HAL_QSPI_MspInit+0xe8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a21      	ldr	r2, [pc, #132]	@ (8001534 <HAL_QSPI_MspInit+0xe8>)
 80014b0:	f043 0320 	orr.w	r3, r3, #32
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <HAL_QSPI_MspInit+0xe8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80014c2:	2340      	movs	r3, #64	@ 0x40
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80014d2:	230a      	movs	r3, #10
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4816      	ldr	r0, [pc, #88]	@ (8001538 <HAL_QSPI_MspInit+0xec>)
 80014de:	f001 fcf1 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80014e2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80014f4:	2309      	movs	r3, #9
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	480f      	ldr	r0, [pc, #60]	@ (800153c <HAL_QSPI_MspInit+0xf0>)
 8001500:	f001 fce0 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001504:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001516:	230a      	movs	r3, #10
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4806      	ldr	r0, [pc, #24]	@ (800153c <HAL_QSPI_MspInit+0xf0>)
 8001522:	f001 fccf 	bl	8002ec4 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	@ 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	a0001000 	.word	0xa0001000
 8001534:	40023800 	.word	0x40023800
 8001538:	40020400 	.word	0x40020400
 800153c:	40021400 	.word	0x40021400

08001540 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a28      	ldr	r2, [pc, #160]	@ (8001600 <HAL_SD_MspInit+0xc0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d14a      	bne.n	80015f8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <HAL_SD_MspInit+0xc4>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	4a26      	ldr	r2, [pc, #152]	@ (8001604 <HAL_SD_MspInit+0xc4>)
 800156c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001570:	6453      	str	r3, [r2, #68]	@ 0x44
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_SD_MspInit+0xc4>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_SD_MspInit+0xc4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <HAL_SD_MspInit+0xc4>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_SD_MspInit+0xc4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_SD_MspInit+0xc4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <HAL_SD_MspInit+0xc4>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <HAL_SD_MspInit+0xc4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 80015b6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80015ba:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80015c8:	230c      	movs	r3, #12
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	480d      	ldr	r0, [pc, #52]	@ (8001608 <HAL_SD_MspInit+0xc8>)
 80015d4:	f001 fc76 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80015d8:	2304      	movs	r3, #4
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80015e8:	230c      	movs	r3, #12
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	@ (800160c <HAL_SD_MspInit+0xcc>)
 80015f4:	f001 fc66 	bl	8002ec4 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	@ 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40012c00 	.word	0x40012c00
 8001604:	40023800 	.word	0x40023800
 8001608:	40020800 	.word	0x40020800
 800160c:	40020c00 	.word	0x40020c00

08001610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_TIM_Base_MspInit+0x3c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10d      	bne.n	800163e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <HAL_TIM_Base_MspInit+0x40>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a09      	ldr	r2, [pc, #36]	@ (8001650 <HAL_TIM_Base_MspInit+0x40>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <HAL_TIM_Base_MspInit+0x40>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40010000 	.word	0x40010000
 8001650:	40023800 	.word	0x40023800

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	@ 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a33      	ldr	r2, [pc, #204]	@ (8001740 <HAL_UART_MspInit+0xec>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d12d      	bne.n	80016d2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	4b32      	ldr	r3, [pc, #200]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	4a31      	ldr	r2, [pc, #196]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001684:	6413      	str	r3, [r2, #64]	@ 0x40
 8001686:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a2a      	ldr	r2, [pc, #168]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b28      	ldr	r3, [pc, #160]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016c0:	2307      	movs	r3, #7
 80016c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	481f      	ldr	r0, [pc, #124]	@ (8001748 <HAL_UART_MspInit+0xf4>)
 80016cc:	f001 fbfa 	bl	8002ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016d0:	e031      	b.n	8001736 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a1d      	ldr	r2, [pc, #116]	@ (800174c <HAL_UART_MspInit+0xf8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d12c      	bne.n	8001736 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e4:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 80016e6:	f043 0320 	orr.w	r3, r3, #32
 80016ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 80016ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001700:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 8001702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001706:	6313      	str	r3, [r2, #48]	@ 0x30
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_UART_MspInit+0xf0>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001714:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001726:	2308      	movs	r3, #8
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	4807      	ldr	r0, [pc, #28]	@ (8001750 <HAL_UART_MspInit+0xfc>)
 8001732:	f001 fbc7 	bl	8002ec4 <HAL_GPIO_Init>
}
 8001736:	bf00      	nop
 8001738:	3730      	adds	r7, #48	@ 0x30
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40004800 	.word	0x40004800
 8001744:	40023800 	.word	0x40023800
 8001748:	40020400 	.word	0x40020400
 800174c:	40011400 	.word	0x40011400
 8001750:	40021800 	.word	0x40021800

08001754 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001768:	4b44      	ldr	r3, [pc, #272]	@ (800187c <HAL_FMC_MspInit+0x128>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	f040 8081 	bne.w	8001874 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001772:	4b42      	ldr	r3, [pc, #264]	@ (800187c <HAL_FMC_MspInit+0x128>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	4b40      	ldr	r3, [pc, #256]	@ (8001880 <HAL_FMC_MspInit+0x12c>)
 800177e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001780:	4a3f      	ldr	r2, [pc, #252]	@ (8001880 <HAL_FMC_MspInit+0x12c>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6393      	str	r3, [r2, #56]	@ 0x38
 8001788:	4b3d      	ldr	r3, [pc, #244]	@ (8001880 <HAL_FMC_MspInit+0x12c>)
 800178a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8001794:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001798:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017a6:	230c      	movs	r3, #12
 80017a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	4619      	mov	r1, r3
 80017ae:	4835      	ldr	r0, [pc, #212]	@ (8001884 <HAL_FMC_MspInit+0x130>)
 80017b0:	f001 fb88 	bl	8002ec4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80017b4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80017b8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c6:	230c      	movs	r3, #12
 80017c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	482e      	ldr	r0, [pc, #184]	@ (8001888 <HAL_FMC_MspInit+0x134>)
 80017d0:	f001 fb78 	bl	8002ec4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 80017d4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80017d8:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017e6:	230c      	movs	r3, #12
 80017e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4827      	ldr	r0, [pc, #156]	@ (800188c <HAL_FMC_MspInit+0x138>)
 80017f0:	f001 fb68 	bl	8002ec4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 80017f4:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 80017f8:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001806:	230c      	movs	r3, #12
 8001808:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4820      	ldr	r0, [pc, #128]	@ (8001890 <HAL_FMC_MspInit+0x13c>)
 8001810:	f001 fb58 	bl	8002ec4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001814:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001818:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001826:	230c      	movs	r3, #12
 8001828:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4819      	ldr	r0, [pc, #100]	@ (8001894 <HAL_FMC_MspInit+0x140>)
 8001830:	f001 fb48 	bl	8002ec4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001834:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8001838:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001846:	230c      	movs	r3, #12
 8001848:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	4619      	mov	r1, r3
 800184e:	4812      	ldr	r0, [pc, #72]	@ (8001898 <HAL_FMC_MspInit+0x144>)
 8001850:	f001 fb38 	bl	8002ec4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001854:	2301      	movs	r3, #1
 8001856:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001864:	230c      	movs	r3, #12
 8001866:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	480b      	ldr	r0, [pc, #44]	@ (800189c <HAL_FMC_MspInit+0x148>)
 800186e:	f001 fb29 	bl	8002ec4 <HAL_GPIO_Init>
 8001872:	e000      	b.n	8001876 <HAL_FMC_MspInit+0x122>
    return;
 8001874:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200004b0 	.word	0x200004b0
 8001880:	40023800 	.word	0x40023800
 8001884:	40021000 	.word	0x40021000
 8001888:	40021800 	.word	0x40021800
 800188c:	40020c00 	.word	0x40020c00
 8001890:	40022000 	.word	0x40022000
 8001894:	40021400 	.word	0x40021400
 8001898:	40021c00 	.word	0x40021c00
 800189c:	40020800 	.word	0x40020800

080018a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018a8:	f7ff ff54 	bl	8001754 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a26      	ldr	r2, [pc, #152]	@ (800195c <HAL_SAI_MspInit+0xa8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d146      	bne.n	8001954 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <HAL_SAI_MspInit+0xac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10d      	bne.n	80018ea <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <HAL_SAI_MspInit+0xb0>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	4a23      	ldr	r2, [pc, #140]	@ (8001964 <HAL_SAI_MspInit+0xb0>)
 80018d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018de:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <HAL_SAI_MspInit+0xb0>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80018ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <HAL_SAI_MspInit+0xac>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001960 <HAL_SAI_MspInit+0xac>)
 80018f2:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 80018f4:	2330      	movs	r3, #48	@ 0x30
 80018f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001904:	2306      	movs	r3, #6
 8001906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4619      	mov	r1, r3
 800190e:	4816      	ldr	r0, [pc, #88]	@ (8001968 <HAL_SAI_MspInit+0xb4>)
 8001910:	f001 fad8 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001914:	2340      	movs	r3, #64	@ 0x40
 8001916:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001924:	2306      	movs	r3, #6
 8001926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	4619      	mov	r1, r3
 800192e:	480f      	ldr	r0, [pc, #60]	@ (800196c <HAL_SAI_MspInit+0xb8>)
 8001930:	f001 fac8 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001944:	2306      	movs	r3, #6
 8001946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	4619      	mov	r1, r3
 800194e:	4808      	ldr	r0, [pc, #32]	@ (8001970 <HAL_SAI_MspInit+0xbc>)
 8001950:	f001 fab8 	bl	8002ec4 <HAL_GPIO_Init>

    }
}
 8001954:	bf00      	nop
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40015804 	.word	0x40015804
 8001960:	200004b4 	.word	0x200004b4
 8001964:	40023800 	.word	0x40023800
 8001968:	40021000 	.word	0x40021000
 800196c:	40020c00 	.word	0x40020c00
 8001970:	40021800 	.word	0x40021800

08001974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08e      	sub	sp, #56	@ 0x38
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	4b33      	ldr	r3, [pc, #204]	@ (8001a58 <HAL_InitTick+0xe4>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	4a32      	ldr	r2, [pc, #200]	@ (8001a58 <HAL_InitTick+0xe4>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	6413      	str	r3, [r2, #64]	@ 0x40
 8001994:	4b30      	ldr	r3, [pc, #192]	@ (8001a58 <HAL_InitTick+0xe4>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019a0:	f107 0210 	add.w	r2, r7, #16
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 fd7a 	bl	80064a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019ba:	f004 fd4b 	bl	8006454 <HAL_RCC_GetPCLK1Freq>
 80019be:	6378      	str	r0, [r7, #52]	@ 0x34
 80019c0:	e004      	b.n	80019cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019c2:	f004 fd47 	bl	8006454 <HAL_RCC_GetPCLK1Freq>
 80019c6:	4603      	mov	r3, r0
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ce:	4a23      	ldr	r2, [pc, #140]	@ (8001a5c <HAL_InitTick+0xe8>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	0c9b      	lsrs	r3, r3, #18
 80019d6:	3b01      	subs	r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <HAL_InitTick+0xec>)
 80019dc:	4a21      	ldr	r2, [pc, #132]	@ (8001a64 <HAL_InitTick+0xf0>)
 80019de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <HAL_InitTick+0xec>)
 80019e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a60 <HAL_InitTick+0xec>)
 80019ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <HAL_InitTick+0xec>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <HAL_InitTick+0xec>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_InitTick+0xec>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a00:	4817      	ldr	r0, [pc, #92]	@ (8001a60 <HAL_InitTick+0xec>)
 8001a02:	f006 fe2c 	bl	800865e <HAL_TIM_Base_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d11b      	bne.n	8001a4c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a14:	4812      	ldr	r0, [pc, #72]	@ (8001a60 <HAL_InitTick+0xec>)
 8001a16:	f006 fe71 	bl	80086fc <HAL_TIM_Base_Start_IT>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d111      	bne.n	8001a4c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a28:	2036      	movs	r0, #54	@ 0x36
 8001a2a:	f000 fa2d 	bl	8001e88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d808      	bhi.n	8001a46 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	2036      	movs	r0, #54	@ 0x36
 8001a3a:	f000 fa09 	bl	8001e50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <HAL_InitTick+0xf4>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e002      	b.n	8001a4c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3738      	adds	r7, #56	@ 0x38
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	431bde83 	.word	0x431bde83
 8001a60:	200004b8 	.word	0x200004b8
 8001a64:	40001000 	.word	0x40001000
 8001a68:	20000004 	.word	0x20000004

08001a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <NMI_Handler+0x4>

08001a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <MemManage_Handler+0x4>

08001a84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <TIM6_DAC_IRQHandler+0x10>)
 8001ad2:	f006 fe83 	bl	80087dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200004b8 	.word	0x200004b8

08001ae0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <OTG_FS_IRQHandler+0x10>)
 8001ae6:	f001 feab 	bl	8003840 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200008f8 	.word	0x200008f8

08001af4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <LTDC_IRQHandler+0x10>)
 8001afa:	f003 ff09 	bl	8005910 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200001a4 	.word	0x200001a4

08001b08 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <DMA2D_IRQHandler+0x10>)
 8001b0e:	f000 fa2e 	bl	8001f6e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200000a0 	.word	0x200000a0

08001b1c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <DSI_IRQHandler+0x10>)
 8001b22:	f000 fe04 	bl	800272e <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200000e0 	.word	0x200000e0

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f00c faac 	bl	800e0bc <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20050000 	.word	0x20050000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	20000500 	.word	0x20000500
 8001b98:	20000e20 	.word	0x20000e20

08001b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	@ (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bc4:	f7ff ffea 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc8:	480c      	ldr	r0, [pc, #48]	@ (8001bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bca:	490d      	ldr	r1, [pc, #52]	@ (8001c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be0:	4c0a      	ldr	r4, [pc, #40]	@ (8001c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f00c fa6b 	bl	800e0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf2:	f7fe fc90 	bl	8000516 <main>
  bx  lr    
 8001bf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bf8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001c04:	0800e200 	.word	0x0800e200
  ldr r2, =_sbss
 8001c08:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001c0c:	20000e20 	.word	0x20000e20

08001c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c18:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <HAL_Init+0x40>)
 8001c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <HAL_Init+0x40>)
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a07      	ldr	r2, [pc, #28]	@ (8001c54 <HAL_Init+0x40>)
 8001c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f000 f8fc 	bl	8001e3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c42:	200f      	movs	r0, #15
 8001c44:	f7ff fe96 	bl	8001974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c48:	f7ff fa98 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_IncTick+0x20>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_IncTick+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <HAL_IncTick+0x24>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	20000504 	.word	0x20000504

08001c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return uwTick;
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_GetTick+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000504 	.word	0x20000504

08001c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff ffee 	bl	8001c80 <HAL_GetTick>
 8001ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d005      	beq.n	8001cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <HAL_Delay+0x44>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cbe:	bf00      	nop
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f7      	bhi.n	8001cc0 <HAL_Delay+0x28>
  {
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	@ (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	@ (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	@ (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	@ 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	@ 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff4c 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e62:	f7ff ff61 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001e66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	6978      	ldr	r0, [r7, #20]
 8001e6e:	f7ff ffb1 	bl	8001dd4 <NVIC_EncodePriority>
 8001e72:	4602      	mov	r2, r0
 8001e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff80 	bl	8001d80 <__NVIC_SetPriority>
}
 8001e80:	bf00      	nop
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff54 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00e      	b.n	8001ed4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	795b      	ldrb	r3, [r3, #5]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d105      	bne.n	8001ecc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff f980 	bl	80011cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e03b      	b.n	8001f66 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff f984 	bl	8001210 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2c:	f023 0107 	bic.w	r1, r3, #7
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68d1      	ldr	r1, [r2, #12]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	430b      	orrs	r3, r1
 8001f54:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d026      	beq.n	8001fde <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d021      	beq.n	8001fde <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fa8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d026      	beq.n	8002036 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d021      	beq.n	8002036 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002000:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2220      	movs	r2, #32
 8002008:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200e:	f043 0202 	orr.w	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2204      	movs	r2, #4
 800201a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d026      	beq.n	800208e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002046:	2b00      	cmp	r3, #0
 8002048:	d021      	beq.n	800208e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002058:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2208      	movs	r2, #8
 8002060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002066:	f043 0204 	orr.w	r2, r3, #4
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2204      	movs	r2, #4
 8002072:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00e      	beq.n	80020c0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020b0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2204      	movs	r2, #4
 80020b8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f853 	bl	8002166 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d024      	beq.n	8002114 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01f      	beq.n	8002114 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020e2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2202      	movs	r2, #2
 80020ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01f      	beq.n	800215e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01a      	beq.n	800215e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002136:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2210      	movs	r2, #16
 800213e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f80e 	bl	800217a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_DMA2D_ConfigLayer+0x20>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e079      	b.n	80022a4 <HAL_DMA2D_ConfigLayer+0x114>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	3318      	adds	r3, #24
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	041b      	lsls	r3, r3, #16
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80021da:	4b35      	ldr	r3, [pc, #212]	@ (80022b0 <HAL_DMA2D_ConfigLayer+0x120>)
 80021dc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b0a      	cmp	r3, #10
 80021e4:	d003      	beq.n	80021ee <HAL_DMA2D_ConfigLayer+0x5e>
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b09      	cmp	r3, #9
 80021ec:	d107      	bne.n	80021fe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e005      	b.n	800220a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	061b      	lsls	r3, r3, #24
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d120      	bne.n	8002252 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43db      	mvns	r3, r3
 800221a:	ea02 0103 	and.w	r1, r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	430a      	orrs	r2, r1
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b0a      	cmp	r3, #10
 8002238:	d003      	beq.n	8002242 <HAL_DMA2D_ConfigLayer+0xb2>
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b09      	cmp	r3, #9
 8002240:	d127      	bne.n	8002292 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800224e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002250:	e01f      	b.n	8002292 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	ea02 0103 	and.w	r1, r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	430a      	orrs	r2, r1
 8002268:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b0a      	cmp	r3, #10
 800227a:	d003      	beq.n	8002284 <HAL_DMA2D_ConfigLayer+0xf4>
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b09      	cmp	r3, #9
 8002282:	d106      	bne.n	8002292 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002290:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	ff03000f 	.word	0xff03000f

080022b4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	@ 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e16e      	b.n	80025a6 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7c5b      	ldrb	r3, [r3, #17]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe ffc4 	bl	8001260 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2203      	movs	r2, #3
 80022dc:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80022f2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80022fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002306:	f7ff fcbb 	bl	8001c80 <HAL_GetTick>
 800230a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800230c:	e009      	b.n	8002322 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800230e:	f7ff fcb7 	bl	8001c80 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800231c:	d901      	bls.n	8002322 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e141      	b.n	80025a6 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800232a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0ed      	beq.n	800230e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8002342:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8002346:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800235e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002366:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800239a:	2001      	movs	r0, #1
 800239c:	f7ff fc7c 	bl	8001c98 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a0:	f7ff fc6e 	bl	8001c80 <HAL_GetTick>
 80023a4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80023a6:	e009      	b.n	80023bc <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80023a8:	f7ff fc6a 	bl	8001c80 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023b6:	d901      	bls.n	80023bc <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0f4      	b.n	80025a6 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ed      	beq.n	80023a8 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023fc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0202 	orr.w	r2, r2, #2
 8002420:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0204 	orr.w	r2, r2, #4
 8002434:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0203 	bic.w	r2, r2, #3
 8002448:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8002462:	f7ff fc0d 	bl	8001c80 <HAL_GetTick>
 8002466:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d123      	bne.n	80024c0 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002478:	e00c      	b.n	8002494 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800247a:	f7ff fc01 	bl	8001c80 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002488:	d904      	bls.n	8002494 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e088      	b.n	80025a6 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800249c:	f003 0314 	and.w	r3, r3, #20
 80024a0:	2b14      	cmp	r3, #20
 80024a2:	d1ea      	bne.n	800247a <HAL_DSI_Init+0x1c6>
 80024a4:	e014      	b.n	80024d0 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80024a6:	f7ff fbeb 	bl	8001c80 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024b4:	d904      	bls.n	80024c0 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e072      	b.n	80025a6 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80024c8:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 80024cc:	2b94      	cmp	r3, #148	@ 0x94
 80024ce:	d1ea      	bne.n	80024a6 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_DSI_Init+0x22a>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	e000      	b.n	80024e0 <HAL_DSI_Init+0x22c>
 80024de:	2301      	movs	r3, #1
 80024e0:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	4a32      	ldr	r2, [pc, #200]	@ (80025b0 <HAL_DSI_Init+0x2fc>)
 80024e6:	fb03 f202 	mul.w	r2, r3, r2
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	409a      	lsls	r2, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002516:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	430a      	orrs	r2, r1
 800252a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2200      	movs	r2, #0
 800253e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0203 	bic.w	r2, r2, #3
 800257a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3728      	adds	r7, #40	@ 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	003d0900 	.word	0x003d0900

080025b4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7c1b      	ldrb	r3, [r3, #16]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_DSI_ConfigErrorMonitor+0x16>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0ab      	b.n	8002722 <HAL_DSI_ConfigErrorMonitor+0x16e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00b      	beq.n	800260c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002604:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002608:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8002626:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d009      	beq.n	8002648 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0202 	orr.w	r2, r2, #2
 8002662:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 020c 	orr.w	r2, r2, #12
 8002680:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0210 	orr.w	r2, r2, #16
 800269e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d009      	beq.n	80026c0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0220 	orr.w	r2, r2, #32
 80026bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026da:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d009      	beq.n	80026fc <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026f8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8002716:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00f      	beq.n	8002766 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f8ad 	bl	80028c0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00f      	beq.n	8002796 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2202      	movs	r2, #2
 800278c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f89f 	bl	80028d4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 808c 	beq.w	80028b8 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80027a8:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80027c0:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	4013      	ands	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f043 0202 	orr.w	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f043 0204 	orr.w	r2, r3, #4
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f043 0208 	orr.w	r2, r3, #8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f043 0210 	orr.w	r2, r3, #16
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f818 	bl	80028e8 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7c1b      	ldrb	r3, [r3, #16]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_DSI_SetGenericVCID+0x16>
 800290e:	2302      	movs	r3, #2
 8002910:	e016      	b.n	8002940 <HAL_DSI_SetGenericVCID+0x44>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0203 	bic.w	r2, r2, #3
 8002926:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7c1b      	ldrb	r3, [r3, #16]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800295e:	2302      	movs	r3, #2
 8002960:	e0c5      	b.n	8002aee <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0203 	bic.w	r2, r2, #3
 80029ae:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0207 	bic.w	r2, r2, #7
 80029d0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6959      	ldr	r1, [r3, #20]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 020f 	bic.w	r2, r2, #15
 80029fe:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6919      	ldr	r1, [r3, #16]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 020e 	bic.w	r2, r2, #14
 8002a22:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	005a      	lsls	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002a70:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0202 	orr.w	r2, r2, #2
 8002ae2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7c1b      	ldrb	r3, [r3, #16]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_DSI_ConfigCommand+0x16>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e049      	b.n	8002ba6 <HAL_DSI_ConfigCommand+0xaa>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <HAL_DSI_ConfigCommand+0xb8>)
 8002b24:	400b      	ands	r3, r1
 8002b26:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002b36:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8002b3c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8002b42:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8002b48:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8002b4e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8002b54:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8002b5a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8002b60:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8002b66:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8002b6c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8002b72:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0202 	bic.w	r2, r2, #2
 8002b8a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	fef080ff 	.word	0xfef080ff

08002bb8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7c1b      	ldrb	r3, [r3, #16]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_DSI_ConfigFlowControl+0x16>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e016      	b.n	8002bfc <HAL_DSI_ConfigFlowControl+0x44>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 021f 	bic.w	r2, r2, #31
 8002be2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7c1b      	ldrb	r3, [r3, #16]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_DSI_ConfigPhyTimer+0x16>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e058      	b.n	8002cd0 <HAL_DSI_ConfigPhyTimer+0xc8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	bf38      	it	cc
 8002c30:	4613      	movcc	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8002c44:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	041a      	lsls	r2, r3, #16
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8002c72:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002cac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	021a      	lsls	r2, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7c1b      	ldrb	r3, [r3, #16]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_DSI_ConfigHostTimeouts+0x16>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0b4      	b.n	8002e5c <HAL_DSI_ConfigHostTimeouts+0x180>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002d06:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6899      	ldr	r1, [r3, #8]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	021a      	lsls	r2, r3, #8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b292      	uxth	r2, r2
 8002d28:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	041a      	lsls	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	0c1b      	lsrs	r3, r3, #16
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	0c1b      	lsrs	r3, r3, #16
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8002de6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	041b      	lsls	r3, r3, #16
 8002e3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	7c1b      	ldrb	r3, [r3, #16]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_DSI_SetLowPowerRXFilter+0x16>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e01b      	b.n	8002eb6 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8002e94:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	065a      	lsls	r2, r3, #25
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	@ 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e177      	b.n	80031d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f040 8166 	bne.w	80031ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d005      	beq.n	8002f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d130      	bne.n	8002f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	2203      	movs	r2, #3
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 0201 	and.w	r2, r3, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d017      	beq.n	8002fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d123      	bne.n	8003008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	08da      	lsrs	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3208      	adds	r2, #8
 8002fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3208      	adds	r2, #8
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0203 	and.w	r2, r3, #3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80c0 	beq.w	80031ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b66      	ldr	r3, [pc, #408]	@ (80031e8 <HAL_GPIO_Init+0x324>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003052:	4a65      	ldr	r2, [pc, #404]	@ (80031e8 <HAL_GPIO_Init+0x324>)
 8003054:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003058:	6453      	str	r3, [r2, #68]	@ 0x44
 800305a:	4b63      	ldr	r3, [pc, #396]	@ (80031e8 <HAL_GPIO_Init+0x324>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003066:	4a61      	ldr	r2, [pc, #388]	@ (80031ec <HAL_GPIO_Init+0x328>)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a58      	ldr	r2, [pc, #352]	@ (80031f0 <HAL_GPIO_Init+0x32c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d037      	beq.n	8003102 <HAL_GPIO_Init+0x23e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a57      	ldr	r2, [pc, #348]	@ (80031f4 <HAL_GPIO_Init+0x330>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d031      	beq.n	80030fe <HAL_GPIO_Init+0x23a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a56      	ldr	r2, [pc, #344]	@ (80031f8 <HAL_GPIO_Init+0x334>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d02b      	beq.n	80030fa <HAL_GPIO_Init+0x236>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a55      	ldr	r2, [pc, #340]	@ (80031fc <HAL_GPIO_Init+0x338>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d025      	beq.n	80030f6 <HAL_GPIO_Init+0x232>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a54      	ldr	r2, [pc, #336]	@ (8003200 <HAL_GPIO_Init+0x33c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01f      	beq.n	80030f2 <HAL_GPIO_Init+0x22e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a53      	ldr	r2, [pc, #332]	@ (8003204 <HAL_GPIO_Init+0x340>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d019      	beq.n	80030ee <HAL_GPIO_Init+0x22a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a52      	ldr	r2, [pc, #328]	@ (8003208 <HAL_GPIO_Init+0x344>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_GPIO_Init+0x226>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a51      	ldr	r2, [pc, #324]	@ (800320c <HAL_GPIO_Init+0x348>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00d      	beq.n	80030e6 <HAL_GPIO_Init+0x222>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a50      	ldr	r2, [pc, #320]	@ (8003210 <HAL_GPIO_Init+0x34c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <HAL_GPIO_Init+0x21e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003214 <HAL_GPIO_Init+0x350>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d101      	bne.n	80030de <HAL_GPIO_Init+0x21a>
 80030da:	2309      	movs	r3, #9
 80030dc:	e012      	b.n	8003104 <HAL_GPIO_Init+0x240>
 80030de:	230a      	movs	r3, #10
 80030e0:	e010      	b.n	8003104 <HAL_GPIO_Init+0x240>
 80030e2:	2308      	movs	r3, #8
 80030e4:	e00e      	b.n	8003104 <HAL_GPIO_Init+0x240>
 80030e6:	2307      	movs	r3, #7
 80030e8:	e00c      	b.n	8003104 <HAL_GPIO_Init+0x240>
 80030ea:	2306      	movs	r3, #6
 80030ec:	e00a      	b.n	8003104 <HAL_GPIO_Init+0x240>
 80030ee:	2305      	movs	r3, #5
 80030f0:	e008      	b.n	8003104 <HAL_GPIO_Init+0x240>
 80030f2:	2304      	movs	r3, #4
 80030f4:	e006      	b.n	8003104 <HAL_GPIO_Init+0x240>
 80030f6:	2303      	movs	r3, #3
 80030f8:	e004      	b.n	8003104 <HAL_GPIO_Init+0x240>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e002      	b.n	8003104 <HAL_GPIO_Init+0x240>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_GPIO_Init+0x240>
 8003102:	2300      	movs	r3, #0
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	f002 0203 	and.w	r2, r2, #3
 800310a:	0092      	lsls	r2, r2, #2
 800310c:	4093      	lsls	r3, r2
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003114:	4935      	ldr	r1, [pc, #212]	@ (80031ec <HAL_GPIO_Init+0x328>)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	3302      	adds	r3, #2
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003122:	4b3d      	ldr	r3, [pc, #244]	@ (8003218 <HAL_GPIO_Init+0x354>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003146:	4a34      	ldr	r2, [pc, #208]	@ (8003218 <HAL_GPIO_Init+0x354>)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800314c:	4b32      	ldr	r3, [pc, #200]	@ (8003218 <HAL_GPIO_Init+0x354>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003170:	4a29      	ldr	r2, [pc, #164]	@ (8003218 <HAL_GPIO_Init+0x354>)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003176:	4b28      	ldr	r3, [pc, #160]	@ (8003218 <HAL_GPIO_Init+0x354>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800319a:	4a1f      	ldr	r2, [pc, #124]	@ (8003218 <HAL_GPIO_Init+0x354>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003218 <HAL_GPIO_Init+0x354>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c4:	4a14      	ldr	r2, [pc, #80]	@ (8003218 <HAL_GPIO_Init+0x354>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3301      	adds	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b0f      	cmp	r3, #15
 80031d4:	f67f ae84 	bls.w	8002ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3724      	adds	r7, #36	@ 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40013800 	.word	0x40013800
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40020400 	.word	0x40020400
 80031f8:	40020800 	.word	0x40020800
 80031fc:	40020c00 	.word	0x40020c00
 8003200:	40021000 	.word	0x40021000
 8003204:	40021400 	.word	0x40021400
 8003208:	40021800 	.word	0x40021800
 800320c:	40021c00 	.word	0x40021c00
 8003210:	40022000 	.word	0x40022000
 8003214:	40022400 	.word	0x40022400
 8003218:	40013c00 	.word	0x40013c00

0800321c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	e001      	b.n	800323e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
 8003258:	4613      	mov	r3, r2
 800325a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800325c:	787b      	ldrb	r3, [r7, #1]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003268:	e003      	b.n	8003272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	041a      	lsls	r2, r3, #16
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	619a      	str	r2, [r3, #24]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af02      	add	r7, sp, #8
 8003284:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e059      	b.n	8003344 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f00a fb84 	bl	800d9b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2203      	movs	r2, #3
 80032b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032be:	d102      	bne.n	80032c6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f006 ffaf 	bl	800a22e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7c1a      	ldrb	r2, [r3, #16]
 80032d8:	f88d 2000 	strb.w	r2, [sp]
 80032dc:	3304      	adds	r3, #4
 80032de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032e0:	f006 ff30 	bl	800a144 <USB_CoreInit>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e026      	b.n	8003344 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2101      	movs	r1, #1
 80032fc:	4618      	mov	r0, r3
 80032fe:	f006 ffa7 	bl	800a250 <USB_SetCurrentMode>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e017      	b.n	8003344 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	7c1a      	ldrb	r2, [r3, #16]
 800331c:	f88d 2000 	strb.w	r2, [sp]
 8003320:	3304      	adds	r3, #4
 8003322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003324:	f007 f94a 	bl	800a5bc <USB_HostInit>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e004      	b.n	8003344 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b08b      	sub	sp, #44	@ 0x2c
 8003350:	af04      	add	r7, sp, #16
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	70fb      	strb	r3, [r7, #3]
 800335e:	460b      	mov	r3, r1
 8003360:	70bb      	strb	r3, [r7, #2]
 8003362:	4613      	mov	r3, r2
 8003364:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003366:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003368:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_HCD_HC_Init+0x2c>
 8003374:	2302      	movs	r3, #2
 8003376:	e09d      	b.n	80034b4 <HAL_HCD_HC_Init+0x168>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	3319      	adds	r3, #25
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	3314      	adds	r3, #20
 80033a4:	787a      	ldrb	r2, [r7, #1]
 80033a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3315      	adds	r3, #21
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	3326      	adds	r3, #38	@ 0x26
 80033cc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80033d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	78bb      	ldrb	r3, [r7, #2]
 80033d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033da:	b2d8      	uxtb	r0, r3
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3316      	adds	r3, #22
 80033ea:	4602      	mov	r2, r0
 80033ec:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fbc8 	bl	8003b88 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80033f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da0a      	bge.n	8003416 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3317      	adds	r3, #23
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e009      	b.n	800342a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3317      	adds	r3, #23
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f007 fa1c 	bl	800a86c <USB_GetHostSpeed>
 8003434:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003436:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d10b      	bne.n	8003456 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800343e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <HAL_HCD_HC_Init+0x10a>
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2bbc      	cmp	r3, #188	@ 0xbc
 8003450:	d901      	bls.n	8003456 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003452:	23bc      	movs	r3, #188	@ 0xbc
 8003454:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	3318      	adds	r3, #24
 8003466:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800346a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	b298      	uxth	r0, r3
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	3328      	adds	r3, #40	@ 0x28
 8003480:	4602      	mov	r2, r0
 8003482:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	b29b      	uxth	r3, r3
 800348c:	787c      	ldrb	r4, [r7, #1]
 800348e:	78ba      	ldrb	r2, [r7, #2]
 8003490:	78f9      	ldrb	r1, [r7, #3]
 8003492:	9302      	str	r3, [sp, #8]
 8003494:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	4623      	mov	r3, r4
 80034a2:	f007 fa0b 	bl	800a8bc <USB_HC_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd90      	pop	{r4, r7, pc}

080034bc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_HCD_HC_Halt+0x1e>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e00f      	b.n	80034fa <HAL_HCD_HC_Halt+0x3e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	4611      	mov	r1, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f007 fd9d 	bl	800b02a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	4608      	mov	r0, r1
 800350e:	4611      	mov	r1, r2
 8003510:	461a      	mov	r2, r3
 8003512:	4603      	mov	r3, r0
 8003514:	70fb      	strb	r3, [r7, #3]
 8003516:	460b      	mov	r3, r1
 8003518:	70bb      	strb	r3, [r7, #2]
 800351a:	4613      	mov	r3, r2
 800351c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3317      	adds	r3, #23
 800352e:	78ba      	ldrb	r2, [r7, #2]
 8003530:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3326      	adds	r3, #38	@ 0x26
 8003542:	787a      	ldrb	r2, [r7, #1]
 8003544:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003546:	7c3b      	ldrb	r3, [r7, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d114      	bne.n	8003576 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	332a      	adds	r3, #42	@ 0x2a
 800355c:	2203      	movs	r2, #3
 800355e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	3319      	adds	r3, #25
 8003570:	7f3a      	ldrb	r2, [r7, #28]
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e009      	b.n	800358a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	332a      	adds	r3, #42	@ 0x2a
 8003586:	2202      	movs	r2, #2
 8003588:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800358a:	787b      	ldrb	r3, [r7, #1]
 800358c:	2b03      	cmp	r3, #3
 800358e:	f200 8102 	bhi.w	8003796 <HAL_HCD_HC_SubmitRequest+0x292>
 8003592:	a201      	add	r2, pc, #4	@ (adr r2, 8003598 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035a9 	.word	0x080035a9
 800359c:	08003781 	.word	0x08003781
 80035a0:	0800366d 	.word	0x0800366d
 80035a4:	080036f7 	.word	0x080036f7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80035a8:	7c3b      	ldrb	r3, [r7, #16]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	f040 80f5 	bne.w	800379a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80035b0:	78bb      	ldrb	r3, [r7, #2]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d12d      	bne.n	8003612 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80035b6:	8b3b      	ldrh	r3, [r7, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	333d      	adds	r3, #61	@ 0x3d
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	333d      	adds	r3, #61	@ 0x3d
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	332a      	adds	r3, #42	@ 0x2a
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80035fa:	e0ce      	b.n	800379a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	332a      	adds	r3, #42	@ 0x2a
 800360c:	2202      	movs	r2, #2
 800360e:	701a      	strb	r2, [r3, #0]
      break;
 8003610:	e0c3      	b.n	800379a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	331a      	adds	r3, #26
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 80b8 	bne.w	800379a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	333c      	adds	r3, #60	@ 0x3c
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	332a      	adds	r3, #42	@ 0x2a
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
      break;
 8003654:	e0a1      	b.n	800379a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	332a      	adds	r3, #42	@ 0x2a
 8003666:	2202      	movs	r2, #2
 8003668:	701a      	strb	r2, [r3, #0]
      break;
 800366a:	e096      	b.n	800379a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800366c:	78bb      	ldrb	r3, [r7, #2]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d120      	bne.n	80036b4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	333d      	adds	r3, #61	@ 0x3d
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	332a      	adds	r3, #42	@ 0x2a
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800369c:	e07e      	b.n	800379c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	332a      	adds	r3, #42	@ 0x2a
 80036ae:	2202      	movs	r2, #2
 80036b0:	701a      	strb	r2, [r3, #0]
      break;
 80036b2:	e073      	b.n	800379c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	333c      	adds	r3, #60	@ 0x3c
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	332a      	adds	r3, #42	@ 0x2a
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
      break;
 80036de:	e05d      	b.n	800379c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	332a      	adds	r3, #42	@ 0x2a
 80036f0:	2202      	movs	r2, #2
 80036f2:	701a      	strb	r2, [r3, #0]
      break;
 80036f4:	e052      	b.n	800379c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80036f6:	78bb      	ldrb	r3, [r7, #2]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d120      	bne.n	800373e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	333d      	adds	r3, #61	@ 0x3d
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	332a      	adds	r3, #42	@ 0x2a
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003726:	e039      	b.n	800379c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	332a      	adds	r3, #42	@ 0x2a
 8003738:	2202      	movs	r2, #2
 800373a:	701a      	strb	r2, [r3, #0]
      break;
 800373c:	e02e      	b.n	800379c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	333c      	adds	r3, #60	@ 0x3c
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	332a      	adds	r3, #42	@ 0x2a
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
      break;
 8003768:	e018      	b.n	800379c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	332a      	adds	r3, #42	@ 0x2a
 800377a:	2202      	movs	r2, #2
 800377c:	701a      	strb	r2, [r3, #0]
      break;
 800377e:	e00d      	b.n	800379c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	332a      	adds	r3, #42	@ 0x2a
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
      break;
 8003794:	e002      	b.n	800379c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800379a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	332c      	adds	r3, #44	@ 0x2c
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	8b39      	ldrh	r1, [r7, #24]
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4403      	add	r3, r0
 80037c0:	3334      	adds	r3, #52	@ 0x34
 80037c2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	334c      	adds	r3, #76	@ 0x4c
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3338      	adds	r3, #56	@ 0x38
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3315      	adds	r3, #21
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	334d      	adds	r3, #77	@ 0x4d
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	3310      	adds	r3, #16
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4413      	add	r3, r2
 8003828:	1d19      	adds	r1, r3, #4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	799b      	ldrb	r3, [r3, #6]
 800382e:	461a      	mov	r2, r3
 8003830:	f007 f970 	bl	800ab14 <USB_HC_StartXfer>
 8003834:	4603      	mov	r3, r0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop

08003840 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f006 fe70 	bl	800a53c <USB_GetMode>
 800385c:	4603      	mov	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	f040 80fb 	bne.w	8003a5a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f006 fe33 	bl	800a4d4 <USB_ReadInterrupts>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80f1 	beq.w	8003a58 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f006 fe2a 	bl	800a4d4 <USB_ReadInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800388a:	d104      	bne.n	8003896 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003894:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f006 fe1a 	bl	800a4d4 <USB_ReadInterrupts>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038aa:	d104      	bne.n	80038b6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80038b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f006 fe0a 	bl	800a4d4 <USB_ReadInterrupts>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038ca:	d104      	bne.n	80038d6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80038d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f006 fdfa 	bl	800a4d4 <USB_ReadInterrupts>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d103      	bne.n	80038f2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2202      	movs	r2, #2
 80038f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f006 fdec 	bl	800a4d4 <USB_ReadInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003906:	d120      	bne.n	800394a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003910:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d113      	bne.n	800394a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003922:	2110      	movs	r1, #16
 8003924:	6938      	ldr	r0, [r7, #16]
 8003926:	f006 fcdf 	bl	800a2e8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800392a:	6938      	ldr	r0, [r7, #16]
 800392c:	f006 fd0e 	bl	800a34c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7a5b      	ldrb	r3, [r3, #9]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d105      	bne.n	8003944 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2101      	movs	r1, #1
 800393e:	4618      	mov	r0, r3
 8003940:	f006 fef4 	bl	800a72c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f00a f8b5 	bl	800dab4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f006 fdc0 	bl	800a4d4 <USB_ReadInterrupts>
 8003954:	4603      	mov	r3, r0
 8003956:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800395a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800395e:	d102      	bne.n	8003966 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f001 fd4d 	bl	8005400 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f006 fdb2 	bl	800a4d4 <USB_ReadInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b08      	cmp	r3, #8
 8003978:	d106      	bne.n	8003988 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f00a f87e 	bl	800da7c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2208      	movs	r2, #8
 8003986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f006 fda1 	bl	800a4d4 <USB_ReadInterrupts>
 8003992:	4603      	mov	r3, r0
 8003994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003998:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800399c:	d139      	bne.n	8003a12 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f007 fb30 	bl	800b008 <USB_HC_ReadInterrupt>
 80039a8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	e025      	b.n	80039fc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d018      	beq.n	80039f6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039da:	d106      	bne.n	80039ea <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f905 	bl	8003bf2 <HCD_HC_IN_IRQHandler>
 80039e8:	e005      	b.n	80039f6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 ff67 	bl	80048c4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	3301      	adds	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	795b      	ldrb	r3, [r3, #5]
 8003a00:	461a      	mov	r2, r3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d3d3      	bcc.n	80039b0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f006 fd5c 	bl	800a4d4 <USB_ReadInterrupts>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d101      	bne.n	8003a2a <HAL_HCD_IRQHandler+0x1ea>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_HCD_IRQHandler+0x1ec>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d014      	beq.n	8003a5a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0210 	bic.w	r2, r2, #16
 8003a3e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f001 fbfe 	bl	8005242 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0210 	orr.w	r2, r2, #16
 8003a54:	619a      	str	r2, [r3, #24]
 8003a56:	e000      	b.n	8003a5a <HAL_HCD_IRQHandler+0x21a>
      return;
 8003a58:	bf00      	nop
    }
  }
}
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_HCD_Start+0x16>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e013      	b.n	8003a9e <HAL_HCD_Start+0x3e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2101      	movs	r1, #1
 8003a84:	4618      	mov	r0, r3
 8003a86:	f006 feb8 	bl	800a7fa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f006 fbbc 	bl	800a20c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_HCD_Stop+0x16>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e00d      	b.n	8003ad8 <HAL_HCD_Stop+0x32>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f007 fc0b 	bl	800b2e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f006 fe5a 	bl	800a7a6 <USB_ResetPort>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	334c      	adds	r3, #76	@ 0x4c
 8003b18:	781b      	ldrb	r3, [r3, #0]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3338      	adds	r3, #56	@ 0x38
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f006 fe9c 	bl	800a89a <USB_GetCurrentFrame>
 8003b62:	4603      	mov	r3, r0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f006 fe77 	bl	800a86c <USB_GetHostSpeed>
 8003b7e:	4603      	mov	r3, r0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	331a      	adds	r3, #26
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	331b      	adds	r3, #27
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3325      	adds	r3, #37	@ 0x25
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	3324      	adds	r3, #36	@ 0x24
 8003be0:	2200      	movs	r2, #0
 8003be2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b086      	sub	sp, #24
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f006 fc72 	bl	800a4fa <USB_ReadChInterrupts>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d11a      	bne.n	8003c56 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2304      	movs	r3, #4
 8003c30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	334d      	adds	r3, #77	@ 0x4d
 8003c42:	2207      	movs	r2, #7
 8003c44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f007 f9eb 	bl	800b02a <USB_HC_Halt>
 8003c54:	e09e      	b.n	8003d94 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f006 fc4b 	bl	800a4fa <USB_ReadChInterrupts>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c6e:	d11b      	bne.n	8003ca8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	334d      	adds	r3, #77	@ 0x4d
 8003c94:	2208      	movs	r2, #8
 8003c96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f007 f9c2 	bl	800b02a <USB_HC_Halt>
 8003ca6:	e075      	b.n	8003d94 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f006 fc22 	bl	800a4fa <USB_ReadChInterrupts>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d11a      	bne.n	8003cf6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2308      	movs	r3, #8
 8003cd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	334d      	adds	r3, #77	@ 0x4d
 8003ce2:	2206      	movs	r2, #6
 8003ce4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f007 f99b 	bl	800b02a <USB_HC_Halt>
 8003cf4:	e04e      	b.n	8003d94 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f006 fbfb 	bl	800a4fa <USB_ReadChInterrupts>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0e:	d11b      	bne.n	8003d48 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	334d      	adds	r3, #77	@ 0x4d
 8003d34:	2209      	movs	r2, #9
 8003d36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f007 f972 	bl	800b02a <USB_HC_Halt>
 8003d46:	e025      	b.n	8003d94 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f006 fbd2 	bl	800a4fa <USB_ReadChInterrupts>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5c:	2b80      	cmp	r3, #128	@ 0x80
 8003d5e:	d119      	bne.n	8003d94 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2380      	movs	r3, #128	@ 0x80
 8003d70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	334d      	adds	r3, #77	@ 0x4d
 8003d82:	2207      	movs	r2, #7
 8003d84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f007 f94b 	bl	800b02a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f006 fbac 	bl	800a4fa <USB_ReadChInterrupts>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dac:	d112      	bne.n	8003dd4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f007 f937 	bl	800b02a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dce:	6093      	str	r3, [r2, #8]
 8003dd0:	f000 bd75 	b.w	80048be <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f006 fb8c 	bl	800a4fa <USB_ReadChInterrupts>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	f040 8128 	bne.w	800403e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2320      	movs	r3, #32
 8003dfe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	331b      	adds	r3, #27
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d119      	bne.n	8003e4a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	331b      	adds	r3, #27
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	0151      	lsls	r1, r2, #5
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	440a      	add	r2, r1
 8003e40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e48:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	799b      	ldrb	r3, [r3, #6]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01b      	beq.n	8003e8a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	3330      	adds	r3, #48	@ 0x30
 8003e62:	6819      	ldr	r1, [r3, #0]
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	1ac9      	subs	r1, r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4403      	add	r3, r0
 8003e86:	3338      	adds	r3, #56	@ 0x38
 8003e88:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	334d      	adds	r3, #77	@ 0x4d
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	3344      	adds	r3, #68	@ 0x44
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3326      	adds	r3, #38	@ 0x26
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3326      	adds	r3, #38	@ 0x26
 8003eea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d110      	bne.n	8003f12 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f007 f896 	bl	800b02a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	6093      	str	r3, [r2, #8]
 8003f10:	e03d      	b.n	8003f8e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	3326      	adds	r3, #38	@ 0x26
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d00a      	beq.n	8003f3e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	3326      	adds	r3, #38	@ 0x26
 8003f38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d127      	bne.n	8003f8e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	0151      	lsls	r1, r2, #5
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	440a      	add	r2, r1
 8003f54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f5c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	334c      	adds	r3, #76	@ 0x4c
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	334c      	adds	r3, #76	@ 0x4c
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f009 fda1 	bl	800dad0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	799b      	ldrb	r3, [r3, #6]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d13b      	bne.n	800400e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3338      	adds	r3, #56	@ 0x38
 8003fa6:	6819      	ldr	r1, [r3, #0]
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4403      	add	r3, r0
 8003fb6:	3328      	adds	r3, #40	@ 0x28
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	440b      	add	r3, r1
 8003fbc:	1e59      	subs	r1, r3, #1
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4403      	add	r3, r0
 8003fcc:	3328      	adds	r3, #40	@ 0x28
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8470 	beq.w	80048be <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	333c      	adds	r3, #60	@ 0x3c
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	f083 0301 	eor.w	r3, r3, #1
 8003ff6:	b2d8      	uxtb	r0, r3
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	333c      	adds	r3, #60	@ 0x3c
 8004006:	4602      	mov	r2, r0
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	f000 bc58 	b.w	80048be <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	333c      	adds	r3, #60	@ 0x3c
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	f083 0301 	eor.w	r3, r3, #1
 8004026:	b2d8      	uxtb	r0, r3
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	333c      	adds	r3, #60	@ 0x3c
 8004036:	4602      	mov	r2, r0
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	f000 bc40 	b.w	80048be <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f006 fa57 	bl	800a4fa <USB_ReadChInterrupts>
 800404c:	4603      	mov	r3, r0
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b20      	cmp	r3, #32
 8004054:	d131      	bne.n	80040ba <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004062:	461a      	mov	r2, r3
 8004064:	2320      	movs	r3, #32
 8004066:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	331a      	adds	r3, #26
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b01      	cmp	r3, #1
 800407c:	f040 841f 	bne.w	80048be <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	331b      	adds	r3, #27
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	334d      	adds	r3, #77	@ 0x4d
 80040a4:	2203      	movs	r2, #3
 80040a6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	4611      	mov	r1, r2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f006 ffba 	bl	800b02a <USB_HC_Halt>
 80040b6:	f000 bc02 	b.w	80048be <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f006 fa19 	bl	800a4fa <USB_ReadChInterrupts>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	f040 8305 	bne.w	80046de <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040e0:	461a      	mov	r2, r3
 80040e2:	2302      	movs	r3, #2
 80040e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	334d      	adds	r3, #77	@ 0x4d
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d114      	bne.n	8004126 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	334d      	adds	r3, #77	@ 0x4d
 800410c:	2202      	movs	r2, #2
 800410e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	334c      	adds	r3, #76	@ 0x4c
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e2cc      	b.n	80046c0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	334d      	adds	r3, #77	@ 0x4d
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b06      	cmp	r3, #6
 800413a:	d114      	bne.n	8004166 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800413c:	78fa      	ldrb	r2, [r7, #3]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	334d      	adds	r3, #77	@ 0x4d
 800414c:	2202      	movs	r2, #2
 800414e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004150:	78fa      	ldrb	r2, [r7, #3]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	334c      	adds	r3, #76	@ 0x4c
 8004160:	2205      	movs	r2, #5
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	e2ac      	b.n	80046c0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	334d      	adds	r3, #77	@ 0x4d
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b07      	cmp	r3, #7
 800417a:	d00b      	beq.n	8004194 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	334d      	adds	r3, #77	@ 0x4d
 800418c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800418e:	2b09      	cmp	r3, #9
 8004190:	f040 80a6 	bne.w	80042e0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	334d      	adds	r3, #77	@ 0x4d
 80041a4:	2202      	movs	r2, #2
 80041a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	3344      	adds	r3, #68	@ 0x44
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	1c59      	adds	r1, r3, #1
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4403      	add	r3, r0
 80041c8:	3344      	adds	r3, #68	@ 0x44
 80041ca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	1a9b      	subs	r3, r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	3344      	adds	r3, #68	@ 0x44
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d943      	bls.n	800426a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	3344      	adds	r3, #68	@ 0x44
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	331a      	adds	r3, #26
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d123      	bne.n	8004254 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800420c:	78fa      	ldrb	r2, [r7, #3]
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	331b      	adds	r3, #27
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	331c      	adds	r3, #28
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4413      	add	r3, r2
 800423c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	0151      	lsls	r1, r2, #5
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	440a      	add	r2, r1
 800424a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800424e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004252:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	334c      	adds	r3, #76	@ 0x4c
 8004264:	2204      	movs	r2, #4
 8004266:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004268:	e229      	b.n	80046be <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	334c      	adds	r3, #76	@ 0x4c
 800427a:	2202      	movs	r2, #2
 800427c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3326      	adds	r3, #38	@ 0x26
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	3326      	adds	r3, #38	@ 0x26
 80042a4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	f040 8209 	bne.w	80046be <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042c2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042ca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d8:	461a      	mov	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042de:	e1ee      	b.n	80046be <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	334d      	adds	r3, #77	@ 0x4d
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b05      	cmp	r3, #5
 80042f4:	f040 80c8 	bne.w	8004488 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	334d      	adds	r3, #77	@ 0x4d
 8004308:	2202      	movs	r2, #2
 800430a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	331b      	adds	r3, #27
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	f040 81ce 	bne.w	80046c0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	3326      	adds	r3, #38	@ 0x26
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b03      	cmp	r3, #3
 8004338:	d16b      	bne.n	8004412 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	3348      	adds	r3, #72	@ 0x48
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	1c59      	adds	r1, r3, #1
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4403      	add	r3, r0
 800435a:	3348      	adds	r3, #72	@ 0x48
 800435c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	3348      	adds	r3, #72	@ 0x48
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d943      	bls.n	80043fc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	3348      	adds	r3, #72	@ 0x48
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004388:	78fa      	ldrb	r2, [r7, #3]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	331b      	adds	r3, #27
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800439c:	78fa      	ldrb	r2, [r7, #3]
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	3344      	adds	r3, #68	@ 0x44
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d809      	bhi.n	80043c6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	331c      	adds	r3, #28
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	0151      	lsls	r1, r2, #5
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	440a      	add	r2, r1
 80043dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	334c      	adds	r3, #76	@ 0x4c
 80043f6:	2204      	movs	r2, #4
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e014      	b.n	8004426 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043fc:	78fa      	ldrb	r2, [r7, #3]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	334c      	adds	r3, #76	@ 0x4c
 800440c:	2202      	movs	r2, #2
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e009      	b.n	8004426 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	334c      	adds	r3, #76	@ 0x4c
 8004422:	2202      	movs	r2, #2
 8004424:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	3326      	adds	r3, #38	@ 0x26
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800443c:	78fa      	ldrb	r2, [r7, #3]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	3326      	adds	r3, #38	@ 0x26
 800444c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800444e:	2b02      	cmp	r3, #2
 8004450:	f040 8136 	bne.w	80046c0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800446a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004472:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004480:	461a      	mov	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e11b      	b.n	80046c0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	334d      	adds	r3, #77	@ 0x4d
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b03      	cmp	r3, #3
 800449c:	f040 8081 	bne.w	80045a2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044a0:	78fa      	ldrb	r2, [r7, #3]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	334d      	adds	r3, #77	@ 0x4d
 80044b0:	2202      	movs	r2, #2
 80044b2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	331b      	adds	r3, #27
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	f040 80fa 	bne.w	80046c0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	334c      	adds	r3, #76	@ 0x4c
 80044dc:	2202      	movs	r2, #2
 80044de:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fe:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	440a      	add	r2, r1
 8004516:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800451a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800451e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	440a      	add	r2, r1
 8004536:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800453a:	f023 0320 	bic.w	r3, r3, #32
 800453e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	3326      	adds	r3, #38	@ 0x26
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	3326      	adds	r3, #38	@ 0x26
 8004566:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004568:	2b02      	cmp	r3, #2
 800456a:	f040 80a9 	bne.w	80046c0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4413      	add	r3, r2
 8004576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004584:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800458c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800459a:	461a      	mov	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	e08e      	b.n	80046c0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	334d      	adds	r3, #77	@ 0x4d
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d143      	bne.n	8004640 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	334d      	adds	r3, #77	@ 0x4d
 80045c8:	2202      	movs	r2, #2
 80045ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	334c      	adds	r3, #76	@ 0x4c
 80045dc:	2202      	movs	r2, #2
 80045de:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	3326      	adds	r3, #38	@ 0x26
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3326      	adds	r3, #38	@ 0x26
 8004606:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004608:	2b02      	cmp	r3, #2
 800460a:	d159      	bne.n	80046c0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004622:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800462a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004638:	461a      	mov	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e03f      	b.n	80046c0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	334d      	adds	r3, #77	@ 0x4d
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b08      	cmp	r3, #8
 8004654:	d126      	bne.n	80046a4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	334d      	adds	r3, #77	@ 0x4d
 8004666:	2202      	movs	r2, #2
 8004668:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	3344      	adds	r3, #68	@ 0x44
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	1c59      	adds	r1, r3, #1
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4403      	add	r3, r0
 800468a:	3344      	adds	r3, #68	@ 0x44
 800468c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	334c      	adds	r3, #76	@ 0x4c
 800469e:	2204      	movs	r2, #4
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	e00d      	b.n	80046c0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	334d      	adds	r3, #77	@ 0x4d
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	f000 8100 	beq.w	80048bc <HCD_HC_IN_IRQHandler+0xcca>
 80046bc:	e000      	b.n	80046c0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	334c      	adds	r3, #76	@ 0x4c
 80046d0:	781a      	ldrb	r2, [r3, #0]
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f009 f9fa 	bl	800dad0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80046dc:	e0ef      	b.n	80048be <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f005 ff07 	bl	800a4fa <USB_ReadChInterrupts>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f2:	2b40      	cmp	r3, #64	@ 0x40
 80046f4:	d12f      	bne.n	8004756 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004702:	461a      	mov	r2, r3
 8004704:	2340      	movs	r3, #64	@ 0x40
 8004706:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	334d      	adds	r3, #77	@ 0x4d
 8004718:	2205      	movs	r2, #5
 800471a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800471c:	78fa      	ldrb	r2, [r7, #3]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	331a      	adds	r3, #26
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004732:	78fa      	ldrb	r2, [r7, #3]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	3344      	adds	r3, #68	@ 0x44
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	4611      	mov	r1, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f006 fc6b 	bl	800b02a <USB_HC_Halt>
 8004754:	e0b3      	b.n	80048be <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	78fa      	ldrb	r2, [r7, #3]
 800475c:	4611      	mov	r1, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f005 fecb 	bl	800a4fa <USB_ReadChInterrupts>
 8004764:	4603      	mov	r3, r0
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b10      	cmp	r3, #16
 800476c:	f040 80a7 	bne.w	80048be <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	3326      	adds	r3, #38	@ 0x26
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b03      	cmp	r3, #3
 8004784:	d11b      	bne.n	80047be <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004786:	78fa      	ldrb	r2, [r7, #3]
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	3344      	adds	r3, #68	@ 0x44
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	334d      	adds	r3, #77	@ 0x4d
 80047aa:	2204      	movs	r2, #4
 80047ac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f006 fc37 	bl	800b02a <USB_HC_Halt>
 80047bc:	e03f      	b.n	800483e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3326      	adds	r3, #38	@ 0x26
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	3326      	adds	r3, #38	@ 0x26
 80047e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d129      	bne.n	800483e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	3344      	adds	r3, #68	@ 0x44
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	799b      	ldrb	r3, [r3, #6]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HCD_HC_IN_IRQHandler+0xc2a>
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	331b      	adds	r3, #27
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d110      	bne.n	800483e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	334d      	adds	r3, #77	@ 0x4d
 800482c:	2204      	movs	r2, #4
 800482e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f006 fbf6 	bl	800b02a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	331b      	adds	r3, #27
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d129      	bne.n	80048a8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	331b      	adds	r3, #27
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4413      	add	r3, r2
 8004870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	78fa      	ldrb	r2, [r7, #3]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	440a      	add	r2, r1
 800487e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004886:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	78fa      	ldrb	r2, [r7, #3]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	440a      	add	r2, r1
 800489e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048a2:	f043 0320 	orr.w	r3, r3, #32
 80048a6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b4:	461a      	mov	r2, r3
 80048b6:	2310      	movs	r3, #16
 80048b8:	6093      	str	r3, [r2, #8]
 80048ba:	e000      	b.n	80048be <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80048bc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	78fa      	ldrb	r2, [r7, #3]
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f005 fe09 	bl	800a4fa <USB_ReadChInterrupts>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d11b      	bne.n	800492a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048fe:	461a      	mov	r2, r3
 8004900:	2304      	movs	r3, #4
 8004902:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	334d      	adds	r3, #77	@ 0x4d
 8004914:	2207      	movs	r2, #7
 8004916:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f006 fb82 	bl	800b02a <USB_HC_Halt>
 8004926:	f000 bc89 	b.w	800523c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f005 fde1 	bl	800a4fa <USB_ReadChInterrupts>
 8004938:	4603      	mov	r3, r0
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b20      	cmp	r3, #32
 8004940:	f040 8082 	bne.w	8004a48 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004950:	461a      	mov	r2, r3
 8004952:	2320      	movs	r3, #32
 8004954:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	3319      	adds	r3, #25
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d124      	bne.n	80049b6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	3319      	adds	r3, #25
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004980:	78fa      	ldrb	r2, [r7, #3]
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	4613      	mov	r3, r2
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	1a9b      	subs	r3, r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	334c      	adds	r3, #76	@ 0x4c
 8004990:	2202      	movs	r2, #2
 8004992:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	334d      	adds	r3, #77	@ 0x4d
 80049a4:	2203      	movs	r2, #3
 80049a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	4611      	mov	r1, r2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f006 fb3a 	bl	800b02a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	331a      	adds	r3, #26
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	f040 8437 	bne.w	800523c <HCD_HC_OUT_IRQHandler+0x978>
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	331b      	adds	r3, #27
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f040 842b 	bne.w	800523c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	3326      	adds	r3, #38	@ 0x26
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d009      	beq.n	8004a10 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	331b      	adds	r3, #27
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004a10:	78fa      	ldrb	r2, [r7, #3]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	334d      	adds	r3, #77	@ 0x4d
 8004a20:	2203      	movs	r2, #3
 8004a22:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f006 fafc 	bl	800b02a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	3344      	adds	r3, #68	@ 0x44
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e3f9      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f005 fd52 	bl	800a4fa <USB_ReadChInterrupts>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a60:	d111      	bne.n	8004a86 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a74:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	78fa      	ldrb	r2, [r7, #3]
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f006 fad3 	bl	800b02a <USB_HC_Halt>
 8004a84:	e3da      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	78fa      	ldrb	r2, [r7, #3]
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f005 fd33 	bl	800a4fa <USB_ReadChInterrupts>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d168      	bne.n	8004b70 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3344      	adds	r3, #68	@ 0x44
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	4611      	mov	r1, r2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f005 fd1d 	bl	800a4fa <USB_ReadChInterrupts>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac6:	2b40      	cmp	r3, #64	@ 0x40
 8004ac8:	d112      	bne.n	8004af0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3319      	adds	r3, #25
 8004ada:	2201      	movs	r2, #1
 8004adc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aea:	461a      	mov	r2, r3
 8004aec:	2340      	movs	r3, #64	@ 0x40
 8004aee:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	331b      	adds	r3, #27
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d019      	beq.n	8004b3a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004b06:	78fa      	ldrb	r2, [r7, #3]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	331b      	adds	r3, #27
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	0151      	lsls	r1, r2, #5
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	440a      	add	r2, r1
 8004b30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b38:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b46:	461a      	mov	r2, r3
 8004b48:	2301      	movs	r3, #1
 8004b4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	334d      	adds	r3, #77	@ 0x4d
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	78fa      	ldrb	r2, [r7, #3]
 8004b66:	4611      	mov	r1, r2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f006 fa5e 	bl	800b02a <USB_HC_Halt>
 8004b6e:	e365      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	78fa      	ldrb	r2, [r7, #3]
 8004b76:	4611      	mov	r1, r2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f005 fcbe 	bl	800a4fa <USB_ReadChInterrupts>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b84:	2b40      	cmp	r3, #64	@ 0x40
 8004b86:	d139      	bne.n	8004bfc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	334d      	adds	r3, #77	@ 0x4d
 8004b98:	2205      	movs	r2, #5
 8004b9a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	331a      	adds	r3, #26
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	3319      	adds	r3, #25
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	3344      	adds	r3, #68	@ 0x44
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	4611      	mov	r1, r2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f006 fa21 	bl	800b02a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	2340      	movs	r3, #64	@ 0x40
 8004bf8:	6093      	str	r3, [r2, #8]
 8004bfa:	e31f      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f005 fc78 	bl	800a4fa <USB_ReadChInterrupts>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d11a      	bne.n	8004c4a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c20:	461a      	mov	r2, r3
 8004c22:	2308      	movs	r3, #8
 8004c24:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	334d      	adds	r3, #77	@ 0x4d
 8004c36:	2206      	movs	r2, #6
 8004c38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	4611      	mov	r1, r2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f006 f9f1 	bl	800b02a <USB_HC_Halt>
 8004c48:	e2f8      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	4611      	mov	r1, r2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f005 fc51 	bl	800a4fa <USB_ReadChInterrupts>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d144      	bne.n	8004cec <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	3344      	adds	r3, #68	@ 0x44
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004c76:	78fa      	ldrb	r2, [r7, #3]
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	334d      	adds	r3, #77	@ 0x4d
 8004c86:	2204      	movs	r2, #4
 8004c88:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	3319      	adds	r3, #25
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d114      	bne.n	8004cca <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	3318      	adds	r3, #24
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	3319      	adds	r3, #25
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f006 f9a9 	bl	800b02a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	2310      	movs	r3, #16
 8004ce8:	6093      	str	r3, [r2, #8]
 8004cea:	e2a7      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	78fa      	ldrb	r2, [r7, #3]
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f005 fc00 	bl	800a4fa <USB_ReadChInterrupts>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	2b80      	cmp	r3, #128	@ 0x80
 8004d02:	f040 8083 	bne.w	8004e0c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	799b      	ldrb	r3, [r3, #6]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d111      	bne.n	8004d32 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	334d      	adds	r3, #77	@ 0x4d
 8004d1e:	2207      	movs	r2, #7
 8004d20:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f006 f97d 	bl	800b02a <USB_HC_Halt>
 8004d30:	e062      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	3344      	adds	r3, #68	@ 0x44
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	1c59      	adds	r1, r3, #1
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4403      	add	r3, r0
 8004d52:	3344      	adds	r3, #68	@ 0x44
 8004d54:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	3344      	adds	r3, #68	@ 0x44
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d922      	bls.n	8004db2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	3344      	adds	r3, #68	@ 0x44
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	334c      	adds	r3, #76	@ 0x4c
 8004d90:	2204      	movs	r2, #4
 8004d92:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004d94:	78fa      	ldrb	r2, [r7, #3]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	334c      	adds	r3, #76	@ 0x4c
 8004da4:	781a      	ldrb	r2, [r3, #0]
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	4619      	mov	r1, r3
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f008 fe90 	bl	800dad0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004db0:	e022      	b.n	8004df8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	334c      	adds	r3, #76	@ 0x4c
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ddc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004de4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df2:	461a      	mov	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e04:	461a      	mov	r2, r3
 8004e06:	2380      	movs	r3, #128	@ 0x80
 8004e08:	6093      	str	r3, [r2, #8]
 8004e0a:	e217      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f005 fb70 	bl	800a4fa <USB_ReadChInterrupts>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e24:	d11b      	bne.n	8004e5e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004e26:	78fa      	ldrb	r2, [r7, #3]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	334d      	adds	r3, #77	@ 0x4d
 8004e36:	2209      	movs	r2, #9
 8004e38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	4611      	mov	r1, r2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f006 f8f1 	bl	800b02a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e54:	461a      	mov	r2, r3
 8004e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e5a:	6093      	str	r3, [r2, #8]
 8004e5c:	e1ee      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	4611      	mov	r1, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f005 fb47 	bl	800a4fa <USB_ReadChInterrupts>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	f040 81df 	bne.w	8005236 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e84:	461a      	mov	r2, r3
 8004e86:	2302      	movs	r3, #2
 8004e88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	334d      	adds	r3, #77	@ 0x4d
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	f040 8093 	bne.w	8004fc8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	334d      	adds	r3, #77	@ 0x4d
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	334c      	adds	r3, #76	@ 0x4c
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3326      	adds	r3, #38	@ 0x26
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d00b      	beq.n	8004ef8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	3326      	adds	r3, #38	@ 0x26
 8004ef0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	f040 8190 	bne.w	8005218 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	799b      	ldrb	r3, [r3, #6]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d115      	bne.n	8004f2c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	333d      	adds	r3, #61	@ 0x3d
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	f083 0301 	eor.w	r3, r3, #1
 8004f18:	b2d8      	uxtb	r0, r3
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	333d      	adds	r3, #61	@ 0x3d
 8004f28:	4602      	mov	r2, r0
 8004f2a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	799b      	ldrb	r3, [r3, #6]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	f040 8171 	bne.w	8005218 <HCD_HC_OUT_IRQHandler+0x954>
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	3334      	adds	r3, #52	@ 0x34
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8165 	beq.w	8005218 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3334      	adds	r3, #52	@ 0x34
 8004f5e:	6819      	ldr	r1, [r3, #0]
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4403      	add	r3, r0
 8004f6e:	3328      	adds	r3, #40	@ 0x28
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	440b      	add	r3, r1
 8004f74:	1e59      	subs	r1, r3, #1
 8004f76:	78fa      	ldrb	r2, [r7, #3]
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4403      	add	r3, r0
 8004f84:	3328      	adds	r3, #40	@ 0x28
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f8c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 813f 	beq.w	8005218 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004f9a:	78fa      	ldrb	r2, [r7, #3]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	333d      	adds	r3, #61	@ 0x3d
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	f083 0301 	eor.w	r3, r3, #1
 8004fb2:	b2d8      	uxtb	r0, r3
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	333d      	adds	r3, #61	@ 0x3d
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	e127      	b.n	8005218 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	334d      	adds	r3, #77	@ 0x4d
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d120      	bne.n	8005020 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fde:	78fa      	ldrb	r2, [r7, #3]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	334d      	adds	r3, #77	@ 0x4d
 8004fee:	2202      	movs	r2, #2
 8004ff0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	331b      	adds	r3, #27
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	f040 8107 	bne.w	8005218 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	334c      	adds	r3, #76	@ 0x4c
 800501a:	2202      	movs	r2, #2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	e0fb      	b.n	8005218 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	334d      	adds	r3, #77	@ 0x4d
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b04      	cmp	r3, #4
 8005034:	d13a      	bne.n	80050ac <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005036:	78fa      	ldrb	r2, [r7, #3]
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	334d      	adds	r3, #77	@ 0x4d
 8005046:	2202      	movs	r2, #2
 8005048:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800504a:	78fa      	ldrb	r2, [r7, #3]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	334c      	adds	r3, #76	@ 0x4c
 800505a:	2202      	movs	r2, #2
 800505c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	331b      	adds	r3, #27
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	f040 80d1 	bne.w	8005218 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005076:	78fa      	ldrb	r2, [r7, #3]
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	331b      	adds	r3, #27
 8005086:	2200      	movs	r2, #0
 8005088:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a8:	6053      	str	r3, [r2, #4]
 80050aa:	e0b5      	b.n	8005218 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	334d      	adds	r3, #77	@ 0x4d
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b05      	cmp	r3, #5
 80050c0:	d114      	bne.n	80050ec <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	334d      	adds	r3, #77	@ 0x4d
 80050d2:	2202      	movs	r2, #2
 80050d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	334c      	adds	r3, #76	@ 0x4c
 80050e6:	2202      	movs	r2, #2
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e095      	b.n	8005218 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	4613      	mov	r3, r2
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	334d      	adds	r3, #77	@ 0x4d
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b06      	cmp	r3, #6
 8005100:	d114      	bne.n	800512c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005102:	78fa      	ldrb	r2, [r7, #3]
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	334d      	adds	r3, #77	@ 0x4d
 8005112:	2202      	movs	r2, #2
 8005114:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	334c      	adds	r3, #76	@ 0x4c
 8005126:	2205      	movs	r2, #5
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e075      	b.n	8005218 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800512c:	78fa      	ldrb	r2, [r7, #3]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	334d      	adds	r3, #77	@ 0x4d
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b07      	cmp	r3, #7
 8005140:	d00a      	beq.n	8005158 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	334d      	adds	r3, #77	@ 0x4d
 8005152:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005154:	2b09      	cmp	r3, #9
 8005156:	d170      	bne.n	800523a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005158:	78fa      	ldrb	r2, [r7, #3]
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	334d      	adds	r3, #77	@ 0x4d
 8005168:	2202      	movs	r2, #2
 800516a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800516c:	78fa      	ldrb	r2, [r7, #3]
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	3344      	adds	r3, #68	@ 0x44
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	1c59      	adds	r1, r3, #1
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4403      	add	r3, r0
 800518c:	3344      	adds	r3, #68	@ 0x44
 800518e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	3344      	adds	r3, #68	@ 0x44
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d914      	bls.n	80051d0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	3344      	adds	r3, #68	@ 0x44
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	334c      	adds	r3, #76	@ 0x4c
 80051ca:	2204      	movs	r2, #4
 80051cc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051ce:	e022      	b.n	8005216 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051d0:	78fa      	ldrb	r2, [r7, #3]
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	334c      	adds	r3, #76	@ 0x4c
 80051e0:	2202      	movs	r2, #2
 80051e2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80051fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005202:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4413      	add	r3, r2
 800520c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005210:	461a      	mov	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005216:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	334c      	adds	r3, #76	@ 0x4c
 8005228:	781a      	ldrb	r2, [r3, #0]
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f008 fc4e 	bl	800dad0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005234:	e002      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005236:	bf00      	nop
 8005238:	e000      	b.n	800523c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800523a:	bf00      	nop
  }
}
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b08a      	sub	sp, #40	@ 0x28
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	0c5b      	lsrs	r3, r3, #17
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	091b      	lsrs	r3, r3, #4
 8005272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005276:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d004      	beq.n	8005288 <HCD_RXQLVL_IRQHandler+0x46>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b05      	cmp	r3, #5
 8005282:	f000 80b6 	beq.w	80053f2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005286:	e0b7      	b.n	80053f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80b3 	beq.w	80053f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4613      	mov	r3, r2
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	332c      	adds	r3, #44	@ 0x2c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80a7 	beq.w	80053f6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	4613      	mov	r3, r2
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	1a9b      	subs	r3, r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	440b      	add	r3, r1
 80052b6:	3338      	adds	r3, #56	@ 0x38
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	18d1      	adds	r1, r2, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4613      	mov	r3, r2
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	1a9b      	subs	r3, r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4403      	add	r3, r0
 80052cc:	3334      	adds	r3, #52	@ 0x34
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4299      	cmp	r1, r3
 80052d2:	f200 8083 	bhi.w	80053dc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4613      	mov	r3, r2
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	332c      	adds	r3, #44	@ 0x2c
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	b292      	uxth	r2, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	f005 f897 	bl	800a424 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4613      	mov	r3, r2
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	332c      	adds	r3, #44	@ 0x2c
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	18d1      	adds	r1, r2, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4613      	mov	r3, r2
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4403      	add	r3, r0
 800531a:	332c      	adds	r3, #44	@ 0x2c
 800531c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4613      	mov	r3, r2
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3338      	adds	r3, #56	@ 0x38
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	18d1      	adds	r1, r2, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4613      	mov	r3, r2
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4403      	add	r3, r0
 8005342:	3338      	adds	r3, #56	@ 0x38
 8005344:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	0cdb      	lsrs	r3, r3, #19
 8005356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800535a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4613      	mov	r3, r2
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	3328      	adds	r3, #40	@ 0x28
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4293      	cmp	r3, r2
 8005374:	d13f      	bne.n	80053f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d03c      	beq.n	80053f6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005392:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800539a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053a8:	461a      	mov	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4613      	mov	r3, r2
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	333c      	adds	r3, #60	@ 0x3c
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f083 0301 	eor.w	r3, r3, #1
 80053c4:	b2d8      	uxtb	r0, r3
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	4613      	mov	r3, r2
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	333c      	adds	r3, #60	@ 0x3c
 80053d6:	4602      	mov	r2, r0
 80053d8:	701a      	strb	r2, [r3, #0]
      break;
 80053da:	e00c      	b.n	80053f6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	4613      	mov	r3, r2
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	334c      	adds	r3, #76	@ 0x4c
 80053ec:	2204      	movs	r2, #4
 80053ee:	701a      	strb	r2, [r3, #0]
      break;
 80053f0:	e001      	b.n	80053f6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80053f2:	bf00      	nop
 80053f4:	e000      	b.n	80053f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80053f6:	bf00      	nop
  }
}
 80053f8:	bf00      	nop
 80053fa:	3728      	adds	r7, #40	@ 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800542c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b02      	cmp	r3, #2
 8005436:	d10b      	bne.n	8005450 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d102      	bne.n	8005448 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f008 fb28 	bl	800da98 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f043 0302 	orr.w	r3, r3, #2
 800544e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b08      	cmp	r3, #8
 8005458:	d132      	bne.n	80054c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f043 0308 	orr.w	r3, r3, #8
 8005460:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d126      	bne.n	80054ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	7a5b      	ldrb	r3, [r3, #9]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d113      	bne.n	800549c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800547a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800547e:	d106      	bne.n	800548e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2102      	movs	r1, #2
 8005486:	4618      	mov	r0, r3
 8005488:	f005 f950 	bl	800a72c <USB_InitFSLSPClkSel>
 800548c:	e011      	b.n	80054b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2101      	movs	r1, #1
 8005494:	4618      	mov	r0, r3
 8005496:	f005 f949 	bl	800a72c <USB_InitFSLSPClkSel>
 800549a:	e00a      	b.n	80054b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	79db      	ldrb	r3, [r3, #7]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d106      	bne.n	80054b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054aa:	461a      	mov	r2, r3
 80054ac:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80054b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f008 fb1a 	bl	800daec <HAL_HCD_PortEnabled_Callback>
 80054b8:	e002      	b.n	80054c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f008 fb24 	bl	800db08 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d103      	bne.n	80054d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f043 0320 	orr.w	r3, r3, #32
 80054d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80054d8:	461a      	mov	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6013      	str	r3, [r2, #0]
}
 80054de:	bf00      	nop
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e12b      	b.n	8005752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fb fef6 	bl	8001300 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2224      	movs	r2, #36	@ 0x24
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800553a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800554a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800554c:	f000 ff82 	bl	8006454 <HAL_RCC_GetPCLK1Freq>
 8005550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4a81      	ldr	r2, [pc, #516]	@ (800575c <HAL_I2C_Init+0x274>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d807      	bhi.n	800556c <HAL_I2C_Init+0x84>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4a80      	ldr	r2, [pc, #512]	@ (8005760 <HAL_I2C_Init+0x278>)
 8005560:	4293      	cmp	r3, r2
 8005562:	bf94      	ite	ls
 8005564:	2301      	movls	r3, #1
 8005566:	2300      	movhi	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e006      	b.n	800557a <HAL_I2C_Init+0x92>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4a7d      	ldr	r2, [pc, #500]	@ (8005764 <HAL_I2C_Init+0x27c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	bf94      	ite	ls
 8005574:	2301      	movls	r3, #1
 8005576:	2300      	movhi	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e0e7      	b.n	8005752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a78      	ldr	r2, [pc, #480]	@ (8005768 <HAL_I2C_Init+0x280>)
 8005586:	fba2 2303 	umull	r2, r3, r2, r3
 800558a:	0c9b      	lsrs	r3, r3, #18
 800558c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a6a      	ldr	r2, [pc, #424]	@ (800575c <HAL_I2C_Init+0x274>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d802      	bhi.n	80055bc <HAL_I2C_Init+0xd4>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	3301      	adds	r3, #1
 80055ba:	e009      	b.n	80055d0 <HAL_I2C_Init+0xe8>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	4a69      	ldr	r2, [pc, #420]	@ (800576c <HAL_I2C_Init+0x284>)
 80055c8:	fba2 2303 	umull	r2, r3, r2, r3
 80055cc:	099b      	lsrs	r3, r3, #6
 80055ce:	3301      	adds	r3, #1
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	495c      	ldr	r1, [pc, #368]	@ (800575c <HAL_I2C_Init+0x274>)
 80055ec:	428b      	cmp	r3, r1
 80055ee:	d819      	bhi.n	8005624 <HAL_I2C_Init+0x13c>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1e59      	subs	r1, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80055fe:	1c59      	adds	r1, r3, #1
 8005600:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005604:	400b      	ands	r3, r1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_I2C_Init+0x138>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1e59      	subs	r1, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	fbb1 f3f3 	udiv	r3, r1, r3
 8005618:	3301      	adds	r3, #1
 800561a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561e:	e051      	b.n	80056c4 <HAL_I2C_Init+0x1dc>
 8005620:	2304      	movs	r3, #4
 8005622:	e04f      	b.n	80056c4 <HAL_I2C_Init+0x1dc>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d111      	bne.n	8005650 <HAL_I2C_Init+0x168>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1e58      	subs	r0, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6859      	ldr	r1, [r3, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	440b      	add	r3, r1
 800563a:	fbb0 f3f3 	udiv	r3, r0, r3
 800563e:	3301      	adds	r3, #1
 8005640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005644:	2b00      	cmp	r3, #0
 8005646:	bf0c      	ite	eq
 8005648:	2301      	moveq	r3, #1
 800564a:	2300      	movne	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	e012      	b.n	8005676 <HAL_I2C_Init+0x18e>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	1e58      	subs	r0, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6859      	ldr	r1, [r3, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	0099      	lsls	r1, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	fbb0 f3f3 	udiv	r3, r0, r3
 8005666:	3301      	adds	r3, #1
 8005668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_I2C_Init+0x196>
 800567a:	2301      	movs	r3, #1
 800567c:	e022      	b.n	80056c4 <HAL_I2C_Init+0x1dc>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10e      	bne.n	80056a4 <HAL_I2C_Init+0x1bc>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1e58      	subs	r0, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6859      	ldr	r1, [r3, #4]
 800568e:	460b      	mov	r3, r1
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	440b      	add	r3, r1
 8005694:	fbb0 f3f3 	udiv	r3, r0, r3
 8005698:	3301      	adds	r3, #1
 800569a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a2:	e00f      	b.n	80056c4 <HAL_I2C_Init+0x1dc>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	1e58      	subs	r0, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6859      	ldr	r1, [r3, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	0099      	lsls	r1, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ba:	3301      	adds	r3, #1
 80056bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	6809      	ldr	r1, [r1, #0]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69da      	ldr	r2, [r3, #28]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6911      	ldr	r1, [r2, #16]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68d2      	ldr	r2, [r2, #12]
 80056fe:	4311      	orrs	r1, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	430b      	orrs	r3, r1
 8005706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695a      	ldr	r2, [r3, #20]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	000186a0 	.word	0x000186a0
 8005760:	001e847f 	.word	0x001e847f
 8005764:	003d08ff 	.word	0x003d08ff
 8005768:	431bde83 	.word	0x431bde83
 800576c:	10624dd3 	.word	0x10624dd3

08005770 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0bf      	b.n	8005902 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fb fe30 	bl	80013fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80057b2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6999      	ldr	r1, [r3, #24]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057c8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6899      	ldr	r1, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4b4a      	ldr	r3, [pc, #296]	@ (800590c <HAL_LTDC_Init+0x19c>)
 80057e4:	400b      	ands	r3, r1
 80057e6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	041b      	lsls	r3, r3, #16
 80057ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6899      	ldr	r1, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68d9      	ldr	r1, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	4b3e      	ldr	r3, [pc, #248]	@ (800590c <HAL_LTDC_Init+0x19c>)
 8005812:	400b      	ands	r3, r1
 8005814:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68d9      	ldr	r1, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6919      	ldr	r1, [r3, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b33      	ldr	r3, [pc, #204]	@ (800590c <HAL_LTDC_Init+0x19c>)
 8005840:	400b      	ands	r3, r1
 8005842:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6919      	ldr	r1, [r3, #16]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6959      	ldr	r1, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b27      	ldr	r3, [pc, #156]	@ (800590c <HAL_LTDC_Init+0x19c>)
 800586e:	400b      	ands	r3, r1
 8005870:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6959      	ldr	r1, [r3, #20]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80058a0:	041b      	lsls	r3, r3, #16
 80058a2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80058b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0206 	orr.w	r2, r2, #6
 80058de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	f000f800 	.word	0xf000f800

08005910 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005926:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d023      	beq.n	800597a <HAL_LTDC_IRQHandler+0x6a>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01e      	beq.n	800597a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0204 	bic.w	r2, r2, #4
 800594a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2204      	movs	r2, #4
 8005952:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800595a:	f043 0201 	orr.w	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2204      	movs	r2, #4
 8005968:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f86f 	bl	8005a58 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d023      	beq.n	80059cc <HAL_LTDC_IRQHandler+0xbc>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01e      	beq.n	80059cc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0202 	bic.w	r2, r2, #2
 800599c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2202      	movs	r2, #2
 80059a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059ac:	f043 0202 	orr.w	r2, r3, #2
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2204      	movs	r2, #4
 80059ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f846 	bl	8005a58 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d01b      	beq.n	8005a0e <HAL_LTDC_IRQHandler+0xfe>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d016      	beq.n	8005a0e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2201      	movs	r2, #1
 80059f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f82f 	bl	8005a6c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01b      	beq.n	8005a50 <HAL_LTDC_IRQHandler+0x140>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d016      	beq.n	8005a50 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0208 	bic.w	r2, r2, #8
 8005a30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2208      	movs	r2, #8
 8005a38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f818 	bl	8005a80 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005a50:	bf00      	nop
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a94:	b5b0      	push	{r4, r5, r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_LTDC_ConfigLayer+0x1a>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e02c      	b.n	8005b08 <HAL_LTDC_ConfigLayer+0x74>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2134      	movs	r1, #52	@ 0x34
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	4413      	add	r3, r2
 8005aca:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	461d      	mov	r5, r3
 8005ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f811 	bl	8005b10 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2201      	movs	r2, #1
 8005af4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bdb0      	pop	{r4, r5, r7, pc}

08005b10 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b089      	sub	sp, #36	@ 0x24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	0c1b      	lsrs	r3, r3, #16
 8005b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b2c:	4413      	add	r3, r2
 8005b2e:	041b      	lsls	r3, r3, #16
 8005b30:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	01db      	lsls	r3, r3, #7
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3384      	adds	r3, #132	@ 0x84
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	4611      	mov	r1, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	01d2      	lsls	r2, r2, #7
 8005b4c:	440a      	add	r2, r1
 8005b4e:	3284      	adds	r2, #132	@ 0x84
 8005b50:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005b54:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	0c1b      	lsrs	r3, r3, #16
 8005b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b66:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b68:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	01db      	lsls	r3, r3, #7
 8005b74:	440b      	add	r3, r1
 8005b76:	3384      	adds	r3, #132	@ 0x84
 8005b78:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b7e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b8e:	4413      	add	r3, r2
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	01db      	lsls	r3, r3, #7
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3384      	adds	r3, #132	@ 0x84
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	6812      	ldr	r2, [r2, #0]
 8005ba8:	4611      	mov	r1, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	01d2      	lsls	r2, r2, #7
 8005bae:	440a      	add	r2, r1
 8005bb0:	3284      	adds	r2, #132	@ 0x84
 8005bb2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005bb6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bc6:	4413      	add	r3, r2
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	01db      	lsls	r3, r3, #7
 8005bd4:	440b      	add	r3, r1
 8005bd6:	3384      	adds	r3, #132	@ 0x84
 8005bd8:	4619      	mov	r1, r3
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	01db      	lsls	r3, r3, #7
 8005bea:	4413      	add	r3, r2
 8005bec:	3384      	adds	r3, #132	@ 0x84
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	01d2      	lsls	r2, r2, #7
 8005bfa:	440a      	add	r2, r1
 8005bfc:	3284      	adds	r2, #132	@ 0x84
 8005bfe:	f023 0307 	bic.w	r3, r3, #7
 8005c02:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	01db      	lsls	r3, r3, #7
 8005c0e:	4413      	add	r3, r2
 8005c10:	3384      	adds	r3, #132	@ 0x84
 8005c12:	461a      	mov	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	061b      	lsls	r3, r3, #24
 8005c34:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	01db      	lsls	r3, r3, #7
 8005c40:	4413      	add	r3, r2
 8005c42:	3384      	adds	r3, #132	@ 0x84
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	01db      	lsls	r3, r3, #7
 8005c50:	4413      	add	r3, r2
 8005c52:	3384      	adds	r3, #132	@ 0x84
 8005c54:	461a      	mov	r2, r3
 8005c56:	2300      	movs	r3, #0
 8005c58:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c60:	461a      	mov	r2, r3
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	01db      	lsls	r3, r3, #7
 8005c74:	440b      	add	r3, r1
 8005c76:	3384      	adds	r3, #132	@ 0x84
 8005c78:	4619      	mov	r1, r3
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	01db      	lsls	r3, r3, #7
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3384      	adds	r3, #132	@ 0x84
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	4611      	mov	r1, r2
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	01d2      	lsls	r2, r2, #7
 8005c9a:	440a      	add	r2, r1
 8005c9c:	3284      	adds	r2, #132	@ 0x84
 8005c9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ca2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	01db      	lsls	r3, r3, #7
 8005cae:	4413      	add	r3, r2
 8005cb0:	3384      	adds	r3, #132	@ 0x84
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	01db      	lsls	r3, r3, #7
 8005cc4:	4413      	add	r3, r2
 8005cc6:	3384      	adds	r3, #132	@ 0x84
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	4611      	mov	r1, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	01d2      	lsls	r2, r2, #7
 8005cd4:	440a      	add	r2, r1
 8005cd6:	3284      	adds	r2, #132	@ 0x84
 8005cd8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005cdc:	f023 0307 	bic.w	r3, r3, #7
 8005ce0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	69da      	ldr	r2, [r3, #28]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	6809      	ldr	r1, [r1, #0]
 8005cee:	4608      	mov	r0, r1
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	01c9      	lsls	r1, r1, #7
 8005cf4:	4401      	add	r1, r0
 8005cf6:	3184      	adds	r1, #132	@ 0x84
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	01db      	lsls	r3, r3, #7
 8005d06:	4413      	add	r3, r2
 8005d08:	3384      	adds	r3, #132	@ 0x84
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	01db      	lsls	r3, r3, #7
 8005d16:	4413      	add	r3, r2
 8005d18:	3384      	adds	r3, #132	@ 0x84
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	01db      	lsls	r3, r3, #7
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3384      	adds	r3, #132	@ 0x84
 8005d2e:	461a      	mov	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d34:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d102      	bne.n	8005d44 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005d3e:	2304      	movs	r3, #4
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	e01b      	b.n	8005d7c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d102      	bne.n	8005d52 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	61fb      	str	r3, [r7, #28]
 8005d50:	e014      	b.n	8005d7c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d00b      	beq.n	8005d72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d007      	beq.n	8005d72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d003      	beq.n	8005d72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d6e:	2b07      	cmp	r3, #7
 8005d70:	d102      	bne.n	8005d78 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005d72:	2302      	movs	r3, #2
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	e001      	b.n	8005d7c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	01db      	lsls	r3, r3, #7
 8005d86:	4413      	add	r3, r2
 8005d88:	3384      	adds	r3, #132	@ 0x84
 8005d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	4611      	mov	r1, r2
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	01d2      	lsls	r2, r2, #7
 8005d96:	440a      	add	r2, r1
 8005d98:	3284      	adds	r2, #132	@ 0x84
 8005d9a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	6859      	ldr	r1, [r3, #4]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	1acb      	subs	r3, r1, r3
 8005db6:	69f9      	ldr	r1, [r7, #28]
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005dbe:	68f9      	ldr	r1, [r7, #12]
 8005dc0:	6809      	ldr	r1, [r1, #0]
 8005dc2:	4608      	mov	r0, r1
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	01c9      	lsls	r1, r1, #7
 8005dc8:	4401      	add	r1, r0
 8005dca:	3184      	adds	r1, #132	@ 0x84
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	01db      	lsls	r3, r3, #7
 8005dda:	4413      	add	r3, r2
 8005ddc:	3384      	adds	r3, #132	@ 0x84
 8005dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	4611      	mov	r1, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	01d2      	lsls	r2, r2, #7
 8005dea:	440a      	add	r2, r1
 8005dec:	3284      	adds	r2, #132	@ 0x84
 8005dee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005df2:	f023 0307 	bic.w	r3, r3, #7
 8005df6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	01db      	lsls	r3, r3, #7
 8005e02:	4413      	add	r3, r2
 8005e04:	3384      	adds	r3, #132	@ 0x84
 8005e06:	461a      	mov	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	01db      	lsls	r3, r3, #7
 8005e18:	4413      	add	r3, r2
 8005e1a:	3384      	adds	r3, #132	@ 0x84
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	4611      	mov	r1, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	01d2      	lsls	r2, r2, #7
 8005e28:	440a      	add	r2, r1
 8005e2a:	3284      	adds	r2, #132	@ 0x84
 8005e2c:	f043 0301 	orr.w	r3, r3, #1
 8005e30:	6013      	str	r3, [r2, #0]
}
 8005e32:	bf00      	nop
 8005e34:	3724      	adds	r7, #36	@ 0x24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	603b      	str	r3, [r7, #0]
 8005e4e:	4b20      	ldr	r3, [pc, #128]	@ (8005ed0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e52:	4a1f      	ldr	r2, [pc, #124]	@ (8005ed0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e66:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e6c:	f7fb ff08 	bl	8001c80 <HAL_GetTick>
 8005e70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e72:	e009      	b.n	8005e88 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e74:	f7fb ff04 	bl	8001c80 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e82:	d901      	bls.n	8005e88 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e01f      	b.n	8005ec8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e88:	4b13      	ldr	r3, [pc, #76]	@ (8005ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e94:	d1ee      	bne.n	8005e74 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005e96:	4b11      	ldr	r3, [pc, #68]	@ (8005edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e9c:	f7fb fef0 	bl	8001c80 <HAL_GetTick>
 8005ea0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ea2:	e009      	b.n	8005eb8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ea4:	f7fb feec 	bl	8001c80 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005eb2:	d901      	bls.n	8005eb8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e007      	b.n	8005ec8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005eb8:	4b07      	ldr	r3, [pc, #28]	@ (8005ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec4:	d1ee      	bne.n	8005ea4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	420e0040 	.word	0x420e0040
 8005ed8:	40007000 	.word	0x40007000
 8005edc:	420e0044 	.word	0x420e0044

08005ee0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005ee8:	f7fb feca 	bl	8001c80 <HAL_GetTick>
 8005eec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e069      	b.n	8005fcc <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7fb fa9d 	bl	800144c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005f12:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f85e 	bl	8005fd8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	021a      	lsls	r2, r3, #8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2120      	movs	r1, #32
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f856 	bl	8005ff4 <QSPI_WaitFlagStateUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005f4c:	7afb      	ldrb	r3, [r7, #11]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d137      	bne.n	8005fc2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005f5c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6852      	ldr	r2, [r2, #4]
 8005f64:	0611      	lsls	r1, r2, #24
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68d2      	ldr	r2, [r2, #12]
 8005f6a:	4311      	orrs	r1, r2
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	69d2      	ldr	r2, [r2, #28]
 8005f70:	4311      	orrs	r1, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6a12      	ldr	r2, [r2, #32]
 8005f76:	4311      	orrs	r1, r2
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6812      	ldr	r2, [r2, #0]
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <HAL_QSPI_Init+0xf4>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6912      	ldr	r2, [r2, #16]
 8005f8e:	0411      	lsls	r1, r2, #16
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6952      	ldr	r2, [r2, #20]
 8005f94:	4311      	orrs	r1, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6992      	ldr	r2, [r2, #24]
 8005f9a:	4311      	orrs	r1, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8005fca:	7afb      	ldrb	r3, [r7, #11]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	ffe0f8fe 	.word	0xffe0f8fe

08005fd8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	4613      	mov	r3, r2
 8006002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006004:	e01a      	b.n	800603c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d016      	beq.n	800603c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600e:	f7fb fe37 	bl	8001c80 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	429a      	cmp	r2, r3
 800601c:	d302      	bcc.n	8006024 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10b      	bne.n	800603c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2204      	movs	r2, #4
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006030:	f043 0201 	orr.w	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e00e      	b.n	800605a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	bf14      	ite	ne
 800604a:	2301      	movne	r3, #1
 800604c:	2300      	moveq	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	461a      	mov	r2, r3
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	429a      	cmp	r2, r3
 8006056:	d1d6      	bne.n	8006006 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0cc      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006078:	4b68      	ldr	r3, [pc, #416]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d90c      	bls.n	80060a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006086:	4b65      	ldr	r3, [pc, #404]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800608e:	4b63      	ldr	r3, [pc, #396]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d001      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e0b8      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d020      	beq.n	80060ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060b8:	4b59      	ldr	r3, [pc, #356]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a58      	ldr	r2, [pc, #352]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060d0:	4b53      	ldr	r3, [pc, #332]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4a52      	ldr	r2, [pc, #328]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060dc:	4b50      	ldr	r3, [pc, #320]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	494d      	ldr	r1, [pc, #308]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d044      	beq.n	8006184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d107      	bne.n	8006112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006102:	4b47      	ldr	r3, [pc, #284]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d119      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e07f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d003      	beq.n	8006122 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800611e:	2b03      	cmp	r3, #3
 8006120:	d107      	bne.n	8006132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006122:	4b3f      	ldr	r3, [pc, #252]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e06f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006132:	4b3b      	ldr	r3, [pc, #236]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e067      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006142:	4b37      	ldr	r3, [pc, #220]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f023 0203 	bic.w	r2, r3, #3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4934      	ldr	r1, [pc, #208]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	4313      	orrs	r3, r2
 8006152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006154:	f7fb fd94 	bl	8001c80 <HAL_GetTick>
 8006158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615a:	e00a      	b.n	8006172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800615c:	f7fb fd90 	bl	8001c80 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616a:	4293      	cmp	r3, r2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e04f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006172:	4b2b      	ldr	r3, [pc, #172]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 020c 	and.w	r2, r3, #12
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	429a      	cmp	r2, r3
 8006182:	d1eb      	bne.n	800615c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006184:	4b25      	ldr	r3, [pc, #148]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 030f 	and.w	r3, r3, #15
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d20c      	bcs.n	80061ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006192:	4b22      	ldr	r3, [pc, #136]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800619a:	4b20      	ldr	r3, [pc, #128]	@ (800621c <HAL_RCC_ClockConfig+0x1b8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e032      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061b8:	4b19      	ldr	r3, [pc, #100]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4916      	ldr	r1, [pc, #88]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061d6:	4b12      	ldr	r3, [pc, #72]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	490e      	ldr	r1, [pc, #56]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ea:	f000 f821 	bl	8006230 <HAL_RCC_GetSysClockFreq>
 80061ee:	4602      	mov	r2, r0
 80061f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	091b      	lsrs	r3, r3, #4
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	490a      	ldr	r1, [pc, #40]	@ (8006224 <HAL_RCC_ClockConfig+0x1c0>)
 80061fc:	5ccb      	ldrb	r3, [r1, r3]
 80061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006202:	4a09      	ldr	r2, [pc, #36]	@ (8006228 <HAL_RCC_ClockConfig+0x1c4>)
 8006204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006206:	4b09      	ldr	r3, [pc, #36]	@ (800622c <HAL_RCC_ClockConfig+0x1c8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fb fbb2 	bl	8001974 <HAL_InitTick>

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40023c00 	.word	0x40023c00
 8006220:	40023800 	.word	0x40023800
 8006224:	0800e1c4 	.word	0x0800e1c4
 8006228:	20000000 	.word	0x20000000
 800622c:	20000004 	.word	0x20000004

08006230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006234:	b094      	sub	sp, #80	@ 0x50
 8006236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006248:	4b79      	ldr	r3, [pc, #484]	@ (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 030c 	and.w	r3, r3, #12
 8006250:	2b08      	cmp	r3, #8
 8006252:	d00d      	beq.n	8006270 <HAL_RCC_GetSysClockFreq+0x40>
 8006254:	2b08      	cmp	r3, #8
 8006256:	f200 80e1 	bhi.w	800641c <HAL_RCC_GetSysClockFreq+0x1ec>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0x34>
 800625e:	2b04      	cmp	r3, #4
 8006260:	d003      	beq.n	800626a <HAL_RCC_GetSysClockFreq+0x3a>
 8006262:	e0db      	b.n	800641c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006264:	4b73      	ldr	r3, [pc, #460]	@ (8006434 <HAL_RCC_GetSysClockFreq+0x204>)
 8006266:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006268:	e0db      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800626a:	4b73      	ldr	r3, [pc, #460]	@ (8006438 <HAL_RCC_GetSysClockFreq+0x208>)
 800626c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800626e:	e0d8      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006270:	4b6f      	ldr	r3, [pc, #444]	@ (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006278:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800627a:	4b6d      	ldr	r3, [pc, #436]	@ (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d063      	beq.n	800634e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006286:	4b6a      	ldr	r3, [pc, #424]	@ (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	099b      	lsrs	r3, r3, #6
 800628c:	2200      	movs	r2, #0
 800628e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006290:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006298:	633b      	str	r3, [r7, #48]	@ 0x30
 800629a:	2300      	movs	r3, #0
 800629c:	637b      	str	r3, [r7, #52]	@ 0x34
 800629e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80062a2:	4622      	mov	r2, r4
 80062a4:	462b      	mov	r3, r5
 80062a6:	f04f 0000 	mov.w	r0, #0
 80062aa:	f04f 0100 	mov.w	r1, #0
 80062ae:	0159      	lsls	r1, r3, #5
 80062b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062b4:	0150      	lsls	r0, r2, #5
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4621      	mov	r1, r4
 80062bc:	1a51      	subs	r1, r2, r1
 80062be:	6139      	str	r1, [r7, #16]
 80062c0:	4629      	mov	r1, r5
 80062c2:	eb63 0301 	sbc.w	r3, r3, r1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062d4:	4659      	mov	r1, fp
 80062d6:	018b      	lsls	r3, r1, #6
 80062d8:	4651      	mov	r1, sl
 80062da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062de:	4651      	mov	r1, sl
 80062e0:	018a      	lsls	r2, r1, #6
 80062e2:	4651      	mov	r1, sl
 80062e4:	ebb2 0801 	subs.w	r8, r2, r1
 80062e8:	4659      	mov	r1, fp
 80062ea:	eb63 0901 	sbc.w	r9, r3, r1
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006302:	4690      	mov	r8, r2
 8006304:	4699      	mov	r9, r3
 8006306:	4623      	mov	r3, r4
 8006308:	eb18 0303 	adds.w	r3, r8, r3
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	462b      	mov	r3, r5
 8006310:	eb49 0303 	adc.w	r3, r9, r3
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006322:	4629      	mov	r1, r5
 8006324:	024b      	lsls	r3, r1, #9
 8006326:	4621      	mov	r1, r4
 8006328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800632c:	4621      	mov	r1, r4
 800632e:	024a      	lsls	r2, r1, #9
 8006330:	4610      	mov	r0, r2
 8006332:	4619      	mov	r1, r3
 8006334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006336:	2200      	movs	r2, #0
 8006338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800633a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800633c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006340:	f7f9 ff58 	bl	80001f4 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4613      	mov	r3, r2
 800634a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800634c:	e058      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800634e:	4b38      	ldr	r3, [pc, #224]	@ (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	099b      	lsrs	r3, r3, #6
 8006354:	2200      	movs	r2, #0
 8006356:	4618      	mov	r0, r3
 8006358:	4611      	mov	r1, r2
 800635a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800635e:	623b      	str	r3, [r7, #32]
 8006360:	2300      	movs	r3, #0
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24
 8006364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006368:	4642      	mov	r2, r8
 800636a:	464b      	mov	r3, r9
 800636c:	f04f 0000 	mov.w	r0, #0
 8006370:	f04f 0100 	mov.w	r1, #0
 8006374:	0159      	lsls	r1, r3, #5
 8006376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800637a:	0150      	lsls	r0, r2, #5
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4641      	mov	r1, r8
 8006382:	ebb2 0a01 	subs.w	sl, r2, r1
 8006386:	4649      	mov	r1, r9
 8006388:	eb63 0b01 	sbc.w	fp, r3, r1
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800639c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063a0:	ebb2 040a 	subs.w	r4, r2, sl
 80063a4:	eb63 050b 	sbc.w	r5, r3, fp
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	00eb      	lsls	r3, r5, #3
 80063b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063b6:	00e2      	lsls	r2, r4, #3
 80063b8:	4614      	mov	r4, r2
 80063ba:	461d      	mov	r5, r3
 80063bc:	4643      	mov	r3, r8
 80063be:	18e3      	adds	r3, r4, r3
 80063c0:	603b      	str	r3, [r7, #0]
 80063c2:	464b      	mov	r3, r9
 80063c4:	eb45 0303 	adc.w	r3, r5, r3
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063d6:	4629      	mov	r1, r5
 80063d8:	028b      	lsls	r3, r1, #10
 80063da:	4621      	mov	r1, r4
 80063dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063e0:	4621      	mov	r1, r4
 80063e2:	028a      	lsls	r2, r1, #10
 80063e4:	4610      	mov	r0, r2
 80063e6:	4619      	mov	r1, r3
 80063e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ea:	2200      	movs	r2, #0
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	61fa      	str	r2, [r7, #28]
 80063f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f4:	f7f9 fefe 	bl	80001f4 <__aeabi_uldivmod>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4613      	mov	r3, r2
 80063fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006400:	4b0b      	ldr	r3, [pc, #44]	@ (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	0c1b      	lsrs	r3, r3, #16
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	3301      	adds	r3, #1
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006410:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006414:	fbb2 f3f3 	udiv	r3, r2, r3
 8006418:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800641a:	e002      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800641c:	4b05      	ldr	r3, [pc, #20]	@ (8006434 <HAL_RCC_GetSysClockFreq+0x204>)
 800641e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006424:	4618      	mov	r0, r3
 8006426:	3750      	adds	r7, #80	@ 0x50
 8006428:	46bd      	mov	sp, r7
 800642a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800642e:	bf00      	nop
 8006430:	40023800 	.word	0x40023800
 8006434:	00f42400 	.word	0x00f42400
 8006438:	007a1200 	.word	0x007a1200

0800643c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006440:	4b03      	ldr	r3, [pc, #12]	@ (8006450 <HAL_RCC_GetHCLKFreq+0x14>)
 8006442:	681b      	ldr	r3, [r3, #0]
}
 8006444:	4618      	mov	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	20000000 	.word	0x20000000

08006454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006458:	f7ff fff0 	bl	800643c <HAL_RCC_GetHCLKFreq>
 800645c:	4602      	mov	r2, r0
 800645e:	4b05      	ldr	r3, [pc, #20]	@ (8006474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	0a9b      	lsrs	r3, r3, #10
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	4903      	ldr	r1, [pc, #12]	@ (8006478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800646a:	5ccb      	ldrb	r3, [r1, r3]
 800646c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006470:	4618      	mov	r0, r3
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40023800 	.word	0x40023800
 8006478:	0800e1d4 	.word	0x0800e1d4

0800647c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006480:	f7ff ffdc 	bl	800643c <HAL_RCC_GetHCLKFreq>
 8006484:	4602      	mov	r2, r0
 8006486:	4b05      	ldr	r3, [pc, #20]	@ (800649c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	0b5b      	lsrs	r3, r3, #13
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	4903      	ldr	r1, [pc, #12]	@ (80064a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006492:	5ccb      	ldrb	r3, [r1, r3]
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006498:	4618      	mov	r0, r3
 800649a:	bd80      	pop	{r7, pc}
 800649c:	40023800 	.word	0x40023800
 80064a0:	0800e1d4 	.word	0x0800e1d4

080064a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	220f      	movs	r2, #15
 80064b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064b4:	4b12      	ldr	r3, [pc, #72]	@ (8006500 <HAL_RCC_GetClockConfig+0x5c>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0203 	and.w	r2, r3, #3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006500 <HAL_RCC_GetClockConfig+0x5c>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006500 <HAL_RCC_GetClockConfig+0x5c>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80064d8:	4b09      	ldr	r3, [pc, #36]	@ (8006500 <HAL_RCC_GetClockConfig+0x5c>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	08db      	lsrs	r3, r3, #3
 80064de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064e6:	4b07      	ldr	r3, [pc, #28]	@ (8006504 <HAL_RCC_GetClockConfig+0x60>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 020f 	and.w	r2, r3, #15
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	601a      	str	r2, [r3, #0]
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40023800 	.word	0x40023800
 8006504:	40023c00 	.word	0x40023c00

08006508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006530:	4b66      	ldr	r3, [pc, #408]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006536:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653e:	4963      	ldr	r1, [pc, #396]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006540:	4313      	orrs	r3, r2
 8006542:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006552:	4b5e      	ldr	r3, [pc, #376]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006558:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006560:	495a      	ldr	r1, [pc, #360]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10b      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800657c:	2b00      	cmp	r3, #0
 800657e:	d105      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006588:	2b00      	cmp	r3, #0
 800658a:	d075      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800658c:	4b50      	ldr	r3, [pc, #320]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006592:	f7fb fb75 	bl	8001c80 <HAL_GetTick>
 8006596:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006598:	e008      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800659a:	f7fb fb71 	bl	8001c80 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e1dc      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065ac:	4b47      	ldr	r3, [pc, #284]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f0      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d009      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	019a      	lsls	r2, r3, #6
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	071b      	lsls	r3, r3, #28
 80065d0:	493e      	ldr	r1, [pc, #248]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01f      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065e4:	4b39      	ldr	r3, [pc, #228]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ea:	0f1b      	lsrs	r3, r3, #28
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	019a      	lsls	r2, r3, #6
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	061b      	lsls	r3, r3, #24
 80065fe:	431a      	orrs	r2, r3
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	071b      	lsls	r3, r3, #28
 8006604:	4931      	ldr	r1, [pc, #196]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800660c:	4b2f      	ldr	r3, [pc, #188]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800660e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006612:	f023 021f 	bic.w	r2, r3, #31
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	3b01      	subs	r3, #1
 800661c:	492b      	ldr	r1, [pc, #172]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800661e:	4313      	orrs	r3, r2
 8006620:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00d      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	019a      	lsls	r2, r3, #6
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	061b      	lsls	r3, r3, #24
 800663c:	431a      	orrs	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	071b      	lsls	r3, r3, #28
 8006644:	4921      	ldr	r1, [pc, #132]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800664c:	4b20      	ldr	r3, [pc, #128]	@ (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800664e:	2201      	movs	r2, #1
 8006650:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006652:	f7fb fb15 	bl	8001c80 <HAL_GetTick>
 8006656:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006658:	e008      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800665a:	f7fb fb11 	bl	8001c80 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e17c      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800666c:	4b17      	ldr	r3, [pc, #92]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d112      	bne.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10c      	bne.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 80ce 	beq.w	800683a <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80066a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066a6:	f040 80c8 	bne.w	800683a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066aa:	4b0a      	ldr	r3, [pc, #40]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066b0:	f7fb fae6 	bl	8001c80 <HAL_GetTick>
 80066b4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066b6:	e00f      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066b8:	f7fb fae2 	bl	8001c80 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d908      	bls.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e14d      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80066ca:	bf00      	nop
 80066cc:	40023800 	.word	0x40023800
 80066d0:	42470068 	.word	0x42470068
 80066d4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066d8:	4ba5      	ldr	r3, [pc, #660]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066e4:	d0e8      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d02e      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80066f2:	4b9f      	ldr	r3, [pc, #636]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f8:	0c1b      	lsrs	r3, r3, #16
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	3301      	adds	r3, #1
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006704:	4b9a      	ldr	r3, [pc, #616]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670a:	0f1b      	lsrs	r3, r3, #28
 800670c:	f003 0307 	and.w	r3, r3, #7
 8006710:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	019a      	lsls	r2, r3, #6
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	085b      	lsrs	r3, r3, #1
 800671c:	3b01      	subs	r3, #1
 800671e:	041b      	lsls	r3, r3, #16
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	061b      	lsls	r3, r3, #24
 8006728:	431a      	orrs	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	071b      	lsls	r3, r3, #28
 800672e:	4990      	ldr	r1, [pc, #576]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006736:	4b8e      	ldr	r3, [pc, #568]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800673c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006744:	3b01      	subs	r3, #1
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	4989      	ldr	r1, [pc, #548]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800674a:	4313      	orrs	r3, r2
 800674c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d02c      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800675c:	4b84      	ldr	r3, [pc, #528]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006762:	0c1b      	lsrs	r3, r3, #16
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	3301      	adds	r3, #1
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800676e:	4b80      	ldr	r3, [pc, #512]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006774:	0e1b      	lsrs	r3, r3, #24
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	019a      	lsls	r2, r3, #6
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	3b01      	subs	r3, #1
 8006788:	041b      	lsls	r3, r3, #16
 800678a:	431a      	orrs	r2, r3
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	061b      	lsls	r3, r3, #24
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	071b      	lsls	r3, r3, #28
 8006798:	4975      	ldr	r1, [pc, #468]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800679a:	4313      	orrs	r3, r2
 800679c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067a0:	4b73      	ldr	r3, [pc, #460]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ae:	4970      	ldr	r1, [pc, #448]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d024      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80067c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067ca:	d11f      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067cc:	4b68      	ldr	r3, [pc, #416]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067d2:	0e1b      	lsrs	r3, r3, #24
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067da:	4b65      	ldr	r3, [pc, #404]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e0:	0f1b      	lsrs	r3, r3, #28
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	019a      	lsls	r2, r3, #6
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	085b      	lsrs	r3, r3, #1
 80067f4:	3b01      	subs	r3, #1
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	431a      	orrs	r2, r3
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	061b      	lsls	r3, r3, #24
 80067fe:	431a      	orrs	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	071b      	lsls	r3, r3, #28
 8006804:	495a      	ldr	r1, [pc, #360]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800680c:	4b59      	ldr	r3, [pc, #356]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800680e:	2201      	movs	r2, #1
 8006810:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006812:	f7fb fa35 	bl	8001c80 <HAL_GetTick>
 8006816:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006818:	e008      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800681a:	f7fb fa31 	bl	8001c80 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e09c      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800682c:	4b50      	ldr	r3, [pc, #320]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006838:	d1ef      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8083 	beq.w	800694e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006848:	2300      	movs	r3, #0
 800684a:	60bb      	str	r3, [r7, #8]
 800684c:	4b48      	ldr	r3, [pc, #288]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800684e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006850:	4a47      	ldr	r2, [pc, #284]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006856:	6413      	str	r3, [r2, #64]	@ 0x40
 8006858:	4b45      	ldr	r3, [pc, #276]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800685a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006864:	4b44      	ldr	r3, [pc, #272]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a43      	ldr	r2, [pc, #268]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800686a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800686e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006870:	f7fb fa06 	bl	8001c80 <HAL_GetTick>
 8006874:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006876:	e008      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006878:	f7fb fa02 	bl	8001c80 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e06d      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800688a:	4b3b      	ldr	r3, [pc, #236]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0f0      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006896:	4b36      	ldr	r3, [pc, #216]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800689e:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d02f      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d028      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068bc:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068be:	4b2f      	ldr	r3, [pc, #188]	@ (800697c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068c4:	4b2d      	ldr	r3, [pc, #180]	@ (800697c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068ca:	4a29      	ldr	r2, [pc, #164]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068d0:	4b27      	ldr	r3, [pc, #156]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d114      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068dc:	f7fb f9d0 	bl	8001c80 <HAL_GetTick>
 80068e0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e2:	e00a      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e4:	f7fb f9cc 	bl	8001c80 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e035      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0ee      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800690e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006912:	d10d      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006914:	4b16      	ldr	r3, [pc, #88]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006920:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006928:	4911      	ldr	r1, [pc, #68]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800692a:	4313      	orrs	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
 800692e:	e005      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006930:	4b0f      	ldr	r3, [pc, #60]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	4a0e      	ldr	r2, [pc, #56]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006936:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800693a:	6093      	str	r3, [r2, #8]
 800693c:	4b0c      	ldr	r3, [pc, #48]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800693e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006948:	4909      	ldr	r1, [pc, #36]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800694a:	4313      	orrs	r3, r2
 800694c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006960:	4b07      	ldr	r3, [pc, #28]	@ (8006980 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006962:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	40023800 	.word	0x40023800
 8006974:	42470070 	.word	0x42470070
 8006978:	40007000 	.word	0x40007000
 800697c:	42470e40 	.word	0x42470e40
 8006980:	424711e0 	.word	0x424711e0

08006984 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e273      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d075      	beq.n	8006a8e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80069a2:	4b88      	ldr	r3, [pc, #544]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 030c 	and.w	r3, r3, #12
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d00c      	beq.n	80069c8 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ae:	4b85      	ldr	r3, [pc, #532]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 030c 	and.w	r3, r3, #12
        || \
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d112      	bne.n	80069e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ba:	4b82      	ldr	r3, [pc, #520]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069c6:	d10b      	bne.n	80069e0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c8:	4b7e      	ldr	r3, [pc, #504]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d05b      	beq.n	8006a8c <HAL_RCC_OscConfig+0x108>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d157      	bne.n	8006a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e24e      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069e8:	d106      	bne.n	80069f8 <HAL_RCC_OscConfig+0x74>
 80069ea:	4b76      	ldr	r3, [pc, #472]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a75      	ldr	r2, [pc, #468]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	e01d      	b.n	8006a34 <HAL_RCC_OscConfig+0xb0>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a00:	d10c      	bne.n	8006a1c <HAL_RCC_OscConfig+0x98>
 8006a02:	4b70      	ldr	r3, [pc, #448]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a6f      	ldr	r2, [pc, #444]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a6c      	ldr	r2, [pc, #432]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	e00b      	b.n	8006a34 <HAL_RCC_OscConfig+0xb0>
 8006a1c:	4b69      	ldr	r3, [pc, #420]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a68      	ldr	r2, [pc, #416]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	4b66      	ldr	r3, [pc, #408]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a65      	ldr	r2, [pc, #404]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d013      	beq.n	8006a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3c:	f7fb f920 	bl	8001c80 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a44:	f7fb f91c 	bl	8001c80 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b64      	cmp	r3, #100	@ 0x64
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e213      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a56:	4b5b      	ldr	r3, [pc, #364]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0f0      	beq.n	8006a44 <HAL_RCC_OscConfig+0xc0>
 8006a62:	e014      	b.n	8006a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a64:	f7fb f90c 	bl	8001c80 <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a6c:	f7fb f908 	bl	8001c80 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b64      	cmp	r3, #100	@ 0x64
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e1ff      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a7e:	4b51      	ldr	r3, [pc, #324]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f0      	bne.n	8006a6c <HAL_RCC_OscConfig+0xe8>
 8006a8a:	e000      	b.n	8006a8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d063      	beq.n	8006b62 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 030c 	and.w	r3, r3, #12
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00b      	beq.n	8006abe <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aa6:	4b47      	ldr	r3, [pc, #284]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
        || \
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d11c      	bne.n	8006aec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ab2:	4b44      	ldr	r3, [pc, #272]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d116      	bne.n	8006aec <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006abe:	4b41      	ldr	r3, [pc, #260]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x152>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d001      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e1d3      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	4937      	ldr	r1, [pc, #220]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aea:	e03a      	b.n	8006b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d020      	beq.n	8006b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006af4:	4b34      	ldr	r3, [pc, #208]	@ (8006bc8 <HAL_RCC_OscConfig+0x244>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afa:	f7fb f8c1 	bl	8001c80 <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b02:	f7fb f8bd 	bl	8001c80 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e1b4      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b14:	4b2b      	ldr	r3, [pc, #172]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f0      	beq.n	8006b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b20:	4b28      	ldr	r3, [pc, #160]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	4925      	ldr	r1, [pc, #148]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]
 8006b34:	e015      	b.n	8006b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b36:	4b24      	ldr	r3, [pc, #144]	@ (8006bc8 <HAL_RCC_OscConfig+0x244>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3c:	f7fb f8a0 	bl	8001c80 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b44:	f7fb f89c 	bl	8001c80 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e193      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b56:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f0      	bne.n	8006b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d036      	beq.n	8006bdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d016      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b76:	4b15      	ldr	r3, [pc, #84]	@ (8006bcc <HAL_RCC_OscConfig+0x248>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7c:	f7fb f880 	bl	8001c80 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b84:	f7fb f87c 	bl	8001c80 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e173      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b96:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0x200>
 8006ba2:	e01b      	b.n	8006bdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ba4:	4b09      	ldr	r3, [pc, #36]	@ (8006bcc <HAL_RCC_OscConfig+0x248>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006baa:	f7fb f869 	bl	8001c80 <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb0:	e00e      	b.n	8006bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bb2:	f7fb f865 	bl	8001c80 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d907      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e15c      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	42470000 	.word	0x42470000
 8006bcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd0:	4b8a      	ldr	r3, [pc, #552]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1ea      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8097 	beq.w	8006d18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bea:	2300      	movs	r3, #0
 8006bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bee:	4b83      	ldr	r3, [pc, #524]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10f      	bne.n	8006c1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60bb      	str	r3, [r7, #8]
 8006bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	4a7e      	ldr	r2, [pc, #504]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c12:	60bb      	str	r3, [r7, #8]
 8006c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c16:	2301      	movs	r3, #1
 8006c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1a:	4b79      	ldr	r3, [pc, #484]	@ (8006e00 <HAL_RCC_OscConfig+0x47c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d118      	bne.n	8006c58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c26:	4b76      	ldr	r3, [pc, #472]	@ (8006e00 <HAL_RCC_OscConfig+0x47c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a75      	ldr	r2, [pc, #468]	@ (8006e00 <HAL_RCC_OscConfig+0x47c>)
 8006c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c32:	f7fb f825 	bl	8001c80 <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c3a:	f7fb f821 	bl	8001c80 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e118      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8006e00 <HAL_RCC_OscConfig+0x47c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f0      	beq.n	8006c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d106      	bne.n	8006c6e <HAL_RCC_OscConfig+0x2ea>
 8006c60:	4b66      	ldr	r3, [pc, #408]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c64:	4a65      	ldr	r2, [pc, #404]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c6c:	e01c      	b.n	8006ca8 <HAL_RCC_OscConfig+0x324>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	d10c      	bne.n	8006c90 <HAL_RCC_OscConfig+0x30c>
 8006c76:	4b61      	ldr	r3, [pc, #388]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c7a:	4a60      	ldr	r2, [pc, #384]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c7c:	f043 0304 	orr.w	r3, r3, #4
 8006c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c82:	4b5e      	ldr	r3, [pc, #376]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c86:	4a5d      	ldr	r2, [pc, #372]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c8e:	e00b      	b.n	8006ca8 <HAL_RCC_OscConfig+0x324>
 8006c90:	4b5a      	ldr	r3, [pc, #360]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c94:	4a59      	ldr	r2, [pc, #356]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c96:	f023 0301 	bic.w	r3, r3, #1
 8006c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c9c:	4b57      	ldr	r3, [pc, #348]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca0:	4a56      	ldr	r2, [pc, #344]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006ca2:	f023 0304 	bic.w	r3, r3, #4
 8006ca6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d015      	beq.n	8006cdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb0:	f7fa ffe6 	bl	8001c80 <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb6:	e00a      	b.n	8006cce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb8:	f7fa ffe2 	bl	8001c80 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e0d7      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cce:	4b4b      	ldr	r3, [pc, #300]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0ee      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x334>
 8006cda:	e014      	b.n	8006d06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cdc:	f7fa ffd0 	bl	8001c80 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce2:	e00a      	b.n	8006cfa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ce4:	f7fa ffcc 	bl	8001c80 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e0c1      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cfa:	4b40      	ldr	r3, [pc, #256]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1ee      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d105      	bne.n	8006d18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d10:	4a3a      	ldr	r2, [pc, #232]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80ad 	beq.w	8006e7c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d22:	4b36      	ldr	r3, [pc, #216]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 030c 	and.w	r3, r3, #12
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d060      	beq.n	8006df0 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d145      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d36:	4b33      	ldr	r3, [pc, #204]	@ (8006e04 <HAL_RCC_OscConfig+0x480>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3c:	f7fa ffa0 	bl	8001c80 <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d44:	f7fa ff9c 	bl	8001c80 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e093      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d56:	4b29      	ldr	r3, [pc, #164]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69da      	ldr	r2, [r3, #28]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d70:	019b      	lsls	r3, r3, #6
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	041b      	lsls	r3, r3, #16
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d84:	061b      	lsls	r3, r3, #24
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8c:	071b      	lsls	r3, r3, #28
 8006d8e:	491b      	ldr	r1, [pc, #108]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d94:	4b1b      	ldr	r3, [pc, #108]	@ (8006e04 <HAL_RCC_OscConfig+0x480>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9a:	f7fa ff71 	bl	8001c80 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da2:	f7fa ff6d 	bl	8001c80 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e064      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db4:	4b11      	ldr	r3, [pc, #68]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0f0      	beq.n	8006da2 <HAL_RCC_OscConfig+0x41e>
 8006dc0:	e05c      	b.n	8006e7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc2:	4b10      	ldr	r3, [pc, #64]	@ (8006e04 <HAL_RCC_OscConfig+0x480>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc8:	f7fa ff5a 	bl	8001c80 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd0:	f7fa ff56 	bl	8001c80 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e04d      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de2:	4b06      	ldr	r3, [pc, #24]	@ (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x44c>
 8006dee:	e045      	b.n	8006e7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d107      	bne.n	8006e08 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e040      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
 8006dfc:	40023800 	.word	0x40023800
 8006e00:	40007000 	.word	0x40007000
 8006e04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e08:	4b1f      	ldr	r3, [pc, #124]	@ (8006e88 <HAL_RCC_OscConfig+0x504>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d030      	beq.n	8006e78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d129      	bne.n	8006e78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d122      	bne.n	8006e78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e38:	4013      	ands	r3, r2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d119      	bne.n	8006e78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	3b01      	subs	r3, #1
 8006e52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d10f      	bne.n	8006e78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d107      	bne.n	8006e78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d001      	beq.n	8006e7c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40023800 	.word	0x40023800

08006e8c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e10c      	b.n	80070c8 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fa fcf6 	bl	80018b4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f903 	bl	80070dc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f938 	bl	800714c <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d030      	beq.n	8006f46 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f957 	bl	8007198 <SAI_GetInputClock>
 8006eea:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	025b      	lsls	r3, r3, #9
 8006efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f02:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a72      	ldr	r2, [pc, #456]	@ (80070d0 <HAL_SAI_Init+0x244>)
 8006f08:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0c:	08da      	lsrs	r2, r3, #3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	4b6e      	ldr	r3, [pc, #440]	@ (80070d0 <HAL_SAI_Init+0x244>)
 8006f16:	fba3 2301 	umull	r2, r3, r3, r1
 8006f1a:	08da      	lsrs	r2, r3, #3
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	1aca      	subs	r2, r1, r3
 8006f26:	2a08      	cmp	r2, #8
 8006f28:	d904      	bls.n	8006f34 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d104      	bne.n	8006f46 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f40:	085a      	lsrs	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_SAI_Init+0xca>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d109      	bne.n	8006f6a <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <HAL_SAI_Init+0xd6>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e001      	b.n	8006f66 <HAL_SAI_Init+0xda>
 8006f62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	e008      	b.n	8006f7c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d102      	bne.n	8006f78 <HAL_SAI_Init+0xec>
 8006f72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f76:	e000      	b.n	8006f7a <HAL_SAI_Init+0xee>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d811      	bhi.n	8006fa8 <HAL_SAI_Init+0x11c>
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d20b      	bcs.n	8006fa0 <HAL_SAI_Init+0x114>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_SAI_Init+0x106>
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d003      	beq.n	8006f98 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8006f90:	e00a      	b.n	8006fa8 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	613b      	str	r3, [r7, #16]
    break;
 8006f96:	e008      	b.n	8006faa <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f9c:	613b      	str	r3, [r7, #16]
    break;
 8006f9e:	e004      	b.n	8006faa <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006fa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006fa4:	613b      	str	r3, [r7, #16]
    break;
 8006fa6:	e000      	b.n	8006faa <HAL_SAI_Init+0x11e>
      break;
 8006fa8:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6819      	ldr	r1, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	4b47      	ldr	r3, [pc, #284]	@ (80070d4 <HAL_SAI_Init+0x248>)
 8006fb6:	400b      	ands	r3, r1
 8006fb8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6819      	ldr	r1, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006fce:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8006fe2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006fee:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff4:	051b      	lsls	r3, r3, #20
 8006ff6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800700e:	f023 030f 	bic.w	r3, r3, #15
 8007012:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6859      	ldr	r1, [r3, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6899      	ldr	r1, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	4b26      	ldr	r3, [pc, #152]	@ (80070d8 <HAL_SAI_Init+0x24c>)
 800703e:	400b      	ands	r3, r1
 8007040:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6899      	ldr	r1, [r3, #8]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007052:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8007058:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 800705e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007064:	3b01      	subs	r3, #1
 8007066:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007068:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68d9      	ldr	r1, [r3, #12]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007080:	400b      	ands	r3, r1
 8007082:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68d9      	ldr	r1, [r3, #12]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007092:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007098:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800709a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070a0:	3b01      	subs	r3, #1
 80070a2:	021b      	lsls	r3, r3, #8
 80070a4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	cccccccd 	.word	0xcccccccd
 80070d4:	ff05c010 	.word	0xff05c010
 80070d8:	fff88000 	.word	0xfff88000

080070dc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80070e4:	4b17      	ldr	r3, [pc, #92]	@ (8007144 <SAI_Disable+0x68>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a17      	ldr	r2, [pc, #92]	@ (8007148 <SAI_Disable+0x6c>)
 80070ea:	fba2 2303 	umull	r2, r3, r2, r3
 80070ee:	0b1b      	lsrs	r3, r3, #12
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007106:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	1e5a      	subs	r2, r3, #1
 800710c:	60fa      	str	r2, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007118:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	72fb      	strb	r3, [r7, #11]
      break;
 8007126:	e006      	b.n	8007136 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e8      	bne.n	8007108 <SAI_Disable+0x2c>

  return status;
 8007136:	7afb      	ldrb	r3, [r7, #11]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	20000000 	.word	0x20000000
 8007148:	95cbec1b 	.word	0x95cbec1b

0800714c <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d00c      	beq.n	8007176 <SAI_BlockSynchroConfig+0x2a>
 800715c:	2b02      	cmp	r3, #2
 800715e:	d80d      	bhi.n	800717c <SAI_BlockSynchroConfig+0x30>
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <SAI_BlockSynchroConfig+0x1e>
 8007164:	2b01      	cmp	r3, #1
 8007166:	d003      	beq.n	8007170 <SAI_BlockSynchroConfig+0x24>
 8007168:	e008      	b.n	800717c <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]
      break;
 800716e:	e008      	b.n	8007182 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007170:	2310      	movs	r3, #16
 8007172:	60fb      	str	r3, [r7, #12]
      break;
 8007174:	e005      	b.n	8007182 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007176:	2320      	movs	r3, #32
 8007178:	60fb      	str	r3, [r7, #12]
      break;
 800717a:	e002      	b.n	8007182 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]
      break;
 8007180:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8007182:	4a04      	ldr	r2, [pc, #16]	@ (8007194 <SAI_BlockSynchroConfig+0x48>)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	40015800 	.word	0x40015800

08007198 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a46      	ldr	r2, [pc, #280]	@ (80072cc <SAI_GetInputClock+0x134>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d10b      	bne.n	80071ce <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 80071b6:	4b46      	ldr	r3, [pc, #280]	@ (80072d0 <SAI_GetInputClock+0x138>)
 80071b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	4942      	ldr	r1, [pc, #264]	@ (80072d0 <SAI_GetInputClock+0x138>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 80071cc:	e00b      	b.n	80071e6 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 80071ce:	4b40      	ldr	r3, [pc, #256]	@ (80072d0 <SAI_GetInputClock+0x138>)
 80071d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	493c      	ldr	r1, [pc, #240]	@ (80072d0 <SAI_GetInputClock+0x138>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80071e6:	4b3a      	ldr	r3, [pc, #232]	@ (80072d0 <SAI_GetInputClock+0x138>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d108      	bne.n	8007204 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071f2:	4b37      	ldr	r3, [pc, #220]	@ (80072d0 <SAI_GetInputClock+0x138>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071fa:	4a36      	ldr	r2, [pc, #216]	@ (80072d4 <SAI_GetInputClock+0x13c>)
 80071fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	e007      	b.n	8007214 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007204:	4b32      	ldr	r3, [pc, #200]	@ (80072d0 <SAI_GetInputClock+0x138>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800720c:	4a32      	ldr	r2, [pc, #200]	@ (80072d8 <SAI_GetInputClock+0x140>)
 800720e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007212:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d121      	bne.n	8007260 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800721c:	4b2c      	ldr	r3, [pc, #176]	@ (80072d0 <SAI_GetInputClock+0x138>)
 800721e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007222:	0e1b      	lsrs	r3, r3, #24
 8007224:	f003 030f 	and.w	r3, r3, #15
 8007228:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 800722a:	4b29      	ldr	r3, [pc, #164]	@ (80072d0 <SAI_GetInputClock+0x138>)
 800722c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007230:	099b      	lsrs	r3, r3, #6
 8007232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	fb03 f202 	mul.w	r2, r3, r2
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007242:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8007244:	4b22      	ldr	r3, [pc, #136]	@ (80072d0 <SAI_GetInputClock+0x138>)
 8007246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800724a:	0a1b      	lsrs	r3, r3, #8
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	3301      	adds	r3, #1
 8007252:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	fbb2 f3f3 	udiv	r3, r2, r3
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e02d      	b.n	80072bc <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007268:	d120      	bne.n	80072ac <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800726a:	4b19      	ldr	r3, [pc, #100]	@ (80072d0 <SAI_GetInputClock+0x138>)
 800726c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007270:	0e1b      	lsrs	r3, r3, #24
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8007278:	4b15      	ldr	r3, [pc, #84]	@ (80072d0 <SAI_GetInputClock+0x138>)
 800727a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800727e:	099b      	lsrs	r3, r3, #6
 8007280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	fb03 f202 	mul.w	r2, r3, r2
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007290:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8007292:	4b0f      	ldr	r3, [pc, #60]	@ (80072d0 <SAI_GetInputClock+0x138>)
 8007294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007298:	f003 031f 	and.w	r3, r3, #31
 800729c:	3301      	adds	r3, #1
 800729e:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e007      	b.n	80072bc <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 80072ac:	4b08      	ldr	r3, [pc, #32]	@ (80072d0 <SAI_GetInputClock+0x138>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	4a07      	ldr	r2, [pc, #28]	@ (80072d0 <SAI_GetInputClock+0x138>)
 80072b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80072b6:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 80072b8:	4b08      	ldr	r3, [pc, #32]	@ (80072dc <SAI_GetInputClock+0x144>)
 80072ba:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 80072bc:	697b      	ldr	r3, [r7, #20]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40015804 	.word	0x40015804
 80072d0:	40023800 	.word	0x40023800
 80072d4:	00f42400 	.word	0x00f42400
 80072d8:	007a1200 	.word	0x007a1200
 80072dc:	00bb8000 	.word	0x00bb8000

080072e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e022      	b.n	8007338 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7fa f91b 	bl	8001540 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2203      	movs	r2, #3
 800730e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f814 	bl	8007340 <HAL_SD_InitCard>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e00a      	b.n	8007338 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007340:	b5b0      	push	{r4, r5, r7, lr}
 8007342:	b08e      	sub	sp, #56	@ 0x38
 8007344:	af04      	add	r7, sp, #16
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007348:	2300      	movs	r3, #0
 800734a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007358:	2300      	movs	r3, #0
 800735a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800735c:	2376      	movs	r3, #118	@ 0x76
 800735e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681d      	ldr	r5, [r3, #0]
 8007364:	466c      	mov	r4, sp
 8007366:	f107 0314 	add.w	r3, r7, #20
 800736a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800736e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007372:	f107 0308 	add.w	r3, r7, #8
 8007376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007378:	4628      	mov	r0, r5
 800737a:	f002 f96f 	bl	800965c <SDIO_Init>
 800737e:	4603      	mov	r3, r0
 8007380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e04f      	b.n	8007430 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007390:	4b29      	ldr	r3, [pc, #164]	@ (8007438 <HAL_SD_InitCard+0xf8>)
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f002 f9a7 	bl	80096ee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80073a0:	4b25      	ldr	r3, [pc, #148]	@ (8007438 <HAL_SD_InitCard+0xf8>)
 80073a2:	2201      	movs	r2, #1
 80073a4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80073a6:	2002      	movs	r0, #2
 80073a8:	f7fa fc76 	bl	8001c98 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 ff03 	bl	80081b8 <SD_PowerON>
 80073b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00b      	beq.n	80073d2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e02e      	b.n	8007430 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fe22 	bl	800801c <SD_InitCard>
 80073d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00b      	beq.n	80073f8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e01b      	b.n	8007430 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007400:	4618      	mov	r0, r3
 8007402:	f002 fa06 	bl	8009812 <SDMMC_CmdBlockLength>
 8007406:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00f      	beq.n	800742e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a0a      	ldr	r2, [pc, #40]	@ (800743c <HAL_SD_InitCard+0xfc>)
 8007414:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3728      	adds	r7, #40	@ 0x28
 8007434:	46bd      	mov	sp, r7
 8007436:	bdb0      	pop	{r4, r5, r7, pc}
 8007438:	422580a0 	.word	0x422580a0
 800743c:	004005ff 	.word	0x004005ff

08007440 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b092      	sub	sp, #72	@ 0x48
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800744e:	f7fa fc17 	bl	8001c80 <HAL_GetTick>
 8007452:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d107      	bne.n	8007472 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007466:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e1bd      	b.n	80077ee <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b01      	cmp	r3, #1
 800747c:	f040 81b0 	bne.w	80077e0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007486:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	441a      	add	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007490:	429a      	cmp	r2, r3
 8007492:	d907      	bls.n	80074a4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007498:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e1a4      	b.n	80077ee <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2203      	movs	r2, #3
 80074a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2200      	movs	r2, #0
 80074b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d002      	beq.n	80074c2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80074bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074be:	025b      	lsls	r3, r3, #9
 80074c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80074c2:	f04f 33ff 	mov.w	r3, #4294967295
 80074c6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	025b      	lsls	r3, r3, #9
 80074cc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80074ce:	2390      	movs	r3, #144	@ 0x90
 80074d0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80074d2:	2302      	movs	r3, #2
 80074d4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80074da:	2301      	movs	r3, #1
 80074dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f107 0214 	add.w	r2, r7, #20
 80074e6:	4611      	mov	r1, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f002 f966 	bl	80097ba <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d90a      	bls.n	800750a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2202      	movs	r2, #2
 80074f8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007500:	4618      	mov	r0, r3
 8007502:	f002 f9ca 	bl	800989a <SDMMC_CmdReadMultiBlock>
 8007506:	6478      	str	r0, [r7, #68]	@ 0x44
 8007508:	e009      	b.n	800751e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2201      	movs	r2, #1
 800750e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007516:	4618      	mov	r0, r3
 8007518:	f002 f99d 	bl	8009856 <SDMMC_CmdReadSingleBlock>
 800751c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800751e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007520:	2b00      	cmp	r3, #0
 8007522:	d012      	beq.n	800754a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a7a      	ldr	r2, [pc, #488]	@ (8007714 <HAL_SD_ReadBlocks+0x2d4>)
 800752a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007532:	431a      	orrs	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e151      	b.n	80077ee <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800754e:	e061      	b.n	8007614 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007556:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d03c      	beq.n	80075d8 <HAL_SD_ReadBlocks+0x198>
 800755e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d039      	beq.n	80075d8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007564:	2300      	movs	r3, #0
 8007566:	643b      	str	r3, [r7, #64]	@ 0x40
 8007568:	e033      	b.n	80075d2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f002 f89f 	bl	80096b2 <SDIO_ReadFIFO>
 8007574:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007578:	b2da      	uxtb	r2, r3
 800757a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800757e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007580:	3301      	adds	r3, #1
 8007582:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007586:	3b01      	subs	r3, #1
 8007588:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800758a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758c:	0a1b      	lsrs	r3, r3, #8
 800758e:	b2da      	uxtb	r2, r3
 8007590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007592:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007596:	3301      	adds	r3, #1
 8007598:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800759a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800759c:	3b01      	subs	r3, #1
 800759e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80075a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a2:	0c1b      	lsrs	r3, r3, #16
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80075aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ac:	3301      	adds	r3, #1
 80075ae:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80075b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b2:	3b01      	subs	r3, #1
 80075b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80075b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b8:	0e1b      	lsrs	r3, r3, #24
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075be:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80075c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c2:	3301      	adds	r3, #1
 80075c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80075c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075c8:	3b01      	subs	r3, #1
 80075ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80075cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075ce:	3301      	adds	r3, #1
 80075d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d4:	2b07      	cmp	r3, #7
 80075d6:	d9c8      	bls.n	800756a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80075d8:	f7fa fb52 	bl	8001c80 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d902      	bls.n	80075ee <HAL_SD_ReadBlocks+0x1ae>
 80075e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d112      	bne.n	8007614 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a48      	ldr	r2, [pc, #288]	@ (8007714 <HAL_SD_ReadBlocks+0x2d4>)
 80075f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e0ec      	b.n	80077ee <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800761a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800761e:	2b00      	cmp	r3, #0
 8007620:	d096      	beq.n	8007550 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762c:	2b00      	cmp	r3, #0
 800762e:	d022      	beq.n	8007676 <HAL_SD_ReadBlocks+0x236>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d91f      	bls.n	8007676 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800763a:	2b03      	cmp	r3, #3
 800763c:	d01b      	beq.n	8007676 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4618      	mov	r0, r3
 8007644:	f002 f990 	bl	8009968 <SDMMC_CmdStopTransfer>
 8007648:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800764a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800764c:	2b00      	cmp	r3, #0
 800764e:	d012      	beq.n	8007676 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a2f      	ldr	r2, [pc, #188]	@ (8007714 <HAL_SD_ReadBlocks+0x2d4>)
 8007656:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800765c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800765e:	431a      	orrs	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e0bb      	b.n	80077ee <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b00      	cmp	r3, #0
 8007682:	d012      	beq.n	80076aa <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a22      	ldr	r2, [pc, #136]	@ (8007714 <HAL_SD_ReadBlocks+0x2d4>)
 800768a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007690:	f043 0208 	orr.w	r2, r3, #8
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e0a1      	b.n	80077ee <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d012      	beq.n	80076de <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a15      	ldr	r2, [pc, #84]	@ (8007714 <HAL_SD_ReadBlocks+0x2d4>)
 80076be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c4:	f043 0202 	orr.w	r2, r3, #2
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e087      	b.n	80077ee <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d064      	beq.n	80077b6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a08      	ldr	r2, [pc, #32]	@ (8007714 <HAL_SD_ReadBlocks+0x2d4>)
 80076f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f8:	f043 0220 	orr.w	r2, r3, #32
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e06d      	b.n	80077ee <HAL_SD_ReadBlocks+0x3ae>
 8007712:	bf00      	nop
 8007714:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4618      	mov	r0, r3
 800771e:	f001 ffc8 	bl	80096b2 <SDIO_ReadFIFO>
 8007722:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007726:	b2da      	uxtb	r2, r3
 8007728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800772a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800772c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800772e:	3301      	adds	r3, #1
 8007730:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007734:	3b01      	subs	r3, #1
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	b2da      	uxtb	r2, r3
 800773e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007740:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007744:	3301      	adds	r3, #1
 8007746:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800774a:	3b01      	subs	r3, #1
 800774c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800774e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007750:	0c1b      	lsrs	r3, r3, #16
 8007752:	b2da      	uxtb	r2, r3
 8007754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007756:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775a:	3301      	adds	r3, #1
 800775c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800775e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007760:	3b01      	subs	r3, #1
 8007762:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	0e1b      	lsrs	r3, r3, #24
 8007768:	b2da      	uxtb	r2, r3
 800776a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800776e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007770:	3301      	adds	r3, #1
 8007772:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007776:	3b01      	subs	r3, #1
 8007778:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800777a:	f7fa fa81 	bl	8001c80 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007786:	429a      	cmp	r2, r3
 8007788:	d902      	bls.n	8007790 <HAL_SD_ReadBlocks+0x350>
 800778a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800778c:	2b00      	cmp	r3, #0
 800778e:	d112      	bne.n	80077b6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a18      	ldr	r2, [pc, #96]	@ (80077f8 <HAL_SD_ReadBlocks+0x3b8>)
 8007796:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e01b      	b.n	80077ee <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <HAL_SD_ReadBlocks+0x38a>
 80077c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1a6      	bne.n	8007718 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f240 523a 	movw	r2, #1338	@ 0x53a
 80077d2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80077dc:	2300      	movs	r3, #0
 80077de:	e006      	b.n	80077ee <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
  }
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3748      	adds	r7, #72	@ 0x48
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	004005ff 	.word	0x004005ff

080077fc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b092      	sub	sp, #72	@ 0x48
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
 8007808:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800780a:	f7fa fa39 	bl	8001c80 <HAL_GetTick>
 800780e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d107      	bne.n	800782e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007822:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e165      	b.n	8007afa <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b01      	cmp	r3, #1
 8007838:	f040 8158 	bne.w	8007aec <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007842:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	441a      	add	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800784c:	429a      	cmp	r2, r3
 800784e:	d907      	bls.n	8007860 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007854:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e14c      	b.n	8007afa <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2203      	movs	r2, #3
 8007864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2200      	movs	r2, #0
 800786e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007874:	2b01      	cmp	r3, #1
 8007876:	d002      	beq.n	800787e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787a:	025b      	lsls	r3, r3, #9
 800787c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800787e:	f04f 33ff 	mov.w	r3, #4294967295
 8007882:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	025b      	lsls	r3, r3, #9
 8007888:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800788a:	2390      	movs	r3, #144	@ 0x90
 800788c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800788e:	2300      	movs	r3, #0
 8007890:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007892:	2300      	movs	r3, #0
 8007894:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007896:	2301      	movs	r3, #1
 8007898:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f107 0218 	add.w	r2, r7, #24
 80078a2:	4611      	mov	r1, r2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f001 ff88 	bl	80097ba <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d90a      	bls.n	80078c6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80078bc:	4618      	mov	r0, r3
 80078be:	f002 f830 	bl	8009922 <SDMMC_CmdWriteMultiBlock>
 80078c2:	6478      	str	r0, [r7, #68]	@ 0x44
 80078c4:	e009      	b.n	80078da <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2210      	movs	r2, #16
 80078ca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80078d2:	4618      	mov	r0, r3
 80078d4:	f002 f803 	bl	80098de <SDMMC_CmdWriteSingleBlock>
 80078d8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80078da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d012      	beq.n	8007906 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a87      	ldr	r2, [pc, #540]	@ (8007b04 <HAL_SD_WriteBlocks+0x308>)
 80078e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ee:	431a      	orrs	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e0f9      	b.n	8007afa <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800790a:	e065      	b.n	80079d8 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d040      	beq.n	800799c <HAL_SD_WriteBlocks+0x1a0>
 800791a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d03d      	beq.n	800799c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007920:	2300      	movs	r3, #0
 8007922:	643b      	str	r3, [r7, #64]	@ 0x40
 8007924:	e037      	b.n	8007996 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800792c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800792e:	3301      	adds	r3, #1
 8007930:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007934:	3b01      	subs	r3, #1
 8007936:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	021a      	lsls	r2, r3, #8
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007946:	3301      	adds	r3, #1
 8007948:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800794a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794c:	3b01      	subs	r3, #1
 800794e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	041a      	lsls	r2, r3, #16
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800795c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795e:	3301      	adds	r3, #1
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007964:	3b01      	subs	r3, #1
 8007966:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	061a      	lsls	r2, r3, #24
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007976:	3301      	adds	r3, #1
 8007978:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800797a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800797c:	3b01      	subs	r3, #1
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f107 0214 	add.w	r2, r7, #20
 8007988:	4611      	mov	r1, r2
 800798a:	4618      	mov	r0, r3
 800798c:	f001 fe9e 	bl	80096cc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007992:	3301      	adds	r3, #1
 8007994:	643b      	str	r3, [r7, #64]	@ 0x40
 8007996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007998:	2b07      	cmp	r3, #7
 800799a:	d9c4      	bls.n	8007926 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800799c:	f7fa f970 	bl	8001c80 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d902      	bls.n	80079b2 <HAL_SD_WriteBlocks+0x1b6>
 80079ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d112      	bne.n	80079d8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a53      	ldr	r2, [pc, #332]	@ (8007b04 <HAL_SD_WriteBlocks+0x308>)
 80079b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079c0:	431a      	orrs	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e090      	b.n	8007afa <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079de:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d092      	beq.n	800790c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d022      	beq.n	8007a3a <HAL_SD_WriteBlocks+0x23e>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d91f      	bls.n	8007a3a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d01b      	beq.n	8007a3a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f001 ffae 	bl	8009968 <SDMMC_CmdStopTransfer>
 8007a0c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d012      	beq.n	8007a3a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a3a      	ldr	r2, [pc, #232]	@ (8007b04 <HAL_SD_WriteBlocks+0x308>)
 8007a1a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a22:	431a      	orrs	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e05f      	b.n	8007afa <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d012      	beq.n	8007a6e <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8007b04 <HAL_SD_WriteBlocks+0x308>)
 8007a4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a54:	f043 0208 	orr.w	r2, r3, #8
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e045      	b.n	8007afa <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d012      	beq.n	8007aa2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a20      	ldr	r2, [pc, #128]	@ (8007b04 <HAL_SD_WriteBlocks+0x308>)
 8007a82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a88:	f043 0202 	orr.w	r2, r3, #2
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e02b      	b.n	8007afa <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aa8:	f003 0310 	and.w	r3, r3, #16
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d012      	beq.n	8007ad6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a13      	ldr	r2, [pc, #76]	@ (8007b04 <HAL_SD_WriteBlocks+0x308>)
 8007ab6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007abc:	f043 0210 	orr.w	r2, r3, #16
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e011      	b.n	8007afa <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007ade:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e006      	b.n	8007afa <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
  }
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3748      	adds	r7, #72	@ 0x48
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	004005ff 	.word	0x004005ff

08007b08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b16:	0f9b      	lsrs	r3, r3, #30
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b22:	0e9b      	lsrs	r3, r3, #26
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b34:	0e1b      	lsrs	r3, r3, #24
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	f003 0303 	and.w	r3, r3, #3
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b46:	0c1b      	lsrs	r3, r3, #16
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b52:	0a1b      	lsrs	r3, r3, #8
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b68:	0d1b      	lsrs	r3, r3, #20
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b74:	0c1b      	lsrs	r3, r3, #16
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	f003 030f 	and.w	r3, r3, #15
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b86:	0bdb      	lsrs	r3, r3, #15
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b98:	0b9b      	lsrs	r3, r3, #14
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007baa:	0b5b      	lsrs	r3, r3, #13
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bbc:	0b1b      	lsrs	r3, r3, #12
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d163      	bne.n	8007ca0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bdc:	009a      	lsls	r2, r3, #2
 8007bde:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007be2:	4013      	ands	r3, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007be8:	0f92      	lsrs	r2, r2, #30
 8007bea:	431a      	orrs	r2, r3
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bf4:	0edb      	lsrs	r3, r3, #27
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c06:	0e1b      	lsrs	r3, r3, #24
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	f003 0307 	and.w	r3, r3, #7
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c18:	0d5b      	lsrs	r3, r3, #21
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	f003 0307 	and.w	r3, r3, #7
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c2a:	0c9b      	lsrs	r3, r3, #18
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c3c:	0bdb      	lsrs	r3, r3, #15
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	7e1b      	ldrb	r3, [r3, #24]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	f003 0307 	and.w	r3, r3, #7
 8007c5e:	3302      	adds	r3, #2
 8007c60:	2201      	movs	r2, #1
 8007c62:	fa02 f303 	lsl.w	r3, r2, r3
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007c6a:	fb03 f202 	mul.w	r2, r3, r2
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	7a1b      	ldrb	r3, [r3, #8]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	409a      	lsls	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007c8c:	0a52      	lsrs	r2, r2, #9
 8007c8e:	fb03 f202 	mul.w	r2, r3, r2
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c9c:	661a      	str	r2, [r3, #96]	@ 0x60
 8007c9e:	e031      	b.n	8007d04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d11d      	bne.n	8007ce4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cac:	041b      	lsls	r3, r3, #16
 8007cae:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cb6:	0c1b      	lsrs	r3, r3, #16
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	029a      	lsls	r2, r3, #10
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cd8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	661a      	str	r2, [r3, #96]	@ 0x60
 8007ce2:	e00f      	b.n	8007d04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a58      	ldr	r2, [pc, #352]	@ (8007e4c <HAL_SD_GetCardCSD+0x344>)
 8007cea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e09d      	b.n	8007e40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d08:	0b9b      	lsrs	r3, r3, #14
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d1a:	09db      	lsrs	r3, r3, #7
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d3c:	0fdb      	lsrs	r3, r3, #31
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d48:	0f5b      	lsrs	r3, r3, #29
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	f003 0303 	and.w	r3, r3, #3
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d5a:	0e9b      	lsrs	r3, r3, #26
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6c:	0d9b      	lsrs	r3, r3, #22
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	f003 030f 	and.w	r3, r3, #15
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d7e:	0d5b      	lsrs	r3, r3, #21
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d9a:	0c1b      	lsrs	r3, r3, #16
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dae:	0bdb      	lsrs	r3, r3, #15
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dc2:	0b9b      	lsrs	r3, r3, #14
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dd6:	0b5b      	lsrs	r3, r3, #13
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dea:	0b1b      	lsrs	r3, r3, #12
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dfe:	0a9b      	lsrs	r3, r3, #10
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e12:	0a1b      	lsrs	r3, r3, #8
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	004005ff 	.word	0x004005ff

08007e50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007ea8:	b5b0      	push	{r4, r5, r7, lr}
 8007eaa:	b08e      	sub	sp, #56	@ 0x38
 8007eac:	af04      	add	r7, sp, #16
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2203      	movs	r2, #3
 8007ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d02e      	beq.n	8007f26 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ece:	d106      	bne.n	8007ede <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	639a      	str	r2, [r3, #56]	@ 0x38
 8007edc:	e029      	b.n	8007f32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ee4:	d10a      	bne.n	8007efc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa1c 	bl	8008324 <SD_WideBus_Enable>
 8007eec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007efa:	e01a      	b.n	8007f32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa59 	bl	80083ba <SD_WideBus_Disable>
 8007f08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	431a      	orrs	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f16:	e00c      	b.n	8007f32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f24:	e005      	b.n	8007f32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00b      	beq.n	8007f52 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a26      	ldr	r2, [pc, #152]	@ (8007fd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007f40:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007f50:	e01f      	b.n	8007f92 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681d      	ldr	r5, [r3, #0]
 8007f78:	466c      	mov	r4, sp
 8007f7a:	f107 0314 	add.w	r3, r7, #20
 8007f7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f86:	f107 0308 	add.w	r3, r7, #8
 8007f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f001 fb65 	bl	800965c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f001 fc39 	bl	8009812 <SDMMC_CmdBlockLength>
 8007fa0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00c      	beq.n	8007fc2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a0a      	ldr	r2, [pc, #40]	@ (8007fd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007fae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007fca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3728      	adds	r7, #40	@ 0x28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	004005ff 	.word	0x004005ff

08007fdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007fe8:	f107 030c 	add.w	r3, r7, #12
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f970 	bl	80082d4 <SD_SendStatus>
 8007ff4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d005      	beq.n	8008008 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	431a      	orrs	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	0a5b      	lsrs	r3, r3, #9
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008012:	693b      	ldr	r3, [r7, #16]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800801c:	b5b0      	push	{r4, r5, r7, lr}
 800801e:	b094      	sub	sp, #80	@ 0x50
 8008020:	af04      	add	r7, sp, #16
 8008022:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008024:	2301      	movs	r3, #1
 8008026:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4618      	mov	r0, r3
 800802e:	f001 fb6c 	bl	800970a <SDIO_GetPowerState>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008038:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800803c:	e0b8      	b.n	80081b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008042:	2b03      	cmp	r3, #3
 8008044:	d02f      	beq.n	80080a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f001 fd96 	bl	8009b7c <SDMMC_CmdSendCID>
 8008050:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <SD_InitCard+0x40>
    {
      return errorstate;
 8008058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800805a:	e0a9      	b.n	80081b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2100      	movs	r1, #0
 8008062:	4618      	mov	r0, r3
 8008064:	f001 fb96 	bl	8009794 <SDIO_GetResponse>
 8008068:	4602      	mov	r2, r0
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2104      	movs	r1, #4
 8008074:	4618      	mov	r0, r3
 8008076:	f001 fb8d 	bl	8009794 <SDIO_GetResponse>
 800807a:	4602      	mov	r2, r0
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2108      	movs	r1, #8
 8008086:	4618      	mov	r0, r3
 8008088:	f001 fb84 	bl	8009794 <SDIO_GetResponse>
 800808c:	4602      	mov	r2, r0
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	210c      	movs	r1, #12
 8008098:	4618      	mov	r0, r3
 800809a:	f001 fb7b 	bl	8009794 <SDIO_GetResponse>
 800809e:	4602      	mov	r2, r0
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d00d      	beq.n	80080ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f107 020e 	add.w	r2, r7, #14
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 fd9c 	bl	8009bf6 <SDMMC_CmdSetRelAdd>
 80080be:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80080c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <SD_InitCard+0xae>
    {
      return errorstate;
 80080c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c8:	e072      	b.n	80081b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d036      	beq.n	8008140 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80080d2:	89fb      	ldrh	r3, [r7, #14]
 80080d4:	461a      	mov	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e2:	041b      	lsls	r3, r3, #16
 80080e4:	4619      	mov	r1, r3
 80080e6:	4610      	mov	r0, r2
 80080e8:	f001 fd66 	bl	8009bb8 <SDMMC_CmdSendCSD>
 80080ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80080f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f6:	e05b      	b.n	80081b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 fb48 	bl	8009794 <SDIO_GetResponse>
 8008104:	4602      	mov	r2, r0
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2104      	movs	r1, #4
 8008110:	4618      	mov	r0, r3
 8008112:	f001 fb3f 	bl	8009794 <SDIO_GetResponse>
 8008116:	4602      	mov	r2, r0
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2108      	movs	r1, #8
 8008122:	4618      	mov	r0, r3
 8008124:	f001 fb36 	bl	8009794 <SDIO_GetResponse>
 8008128:	4602      	mov	r2, r0
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	210c      	movs	r1, #12
 8008134:	4618      	mov	r0, r3
 8008136:	f001 fb2d 	bl	8009794 <SDIO_GetResponse>
 800813a:	4602      	mov	r2, r0
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2104      	movs	r1, #4
 8008146:	4618      	mov	r0, r3
 8008148:	f001 fb24 	bl	8009794 <SDIO_GetResponse>
 800814c:	4603      	mov	r3, r0
 800814e:	0d1a      	lsrs	r2, r3, #20
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008154:	f107 0310 	add.w	r3, r7, #16
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff fcd4 	bl	8007b08 <HAL_SD_GetCardCSD>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008166:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800816a:	e021      	b.n	80081b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6819      	ldr	r1, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008174:	041b      	lsls	r3, r3, #16
 8008176:	2200      	movs	r2, #0
 8008178:	461c      	mov	r4, r3
 800817a:	4615      	mov	r5, r2
 800817c:	4622      	mov	r2, r4
 800817e:	462b      	mov	r3, r5
 8008180:	4608      	mov	r0, r1
 8008182:	f001 fc13 	bl	80099ac <SDMMC_CmdSelDesel>
 8008186:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <SD_InitCard+0x176>
  {
    return errorstate;
 800818e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008190:	e00e      	b.n	80081b0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681d      	ldr	r5, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	466c      	mov	r4, sp
 800819a:	f103 0210 	add.w	r2, r3, #16
 800819e:	ca07      	ldmia	r2, {r0, r1, r2}
 80081a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081a4:	3304      	adds	r3, #4
 80081a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081a8:	4628      	mov	r0, r5
 80081aa:	f001 fa57 	bl	800965c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3740      	adds	r7, #64	@ 0x40
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bdb0      	pop	{r4, r5, r7, pc}

080081b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	2300      	movs	r3, #0
 80081ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 fc0e 	bl	80099f2 <SDMMC_CmdGoIdleState>
 80081d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	e072      	b.n	80082c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fc21 	bl	8009a2e <SDMMC_CmdOperCond>
 80081ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00d      	beq.n	8008210 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4618      	mov	r0, r3
 8008200:	f001 fbf7 	bl	80099f2 <SDMMC_CmdGoIdleState>
 8008204:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d004      	beq.n	8008216 <SD_PowerON+0x5e>
    {
      return errorstate;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	e05b      	b.n	80082c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800821a:	2b01      	cmp	r3, #1
 800821c:	d137      	bne.n	800828e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2100      	movs	r1, #0
 8008224:	4618      	mov	r0, r3
 8008226:	f001 fc21 	bl	8009a6c <SDMMC_CmdAppCommand>
 800822a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d02d      	beq.n	800828e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008232:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008236:	e047      	b.n	80082c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2100      	movs	r1, #0
 800823e:	4618      	mov	r0, r3
 8008240:	f001 fc14 	bl	8009a6c <SDMMC_CmdAppCommand>
 8008244:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <SD_PowerON+0x98>
    {
      return errorstate;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	e03b      	b.n	80082c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	491e      	ldr	r1, [pc, #120]	@ (80082d0 <SD_PowerON+0x118>)
 8008256:	4618      	mov	r0, r3
 8008258:	f001 fc2a 	bl	8009ab0 <SDMMC_CmdAppOperCommand>
 800825c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008264:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008268:	e02e      	b.n	80082c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2100      	movs	r1, #0
 8008270:	4618      	mov	r0, r3
 8008272:	f001 fa8f 	bl	8009794 <SDIO_GetResponse>
 8008276:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	0fdb      	lsrs	r3, r3, #31
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <SD_PowerON+0xcc>
 8008280:	2301      	movs	r3, #1
 8008282:	e000      	b.n	8008286 <SD_PowerON+0xce>
 8008284:	2300      	movs	r3, #0
 8008286:	613b      	str	r3, [r7, #16]

    count++;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	3301      	adds	r3, #1
 800828c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008294:	4293      	cmp	r3, r2
 8008296:	d802      	bhi.n	800829e <SD_PowerON+0xe6>
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0cc      	beq.n	8008238 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d902      	bls.n	80082ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80082a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80082ac:	e00c      	b.n	80082c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d003      	beq.n	80082c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80082be:	e002      	b.n	80082c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	c1100000 	.word	0xc1100000

080082d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d102      	bne.n	80082ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80082e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80082e8:	e018      	b.n	800831c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f2:	041b      	lsls	r3, r3, #16
 80082f4:	4619      	mov	r1, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	f001 fc9e 	bl	8009c38 <SDMMC_CmdSendStatus>
 80082fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	e009      	b.n	800831c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2100      	movs	r1, #0
 800830e:	4618      	mov	r0, r3
 8008310:	f001 fa40 	bl	8009794 <SDIO_GetResponse>
 8008314:	4602      	mov	r2, r0
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800832c:	2300      	movs	r3, #0
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	2300      	movs	r3, #0
 8008332:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2100      	movs	r1, #0
 800833a:	4618      	mov	r0, r3
 800833c:	f001 fa2a 	bl	8009794 <SDIO_GetResponse>
 8008340:	4603      	mov	r3, r0
 8008342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008346:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800834a:	d102      	bne.n	8008352 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800834c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008350:	e02f      	b.n	80083b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008352:	f107 030c 	add.w	r3, r7, #12
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f879 	bl	8008450 <SD_FindSCR>
 800835e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	e023      	b.n	80083b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d01c      	beq.n	80083ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800837c:	041b      	lsls	r3, r3, #16
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f001 fb73 	bl	8009a6c <SDMMC_CmdAppCommand>
 8008386:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	e00f      	b.n	80083b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2102      	movs	r1, #2
 8008398:	4618      	mov	r0, r3
 800839a:	f001 fbac 	bl	8009af6 <SDMMC_CmdBusWidth>
 800839e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	e003      	b.n	80083b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80083aa:	2300      	movs	r3, #0
 80083ac:	e001      	b.n	80083b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80083ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b086      	sub	sp, #24
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80083c2:	2300      	movs	r3, #0
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	2300      	movs	r3, #0
 80083c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2100      	movs	r1, #0
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 f9df 	bl	8009794 <SDIO_GetResponse>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083e0:	d102      	bne.n	80083e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80083e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80083e6:	e02f      	b.n	8008448 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80083e8:	f107 030c 	add.w	r3, r7, #12
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f82e 	bl	8008450 <SD_FindSCR>
 80083f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	e023      	b.n	8008448 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d01c      	beq.n	8008444 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008412:	041b      	lsls	r3, r3, #16
 8008414:	4619      	mov	r1, r3
 8008416:	4610      	mov	r0, r2
 8008418:	f001 fb28 	bl	8009a6c <SDMMC_CmdAppCommand>
 800841c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	e00f      	b.n	8008448 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2100      	movs	r1, #0
 800842e:	4618      	mov	r0, r3
 8008430:	f001 fb61 	bl	8009af6 <SDMMC_CmdBusWidth>
 8008434:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	e003      	b.n	8008448 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008440:	2300      	movs	r3, #0
 8008442:	e001      	b.n	8008448 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008444:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008448:	4618      	mov	r0, r3
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008450:	b590      	push	{r4, r7, lr}
 8008452:	b08f      	sub	sp, #60	@ 0x3c
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800845a:	f7f9 fc11 	bl	8001c80 <HAL_GetTick>
 800845e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008464:	2300      	movs	r3, #0
 8008466:	60bb      	str	r3, [r7, #8]
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2108      	movs	r1, #8
 8008476:	4618      	mov	r0, r3
 8008478:	f001 f9cb 	bl	8009812 <SDMMC_CmdBlockLength>
 800847c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800847e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008486:	e0b2      	b.n	80085ee <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008490:	041b      	lsls	r3, r3, #16
 8008492:	4619      	mov	r1, r3
 8008494:	4610      	mov	r0, r2
 8008496:	f001 fae9 	bl	8009a6c <SDMMC_CmdAppCommand>
 800849a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800849c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80084a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a4:	e0a3      	b.n	80085ee <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084a6:	f04f 33ff 	mov.w	r3, #4294967295
 80084aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80084ac:	2308      	movs	r3, #8
 80084ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80084b0:	2330      	movs	r3, #48	@ 0x30
 80084b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80084b4:	2302      	movs	r3, #2
 80084b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80084bc:	2301      	movs	r3, #1
 80084be:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f107 0210 	add.w	r2, r7, #16
 80084c8:	4611      	mov	r1, r2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f001 f975 	bl	80097ba <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f001 fb30 	bl	8009b3a <SDMMC_CmdSendSCR>
 80084da:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80084dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d02a      	beq.n	8008538 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80084e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e4:	e083      	b.n	80085ee <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00f      	beq.n	8008514 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6819      	ldr	r1, [r3, #0]
 80084f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	f107 0208 	add.w	r2, r7, #8
 8008500:	18d4      	adds	r4, r2, r3
 8008502:	4608      	mov	r0, r1
 8008504:	f001 f8d5 	bl	80096b2 <SDIO_ReadFIFO>
 8008508:	4603      	mov	r3, r0
 800850a:	6023      	str	r3, [r4, #0]
      index++;
 800850c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850e:	3301      	adds	r3, #1
 8008510:	637b      	str	r3, [r7, #52]	@ 0x34
 8008512:	e006      	b.n	8008522 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800851a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d012      	beq.n	8008548 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008522:	f7f9 fbad 	bl	8001c80 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008530:	d102      	bne.n	8008538 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008532:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008536:	e05a      	b.n	80085ee <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800853e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0cf      	beq.n	80084e6 <SD_FindSCR+0x96>
 8008546:	e000      	b.n	800854a <SD_FindSCR+0xfa>
      break;
 8008548:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008550:	f003 0308 	and.w	r3, r3, #8
 8008554:	2b00      	cmp	r3, #0
 8008556:	d005      	beq.n	8008564 <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2208      	movs	r2, #8
 800855e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008560:	2308      	movs	r3, #8
 8008562:	e044      	b.n	80085ee <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2202      	movs	r2, #2
 8008578:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800857a:	2302      	movs	r3, #2
 800857c:	e037      	b.n	80085ee <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2220      	movs	r2, #32
 8008592:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008594:	2320      	movs	r3, #32
 8008596:	e02a      	b.n	80085ee <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f240 523a 	movw	r2, #1338	@ 0x53a
 80085a0:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	061a      	lsls	r2, r3, #24
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	021b      	lsls	r3, r3, #8
 80085aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80085ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80085b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	0e1b      	lsrs	r3, r3, #24
 80085be:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80085c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c2:	601a      	str	r2, [r3, #0]
    scr++;
 80085c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c6:	3304      	adds	r3, #4
 80085c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	061a      	lsls	r2, r3, #24
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	021b      	lsls	r3, r3, #8
 80085d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80085d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	0a1b      	lsrs	r3, r3, #8
 80085dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80085e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	0e1b      	lsrs	r3, r3, #24
 80085e6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80085e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ea:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	373c      	adds	r7, #60	@ 0x3c
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd90      	pop	{r4, r7, pc}

080085f6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e025      	b.n	8008656 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d106      	bne.n	8008624 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7f9 f93e 	bl	80018a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2202      	movs	r2, #2
 8008628:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	3304      	adds	r3, #4
 8008634:	4619      	mov	r1, r3
 8008636:	4610      	mov	r0, r2
 8008638:	f000 ff4a 	bl	80094d0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	461a      	mov	r2, r3
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	f000 ff9f 	bl	800958a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e041      	b.n	80086f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d106      	bne.n	800868a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7f8 ffc3 	bl	8001610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2202      	movs	r2, #2
 800868e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3304      	adds	r3, #4
 800869a:	4619      	mov	r1, r3
 800869c:	4610      	mov	r0, r2
 800869e:	f000 fa7d 	bl	8008b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b01      	cmp	r3, #1
 800870e:	d001      	beq.n	8008714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e04e      	b.n	80087b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f042 0201 	orr.w	r2, r2, #1
 800872a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a23      	ldr	r2, [pc, #140]	@ (80087c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d022      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x80>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800873e:	d01d      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x80>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a1f      	ldr	r2, [pc, #124]	@ (80087c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d018      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x80>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a1e      	ldr	r2, [pc, #120]	@ (80087c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d013      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x80>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a1c      	ldr	r2, [pc, #112]	@ (80087cc <HAL_TIM_Base_Start_IT+0xd0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d00e      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x80>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a1b      	ldr	r2, [pc, #108]	@ (80087d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d009      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x80>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a19      	ldr	r2, [pc, #100]	@ (80087d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d004      	beq.n	800877c <HAL_TIM_Base_Start_IT+0x80>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a18      	ldr	r2, [pc, #96]	@ (80087d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d111      	bne.n	80087a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 0307 	and.w	r3, r3, #7
 8008786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b06      	cmp	r3, #6
 800878c:	d010      	beq.n	80087b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f042 0201 	orr.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800879e:	e007      	b.n	80087b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f042 0201 	orr.w	r2, r2, #1
 80087ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40000400 	.word	0x40000400
 80087c8:	40000800 	.word	0x40000800
 80087cc:	40000c00 	.word	0x40000c00
 80087d0:	40010400 	.word	0x40010400
 80087d4:	40014000 	.word	0x40014000
 80087d8:	40001800 	.word	0x40001800

080087dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d020      	beq.n	8008840 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f003 0302 	and.w	r3, r3, #2
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01b      	beq.n	8008840 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f06f 0202 	mvn.w	r2, #2
 8008810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f999 	bl	8008b5e <HAL_TIM_IC_CaptureCallback>
 800882c:	e005      	b.n	800883a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f98b 	bl	8008b4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f99c 	bl	8008b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f003 0304 	and.w	r3, r3, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	d020      	beq.n	800888c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01b      	beq.n	800888c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f06f 0204 	mvn.w	r2, #4
 800885c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2202      	movs	r2, #2
 8008862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f973 	bl	8008b5e <HAL_TIM_IC_CaptureCallback>
 8008878:	e005      	b.n	8008886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f965 	bl	8008b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f976 	bl	8008b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d020      	beq.n	80088d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b00      	cmp	r3, #0
 800889e:	d01b      	beq.n	80088d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0208 	mvn.w	r2, #8
 80088a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2204      	movs	r2, #4
 80088ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f94d 	bl	8008b5e <HAL_TIM_IC_CaptureCallback>
 80088c4:	e005      	b.n	80088d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f93f 	bl	8008b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f950 	bl	8008b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f003 0310 	and.w	r3, r3, #16
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d020      	beq.n	8008924 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f003 0310 	and.w	r3, r3, #16
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01b      	beq.n	8008924 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f06f 0210 	mvn.w	r2, #16
 80088f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2208      	movs	r2, #8
 80088fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f927 	bl	8008b5e <HAL_TIM_IC_CaptureCallback>
 8008910:	e005      	b.n	800891e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f919 	bl	8008b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f92a 	bl	8008b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00c      	beq.n	8008948 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f06f 0201 	mvn.w	r2, #1
 8008940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7f8 fc02 	bl	800114c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00c      	beq.n	800896c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008958:	2b00      	cmp	r3, #0
 800895a:	d007      	beq.n	800896c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fae4 	bl	8008f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00c      	beq.n	8008990 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d007      	beq.n	8008990 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f8fb 	bl	8008b86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f003 0320 	and.w	r3, r3, #32
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00c      	beq.n	80089b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f003 0320 	and.w	r3, r3, #32
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d007      	beq.n	80089b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f06f 0220 	mvn.w	r2, #32
 80089ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fab6 	bl	8008f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089b4:	bf00      	nop
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d101      	bne.n	80089d8 <HAL_TIM_ConfigClockSource+0x1c>
 80089d4:	2302      	movs	r3, #2
 80089d6:	e0b4      	b.n	8008b42 <HAL_TIM_ConfigClockSource+0x186>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80089f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a10:	d03e      	beq.n	8008a90 <HAL_TIM_ConfigClockSource+0xd4>
 8008a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a16:	f200 8087 	bhi.w	8008b28 <HAL_TIM_ConfigClockSource+0x16c>
 8008a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a1e:	f000 8086 	beq.w	8008b2e <HAL_TIM_ConfigClockSource+0x172>
 8008a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a26:	d87f      	bhi.n	8008b28 <HAL_TIM_ConfigClockSource+0x16c>
 8008a28:	2b70      	cmp	r3, #112	@ 0x70
 8008a2a:	d01a      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0xa6>
 8008a2c:	2b70      	cmp	r3, #112	@ 0x70
 8008a2e:	d87b      	bhi.n	8008b28 <HAL_TIM_ConfigClockSource+0x16c>
 8008a30:	2b60      	cmp	r3, #96	@ 0x60
 8008a32:	d050      	beq.n	8008ad6 <HAL_TIM_ConfigClockSource+0x11a>
 8008a34:	2b60      	cmp	r3, #96	@ 0x60
 8008a36:	d877      	bhi.n	8008b28 <HAL_TIM_ConfigClockSource+0x16c>
 8008a38:	2b50      	cmp	r3, #80	@ 0x50
 8008a3a:	d03c      	beq.n	8008ab6 <HAL_TIM_ConfigClockSource+0xfa>
 8008a3c:	2b50      	cmp	r3, #80	@ 0x50
 8008a3e:	d873      	bhi.n	8008b28 <HAL_TIM_ConfigClockSource+0x16c>
 8008a40:	2b40      	cmp	r3, #64	@ 0x40
 8008a42:	d058      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x13a>
 8008a44:	2b40      	cmp	r3, #64	@ 0x40
 8008a46:	d86f      	bhi.n	8008b28 <HAL_TIM_ConfigClockSource+0x16c>
 8008a48:	2b30      	cmp	r3, #48	@ 0x30
 8008a4a:	d064      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x15a>
 8008a4c:	2b30      	cmp	r3, #48	@ 0x30
 8008a4e:	d86b      	bhi.n	8008b28 <HAL_TIM_ConfigClockSource+0x16c>
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	d060      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x15a>
 8008a54:	2b20      	cmp	r3, #32
 8008a56:	d867      	bhi.n	8008b28 <HAL_TIM_ConfigClockSource+0x16c>
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d05c      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x15a>
 8008a5c:	2b10      	cmp	r3, #16
 8008a5e:	d05a      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x15a>
 8008a60:	e062      	b.n	8008b28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a72:	f000 f9b9 	bl	8008de8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	609a      	str	r2, [r3, #8]
      break;
 8008a8e:	e04f      	b.n	8008b30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008aa0:	f000 f9a2 	bl	8008de8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ab2:	609a      	str	r2, [r3, #8]
      break;
 8008ab4:	e03c      	b.n	8008b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f000 f916 	bl	8008cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2150      	movs	r1, #80	@ 0x50
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f96f 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 8008ad4:	e02c      	b.n	8008b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f000 f935 	bl	8008d52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2160      	movs	r1, #96	@ 0x60
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 f95f 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 8008af4:	e01c      	b.n	8008b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b02:	461a      	mov	r2, r3
 8008b04:	f000 f8f6 	bl	8008cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2140      	movs	r1, #64	@ 0x40
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f94f 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 8008b14:	e00c      	b.n	8008b30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4610      	mov	r0, r2
 8008b22:	f000 f946 	bl	8008db2 <TIM_ITRx_SetConfig>
      break;
 8008b26:	e003      	b.n	8008b30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b2c:	e000      	b.n	8008b30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b52:	bf00      	nop
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
	...

08008b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a46      	ldr	r2, [pc, #280]	@ (8008cc8 <TIM_Base_SetConfig+0x12c>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d013      	beq.n	8008bdc <TIM_Base_SetConfig+0x40>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bba:	d00f      	beq.n	8008bdc <TIM_Base_SetConfig+0x40>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a43      	ldr	r2, [pc, #268]	@ (8008ccc <TIM_Base_SetConfig+0x130>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d00b      	beq.n	8008bdc <TIM_Base_SetConfig+0x40>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a42      	ldr	r2, [pc, #264]	@ (8008cd0 <TIM_Base_SetConfig+0x134>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d007      	beq.n	8008bdc <TIM_Base_SetConfig+0x40>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a41      	ldr	r2, [pc, #260]	@ (8008cd4 <TIM_Base_SetConfig+0x138>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d003      	beq.n	8008bdc <TIM_Base_SetConfig+0x40>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a40      	ldr	r2, [pc, #256]	@ (8008cd8 <TIM_Base_SetConfig+0x13c>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d108      	bne.n	8008bee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a35      	ldr	r2, [pc, #212]	@ (8008cc8 <TIM_Base_SetConfig+0x12c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d02b      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bfc:	d027      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a32      	ldr	r2, [pc, #200]	@ (8008ccc <TIM_Base_SetConfig+0x130>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d023      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a31      	ldr	r2, [pc, #196]	@ (8008cd0 <TIM_Base_SetConfig+0x134>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d01f      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a30      	ldr	r2, [pc, #192]	@ (8008cd4 <TIM_Base_SetConfig+0x138>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d01b      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a2f      	ldr	r2, [pc, #188]	@ (8008cd8 <TIM_Base_SetConfig+0x13c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d017      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a2e      	ldr	r2, [pc, #184]	@ (8008cdc <TIM_Base_SetConfig+0x140>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d013      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a2d      	ldr	r2, [pc, #180]	@ (8008ce0 <TIM_Base_SetConfig+0x144>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d00f      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a2c      	ldr	r2, [pc, #176]	@ (8008ce4 <TIM_Base_SetConfig+0x148>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00b      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a2b      	ldr	r2, [pc, #172]	@ (8008ce8 <TIM_Base_SetConfig+0x14c>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d007      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a2a      	ldr	r2, [pc, #168]	@ (8008cec <TIM_Base_SetConfig+0x150>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d003      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a29      	ldr	r2, [pc, #164]	@ (8008cf0 <TIM_Base_SetConfig+0x154>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d108      	bne.n	8008c60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a10      	ldr	r2, [pc, #64]	@ (8008cc8 <TIM_Base_SetConfig+0x12c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d003      	beq.n	8008c94 <TIM_Base_SetConfig+0xf8>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a12      	ldr	r2, [pc, #72]	@ (8008cd8 <TIM_Base_SetConfig+0x13c>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d103      	bne.n	8008c9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	691a      	ldr	r2, [r3, #16]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d105      	bne.n	8008cba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	f023 0201 	bic.w	r2, r3, #1
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	611a      	str	r2, [r3, #16]
  }
}
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	40010000 	.word	0x40010000
 8008ccc:	40000400 	.word	0x40000400
 8008cd0:	40000800 	.word	0x40000800
 8008cd4:	40000c00 	.word	0x40000c00
 8008cd8:	40010400 	.word	0x40010400
 8008cdc:	40014000 	.word	0x40014000
 8008ce0:	40014400 	.word	0x40014400
 8008ce4:	40014800 	.word	0x40014800
 8008ce8:	40001800 	.word	0x40001800
 8008cec:	40001c00 	.word	0x40001c00
 8008cf0:	40002000 	.word	0x40002000

08008cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	f023 0201 	bic.w	r2, r3, #1
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	011b      	lsls	r3, r3, #4
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f023 030a 	bic.w	r3, r3, #10
 8008d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	621a      	str	r2, [r3, #32]
}
 8008d46:	bf00      	nop
 8008d48:	371c      	adds	r7, #28
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b087      	sub	sp, #28
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6a1b      	ldr	r3, [r3, #32]
 8008d68:	f023 0210 	bic.w	r2, r3, #16
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	031b      	lsls	r3, r3, #12
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	011b      	lsls	r3, r3, #4
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	621a      	str	r2, [r3, #32]
}
 8008da6:	bf00      	nop
 8008da8:	371c      	adds	r7, #28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	f043 0307 	orr.w	r3, r3, #7
 8008dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	609a      	str	r2, [r3, #8]
}
 8008ddc:	bf00      	nop
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	021a      	lsls	r2, r3, #8
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	609a      	str	r2, [r3, #8]
}
 8008e1c:	bf00      	nop
 8008e1e:	371c      	adds	r7, #28
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e05a      	b.n	8008ef6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a21      	ldr	r2, [pc, #132]	@ (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d022      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e8c:	d01d      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1d      	ldr	r2, [pc, #116]	@ (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d018      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d013      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d00e      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a18      	ldr	r2, [pc, #96]	@ (8008f14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d009      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a17      	ldr	r2, [pc, #92]	@ (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d004      	beq.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a15      	ldr	r2, [pc, #84]	@ (8008f1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d10c      	bne.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	40010000 	.word	0x40010000
 8008f08:	40000400 	.word	0x40000400
 8008f0c:	40000800 	.word	0x40000800
 8008f10:	40000c00 	.word	0x40000c00
 8008f14:	40010400 	.word	0x40010400
 8008f18:	40014000 	.word	0x40014000
 8008f1c:	40001800 	.word	0x40001800

08008f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e042      	b.n	8008fe0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7f8 fb70 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2224      	movs	r2, #36	@ 0x24
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f82b 	bl	8008fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	691a      	ldr	r2, [r3, #16]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	695a      	ldr	r2, [r3, #20]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68da      	ldr	r2, [r3, #12]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fec:	b0c0      	sub	sp, #256	@ 0x100
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009004:	68d9      	ldr	r1, [r3, #12]
 8009006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	ea40 0301 	orr.w	r3, r0, r1
 8009010:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	431a      	orrs	r2, r3
 8009020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	431a      	orrs	r2, r3
 8009028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	4313      	orrs	r3, r2
 8009030:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009040:	f021 010c 	bic.w	r1, r1, #12
 8009044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800904e:	430b      	orrs	r3, r1
 8009050:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800905e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009062:	6999      	ldr	r1, [r3, #24]
 8009064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	ea40 0301 	orr.w	r3, r0, r1
 800906e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	4b8f      	ldr	r3, [pc, #572]	@ (80092b4 <UART_SetConfig+0x2cc>)
 8009078:	429a      	cmp	r2, r3
 800907a:	d005      	beq.n	8009088 <UART_SetConfig+0xa0>
 800907c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	4b8d      	ldr	r3, [pc, #564]	@ (80092b8 <UART_SetConfig+0x2d0>)
 8009084:	429a      	cmp	r2, r3
 8009086:	d104      	bne.n	8009092 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009088:	f7fd f9f8 	bl	800647c <HAL_RCC_GetPCLK2Freq>
 800908c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009090:	e003      	b.n	800909a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009092:	f7fd f9df 	bl	8006454 <HAL_RCC_GetPCLK1Freq>
 8009096:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800909a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090a4:	f040 810c 	bne.w	80092c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80090b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80090ba:	4622      	mov	r2, r4
 80090bc:	462b      	mov	r3, r5
 80090be:	1891      	adds	r1, r2, r2
 80090c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80090c2:	415b      	adcs	r3, r3
 80090c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80090ca:	4621      	mov	r1, r4
 80090cc:	eb12 0801 	adds.w	r8, r2, r1
 80090d0:	4629      	mov	r1, r5
 80090d2:	eb43 0901 	adc.w	r9, r3, r1
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	f04f 0300 	mov.w	r3, #0
 80090de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090ea:	4690      	mov	r8, r2
 80090ec:	4699      	mov	r9, r3
 80090ee:	4623      	mov	r3, r4
 80090f0:	eb18 0303 	adds.w	r3, r8, r3
 80090f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80090f8:	462b      	mov	r3, r5
 80090fa:	eb49 0303 	adc.w	r3, r9, r3
 80090fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800910e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009112:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009116:	460b      	mov	r3, r1
 8009118:	18db      	adds	r3, r3, r3
 800911a:	653b      	str	r3, [r7, #80]	@ 0x50
 800911c:	4613      	mov	r3, r2
 800911e:	eb42 0303 	adc.w	r3, r2, r3
 8009122:	657b      	str	r3, [r7, #84]	@ 0x54
 8009124:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009128:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800912c:	f7f7 f862 	bl	80001f4 <__aeabi_uldivmod>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4b61      	ldr	r3, [pc, #388]	@ (80092bc <UART_SetConfig+0x2d4>)
 8009136:	fba3 2302 	umull	r2, r3, r3, r2
 800913a:	095b      	lsrs	r3, r3, #5
 800913c:	011c      	lsls	r4, r3, #4
 800913e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009142:	2200      	movs	r2, #0
 8009144:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009148:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800914c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009150:	4642      	mov	r2, r8
 8009152:	464b      	mov	r3, r9
 8009154:	1891      	adds	r1, r2, r2
 8009156:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009158:	415b      	adcs	r3, r3
 800915a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800915c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009160:	4641      	mov	r1, r8
 8009162:	eb12 0a01 	adds.w	sl, r2, r1
 8009166:	4649      	mov	r1, r9
 8009168:	eb43 0b01 	adc.w	fp, r3, r1
 800916c:	f04f 0200 	mov.w	r2, #0
 8009170:	f04f 0300 	mov.w	r3, #0
 8009174:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009178:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800917c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009180:	4692      	mov	sl, r2
 8009182:	469b      	mov	fp, r3
 8009184:	4643      	mov	r3, r8
 8009186:	eb1a 0303 	adds.w	r3, sl, r3
 800918a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800918e:	464b      	mov	r3, r9
 8009190:	eb4b 0303 	adc.w	r3, fp, r3
 8009194:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80091a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80091ac:	460b      	mov	r3, r1
 80091ae:	18db      	adds	r3, r3, r3
 80091b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80091b2:	4613      	mov	r3, r2
 80091b4:	eb42 0303 	adc.w	r3, r2, r3
 80091b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80091ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80091be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80091c2:	f7f7 f817 	bl	80001f4 <__aeabi_uldivmod>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	4611      	mov	r1, r2
 80091cc:	4b3b      	ldr	r3, [pc, #236]	@ (80092bc <UART_SetConfig+0x2d4>)
 80091ce:	fba3 2301 	umull	r2, r3, r3, r1
 80091d2:	095b      	lsrs	r3, r3, #5
 80091d4:	2264      	movs	r2, #100	@ 0x64
 80091d6:	fb02 f303 	mul.w	r3, r2, r3
 80091da:	1acb      	subs	r3, r1, r3
 80091dc:	00db      	lsls	r3, r3, #3
 80091de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80091e2:	4b36      	ldr	r3, [pc, #216]	@ (80092bc <UART_SetConfig+0x2d4>)
 80091e4:	fba3 2302 	umull	r2, r3, r3, r2
 80091e8:	095b      	lsrs	r3, r3, #5
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80091f0:	441c      	add	r4, r3
 80091f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091f6:	2200      	movs	r2, #0
 80091f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009200:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009204:	4642      	mov	r2, r8
 8009206:	464b      	mov	r3, r9
 8009208:	1891      	adds	r1, r2, r2
 800920a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800920c:	415b      	adcs	r3, r3
 800920e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009210:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009214:	4641      	mov	r1, r8
 8009216:	1851      	adds	r1, r2, r1
 8009218:	6339      	str	r1, [r7, #48]	@ 0x30
 800921a:	4649      	mov	r1, r9
 800921c:	414b      	adcs	r3, r1
 800921e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009220:	f04f 0200 	mov.w	r2, #0
 8009224:	f04f 0300 	mov.w	r3, #0
 8009228:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800922c:	4659      	mov	r1, fp
 800922e:	00cb      	lsls	r3, r1, #3
 8009230:	4651      	mov	r1, sl
 8009232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009236:	4651      	mov	r1, sl
 8009238:	00ca      	lsls	r2, r1, #3
 800923a:	4610      	mov	r0, r2
 800923c:	4619      	mov	r1, r3
 800923e:	4603      	mov	r3, r0
 8009240:	4642      	mov	r2, r8
 8009242:	189b      	adds	r3, r3, r2
 8009244:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009248:	464b      	mov	r3, r9
 800924a:	460a      	mov	r2, r1
 800924c:	eb42 0303 	adc.w	r3, r2, r3
 8009250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009260:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009264:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009268:	460b      	mov	r3, r1
 800926a:	18db      	adds	r3, r3, r3
 800926c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800926e:	4613      	mov	r3, r2
 8009270:	eb42 0303 	adc.w	r3, r2, r3
 8009274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800927a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800927e:	f7f6 ffb9 	bl	80001f4 <__aeabi_uldivmod>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4b0d      	ldr	r3, [pc, #52]	@ (80092bc <UART_SetConfig+0x2d4>)
 8009288:	fba3 1302 	umull	r1, r3, r3, r2
 800928c:	095b      	lsrs	r3, r3, #5
 800928e:	2164      	movs	r1, #100	@ 0x64
 8009290:	fb01 f303 	mul.w	r3, r1, r3
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	3332      	adds	r3, #50	@ 0x32
 800929a:	4a08      	ldr	r2, [pc, #32]	@ (80092bc <UART_SetConfig+0x2d4>)
 800929c:	fba2 2303 	umull	r2, r3, r2, r3
 80092a0:	095b      	lsrs	r3, r3, #5
 80092a2:	f003 0207 	and.w	r2, r3, #7
 80092a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4422      	add	r2, r4
 80092ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092b0:	e106      	b.n	80094c0 <UART_SetConfig+0x4d8>
 80092b2:	bf00      	nop
 80092b4:	40011000 	.word	0x40011000
 80092b8:	40011400 	.word	0x40011400
 80092bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80092ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80092ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80092d2:	4642      	mov	r2, r8
 80092d4:	464b      	mov	r3, r9
 80092d6:	1891      	adds	r1, r2, r2
 80092d8:	6239      	str	r1, [r7, #32]
 80092da:	415b      	adcs	r3, r3
 80092dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80092de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092e2:	4641      	mov	r1, r8
 80092e4:	1854      	adds	r4, r2, r1
 80092e6:	4649      	mov	r1, r9
 80092e8:	eb43 0501 	adc.w	r5, r3, r1
 80092ec:	f04f 0200 	mov.w	r2, #0
 80092f0:	f04f 0300 	mov.w	r3, #0
 80092f4:	00eb      	lsls	r3, r5, #3
 80092f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092fa:	00e2      	lsls	r2, r4, #3
 80092fc:	4614      	mov	r4, r2
 80092fe:	461d      	mov	r5, r3
 8009300:	4643      	mov	r3, r8
 8009302:	18e3      	adds	r3, r4, r3
 8009304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009308:	464b      	mov	r3, r9
 800930a:	eb45 0303 	adc.w	r3, r5, r3
 800930e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800931e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009322:	f04f 0200 	mov.w	r2, #0
 8009326:	f04f 0300 	mov.w	r3, #0
 800932a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800932e:	4629      	mov	r1, r5
 8009330:	008b      	lsls	r3, r1, #2
 8009332:	4621      	mov	r1, r4
 8009334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009338:	4621      	mov	r1, r4
 800933a:	008a      	lsls	r2, r1, #2
 800933c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009340:	f7f6 ff58 	bl	80001f4 <__aeabi_uldivmod>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4b60      	ldr	r3, [pc, #384]	@ (80094cc <UART_SetConfig+0x4e4>)
 800934a:	fba3 2302 	umull	r2, r3, r3, r2
 800934e:	095b      	lsrs	r3, r3, #5
 8009350:	011c      	lsls	r4, r3, #4
 8009352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009356:	2200      	movs	r2, #0
 8009358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800935c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009360:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009364:	4642      	mov	r2, r8
 8009366:	464b      	mov	r3, r9
 8009368:	1891      	adds	r1, r2, r2
 800936a:	61b9      	str	r1, [r7, #24]
 800936c:	415b      	adcs	r3, r3
 800936e:	61fb      	str	r3, [r7, #28]
 8009370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009374:	4641      	mov	r1, r8
 8009376:	1851      	adds	r1, r2, r1
 8009378:	6139      	str	r1, [r7, #16]
 800937a:	4649      	mov	r1, r9
 800937c:	414b      	adcs	r3, r1
 800937e:	617b      	str	r3, [r7, #20]
 8009380:	f04f 0200 	mov.w	r2, #0
 8009384:	f04f 0300 	mov.w	r3, #0
 8009388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800938c:	4659      	mov	r1, fp
 800938e:	00cb      	lsls	r3, r1, #3
 8009390:	4651      	mov	r1, sl
 8009392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009396:	4651      	mov	r1, sl
 8009398:	00ca      	lsls	r2, r1, #3
 800939a:	4610      	mov	r0, r2
 800939c:	4619      	mov	r1, r3
 800939e:	4603      	mov	r3, r0
 80093a0:	4642      	mov	r2, r8
 80093a2:	189b      	adds	r3, r3, r2
 80093a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093a8:	464b      	mov	r3, r9
 80093aa:	460a      	mov	r2, r1
 80093ac:	eb42 0303 	adc.w	r3, r2, r3
 80093b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80093be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80093cc:	4649      	mov	r1, r9
 80093ce:	008b      	lsls	r3, r1, #2
 80093d0:	4641      	mov	r1, r8
 80093d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093d6:	4641      	mov	r1, r8
 80093d8:	008a      	lsls	r2, r1, #2
 80093da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80093de:	f7f6 ff09 	bl	80001f4 <__aeabi_uldivmod>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4611      	mov	r1, r2
 80093e8:	4b38      	ldr	r3, [pc, #224]	@ (80094cc <UART_SetConfig+0x4e4>)
 80093ea:	fba3 2301 	umull	r2, r3, r3, r1
 80093ee:	095b      	lsrs	r3, r3, #5
 80093f0:	2264      	movs	r2, #100	@ 0x64
 80093f2:	fb02 f303 	mul.w	r3, r2, r3
 80093f6:	1acb      	subs	r3, r1, r3
 80093f8:	011b      	lsls	r3, r3, #4
 80093fa:	3332      	adds	r3, #50	@ 0x32
 80093fc:	4a33      	ldr	r2, [pc, #204]	@ (80094cc <UART_SetConfig+0x4e4>)
 80093fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009402:	095b      	lsrs	r3, r3, #5
 8009404:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009408:	441c      	add	r4, r3
 800940a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800940e:	2200      	movs	r2, #0
 8009410:	673b      	str	r3, [r7, #112]	@ 0x70
 8009412:	677a      	str	r2, [r7, #116]	@ 0x74
 8009414:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009418:	4642      	mov	r2, r8
 800941a:	464b      	mov	r3, r9
 800941c:	1891      	adds	r1, r2, r2
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	415b      	adcs	r3, r3
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009428:	4641      	mov	r1, r8
 800942a:	1851      	adds	r1, r2, r1
 800942c:	6039      	str	r1, [r7, #0]
 800942e:	4649      	mov	r1, r9
 8009430:	414b      	adcs	r3, r1
 8009432:	607b      	str	r3, [r7, #4]
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	f04f 0300 	mov.w	r3, #0
 800943c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009440:	4659      	mov	r1, fp
 8009442:	00cb      	lsls	r3, r1, #3
 8009444:	4651      	mov	r1, sl
 8009446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800944a:	4651      	mov	r1, sl
 800944c:	00ca      	lsls	r2, r1, #3
 800944e:	4610      	mov	r0, r2
 8009450:	4619      	mov	r1, r3
 8009452:	4603      	mov	r3, r0
 8009454:	4642      	mov	r2, r8
 8009456:	189b      	adds	r3, r3, r2
 8009458:	66bb      	str	r3, [r7, #104]	@ 0x68
 800945a:	464b      	mov	r3, r9
 800945c:	460a      	mov	r2, r1
 800945e:	eb42 0303 	adc.w	r3, r2, r3
 8009462:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	663b      	str	r3, [r7, #96]	@ 0x60
 800946e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800947c:	4649      	mov	r1, r9
 800947e:	008b      	lsls	r3, r1, #2
 8009480:	4641      	mov	r1, r8
 8009482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009486:	4641      	mov	r1, r8
 8009488:	008a      	lsls	r2, r1, #2
 800948a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800948e:	f7f6 feb1 	bl	80001f4 <__aeabi_uldivmod>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	4b0d      	ldr	r3, [pc, #52]	@ (80094cc <UART_SetConfig+0x4e4>)
 8009498:	fba3 1302 	umull	r1, r3, r3, r2
 800949c:	095b      	lsrs	r3, r3, #5
 800949e:	2164      	movs	r1, #100	@ 0x64
 80094a0:	fb01 f303 	mul.w	r3, r1, r3
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	011b      	lsls	r3, r3, #4
 80094a8:	3332      	adds	r3, #50	@ 0x32
 80094aa:	4a08      	ldr	r2, [pc, #32]	@ (80094cc <UART_SetConfig+0x4e4>)
 80094ac:	fba2 2303 	umull	r2, r3, r2, r3
 80094b0:	095b      	lsrs	r3, r3, #5
 80094b2:	f003 020f 	and.w	r2, r3, #15
 80094b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4422      	add	r2, r4
 80094be:	609a      	str	r2, [r3, #8]
}
 80094c0:	bf00      	nop
 80094c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80094c6:	46bd      	mov	sp, r7
 80094c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094cc:	51eb851f 	.word	0x51eb851f

080094d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d123      	bne.n	800952a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80094ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	6851      	ldr	r1, [r2, #4]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	6892      	ldr	r2, [r2, #8]
 80094f6:	4311      	orrs	r1, r2
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	68d2      	ldr	r2, [r2, #12]
 80094fc:	4311      	orrs	r1, r2
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	6912      	ldr	r2, [r2, #16]
 8009502:	4311      	orrs	r1, r2
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	6952      	ldr	r2, [r2, #20]
 8009508:	4311      	orrs	r1, r2
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	6992      	ldr	r2, [r2, #24]
 800950e:	4311      	orrs	r1, r2
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	69d2      	ldr	r2, [r2, #28]
 8009514:	4311      	orrs	r1, r2
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	6a12      	ldr	r2, [r2, #32]
 800951a:	4311      	orrs	r1, r2
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009520:	430a      	orrs	r2, r1
 8009522:	431a      	orrs	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	e028      	b.n	800957c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	69d9      	ldr	r1, [r3, #28]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	4319      	orrs	r1, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009540:	430b      	orrs	r3, r1
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009550:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009554:	683a      	ldr	r2, [r7, #0]
 8009556:	6851      	ldr	r1, [r2, #4]
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	6892      	ldr	r2, [r2, #8]
 800955c:	4311      	orrs	r1, r2
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	68d2      	ldr	r2, [r2, #12]
 8009562:	4311      	orrs	r1, r2
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	6912      	ldr	r2, [r2, #16]
 8009568:	4311      	orrs	r1, r2
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	6952      	ldr	r2, [r2, #20]
 800956e:	4311      	orrs	r1, r2
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	6992      	ldr	r2, [r2, #24]
 8009574:	430a      	orrs	r2, r1
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800958a:	b480      	push	{r7}
 800958c:	b085      	sub	sp, #20
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	60b9      	str	r1, [r7, #8]
 8009594:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d128      	bne.n	80095ee <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	1e59      	subs	r1, r3, #1
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	4319      	orrs	r1, r3
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	3b01      	subs	r3, #1
 80095ba:	021b      	lsls	r3, r3, #8
 80095bc:	4319      	orrs	r1, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	031b      	lsls	r3, r3, #12
 80095c6:	4319      	orrs	r1, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	041b      	lsls	r3, r3, #16
 80095d0:	4319      	orrs	r1, r3
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	051b      	lsls	r3, r3, #20
 80095da:	4319      	orrs	r1, r3
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	061b      	lsls	r3, r3, #24
 80095e4:	430b      	orrs	r3, r1
 80095e6:	431a      	orrs	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	609a      	str	r2, [r3, #8]
 80095ec:	e02f      	b.n	800964e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80095f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	68d2      	ldr	r2, [r2, #12]
 80095fe:	3a01      	subs	r2, #1
 8009600:	0311      	lsls	r1, r2, #12
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	6952      	ldr	r2, [r2, #20]
 8009606:	3a01      	subs	r2, #1
 8009608:	0512      	lsls	r2, r2, #20
 800960a:	430a      	orrs	r2, r1
 800960c:	431a      	orrs	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	1e59      	subs	r1, r3, #1
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	3b01      	subs	r3, #1
 8009626:	011b      	lsls	r3, r3, #4
 8009628:	4319      	orrs	r1, r3
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	3b01      	subs	r3, #1
 8009630:	021b      	lsls	r3, r3, #8
 8009632:	4319      	orrs	r1, r3
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	3b01      	subs	r3, #1
 800963a:	041b      	lsls	r3, r3, #16
 800963c:	4319      	orrs	r1, r3
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	3b01      	subs	r3, #1
 8009644:	061b      	lsls	r3, r3, #24
 8009646:	430b      	orrs	r3, r1
 8009648:	431a      	orrs	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800965c:	b084      	sub	sp, #16
 800965e:	b480      	push	{r7}
 8009660:	b085      	sub	sp, #20
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	f107 001c 	add.w	r0, r7, #28
 800966a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009672:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009674:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009676:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800967a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800967c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800967e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009682:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009686:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4313      	orrs	r3, r2
 800968c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009696:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	431a      	orrs	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	b004      	add	sp, #16
 80096b0:	4770      	bx	lr

080096b2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2203      	movs	r2, #3
 80096fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0303 	and.w	r3, r3, #3
}
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009726:	b480      	push	{r7}
 8009728:	b085      	sub	sp, #20
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009744:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800974a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009750:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009760:	f023 030f 	bic.w	r3, r3, #15
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	431a      	orrs	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800977a:	b480      	push	{r7}
 800977c:	b083      	sub	sp, #12
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	b2db      	uxtb	r3, r3
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3314      	adds	r3, #20
 80097a2:	461a      	mov	r2, r3
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	4413      	add	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
}  
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b085      	sub	sp, #20
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097e0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80097e6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80097ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	431a      	orrs	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009804:	2300      	movs	r3, #0

}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b088      	sub	sp, #32
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009820:	2310      	movs	r3, #16
 8009822:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009824:	2340      	movs	r3, #64	@ 0x40
 8009826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009828:	2300      	movs	r3, #0
 800982a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800982c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009830:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009832:	f107 0308 	add.w	r3, r7, #8
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff ff74 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800983e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009842:	2110      	movs	r1, #16
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fa19 	bl	8009c7c <SDMMC_GetCmdResp1>
 800984a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800984c:	69fb      	ldr	r3, [r7, #28]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3720      	adds	r7, #32
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b088      	sub	sp, #32
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009864:	2311      	movs	r3, #17
 8009866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009868:	2340      	movs	r3, #64	@ 0x40
 800986a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800986c:	2300      	movs	r3, #0
 800986e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009874:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009876:	f107 0308 	add.w	r3, r7, #8
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7ff ff52 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009886:	2111      	movs	r1, #17
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f9f7 	bl	8009c7c <SDMMC_GetCmdResp1>
 800988e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009890:	69fb      	ldr	r3, [r7, #28]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3720      	adds	r7, #32
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b088      	sub	sp, #32
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80098a8:	2312      	movs	r3, #18
 80098aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098ac:	2340      	movs	r3, #64	@ 0x40
 80098ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098b0:	2300      	movs	r3, #0
 80098b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098ba:	f107 0308 	add.w	r3, r7, #8
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff ff30 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80098c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098ca:	2112      	movs	r1, #18
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f9d5 	bl	8009c7c <SDMMC_GetCmdResp1>
 80098d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098d4:	69fb      	ldr	r3, [r7, #28]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3720      	adds	r7, #32
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b088      	sub	sp, #32
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80098ec:	2318      	movs	r3, #24
 80098ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098f0:	2340      	movs	r3, #64	@ 0x40
 80098f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098f4:	2300      	movs	r3, #0
 80098f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098fe:	f107 0308 	add.w	r3, r7, #8
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7ff ff0e 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800990a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800990e:	2118      	movs	r1, #24
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f9b3 	bl	8009c7c <SDMMC_GetCmdResp1>
 8009916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009918:	69fb      	ldr	r3, [r7, #28]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3720      	adds	r7, #32
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b088      	sub	sp, #32
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009930:	2319      	movs	r3, #25
 8009932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009934:	2340      	movs	r3, #64	@ 0x40
 8009936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009938:	2300      	movs	r3, #0
 800993a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800993c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009940:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009942:	f107 0308 	add.w	r3, r7, #8
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff feec 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800994e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009952:	2119      	movs	r1, #25
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f991 	bl	8009c7c <SDMMC_GetCmdResp1>
 800995a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800995c:	69fb      	ldr	r3, [r7, #28]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b088      	sub	sp, #32
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009974:	230c      	movs	r3, #12
 8009976:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009978:	2340      	movs	r3, #64	@ 0x40
 800997a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800997c:	2300      	movs	r3, #0
 800997e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009984:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009986:	f107 0308 	add.w	r3, r7, #8
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7ff feca 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009992:	4a05      	ldr	r2, [pc, #20]	@ (80099a8 <SDMMC_CmdStopTransfer+0x40>)
 8009994:	210c      	movs	r1, #12
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f970 	bl	8009c7c <SDMMC_GetCmdResp1>
 800999c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800999e:	69fb      	ldr	r3, [r7, #28]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3720      	adds	r7, #32
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	05f5e100 	.word	0x05f5e100

080099ac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	@ 0x28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80099bc:	2307      	movs	r3, #7
 80099be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099c0:	2340      	movs	r3, #64	@ 0x40
 80099c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099c4:	2300      	movs	r3, #0
 80099c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099cc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099ce:	f107 0310 	add.w	r3, r7, #16
 80099d2:	4619      	mov	r1, r3
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f7ff fea6 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80099da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099de:	2107      	movs	r1, #7
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f000 f94b 	bl	8009c7c <SDMMC_GetCmdResp1>
 80099e6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80099e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3728      	adds	r7, #40	@ 0x28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b088      	sub	sp, #32
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80099fe:	2300      	movs	r3, #0
 8009a00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009a02:	2300      	movs	r3, #0
 8009a04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a06:	2300      	movs	r3, #0
 8009a08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a10:	f107 0308 	add.w	r3, r7, #8
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff fe85 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fb65 	bl	800a0ec <SDMMC_GetCmdError>
 8009a22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a24:	69fb      	ldr	r3, [r7, #28]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3720      	adds	r7, #32
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b088      	sub	sp, #32
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009a36:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009a3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009a3c:	2308      	movs	r3, #8
 8009a3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a40:	2340      	movs	r3, #64	@ 0x40
 8009a42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a44:	2300      	movs	r3, #0
 8009a46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a4e:	f107 0308 	add.w	r3, r7, #8
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7ff fe66 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 faf8 	bl	800a050 <SDMMC_GetCmdResp7>
 8009a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a62:	69fb      	ldr	r3, [r7, #28]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3720      	adds	r7, #32
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009a7a:	2337      	movs	r3, #55	@ 0x37
 8009a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a7e:	2340      	movs	r3, #64	@ 0x40
 8009a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a82:	2300      	movs	r3, #0
 8009a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a8c:	f107 0308 	add.w	r3, r7, #8
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff fe47 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a9c:	2137      	movs	r1, #55	@ 0x37
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f8ec 	bl	8009c7c <SDMMC_GetCmdResp1>
 8009aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3720      	adds	r7, #32
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b088      	sub	sp, #32
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009ac0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009ac6:	2329      	movs	r3, #41	@ 0x29
 8009ac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aca:	2340      	movs	r3, #64	@ 0x40
 8009acc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ad6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ad8:	f107 0308 	add.w	r3, r7, #8
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7ff fe21 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f9ff 	bl	8009ee8 <SDMMC_GetCmdResp3>
 8009aea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aec:	69fb      	ldr	r3, [r7, #28]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3720      	adds	r7, #32
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b088      	sub	sp, #32
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009b04:	2306      	movs	r3, #6
 8009b06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b08:	2340      	movs	r3, #64	@ 0x40
 8009b0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b16:	f107 0308 	add.w	r3, r7, #8
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7ff fe02 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b26:	2106      	movs	r1, #6
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f8a7 	bl	8009c7c <SDMMC_GetCmdResp1>
 8009b2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b30:	69fb      	ldr	r3, [r7, #28]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3720      	adds	r7, #32
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b088      	sub	sp, #32
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009b46:	2333      	movs	r3, #51	@ 0x33
 8009b48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b4a:	2340      	movs	r3, #64	@ 0x40
 8009b4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b58:	f107 0308 	add.w	r3, r7, #8
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff fde1 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b68:	2133      	movs	r1, #51	@ 0x33
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f886 	bl	8009c7c <SDMMC_GetCmdResp1>
 8009b70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b72:	69fb      	ldr	r3, [r7, #28]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3720      	adds	r7, #32
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b8c:	23c0      	movs	r3, #192	@ 0xc0
 8009b8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b9a:	f107 0308 	add.w	r3, r7, #8
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7ff fdc0 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f956 	bl	8009e58 <SDMMC_GetCmdResp2>
 8009bac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bae:	69fb      	ldr	r3, [r7, #28]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3720      	adds	r7, #32
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009bc6:	2309      	movs	r3, #9
 8009bc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009bca:	23c0      	movs	r3, #192	@ 0xc0
 8009bcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bd8:	f107 0308 	add.w	r3, r7, #8
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff fda1 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f937 	bl	8009e58 <SDMMC_GetCmdResp2>
 8009bea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bec:	69fb      	ldr	r3, [r7, #28]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3720      	adds	r7, #32
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b088      	sub	sp, #32
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c00:	2300      	movs	r3, #0
 8009c02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009c04:	2303      	movs	r3, #3
 8009c06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c08:	2340      	movs	r3, #64	@ 0x40
 8009c0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c16:	f107 0308 	add.w	r3, r7, #8
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff fd82 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	2103      	movs	r1, #3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f99c 	bl	8009f64 <SDMMC_GetCmdResp6>
 8009c2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3720      	adds	r7, #32
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b088      	sub	sp, #32
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009c46:	230d      	movs	r3, #13
 8009c48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c4a:	2340      	movs	r3, #64	@ 0x40
 8009c4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c58:	f107 0308 	add.w	r3, r7, #8
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff fd61 	bl	8009726 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c68:	210d      	movs	r1, #13
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f806 	bl	8009c7c <SDMMC_GetCmdResp1>
 8009c70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c72:	69fb      	ldr	r3, [r7, #28]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3720      	adds	r7, #32
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b088      	sub	sp, #32
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	460b      	mov	r3, r1
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009c8a:	4b70      	ldr	r3, [pc, #448]	@ (8009e4c <SDMMC_GetCmdResp1+0x1d0>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a70      	ldr	r2, [pc, #448]	@ (8009e50 <SDMMC_GetCmdResp1+0x1d4>)
 8009c90:	fba2 2303 	umull	r2, r3, r2, r3
 8009c94:	0a5a      	lsrs	r2, r3, #9
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	fb02 f303 	mul.w	r3, r2, r3
 8009c9c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	1e5a      	subs	r2, r3, #1
 8009ca2:	61fa      	str	r2, [r7, #28]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d102      	bne.n	8009cae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ca8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009cac:	e0c9      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cb2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0ef      	beq.n	8009c9e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1ea      	bne.n	8009c9e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d004      	beq.n	8009cde <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2204      	movs	r2, #4
 8009cd8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009cda:	2304      	movs	r3, #4
 8009cdc:	e0b1      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d004      	beq.n	8009cf4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2201      	movs	r2, #1
 8009cee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e0a6      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	22c5      	movs	r2, #197	@ 0xc5
 8009cf8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7ff fd3d 	bl	800977a <SDIO_GetCommandResponse>
 8009d00:	4603      	mov	r3, r0
 8009d02:	461a      	mov	r2, r3
 8009d04:	7afb      	ldrb	r3, [r7, #11]
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d001      	beq.n	8009d0e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e099      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009d0e:	2100      	movs	r1, #0
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f7ff fd3f 	bl	8009794 <SDIO_GetResponse>
 8009d16:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8009e54 <SDMMC_GetCmdResp1+0x1d8>)
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009d22:	2300      	movs	r3, #0
 8009d24:	e08d      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	da02      	bge.n	8009d32 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009d2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009d30:	e087      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d001      	beq.n	8009d40 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009d3c:	2340      	movs	r3, #64	@ 0x40
 8009d3e:	e080      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009d4a:	2380      	movs	r3, #128	@ 0x80
 8009d4c:	e079      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d5c:	e071      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d6c:	e069      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009d78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d7c:	e061      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009d88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d8c:	e059      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d9c:	e051      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d002      	beq.n	8009dae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009da8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009dac:	e049      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009db8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009dbc:	e041      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009dc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dcc:	e039      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009dd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009ddc:	e031      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009de8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009dec:	e029      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009df8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009dfc:	e021      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009e08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009e0c:	e019      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009e18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009e1c:	e011      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d002      	beq.n	8009e2e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009e28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009e2c:	e009      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f003 0308 	and.w	r3, r3, #8
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d002      	beq.n	8009e3e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009e38:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009e3c:	e001      	b.n	8009e42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3720      	adds	r7, #32
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20000000 	.word	0x20000000
 8009e50:	10624dd3 	.word	0x10624dd3
 8009e54:	fdffe008 	.word	0xfdffe008

08009e58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e60:	4b1f      	ldr	r3, [pc, #124]	@ (8009ee0 <SDMMC_GetCmdResp2+0x88>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a1f      	ldr	r2, [pc, #124]	@ (8009ee4 <SDMMC_GetCmdResp2+0x8c>)
 8009e66:	fba2 2303 	umull	r2, r3, r2, r3
 8009e6a:	0a5b      	lsrs	r3, r3, #9
 8009e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e70:	fb02 f303 	mul.w	r3, r2, r3
 8009e74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	1e5a      	subs	r2, r3, #1
 8009e7a:	60fa      	str	r2, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d102      	bne.n	8009e86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e84:	e026      	b.n	8009ed4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0ef      	beq.n	8009e76 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1ea      	bne.n	8009e76 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d004      	beq.n	8009eb6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2204      	movs	r2, #4
 8009eb0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009eb2:	2304      	movs	r3, #4
 8009eb4:	e00e      	b.n	8009ed4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d004      	beq.n	8009ecc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e003      	b.n	8009ed4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	22c5      	movs	r2, #197	@ 0xc5
 8009ed0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3714      	adds	r7, #20
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr
 8009ee0:	20000000 	.word	0x20000000
 8009ee4:	10624dd3 	.word	0x10624dd3

08009ee8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8009f5c <SDMMC_GetCmdResp3+0x74>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8009f60 <SDMMC_GetCmdResp3+0x78>)
 8009ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8009efa:	0a5b      	lsrs	r3, r3, #9
 8009efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f00:	fb02 f303 	mul.w	r3, r2, r3
 8009f04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	1e5a      	subs	r2, r3, #1
 8009f0a:	60fa      	str	r2, [r7, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d102      	bne.n	8009f16 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f14:	e01b      	b.n	8009f4e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d0ef      	beq.n	8009f06 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1ea      	bne.n	8009f06 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d004      	beq.n	8009f46 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2204      	movs	r2, #4
 8009f40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f42:	2304      	movs	r3, #4
 8009f44:	e003      	b.n	8009f4e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	22c5      	movs	r2, #197	@ 0xc5
 8009f4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000000 	.word	0x20000000
 8009f60:	10624dd3 	.word	0x10624dd3

08009f64 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f72:	4b35      	ldr	r3, [pc, #212]	@ (800a048 <SDMMC_GetCmdResp6+0xe4>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a35      	ldr	r2, [pc, #212]	@ (800a04c <SDMMC_GetCmdResp6+0xe8>)
 8009f78:	fba2 2303 	umull	r2, r3, r2, r3
 8009f7c:	0a5b      	lsrs	r3, r3, #9
 8009f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f82:	fb02 f303 	mul.w	r3, r2, r3
 8009f86:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	1e5a      	subs	r2, r3, #1
 8009f8c:	61fa      	str	r2, [r7, #28]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d102      	bne.n	8009f98 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f92:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f96:	e052      	b.n	800a03e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f9c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d0ef      	beq.n	8009f88 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1ea      	bne.n	8009f88 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb6:	f003 0304 	and.w	r3, r3, #4
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d004      	beq.n	8009fc8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2204      	movs	r2, #4
 8009fc2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fc4:	2304      	movs	r3, #4
 8009fc6:	e03a      	b.n	800a03e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d004      	beq.n	8009fde <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e02f      	b.n	800a03e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7ff fbcb 	bl	800977a <SDIO_GetCommandResponse>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	7afb      	ldrb	r3, [r7, #11]
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d001      	beq.n	8009ff2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e025      	b.n	800a03e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	22c5      	movs	r2, #197	@ 0xc5
 8009ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f7ff fbca 	bl	8009794 <SDIO_GetResponse>
 800a000:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d106      	bne.n	800a01a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	0c1b      	lsrs	r3, r3, #16
 800a010:	b29a      	uxth	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a016:	2300      	movs	r3, #0
 800a018:	e011      	b.n	800a03e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a024:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a028:	e009      	b.n	800a03e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a034:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a038:	e001      	b.n	800a03e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a03a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3720      	adds	r7, #32
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20000000 	.word	0x20000000
 800a04c:	10624dd3 	.word	0x10624dd3

0800a050 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a058:	4b22      	ldr	r3, [pc, #136]	@ (800a0e4 <SDMMC_GetCmdResp7+0x94>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a22      	ldr	r2, [pc, #136]	@ (800a0e8 <SDMMC_GetCmdResp7+0x98>)
 800a05e:	fba2 2303 	umull	r2, r3, r2, r3
 800a062:	0a5b      	lsrs	r3, r3, #9
 800a064:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a068:	fb02 f303 	mul.w	r3, r2, r3
 800a06c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	1e5a      	subs	r2, r3, #1
 800a072:	60fa      	str	r2, [r7, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d102      	bne.n	800a07e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a078:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a07c:	e02c      	b.n	800a0d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a082:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0ef      	beq.n	800a06e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1ea      	bne.n	800a06e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a09c:	f003 0304 	and.w	r3, r3, #4
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2204      	movs	r2, #4
 800a0a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0aa:	2304      	movs	r3, #4
 800a0ac:	e014      	b.n	800a0d8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d004      	beq.n	800a0c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e009      	b.n	800a0d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2240      	movs	r2, #64	@ 0x40
 800a0d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a0d6:	2300      	movs	r3, #0
  
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	20000000 	.word	0x20000000
 800a0e8:	10624dd3 	.word	0x10624dd3

0800a0ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0f4:	4b11      	ldr	r3, [pc, #68]	@ (800a13c <SDMMC_GetCmdError+0x50>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a11      	ldr	r2, [pc, #68]	@ (800a140 <SDMMC_GetCmdError+0x54>)
 800a0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a0fe:	0a5b      	lsrs	r3, r3, #9
 800a100:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a104:	fb02 f303 	mul.w	r3, r2, r3
 800a108:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	1e5a      	subs	r2, r3, #1
 800a10e:	60fa      	str	r2, [r7, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d102      	bne.n	800a11a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a114:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a118:	e009      	b.n	800a12e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a11e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0f1      	beq.n	800a10a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	22c5      	movs	r2, #197	@ 0xc5
 800a12a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	20000000 	.word	0x20000000
 800a140:	10624dd3 	.word	0x10624dd3

0800a144 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a144:	b084      	sub	sp, #16
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	f107 001c 	add.w	r0, r7, #28
 800a152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a156:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d123      	bne.n	800a1a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a162:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a186:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d105      	bne.n	800a19a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f9dc 	bl	800a558 <USB_CoreReset>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	73fb      	strb	r3, [r7, #15]
 800a1a4:	e01b      	b.n	800a1de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f9d0 	bl	800a558 <USB_CoreReset>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a1bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d106      	bne.n	800a1d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	639a      	str	r2, [r3, #56]	@ 0x38
 800a1d0:	e005      	b.n	800a1de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a1de:	7fbb      	ldrb	r3, [r7, #30]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d10b      	bne.n	800a1fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f043 0206 	orr.w	r2, r3, #6
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f043 0220 	orr.w	r2, r3, #32
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a208:	b004      	add	sp, #16
 800a20a:	4770      	bx	lr

0800a20c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f043 0201 	orr.w	r2, r3, #1
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a22e:	b480      	push	{r7}
 800a230:	b083      	sub	sp, #12
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f023 0201 	bic.w	r2, r3, #1
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a26c:	78fb      	ldrb	r3, [r7, #3]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d115      	bne.n	800a29e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a27e:	200a      	movs	r0, #10
 800a280:	f7f7 fd0a 	bl	8001c98 <HAL_Delay>
      ms += 10U;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	330a      	adds	r3, #10
 800a288:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f956 	bl	800a53c <USB_GetMode>
 800a290:	4603      	mov	r3, r0
 800a292:	2b01      	cmp	r3, #1
 800a294:	d01e      	beq.n	800a2d4 <USB_SetCurrentMode+0x84>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2bc7      	cmp	r3, #199	@ 0xc7
 800a29a:	d9f0      	bls.n	800a27e <USB_SetCurrentMode+0x2e>
 800a29c:	e01a      	b.n	800a2d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a29e:	78fb      	ldrb	r3, [r7, #3]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d115      	bne.n	800a2d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2b0:	200a      	movs	r0, #10
 800a2b2:	f7f7 fcf1 	bl	8001c98 <HAL_Delay>
      ms += 10U;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	330a      	adds	r3, #10
 800a2ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f93d 	bl	800a53c <USB_GetMode>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d005      	beq.n	800a2d4 <USB_SetCurrentMode+0x84>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2bc7      	cmp	r3, #199	@ 0xc7
 800a2cc:	d9f0      	bls.n	800a2b0 <USB_SetCurrentMode+0x60>
 800a2ce:	e001      	b.n	800a2d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e005      	b.n	800a2e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2bc8      	cmp	r3, #200	@ 0xc8
 800a2d8:	d101      	bne.n	800a2de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e000      	b.n	800a2e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a302:	d901      	bls.n	800a308 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e01b      	b.n	800a340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	daf2      	bge.n	800a2f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a310:	2300      	movs	r3, #0
 800a312:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	019b      	lsls	r3, r3, #6
 800a318:	f043 0220 	orr.w	r2, r3, #32
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3301      	adds	r3, #1
 800a324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a32c:	d901      	bls.n	800a332 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e006      	b.n	800a340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	f003 0320 	and.w	r3, r3, #32
 800a33a:	2b20      	cmp	r3, #32
 800a33c:	d0f0      	beq.n	800a320 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3301      	adds	r3, #1
 800a35c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a364:	d901      	bls.n	800a36a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e018      	b.n	800a39c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	daf2      	bge.n	800a358 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2210      	movs	r2, #16
 800a37a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3301      	adds	r3, #1
 800a380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a388:	d901      	bls.n	800a38e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e006      	b.n	800a39c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f003 0310 	and.w	r3, r3, #16
 800a396:	2b10      	cmp	r3, #16
 800a398:	d0f0      	beq.n	800a37c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3714      	adds	r7, #20
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b089      	sub	sp, #36	@ 0x24
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	71fb      	strb	r3, [r7, #7]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a3c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d123      	bne.n	800a416 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a3ce:	88bb      	ldrh	r3, [r7, #4]
 800a3d0:	3303      	adds	r3, #3
 800a3d2:	089b      	lsrs	r3, r3, #2
 800a3d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	61bb      	str	r3, [r7, #24]
 800a3da:	e018      	b.n	800a40e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a3dc:	79fb      	ldrb	r3, [r7, #7]
 800a3de:	031a      	lsls	r2, r3, #12
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	3301      	adds	r3, #1
 800a400:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	3301      	adds	r3, #1
 800a406:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	3301      	adds	r3, #1
 800a40c:	61bb      	str	r3, [r7, #24]
 800a40e:	69ba      	ldr	r2, [r7, #24]
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	429a      	cmp	r2, r3
 800a414:	d3e2      	bcc.n	800a3dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3724      	adds	r7, #36	@ 0x24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a424:	b480      	push	{r7}
 800a426:	b08b      	sub	sp, #44	@ 0x2c
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	4613      	mov	r3, r2
 800a430:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a43a:	88fb      	ldrh	r3, [r7, #6]
 800a43c:	089b      	lsrs	r3, r3, #2
 800a43e:	b29b      	uxth	r3, r3
 800a440:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a442:	88fb      	ldrh	r3, [r7, #6]
 800a444:	f003 0303 	and.w	r3, r3, #3
 800a448:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a44a:	2300      	movs	r3, #0
 800a44c:	623b      	str	r3, [r7, #32]
 800a44e:	e014      	b.n	800a47a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45e:	3301      	adds	r3, #1
 800a460:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a464:	3301      	adds	r3, #1
 800a466:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46a:	3301      	adds	r3, #1
 800a46c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a470:	3301      	adds	r3, #1
 800a472:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	3301      	adds	r3, #1
 800a478:	623b      	str	r3, [r7, #32]
 800a47a:	6a3a      	ldr	r2, [r7, #32]
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d3e6      	bcc.n	800a450 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a482:	8bfb      	ldrh	r3, [r7, #30]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d01e      	beq.n	800a4c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a488:	2300      	movs	r3, #0
 800a48a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a492:	461a      	mov	r2, r3
 800a494:	f107 0310 	add.w	r3, r7, #16
 800a498:	6812      	ldr	r2, [r2, #0]
 800a49a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	6a3b      	ldr	r3, [r7, #32]
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ac:	701a      	strb	r2, [r3, #0]
      i++;
 800a4ae:	6a3b      	ldr	r3, [r7, #32]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a4ba:	8bfb      	ldrh	r3, [r7, #30]
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a4c0:	8bfb      	ldrh	r3, [r7, #30]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1ea      	bne.n	800a49c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	372c      	adds	r7, #44	@ 0x2c
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	695b      	ldr	r3, [r3, #20]
 800a4e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b085      	sub	sp, #20
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	460b      	mov	r3, r1
 800a504:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a50a:	78fb      	ldrb	r3, [r7, #3]
 800a50c:	015a      	lsls	r2, r3, #5
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	4413      	add	r3, r2
 800a512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a51a:	78fb      	ldrb	r3, [r7, #3]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	4013      	ands	r3, r2
 800a52c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a52e:	68bb      	ldr	r3, [r7, #8]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	f003 0301 	and.w	r3, r3, #1
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a560:	2300      	movs	r3, #0
 800a562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	3301      	adds	r3, #1
 800a568:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a570:	d901      	bls.n	800a576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e01b      	b.n	800a5ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	daf2      	bge.n	800a564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	f043 0201 	orr.w	r2, r3, #1
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3301      	adds	r3, #1
 800a592:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a59a:	d901      	bls.n	800a5a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e006      	b.n	800a5ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d0f0      	beq.n	800a58e <USB_CoreReset+0x36>

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
	...

0800a5bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5bc:	b084      	sub	sp, #16
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b086      	sub	sp, #24
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a5ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5dc:	461a      	mov	r2, r3
 800a5de:	2300      	movs	r3, #0
 800a5e0:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d119      	bne.n	800a62e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a5fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d10a      	bne.n	800a618 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a610:	f043 0304 	orr.w	r3, r3, #4
 800a614:	6013      	str	r3, [r2, #0]
 800a616:	e014      	b.n	800a642 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a626:	f023 0304 	bic.w	r3, r3, #4
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	e009      	b.n	800a642 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a63c:	f023 0304 	bic.w	r3, r3, #4
 800a640:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a642:	2110      	movs	r1, #16
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff fe4f 	bl	800a2e8 <USB_FlushTxFifo>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff fe79 	bl	800a34c <USB_FlushRxFifo>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a664:	2300      	movs	r3, #0
 800a666:	613b      	str	r3, [r7, #16]
 800a668:	e015      	b.n	800a696 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	015a      	lsls	r2, r3, #5
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4413      	add	r3, r2
 800a672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a676:	461a      	mov	r2, r3
 800a678:	f04f 33ff 	mov.w	r3, #4294967295
 800a67c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4413      	add	r3, r2
 800a686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a68a:	461a      	mov	r2, r3
 800a68c:	2300      	movs	r3, #0
 800a68e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3301      	adds	r3, #1
 800a694:	613b      	str	r3, [r7, #16]
 800a696:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a69a:	461a      	mov	r2, r3
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d3e3      	bcc.n	800a66a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ae:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a18      	ldr	r2, [pc, #96]	@ (800a714 <USB_HostInit+0x158>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d10b      	bne.n	800a6d0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6be:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a15      	ldr	r2, [pc, #84]	@ (800a718 <USB_HostInit+0x15c>)
 800a6c4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a14      	ldr	r2, [pc, #80]	@ (800a71c <USB_HostInit+0x160>)
 800a6ca:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800a6ce:	e009      	b.n	800a6e4 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2280      	movs	r2, #128	@ 0x80
 800a6d4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a11      	ldr	r2, [pc, #68]	@ (800a720 <USB_HostInit+0x164>)
 800a6da:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a11      	ldr	r2, [pc, #68]	@ (800a724 <USB_HostInit+0x168>)
 800a6e0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a6e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d105      	bne.n	800a6f8 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	f043 0210 	orr.w	r2, r3, #16
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	699a      	ldr	r2, [r3, #24]
 800a6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a728 <USB_HostInit+0x16c>)
 800a6fe:	4313      	orrs	r3, r2
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a704:	7dfb      	ldrb	r3, [r7, #23]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a710:	b004      	add	sp, #16
 800a712:	4770      	bx	lr
 800a714:	40040000 	.word	0x40040000
 800a718:	01000200 	.word	0x01000200
 800a71c:	00e00300 	.word	0x00e00300
 800a720:	00600080 	.word	0x00600080
 800a724:	004000e0 	.word	0x004000e0
 800a728:	a3200008 	.word	0xa3200008

0800a72c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	460b      	mov	r3, r1
 800a736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a74a:	f023 0303 	bic.w	r3, r3, #3
 800a74e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	f003 0303 	and.w	r3, r3, #3
 800a75e:	68f9      	ldr	r1, [r7, #12]
 800a760:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a764:	4313      	orrs	r3, r2
 800a766:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d107      	bne.n	800a77e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a774:	461a      	mov	r2, r3
 800a776:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a77a:	6053      	str	r3, [r2, #4]
 800a77c:	e00c      	b.n	800a798 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	2b02      	cmp	r3, #2
 800a782:	d107      	bne.n	800a794 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a78a:	461a      	mov	r2, r3
 800a78c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a790:	6053      	str	r3, [r2, #4]
 800a792:	e001      	b.n	800a798 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e000      	b.n	800a79a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a7c6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a7d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7d4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a7d6:	2064      	movs	r0, #100	@ 0x64
 800a7d8:	f7f7 fa5e 	bl	8001c98 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a7e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a7ea:	200a      	movs	r0, #10
 800a7ec:	f7f7 fa54 	bl	8001c98 <HAL_Delay>

  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	460b      	mov	r3, r1
 800a804:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a81e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a826:	2b00      	cmp	r3, #0
 800a828:	d109      	bne.n	800a83e <USB_DriveVbus+0x44>
 800a82a:	78fb      	ldrb	r3, [r7, #3]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d106      	bne.n	800a83e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a838:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a83c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a848:	d109      	bne.n	800a85e <USB_DriveVbus+0x64>
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a858:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a85c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a878:	2300      	movs	r3, #0
 800a87a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	0c5b      	lsrs	r3, r3, #17
 800a88a:	f003 0303 	and.w	r3, r3, #3
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b085      	sub	sp, #20
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	b29b      	uxth	r3, r3
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b088      	sub	sp, #32
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	4608      	mov	r0, r1
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	70fb      	strb	r3, [r7, #3]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	70bb      	strb	r3, [r7, #2]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a8de:	78fb      	ldrb	r3, [r7, #3]
 800a8e0:	015a      	lsls	r2, r3, #5
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a8f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d87c      	bhi.n	800a9f4 <USB_HC_Init+0x138>
 800a8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a900 <USB_HC_Init+0x44>)
 800a8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a900:	0800a911 	.word	0x0800a911
 800a904:	0800a9b7 	.word	0x0800a9b7
 800a908:	0800a911 	.word	0x0800a911
 800a90c:	0800a979 	.word	0x0800a979
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a910:	78fb      	ldrb	r3, [r7, #3]
 800a912:	015a      	lsls	r2, r3, #5
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	4413      	add	r3, r2
 800a918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a91c:	461a      	mov	r2, r3
 800a91e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800a922:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a924:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	da10      	bge.n	800a94e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a92c:	78fb      	ldrb	r3, [r7, #3]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	4413      	add	r3, r2
 800a934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	0151      	lsls	r1, r2, #5
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	440a      	add	r2, r1
 800a942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a94a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a94c:	e055      	b.n	800a9fa <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a6f      	ldr	r2, [pc, #444]	@ (800ab10 <USB_HC_Init+0x254>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d151      	bne.n	800a9fa <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a956:	78fb      	ldrb	r3, [r7, #3]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	78fa      	ldrb	r2, [r7, #3]
 800a966:	0151      	lsls	r1, r2, #5
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	440a      	add	r2, r1
 800a96c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a970:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a974:	60d3      	str	r3, [r2, #12]
      break;
 800a976:	e040      	b.n	800a9fa <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a978:	78fb      	ldrb	r3, [r7, #3]
 800a97a:	015a      	lsls	r2, r3, #5
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	4413      	add	r3, r2
 800a980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a984:	461a      	mov	r2, r3
 800a986:	f240 639d 	movw	r3, #1693	@ 0x69d
 800a98a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a98c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a990:	2b00      	cmp	r3, #0
 800a992:	da34      	bge.n	800a9fe <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a994:	78fb      	ldrb	r3, [r7, #3]
 800a996:	015a      	lsls	r2, r3, #5
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	4413      	add	r3, r2
 800a99c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	78fa      	ldrb	r2, [r7, #3]
 800a9a4:	0151      	lsls	r1, r2, #5
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	440a      	add	r2, r1
 800a9aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a9ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a9b4:	e023      	b.n	800a9fe <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a9b6:	78fb      	ldrb	r3, [r7, #3]
 800a9b8:	015a      	lsls	r2, r3, #5
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	4413      	add	r3, r2
 800a9be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	f240 2325 	movw	r3, #549	@ 0x225
 800a9c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a9ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	da17      	bge.n	800aa02 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a9d2:	78fb      	ldrb	r3, [r7, #3]
 800a9d4:	015a      	lsls	r2, r3, #5
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	4413      	add	r3, r2
 800a9da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	78fa      	ldrb	r2, [r7, #3]
 800a9e2:	0151      	lsls	r1, r2, #5
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	440a      	add	r2, r1
 800a9e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a9ec:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800a9f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a9f2:	e006      	b.n	800aa02 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	77fb      	strb	r3, [r7, #31]
      break;
 800a9f8:	e004      	b.n	800aa04 <USB_HC_Init+0x148>
      break;
 800a9fa:	bf00      	nop
 800a9fc:	e002      	b.n	800aa04 <USB_HC_Init+0x148>
      break;
 800a9fe:	bf00      	nop
 800aa00:	e000      	b.n	800aa04 <USB_HC_Init+0x148>
      break;
 800aa02:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa10:	461a      	mov	r2, r3
 800aa12:	2300      	movs	r3, #0
 800aa14:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800aa16:	78fb      	ldrb	r3, [r7, #3]
 800aa18:	015a      	lsls	r2, r3, #5
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	78fa      	ldrb	r2, [r7, #3]
 800aa26:	0151      	lsls	r1, r2, #5
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	440a      	add	r2, r1
 800aa2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa30:	f043 0302 	orr.w	r3, r3, #2
 800aa34:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aa3c:	699a      	ldr	r2, [r3, #24]
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	2101      	movs	r1, #1
 800aa46:	fa01 f303 	lsl.w	r3, r1, r3
 800aa4a:	6939      	ldr	r1, [r7, #16]
 800aa4c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800aa50:	4313      	orrs	r3, r2
 800aa52:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800aa60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	da03      	bge.n	800aa70 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800aa68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa6c:	61bb      	str	r3, [r7, #24]
 800aa6e:	e001      	b.n	800aa74 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800aa70:	2300      	movs	r3, #0
 800aa72:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7ff fef9 	bl	800a86c <USB_GetHostSpeed>
 800aa7a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800aa7c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d106      	bne.n	800aa92 <USB_HC_Init+0x1d6>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d003      	beq.n	800aa92 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800aa8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800aa8e:	617b      	str	r3, [r7, #20]
 800aa90:	e001      	b.n	800aa96 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800aa92:	2300      	movs	r3, #0
 800aa94:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aa96:	787b      	ldrb	r3, [r7, #1]
 800aa98:	059b      	lsls	r3, r3, #22
 800aa9a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800aa9e:	78bb      	ldrb	r3, [r7, #2]
 800aaa0:	02db      	lsls	r3, r3, #11
 800aaa2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aaa6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800aaa8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800aaac:	049b      	lsls	r3, r3, #18
 800aaae:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800aab2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800aab4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800aab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800aaba:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	431a      	orrs	r2, r3
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aac4:	78fa      	ldrb	r2, [r7, #3]
 800aac6:	0151      	lsls	r1, r2, #5
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	440a      	add	r2, r1
 800aacc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800aad0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aad4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800aad6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d003      	beq.n	800aae6 <USB_HC_Init+0x22a>
 800aade:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d10f      	bne.n	800ab06 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	015a      	lsls	r2, r3, #5
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	4413      	add	r3, r2
 800aaee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	78fa      	ldrb	r2, [r7, #3]
 800aaf6:	0151      	lsls	r1, r2, #5
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	440a      	add	r2, r1
 800aafc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ab04:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ab06:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3720      	adds	r7, #32
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	40040000 	.word	0x40040000

0800ab14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08c      	sub	sp, #48	@ 0x30
 800ab18:	af02      	add	r7, sp, #8
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	785b      	ldrb	r3, [r3, #1]
 800ab2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ab2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab30:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	4a5d      	ldr	r2, [pc, #372]	@ (800acac <USB_HC_StartXfer+0x198>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d12f      	bne.n	800ab9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d11c      	bne.n	800ab7a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	7c9b      	ldrb	r3, [r3, #18]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d003      	beq.n	800ab50 <USB_HC_StartXfer+0x3c>
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	7c9b      	ldrb	r3, [r3, #18]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d124      	bne.n	800ab9a <USB_HC_StartXfer+0x86>
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	799b      	ldrb	r3, [r3, #6]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d120      	bne.n	800ab9a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	69fa      	ldr	r2, [r7, #28]
 800ab68:	0151      	lsls	r1, r2, #5
 800ab6a:	6a3a      	ldr	r2, [r7, #32]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab76:	60d3      	str	r3, [r2, #12]
 800ab78:	e00f      	b.n	800ab9a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	791b      	ldrb	r3, [r3, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10b      	bne.n	800ab9a <USB_HC_StartXfer+0x86>
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	795b      	ldrb	r3, [r3, #5]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d107      	bne.n	800ab9a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	785b      	ldrb	r3, [r3, #1]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f000 fb6b 	bl	800b26c <USB_DoPing>
        return HAL_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	e232      	b.n	800b000 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	799b      	ldrb	r3, [r3, #6]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d158      	bne.n	800ac54 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800aba2:	2301      	movs	r3, #1
 800aba4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	78db      	ldrb	r3, [r3, #3]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d007      	beq.n	800abbe <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800abae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	8a92      	ldrh	r2, [r2, #20]
 800abb4:	fb03 f202 	mul.w	r2, r3, r2
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	61da      	str	r2, [r3, #28]
 800abbc:	e07c      	b.n	800acb8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	7c9b      	ldrb	r3, [r3, #18]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d130      	bne.n	800ac28 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	2bbc      	cmp	r3, #188	@ 0xbc
 800abcc:	d918      	bls.n	800ac00 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	8a9b      	ldrh	r3, [r3, #20]
 800abd2:	461a      	mov	r2, r3
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	69da      	ldr	r2, [r3, #28]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d003      	beq.n	800abf0 <USB_HC_StartXfer+0xdc>
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	2b02      	cmp	r3, #2
 800abee:	d103      	bne.n	800abf8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2202      	movs	r2, #2
 800abf4:	60da      	str	r2, [r3, #12]
 800abf6:	e05f      	b.n	800acb8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2201      	movs	r2, #1
 800abfc:	60da      	str	r2, [r3, #12]
 800abfe:	e05b      	b.n	800acb8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	6a1a      	ldr	r2, [r3, #32]
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d007      	beq.n	800ac20 <USB_HC_StartXfer+0x10c>
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d003      	beq.n	800ac20 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2204      	movs	r2, #4
 800ac1c:	60da      	str	r2, [r3, #12]
 800ac1e:	e04b      	b.n	800acb8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2203      	movs	r2, #3
 800ac24:	60da      	str	r2, [r3, #12]
 800ac26:	e047      	b.n	800acb8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800ac28:	79fb      	ldrb	r3, [r7, #7]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d10d      	bne.n	800ac4a <USB_HC_StartXfer+0x136>
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	8a92      	ldrh	r2, [r2, #20]
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d907      	bls.n	800ac4a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ac3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	8a92      	ldrh	r2, [r2, #20]
 800ac40:	fb03 f202 	mul.w	r2, r3, r2
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	61da      	str	r2, [r3, #28]
 800ac48:	e036      	b.n	800acb8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	6a1a      	ldr	r2, [r3, #32]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	61da      	str	r2, [r3, #28]
 800ac52:	e031      	b.n	800acb8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d018      	beq.n	800ac8e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	8a92      	ldrh	r2, [r2, #20]
 800ac64:	4413      	add	r3, r2
 800ac66:	3b01      	subs	r3, #1
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	8a92      	ldrh	r2, [r2, #20]
 800ac6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac70:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800ac72:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ac74:	8b7b      	ldrh	r3, [r7, #26]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d90b      	bls.n	800ac92 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800ac7a:	8b7b      	ldrh	r3, [r7, #26]
 800ac7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ac7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	8a92      	ldrh	r2, [r2, #20]
 800ac84:	fb03 f202 	mul.w	r2, r3, r2
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	61da      	str	r2, [r3, #28]
 800ac8c:	e001      	b.n	800ac92 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	78db      	ldrb	r3, [r3, #3]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00a      	beq.n	800acb0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ac9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	8a92      	ldrh	r2, [r2, #20]
 800aca0:	fb03 f202 	mul.w	r2, r3, r2
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	61da      	str	r2, [r3, #28]
 800aca8:	e006      	b.n	800acb8 <USB_HC_StartXfer+0x1a4>
 800acaa:	bf00      	nop
 800acac:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	6a1a      	ldr	r2, [r3, #32]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800acc0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800acc2:	04d9      	lsls	r1, r3, #19
 800acc4:	4ba3      	ldr	r3, [pc, #652]	@ (800af54 <USB_HC_StartXfer+0x440>)
 800acc6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acc8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	7d9b      	ldrb	r3, [r3, #22]
 800acce:	075b      	lsls	r3, r3, #29
 800acd0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acd4:	69f9      	ldr	r1, [r7, #28]
 800acd6:	0148      	lsls	r0, r1, #5
 800acd8:	6a39      	ldr	r1, [r7, #32]
 800acda:	4401      	add	r1, r0
 800acdc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ace0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ace2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ace4:	79fb      	ldrb	r3, [r7, #7]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d009      	beq.n	800acfe <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	6999      	ldr	r1, [r3, #24]
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	015a      	lsls	r2, r3, #5
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	4413      	add	r3, r2
 800acf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acfa:	460a      	mov	r2, r1
 800acfc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f003 0301 	and.w	r3, r3, #1
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	bf0c      	ite	eq
 800ad0e:	2301      	moveq	r3, #1
 800ad10:	2300      	movne	r3, #0
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	015a      	lsls	r2, r3, #5
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	69fa      	ldr	r2, [r7, #28]
 800ad26:	0151      	lsls	r1, r2, #5
 800ad28:	6a3a      	ldr	r2, [r7, #32]
 800ad2a:	440a      	add	r2, r1
 800ad2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad34:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	7e7b      	ldrb	r3, [r7, #25]
 800ad46:	075b      	lsls	r3, r3, #29
 800ad48:	69f9      	ldr	r1, [r7, #28]
 800ad4a:	0148      	lsls	r0, r1, #5
 800ad4c:	6a39      	ldr	r1, [r7, #32]
 800ad4e:	4401      	add	r1, r0
 800ad50:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800ad54:	4313      	orrs	r3, r2
 800ad56:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	799b      	ldrb	r3, [r3, #6]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	f040 80c3 	bne.w	800aee8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	7c5b      	ldrb	r3, [r3, #17]
 800ad66:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	69fa      	ldr	r2, [r7, #28]
 800ad70:	0151      	lsls	r1, r2, #5
 800ad72:	6a3a      	ldr	r2, [r7, #32]
 800ad74:	440a      	add	r2, r1
 800ad76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ad7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ad7e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	6a3b      	ldr	r3, [r7, #32]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	69fa      	ldr	r2, [r7, #28]
 800ad90:	0151      	lsls	r1, r2, #5
 800ad92:	6a3a      	ldr	r2, [r7, #32]
 800ad94:	440a      	add	r2, r1
 800ad96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ad9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	79db      	ldrb	r3, [r3, #7]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d123      	bne.n	800adf0 <USB_HC_StartXfer+0x2dc>
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	78db      	ldrb	r3, [r3, #3]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d11f      	bne.n	800adf0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	6a3b      	ldr	r3, [r7, #32]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	69fa      	ldr	r2, [r7, #28]
 800adc0:	0151      	lsls	r1, r2, #5
 800adc2:	6a3a      	ldr	r2, [r7, #32]
 800adc4:	440a      	add	r2, r1
 800adc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800adce:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	4413      	add	r3, r2
 800add8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	69fa      	ldr	r2, [r7, #28]
 800ade0:	0151      	lsls	r1, r2, #5
 800ade2:	6a3a      	ldr	r2, [r7, #32]
 800ade4:	440a      	add	r2, r1
 800ade6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adee:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	7c9b      	ldrb	r3, [r3, #18]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d003      	beq.n	800ae00 <USB_HC_StartXfer+0x2ec>
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	7c9b      	ldrb	r3, [r3, #18]
 800adfc:	2b03      	cmp	r3, #3
 800adfe:	d117      	bne.n	800ae30 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d113      	bne.n	800ae30 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	78db      	ldrb	r3, [r3, #3]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d10f      	bne.n	800ae30 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	69fa      	ldr	r2, [r7, #28]
 800ae20:	0151      	lsls	r1, r2, #5
 800ae22:	6a3a      	ldr	r2, [r7, #32]
 800ae24:	440a      	add	r2, r1
 800ae26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae2e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	7c9b      	ldrb	r3, [r3, #18]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d162      	bne.n	800aefe <USB_HC_StartXfer+0x3ea>
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	78db      	ldrb	r3, [r3, #3]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d15e      	bne.n	800aefe <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	3b01      	subs	r3, #1
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	d858      	bhi.n	800aefc <USB_HC_StartXfer+0x3e8>
 800ae4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae50 <USB_HC_StartXfer+0x33c>)
 800ae4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae50:	0800ae61 	.word	0x0800ae61
 800ae54:	0800ae83 	.word	0x0800ae83
 800ae58:	0800aea5 	.word	0x0800aea5
 800ae5c:	0800aec7 	.word	0x0800aec7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	015a      	lsls	r2, r3, #5
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	4413      	add	r3, r2
 800ae68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	0151      	lsls	r1, r2, #5
 800ae72:	6a3a      	ldr	r2, [r7, #32]
 800ae74:	440a      	add	r2, r1
 800ae76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae7e:	6053      	str	r3, [r2, #4]
          break;
 800ae80:	e03d      	b.n	800aefe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	015a      	lsls	r2, r3, #5
 800ae86:	6a3b      	ldr	r3, [r7, #32]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	69fa      	ldr	r2, [r7, #28]
 800ae92:	0151      	lsls	r1, r2, #5
 800ae94:	6a3a      	ldr	r2, [r7, #32]
 800ae96:	440a      	add	r2, r1
 800ae98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae9c:	f043 030e 	orr.w	r3, r3, #14
 800aea0:	6053      	str	r3, [r2, #4]
          break;
 800aea2:	e02c      	b.n	800aefe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	015a      	lsls	r2, r3, #5
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	4413      	add	r3, r2
 800aeac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	69fa      	ldr	r2, [r7, #28]
 800aeb4:	0151      	lsls	r1, r2, #5
 800aeb6:	6a3a      	ldr	r2, [r7, #32]
 800aeb8:	440a      	add	r2, r1
 800aeba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aebe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aec2:	6053      	str	r3, [r2, #4]
          break;
 800aec4:	e01b      	b.n	800aefe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	015a      	lsls	r2, r3, #5
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	4413      	add	r3, r2
 800aece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	69fa      	ldr	r2, [r7, #28]
 800aed6:	0151      	lsls	r1, r2, #5
 800aed8:	6a3a      	ldr	r2, [r7, #32]
 800aeda:	440a      	add	r2, r1
 800aedc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aee0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aee4:	6053      	str	r3, [r2, #4]
          break;
 800aee6:	e00a      	b.n	800aefe <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aef4:	461a      	mov	r2, r3
 800aef6:	2300      	movs	r3, #0
 800aef8:	6053      	str	r3, [r2, #4]
 800aefa:	e000      	b.n	800aefe <USB_HC_StartXfer+0x3ea>
          break;
 800aefc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	015a      	lsls	r2, r3, #5
 800af02:	6a3b      	ldr	r3, [r7, #32]
 800af04:	4413      	add	r3, r2
 800af06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800af14:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	78db      	ldrb	r3, [r3, #3]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d004      	beq.n	800af28 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af24:	613b      	str	r3, [r7, #16]
 800af26:	e003      	b.n	800af30 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af2e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af36:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af44:	461a      	mov	r2, r3
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800af4a:	79fb      	ldrb	r3, [r7, #7]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	e055      	b.n	800b000 <USB_HC_StartXfer+0x4ec>
 800af54:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	78db      	ldrb	r3, [r3, #3]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d14e      	bne.n	800affe <USB_HC_StartXfer+0x4ea>
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	6a1b      	ldr	r3, [r3, #32]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d04a      	beq.n	800affe <USB_HC_StartXfer+0x4ea>
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	79db      	ldrb	r3, [r3, #7]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d146      	bne.n	800affe <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	7c9b      	ldrb	r3, [r3, #18]
 800af74:	2b03      	cmp	r3, #3
 800af76:	d831      	bhi.n	800afdc <USB_HC_StartXfer+0x4c8>
 800af78:	a201      	add	r2, pc, #4	@ (adr r2, 800af80 <USB_HC_StartXfer+0x46c>)
 800af7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7e:	bf00      	nop
 800af80:	0800af91 	.word	0x0800af91
 800af84:	0800afb5 	.word	0x0800afb5
 800af88:	0800af91 	.word	0x0800af91
 800af8c:	0800afb5 	.word	0x0800afb5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	6a1b      	ldr	r3, [r3, #32]
 800af94:	3303      	adds	r3, #3
 800af96:	089b      	lsrs	r3, r3, #2
 800af98:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800af9a:	8afa      	ldrh	r2, [r7, #22]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d91c      	bls.n	800afe0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	f043 0220 	orr.w	r2, r3, #32
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	619a      	str	r2, [r3, #24]
        }
        break;
 800afb2:	e015      	b.n	800afe0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	6a1b      	ldr	r3, [r3, #32]
 800afb8:	3303      	adds	r3, #3
 800afba:	089b      	lsrs	r3, r3, #2
 800afbc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800afbe:	8afa      	ldrh	r2, [r7, #22]
 800afc0:	6a3b      	ldr	r3, [r7, #32]
 800afc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	429a      	cmp	r2, r3
 800afcc:	d90a      	bls.n	800afe4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	619a      	str	r2, [r3, #24]
        }
        break;
 800afda:	e003      	b.n	800afe4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800afdc:	bf00      	nop
 800afde:	e002      	b.n	800afe6 <USB_HC_StartXfer+0x4d2>
        break;
 800afe0:	bf00      	nop
 800afe2:	e000      	b.n	800afe6 <USB_HC_StartXfer+0x4d2>
        break;
 800afe4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	6999      	ldr	r1, [r3, #24]
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	785a      	ldrb	r2, [r3, #1]
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	6a1b      	ldr	r3, [r3, #32]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	2000      	movs	r0, #0
 800aff6:	9000      	str	r0, [sp, #0]
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f7ff f9d5 	bl	800a3a8 <USB_WritePacket>
  }

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3728      	adds	r7, #40	@ 0x28
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b01a:	695b      	ldr	r3, [r3, #20]
 800b01c:	b29b      	uxth	r3, r3
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b02a:	b480      	push	{r7}
 800b02c:	b089      	sub	sp, #36	@ 0x24
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	460b      	mov	r3, r1
 800b034:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b03a:	78fb      	ldrb	r3, [r7, #3]
 800b03c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b03e:	2300      	movs	r3, #0
 800b040:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	015a      	lsls	r2, r3, #5
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	4413      	add	r3, r2
 800b04a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	0c9b      	lsrs	r3, r3, #18
 800b052:	f003 0303 	and.w	r3, r3, #3
 800b056:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	0fdb      	lsrs	r3, r3, #31
 800b068:	f003 0301 	and.w	r3, r3, #1
 800b06c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	015a      	lsls	r2, r3, #5
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	4413      	add	r3, r2
 800b076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	0fdb      	lsrs	r3, r3, #31
 800b07e:	f003 0301 	and.w	r3, r3, #1
 800b082:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f003 0320 	and.w	r3, r3, #32
 800b08c:	2b20      	cmp	r3, #32
 800b08e:	d10d      	bne.n	800b0ac <USB_HC_Halt+0x82>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10a      	bne.n	800b0ac <USB_HC_Halt+0x82>
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d005      	beq.n	800b0a8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d002      	beq.n	800b0a8 <USB_HC_Halt+0x7e>
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b03      	cmp	r3, #3
 800b0a6:	d101      	bne.n	800b0ac <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	e0d8      	b.n	800b25e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <USB_HC_Halt+0x8e>
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d173      	bne.n	800b1a0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	015a      	lsls	r2, r3, #5
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	4413      	add	r3, r2
 800b0c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	69ba      	ldr	r2, [r7, #24]
 800b0c8:	0151      	lsls	r1, r2, #5
 800b0ca:	69fa      	ldr	r2, [r7, #28]
 800b0cc:	440a      	add	r2, r1
 800b0ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b0d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b0d6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	f003 0320 	and.w	r3, r3, #32
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d14a      	bne.n	800b17a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d133      	bne.n	800b158 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	69ba      	ldr	r2, [r7, #24]
 800b100:	0151      	lsls	r1, r2, #5
 800b102:	69fa      	ldr	r2, [r7, #28]
 800b104:	440a      	add	r2, r1
 800b106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b10a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b10e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	4413      	add	r3, r2
 800b118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	69ba      	ldr	r2, [r7, #24]
 800b120:	0151      	lsls	r1, r2, #5
 800b122:	69fa      	ldr	r2, [r7, #28]
 800b124:	440a      	add	r2, r1
 800b126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b12a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b12e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	3301      	adds	r3, #1
 800b134:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b13c:	d82e      	bhi.n	800b19c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	015a      	lsls	r2, r3, #5
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	4413      	add	r3, r2
 800b146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b154:	d0ec      	beq.n	800b130 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b156:	e081      	b.n	800b25c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	0151      	lsls	r1, r2, #5
 800b16a:	69fa      	ldr	r2, [r7, #28]
 800b16c:	440a      	add	r2, r1
 800b16e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b172:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b176:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b178:	e070      	b.n	800b25c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	4413      	add	r3, r2
 800b182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	0151      	lsls	r1, r2, #5
 800b18c:	69fa      	ldr	r2, [r7, #28]
 800b18e:	440a      	add	r2, r1
 800b190:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b194:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b198:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b19a:	e05f      	b.n	800b25c <USB_HC_Halt+0x232>
            break;
 800b19c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b19e:	e05d      	b.n	800b25c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	015a      	lsls	r2, r3, #5
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	69ba      	ldr	r2, [r7, #24]
 800b1b0:	0151      	lsls	r1, r2, #5
 800b1b2:	69fa      	ldr	r2, [r7, #28]
 800b1b4:	440a      	add	r2, r1
 800b1b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b1be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d133      	bne.n	800b238 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	015a      	lsls	r2, r3, #5
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	69ba      	ldr	r2, [r7, #24]
 800b1e0:	0151      	lsls	r1, r2, #5
 800b1e2:	69fa      	ldr	r2, [r7, #28]
 800b1e4:	440a      	add	r2, r1
 800b1e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	015a      	lsls	r2, r3, #5
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	69ba      	ldr	r2, [r7, #24]
 800b200:	0151      	lsls	r1, r2, #5
 800b202:	69fa      	ldr	r2, [r7, #28]
 800b204:	440a      	add	r2, r1
 800b206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b20a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b20e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	3301      	adds	r3, #1
 800b214:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b21c:	d81d      	bhi.n	800b25a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	4413      	add	r3, r2
 800b226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b234:	d0ec      	beq.n	800b210 <USB_HC_Halt+0x1e6>
 800b236:	e011      	b.n	800b25c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	69ba      	ldr	r2, [r7, #24]
 800b248:	0151      	lsls	r1, r2, #5
 800b24a:	69fa      	ldr	r2, [r7, #28]
 800b24c:	440a      	add	r2, r1
 800b24e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b252:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	e000      	b.n	800b25c <USB_HC_Halt+0x232>
          break;
 800b25a:	bf00      	nop
    }
  }

  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3724      	adds	r7, #36	@ 0x24
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
	...

0800b26c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b087      	sub	sp, #28
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b27c:	78fb      	ldrb	r3, [r7, #3]
 800b27e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b280:	2301      	movs	r3, #1
 800b282:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	04da      	lsls	r2, r3, #19
 800b288:	4b15      	ldr	r3, [pc, #84]	@ (800b2e0 <USB_DoPing+0x74>)
 800b28a:	4013      	ands	r3, r2
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	0151      	lsls	r1, r2, #5
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	440a      	add	r2, r1
 800b294:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b298:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b29c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	015a      	lsls	r2, r3, #5
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b2b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b2bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	015a      	lsls	r2, r3, #5
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	1ff80000 	.word	0x1ff80000

0800b2e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f7fe ff98 	bl	800a22e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2fe:	2110      	movs	r1, #16
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7fe fff1 	bl	800a2e8 <USB_FlushTxFifo>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7ff f81b 	bl	800a34c <USB_FlushRxFifo>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b320:	2300      	movs	r3, #0
 800b322:	61bb      	str	r3, [r7, #24]
 800b324:	e01f      	b.n	800b366 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	015a      	lsls	r2, r3, #5
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	4413      	add	r3, r2
 800b32e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b33c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b344:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b34c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	015a      	lsls	r2, r3, #5
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	4413      	add	r3, r2
 800b356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b35a:	461a      	mov	r2, r3
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	3301      	adds	r3, #1
 800b364:	61bb      	str	r3, [r7, #24]
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	2b0f      	cmp	r3, #15
 800b36a:	d9dc      	bls.n	800b326 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b36c:	2300      	movs	r3, #0
 800b36e:	61bb      	str	r3, [r7, #24]
 800b370:	e034      	b.n	800b3dc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	015a      	lsls	r2, r3, #5
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	4413      	add	r3, r2
 800b37a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b388:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b390:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b398:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b3b8:	d80c      	bhi.n	800b3d4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	015a      	lsls	r2, r3, #5
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3d0:	d0ec      	beq.n	800b3ac <USB_StopHost+0xc8>
 800b3d2:	e000      	b.n	800b3d6 <USB_StopHost+0xf2>
        break;
 800b3d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	61bb      	str	r3, [r7, #24]
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	2b0f      	cmp	r3, #15
 800b3e0:	d9c7      	bls.n	800b372 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7fe ff07 	bl	800a20c <USB_EnableGlobalInt>

  return ret;
 800b3fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3720      	adds	r7, #32
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b40c:	4904      	ldr	r1, [pc, #16]	@ (800b420 <MX_FATFS_Init+0x18>)
 800b40e:	4805      	ldr	r0, [pc, #20]	@ (800b424 <MX_FATFS_Init+0x1c>)
 800b410:	f002 fa64 	bl	800d8dc <FATFS_LinkDriver>
 800b414:	4603      	mov	r3, r0
 800b416:	461a      	mov	r2, r3
 800b418:	4b03      	ldr	r3, [pc, #12]	@ (800b428 <MX_FATFS_Init+0x20>)
 800b41a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b41c:	bf00      	nop
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	2000050c 	.word	0x2000050c
 800b424:	0800e1dc 	.word	0x0800e1dc
 800b428:	20000508 	.word	0x20000508

0800b42c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b432:	2300      	movs	r3, #0
 800b434:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b436:	f000 f879 	bl	800b52c <BSP_SD_IsDetected>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d001      	beq.n	800b444 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	e012      	b.n	800b46a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b444:	480b      	ldr	r0, [pc, #44]	@ (800b474 <BSP_SD_Init+0x48>)
 800b446:	f7fb ff4b 	bl	80072e0 <HAL_SD_Init>
 800b44a:	4603      	mov	r3, r0
 800b44c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b44e:	79fb      	ldrb	r3, [r7, #7]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d109      	bne.n	800b468 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b454:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b458:	4806      	ldr	r0, [pc, #24]	@ (800b474 <BSP_SD_Init+0x48>)
 800b45a:	f7fc fd25 	bl	8007ea8 <HAL_SD_ConfigWideBusOperation>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b468:	79fb      	ldrb	r3, [r7, #7]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20000320 	.word	0x20000320

0800b478 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b088      	sub	sp, #32
 800b47c:	af02      	add	r7, sp, #8
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
 800b484:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b486:	2300      	movs	r3, #0
 800b488:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	68f9      	ldr	r1, [r7, #12]
 800b494:	4806      	ldr	r0, [pc, #24]	@ (800b4b0 <BSP_SD_ReadBlocks+0x38>)
 800b496:	f7fb ffd3 	bl	8007440 <HAL_SD_ReadBlocks>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d001      	beq.n	800b4a4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	20000320 	.word	0x20000320

0800b4b4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	68f9      	ldr	r1, [r7, #12]
 800b4d0:	4806      	ldr	r0, [pc, #24]	@ (800b4ec <BSP_SD_WriteBlocks+0x38>)
 800b4d2:	f7fc f993 	bl	80077fc <HAL_SD_WriteBlocks>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20000320 	.word	0x20000320

0800b4f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b4f4:	4805      	ldr	r0, [pc, #20]	@ (800b50c <BSP_SD_GetCardState+0x1c>)
 800b4f6:	f7fc fd71 	bl	8007fdc <HAL_SD_GetCardState>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b04      	cmp	r3, #4
 800b4fe:	bf14      	ite	ne
 800b500:	2301      	movne	r3, #1
 800b502:	2300      	moveq	r3, #0
 800b504:	b2db      	uxtb	r3, r3
}
 800b506:	4618      	mov	r0, r3
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	20000320 	.word	0x20000320

0800b510 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b518:	6879      	ldr	r1, [r7, #4]
 800b51a:	4803      	ldr	r0, [pc, #12]	@ (800b528 <BSP_SD_GetCardInfo+0x18>)
 800b51c:	f7fc fc98 	bl	8007e50 <HAL_SD_GetCardInfo>
}
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	20000320 	.word	0x20000320

0800b52c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b532:	2301      	movs	r3, #1
 800b534:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b536:	f000 f80b 	bl	800b550 <BSP_PlatformIsDetected>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b540:	2300      	movs	r3, #0
 800b542:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	b2db      	uxtb	r3, r3
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b556:	2301      	movs	r3, #1
 800b558:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b55a:	2104      	movs	r1, #4
 800b55c:	4806      	ldr	r0, [pc, #24]	@ (800b578 <BSP_PlatformIsDetected+0x28>)
 800b55e:	f7f7 fe5d 	bl	800321c <HAL_GPIO_ReadPin>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b568:	2300      	movs	r3, #0
 800b56a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b56c:	79fb      	ldrb	r3, [r7, #7]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	40021800 	.word	0x40021800

0800b57c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	4603      	mov	r3, r0
 800b584:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b586:	4b0b      	ldr	r3, [pc, #44]	@ (800b5b4 <SD_CheckStatus+0x38>)
 800b588:	2201      	movs	r2, #1
 800b58a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b58c:	f7ff ffb0 	bl	800b4f0 <BSP_SD_GetCardState>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d107      	bne.n	800b5a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b596:	4b07      	ldr	r3, [pc, #28]	@ (800b5b4 <SD_CheckStatus+0x38>)
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	f023 0301 	bic.w	r3, r3, #1
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	4b04      	ldr	r3, [pc, #16]	@ (800b5b4 <SD_CheckStatus+0x38>)
 800b5a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b5a6:	4b03      	ldr	r3, [pc, #12]	@ (800b5b4 <SD_CheckStatus+0x38>)
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	b2db      	uxtb	r3, r3
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	20000009 	.word	0x20000009

0800b5b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b5c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b5f0 <SD_initialize+0x38>)
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b5c8:	f7ff ff30 	bl	800b42c <BSP_SD_Init>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d107      	bne.n	800b5e2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b5d2:	79fb      	ldrb	r3, [r7, #7]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff ffd1 	bl	800b57c <SD_CheckStatus>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	461a      	mov	r2, r3
 800b5de:	4b04      	ldr	r3, [pc, #16]	@ (800b5f0 <SD_initialize+0x38>)
 800b5e0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b5e2:	4b03      	ldr	r3, [pc, #12]	@ (800b5f0 <SD_initialize+0x38>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	b2db      	uxtb	r3, r3
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	20000009 	.word	0x20000009

0800b5f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b5fe:	79fb      	ldrb	r3, [r7, #7]
 800b600:	4618      	mov	r0, r3
 800b602:	f7ff ffbb 	bl	800b57c <SD_CheckStatus>
 800b606:	4603      	mov	r3, r0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	603b      	str	r3, [r7, #0]
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b624:	f04f 33ff 	mov.w	r3, #4294967295
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	6879      	ldr	r1, [r7, #4]
 800b62c:	68b8      	ldr	r0, [r7, #8]
 800b62e:	f7ff ff23 	bl	800b478 <BSP_SD_ReadBlocks>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d107      	bne.n	800b648 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b638:	bf00      	nop
 800b63a:	f7ff ff59 	bl	800b4f0 <BSP_SD_GetCardState>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d1fa      	bne.n	800b63a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b648:	7dfb      	ldrb	r3, [r7, #23]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3718      	adds	r7, #24
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b086      	sub	sp, #24
 800b656:	af00      	add	r7, sp, #0
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
 800b65c:	603b      	str	r3, [r7, #0]
 800b65e:	4603      	mov	r3, r0
 800b660:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b666:	f04f 33ff 	mov.w	r3, #4294967295
 800b66a:	683a      	ldr	r2, [r7, #0]
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	68b8      	ldr	r0, [r7, #8]
 800b670:	f7ff ff20 	bl	800b4b4 <BSP_SD_WriteBlocks>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d107      	bne.n	800b68a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b67a:	bf00      	nop
 800b67c:	f7ff ff38 	bl	800b4f0 <BSP_SD_GetCardState>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1fa      	bne.n	800b67c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b68a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3718      	adds	r7, #24
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b08c      	sub	sp, #48	@ 0x30
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	603a      	str	r2, [r7, #0]
 800b69e:	71fb      	strb	r3, [r7, #7]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b6aa:	4b25      	ldr	r3, [pc, #148]	@ (800b740 <SD_ioctl+0xac>)
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d001      	beq.n	800b6bc <SD_ioctl+0x28>
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	e03c      	b.n	800b736 <SD_ioctl+0xa2>

  switch (cmd)
 800b6bc:	79bb      	ldrb	r3, [r7, #6]
 800b6be:	2b03      	cmp	r3, #3
 800b6c0:	d834      	bhi.n	800b72c <SD_ioctl+0x98>
 800b6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c8 <SD_ioctl+0x34>)
 800b6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c8:	0800b6d9 	.word	0x0800b6d9
 800b6cc:	0800b6e1 	.word	0x0800b6e1
 800b6d0:	0800b6f9 	.word	0x0800b6f9
 800b6d4:	0800b713 	.word	0x0800b713
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b6de:	e028      	b.n	800b732 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b6e0:	f107 030c 	add.w	r3, r7, #12
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7ff ff13 	bl	800b510 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b6ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b6f6:	e01c      	b.n	800b732 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b6f8:	f107 030c 	add.w	r3, r7, #12
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7ff ff07 	bl	800b510 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b704:	b29a      	uxth	r2, r3
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b710:	e00f      	b.n	800b732 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b712:	f107 030c 	add.w	r3, r7, #12
 800b716:	4618      	mov	r0, r3
 800b718:	f7ff fefa 	bl	800b510 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71e:	0a5a      	lsrs	r2, r3, #9
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b724:	2300      	movs	r3, #0
 800b726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b72a:	e002      	b.n	800b732 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b72c:	2304      	movs	r3, #4
 800b72e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b732:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b736:	4618      	mov	r0, r3
 800b738:	3730      	adds	r7, #48	@ 0x30
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	20000009 	.word	0x20000009

0800b744 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b744:	b590      	push	{r4, r7, lr}
 800b746:	b089      	sub	sp, #36	@ 0x24
 800b748:	af04      	add	r7, sp, #16
 800b74a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b74c:	2301      	movs	r3, #1
 800b74e:	2202      	movs	r2, #2
 800b750:	2102      	movs	r1, #2
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fc85 	bl	800c062 <USBH_FindInterface>
 800b758:	4603      	mov	r3, r0
 800b75a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
 800b75e:	2bff      	cmp	r3, #255	@ 0xff
 800b760:	d002      	beq.n	800b768 <USBH_CDC_InterfaceInit+0x24>
 800b762:	7bfb      	ldrb	r3, [r7, #15]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d901      	bls.n	800b76c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b768:	2302      	movs	r3, #2
 800b76a:	e13d      	b.n	800b9e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
 800b76e:	4619      	mov	r1, r3
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 fc5a 	bl	800c02a <USBH_SelectInterface>
 800b776:	4603      	mov	r3, r0
 800b778:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b77a:	7bbb      	ldrb	r3, [r7, #14]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d001      	beq.n	800b784 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b780:	2302      	movs	r3, #2
 800b782:	e131      	b.n	800b9e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800b78a:	2050      	movs	r0, #80	@ 0x50
 800b78c:	f002 fbc0 	bl	800df10 <malloc>
 800b790:	4603      	mov	r3, r0
 800b792:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b79a:	69db      	ldr	r3, [r3, #28]
 800b79c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	e11f      	b.n	800b9e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b7a8:	2250      	movs	r2, #80	@ 0x50
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	68b8      	ldr	r0, [r7, #8]
 800b7ae:	f002 fc6d 	bl	800e08c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b7b2:	7bfb      	ldrb	r3, [r7, #15]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	211a      	movs	r1, #26
 800b7b8:	fb01 f303 	mul.w	r3, r1, r3
 800b7bc:	4413      	add	r3, r2
 800b7be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	b25b      	sxtb	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	da15      	bge.n	800b7f6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	211a      	movs	r1, #26
 800b7d0:	fb01 f303 	mul.w	r3, r1, r3
 800b7d4:	4413      	add	r3, r2
 800b7d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b7da:	781a      	ldrb	r2, [r3, #0]
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	211a      	movs	r1, #26
 800b7e6:	fb01 f303 	mul.w	r3, r1, r3
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b7f0:	881a      	ldrh	r2, [r3, #0]
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	785b      	ldrb	r3, [r3, #1]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f001 ffbe 	bl	800d77e <USBH_AllocPipe>
 800b802:	4603      	mov	r3, r0
 800b804:	461a      	mov	r2, r3
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	7819      	ldrb	r1, [r3, #0]
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	7858      	ldrb	r0, [r3, #1]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	8952      	ldrh	r2, [r2, #10]
 800b822:	9202      	str	r2, [sp, #8]
 800b824:	2203      	movs	r2, #3
 800b826:	9201      	str	r2, [sp, #4]
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	4623      	mov	r3, r4
 800b82c:	4602      	mov	r2, r0
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f001 ff76 	bl	800d720 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	2200      	movs	r2, #0
 800b83a:	4619      	mov	r1, r3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f002 fae1 	bl	800de04 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b842:	2300      	movs	r3, #0
 800b844:	2200      	movs	r2, #0
 800b846:	210a      	movs	r1, #10
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fc0a 	bl	800c062 <USBH_FindInterface>
 800b84e:	4603      	mov	r3, r0
 800b850:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b852:	7bfb      	ldrb	r3, [r7, #15]
 800b854:	2bff      	cmp	r3, #255	@ 0xff
 800b856:	d002      	beq.n	800b85e <USBH_CDC_InterfaceInit+0x11a>
 800b858:	7bfb      	ldrb	r3, [r7, #15]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d901      	bls.n	800b862 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b85e:	2302      	movs	r3, #2
 800b860:	e0c2      	b.n	800b9e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b862:	7bfb      	ldrb	r3, [r7, #15]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	211a      	movs	r1, #26
 800b868:	fb01 f303 	mul.w	r3, r1, r3
 800b86c:	4413      	add	r3, r2
 800b86e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	b25b      	sxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	da16      	bge.n	800b8a8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	211a      	movs	r1, #26
 800b880:	fb01 f303 	mul.w	r3, r1, r3
 800b884:	4413      	add	r3, r2
 800b886:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b88a:	781a      	ldrb	r2, [r3, #0]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	211a      	movs	r1, #26
 800b896:	fb01 f303 	mul.w	r3, r1, r3
 800b89a:	4413      	add	r3, r2
 800b89c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b8a0:	881a      	ldrh	r2, [r3, #0]
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	835a      	strh	r2, [r3, #26]
 800b8a6:	e015      	b.n	800b8d4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	211a      	movs	r1, #26
 800b8ae:	fb01 f303 	mul.w	r3, r1, r3
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b8b8:	781a      	ldrb	r2, [r3, #0]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	211a      	movs	r1, #26
 800b8c4:	fb01 f303 	mul.w	r3, r1, r3
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b8ce:	881a      	ldrh	r2, [r3, #0]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	211a      	movs	r1, #26
 800b8da:	fb01 f303 	mul.w	r3, r1, r3
 800b8de:	4413      	add	r3, r2
 800b8e0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	b25b      	sxtb	r3, r3
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	da16      	bge.n	800b91a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	211a      	movs	r1, #26
 800b8f2:	fb01 f303 	mul.w	r3, r1, r3
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b8fc:	781a      	ldrb	r2, [r3, #0]
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	211a      	movs	r1, #26
 800b908:	fb01 f303 	mul.w	r3, r1, r3
 800b90c:	4413      	add	r3, r2
 800b90e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800b912:	881a      	ldrh	r2, [r3, #0]
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	835a      	strh	r2, [r3, #26]
 800b918:	e015      	b.n	800b946 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	211a      	movs	r1, #26
 800b920:	fb01 f303 	mul.w	r3, r1, r3
 800b924:	4413      	add	r3, r2
 800b926:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b92a:	781a      	ldrb	r2, [r3, #0]
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b930:	7bfb      	ldrb	r3, [r7, #15]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	211a      	movs	r1, #26
 800b936:	fb01 f303 	mul.w	r3, r1, r3
 800b93a:	4413      	add	r3, r2
 800b93c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800b940:	881a      	ldrh	r2, [r3, #0]
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	7b9b      	ldrb	r3, [r3, #14]
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f001 ff16 	bl	800d77e <USBH_AllocPipe>
 800b952:	4603      	mov	r3, r0
 800b954:	461a      	mov	r2, r3
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	7bdb      	ldrb	r3, [r3, #15]
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f001 ff0c 	bl	800d77e <USBH_AllocPipe>
 800b966:	4603      	mov	r3, r0
 800b968:	461a      	mov	r2, r3
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	7b59      	ldrb	r1, [r3, #13]
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	7b98      	ldrb	r0, [r3, #14]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b982:	68ba      	ldr	r2, [r7, #8]
 800b984:	8b12      	ldrh	r2, [r2, #24]
 800b986:	9202      	str	r2, [sp, #8]
 800b988:	2202      	movs	r2, #2
 800b98a:	9201      	str	r2, [sp, #4]
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	4623      	mov	r3, r4
 800b990:	4602      	mov	r2, r0
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f001 fec4 	bl	800d720 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	7b19      	ldrb	r1, [r3, #12]
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	7bd8      	ldrb	r0, [r3, #15]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	8b52      	ldrh	r2, [r2, #26]
 800b9b0:	9202      	str	r2, [sp, #8]
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	9201      	str	r2, [sp, #4]
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	4623      	mov	r3, r4
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f001 feaf 	bl	800d720 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	7b5b      	ldrb	r3, [r3, #13]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f002 fa16 	bl	800de04 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	7b1b      	ldrb	r3, [r3, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f002 fa0f 	bl	800de04 <USBH_LL_SetToggle>

  return USBH_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd90      	pop	{r4, r7, pc}

0800b9f0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9fe:	69db      	ldr	r3, [r3, #28]
 800ba00:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00e      	beq.n	800ba28 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f001 fea4 	bl	800d75e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f001 fecf 	bl	800d7c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	7b1b      	ldrb	r3, [r3, #12]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00e      	beq.n	800ba4e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	7b1b      	ldrb	r3, [r3, #12]
 800ba34:	4619      	mov	r1, r3
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f001 fe91 	bl	800d75e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	7b1b      	ldrb	r3, [r3, #12]
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f001 febc 	bl	800d7c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	7b5b      	ldrb	r3, [r3, #13]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00e      	beq.n	800ba74 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	7b5b      	ldrb	r3, [r3, #13]
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f001 fe7e 	bl	800d75e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	7b5b      	ldrb	r3, [r3, #13]
 800ba66:	4619      	mov	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f001 fea9 	bl	800d7c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2200      	movs	r2, #0
 800ba72:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba7a:	69db      	ldr	r3, [r3, #28]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00b      	beq.n	800ba98 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba86:	69db      	ldr	r3, [r3, #28]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f002 fa49 	bl	800df20 <free>
    phost->pActiveClass->pData = 0U;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba94:	2200      	movs	r2, #0
 800ba96:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bab0:	69db      	ldr	r3, [r3, #28]
 800bab2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3340      	adds	r3, #64	@ 0x40
 800bab8:	4619      	mov	r1, r3
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f8b1 	bl	800bc22 <GetLineCoding>
 800bac0:	4603      	mov	r3, r0
 800bac2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800bac4:	7afb      	ldrb	r3, [r7, #11]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d105      	bne.n	800bad6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bad0:	2102      	movs	r1, #2
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800bad6:	7afb      	ldrb	r3, [r7, #11]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bae8:	2301      	movs	r3, #1
 800baea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800baf6:	69db      	ldr	r3, [r3, #28]
 800baf8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	d877      	bhi.n	800bbf4 <USBH_CDC_Process+0x114>
 800bb04:	a201      	add	r2, pc, #4	@ (adr r2, 800bb0c <USBH_CDC_Process+0x2c>)
 800bb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0a:	bf00      	nop
 800bb0c:	0800bb21 	.word	0x0800bb21
 800bb10:	0800bb27 	.word	0x0800bb27
 800bb14:	0800bb57 	.word	0x0800bb57
 800bb18:	0800bbcb 	.word	0x0800bbcb
 800bb1c:	0800bbd9 	.word	0x0800bbd9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73fb      	strb	r3, [r7, #15]
      break;
 800bb24:	e06d      	b.n	800bc02 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f897 	bl	800bc60 <SetLineCoding>
 800bb32:	4603      	mov	r3, r0
 800bb34:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bb36:	7bbb      	ldrb	r3, [r7, #14]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d104      	bne.n	800bb46 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2202      	movs	r2, #2
 800bb40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800bb44:	e058      	b.n	800bbf8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800bb46:	7bbb      	ldrb	r3, [r7, #14]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d055      	beq.n	800bbf8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	2204      	movs	r2, #4
 800bb50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800bb54:	e050      	b.n	800bbf8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	3340      	adds	r3, #64	@ 0x40
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 f860 	bl	800bc22 <GetLineCoding>
 800bb62:	4603      	mov	r3, r0
 800bb64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bb66:	7bbb      	ldrb	r3, [r7, #14]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d126      	bne.n	800bbba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb7e:	791b      	ldrb	r3, [r3, #4]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d13b      	bne.n	800bbfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb8e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d133      	bne.n	800bbfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb9e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d12b      	bne.n	800bbfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d124      	bne.n	800bbfc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f958 	bl	800be68 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800bbb8:	e020      	b.n	800bbfc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800bbba:	7bbb      	ldrb	r3, [r7, #14]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d01d      	beq.n	800bbfc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2204      	movs	r2, #4
 800bbc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800bbc8:	e018      	b.n	800bbfc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f867 	bl	800bc9e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f8da 	bl	800bd8a <CDC_ProcessReception>
      break;
 800bbd6:	e014      	b.n	800bc02 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800bbd8:	2100      	movs	r1, #0
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f001 f81a 	bl	800cc14 <USBH_ClrFeature>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d10a      	bne.n	800bc00 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800bbf2:	e005      	b.n	800bc00 <USBH_CDC_Process+0x120>

    default:
      break;
 800bbf4:	bf00      	nop
 800bbf6:	e004      	b.n	800bc02 <USBH_CDC_Process+0x122>
      break;
 800bbf8:	bf00      	nop
 800bbfa:	e002      	b.n	800bc02 <USBH_CDC_Process+0x122>
      break;
 800bbfc:	bf00      	nop
 800bbfe:	e000      	b.n	800bc02 <USBH_CDC_Process+0x122>
      break;
 800bc00:	bf00      	nop

  }

  return status;
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	22a1      	movs	r2, #161	@ 0xa1
 800bc30:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2221      	movs	r2, #33	@ 0x21
 800bc36:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2207      	movs	r2, #7
 800bc48:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2207      	movs	r2, #7
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f001 fb14 	bl	800d27e <USBH_CtlReq>
 800bc56:	4603      	mov	r3, r0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2221      	movs	r2, #33	@ 0x21
 800bc6e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2220      	movs	r2, #32
 800bc74:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2207      	movs	r2, #7
 800bc86:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	2207      	movs	r2, #7
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f001 faf5 	bl	800d27e <USBH_CtlReq>
 800bc94:	4603      	mov	r3, r0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b086      	sub	sp, #24
 800bca2:	af02      	add	r7, sp, #8
 800bca4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bcac:	69db      	ldr	r3, [r3, #28]
 800bcae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d002      	beq.n	800bcc4 <CDC_ProcessTransmission+0x26>
 800bcbe:	2b02      	cmp	r3, #2
 800bcc0:	d023      	beq.n	800bd0a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800bcc2:	e05e      	b.n	800bd82 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	8b12      	ldrh	r2, [r2, #24]
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d90b      	bls.n	800bce8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	69d9      	ldr	r1, [r3, #28]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	8b1a      	ldrh	r2, [r3, #24]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	7b5b      	ldrb	r3, [r3, #13]
 800bcdc:	2001      	movs	r0, #1
 800bcde:	9000      	str	r0, [sp, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f001 fcda 	bl	800d69a <USBH_BulkSendData>
 800bce6:	e00b      	b.n	800bd00 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	7b5b      	ldrb	r3, [r3, #13]
 800bcf6:	2001      	movs	r0, #1
 800bcf8:	9000      	str	r0, [sp, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f001 fccd 	bl	800d69a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2202      	movs	r2, #2
 800bd04:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800bd08:	e03b      	b.n	800bd82 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	7b5b      	ldrb	r3, [r3, #13]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f002 f84d 	bl	800ddb0 <USBH_LL_GetURBState>
 800bd16:	4603      	mov	r3, r0
 800bd18:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800bd1a:	7afb      	ldrb	r3, [r7, #11]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d128      	bne.n	800bd72 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	8b12      	ldrh	r2, [r2, #24]
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d90e      	bls.n	800bd4a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	8b12      	ldrh	r2, [r2, #24]
 800bd34:	1a9a      	subs	r2, r3, r2
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	69db      	ldr	r3, [r3, #28]
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	8b12      	ldrh	r2, [r2, #24]
 800bd42:	441a      	add	r2, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	61da      	str	r2, [r3, #28]
 800bd48:	e002      	b.n	800bd50 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d004      	beq.n	800bd62 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800bd60:	e00e      	b.n	800bd80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f868 	bl	800be40 <USBH_CDC_TransmitCallback>
      break;
 800bd70:	e006      	b.n	800bd80 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800bd72:	7afb      	ldrb	r3, [r7, #11]
 800bd74:	2b02      	cmp	r3, #2
 800bd76:	d103      	bne.n	800bd80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800bd80:	bf00      	nop
  }
}
 800bd82:	bf00      	nop
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b086      	sub	sp, #24
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bd98:	69db      	ldr	r3, [r3, #28]
 800bd9a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	d002      	beq.n	800bdb0 <CDC_ProcessReception+0x26>
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	d00e      	beq.n	800bdcc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800bdae:	e043      	b.n	800be38 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	6a19      	ldr	r1, [r3, #32]
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	8b5a      	ldrh	r2, [r3, #26]
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	7b1b      	ldrb	r3, [r3, #12]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f001 fc91 	bl	800d6e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	2204      	movs	r2, #4
 800bdc6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800bdca:	e035      	b.n	800be38 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	7b1b      	ldrb	r3, [r3, #12]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f001 ffec 	bl	800ddb0 <USBH_LL_GetURBState>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800bddc:	7cfb      	ldrb	r3, [r7, #19]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d129      	bne.n	800be36 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	7b1b      	ldrb	r3, [r3, #12]
 800bde6:	4619      	mov	r1, r3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f001 ff4f 	bl	800dc8c <USBH_LL_GetLastXferSize>
 800bdee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d016      	beq.n	800be28 <CDC_ProcessReception+0x9e>
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	8b5b      	ldrh	r3, [r3, #26]
 800bdfe:	461a      	mov	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4293      	cmp	r3, r2
 800be04:	d110      	bne.n	800be28 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	1ad2      	subs	r2, r2, r3
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	6a1a      	ldr	r2, [r3, #32]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	441a      	add	r2, r3
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	2203      	movs	r2, #3
 800be22:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800be26:	e006      	b.n	800be36 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f80f 	bl	800be54 <USBH_CDC_ReceiveCallback>
      break;
 800be36:	bf00      	nop
  }
}
 800be38:	bf00      	nop
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	4613      	mov	r3, r2
 800be88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800be90:	2302      	movs	r3, #2
 800be92:	e029      	b.n	800bee8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	79fa      	ldrb	r2, [r7, #7]
 800be98:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f000 f81f 	bl	800bef0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d003      	beq.n	800bee0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f001 fe1f 	bl	800db24 <USBH_LL_Init>

  return USBH_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800befc:	2300      	movs	r3, #0
 800befe:	60fb      	str	r3, [r7, #12]
 800bf00:	e009      	b.n	800bf16 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	33e0      	adds	r3, #224	@ 0xe0
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3301      	adds	r3, #1
 800bf14:	60fb      	str	r3, [r7, #12]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b0f      	cmp	r3, #15
 800bf1a:	d9f2      	bls.n	800bf02 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	60fb      	str	r3, [r7, #12]
 800bf20:	e009      	b.n	800bf36 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	4413      	add	r3, r2
 800bf28:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	3301      	adds	r3, #1
 800bf34:	60fb      	str	r3, [r7, #12]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf3c:	d3f1      	bcc.n	800bf22 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2240      	movs	r2, #64	@ 0x40
 800bf62:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2201      	movs	r2, #1
 800bf76:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	331c      	adds	r3, #28
 800bf8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bf92:	2100      	movs	r1, #0
 800bf94:	4618      	mov	r0, r3
 800bf96:	f002 f879 	bl	800e08c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bfa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f002 f870 	bl	800e08c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bfb2:	2212      	movs	r2, #18
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f002 f868 	bl	800e08c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bfc2:	223e      	movs	r2, #62	@ 0x3e
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f002 f860 	bl	800e08c <memset>

  return USBH_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b085      	sub	sp, #20
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d016      	beq.n	800c018 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10e      	bne.n	800c012 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800bffa:	1c59      	adds	r1, r3, #1
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	33de      	adds	r3, #222	@ 0xde
 800c006:	6839      	ldr	r1, [r7, #0]
 800c008:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c00c:	2300      	movs	r3, #0
 800c00e:	73fb      	strb	r3, [r7, #15]
 800c010:	e004      	b.n	800c01c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c012:	2302      	movs	r3, #2
 800c014:	73fb      	strb	r3, [r7, #15]
 800c016:	e001      	b.n	800c01c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c018:	2302      	movs	r3, #2
 800c01a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c02a:	b480      	push	{r7}
 800c02c:	b085      	sub	sp, #20
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	460b      	mov	r3, r1
 800c034:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c036:	2300      	movs	r3, #0
 800c038:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c040:	78fa      	ldrb	r2, [r7, #3]
 800c042:	429a      	cmp	r2, r3
 800c044:	d204      	bcs.n	800c050 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	78fa      	ldrb	r2, [r7, #3]
 800c04a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c04e:	e001      	b.n	800c054 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c050:	2302      	movs	r3, #2
 800c052:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c054:	7bfb      	ldrb	r3, [r7, #15]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c062:	b480      	push	{r7}
 800c064:	b087      	sub	sp, #28
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
 800c06a:	4608      	mov	r0, r1
 800c06c:	4611      	mov	r1, r2
 800c06e:	461a      	mov	r2, r3
 800c070:	4603      	mov	r3, r0
 800c072:	70fb      	strb	r3, [r7, #3]
 800c074:	460b      	mov	r3, r1
 800c076:	70bb      	strb	r3, [r7, #2]
 800c078:	4613      	mov	r3, r2
 800c07a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c07c:	2300      	movs	r3, #0
 800c07e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c080:	2300      	movs	r3, #0
 800c082:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c08a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c08c:	e025      	b.n	800c0da <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	221a      	movs	r2, #26
 800c092:	fb02 f303 	mul.w	r3, r2, r3
 800c096:	3308      	adds	r3, #8
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	4413      	add	r3, r2
 800c09c:	3302      	adds	r3, #2
 800c09e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	795b      	ldrb	r3, [r3, #5]
 800c0a4:	78fa      	ldrb	r2, [r7, #3]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d002      	beq.n	800c0b0 <USBH_FindInterface+0x4e>
 800c0aa:	78fb      	ldrb	r3, [r7, #3]
 800c0ac:	2bff      	cmp	r3, #255	@ 0xff
 800c0ae:	d111      	bne.n	800c0d4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c0b4:	78ba      	ldrb	r2, [r7, #2]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d002      	beq.n	800c0c0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c0ba:	78bb      	ldrb	r3, [r7, #2]
 800c0bc:	2bff      	cmp	r3, #255	@ 0xff
 800c0be:	d109      	bne.n	800c0d4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c0c4:	787a      	ldrb	r2, [r7, #1]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d002      	beq.n	800c0d0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c0ca:	787b      	ldrb	r3, [r7, #1]
 800c0cc:	2bff      	cmp	r3, #255	@ 0xff
 800c0ce:	d101      	bne.n	800c0d4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c0d0:	7dfb      	ldrb	r3, [r7, #23]
 800c0d2:	e006      	b.n	800c0e2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c0d4:	7dfb      	ldrb	r3, [r7, #23]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d9d6      	bls.n	800c08e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c0e0:	23ff      	movs	r3, #255	@ 0xff
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	371c      	adds	r7, #28
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b082      	sub	sp, #8
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f001 fd50 	bl	800db9c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f001 fe69 	bl	800ddd6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
	...

0800c110 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b088      	sub	sp, #32
 800c114:	af04      	add	r7, sp, #16
 800c116:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c118:	2302      	movs	r3, #2
 800c11a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c11c:	2300      	movs	r3, #0
 800c11e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c126:	b2db      	uxtb	r3, r3
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d102      	bne.n	800c132 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2203      	movs	r2, #3
 800c130:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	b2db      	uxtb	r3, r3
 800c138:	2b0b      	cmp	r3, #11
 800c13a:	f200 81bb 	bhi.w	800c4b4 <USBH_Process+0x3a4>
 800c13e:	a201      	add	r2, pc, #4	@ (adr r2, 800c144 <USBH_Process+0x34>)
 800c140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c144:	0800c175 	.word	0x0800c175
 800c148:	0800c1a7 	.word	0x0800c1a7
 800c14c:	0800c20f 	.word	0x0800c20f
 800c150:	0800c44f 	.word	0x0800c44f
 800c154:	0800c4b5 	.word	0x0800c4b5
 800c158:	0800c2af 	.word	0x0800c2af
 800c15c:	0800c3f5 	.word	0x0800c3f5
 800c160:	0800c2e5 	.word	0x0800c2e5
 800c164:	0800c305 	.word	0x0800c305
 800c168:	0800c323 	.word	0x0800c323
 800c16c:	0800c367 	.word	0x0800c367
 800c170:	0800c437 	.word	0x0800c437
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 819b 	beq.w	800c4b8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2201      	movs	r2, #1
 800c186:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c188:	20c8      	movs	r0, #200	@ 0xc8
 800c18a:	f001 fe6e 	bl	800de6a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f001 fd61 	bl	800dc56 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c1a4:	e188      	b.n	800c4b8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d107      	bne.n	800c1c0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c1be:	e18a      	b.n	800c4d6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c1c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c1ca:	d914      	bls.n	800c1f6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d903      	bls.n	800c1ee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	220d      	movs	r2, #13
 800c1ea:	701a      	strb	r2, [r3, #0]
      break;
 800c1ec:	e173      	b.n	800c4d6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	701a      	strb	r2, [r3, #0]
      break;
 800c1f4:	e16f      	b.n	800c4d6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c1fc:	f103 020a 	add.w	r2, r3, #10
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800c206:	200a      	movs	r0, #10
 800c208:	f001 fe2f 	bl	800de6a <USBH_Delay>
      break;
 800c20c:	e163      	b.n	800c4d6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c214:	2b00      	cmp	r3, #0
 800c216:	d005      	beq.n	800c224 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c21e:	2104      	movs	r1, #4
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c224:	2064      	movs	r0, #100	@ 0x64
 800c226:	f001 fe20 	bl	800de6a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f001 fcec 	bl	800dc08 <USBH_LL_GetSpeed>
 800c230:	4603      	mov	r3, r0
 800c232:	461a      	mov	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2205      	movs	r2, #5
 800c23e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c240:	2100      	movs	r1, #0
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f001 fa9b 	bl	800d77e <USBH_AllocPipe>
 800c248:	4603      	mov	r3, r0
 800c24a:	461a      	mov	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c250:	2180      	movs	r1, #128	@ 0x80
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f001 fa93 	bl	800d77e <USBH_AllocPipe>
 800c258:	4603      	mov	r3, r0
 800c25a:	461a      	mov	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	7919      	ldrb	r1, [r3, #4]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c274:	9202      	str	r2, [sp, #8]
 800c276:	2200      	movs	r2, #0
 800c278:	9201      	str	r2, [sp, #4]
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	4603      	mov	r3, r0
 800c27e:	2280      	movs	r2, #128	@ 0x80
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f001 fa4d 	bl	800d720 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	7959      	ldrb	r1, [r3, #5]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c29a:	9202      	str	r2, [sp, #8]
 800c29c:	2200      	movs	r2, #0
 800c29e:	9201      	str	r2, [sp, #4]
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f001 fa3a 	bl	800d720 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c2ac:	e113      	b.n	800c4d6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 f916 	bl	800c4e0 <USBH_HandleEnum>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f040 80fd 	bne.w	800c4bc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d103      	bne.n	800c2dc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2208      	movs	r2, #8
 800c2d8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c2da:	e0ef      	b.n	800c4bc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2207      	movs	r2, #7
 800c2e0:	701a      	strb	r2, [r3, #0]
      break;
 800c2e2:	e0eb      	b.n	800c4bc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 80e8 	beq.w	800c4c0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c2f6:	2101      	movs	r1, #1
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2208      	movs	r2, #8
 800c300:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c302:	e0dd      	b.n	800c4c0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800c30a:	4619      	mov	r1, r3
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fc3a 	bl	800cb86 <USBH_SetCfg>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	f040 80d5 	bne.w	800c4c4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2209      	movs	r2, #9
 800c31e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c320:	e0d0      	b.n	800c4c4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800c328:	f003 0320 	and.w	r3, r3, #32
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d016      	beq.n	800c35e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c330:	2101      	movs	r1, #1
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fc4a 	bl	800cbcc <USBH_SetFeature>
 800c338:	4603      	mov	r3, r0
 800c33a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	2b00      	cmp	r3, #0
 800c342:	d103      	bne.n	800c34c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	220a      	movs	r2, #10
 800c348:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c34a:	e0bd      	b.n	800c4c8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	2b03      	cmp	r3, #3
 800c352:	f040 80b9 	bne.w	800c4c8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	220a      	movs	r2, #10
 800c35a:	701a      	strb	r2, [r3, #0]
      break;
 800c35c:	e0b4      	b.n	800c4c8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	220a      	movs	r2, #10
 800c362:	701a      	strb	r2, [r3, #0]
      break;
 800c364:	e0b0      	b.n	800c4c8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 80ad 	beq.w	800c4cc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c37a:	2300      	movs	r3, #0
 800c37c:	73fb      	strb	r3, [r7, #15]
 800c37e:	e016      	b.n	800c3ae <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c380:	7bfa      	ldrb	r2, [r7, #15]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	32de      	adds	r2, #222	@ 0xde
 800c386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38a:	791a      	ldrb	r2, [r3, #4]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800c392:	429a      	cmp	r2, r3
 800c394:	d108      	bne.n	800c3a8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c396:	7bfa      	ldrb	r2, [r7, #15]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	32de      	adds	r2, #222	@ 0xde
 800c39c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800c3a6:	e005      	b.n	800c3b4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c3a8:	7bfb      	ldrb	r3, [r7, #15]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	73fb      	strb	r3, [r7, #15]
 800c3ae:	7bfb      	ldrb	r3, [r7, #15]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d0e5      	beq.n	800c380 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d016      	beq.n	800c3ec <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	4798      	blx	r3
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d109      	bne.n	800c3e4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2206      	movs	r2, #6
 800c3d4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c3dc:	2103      	movs	r1, #3
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c3e2:	e073      	b.n	800c4cc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	220d      	movs	r2, #13
 800c3e8:	701a      	strb	r2, [r3, #0]
      break;
 800c3ea:	e06f      	b.n	800c4cc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	220d      	movs	r2, #13
 800c3f0:	701a      	strb	r2, [r3, #0]
      break;
 800c3f2:	e06b      	b.n	800c4cc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d017      	beq.n	800c42e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	4798      	blx	r3
 800c40a:	4603      	mov	r3, r0
 800c40c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c40e:	7bbb      	ldrb	r3, [r7, #14]
 800c410:	b2db      	uxtb	r3, r3
 800c412:	2b00      	cmp	r3, #0
 800c414:	d103      	bne.n	800c41e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	220b      	movs	r2, #11
 800c41a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c41c:	e058      	b.n	800c4d0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800c41e:	7bbb      	ldrb	r3, [r7, #14]
 800c420:	b2db      	uxtb	r3, r3
 800c422:	2b02      	cmp	r3, #2
 800c424:	d154      	bne.n	800c4d0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	220d      	movs	r2, #13
 800c42a:	701a      	strb	r2, [r3, #0]
      break;
 800c42c:	e050      	b.n	800c4d0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	220d      	movs	r2, #13
 800c432:	701a      	strb	r2, [r3, #0]
      break;
 800c434:	e04c      	b.n	800c4d0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d049      	beq.n	800c4d4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	4798      	blx	r3
      }
      break;
 800c44c:	e042      	b.n	800c4d4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7ff fd4a 	bl	800bef0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c462:	2b00      	cmp	r3, #0
 800c464:	d009      	beq.n	800c47a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c480:	2b00      	cmp	r3, #0
 800c482:	d005      	beq.n	800c490 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c48a:	2105      	movs	r1, #5
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800c496:	b2db      	uxtb	r3, r3
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d107      	bne.n	800c4ac <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7ff fe22 	bl	800c0ee <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c4aa:	e014      	b.n	800c4d6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f001 fb75 	bl	800db9c <USBH_LL_Start>
      break;
 800c4b2:	e010      	b.n	800c4d6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c4b4:	bf00      	nop
 800c4b6:	e00e      	b.n	800c4d6 <USBH_Process+0x3c6>
      break;
 800c4b8:	bf00      	nop
 800c4ba:	e00c      	b.n	800c4d6 <USBH_Process+0x3c6>
      break;
 800c4bc:	bf00      	nop
 800c4be:	e00a      	b.n	800c4d6 <USBH_Process+0x3c6>
    break;
 800c4c0:	bf00      	nop
 800c4c2:	e008      	b.n	800c4d6 <USBH_Process+0x3c6>
      break;
 800c4c4:	bf00      	nop
 800c4c6:	e006      	b.n	800c4d6 <USBH_Process+0x3c6>
      break;
 800c4c8:	bf00      	nop
 800c4ca:	e004      	b.n	800c4d6 <USBH_Process+0x3c6>
      break;
 800c4cc:	bf00      	nop
 800c4ce:	e002      	b.n	800c4d6 <USBH_Process+0x3c6>
      break;
 800c4d0:	bf00      	nop
 800c4d2:	e000      	b.n	800c4d6 <USBH_Process+0x3c6>
      break;
 800c4d4:	bf00      	nop
  }
  return USBH_OK;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b088      	sub	sp, #32
 800c4e4:	af04      	add	r7, sp, #16
 800c4e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	785b      	ldrb	r3, [r3, #1]
 800c4f4:	2b07      	cmp	r3, #7
 800c4f6:	f200 81bd 	bhi.w	800c874 <USBH_HandleEnum+0x394>
 800c4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c500 <USBH_HandleEnum+0x20>)
 800c4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c500:	0800c521 	.word	0x0800c521
 800c504:	0800c5db 	.word	0x0800c5db
 800c508:	0800c645 	.word	0x0800c645
 800c50c:	0800c6cf 	.word	0x0800c6cf
 800c510:	0800c739 	.word	0x0800c739
 800c514:	0800c7a9 	.word	0x0800c7a9
 800c518:	0800c7ef 	.word	0x0800c7ef
 800c51c:	0800c835 	.word	0x0800c835
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c520:	2108      	movs	r1, #8
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fa4c 	bl	800c9c0 <USBH_Get_DevDesc>
 800c528:	4603      	mov	r3, r0
 800c52a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d12e      	bne.n	800c590 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2201      	movs	r2, #1
 800c540:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	7919      	ldrb	r1, [r3, #4]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c556:	9202      	str	r2, [sp, #8]
 800c558:	2200      	movs	r2, #0
 800c55a:	9201      	str	r2, [sp, #4]
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	4603      	mov	r3, r0
 800c560:	2280      	movs	r2, #128	@ 0x80
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f001 f8dc 	bl	800d720 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	7959      	ldrb	r1, [r3, #5]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c57c:	9202      	str	r2, [sp, #8]
 800c57e:	2200      	movs	r2, #0
 800c580:	9201      	str	r2, [sp, #4]
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	4603      	mov	r3, r0
 800c586:	2200      	movs	r2, #0
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f001 f8c9 	bl	800d720 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c58e:	e173      	b.n	800c878 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c590:	7bbb      	ldrb	r3, [r7, #14]
 800c592:	2b03      	cmp	r3, #3
 800c594:	f040 8170 	bne.w	800c878 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c59e:	3301      	adds	r3, #1
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d903      	bls.n	800c5ba <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	220d      	movs	r2, #13
 800c5b6:	701a      	strb	r2, [r3, #0]
      break;
 800c5b8:	e15e      	b.n	800c878 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	795b      	ldrb	r3, [r3, #5]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f001 f8fd 	bl	800d7c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	791b      	ldrb	r3, [r3, #4]
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f001 f8f7 	bl	800d7c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	701a      	strb	r2, [r3, #0]
      break;
 800c5d8:	e14e      	b.n	800c878 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c5da:	2112      	movs	r1, #18
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 f9ef 	bl	800c9c0 <USBH_Get_DevDesc>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c5e6:	7bbb      	ldrb	r3, [r7, #14]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d103      	bne.n	800c5f4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2202      	movs	r2, #2
 800c5f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c5f2:	e143      	b.n	800c87c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c5f4:	7bbb      	ldrb	r3, [r7, #14]
 800c5f6:	2b03      	cmp	r3, #3
 800c5f8:	f040 8140 	bne.w	800c87c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c602:	3301      	adds	r3, #1
 800c604:	b2da      	uxtb	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c612:	2b03      	cmp	r3, #3
 800c614:	d903      	bls.n	800c61e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	220d      	movs	r2, #13
 800c61a:	701a      	strb	r2, [r3, #0]
      break;
 800c61c:	e12e      	b.n	800c87c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	795b      	ldrb	r3, [r3, #5]
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f001 f8cb 	bl	800d7c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	791b      	ldrb	r3, [r3, #4]
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f001 f8c5 	bl	800d7c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	701a      	strb	r2, [r3, #0]
      break;
 800c642:	e11b      	b.n	800c87c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c644:	2101      	movs	r1, #1
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 fa79 	bl	800cb3e <USBH_SetAddress>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c650:	7bbb      	ldrb	r3, [r7, #14]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d130      	bne.n	800c6b8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800c656:	2002      	movs	r0, #2
 800c658:	f001 fc07 	bl	800de6a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2203      	movs	r2, #3
 800c668:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	7919      	ldrb	r1, [r3, #4]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c67e:	9202      	str	r2, [sp, #8]
 800c680:	2200      	movs	r2, #0
 800c682:	9201      	str	r2, [sp, #4]
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	4603      	mov	r3, r0
 800c688:	2280      	movs	r2, #128	@ 0x80
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f001 f848 	bl	800d720 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7959      	ldrb	r1, [r3, #5]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c6a4:	9202      	str	r2, [sp, #8]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	9201      	str	r2, [sp, #4]
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f001 f835 	bl	800d720 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c6b6:	e0e3      	b.n	800c880 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c6b8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ba:	2b03      	cmp	r3, #3
 800c6bc:	f040 80e0 	bne.w	800c880 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	220d      	movs	r2, #13
 800c6c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	705a      	strb	r2, [r3, #1]
      break;
 800c6cc:	e0d8      	b.n	800c880 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c6ce:	2109      	movs	r1, #9
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 f9a1 	bl	800ca18 <USBH_Get_CfgDesc>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c6da:	7bbb      	ldrb	r3, [r7, #14]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d103      	bne.n	800c6e8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2204      	movs	r2, #4
 800c6e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c6e6:	e0cd      	b.n	800c884 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c6e8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ea:	2b03      	cmp	r3, #3
 800c6ec:	f040 80ca 	bne.w	800c884 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c706:	2b03      	cmp	r3, #3
 800c708:	d903      	bls.n	800c712 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	220d      	movs	r2, #13
 800c70e:	701a      	strb	r2, [r3, #0]
      break;
 800c710:	e0b8      	b.n	800c884 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	795b      	ldrb	r3, [r3, #5]
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f001 f851 	bl	800d7c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	791b      	ldrb	r3, [r3, #4]
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f001 f84b 	bl	800d7c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	701a      	strb	r2, [r3, #0]
      break;
 800c736:	e0a5      	b.n	800c884 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800c73e:	4619      	mov	r1, r3
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f969 	bl	800ca18 <USBH_Get_CfgDesc>
 800c746:	4603      	mov	r3, r0
 800c748:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c74a:	7bbb      	ldrb	r3, [r7, #14]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d103      	bne.n	800c758 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2205      	movs	r2, #5
 800c754:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c756:	e097      	b.n	800c888 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c758:	7bbb      	ldrb	r3, [r7, #14]
 800c75a:	2b03      	cmp	r3, #3
 800c75c:	f040 8094 	bne.w	800c888 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c766:	3301      	adds	r3, #1
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c776:	2b03      	cmp	r3, #3
 800c778:	d903      	bls.n	800c782 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	220d      	movs	r2, #13
 800c77e:	701a      	strb	r2, [r3, #0]
      break;
 800c780:	e082      	b.n	800c888 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	795b      	ldrb	r3, [r3, #5]
 800c786:	4619      	mov	r1, r3
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f001 f819 	bl	800d7c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	791b      	ldrb	r3, [r3, #4]
 800c792:	4619      	mov	r1, r3
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f001 f813 	bl	800d7c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	701a      	strb	r2, [r3, #0]
      break;
 800c7a6:	e06f      	b.n	800c888 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d019      	beq.n	800c7e6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c7be:	23ff      	movs	r3, #255	@ 0xff
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 f953 	bl	800ca6c <USBH_Get_StringDesc>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c7ca:	7bbb      	ldrb	r3, [r7, #14]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d103      	bne.n	800c7d8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2206      	movs	r2, #6
 800c7d4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c7d6:	e059      	b.n	800c88c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7d8:	7bbb      	ldrb	r3, [r7, #14]
 800c7da:	2b03      	cmp	r3, #3
 800c7dc:	d156      	bne.n	800c88c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2206      	movs	r2, #6
 800c7e2:	705a      	strb	r2, [r3, #1]
      break;
 800c7e4:	e052      	b.n	800c88c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2206      	movs	r2, #6
 800c7ea:	705a      	strb	r2, [r3, #1]
      break;
 800c7ec:	e04e      	b.n	800c88c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d019      	beq.n	800c82c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c804:	23ff      	movs	r3, #255	@ 0xff
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 f930 	bl	800ca6c <USBH_Get_StringDesc>
 800c80c:	4603      	mov	r3, r0
 800c80e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c810:	7bbb      	ldrb	r3, [r7, #14]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d103      	bne.n	800c81e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2207      	movs	r2, #7
 800c81a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c81c:	e038      	b.n	800c890 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c81e:	7bbb      	ldrb	r3, [r7, #14]
 800c820:	2b03      	cmp	r3, #3
 800c822:	d135      	bne.n	800c890 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2207      	movs	r2, #7
 800c828:	705a      	strb	r2, [r3, #1]
      break;
 800c82a:	e031      	b.n	800c890 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2207      	movs	r2, #7
 800c830:	705a      	strb	r2, [r3, #1]
      break;
 800c832:	e02d      	b.n	800c890 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d017      	beq.n	800c86e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c84a:	23ff      	movs	r3, #255	@ 0xff
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f90d 	bl	800ca6c <USBH_Get_StringDesc>
 800c852:	4603      	mov	r3, r0
 800c854:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c856:	7bbb      	ldrb	r3, [r7, #14]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d102      	bne.n	800c862 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c85c:	2300      	movs	r3, #0
 800c85e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c860:	e018      	b.n	800c894 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c862:	7bbb      	ldrb	r3, [r7, #14]
 800c864:	2b03      	cmp	r3, #3
 800c866:	d115      	bne.n	800c894 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800c868:	2300      	movs	r3, #0
 800c86a:	73fb      	strb	r3, [r7, #15]
      break;
 800c86c:	e012      	b.n	800c894 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	73fb      	strb	r3, [r7, #15]
      break;
 800c872:	e00f      	b.n	800c894 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800c874:	bf00      	nop
 800c876:	e00e      	b.n	800c896 <USBH_HandleEnum+0x3b6>
      break;
 800c878:	bf00      	nop
 800c87a:	e00c      	b.n	800c896 <USBH_HandleEnum+0x3b6>
      break;
 800c87c:	bf00      	nop
 800c87e:	e00a      	b.n	800c896 <USBH_HandleEnum+0x3b6>
      break;
 800c880:	bf00      	nop
 800c882:	e008      	b.n	800c896 <USBH_HandleEnum+0x3b6>
      break;
 800c884:	bf00      	nop
 800c886:	e006      	b.n	800c896 <USBH_HandleEnum+0x3b6>
      break;
 800c888:	bf00      	nop
 800c88a:	e004      	b.n	800c896 <USBH_HandleEnum+0x3b6>
      break;
 800c88c:	bf00      	nop
 800c88e:	e002      	b.n	800c896 <USBH_HandleEnum+0x3b6>
      break;
 800c890:	bf00      	nop
 800c892:	e000      	b.n	800c896 <USBH_HandleEnum+0x3b6>
      break;
 800c894:	bf00      	nop
  }
  return Status;
 800c896:	7bfb      	ldrb	r3, [r7, #15]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800c8b2:	bf00      	nop
 800c8b4:	370c      	adds	r7, #12
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b082      	sub	sp, #8
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c8cc:	1c5a      	adds	r2, r3, #1
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 f804 	bl	800c8e2 <USBH_HandleSof>
}
 800c8da:	bf00      	nop
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b082      	sub	sp, #8
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b0b      	cmp	r3, #11
 800c8f2:	d10a      	bne.n	800c90a <USBH_HandleSof+0x28>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d005      	beq.n	800c90a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	4798      	blx	r3
  }
}
 800c90a:	bf00      	nop
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c912:	b480      	push	{r7}
 800c914:	b083      	sub	sp, #12
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c922:	bf00      	nop
}
 800c924:	370c      	adds	r7, #12
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c92e:	b480      	push	{r7}
 800c930:	b083      	sub	sp, #12
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800c93e:	bf00      	nop
}
 800c940:	370c      	adds	r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c94a:	b480      	push	{r7}
 800c94c:	b083      	sub	sp, #12
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2201      	movs	r2, #1
 800c956:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f001 f91a 	bl	800dbd2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	791b      	ldrb	r3, [r3, #4]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 ff0b 	bl	800d7c0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	795b      	ldrb	r3, [r3, #5]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 ff05 	bl	800d7c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af02      	add	r7, sp, #8
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c9cc:	887b      	ldrh	r3, [r7, #2]
 800c9ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9d2:	d901      	bls.n	800c9d8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e01b      	b.n	800ca10 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c9de:	887b      	ldrh	r3, [r7, #2]
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 f872 	bl	800cad4 <USBH_GetDescriptor>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d109      	bne.n	800ca0e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ca00:	887a      	ldrh	r2, [r7, #2]
 800ca02:	4619      	mov	r1, r3
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 f929 	bl	800cc5c <USBH_ParseDevDesc>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af02      	add	r7, sp, #8
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	460b      	mov	r3, r1
 800ca22:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	331c      	adds	r3, #28
 800ca28:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800ca2a:	887b      	ldrh	r3, [r7, #2]
 800ca2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca30:	d901      	bls.n	800ca36 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ca32:	2303      	movs	r3, #3
 800ca34:	e016      	b.n	800ca64 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ca36:	887b      	ldrh	r3, [r7, #2]
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca40:	2100      	movs	r1, #0
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f846 	bl	800cad4 <USBH_GetDescriptor>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d107      	bne.n	800ca62 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ca52:	887b      	ldrh	r3, [r7, #2]
 800ca54:	461a      	mov	r2, r3
 800ca56:	68b9      	ldr	r1, [r7, #8]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 f9af 	bl	800cdbc <USBH_ParseCfgDesc>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ca62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b088      	sub	sp, #32
 800ca70:	af02      	add	r7, sp, #8
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	607a      	str	r2, [r7, #4]
 800ca76:	461a      	mov	r2, r3
 800ca78:	460b      	mov	r3, r1
 800ca7a:	72fb      	strb	r3, [r7, #11]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ca80:	893b      	ldrh	r3, [r7, #8]
 800ca82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca86:	d802      	bhi.n	800ca8e <USBH_Get_StringDesc+0x22>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	e01c      	b.n	800cacc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ca92:	7afb      	ldrb	r3, [r7, #11]
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ca9a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800caa2:	893b      	ldrh	r3, [r7, #8]
 800caa4:	9300      	str	r3, [sp, #0]
 800caa6:	460b      	mov	r3, r1
 800caa8:	2100      	movs	r1, #0
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f000 f812 	bl	800cad4 <USBH_GetDescriptor>
 800cab0:	4603      	mov	r3, r0
 800cab2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800cab4:	7dfb      	ldrb	r3, [r7, #23]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d107      	bne.n	800caca <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cac0:	893a      	ldrh	r2, [r7, #8]
 800cac2:	6879      	ldr	r1, [r7, #4]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f000 fb8d 	bl	800d1e4 <USBH_ParseStringDesc>
  }

  return status;
 800caca:	7dfb      	ldrb	r3, [r7, #23]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3718      	adds	r7, #24
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	607b      	str	r3, [r7, #4]
 800cade:	460b      	mov	r3, r1
 800cae0:	72fb      	strb	r3, [r7, #11]
 800cae2:	4613      	mov	r3, r2
 800cae4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	789b      	ldrb	r3, [r3, #2]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d11c      	bne.n	800cb28 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800caee:	7afb      	ldrb	r3, [r7, #11]
 800caf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2206      	movs	r2, #6
 800cafe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	893a      	ldrh	r2, [r7, #8]
 800cb04:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cb06:	893b      	ldrh	r3, [r7, #8]
 800cb08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cb0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb10:	d104      	bne.n	800cb1c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f240 4209 	movw	r2, #1033	@ 0x409
 800cb18:	829a      	strh	r2, [r3, #20]
 800cb1a:	e002      	b.n	800cb22 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	8b3a      	ldrh	r2, [r7, #24]
 800cb26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cb28:	8b3b      	ldrh	r3, [r7, #24]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f000 fba5 	bl	800d27e <USBH_CtlReq>
 800cb34:	4603      	mov	r3, r0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b082      	sub	sp, #8
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
 800cb46:	460b      	mov	r3, r1
 800cb48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	789b      	ldrb	r3, [r3, #2]
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d10f      	bne.n	800cb72 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2205      	movs	r2, #5
 800cb5c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cb5e:	78fb      	ldrb	r3, [r7, #3]
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cb72:	2200      	movs	r2, #0
 800cb74:	2100      	movs	r1, #0
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fb81 	bl	800d27e <USBH_CtlReq>
 800cb7c:	4603      	mov	r3, r0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b082      	sub	sp, #8
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	460b      	mov	r3, r1
 800cb90:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	789b      	ldrb	r3, [r3, #2]
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d10e      	bne.n	800cbb8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2209      	movs	r2, #9
 800cba4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	887a      	ldrh	r2, [r7, #2]
 800cbaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cbb8:	2200      	movs	r2, #0
 800cbba:	2100      	movs	r1, #0
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 fb5e 	bl	800d27e <USBH_CtlReq>
 800cbc2:	4603      	mov	r3, r0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	789b      	ldrb	r3, [r3, #2]
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d10f      	bne.n	800cc00 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2203      	movs	r2, #3
 800cbea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cbec:	78fb      	ldrb	r3, [r7, #3]
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cc00:	2200      	movs	r2, #0
 800cc02:	2100      	movs	r1, #0
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 fb3a 	bl	800d27e <USBH_CtlReq>
 800cc0a:	4603      	mov	r3, r0
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3708      	adds	r7, #8
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	789b      	ldrb	r3, [r3, #2]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d10f      	bne.n	800cc48 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2202      	movs	r2, #2
 800cc2c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2201      	movs	r2, #1
 800cc32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cc3a:	78fb      	ldrb	r3, [r7, #3]
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fb16 	bl	800d27e <USBH_CtlReq>
 800cc52:	4603      	mov	r3, r0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b087      	sub	sp, #28
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	4613      	mov	r3, r2
 800cc68:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cc70:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d101      	bne.n	800cc80 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	e094      	b.n	800cdaa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	781a      	ldrb	r2, [r3, #0]
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	785a      	ldrb	r2, [r3, #1]
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	3302      	adds	r3, #2
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	3303      	adds	r3, #3
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	021b      	lsls	r3, r3, #8
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	4313      	orrs	r3, r2
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	791a      	ldrb	r2, [r3, #4]
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	795a      	ldrb	r2, [r3, #5]
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	799a      	ldrb	r2, [r3, #6]
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	79da      	ldrb	r2, [r3, #7]
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d004      	beq.n	800ccde <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d11b      	bne.n	800cd16 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	79db      	ldrb	r3, [r3, #7]
 800cce2:	2b20      	cmp	r3, #32
 800cce4:	dc0f      	bgt.n	800cd06 <USBH_ParseDevDesc+0xaa>
 800cce6:	2b08      	cmp	r3, #8
 800cce8:	db0f      	blt.n	800cd0a <USBH_ParseDevDesc+0xae>
 800ccea:	3b08      	subs	r3, #8
 800ccec:	4a32      	ldr	r2, [pc, #200]	@ (800cdb8 <USBH_ParseDevDesc+0x15c>)
 800ccee:	fa22 f303 	lsr.w	r3, r2, r3
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	bf14      	ite	ne
 800ccfa:	2301      	movne	r3, #1
 800ccfc:	2300      	moveq	r3, #0
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d106      	bne.n	800cd12 <USBH_ParseDevDesc+0xb6>
 800cd04:	e001      	b.n	800cd0a <USBH_ParseDevDesc+0xae>
 800cd06:	2b40      	cmp	r3, #64	@ 0x40
 800cd08:	d003      	beq.n	800cd12 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	2208      	movs	r2, #8
 800cd0e:	71da      	strb	r2, [r3, #7]
        break;
 800cd10:	e000      	b.n	800cd14 <USBH_ParseDevDesc+0xb8>
        break;
 800cd12:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800cd14:	e00e      	b.n	800cd34 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cd1c:	2b02      	cmp	r3, #2
 800cd1e:	d107      	bne.n	800cd30 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	79db      	ldrb	r3, [r3, #7]
 800cd24:	2b08      	cmp	r3, #8
 800cd26:	d005      	beq.n	800cd34 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	2208      	movs	r2, #8
 800cd2c:	71da      	strb	r2, [r3, #7]
 800cd2e:	e001      	b.n	800cd34 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800cd30:	2303      	movs	r3, #3
 800cd32:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800cd34:	88fb      	ldrh	r3, [r7, #6]
 800cd36:	2b08      	cmp	r3, #8
 800cd38:	d936      	bls.n	800cda8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	461a      	mov	r2, r3
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	3309      	adds	r3, #9
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	021b      	lsls	r3, r3, #8
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	330a      	adds	r3, #10
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	330b      	adds	r3, #11
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	021b      	lsls	r3, r3, #8
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	4313      	orrs	r3, r2
 800cd68:	b29a      	uxth	r2, r3
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	330c      	adds	r3, #12
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	461a      	mov	r2, r3
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	330d      	adds	r3, #13
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	021b      	lsls	r3, r3, #8
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	4313      	orrs	r3, r2
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	7b9a      	ldrb	r2, [r3, #14]
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	7bda      	ldrb	r2, [r3, #15]
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	7c1a      	ldrb	r2, [r3, #16]
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	7c5a      	ldrb	r2, [r3, #17]
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800cda8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	371c      	adds	r7, #28
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	01000101 	.word	0x01000101

0800cdbc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08c      	sub	sp, #48	@ 0x30
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cdd0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800cdde:	2300      	movs	r3, #0
 800cde0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d101      	bne.n	800cdee <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800cdea:	2302      	movs	r3, #2
 800cdec:	e0da      	b.n	800cfa4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800cdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	2b09      	cmp	r3, #9
 800cdf8:	d002      	beq.n	800ce00 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800cdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfc:	2209      	movs	r2, #9
 800cdfe:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	781a      	ldrb	r2, [r3, #0]
 800ce04:	6a3b      	ldr	r3, [r7, #32]
 800ce06:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	785a      	ldrb	r2, [r3, #1]
 800ce0c:	6a3b      	ldr	r3, [r7, #32]
 800ce0e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	3302      	adds	r3, #2
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	461a      	mov	r2, r3
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	3303      	adds	r3, #3
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	021b      	lsls	r3, r3, #8
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	4313      	orrs	r3, r2
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce2a:	bf28      	it	cs
 800ce2c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	791a      	ldrb	r2, [r3, #4]
 800ce3a:	6a3b      	ldr	r3, [r7, #32]
 800ce3c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	795a      	ldrb	r2, [r3, #5]
 800ce42:	6a3b      	ldr	r3, [r7, #32]
 800ce44:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	799a      	ldrb	r2, [r3, #6]
 800ce4a:	6a3b      	ldr	r3, [r7, #32]
 800ce4c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	79da      	ldrb	r2, [r3, #7]
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	7a1a      	ldrb	r2, [r3, #8]
 800ce5a:	6a3b      	ldr	r3, [r7, #32]
 800ce5c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ce5e:	88fb      	ldrh	r3, [r7, #6]
 800ce60:	2b09      	cmp	r3, #9
 800ce62:	f240 809d 	bls.w	800cfa0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800ce66:	2309      	movs	r3, #9
 800ce68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ce6e:	e081      	b.n	800cf74 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ce70:	f107 0316 	add.w	r3, r7, #22
 800ce74:	4619      	mov	r1, r3
 800ce76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce78:	f000 f9e7 	bl	800d24a <USBH_GetNextDesc>
 800ce7c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ce7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce80:	785b      	ldrb	r3, [r3, #1]
 800ce82:	2b04      	cmp	r3, #4
 800ce84:	d176      	bne.n	800cf74 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ce86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	2b09      	cmp	r3, #9
 800ce8c:	d002      	beq.n	800ce94 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ce8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce90:	2209      	movs	r2, #9
 800ce92:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ce94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce98:	221a      	movs	r2, #26
 800ce9a:	fb02 f303 	mul.w	r3, r2, r3
 800ce9e:	3308      	adds	r3, #8
 800cea0:	6a3a      	ldr	r2, [r7, #32]
 800cea2:	4413      	add	r3, r2
 800cea4:	3302      	adds	r3, #2
 800cea6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ceaa:	69f8      	ldr	r0, [r7, #28]
 800ceac:	f000 f87e 	bl	800cfac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ceba:	e043      	b.n	800cf44 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cebc:	f107 0316 	add.w	r3, r7, #22
 800cec0:	4619      	mov	r1, r3
 800cec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cec4:	f000 f9c1 	bl	800d24a <USBH_GetNextDesc>
 800cec8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ceca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cecc:	785b      	ldrb	r3, [r3, #1]
 800cece:	2b05      	cmp	r3, #5
 800ced0:	d138      	bne.n	800cf44 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	795b      	ldrb	r3, [r3, #5]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d113      	bne.n	800cf02 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800cede:	2b02      	cmp	r3, #2
 800cee0:	d003      	beq.n	800ceea <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	799b      	ldrb	r3, [r3, #6]
 800cee6:	2b03      	cmp	r3, #3
 800cee8:	d10b      	bne.n	800cf02 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	79db      	ldrb	r3, [r3, #7]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d10b      	bne.n	800cf0a <USBH_ParseCfgDesc+0x14e>
 800cef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b09      	cmp	r3, #9
 800cef8:	d007      	beq.n	800cf0a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800cefa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefc:	2209      	movs	r2, #9
 800cefe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cf00:	e003      	b.n	800cf0a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800cf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf04:	2207      	movs	r2, #7
 800cf06:	701a      	strb	r2, [r3, #0]
 800cf08:	e000      	b.n	800cf0c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cf0a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cf0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf10:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800cf14:	3201      	adds	r2, #1
 800cf16:	00d2      	lsls	r2, r2, #3
 800cf18:	211a      	movs	r1, #26
 800cf1a:	fb01 f303 	mul.w	r3, r1, r3
 800cf1e:	4413      	add	r3, r2
 800cf20:	3308      	adds	r3, #8
 800cf22:	6a3a      	ldr	r2, [r7, #32]
 800cf24:	4413      	add	r3, r2
 800cf26:	3304      	adds	r3, #4
 800cf28:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800cf2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf2c:	69b9      	ldr	r1, [r7, #24]
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f000 f870 	bl	800d014 <USBH_ParseEPDesc>
 800cf34:	4603      	mov	r3, r0
 800cf36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800cf3a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cf3e:	3301      	adds	r3, #1
 800cf40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	791b      	ldrb	r3, [r3, #4]
 800cf48:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d204      	bcs.n	800cf5a <USBH_ParseCfgDesc+0x19e>
 800cf50:	6a3b      	ldr	r3, [r7, #32]
 800cf52:	885a      	ldrh	r2, [r3, #2]
 800cf54:	8afb      	ldrh	r3, [r7, #22]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d8b0      	bhi.n	800cebc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	791b      	ldrb	r3, [r3, #4]
 800cf5e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d201      	bcs.n	800cf6a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800cf66:	2303      	movs	r3, #3
 800cf68:	e01c      	b.n	800cfa4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800cf6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf6e:	3301      	adds	r3, #1
 800cf70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cf74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d805      	bhi.n	800cf88 <USBH_ParseCfgDesc+0x1cc>
 800cf7c:	6a3b      	ldr	r3, [r7, #32]
 800cf7e:	885a      	ldrh	r2, [r3, #2]
 800cf80:	8afb      	ldrh	r3, [r7, #22]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	f63f af74 	bhi.w	800ce70 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800cf88:	6a3b      	ldr	r3, [r7, #32]
 800cf8a:	791b      	ldrb	r3, [r3, #4]
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	bf28      	it	cs
 800cf90:	2302      	movcs	r3, #2
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d201      	bcs.n	800cfa0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800cf9c:	2303      	movs	r3, #3
 800cf9e:	e001      	b.n	800cfa4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800cfa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3730      	adds	r7, #48	@ 0x30
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	781a      	ldrb	r2, [r3, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	785a      	ldrb	r2, [r3, #1]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	789a      	ldrb	r2, [r3, #2]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	78da      	ldrb	r2, [r3, #3]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	3304      	adds	r3, #4
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b02      	cmp	r3, #2
 800cfde:	bf28      	it	cs
 800cfe0:	2302      	movcs	r3, #2
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	795a      	ldrb	r2, [r3, #5]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	799a      	ldrb	r2, [r3, #6]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	79da      	ldrb	r2, [r3, #7]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	7a1a      	ldrb	r2, [r3, #8]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	721a      	strb	r2, [r3, #8]
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d014:	b480      	push	{r7}
 800d016:	b087      	sub	sp, #28
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d020:	2300      	movs	r3, #0
 800d022:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	781a      	ldrb	r2, [r3, #0]
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	785a      	ldrb	r2, [r3, #1]
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	789a      	ldrb	r2, [r3, #2]
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	78da      	ldrb	r2, [r3, #3]
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	3304      	adds	r3, #4
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	461a      	mov	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	3305      	adds	r3, #5
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	021b      	lsls	r3, r3, #8
 800d054:	b29b      	uxth	r3, r3
 800d056:	4313      	orrs	r3, r2
 800d058:	b29a      	uxth	r2, r3
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	799a      	ldrb	r2, [r3, #6]
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	889b      	ldrh	r3, [r3, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d009      	beq.n	800d082 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d076:	d804      	bhi.n	800d082 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d07c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d080:	d901      	bls.n	800d086 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d082:	2303      	movs	r3, #3
 800d084:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d136      	bne.n	800d0fe <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	78db      	ldrb	r3, [r3, #3]
 800d094:	f003 0303 	and.w	r3, r3, #3
 800d098:	2b02      	cmp	r3, #2
 800d09a:	d108      	bne.n	800d0ae <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	889b      	ldrh	r3, [r3, #4]
 800d0a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0a4:	f240 8097 	bls.w	800d1d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	75fb      	strb	r3, [r7, #23]
 800d0ac:	e093      	b.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	78db      	ldrb	r3, [r3, #3]
 800d0b2:	f003 0303 	and.w	r3, r3, #3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d107      	bne.n	800d0ca <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	889b      	ldrh	r3, [r3, #4]
 800d0be:	2b40      	cmp	r3, #64	@ 0x40
 800d0c0:	f240 8089 	bls.w	800d1d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	75fb      	strb	r3, [r7, #23]
 800d0c8:	e085      	b.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	78db      	ldrb	r3, [r3, #3]
 800d0ce:	f003 0303 	and.w	r3, r3, #3
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d005      	beq.n	800d0e2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	78db      	ldrb	r3, [r3, #3]
 800d0da:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d0de:	2b03      	cmp	r3, #3
 800d0e0:	d10a      	bne.n	800d0f8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	799b      	ldrb	r3, [r3, #6]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d003      	beq.n	800d0f2 <USBH_ParseEPDesc+0xde>
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	799b      	ldrb	r3, [r3, #6]
 800d0ee:	2b10      	cmp	r3, #16
 800d0f0:	d970      	bls.n	800d1d4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d0f2:	2303      	movs	r3, #3
 800d0f4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d0f6:	e06d      	b.n	800d1d4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d0f8:	2303      	movs	r3, #3
 800d0fa:	75fb      	strb	r3, [r7, #23]
 800d0fc:	e06b      	b.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d104:	2b01      	cmp	r3, #1
 800d106:	d13c      	bne.n	800d182 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	78db      	ldrb	r3, [r3, #3]
 800d10c:	f003 0303 	and.w	r3, r3, #3
 800d110:	2b02      	cmp	r3, #2
 800d112:	d005      	beq.n	800d120 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	78db      	ldrb	r3, [r3, #3]
 800d118:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d106      	bne.n	800d12e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	889b      	ldrh	r3, [r3, #4]
 800d124:	2b40      	cmp	r3, #64	@ 0x40
 800d126:	d956      	bls.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d128:	2303      	movs	r3, #3
 800d12a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d12c:	e053      	b.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	78db      	ldrb	r3, [r3, #3]
 800d132:	f003 0303 	and.w	r3, r3, #3
 800d136:	2b01      	cmp	r3, #1
 800d138:	d10e      	bne.n	800d158 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	799b      	ldrb	r3, [r3, #6]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d007      	beq.n	800d152 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d146:	2b10      	cmp	r3, #16
 800d148:	d803      	bhi.n	800d152 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d14e:	2b40      	cmp	r3, #64	@ 0x40
 800d150:	d941      	bls.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d152:	2303      	movs	r3, #3
 800d154:	75fb      	strb	r3, [r7, #23]
 800d156:	e03e      	b.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	78db      	ldrb	r3, [r3, #3]
 800d15c:	f003 0303 	and.w	r3, r3, #3
 800d160:	2b03      	cmp	r3, #3
 800d162:	d10b      	bne.n	800d17c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	799b      	ldrb	r3, [r3, #6]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d004      	beq.n	800d176 <USBH_ParseEPDesc+0x162>
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	889b      	ldrh	r3, [r3, #4]
 800d170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d174:	d32f      	bcc.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d176:	2303      	movs	r3, #3
 800d178:	75fb      	strb	r3, [r7, #23]
 800d17a:	e02c      	b.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d17c:	2303      	movs	r3, #3
 800d17e:	75fb      	strb	r3, [r7, #23]
 800d180:	e029      	b.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d120      	bne.n	800d1ce <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	78db      	ldrb	r3, [r3, #3]
 800d190:	f003 0303 	and.w	r3, r3, #3
 800d194:	2b00      	cmp	r3, #0
 800d196:	d106      	bne.n	800d1a6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	889b      	ldrh	r3, [r3, #4]
 800d19c:	2b08      	cmp	r3, #8
 800d19e:	d01a      	beq.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d1a0:	2303      	movs	r3, #3
 800d1a2:	75fb      	strb	r3, [r7, #23]
 800d1a4:	e017      	b.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	78db      	ldrb	r3, [r3, #3]
 800d1aa:	f003 0303 	and.w	r3, r3, #3
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	d10a      	bne.n	800d1c8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	799b      	ldrb	r3, [r3, #6]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d003      	beq.n	800d1c2 <USBH_ParseEPDesc+0x1ae>
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	889b      	ldrh	r3, [r3, #4]
 800d1be:	2b08      	cmp	r3, #8
 800d1c0:	d909      	bls.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d1c2:	2303      	movs	r3, #3
 800d1c4:	75fb      	strb	r3, [r7, #23]
 800d1c6:	e006      	b.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d1c8:	2303      	movs	r3, #3
 800d1ca:	75fb      	strb	r3, [r7, #23]
 800d1cc:	e003      	b.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	75fb      	strb	r3, [r7, #23]
 800d1d2:	e000      	b.n	800d1d6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d1d4:	bf00      	nop
  }

  return status;
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	371c      	adds	r7, #28
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b087      	sub	sp, #28
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	2b03      	cmp	r3, #3
 800d1fa:	d120      	bne.n	800d23e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	1e9a      	subs	r2, r3, #2
 800d202:	88fb      	ldrh	r3, [r7, #6]
 800d204:	4293      	cmp	r3, r2
 800d206:	bf28      	it	cs
 800d208:	4613      	movcs	r3, r2
 800d20a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	3302      	adds	r3, #2
 800d210:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d212:	2300      	movs	r3, #0
 800d214:	82fb      	strh	r3, [r7, #22]
 800d216:	e00b      	b.n	800d230 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d218:	8afb      	ldrh	r3, [r7, #22]
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	4413      	add	r3, r2
 800d21e:	781a      	ldrb	r2, [r3, #0]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	3301      	adds	r3, #1
 800d228:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d22a:	8afb      	ldrh	r3, [r7, #22]
 800d22c:	3302      	adds	r3, #2
 800d22e:	82fb      	strh	r3, [r7, #22]
 800d230:	8afa      	ldrh	r2, [r7, #22]
 800d232:	8abb      	ldrh	r3, [r7, #20]
 800d234:	429a      	cmp	r2, r3
 800d236:	d3ef      	bcc.n	800d218 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	2200      	movs	r2, #0
 800d23c:	701a      	strb	r2, [r3, #0]
  }
}
 800d23e:	bf00      	nop
 800d240:	371c      	adds	r7, #28
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d24a:	b480      	push	{r7}
 800d24c:	b085      	sub	sp, #20
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	881b      	ldrh	r3, [r3, #0]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	7812      	ldrb	r2, [r2, #0]
 800d25c:	4413      	add	r3, r2
 800d25e:	b29a      	uxth	r2, r3
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4413      	add	r3, r2
 800d26e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d270:	68fb      	ldr	r3, [r7, #12]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3714      	adds	r7, #20
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d27e:	b580      	push	{r7, lr}
 800d280:	b086      	sub	sp, #24
 800d282:	af00      	add	r7, sp, #0
 800d284:	60f8      	str	r0, [r7, #12]
 800d286:	60b9      	str	r1, [r7, #8]
 800d288:	4613      	mov	r3, r2
 800d28a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d28c:	2301      	movs	r3, #1
 800d28e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	789b      	ldrb	r3, [r3, #2]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d002      	beq.n	800d29e <USBH_CtlReq+0x20>
 800d298:	2b02      	cmp	r3, #2
 800d29a:	d00f      	beq.n	800d2bc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d29c:	e027      	b.n	800d2ee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	68ba      	ldr	r2, [r7, #8]
 800d2a2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	88fa      	ldrh	r2, [r7, #6]
 800d2a8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2202      	movs	r2, #2
 800d2b4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	75fb      	strb	r3, [r7, #23]
      break;
 800d2ba:	e018      	b.n	800d2ee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f000 f81b 	bl	800d2f8 <USBH_HandleControl>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d2c6:	7dfb      	ldrb	r3, [r7, #23]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <USBH_CtlReq+0x54>
 800d2cc:	7dfb      	ldrb	r3, [r7, #23]
 800d2ce:	2b03      	cmp	r3, #3
 800d2d0:	d106      	bne.n	800d2e0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	761a      	strb	r2, [r3, #24]
      break;
 800d2de:	e005      	b.n	800d2ec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d2e0:	7dfb      	ldrb	r3, [r7, #23]
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d102      	bne.n	800d2ec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	709a      	strb	r2, [r3, #2]
      break;
 800d2ec:	bf00      	nop
  }
  return status;
 800d2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3718      	adds	r7, #24
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af02      	add	r7, sp, #8
 800d2fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d300:	2301      	movs	r3, #1
 800d302:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d304:	2300      	movs	r3, #0
 800d306:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	7e1b      	ldrb	r3, [r3, #24]
 800d30c:	3b01      	subs	r3, #1
 800d30e:	2b0a      	cmp	r3, #10
 800d310:	f200 8156 	bhi.w	800d5c0 <USBH_HandleControl+0x2c8>
 800d314:	a201      	add	r2, pc, #4	@ (adr r2, 800d31c <USBH_HandleControl+0x24>)
 800d316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31a:	bf00      	nop
 800d31c:	0800d349 	.word	0x0800d349
 800d320:	0800d363 	.word	0x0800d363
 800d324:	0800d3cd 	.word	0x0800d3cd
 800d328:	0800d3f3 	.word	0x0800d3f3
 800d32c:	0800d42b 	.word	0x0800d42b
 800d330:	0800d455 	.word	0x0800d455
 800d334:	0800d4a7 	.word	0x0800d4a7
 800d338:	0800d4c9 	.word	0x0800d4c9
 800d33c:	0800d505 	.word	0x0800d505
 800d340:	0800d52b 	.word	0x0800d52b
 800d344:	0800d569 	.word	0x0800d569
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f103 0110 	add.w	r1, r3, #16
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	795b      	ldrb	r3, [r3, #5]
 800d352:	461a      	mov	r2, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 f943 	bl	800d5e0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2202      	movs	r2, #2
 800d35e:	761a      	strb	r2, [r3, #24]
      break;
 800d360:	e139      	b.n	800d5d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	795b      	ldrb	r3, [r3, #5]
 800d366:	4619      	mov	r1, r3
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 fd21 	bl	800ddb0 <USBH_LL_GetURBState>
 800d36e:	4603      	mov	r3, r0
 800d370:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d372:	7bbb      	ldrb	r3, [r7, #14]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d11e      	bne.n	800d3b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	7c1b      	ldrb	r3, [r3, #16]
 800d37c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d380:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	8adb      	ldrh	r3, [r3, #22]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00a      	beq.n	800d3a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d38a:	7b7b      	ldrb	r3, [r7, #13]
 800d38c:	2b80      	cmp	r3, #128	@ 0x80
 800d38e:	d103      	bne.n	800d398 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2203      	movs	r2, #3
 800d394:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d396:	e115      	b.n	800d5c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2205      	movs	r2, #5
 800d39c:	761a      	strb	r2, [r3, #24]
      break;
 800d39e:	e111      	b.n	800d5c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d3a0:	7b7b      	ldrb	r3, [r7, #13]
 800d3a2:	2b80      	cmp	r3, #128	@ 0x80
 800d3a4:	d103      	bne.n	800d3ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2209      	movs	r2, #9
 800d3aa:	761a      	strb	r2, [r3, #24]
      break;
 800d3ac:	e10a      	b.n	800d5c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2207      	movs	r2, #7
 800d3b2:	761a      	strb	r2, [r3, #24]
      break;
 800d3b4:	e106      	b.n	800d5c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d3b6:	7bbb      	ldrb	r3, [r7, #14]
 800d3b8:	2b04      	cmp	r3, #4
 800d3ba:	d003      	beq.n	800d3c4 <USBH_HandleControl+0xcc>
 800d3bc:	7bbb      	ldrb	r3, [r7, #14]
 800d3be:	2b02      	cmp	r3, #2
 800d3c0:	f040 8100 	bne.w	800d5c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	220b      	movs	r2, #11
 800d3c8:	761a      	strb	r2, [r3, #24]
      break;
 800d3ca:	e0fb      	b.n	800d5c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6899      	ldr	r1, [r3, #8]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	899a      	ldrh	r2, [r3, #12]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	791b      	ldrb	r3, [r3, #4]
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 f93a 	bl	800d65e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2204      	movs	r2, #4
 800d3ee:	761a      	strb	r2, [r3, #24]
      break;
 800d3f0:	e0f1      	b.n	800d5d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	791b      	ldrb	r3, [r3, #4]
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 fcd9 	bl	800ddb0 <USBH_LL_GetURBState>
 800d3fe:	4603      	mov	r3, r0
 800d400:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d402:	7bbb      	ldrb	r3, [r7, #14]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d102      	bne.n	800d40e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2209      	movs	r2, #9
 800d40c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d40e:	7bbb      	ldrb	r3, [r7, #14]
 800d410:	2b05      	cmp	r3, #5
 800d412:	d102      	bne.n	800d41a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d414:	2303      	movs	r3, #3
 800d416:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d418:	e0d6      	b.n	800d5c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d41a:	7bbb      	ldrb	r3, [r7, #14]
 800d41c:	2b04      	cmp	r3, #4
 800d41e:	f040 80d3 	bne.w	800d5c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	220b      	movs	r2, #11
 800d426:	761a      	strb	r2, [r3, #24]
      break;
 800d428:	e0ce      	b.n	800d5c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6899      	ldr	r1, [r3, #8]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	899a      	ldrh	r2, [r3, #12]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	795b      	ldrb	r3, [r3, #5]
 800d436:	2001      	movs	r0, #1
 800d438:	9000      	str	r0, [sp, #0]
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 f8ea 	bl	800d614 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d446:	b29a      	uxth	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2206      	movs	r2, #6
 800d450:	761a      	strb	r2, [r3, #24]
      break;
 800d452:	e0c0      	b.n	800d5d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	795b      	ldrb	r3, [r3, #5]
 800d458:	4619      	mov	r1, r3
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fca8 	bl	800ddb0 <USBH_LL_GetURBState>
 800d460:	4603      	mov	r3, r0
 800d462:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d464:	7bbb      	ldrb	r3, [r7, #14]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d103      	bne.n	800d472 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2207      	movs	r2, #7
 800d46e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d470:	e0ac      	b.n	800d5cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d472:	7bbb      	ldrb	r3, [r7, #14]
 800d474:	2b05      	cmp	r3, #5
 800d476:	d105      	bne.n	800d484 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	220c      	movs	r2, #12
 800d47c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d47e:	2303      	movs	r3, #3
 800d480:	73fb      	strb	r3, [r7, #15]
      break;
 800d482:	e0a3      	b.n	800d5cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d484:	7bbb      	ldrb	r3, [r7, #14]
 800d486:	2b02      	cmp	r3, #2
 800d488:	d103      	bne.n	800d492 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2205      	movs	r2, #5
 800d48e:	761a      	strb	r2, [r3, #24]
      break;
 800d490:	e09c      	b.n	800d5cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d492:	7bbb      	ldrb	r3, [r7, #14]
 800d494:	2b04      	cmp	r3, #4
 800d496:	f040 8099 	bne.w	800d5cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	220b      	movs	r2, #11
 800d49e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d4a0:	2302      	movs	r3, #2
 800d4a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d4a4:	e092      	b.n	800d5cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	791b      	ldrb	r3, [r3, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f8d5 	bl	800d65e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2208      	movs	r2, #8
 800d4c4:	761a      	strb	r2, [r3, #24]

      break;
 800d4c6:	e086      	b.n	800d5d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	791b      	ldrb	r3, [r3, #4]
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 fc6e 	bl	800ddb0 <USBH_LL_GetURBState>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d4d8:	7bbb      	ldrb	r3, [r7, #14]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d105      	bne.n	800d4ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	220d      	movs	r2, #13
 800d4e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d4e8:	e072      	b.n	800d5d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d4ea:	7bbb      	ldrb	r3, [r7, #14]
 800d4ec:	2b04      	cmp	r3, #4
 800d4ee:	d103      	bne.n	800d4f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	220b      	movs	r2, #11
 800d4f4:	761a      	strb	r2, [r3, #24]
      break;
 800d4f6:	e06b      	b.n	800d5d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d4f8:	7bbb      	ldrb	r3, [r7, #14]
 800d4fa:	2b05      	cmp	r3, #5
 800d4fc:	d168      	bne.n	800d5d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d4fe:	2303      	movs	r3, #3
 800d500:	73fb      	strb	r3, [r7, #15]
      break;
 800d502:	e065      	b.n	800d5d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	795b      	ldrb	r3, [r3, #5]
 800d508:	2201      	movs	r2, #1
 800d50a:	9200      	str	r2, [sp, #0]
 800d50c:	2200      	movs	r2, #0
 800d50e:	2100      	movs	r1, #0
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f87f 	bl	800d614 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	220a      	movs	r2, #10
 800d526:	761a      	strb	r2, [r3, #24]
      break;
 800d528:	e055      	b.n	800d5d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	795b      	ldrb	r3, [r3, #5]
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 fc3d 	bl	800ddb0 <USBH_LL_GetURBState>
 800d536:	4603      	mov	r3, r0
 800d538:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d53a:	7bbb      	ldrb	r3, [r7, #14]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d105      	bne.n	800d54c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d540:	2300      	movs	r3, #0
 800d542:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	220d      	movs	r2, #13
 800d548:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d54a:	e043      	b.n	800d5d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d54c:	7bbb      	ldrb	r3, [r7, #14]
 800d54e:	2b02      	cmp	r3, #2
 800d550:	d103      	bne.n	800d55a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2209      	movs	r2, #9
 800d556:	761a      	strb	r2, [r3, #24]
      break;
 800d558:	e03c      	b.n	800d5d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d55a:	7bbb      	ldrb	r3, [r7, #14]
 800d55c:	2b04      	cmp	r3, #4
 800d55e:	d139      	bne.n	800d5d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	220b      	movs	r2, #11
 800d564:	761a      	strb	r2, [r3, #24]
      break;
 800d566:	e035      	b.n	800d5d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	7e5b      	ldrb	r3, [r3, #25]
 800d56c:	3301      	adds	r3, #1
 800d56e:	b2da      	uxtb	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	765a      	strb	r2, [r3, #25]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	7e5b      	ldrb	r3, [r3, #25]
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d806      	bhi.n	800d58a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2201      	movs	r2, #1
 800d586:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d588:	e025      	b.n	800d5d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d590:	2106      	movs	r1, #6
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	795b      	ldrb	r3, [r3, #5]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 f90c 	bl	800d7c0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	791b      	ldrb	r3, [r3, #4]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f906 	bl	800d7c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d5ba:	2302      	movs	r3, #2
 800d5bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d5be:	e00a      	b.n	800d5d6 <USBH_HandleControl+0x2de>

    default:
      break;
 800d5c0:	bf00      	nop
 800d5c2:	e008      	b.n	800d5d6 <USBH_HandleControl+0x2de>
      break;
 800d5c4:	bf00      	nop
 800d5c6:	e006      	b.n	800d5d6 <USBH_HandleControl+0x2de>
      break;
 800d5c8:	bf00      	nop
 800d5ca:	e004      	b.n	800d5d6 <USBH_HandleControl+0x2de>
      break;
 800d5cc:	bf00      	nop
 800d5ce:	e002      	b.n	800d5d6 <USBH_HandleControl+0x2de>
      break;
 800d5d0:	bf00      	nop
 800d5d2:	e000      	b.n	800d5d6 <USBH_HandleControl+0x2de>
      break;
 800d5d4:	bf00      	nop
  }

  return status;
 800d5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b088      	sub	sp, #32
 800d5e4:	af04      	add	r7, sp, #16
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d5ee:	79f9      	ldrb	r1, [r7, #7]
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	9303      	str	r3, [sp, #12]
 800d5f4:	2308      	movs	r3, #8
 800d5f6:	9302      	str	r3, [sp, #8]
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	9301      	str	r3, [sp, #4]
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	2300      	movs	r3, #0
 800d602:	2200      	movs	r2, #0
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 fba2 	bl	800dd4e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b088      	sub	sp, #32
 800d618:	af04      	add	r7, sp, #16
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	4611      	mov	r1, r2
 800d620:	461a      	mov	r2, r3
 800d622:	460b      	mov	r3, r1
 800d624:	80fb      	strh	r3, [r7, #6]
 800d626:	4613      	mov	r3, r2
 800d628:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d630:	2b00      	cmp	r3, #0
 800d632:	d001      	beq.n	800d638 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d634:	2300      	movs	r3, #0
 800d636:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d638:	7979      	ldrb	r1, [r7, #5]
 800d63a:	7e3b      	ldrb	r3, [r7, #24]
 800d63c:	9303      	str	r3, [sp, #12]
 800d63e:	88fb      	ldrh	r3, [r7, #6]
 800d640:	9302      	str	r3, [sp, #8]
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	9301      	str	r3, [sp, #4]
 800d646:	2301      	movs	r3, #1
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	2300      	movs	r3, #0
 800d64c:	2200      	movs	r2, #0
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f000 fb7d 	bl	800dd4e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b088      	sub	sp, #32
 800d662:	af04      	add	r7, sp, #16
 800d664:	60f8      	str	r0, [r7, #12]
 800d666:	60b9      	str	r1, [r7, #8]
 800d668:	4611      	mov	r1, r2
 800d66a:	461a      	mov	r2, r3
 800d66c:	460b      	mov	r3, r1
 800d66e:	80fb      	strh	r3, [r7, #6]
 800d670:	4613      	mov	r3, r2
 800d672:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d674:	7979      	ldrb	r1, [r7, #5]
 800d676:	2300      	movs	r3, #0
 800d678:	9303      	str	r3, [sp, #12]
 800d67a:	88fb      	ldrh	r3, [r7, #6]
 800d67c:	9302      	str	r3, [sp, #8]
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	9301      	str	r3, [sp, #4]
 800d682:	2301      	movs	r3, #1
 800d684:	9300      	str	r3, [sp, #0]
 800d686:	2300      	movs	r3, #0
 800d688:	2201      	movs	r2, #1
 800d68a:	68f8      	ldr	r0, [r7, #12]
 800d68c:	f000 fb5f 	bl	800dd4e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d690:	2300      	movs	r3, #0

}
 800d692:	4618      	mov	r0, r3
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b088      	sub	sp, #32
 800d69e:	af04      	add	r7, sp, #16
 800d6a0:	60f8      	str	r0, [r7, #12]
 800d6a2:	60b9      	str	r1, [r7, #8]
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	80fb      	strh	r3, [r7, #6]
 800d6ac:	4613      	mov	r3, r2
 800d6ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d6be:	7979      	ldrb	r1, [r7, #5]
 800d6c0:	7e3b      	ldrb	r3, [r7, #24]
 800d6c2:	9303      	str	r3, [sp, #12]
 800d6c4:	88fb      	ldrh	r3, [r7, #6]
 800d6c6:	9302      	str	r3, [sp, #8]
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	9301      	str	r3, [sp, #4]
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	2302      	movs	r3, #2
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f000 fb3a 	bl	800dd4e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d6da:	2300      	movs	r3, #0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3710      	adds	r7, #16
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b088      	sub	sp, #32
 800d6e8:	af04      	add	r7, sp, #16
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	4611      	mov	r1, r2
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	80fb      	strh	r3, [r7, #6]
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d6fa:	7979      	ldrb	r1, [r7, #5]
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9303      	str	r3, [sp, #12]
 800d700:	88fb      	ldrh	r3, [r7, #6]
 800d702:	9302      	str	r3, [sp, #8]
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	9301      	str	r3, [sp, #4]
 800d708:	2301      	movs	r3, #1
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	2302      	movs	r3, #2
 800d70e:	2201      	movs	r2, #1
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 fb1c 	bl	800dd4e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d716:	2300      	movs	r3, #0
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af04      	add	r7, sp, #16
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	4608      	mov	r0, r1
 800d72a:	4611      	mov	r1, r2
 800d72c:	461a      	mov	r2, r3
 800d72e:	4603      	mov	r3, r0
 800d730:	70fb      	strb	r3, [r7, #3]
 800d732:	460b      	mov	r3, r1
 800d734:	70bb      	strb	r3, [r7, #2]
 800d736:	4613      	mov	r3, r2
 800d738:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d73a:	7878      	ldrb	r0, [r7, #1]
 800d73c:	78ba      	ldrb	r2, [r7, #2]
 800d73e:	78f9      	ldrb	r1, [r7, #3]
 800d740:	8b3b      	ldrh	r3, [r7, #24]
 800d742:	9302      	str	r3, [sp, #8]
 800d744:	7d3b      	ldrb	r3, [r7, #20]
 800d746:	9301      	str	r3, [sp, #4]
 800d748:	7c3b      	ldrb	r3, [r7, #16]
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	4603      	mov	r3, r0
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 faaf 	bl	800dcb2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3708      	adds	r7, #8
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b082      	sub	sp, #8
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	460b      	mov	r3, r1
 800d768:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d76a:	78fb      	ldrb	r3, [r7, #3]
 800d76c:	4619      	mov	r1, r3
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 face 	bl	800dd10 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d77e:	b580      	push	{r7, lr}
 800d780:	b084      	sub	sp, #16
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
 800d786:	460b      	mov	r3, r1
 800d788:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f836 	bl	800d7fc <USBH_GetFreePipe>
 800d790:	4603      	mov	r3, r0
 800d792:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d794:	89fb      	ldrh	r3, [r7, #14]
 800d796:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d00a      	beq.n	800d7b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d79e:	78fa      	ldrb	r2, [r7, #3]
 800d7a0:	89fb      	ldrh	r3, [r7, #14]
 800d7a2:	f003 030f 	and.w	r3, r3, #15
 800d7a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d7aa:	6879      	ldr	r1, [r7, #4]
 800d7ac:	33e0      	adds	r3, #224	@ 0xe0
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	440b      	add	r3, r1
 800d7b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d7b4:	89fb      	ldrh	r3, [r7, #14]
 800d7b6:	b2db      	uxtb	r3, r3
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d7cc:	78fb      	ldrb	r3, [r7, #3]
 800d7ce:	2b0f      	cmp	r3, #15
 800d7d0:	d80d      	bhi.n	800d7ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d7d2:	78fb      	ldrb	r3, [r7, #3]
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	33e0      	adds	r3, #224	@ 0xe0
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	78fb      	ldrb	r3, [r7, #3]
 800d7e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d7e4:	6879      	ldr	r1, [r7, #4]
 800d7e6:	33e0      	adds	r3, #224	@ 0xe0
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	440b      	add	r3, r1
 800d7ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b085      	sub	sp, #20
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d804:	2300      	movs	r3, #0
 800d806:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d808:	2300      	movs	r3, #0
 800d80a:	73fb      	strb	r3, [r7, #15]
 800d80c:	e00f      	b.n	800d82e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d80e:	7bfb      	ldrb	r3, [r7, #15]
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	33e0      	adds	r3, #224	@ 0xe0
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	4413      	add	r3, r2
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d102      	bne.n	800d828 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d822:	7bfb      	ldrb	r3, [r7, #15]
 800d824:	b29b      	uxth	r3, r3
 800d826:	e007      	b.n	800d838 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d828:	7bfb      	ldrb	r3, [r7, #15]
 800d82a:	3301      	adds	r3, #1
 800d82c:	73fb      	strb	r3, [r7, #15]
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
 800d830:	2b0f      	cmp	r3, #15
 800d832:	d9ec      	bls.n	800d80e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d834:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3714      	adds	r7, #20
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d844:	b480      	push	{r7}
 800d846:	b087      	sub	sp, #28
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	4613      	mov	r3, r2
 800d850:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d852:	2301      	movs	r3, #1
 800d854:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d856:	2300      	movs	r3, #0
 800d858:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d85a:	4b1f      	ldr	r3, [pc, #124]	@ (800d8d8 <FATFS_LinkDriverEx+0x94>)
 800d85c:	7a5b      	ldrb	r3, [r3, #9]
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	2b00      	cmp	r3, #0
 800d862:	d131      	bne.n	800d8c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d864:	4b1c      	ldr	r3, [pc, #112]	@ (800d8d8 <FATFS_LinkDriverEx+0x94>)
 800d866:	7a5b      	ldrb	r3, [r3, #9]
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	461a      	mov	r2, r3
 800d86c:	4b1a      	ldr	r3, [pc, #104]	@ (800d8d8 <FATFS_LinkDriverEx+0x94>)
 800d86e:	2100      	movs	r1, #0
 800d870:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d872:	4b19      	ldr	r3, [pc, #100]	@ (800d8d8 <FATFS_LinkDriverEx+0x94>)
 800d874:	7a5b      	ldrb	r3, [r3, #9]
 800d876:	b2db      	uxtb	r3, r3
 800d878:	4a17      	ldr	r2, [pc, #92]	@ (800d8d8 <FATFS_LinkDriverEx+0x94>)
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	4413      	add	r3, r2
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d882:	4b15      	ldr	r3, [pc, #84]	@ (800d8d8 <FATFS_LinkDriverEx+0x94>)
 800d884:	7a5b      	ldrb	r3, [r3, #9]
 800d886:	b2db      	uxtb	r3, r3
 800d888:	461a      	mov	r2, r3
 800d88a:	4b13      	ldr	r3, [pc, #76]	@ (800d8d8 <FATFS_LinkDriverEx+0x94>)
 800d88c:	4413      	add	r3, r2
 800d88e:	79fa      	ldrb	r2, [r7, #7]
 800d890:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d892:	4b11      	ldr	r3, [pc, #68]	@ (800d8d8 <FATFS_LinkDriverEx+0x94>)
 800d894:	7a5b      	ldrb	r3, [r3, #9]
 800d896:	b2db      	uxtb	r3, r3
 800d898:	1c5a      	adds	r2, r3, #1
 800d89a:	b2d1      	uxtb	r1, r2
 800d89c:	4a0e      	ldr	r2, [pc, #56]	@ (800d8d8 <FATFS_LinkDriverEx+0x94>)
 800d89e:	7251      	strb	r1, [r2, #9]
 800d8a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d8a2:	7dbb      	ldrb	r3, [r7, #22]
 800d8a4:	3330      	adds	r3, #48	@ 0x30
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	223a      	movs	r2, #58	@ 0x3a
 800d8b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	3302      	adds	r3, #2
 800d8b8:	222f      	movs	r2, #47	@ 0x2f
 800d8ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	3303      	adds	r3, #3
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	371c      	adds	r7, #28
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	20000510 	.word	0x20000510

0800d8dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	6839      	ldr	r1, [r7, #0]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7ff ffaa 	bl	800d844 <FATFS_LinkDriverEx>
 800d8f0:	4603      	mov	r3, r0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
	...

0800d8fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d900:	2201      	movs	r2, #1
 800d902:	490e      	ldr	r1, [pc, #56]	@ (800d93c <MX_USB_HOST_Init+0x40>)
 800d904:	480e      	ldr	r0, [pc, #56]	@ (800d940 <MX_USB_HOST_Init+0x44>)
 800d906:	f7fe fab9 	bl	800be7c <USBH_Init>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d001      	beq.n	800d914 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d910:	f7f3 fc2e 	bl	8001170 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d914:	490b      	ldr	r1, [pc, #44]	@ (800d944 <MX_USB_HOST_Init+0x48>)
 800d916:	480a      	ldr	r0, [pc, #40]	@ (800d940 <MX_USB_HOST_Init+0x44>)
 800d918:	f7fe fb5d 	bl	800bfd6 <USBH_RegisterClass>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d001      	beq.n	800d926 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d922:	f7f3 fc25 	bl	8001170 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d926:	4806      	ldr	r0, [pc, #24]	@ (800d940 <MX_USB_HOST_Init+0x44>)
 800d928:	f7fe fbe1 	bl	800c0ee <USBH_Start>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d001      	beq.n	800d936 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d932:	f7f3 fc1d 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d936:	bf00      	nop
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	0800d95d 	.word	0x0800d95d
 800d940:	2000051c 	.word	0x2000051c
 800d944:	2000000c 	.word	0x2000000c

0800d948 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d94c:	4802      	ldr	r0, [pc, #8]	@ (800d958 <MX_USB_HOST_Process+0x10>)
 800d94e:	f7fe fbdf 	bl	800c110 <USBH_Process>
}
 800d952:	bf00      	nop
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	2000051c 	.word	0x2000051c

0800d95c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	460b      	mov	r3, r1
 800d966:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d968:	78fb      	ldrb	r3, [r7, #3]
 800d96a:	3b01      	subs	r3, #1
 800d96c:	2b04      	cmp	r3, #4
 800d96e:	d819      	bhi.n	800d9a4 <USBH_UserProcess+0x48>
 800d970:	a201      	add	r2, pc, #4	@ (adr r2, 800d978 <USBH_UserProcess+0x1c>)
 800d972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d976:	bf00      	nop
 800d978:	0800d9a5 	.word	0x0800d9a5
 800d97c:	0800d995 	.word	0x0800d995
 800d980:	0800d9a5 	.word	0x0800d9a5
 800d984:	0800d99d 	.word	0x0800d99d
 800d988:	0800d98d 	.word	0x0800d98d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d98c:	4b09      	ldr	r3, [pc, #36]	@ (800d9b4 <USBH_UserProcess+0x58>)
 800d98e:	2203      	movs	r2, #3
 800d990:	701a      	strb	r2, [r3, #0]
  break;
 800d992:	e008      	b.n	800d9a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d994:	4b07      	ldr	r3, [pc, #28]	@ (800d9b4 <USBH_UserProcess+0x58>)
 800d996:	2202      	movs	r2, #2
 800d998:	701a      	strb	r2, [r3, #0]
  break;
 800d99a:	e004      	b.n	800d9a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d99c:	4b05      	ldr	r3, [pc, #20]	@ (800d9b4 <USBH_UserProcess+0x58>)
 800d99e:	2201      	movs	r2, #1
 800d9a0:	701a      	strb	r2, [r3, #0]
  break;
 800d9a2:	e000      	b.n	800d9a6 <USBH_UserProcess+0x4a>

  default:
  break;
 800d9a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d9a6:	bf00      	nop
 800d9a8:	370c      	adds	r7, #12
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	200008f4 	.word	0x200008f4

0800d9b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08a      	sub	sp, #40	@ 0x28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9c0:	f107 0314 	add.w	r3, r7, #20
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	601a      	str	r2, [r3, #0]
 800d9c8:	605a      	str	r2, [r3, #4]
 800d9ca:	609a      	str	r2, [r3, #8]
 800d9cc:	60da      	str	r2, [r3, #12]
 800d9ce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d9d8:	d147      	bne.n	800da6a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9da:	2300      	movs	r3, #0
 800d9dc:	613b      	str	r3, [r7, #16]
 800d9de:	4b25      	ldr	r3, [pc, #148]	@ (800da74 <HAL_HCD_MspInit+0xbc>)
 800d9e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9e2:	4a24      	ldr	r2, [pc, #144]	@ (800da74 <HAL_HCD_MspInit+0xbc>)
 800d9e4:	f043 0301 	orr.w	r3, r3, #1
 800d9e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d9ea:	4b22      	ldr	r3, [pc, #136]	@ (800da74 <HAL_HCD_MspInit+0xbc>)
 800d9ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ee:	f003 0301 	and.w	r3, r3, #1
 800d9f2:	613b      	str	r3, [r7, #16]
 800d9f4:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 800d9f6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800d9fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9fc:	2302      	movs	r3, #2
 800d9fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da00:	2300      	movs	r3, #0
 800da02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da04:	2303      	movs	r3, #3
 800da06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800da08:	230a      	movs	r3, #10
 800da0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da0c:	f107 0314 	add.w	r3, r7, #20
 800da10:	4619      	mov	r1, r3
 800da12:	4819      	ldr	r0, [pc, #100]	@ (800da78 <HAL_HCD_MspInit+0xc0>)
 800da14:	f7f5 fa56 	bl	8002ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 800da18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da1e:	2302      	movs	r3, #2
 800da20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da22:	2300      	movs	r3, #0
 800da24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 800da26:	f107 0314 	add.w	r3, r7, #20
 800da2a:	4619      	mov	r1, r3
 800da2c:	4812      	ldr	r0, [pc, #72]	@ (800da78 <HAL_HCD_MspInit+0xc0>)
 800da2e:	f7f5 fa49 	bl	8002ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da32:	4b10      	ldr	r3, [pc, #64]	@ (800da74 <HAL_HCD_MspInit+0xbc>)
 800da34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da36:	4a0f      	ldr	r2, [pc, #60]	@ (800da74 <HAL_HCD_MspInit+0xbc>)
 800da38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da3c:	6353      	str	r3, [r2, #52]	@ 0x34
 800da3e:	2300      	movs	r3, #0
 800da40:	60fb      	str	r3, [r7, #12]
 800da42:	4b0c      	ldr	r3, [pc, #48]	@ (800da74 <HAL_HCD_MspInit+0xbc>)
 800da44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da46:	4a0b      	ldr	r2, [pc, #44]	@ (800da74 <HAL_HCD_MspInit+0xbc>)
 800da48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800da4c:	6453      	str	r3, [r2, #68]	@ 0x44
 800da4e:	4b09      	ldr	r3, [pc, #36]	@ (800da74 <HAL_HCD_MspInit+0xbc>)
 800da50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da56:	60fb      	str	r3, [r7, #12]
 800da58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800da5a:	2200      	movs	r2, #0
 800da5c:	2100      	movs	r1, #0
 800da5e:	2043      	movs	r0, #67	@ 0x43
 800da60:	f7f4 f9f6 	bl	8001e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da64:	2043      	movs	r0, #67	@ 0x43
 800da66:	f7f4 fa0f 	bl	8001e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da6a:	bf00      	nop
 800da6c:	3728      	adds	r7, #40	@ 0x28
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	40023800 	.word	0x40023800
 800da78:	40020000 	.word	0x40020000

0800da7c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7fe ff17 	bl	800c8be <USBH_LL_IncTimer>
}
 800da90:	bf00      	nop
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fe ff4f 	bl	800c94a <USBH_LL_Connect>
}
 800daac:	bf00      	nop
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fe ff58 	bl	800c978 <USBH_LL_Disconnect>
}
 800dac8:	bf00      	nop
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	460b      	mov	r3, r1
 800dada:	70fb      	strb	r3, [r7, #3]
 800dadc:	4613      	mov	r3, r2
 800dade:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dae0:	bf00      	nop
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fe ff09 	bl	800c912 <USBH_LL_PortEnabled>
}
 800db00:	bf00      	nop
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800db16:	4618      	mov	r0, r3
 800db18:	f7fe ff09 	bl	800c92e <USBH_LL_PortDisabled>
}
 800db1c:	bf00      	nop
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800db32:	2b01      	cmp	r3, #1
 800db34:	d12a      	bne.n	800db8c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800db36:	4a18      	ldr	r2, [pc, #96]	@ (800db98 <USBH_LL_Init+0x74>)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	4a15      	ldr	r2, [pc, #84]	@ (800db98 <USBH_LL_Init+0x74>)
 800db42:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800db46:	4b14      	ldr	r3, [pc, #80]	@ (800db98 <USBH_LL_Init+0x74>)
 800db48:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800db4c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800db4e:	4b12      	ldr	r3, [pc, #72]	@ (800db98 <USBH_LL_Init+0x74>)
 800db50:	2208      	movs	r2, #8
 800db52:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800db54:	4b10      	ldr	r3, [pc, #64]	@ (800db98 <USBH_LL_Init+0x74>)
 800db56:	2201      	movs	r2, #1
 800db58:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800db5a:	4b0f      	ldr	r3, [pc, #60]	@ (800db98 <USBH_LL_Init+0x74>)
 800db5c:	2200      	movs	r2, #0
 800db5e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800db60:	4b0d      	ldr	r3, [pc, #52]	@ (800db98 <USBH_LL_Init+0x74>)
 800db62:	2202      	movs	r2, #2
 800db64:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800db66:	4b0c      	ldr	r3, [pc, #48]	@ (800db98 <USBH_LL_Init+0x74>)
 800db68:	2200      	movs	r2, #0
 800db6a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800db6c:	480a      	ldr	r0, [pc, #40]	@ (800db98 <USBH_LL_Init+0x74>)
 800db6e:	f7f5 fb86 	bl	800327e <HAL_HCD_Init>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d001      	beq.n	800db7c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800db78:	f7f3 fafa 	bl	8001170 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800db7c:	4806      	ldr	r0, [pc, #24]	@ (800db98 <USBH_LL_Init+0x74>)
 800db7e:	f7f5 ffe7 	bl	8003b50 <HAL_HCD_GetCurrentFrame>
 800db82:	4603      	mov	r3, r0
 800db84:	4619      	mov	r1, r3
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7fe fe8a 	bl	800c8a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	200008f8 	.word	0x200008f8

0800db9c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dba4:	2300      	movs	r3, #0
 800dba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7f5 ff54 	bl	8003a60 <HAL_HCD_Start>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbbc:	7bfb      	ldrb	r3, [r7, #15]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 f95e 	bl	800de80 <USBH_Get_USB_Status>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7f5 ff5c 	bl	8003aa6 <HAL_HCD_Stop>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbf2:	7bfb      	ldrb	r3, [r7, #15]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f000 f943 	bl	800de80 <USBH_Get_USB_Status>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dc10:	2301      	movs	r3, #1
 800dc12:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7f5 ffa6 	bl	8003b6c <HAL_HCD_GetCurrentSpeed>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	d00c      	beq.n	800dc40 <USBH_LL_GetSpeed+0x38>
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	d80d      	bhi.n	800dc46 <USBH_LL_GetSpeed+0x3e>
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d002      	beq.n	800dc34 <USBH_LL_GetSpeed+0x2c>
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d003      	beq.n	800dc3a <USBH_LL_GetSpeed+0x32>
 800dc32:	e008      	b.n	800dc46 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dc34:	2300      	movs	r3, #0
 800dc36:	73fb      	strb	r3, [r7, #15]
    break;
 800dc38:	e008      	b.n	800dc4c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	73fb      	strb	r3, [r7, #15]
    break;
 800dc3e:	e005      	b.n	800dc4c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dc40:	2302      	movs	r3, #2
 800dc42:	73fb      	strb	r3, [r7, #15]
    break;
 800dc44:	e002      	b.n	800dc4c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dc46:	2301      	movs	r3, #1
 800dc48:	73fb      	strb	r3, [r7, #15]
    break;
 800dc4a:	bf00      	nop
  }
  return  speed;
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b084      	sub	sp, #16
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7f5 ff37 	bl	8003ae0 <HAL_HCD_ResetPort>
 800dc72:	4603      	mov	r3, r0
 800dc74:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc76:	7bfb      	ldrb	r3, [r7, #15]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f000 f901 	bl	800de80 <USBH_Get_USB_Status>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc82:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	460b      	mov	r3, r1
 800dc96:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dc9e:	78fa      	ldrb	r2, [r7, #3]
 800dca0:	4611      	mov	r1, r2
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7f5 ff3f 	bl	8003b26 <HAL_HCD_HC_GetXferCount>
 800dca8:	4603      	mov	r3, r0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dcb2:	b590      	push	{r4, r7, lr}
 800dcb4:	b089      	sub	sp, #36	@ 0x24
 800dcb6:	af04      	add	r7, sp, #16
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	4608      	mov	r0, r1
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	70fb      	strb	r3, [r7, #3]
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	70bb      	strb	r3, [r7, #2]
 800dcc8:	4613      	mov	r3, r2
 800dcca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800dcda:	787c      	ldrb	r4, [r7, #1]
 800dcdc:	78ba      	ldrb	r2, [r7, #2]
 800dcde:	78f9      	ldrb	r1, [r7, #3]
 800dce0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dce2:	9302      	str	r3, [sp, #8]
 800dce4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	4623      	mov	r3, r4
 800dcf2:	f7f5 fb2b 	bl	800334c <HAL_HCD_HC_Init>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 f8bf 	bl	800de80 <USBH_Get_USB_Status>
 800dd02:	4603      	mov	r3, r0
 800dd04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd06:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3714      	adds	r7, #20
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd90      	pop	{r4, r7, pc}

0800dd10 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd20:	2300      	movs	r3, #0
 800dd22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dd2a:	78fa      	ldrb	r2, [r7, #3]
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7f5 fbc4 	bl	80034bc <HAL_HCD_HC_Halt>
 800dd34:	4603      	mov	r3, r0
 800dd36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dd38:	7bfb      	ldrb	r3, [r7, #15]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f000 f8a0 	bl	800de80 <USBH_Get_USB_Status>
 800dd40:	4603      	mov	r3, r0
 800dd42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd44:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3710      	adds	r7, #16
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dd4e:	b590      	push	{r4, r7, lr}
 800dd50:	b089      	sub	sp, #36	@ 0x24
 800dd52:	af04      	add	r7, sp, #16
 800dd54:	6078      	str	r0, [r7, #4]
 800dd56:	4608      	mov	r0, r1
 800dd58:	4611      	mov	r1, r2
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	70fb      	strb	r3, [r7, #3]
 800dd60:	460b      	mov	r3, r1
 800dd62:	70bb      	strb	r3, [r7, #2]
 800dd64:	4613      	mov	r3, r2
 800dd66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800dd76:	787c      	ldrb	r4, [r7, #1]
 800dd78:	78ba      	ldrb	r2, [r7, #2]
 800dd7a:	78f9      	ldrb	r1, [r7, #3]
 800dd7c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dd80:	9303      	str	r3, [sp, #12]
 800dd82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dd84:	9302      	str	r3, [sp, #8]
 800dd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd88:	9301      	str	r3, [sp, #4]
 800dd8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	4623      	mov	r3, r4
 800dd92:	f7f5 fbb7 	bl	8003504 <HAL_HCD_HC_SubmitRequest>
 800dd96:	4603      	mov	r3, r0
 800dd98:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dd9a:	7bfb      	ldrb	r3, [r7, #15]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f000 f86f 	bl	800de80 <USBH_Get_USB_Status>
 800dda2:	4603      	mov	r3, r0
 800dda4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dda6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3714      	adds	r7, #20
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd90      	pop	{r4, r7, pc}

0800ddb0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ddc2:	78fa      	ldrb	r2, [r7, #3]
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7f5 fe98 	bl	8003afc <HAL_HCD_HC_GetURBState>
 800ddcc:	4603      	mov	r3, r0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3708      	adds	r7, #8
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b082      	sub	sp, #8
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
 800ddde:	460b      	mov	r3, r1
 800dde0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d103      	bne.n	800ddf4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ddec:	78fb      	ldrb	r3, [r7, #3]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f000 f872 	bl	800ded8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ddf4:	20c8      	movs	r0, #200	@ 0xc8
 800ddf6:	f7f3 ff4f 	bl	8001c98 <HAL_Delay>
  return USBH_OK;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	460b      	mov	r3, r1
 800de0e:	70fb      	strb	r3, [r7, #3]
 800de10:	4613      	mov	r3, r2
 800de12:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800de1a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800de1c:	78fa      	ldrb	r2, [r7, #3]
 800de1e:	68f9      	ldr	r1, [r7, #12]
 800de20:	4613      	mov	r3, r2
 800de22:	011b      	lsls	r3, r3, #4
 800de24:	1a9b      	subs	r3, r3, r2
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	440b      	add	r3, r1
 800de2a:	3317      	adds	r3, #23
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d00a      	beq.n	800de48 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800de32:	78fa      	ldrb	r2, [r7, #3]
 800de34:	68f9      	ldr	r1, [r7, #12]
 800de36:	4613      	mov	r3, r2
 800de38:	011b      	lsls	r3, r3, #4
 800de3a:	1a9b      	subs	r3, r3, r2
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	440b      	add	r3, r1
 800de40:	333c      	adds	r3, #60	@ 0x3c
 800de42:	78ba      	ldrb	r2, [r7, #2]
 800de44:	701a      	strb	r2, [r3, #0]
 800de46:	e009      	b.n	800de5c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800de48:	78fa      	ldrb	r2, [r7, #3]
 800de4a:	68f9      	ldr	r1, [r7, #12]
 800de4c:	4613      	mov	r3, r2
 800de4e:	011b      	lsls	r3, r3, #4
 800de50:	1a9b      	subs	r3, r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	440b      	add	r3, r1
 800de56:	333d      	adds	r3, #61	@ 0x3d
 800de58:	78ba      	ldrb	r2, [r7, #2]
 800de5a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800de5c:	2300      	movs	r3, #0
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3714      	adds	r7, #20
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr

0800de6a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800de6a:	b580      	push	{r7, lr}
 800de6c:	b082      	sub	sp, #8
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7f3 ff10 	bl	8001c98 <HAL_Delay>
}
 800de78:	bf00      	nop
 800de7a:	3708      	adds	r7, #8
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	4603      	mov	r3, r0
 800de88:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800de8e:	79fb      	ldrb	r3, [r7, #7]
 800de90:	2b03      	cmp	r3, #3
 800de92:	d817      	bhi.n	800dec4 <USBH_Get_USB_Status+0x44>
 800de94:	a201      	add	r2, pc, #4	@ (adr r2, 800de9c <USBH_Get_USB_Status+0x1c>)
 800de96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9a:	bf00      	nop
 800de9c:	0800dead 	.word	0x0800dead
 800dea0:	0800deb3 	.word	0x0800deb3
 800dea4:	0800deb9 	.word	0x0800deb9
 800dea8:	0800debf 	.word	0x0800debf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800deac:	2300      	movs	r3, #0
 800deae:	73fb      	strb	r3, [r7, #15]
    break;
 800deb0:	e00b      	b.n	800deca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800deb2:	2302      	movs	r3, #2
 800deb4:	73fb      	strb	r3, [r7, #15]
    break;
 800deb6:	e008      	b.n	800deca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800deb8:	2301      	movs	r3, #1
 800deba:	73fb      	strb	r3, [r7, #15]
    break;
 800debc:	e005      	b.n	800deca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800debe:	2302      	movs	r3, #2
 800dec0:	73fb      	strb	r3, [r7, #15]
    break;
 800dec2:	e002      	b.n	800deca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dec4:	2302      	movs	r3, #2
 800dec6:	73fb      	strb	r3, [r7, #15]
    break;
 800dec8:	bf00      	nop
  }
  return usb_status;
 800deca:	7bfb      	ldrb	r3, [r7, #15]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	4603      	mov	r3, r0
 800dee0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800dee2:	79fb      	ldrb	r3, [r7, #7]
 800dee4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800dee6:	79fb      	ldrb	r3, [r7, #7]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800deec:	2300      	movs	r3, #0
 800deee:	73fb      	strb	r3, [r7, #15]
 800def0:	e001      	b.n	800def6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800def2:	2301      	movs	r3, #1
 800def4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 800def6:	7bfb      	ldrb	r3, [r7, #15]
 800def8:	461a      	mov	r2, r3
 800defa:	2104      	movs	r1, #4
 800defc:	4803      	ldr	r0, [pc, #12]	@ (800df0c <MX_DriverVbusFS+0x34>)
 800defe:	f7f5 f9a5 	bl	800324c <HAL_GPIO_WritePin>
}
 800df02:	bf00      	nop
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	40020400 	.word	0x40020400

0800df10 <malloc>:
 800df10:	4b02      	ldr	r3, [pc, #8]	@ (800df1c <malloc+0xc>)
 800df12:	4601      	mov	r1, r0
 800df14:	6818      	ldr	r0, [r3, #0]
 800df16:	f000 b82d 	b.w	800df74 <_malloc_r>
 800df1a:	bf00      	nop
 800df1c:	2000002c 	.word	0x2000002c

0800df20 <free>:
 800df20:	4b02      	ldr	r3, [pc, #8]	@ (800df2c <free+0xc>)
 800df22:	4601      	mov	r1, r0
 800df24:	6818      	ldr	r0, [r3, #0]
 800df26:	f000 b8f5 	b.w	800e114 <_free_r>
 800df2a:	bf00      	nop
 800df2c:	2000002c 	.word	0x2000002c

0800df30 <sbrk_aligned>:
 800df30:	b570      	push	{r4, r5, r6, lr}
 800df32:	4e0f      	ldr	r6, [pc, #60]	@ (800df70 <sbrk_aligned+0x40>)
 800df34:	460c      	mov	r4, r1
 800df36:	6831      	ldr	r1, [r6, #0]
 800df38:	4605      	mov	r5, r0
 800df3a:	b911      	cbnz	r1, 800df42 <sbrk_aligned+0x12>
 800df3c:	f000 f8ae 	bl	800e09c <_sbrk_r>
 800df40:	6030      	str	r0, [r6, #0]
 800df42:	4621      	mov	r1, r4
 800df44:	4628      	mov	r0, r5
 800df46:	f000 f8a9 	bl	800e09c <_sbrk_r>
 800df4a:	1c43      	adds	r3, r0, #1
 800df4c:	d103      	bne.n	800df56 <sbrk_aligned+0x26>
 800df4e:	f04f 34ff 	mov.w	r4, #4294967295
 800df52:	4620      	mov	r0, r4
 800df54:	bd70      	pop	{r4, r5, r6, pc}
 800df56:	1cc4      	adds	r4, r0, #3
 800df58:	f024 0403 	bic.w	r4, r4, #3
 800df5c:	42a0      	cmp	r0, r4
 800df5e:	d0f8      	beq.n	800df52 <sbrk_aligned+0x22>
 800df60:	1a21      	subs	r1, r4, r0
 800df62:	4628      	mov	r0, r5
 800df64:	f000 f89a 	bl	800e09c <_sbrk_r>
 800df68:	3001      	adds	r0, #1
 800df6a:	d1f2      	bne.n	800df52 <sbrk_aligned+0x22>
 800df6c:	e7ef      	b.n	800df4e <sbrk_aligned+0x1e>
 800df6e:	bf00      	nop
 800df70:	20000cd8 	.word	0x20000cd8

0800df74 <_malloc_r>:
 800df74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df78:	1ccd      	adds	r5, r1, #3
 800df7a:	f025 0503 	bic.w	r5, r5, #3
 800df7e:	3508      	adds	r5, #8
 800df80:	2d0c      	cmp	r5, #12
 800df82:	bf38      	it	cc
 800df84:	250c      	movcc	r5, #12
 800df86:	2d00      	cmp	r5, #0
 800df88:	4606      	mov	r6, r0
 800df8a:	db01      	blt.n	800df90 <_malloc_r+0x1c>
 800df8c:	42a9      	cmp	r1, r5
 800df8e:	d904      	bls.n	800df9a <_malloc_r+0x26>
 800df90:	230c      	movs	r3, #12
 800df92:	6033      	str	r3, [r6, #0]
 800df94:	2000      	movs	r0, #0
 800df96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e070 <_malloc_r+0xfc>
 800df9e:	f000 f869 	bl	800e074 <__malloc_lock>
 800dfa2:	f8d8 3000 	ldr.w	r3, [r8]
 800dfa6:	461c      	mov	r4, r3
 800dfa8:	bb44      	cbnz	r4, 800dffc <_malloc_r+0x88>
 800dfaa:	4629      	mov	r1, r5
 800dfac:	4630      	mov	r0, r6
 800dfae:	f7ff ffbf 	bl	800df30 <sbrk_aligned>
 800dfb2:	1c43      	adds	r3, r0, #1
 800dfb4:	4604      	mov	r4, r0
 800dfb6:	d158      	bne.n	800e06a <_malloc_r+0xf6>
 800dfb8:	f8d8 4000 	ldr.w	r4, [r8]
 800dfbc:	4627      	mov	r7, r4
 800dfbe:	2f00      	cmp	r7, #0
 800dfc0:	d143      	bne.n	800e04a <_malloc_r+0xd6>
 800dfc2:	2c00      	cmp	r4, #0
 800dfc4:	d04b      	beq.n	800e05e <_malloc_r+0xea>
 800dfc6:	6823      	ldr	r3, [r4, #0]
 800dfc8:	4639      	mov	r1, r7
 800dfca:	4630      	mov	r0, r6
 800dfcc:	eb04 0903 	add.w	r9, r4, r3
 800dfd0:	f000 f864 	bl	800e09c <_sbrk_r>
 800dfd4:	4581      	cmp	r9, r0
 800dfd6:	d142      	bne.n	800e05e <_malloc_r+0xea>
 800dfd8:	6821      	ldr	r1, [r4, #0]
 800dfda:	1a6d      	subs	r5, r5, r1
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4630      	mov	r0, r6
 800dfe0:	f7ff ffa6 	bl	800df30 <sbrk_aligned>
 800dfe4:	3001      	adds	r0, #1
 800dfe6:	d03a      	beq.n	800e05e <_malloc_r+0xea>
 800dfe8:	6823      	ldr	r3, [r4, #0]
 800dfea:	442b      	add	r3, r5
 800dfec:	6023      	str	r3, [r4, #0]
 800dfee:	f8d8 3000 	ldr.w	r3, [r8]
 800dff2:	685a      	ldr	r2, [r3, #4]
 800dff4:	bb62      	cbnz	r2, 800e050 <_malloc_r+0xdc>
 800dff6:	f8c8 7000 	str.w	r7, [r8]
 800dffa:	e00f      	b.n	800e01c <_malloc_r+0xa8>
 800dffc:	6822      	ldr	r2, [r4, #0]
 800dffe:	1b52      	subs	r2, r2, r5
 800e000:	d420      	bmi.n	800e044 <_malloc_r+0xd0>
 800e002:	2a0b      	cmp	r2, #11
 800e004:	d917      	bls.n	800e036 <_malloc_r+0xc2>
 800e006:	1961      	adds	r1, r4, r5
 800e008:	42a3      	cmp	r3, r4
 800e00a:	6025      	str	r5, [r4, #0]
 800e00c:	bf18      	it	ne
 800e00e:	6059      	strne	r1, [r3, #4]
 800e010:	6863      	ldr	r3, [r4, #4]
 800e012:	bf08      	it	eq
 800e014:	f8c8 1000 	streq.w	r1, [r8]
 800e018:	5162      	str	r2, [r4, r5]
 800e01a:	604b      	str	r3, [r1, #4]
 800e01c:	4630      	mov	r0, r6
 800e01e:	f000 f82f 	bl	800e080 <__malloc_unlock>
 800e022:	f104 000b 	add.w	r0, r4, #11
 800e026:	1d23      	adds	r3, r4, #4
 800e028:	f020 0007 	bic.w	r0, r0, #7
 800e02c:	1ac2      	subs	r2, r0, r3
 800e02e:	bf1c      	itt	ne
 800e030:	1a1b      	subne	r3, r3, r0
 800e032:	50a3      	strne	r3, [r4, r2]
 800e034:	e7af      	b.n	800df96 <_malloc_r+0x22>
 800e036:	6862      	ldr	r2, [r4, #4]
 800e038:	42a3      	cmp	r3, r4
 800e03a:	bf0c      	ite	eq
 800e03c:	f8c8 2000 	streq.w	r2, [r8]
 800e040:	605a      	strne	r2, [r3, #4]
 800e042:	e7eb      	b.n	800e01c <_malloc_r+0xa8>
 800e044:	4623      	mov	r3, r4
 800e046:	6864      	ldr	r4, [r4, #4]
 800e048:	e7ae      	b.n	800dfa8 <_malloc_r+0x34>
 800e04a:	463c      	mov	r4, r7
 800e04c:	687f      	ldr	r7, [r7, #4]
 800e04e:	e7b6      	b.n	800dfbe <_malloc_r+0x4a>
 800e050:	461a      	mov	r2, r3
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	42a3      	cmp	r3, r4
 800e056:	d1fb      	bne.n	800e050 <_malloc_r+0xdc>
 800e058:	2300      	movs	r3, #0
 800e05a:	6053      	str	r3, [r2, #4]
 800e05c:	e7de      	b.n	800e01c <_malloc_r+0xa8>
 800e05e:	230c      	movs	r3, #12
 800e060:	6033      	str	r3, [r6, #0]
 800e062:	4630      	mov	r0, r6
 800e064:	f000 f80c 	bl	800e080 <__malloc_unlock>
 800e068:	e794      	b.n	800df94 <_malloc_r+0x20>
 800e06a:	6005      	str	r5, [r0, #0]
 800e06c:	e7d6      	b.n	800e01c <_malloc_r+0xa8>
 800e06e:	bf00      	nop
 800e070:	20000cdc 	.word	0x20000cdc

0800e074 <__malloc_lock>:
 800e074:	4801      	ldr	r0, [pc, #4]	@ (800e07c <__malloc_lock+0x8>)
 800e076:	f000 b84b 	b.w	800e110 <__retarget_lock_acquire_recursive>
 800e07a:	bf00      	nop
 800e07c:	20000e1c 	.word	0x20000e1c

0800e080 <__malloc_unlock>:
 800e080:	4801      	ldr	r0, [pc, #4]	@ (800e088 <__malloc_unlock+0x8>)
 800e082:	f000 b846 	b.w	800e112 <__retarget_lock_release_recursive>
 800e086:	bf00      	nop
 800e088:	20000e1c 	.word	0x20000e1c

0800e08c <memset>:
 800e08c:	4402      	add	r2, r0
 800e08e:	4603      	mov	r3, r0
 800e090:	4293      	cmp	r3, r2
 800e092:	d100      	bne.n	800e096 <memset+0xa>
 800e094:	4770      	bx	lr
 800e096:	f803 1b01 	strb.w	r1, [r3], #1
 800e09a:	e7f9      	b.n	800e090 <memset+0x4>

0800e09c <_sbrk_r>:
 800e09c:	b538      	push	{r3, r4, r5, lr}
 800e09e:	4d06      	ldr	r5, [pc, #24]	@ (800e0b8 <_sbrk_r+0x1c>)
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	4608      	mov	r0, r1
 800e0a6:	602b      	str	r3, [r5, #0]
 800e0a8:	f7f3 fd42 	bl	8001b30 <_sbrk>
 800e0ac:	1c43      	adds	r3, r0, #1
 800e0ae:	d102      	bne.n	800e0b6 <_sbrk_r+0x1a>
 800e0b0:	682b      	ldr	r3, [r5, #0]
 800e0b2:	b103      	cbz	r3, 800e0b6 <_sbrk_r+0x1a>
 800e0b4:	6023      	str	r3, [r4, #0]
 800e0b6:	bd38      	pop	{r3, r4, r5, pc}
 800e0b8:	20000e18 	.word	0x20000e18

0800e0bc <__errno>:
 800e0bc:	4b01      	ldr	r3, [pc, #4]	@ (800e0c4 <__errno+0x8>)
 800e0be:	6818      	ldr	r0, [r3, #0]
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	2000002c 	.word	0x2000002c

0800e0c8 <__libc_init_array>:
 800e0c8:	b570      	push	{r4, r5, r6, lr}
 800e0ca:	4d0d      	ldr	r5, [pc, #52]	@ (800e100 <__libc_init_array+0x38>)
 800e0cc:	4c0d      	ldr	r4, [pc, #52]	@ (800e104 <__libc_init_array+0x3c>)
 800e0ce:	1b64      	subs	r4, r4, r5
 800e0d0:	10a4      	asrs	r4, r4, #2
 800e0d2:	2600      	movs	r6, #0
 800e0d4:	42a6      	cmp	r6, r4
 800e0d6:	d109      	bne.n	800e0ec <__libc_init_array+0x24>
 800e0d8:	4d0b      	ldr	r5, [pc, #44]	@ (800e108 <__libc_init_array+0x40>)
 800e0da:	4c0c      	ldr	r4, [pc, #48]	@ (800e10c <__libc_init_array+0x44>)
 800e0dc:	f000 f864 	bl	800e1a8 <_init>
 800e0e0:	1b64      	subs	r4, r4, r5
 800e0e2:	10a4      	asrs	r4, r4, #2
 800e0e4:	2600      	movs	r6, #0
 800e0e6:	42a6      	cmp	r6, r4
 800e0e8:	d105      	bne.n	800e0f6 <__libc_init_array+0x2e>
 800e0ea:	bd70      	pop	{r4, r5, r6, pc}
 800e0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0f0:	4798      	blx	r3
 800e0f2:	3601      	adds	r6, #1
 800e0f4:	e7ee      	b.n	800e0d4 <__libc_init_array+0xc>
 800e0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0fa:	4798      	blx	r3
 800e0fc:	3601      	adds	r6, #1
 800e0fe:	e7f2      	b.n	800e0e6 <__libc_init_array+0x1e>
 800e100:	0800e1f8 	.word	0x0800e1f8
 800e104:	0800e1f8 	.word	0x0800e1f8
 800e108:	0800e1f8 	.word	0x0800e1f8
 800e10c:	0800e1fc 	.word	0x0800e1fc

0800e110 <__retarget_lock_acquire_recursive>:
 800e110:	4770      	bx	lr

0800e112 <__retarget_lock_release_recursive>:
 800e112:	4770      	bx	lr

0800e114 <_free_r>:
 800e114:	b538      	push	{r3, r4, r5, lr}
 800e116:	4605      	mov	r5, r0
 800e118:	2900      	cmp	r1, #0
 800e11a:	d041      	beq.n	800e1a0 <_free_r+0x8c>
 800e11c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e120:	1f0c      	subs	r4, r1, #4
 800e122:	2b00      	cmp	r3, #0
 800e124:	bfb8      	it	lt
 800e126:	18e4      	addlt	r4, r4, r3
 800e128:	f7ff ffa4 	bl	800e074 <__malloc_lock>
 800e12c:	4a1d      	ldr	r2, [pc, #116]	@ (800e1a4 <_free_r+0x90>)
 800e12e:	6813      	ldr	r3, [r2, #0]
 800e130:	b933      	cbnz	r3, 800e140 <_free_r+0x2c>
 800e132:	6063      	str	r3, [r4, #4]
 800e134:	6014      	str	r4, [r2, #0]
 800e136:	4628      	mov	r0, r5
 800e138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e13c:	f7ff bfa0 	b.w	800e080 <__malloc_unlock>
 800e140:	42a3      	cmp	r3, r4
 800e142:	d908      	bls.n	800e156 <_free_r+0x42>
 800e144:	6820      	ldr	r0, [r4, #0]
 800e146:	1821      	adds	r1, r4, r0
 800e148:	428b      	cmp	r3, r1
 800e14a:	bf01      	itttt	eq
 800e14c:	6819      	ldreq	r1, [r3, #0]
 800e14e:	685b      	ldreq	r3, [r3, #4]
 800e150:	1809      	addeq	r1, r1, r0
 800e152:	6021      	streq	r1, [r4, #0]
 800e154:	e7ed      	b.n	800e132 <_free_r+0x1e>
 800e156:	461a      	mov	r2, r3
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	b10b      	cbz	r3, 800e160 <_free_r+0x4c>
 800e15c:	42a3      	cmp	r3, r4
 800e15e:	d9fa      	bls.n	800e156 <_free_r+0x42>
 800e160:	6811      	ldr	r1, [r2, #0]
 800e162:	1850      	adds	r0, r2, r1
 800e164:	42a0      	cmp	r0, r4
 800e166:	d10b      	bne.n	800e180 <_free_r+0x6c>
 800e168:	6820      	ldr	r0, [r4, #0]
 800e16a:	4401      	add	r1, r0
 800e16c:	1850      	adds	r0, r2, r1
 800e16e:	4283      	cmp	r3, r0
 800e170:	6011      	str	r1, [r2, #0]
 800e172:	d1e0      	bne.n	800e136 <_free_r+0x22>
 800e174:	6818      	ldr	r0, [r3, #0]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	6053      	str	r3, [r2, #4]
 800e17a:	4408      	add	r0, r1
 800e17c:	6010      	str	r0, [r2, #0]
 800e17e:	e7da      	b.n	800e136 <_free_r+0x22>
 800e180:	d902      	bls.n	800e188 <_free_r+0x74>
 800e182:	230c      	movs	r3, #12
 800e184:	602b      	str	r3, [r5, #0]
 800e186:	e7d6      	b.n	800e136 <_free_r+0x22>
 800e188:	6820      	ldr	r0, [r4, #0]
 800e18a:	1821      	adds	r1, r4, r0
 800e18c:	428b      	cmp	r3, r1
 800e18e:	bf04      	itt	eq
 800e190:	6819      	ldreq	r1, [r3, #0]
 800e192:	685b      	ldreq	r3, [r3, #4]
 800e194:	6063      	str	r3, [r4, #4]
 800e196:	bf04      	itt	eq
 800e198:	1809      	addeq	r1, r1, r0
 800e19a:	6021      	streq	r1, [r4, #0]
 800e19c:	6054      	str	r4, [r2, #4]
 800e19e:	e7ca      	b.n	800e136 <_free_r+0x22>
 800e1a0:	bd38      	pop	{r3, r4, r5, pc}
 800e1a2:	bf00      	nop
 800e1a4:	20000cdc 	.word	0x20000cdc

0800e1a8 <_init>:
 800e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1aa:	bf00      	nop
 800e1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ae:	bc08      	pop	{r3}
 800e1b0:	469e      	mov	lr, r3
 800e1b2:	4770      	bx	lr

0800e1b4 <_fini>:
 800e1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b6:	bf00      	nop
 800e1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ba:	bc08      	pop	{r3}
 800e1bc:	469e      	mov	lr, r3
 800e1be:	4770      	bx	lr
