
VoiceMailBoxApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b30  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  08015cf0  08015cf0  00016cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016250  08016250  00018088  2**0
                  CONTENTS
  4 .ARM          00000008  08016250  08016250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016258  08016258  00018088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016258  08016258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801625c  0801625c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08016260  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018088  2**0
                  CONTENTS
 10 .bss          000011b8  20000088  20000088  00018088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001240  20001240  00018088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004d146  00000000  00000000  000180b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000088e5  00000000  00000000  000651fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002cb0  00000000  00000000  0006dae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002278  00000000  00000000  00070798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003a125  00000000  00000000  00072a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003e7ea  00000000  00000000  000acb35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012ecbb  00000000  00000000  000eb31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00219fda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000de4c  00000000  00000000  0021a020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  00227e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08015cd8 	.word	0x08015cd8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	08015cd8 	.word	0x08015cd8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_ZNK3VMB9FAT32File6isOpenEv>:

		unsigned int write(const char* text) override;
		unsigned int read(char* buffer, unsigned int length) override;
		bool seek(unsigned int position) override;
		unsigned int getSize() const override;
		bool isOpen() const override { return m_isOpen; }
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <_ZN3VMB5IFileC1Ev>:

#include <string>

namespace VMB
{
	class IFile
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <_ZN3VMB5IFileC1Ev+0x1c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	08016090 	.word	0x08016090

080005f4 <_ZN3VMB5IFileD1Ev>:
			read,
			write,
			append,
		};

		virtual ~IFile() = default;
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <_ZN3VMB5IFileD1Ev+0x1c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	08016090 	.word	0x08016090

08000614 <_ZN3VMB5IFileD0Ev>:
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff ffe9 	bl	80005f4 <_ZN3VMB5IFileD1Ev>
 8000622:	2104      	movs	r1, #4
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f014 f803 	bl	8014630 <_ZdlPvj>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <_ZN3VMB9FAT32FileC1Ev>:
{
	bool FAT32File::s_isMounted = false;
	FATFS FAT32File::s_SDFatFS;
    uint8_t FAT32File::s_rtext[_MAX_SS];

	FAT32File::FAT32File()
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    	: m_fileHandle{ 0 }
		, m_isOpen(false)
		, m_currentMode(FA_READ)
		, m_path("")
		, m_lastError(FRESULT::FR_OK)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffc8 	bl	80005d4 <_ZN3VMB5IFileC1Ev>
 8000644:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <_ZN3VMB9FAT32FileC1Ev+0xa4>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
    	: m_fileHandle{ 0 }
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3304      	adds	r3, #4
 800064e:	f44f 720c 	mov.w	r2, #560	@ 0x230
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f014 fbde 	bl	8014e16 <memset>
		, m_isOpen(false)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		, m_currentMode(FA_READ)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2201      	movs	r2, #1
 8000666:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
		, m_path("")
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f503 740f 	add.w	r4, r3, #572	@ 0x23c
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4618      	mov	r0, r3
 8000676:	f013 ffee 	bl	8014656 <_ZNSaIcEC1Ev>
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	461a      	mov	r2, r3
 8000680:	4916      	ldr	r1, [pc, #88]	@ (80006dc <_ZN3VMB9FAT32FileC1Ev+0xa8>)
 8000682:	4620      	mov	r0, r4
 8000684:	f014 f97a 	bl	801497c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4618      	mov	r0, r3
 800068e:	f013 ffe3 	bl	8014658 <_ZNSaIcED1Ev>
		, m_lastError(FRESULT::FR_OK)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
	{
		if(!s_isMounted)
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <_ZN3VMB9FAT32FileC1Ev+0xac>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d011      	beq.n	80006cc <_ZN3VMB9FAT32FileC1Ev+0x98>
		{
			m_lastError =  f_mount(&s_SDFatFS, (TCHAR const*)SDPath, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	490e      	ldr	r1, [pc, #56]	@ (80006e4 <_ZN3VMB9FAT32FileC1Ev+0xb0>)
 80006ac:	480e      	ldr	r0, [pc, #56]	@ (80006e8 <_ZN3VMB9FAT32FileC1Ev+0xb4>)
 80006ae:	f012 fa41 	bl	8012b34 <f_mount>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
			if(m_lastError == FRESULT::FR_OK)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d102      	bne.n	80006cc <_ZN3VMB9FAT32FileC1Ev+0x98>
				s_isMounted = true;
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <_ZN3VMB9FAT32FileC1Ev+0xac>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
			else
			{
				// Can't mount device
			}
		}
	}
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	0801605c 	.word	0x0801605c
 80006dc:	08015cf0 	.word	0x08015cf0
 80006e0:	200000a4 	.word	0x200000a4
 80006e4:	200008f4 	.word	0x200008f4
 80006e8:	200000a8 	.word	0x200000a8

080006ec <_ZN3VMB9FAT32FileD1Ev>:
	FAT32File::~FAT32File()
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	4a08      	ldr	r2, [pc, #32]	@ (8000718 <_ZN3VMB9FAT32FileD1Ev+0x2c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
	{

	}
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8000700:	4618      	mov	r0, r3
 8000702:	f014 f842 	bl	801478a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff73 	bl	80005f4 <_ZN3VMB5IFileD1Ev>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	0801605c 	.word	0x0801605c

0800071c <_ZN3VMB9FAT32FileD0Ev>:
	FAT32File::~FAT32File()
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	}
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ffe1 	bl	80006ec <_ZN3VMB9FAT32FileD1Ev>
 800072a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f013 ff7e 	bl	8014630 <_ZdlPvj>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE>:

	bool FAT32File::open(const char* path, AccessMode mode)
	{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
		if(m_isOpen)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x1a>
		{
			// Already open
			return false;
 8000754:	2300      	movs	r3, #0
 8000756:	e02b      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
		}
		switch(mode)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b02      	cmp	r3, #2
 800075c:	d01d      	beq.n	800079a <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x5c>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b02      	cmp	r3, #2
 8000762:	dc24      	bgt.n	80007ae <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x70>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x34>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d00a      	beq.n	8000786 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x48>
 8000770:	e01d      	b.n	80007ae <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x70>
		{
			case AccessMode::read:
			{
				return open(path, FA_READ);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	330c      	adds	r3, #12
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2201      	movs	r2, #1
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	4798      	blx	r3
 8000782:	4603      	mov	r3, r0
 8000784:	e014      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}
			case AccessMode::write:
			{
				return open(path, FA_WRITE | FA_CREATE_ALWAYS);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	330c      	adds	r3, #12
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	220a      	movs	r2, #10
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	4798      	blx	r3
 8000796:	4603      	mov	r3, r0
 8000798:	e00a      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}
			case AccessMode::append:
			{
				return open(path, FA_OPEN_APPEND | FA_WRITE);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	330c      	adds	r3, #12
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2232      	movs	r2, #50	@ 0x32
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	4798      	blx	r3
 80007aa:	4603      	mov	r3, r0
 80007ac:	e000      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}

			default:
			{
				// Unknown mode
				return false;
 80007ae:	2300      	movs	r3, #0
			}
		}
		return false;
	}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_ZN3VMB9FAT32File4openEPKci>:
	bool FAT32File::open(const char* path, int fa_mode)
	{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
		if (m_isOpen)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <_ZN3VMB9FAT32File4openEPKci+0x1a>
		{
			// Already open
			return false;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e027      	b.n	8000822 <_ZN3VMB9FAT32File4openEPKci+0x6a>
		}
		m_lastError = f_open(&m_fileHandle, path, fa_mode);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3304      	adds	r3, #4
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	4618      	mov	r0, r3
 80007de:	f012 f9ef 	bl	8012bc0 <f_open>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		if (m_lastError == FR_OK) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d110      	bne.n	8000818 <_ZN3VMB9FAT32File4openEPKci+0x60>
			m_isOpen = true;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2201      	movs	r2, #1
 80007fa:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
			m_path = path;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	4618      	mov	r0, r3
 8000808:	f014 f897 	bl	801493a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			m_currentMode = fa_mode;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
			return true;
 8000814:	2301      	movs	r3, #1
 8000816:	e004      	b.n	8000822 <_ZN3VMB9FAT32File4openEPKci+0x6a>
		}
		m_isOpen = false;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		return false;
 8000820:	2300      	movs	r3, #0
	}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZN3VMB9FAT32File5closeEv>:

	bool FAT32File::close()
	{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
		if (!m_isOpen)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000838:	f083 0301 	eor.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <_ZN3VMB9FAT32File5closeEv+0x1c>
		{
			// File is not open
			return false;
 8000842:	2300      	movs	r3, #0
 8000844:	e01b      	b.n	800087e <_ZN3VMB9FAT32File5closeEv+0x54>
		}
		m_path.clear();
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 800084c:	4618      	mov	r0, r3
 800084e:	f013 ffe3 	bl	8014818 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		m_isOpen = false;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		m_lastError = f_close(&m_fileHandle);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3304      	adds	r3, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f012 fe9a 	bl	8013598 <f_close>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FRESULT::FR_OK;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
	}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_ZN3VMB9FAT32File5writeEPKc>:

	unsigned int FAT32File::write(const char* text) {
 8000886:	b590      	push	{r4, r7, lr}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
		if (!m_isOpen) return 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000896:	f083 0301 	eor.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <_ZN3VMB9FAT32File5writeEPKc+0x1e>
 80008a0:	2300      	movs	r3, #0
 80008a2:	e011      	b.n	80008c8 <_ZN3VMB9FAT32File5writeEPKc+0x42>
		UINT written;
		m_lastError = f_write(&m_fileHandle, text, strlen(text), &written);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1d1c      	adds	r4, r3, #4
 80008a8:	6838      	ldr	r0, [r7, #0]
 80008aa:	f7ff fcf9 	bl	80002a0 <strlen>
 80008ae:	4602      	mov	r2, r0
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	6839      	ldr	r1, [r7, #0]
 80008b6:	4620      	mov	r0, r4
 80008b8:	f012 fc7b 	bl	80131b2 <f_write>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return written;
 80008c6:	68fb      	ldr	r3, [r7, #12]
	}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd90      	pop	{r4, r7, pc}

080008d0 <_ZN3VMB9FAT32File4readEPcj>:
	unsigned int FAT32File::read(char* buffer, unsigned int length) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
		if (!m_isOpen) return 0;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80008e2:	f083 0301 	eor.w	r3, r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <_ZN3VMB9FAT32File4readEPcj+0x20>
 80008ec:	2300      	movs	r3, #0
 80008ee:	e00d      	b.n	800090c <_ZN3VMB9FAT32File4readEPcj+0x3c>
		UINT bytesRead;
		m_lastError = f_read(&m_fileHandle, buffer, length, &bytesRead);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1d18      	adds	r0, r3, #4
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	f012 fb1a 	bl	8012f34 <f_read>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return bytesRead;
 800090a:	697b      	ldr	r3, [r7, #20]
	}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <_ZN3VMB9FAT32File4seekEj>:
	bool FAT32File::seek(unsigned int position) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
		if (!m_isOpen) return false;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000924:	f083 0301 	eor.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <_ZN3VMB9FAT32File4seekEj+0x1e>
 800092e:	2300      	movs	r3, #0
 8000930:	e012      	b.n	8000958 <_ZN3VMB9FAT32File4seekEj+0x44>
		m_lastError = f_lseek(&m_fileHandle, position);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	6839      	ldr	r1, [r7, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f012 fe57 	bl	80135ec <f_lseek>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FR_OK;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 800094e:	2b00      	cmp	r3, #0
 8000950:	bf0c      	ite	eq
 8000952:	2301      	moveq	r3, #1
 8000954:	2300      	movne	r3, #0
 8000956:	b2db      	uxtb	r3, r3
	}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <_ZNK3VMB9FAT32File7getSizeEv>:

	unsigned int FAT32File::getSize() const {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
		if (!m_isOpen) return 0;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800096e:	f083 0301 	eor.w	r3, r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <_ZNK3VMB9FAT32File7getSizeEv+0x1c>
 8000978:	2300      	movs	r3, #0
 800097a:	e001      	b.n	8000980 <_ZNK3VMB9FAT32File7getSizeEv+0x20>
		return f_size(&m_fileHandle);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	691b      	ldr	r3, [r3, #16]
	}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZN3VMB9FAT32File5flushEv>:
	bool FAT32File::flush() {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
		if (!m_isOpen) return false;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800099a:	f083 0301 	eor.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <_ZN3VMB9FAT32File5flushEv+0x1c>
 80009a4:	2300      	movs	r3, #0
 80009a6:	e011      	b.n	80009cc <_ZN3VMB9FAT32File5flushEv+0x40>
		m_lastError = f_sync(&m_fileHandle);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3304      	adds	r3, #4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f012 fd75 	bl	801349c <f_sync>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FR_OK;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf0c      	ite	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	2300      	movne	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
	}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_ZN3VMB9FAT32File6removeEPKc>:

	bool FAT32File::remove(const char* path) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
		return f_unlink(path) == FR_OK;
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f013 f91d 	bl	8013c1c <f_unlink>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
	}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_ZN3VMB9FAT32File6renameEPKcS2_>:

	bool FAT32File::rename(const char* oldPath, const char* newPath) {
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
		return f_rename(oldPath, newPath) == FR_OK;
 8000a00:	6839      	ldr	r1, [r7, #0]
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f013 f9b5 	bl	8013d72 <f_rename>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf0c      	ite	eq
 8000a0e:	2301      	moveq	r3, #1
 8000a10:	2300      	movne	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
	}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_ZN3VMB9FAT32File6existsEPKc>:

	bool FAT32File::exists(const char* path) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
		FILINFO fileInfo;
		return f_stat(path, &fileInfo) == FR_OK;
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f013 f8bd 	bl	8013baa <f_stat>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf0c      	ite	eq
 8000a36:	2301      	moveq	r3, #1
 8000a38:	2300      	movne	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
	}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f84d 	bl	8000aee <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ffeb 	bl	8000a44 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc>:

	std::vector<std::string> FAT32File::listDirectory(const char* path) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	@ 0x50
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
		std::vector<std::string> files;
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffeb 	bl	8000a5e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
		DIR dir;
		FILINFO fileInfo;
		if (f_opendir(&dir, path) == FR_OK) {
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	6839      	ldr	r1, [r7, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f012 ffb5 	bl	80139fe <f_opendir>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	bf0c      	ite	eq
 8000a9a:	2301      	moveq	r3, #1
 8000a9c:	2300      	movne	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d01f      	beq.n	8000ae4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x6c>
			while (f_readdir(&dir, &fileInfo) == FR_OK && fileInfo.fname[0] != 0) {
 8000aa4:	e006      	b.n	8000ab4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x3c>
				files.emplace_back(fileInfo.fname);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	3309      	adds	r3, #9
 8000aac:	4619      	mov	r1, r3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 f82d 	bl	8000b0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_>
			while (f_readdir(&dir, &fileInfo) == FR_OK && fileInfo.fname[0] != 0) {
 8000ab4:	f107 0208 	add.w	r2, r7, #8
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f013 f836 	bl	8013b30 <f_readdir>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d104      	bne.n	8000ad4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5c>
 8000aca:	7c7b      	ldrb	r3, [r7, #17]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5c>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5e>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1e5      	bne.n	8000aa6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x2e>
			}
			f_closedir(&dir);
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f013 f800 	bl	8013ae4 <f_closedir>
		}
		return files;
 8000ae4:	bf00      	nop
	}
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	3750      	adds	r7, #80	@ 0x50
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f838 	bl	8000b6c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f840 	bl	8000b84 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000b0e:	b5b0      	push	{r4, r5, r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d012      	beq.n	8000b4a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000b24:	687c      	ldr	r4, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685d      	ldr	r5, [r3, #4]
 8000b2a:	6838      	ldr	r0, [r7, #0]
 8000b2c:	f000 f86a 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	4629      	mov	r1, r5
 8000b36:	4620      	mov	r0, r4
 8000b38:	f000 f86f 	bl	8000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f103 0218 	add.w	r2, r3, #24
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8000b48:	e00c      	b.n	8000b64 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f878 	bl	8000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8000b50:	4604      	mov	r4, r0
 8000b52:	6838      	ldr	r0, [r7, #0]
 8000b54:	f000 f856 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f896 	bl	8000c90 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bdb0      	pop	{r4, r5, r7, pc}

08000b6c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f953 	bl	8000e20 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
	{ }
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
	if (__p)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f936 	bl	8000e36 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f000 f92c 	bl	8000e54 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffec 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f000 f91b 	bl	8000e6e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JRA13_cEEEvPT_DpOT0_>
	}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	1d1a      	adds	r2, r3, #4
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f930 	bl	8000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f805 	bl	8000c78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000c6e:	4603      	mov	r3, r0
      }
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000c80:	2301      	movs	r3, #1
      }
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000c9c:	4a5e      	ldr	r2, [pc, #376]	@ (8000e18 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x188>)
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f000 f919 	bl	8000ed8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8000ca6:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f000 f956 	bl	8000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	f107 0214 	add.w	r2, r7, #20
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f95d 	bl	8000f88 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f970 	bl	8000fbc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8000cdc:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000ce2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	189d      	adds	r5, r3, r2
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff85 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4629      	mov	r1, r5
 8000d00:	4620      	mov	r0, r4
 8000d02:	f7ff ff8a 	bl	8000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000d0a:	f7ff ffaa 	bl	8000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d027      	beq.n	8000d64 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f977 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff54 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d2a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4621      	mov	r1, r4
 8000d30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d32:	f000 f957 	bl	8000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8000d36:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8000d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f962 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff3f 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d54:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d58:	6a39      	ldr	r1, [r7, #32]
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f000 f942 	bl	8000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8000d60:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8000d62:	e026      	b.n	8000db2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f94f 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff2c 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d7a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4621      	mov	r1, r4
 8000d80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d82:	f000 f94e 	bl	8001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8000d86:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	3318      	adds	r3, #24
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f93a 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff17 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000da4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000da8:	6a39      	ldr	r1, [r7, #32]
 8000daa:	4620      	mov	r0, r4
 8000dac:	f000 f939 	bl	8001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8000db0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000db2:	f7ff ff56 	bl	8000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f083 0301 	eor.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d009      	beq.n	8000dd6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff04 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	6a39      	ldr	r1, [r7, #32]
 8000dd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000dd2:	f7ff ff09 	bl	8000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000dd6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	10db      	asrs	r3, r3, #3
 8000de2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e1c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x18c>)
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8000de8:	461a      	mov	r2, r3
 8000dea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dec:	f7ff fede 	bl	8000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000dfa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	461a      	mov	r2, r3
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	441a      	add	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	609a      	str	r2, [r3, #8]
    }
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	@ 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bdb0      	pop	{r4, r5, r7, pc}
 8000e18:	08015cf4 	.word	0x08015cf4
 8000e1c:	aaaaaaab 	.word	0xaaaaaaab

08000e20 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f000 f911 	bl	800106e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_j>
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000e5e:	6839      	ldr	r1, [r7, #0]
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f917 	bl	8001094 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JRA13_cEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000e6e:	b5b0      	push	{r4, r5, r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	2018      	movs	r0, #24
 8000e80:	f7ff fb8e 	bl	80005a0 <_ZnwjPv>
 8000e84:	4604      	mov	r4, r0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff febc 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e8c:	4605      	mov	r5, r0
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4618      	mov	r0, r3
 8000e94:	f013 fbdf 	bl	8014656 <_ZNSaIcEC1Ev>
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f013 fd6b 	bl	801497c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f013 fbd4 	bl	8014658 <_ZNSaIcED1Ev>
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bdb0      	pop	{r4, r5, r7, pc}

08000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f000 f8ee 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000eea:	4604      	mov	r4, r0
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f8fb 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	1ae2      	subs	r2, r4, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	bf34      	ite	cc
 8000efc:	2301      	movcc	r3, #1
 8000efe:	2300      	movcs	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f013 fbb0 	bl	801466c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f000 f8eb 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f12:	4604      	mov	r4, r0
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 f8e7 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	f107 0208 	add.w	r2, r7, #8
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f8f3 	bl	8001114 <_ZSt3maxIjERKT_S2_S2_>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4423      	add	r3, r4
 8000f34:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f000 f8d6 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d306      	bcc.n	8000f52 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7a>
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 f8be 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d904      	bls.n	8000f5c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x84>
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 f8b7 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	e000      	b.n	8000f5e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8000f5c:	697b      	ldr	r3, [r7, #20]
      }
 8000f5e:	4618      	mov	r0, r3
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}

08000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff9e 	bl	8000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f83a 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	681c      	ldr	r4, [r3, #0]
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f000 f835 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1ae3      	subs	r3, r4, r3
 8000fa8:	10db      	asrs	r3, r3, #3
 8000faa:	4a03      	ldr	r2, [pc, #12]	@ (8000fb8 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x30>)
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	aaaaaaab 	.word	0xaaaaaaab

08000fbc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6839      	ldr	r1, [r7, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f8b3 	bl	800113c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	e000      	b.n	8000fdc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8000fda:	2300      	movs	r3, #0
      }
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8000ff2:	f88d 4000 	strb.w	r4, [sp]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	68b9      	ldr	r1, [r7, #8]
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f000 f8ac 	bl	800115a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>
 8001002:	4603      	mov	r3, r0
      }
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f000 f8a4 	bl	800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8001036:	4604      	mov	r4, r0
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	f000 f8a0 	bl	800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800103e:	4601      	mov	r1, r0
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4620      	mov	r0, r4
 8001046:	f000 f8a9 	bl	800119c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800104a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}

08001054 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800105e:	6839      	ldr	r1, [r7, #0]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f8ac 	bl	80011be <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_>
	}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4619      	mov	r1, r3
 8001086:	68b8      	ldr	r0, [r7, #8]
 8001088:	f013 fad2 	bl	8014630 <_ZdlPvj>
      }
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800109e:	e009      	b.n	80010b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f898 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f89f 	bl	80011ec <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3318      	adds	r3, #24
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d1f1      	bne.n	80010a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xc>
	}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f8b3 	bl	800123c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f893 	bl	8001204 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 80010de:	4603      	mov	r3, r0
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	10db      	asrs	r3, r3, #3
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	aaaaaaab 	.word	0xaaaaaaab

08001114 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d201      	bcs.n	800112e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	e000      	b.n	8001130 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800112e:	687b      	ldr	r3, [r7, #4]
    }
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001146:	2200      	movs	r2, #0
 8001148:	6839      	ldr	r1, [r7, #0]
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f882 	bl	8001254 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8001150:	4603      	mov	r3, r0
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f89e 	bl	80012b0 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8001174:	4603      	mov	r3, r0
      }
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f8ac 	bl	80012ea <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f8ad 	bl	800130e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 80011b4:	4603      	mov	r3, r0
    }
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	f013 fade 	bl	801478a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f013 fac8 	bl	801478a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x34>)
 800120e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f890 	bl	8001336 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8001216:	4603      	mov	r3, r0
 8001218:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800121a:	f107 0208 	add.w	r2, r7, #8
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f892 	bl	800134e <_ZSt3minIjERKT_S2_S2_>
 800122a:	4603      	mov	r3, r0
 800122c:	681b      	ldr	r3, [r3, #0]
      }
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	05555555 	.word	0x05555555

0800123c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f889 	bl	8001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8001266:	4602      	mov	r2, r0
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4293      	cmp	r3, r2
 800126c:	bf8c      	ite	hi
 800126e:	2301      	movhi	r3, #1
 8001270:	2300      	movls	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x58>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800128a:	f013 f9e9 	bl	8014660 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800128e:	f013 f9e4 	bl	801465a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4618      	mov	r0, r3
 800129e:	f013 f9c9 	bl	8014634 <_Znwj>
 80012a2:	4603      	mov	r3, r0
      }
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0aaaaaaa 	.word	0x0aaaaaaa

080012b0 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f868 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012c4:	4604      	mov	r4, r0
 80012c6:	68b8      	ldr	r0, [r7, #8]
 80012c8:	f000 f864 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f860 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012d4:	4602      	mov	r2, r0
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	4629      	mov	r1, r5
 80012da:	4620      	mov	r0, r4
 80012dc:	f000 f865 	bl	80013aa <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80012e0:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bdb0      	pop	{r4, r5, r7, pc}

080012ea <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80012f4:	463b      	mov	r3, r7
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f87d 	bl	80013f6 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>
 80012fc:	4603      	mov	r3, r0
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800131e:	2300      	movs	r3, #0
 8001320:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f870 	bl	800140c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800132c:	4603      	mov	r3, r0
    }
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f874 	bl	800142c <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8001344:	4603      	mov	r3, r0
      }
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d201      	bcs.n	8001368 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	e000      	b.n	800136a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001368:	687b      	ldr	r3, [r7, #4]
    }
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	05555555 	.word	0x05555555

08001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80013aa:	b590      	push	{r4, r7, lr}
 80013ac:	b087      	sub	sp, #28
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80013bc:	e012      	b.n	80013e4 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff09 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80013c4:	4604      	mov	r4, r0
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f7ff ff05 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80013cc:	4603      	mov	r3, r0
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4620      	mov	r0, r4
 80013d4:	f000 f836 	bl	8001444 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3318      	adds	r3, #24
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3318      	adds	r3, #24
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1e8      	bne.n	80013be <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x14>
      return __cur;
 80013ec:	697b      	ldr	r3, [r7, #20]
    }
 80013ee:	4618      	mov	r0, r3
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}

080013f6 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 f82c 	bl	800147a <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 8001422:	4603      	mov	r3, r0
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff9f 	bl	8001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 800143a:	4603      	mov	r3, r0
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f000 f841 	bl	80014d8 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	68f9      	ldr	r1, [r7, #12]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f846 	bl	80014ee <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7ff feb7 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8001468:	4603      	mov	r3, r0
 800146a:	4619      	mov	r1, r3
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fdf1 	bl	8001054 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
    }
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 800147a:	b590      	push	{r4, r7, lr}
 800147c:	b087      	sub	sp, #28
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800148a:	e015      	b.n	80014b8 <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 800148c:	6978      	ldr	r0, [r7, #20]
 800148e:	f7ff fea2 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8001492:	4604      	mov	r4, r0
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f85d 	bl	8001558 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800149e:	4603      	mov	r3, r0
 80014a0:	4619      	mov	r1, r3
 80014a2:	4620      	mov	r0, r4
 80014a4:	f000 f864 	bl	8001570 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f842 	bl	8001536 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3318      	adds	r3, #24
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	f107 0208 	add.w	r2, r7, #8
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f826 	bl	8001514 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1de      	bne.n	800148c <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_+0x12>
	  return __cur;
 80014ce:	697b      	ldr	r3, [r7, #20]
    }
 80014d0:	4618      	mov	r0, r3
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f84f 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f854 	bl	80015b4 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_>
	}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f85f 	bl	80015e4 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8001526:	4603      	mov	r3, r0
 8001528:	f083 0301 	eor.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f103 0218 	add.w	r2, r3, #24
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
	return *this;
 800154a:	687b      	ldr	r3, [r7, #4]
      }
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4619      	mov	r1, r3
 800157e:	2018      	movs	r0, #24
 8001580:	f7ff f80e 	bl	80005a0 <_ZnwjPv>
 8001584:	4604      	mov	r4, r0
 8001586:	6838      	ldr	r0, [r7, #0]
 8001588:	f000 f809 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800158c:	4603      	mov	r3, r0
 800158e:	4619      	mov	r1, r3
 8001590:	4620      	mov	r0, r4
 8001592:	f013 f8db 	bl	801474c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}

0800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4619      	mov	r1, r3
 80015c4:	2018      	movs	r0, #24
 80015c6:	f7fe ffeb 	bl	80005a0 <_ZnwjPv>
 80015ca:	4604      	mov	r4, r0
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffe6 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4619      	mov	r1, r3
 80015d6:	4620      	mov	r0, r4
 80015d8:	f013 f8b8 	bl	801474c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}

080015e4 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f80e 	bl	8001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80015f4:	4604      	mov	r4, r0
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f000 f80a 	bl	8001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80015fc:	4603      	mov	r3, r0
 80015fe:	429c      	cmp	r4, r3
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}

08001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_ZNK3VMB16WiFiServerClient11isConnectedEv>:

		bool connect() override;
		bool disconnect() override;
		bool send(const char* data, unsigned int length) override;
		unsigned int receive(char* buffer, unsigned int length) override;
		bool isConnected() const override { return m_isConnected; }
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_ZN3VMB13IServerClientC1Ev>:

#include <string>

namespace VMB
{
	class IServerClient
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	4a04      	ldr	r2, [pc, #16]	@ (800165c <_ZN3VMB13IServerClientC1Ev+0x1c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	080160e8 	.word	0x080160e8

08001660 <_ZN3VMB13IServerClientD1Ev>:
	{
	public:
		virtual ~IServerClient() = default;
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <_ZN3VMB13IServerClientD1Ev+0x1c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	080160e8 	.word	0x080160e8

08001680 <_ZN3VMB13IServerClientD0Ev>:
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ffe9 	bl	8001660 <_ZN3VMB13IServerClientD1Ev>
 800168e:	2104      	movs	r1, #4
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f012 ffcd 	bl	8014630 <_ZdlPvj>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZNKSt5arrayIPN3VMB16WiFiServerClientELj10EE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // Capacity.
      [[__gnu__::__const__, __nodiscard__]]
      constexpr size_type
      size() const noexcept { return _Nm; }
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	230a      	movs	r3, #10
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef>:
	#define ESP_TIMEOUT 2000         // Timeout in milliseconds
	#define ESP_RESPONSE_SIZE 128    // Buffer size for response

	std::array<WiFiServerClient*, 10> WiFiServerClient::s_instances;

	WiFiServerClient::WiFiServerClient(UART_HandleTypeDef& huartInterface)
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
		: IServerClient()
		, m_huartInterface(huartInterface)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ffbb 	bl	8001640 <_ZN3VMB13IServerClientC1Ev>
 80016ca:	4a5c      	ldr	r2, [pc, #368]	@ (800183c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x184>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	731a      	strb	r2, [r3, #12]
	{
		for (size_t i = 0; i < s_instances.size(); ++i)
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e023      	b.n	800172a <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x72>
		{
			if (s_instances[i] == nullptr)
 80016e2:	68f9      	ldr	r1, [r7, #12]
 80016e4:	4856      	ldr	r0, [pc, #344]	@ (8001840 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x188>)
 80016e6:	f000 fa23 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 80016ea:	4603      	mov	r3, r0
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf0c      	ite	eq
 80016f2:	2301      	moveq	r3, #1
 80016f4:	2300      	movne	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d007      	beq.n	800170c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x54>
			{
				s_instances[i] = this;
 80016fc:	68f9      	ldr	r1, [r7, #12]
 80016fe:	4850      	ldr	r0, [pc, #320]	@ (8001840 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x188>)
 8001700:	f000 fa16 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 8001704:	4602      	mov	r2, r0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
				break;
 800170a:	e015      	b.n	8001738 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x80>
			}
			if (i == s_instances.size() - 1)
 800170c:	484c      	ldr	r0, [pc, #304]	@ (8001840 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x188>)
 800170e:	f7ff ffc7 	bl	80016a0 <_ZNKSt5arrayIPN3VMB16WiFiServerClientELj10EE4sizeEv>
 8001712:	4603      	mov	r3, r0
 8001714:	3b01      	subs	r3, #1
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d103      	bne.n	8001724 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x6c>
			{
				printf("All instances are used!\n\r");
 800171c:	4849      	ldr	r0, [pc, #292]	@ (8001844 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x18c>)
 800171e:	f013 fad7 	bl	8014cd0 <iprintf>
				return;
 8001722:	e086      	b.n	8001832 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x17a>
		for (size_t i = 0; i < s_instances.size(); ++i)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3301      	adds	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4845      	ldr	r0, [pc, #276]	@ (8001840 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x188>)
 800172c:	f7ff ffb8 	bl	80016a0 <_ZNKSt5arrayIPN3VMB16WiFiServerClientELj10EE4sizeEv>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4293      	cmp	r3, r2
 8001736:	d3d4      	bcc.n	80016e2 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x2a>
			}
		}

		HAL_UARTEx_ReceiveToIdle_DMA(&m_huartInterface, m_rxBuff[0], sizeof(m_rxBuff[0]));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6898      	ldr	r0, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	330d      	adds	r3, #13
 8001740:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001744:	4619      	mov	r1, r3
 8001746:	f00a f807 	bl	800b758 <HAL_UARTEx_ReceiveToIdle_DMA>
		m_rx_data.buff = NULL;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
		m_rx_data.dataReceived = false;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2814 	strb.w	r2, [r3, #2068]	@ 0x814
		m_rx_data.size = 0;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f8a3 2816 	strh.w	r2, [r3, #2070]	@ 0x816

		if (sendATCommand("ATE0")) {
 8001762:	4939      	ldr	r1, [pc, #228]	@ (8001848 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x190>)
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f96d 	bl	8001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d012      	beq.n	80017a0 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0xe8>
			printf("ESP32 is responsive.\n\r");
 800177a:	4834      	ldr	r0, [pc, #208]	@ (800184c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x194>)
 800177c:	f013 faa8 	bl	8014cd0 <iprintf>
		}
		else {
			printf("ESP32 is not responding!\n\r");
			return;
		}
		HAL_Delay(10);
 8001780:	200a      	movs	r0, #10
 8001782:	f002 f9a7 	bl	8003ad4 <HAL_Delay>
		if (sendATCommand("AT+CWMODE=2")) {
 8001786:	4932      	ldr	r1, [pc, #200]	@ (8001850 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x198>)
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f95b 	bl	8001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf14      	ite	ne
 8001794:	2301      	movne	r3, #1
 8001796:	2300      	moveq	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d008      	beq.n	80017b0 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0xf8>
 800179e:	e003      	b.n	80017a8 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0xf0>
			printf("ESP32 is not responding!\n\r");
 80017a0:	482c      	ldr	r0, [pc, #176]	@ (8001854 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x19c>)
 80017a2:	f013 fa95 	bl	8014cd0 <iprintf>
			return;
 80017a6:	e044      	b.n	8001832 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x17a>
			printf("WiFi mode set to AP.\n\r");
 80017a8:	482b      	ldr	r0, [pc, #172]	@ (8001858 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1a0>)
 80017aa:	f013 fa91 	bl	8014cd0 <iprintf>
 80017ae:	e002      	b.n	80017b6 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0xfe>
		}
		else {
			printf("Failed to set WiFi mode.\n\r");
 80017b0:	482a      	ldr	r0, [pc, #168]	@ (800185c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1a4>)
 80017b2:	f013 fa8d 	bl	8014cd0 <iprintf>
		}
		HAL_Delay(10);
 80017b6:	200a      	movs	r0, #10
 80017b8:	f002 f98c 	bl	8003ad4 <HAL_Delay>
		if (sendATCommand("AT+CWSAP=\"MyHotspot\",\"MyPassword\",5,3")) {
 80017bc:	4928      	ldr	r1, [pc, #160]	@ (8001860 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1a8>)
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f940 	bl	8001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf14      	ite	ne
 80017ca:	2301      	movne	r3, #1
 80017cc:	2300      	moveq	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x124>
			printf("Hotspot created successfully.\n\r");
 80017d4:	4823      	ldr	r0, [pc, #140]	@ (8001864 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1ac>)
 80017d6:	f013 fa7b 	bl	8014cd0 <iprintf>
 80017da:	e002      	b.n	80017e2 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x12a>
		}
		else {
			printf("Failed to create hotspot.\n\r");
 80017dc:	4822      	ldr	r0, [pc, #136]	@ (8001868 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1b0>)
 80017de:	f013 fa77 	bl	8014cd0 <iprintf>
		}
		HAL_Delay(10);
 80017e2:	200a      	movs	r0, #10
 80017e4:	f002 f976 	bl	8003ad4 <HAL_Delay>
		if (sendATCommand("AT+CWDHCP=1,1")) {
 80017e8:	4920      	ldr	r1, [pc, #128]	@ (800186c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1b4>)
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f92a 	bl	8001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x150>
			printf("DHCP server enabled.\n\r");
 8001800:	481b      	ldr	r0, [pc, #108]	@ (8001870 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1b8>)
 8001802:	f013 fa65 	bl	8014cd0 <iprintf>
 8001806:	e002      	b.n	800180e <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x156>
		}
		else {
			printf("Failed to enable DHCP.\n\r");
 8001808:	481a      	ldr	r0, [pc, #104]	@ (8001874 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1bc>)
 800180a:	f013 fa61 	bl	8014cd0 <iprintf>
		}
		HAL_Delay(10);
 800180e:	200a      	movs	r0, #10
 8001810:	f002 f960 	bl	8003ad4 <HAL_Delay>
		if (sendATCommand("AT+CWLIF")) {
 8001814:	4918      	ldr	r1, [pc, #96]	@ (8001878 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1c0>)
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f914 	bl	8001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x17a>
			printf("Checking connected clients...\n\r");
 800182c:	4813      	ldr	r0, [pc, #76]	@ (800187c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1c4>)
 800182e:	f013 fa4f 	bl	8014cd0 <iprintf>
		}
	}
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	080160c4 	.word	0x080160c4
 8001840:	200002d8 	.word	0x200002d8
 8001844:	08015d10 	.word	0x08015d10
 8001848:	08015d2c 	.word	0x08015d2c
 800184c:	08015d34 	.word	0x08015d34
 8001850:	08015d68 	.word	0x08015d68
 8001854:	08015d4c 	.word	0x08015d4c
 8001858:	08015d74 	.word	0x08015d74
 800185c:	08015d8c 	.word	0x08015d8c
 8001860:	08015da8 	.word	0x08015da8
 8001864:	08015dd0 	.word	0x08015dd0
 8001868:	08015df0 	.word	0x08015df0
 800186c:	08015e0c 	.word	0x08015e0c
 8001870:	08015e1c 	.word	0x08015e1c
 8001874:	08015e34 	.word	0x08015e34
 8001878:	08015e50 	.word	0x08015e50
 800187c:	08015e5c 	.word	0x08015e5c

08001880 <_ZN3VMB16WiFiServerClientD1Ev>:
	WiFiServerClient::~WiFiServerClient()
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <_ZN3VMB16WiFiServerClientD1Ev+0x68>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
	{
		for (size_t i = 0; i < s_instances.size(); ++i)
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e018      	b.n	80018c6 <_ZN3VMB16WiFiServerClientD1Ev+0x46>
		{
			if (s_instances[i] == this)
 8001894:	68f9      	ldr	r1, [r7, #12]
 8001896:	4815      	ldr	r0, [pc, #84]	@ (80018ec <_ZN3VMB16WiFiServerClientD1Ev+0x6c>)
 8001898:	f000 f94a 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 800189c:	4603      	mov	r3, r0
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	bf0c      	ite	eq
 80018a6:	2301      	moveq	r3, #1
 80018a8:	2300      	movne	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <_ZN3VMB16WiFiServerClientD1Ev+0x40>
			{
				s_instances[i] = nullptr;
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	480e      	ldr	r0, [pc, #56]	@ (80018ec <_ZN3VMB16WiFiServerClientD1Ev+0x6c>)
 80018b4:	f000 f93c 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
				break;
 80018be:	e009      	b.n	80018d4 <_ZN3VMB16WiFiServerClientD1Ev+0x54>
		for (size_t i = 0; i < s_instances.size(); ++i)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4809      	ldr	r0, [pc, #36]	@ (80018ec <_ZN3VMB16WiFiServerClientD1Ev+0x6c>)
 80018c8:	f7ff feea 	bl	80016a0 <_ZNKSt5arrayIPN3VMB16WiFiServerClientELj10EE4sizeEv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d3df      	bcc.n	8001894 <_ZN3VMB16WiFiServerClientD1Ev+0x14>
			}
		}
	}
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fec2 	bl	8001660 <_ZN3VMB13IServerClientD1Ev>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	080160c4 	.word	0x080160c4
 80018ec:	200002d8 	.word	0x200002d8

080018f0 <_ZN3VMB16WiFiServerClientD0Ev>:
	WiFiServerClient::~WiFiServerClient()
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	}
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffc1 	bl	8001880 <_ZN3VMB16WiFiServerClientD1Ev>
 80018fe:	f640 0118 	movw	r1, #2072	@ 0x818
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f012 fe94 	bl	8014630 <_ZdlPvj>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_ZN3VMB16WiFiServerClient7connectEv>:

	bool WiFiServerClient::connect()
	{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
		return false;
 800191a:	2300      	movs	r3, #0
	}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_ZN3VMB16WiFiServerClient10disconnectEv>:
	bool WiFiServerClient::disconnect()
	{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
		return false;
 8001930:	2300      	movs	r3, #0
	}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_ZN3VMB16WiFiServerClient4sendEPKcj>:
	bool WiFiServerClient::send(const char* data, unsigned int length)
	{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
		return false;
 800194a:	2300      	movs	r3, #0
	}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_ZN3VMB16WiFiServerClient7receiveEPcj>:
	unsigned int WiFiServerClient::receive(char* buffer, unsigned int length)
	{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
		return 0;
 8001964:	2300      	movs	r3, #0
	}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft>:

	void WiFiServerClient::on_HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t size)
	{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
		WiFiServerClient* instance = nullptr;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
		for (size_t i = 0; i < s_instances.size(); ++i)
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	e021      	b.n	80019ce <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x5a>
		{
			if (s_instances[i] != nullptr && &s_instances[i]->m_huartInterface == huart)
 800198a:	6939      	ldr	r1, [r7, #16]
 800198c:	482c      	ldr	r0, [pc, #176]	@ (8001a40 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xcc>)
 800198e:	f000 f8cf 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 8001992:	4603      	mov	r3, r0
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x3e>
 800199a:	6939      	ldr	r1, [r7, #16]
 800199c:	4828      	ldr	r0, [pc, #160]	@ (8001a40 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xcc>)
 800199e:	f000 f8c7 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 80019a2:	4603      	mov	r3, r0
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d101      	bne.n	80019b2 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x3e>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x40>
 80019b2:	2300      	movs	r3, #0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x54>
			{
				instance = s_instances[i];
 80019b8:	6939      	ldr	r1, [r7, #16]
 80019ba:	4821      	ldr	r0, [pc, #132]	@ (8001a40 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xcc>)
 80019bc:	f000 f8b8 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 80019c0:	4603      	mov	r3, r0
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	617b      	str	r3, [r7, #20]
				break;
 80019c6:	e009      	b.n	80019dc <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x68>
		for (size_t i = 0; i < s_instances.size(); ++i)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	3301      	adds	r3, #1
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	481c      	ldr	r0, [pc, #112]	@ (8001a40 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xcc>)
 80019d0:	f7ff fe66 	bl	80016a0 <_ZNKSt5arrayIPN3VMB16WiFiServerClientELj10EE4sizeEv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4293      	cmp	r3, r2
 80019da:	d3d6      	bcc.n	800198a <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x16>
			}
		}
		if (!instance)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d029      	beq.n	8001a36 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xc2>
			return;
		uint8_t* nextBuff = instance->m_rxBuff[instance->buffSwitcher];
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	7b1b      	ldrb	r3, [r3, #12]
 80019e6:	029b      	lsls	r3, r3, #10
 80019e8:	3308      	adds	r3, #8
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4413      	add	r3, r2
 80019ee:	3305      	adds	r3, #5
 80019f0:	60fb      	str	r3, [r7, #12]
		instance->buffSwitcher = !instance->buffSwitcher;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	7b1b      	ldrb	r3, [r3, #12]
 80019f6:	f083 0301 	eor.w	r3, r3, #1
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	731a      	strb	r2, [r3, #12]

		HAL_UARTEx_ReceiveToIdle_DMA(&instance->m_huartInterface, nextBuff, sizeof(instance->m_rxBuff[0]));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f009 fea4 	bl	800b758 <HAL_UARTEx_ReceiveToIdle_DMA>
		instance->m_rx_data.buff = instance->m_rxBuff[instance->buffSwitcher];
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	7b1b      	ldrb	r3, [r3, #12]
 8001a14:	029b      	lsls	r3, r3, #10
 8001a16:	3308      	adds	r3, #8
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	1d5a      	adds	r2, r3, #5
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
		instance->m_rx_data.size = size;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	f8a3 2816 	strh.w	r2, [r3, #2070]	@ 0x816
		instance->m_rx_data.dataReceived = true;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2814 	strb.w	r2, [r3, #2068]	@ 0x814
 8001a34:	e000      	b.n	8001a38 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xc4>
			return;
 8001a36:	bf00      	nop
	}
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200002d8 	.word	0x200002d8

08001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>:

	int WiFiServerClient::sendATCommand(const char* command)
	{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b0a7      	sub	sp, #156	@ 0x9c
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
		//char response[ESP_RESPONSE_SIZE] = {0}; // Buffer for ESP32 response
		uint8_t txBuffer[ESP_RESPONSE_SIZE] = { 0 };
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	227c      	movs	r2, #124	@ 0x7c
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f013 f9db 	bl	8014e16 <memset>
		int index = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		uint32_t startTime = HAL_GetTick(); // Start timer
 8001a66:	f002 f829 	bl	8003abc <HAL_GetTick>
 8001a6a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

		// Copy the AT command into the buffer and append "\r\n"
		snprintf((char*)txBuffer, ESP_RESPONSE_SIZE, "%s\r\n", command);
 8001a6e:	f107 000c 	add.w	r0, r7, #12
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	4a2a      	ldr	r2, [pc, #168]	@ (8001b20 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xdc>)
 8001a76:	2180      	movs	r1, #128	@ 0x80
 8001a78:	f013 f93c 	bl	8014cf4 <sniprintf>

		HAL_StatusTypeDef result = HAL_UART_Transmit_DMA(&m_huartInterface, txBuffer, strlen((char*)txBuffer));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689c      	ldr	r4, [r3, #8]
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fc0b 	bl	80002a0 <strlen>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	4619      	mov	r1, r3
 8001a94:	4620      	mov	r0, r4
 8001a96:	f009 fdef 	bl	800b678 <HAL_UART_Transmit_DMA>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

		while ((HAL_GetTick() - startTime) < 1000 * 60 * 5)
 8001aa0:	e02b      	b.n	8001afa <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xb6>
		{
			if (m_rx_data.dataReceived)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3814 	ldrb.w	r3, [r3, #2068]	@ 0x814
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d025      	beq.n	8001afa <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xb6>
			{
				m_rx_data.dataReceived = false;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2814 	strb.w	r2, [r3, #2068]	@ 0x814
				// Check if response contains "OK" or "ERROR"
				if (strstr((const char*)m_rx_data.buff, "OK"))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 8001abc:	4919      	ldr	r1, [pc, #100]	@ (8001b24 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xe0>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f013 f9b1 	bl	8014e26 <strstr>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0x94>
				{
					return 1; // Success
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e01f      	b.n	8001b18 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xd4>
				}
				else if (strstr((const char*)m_rx_data.buff, "ERROR"))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 8001ade:	4912      	ldr	r1, [pc, #72]	@ (8001b28 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xe4>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f013 f9a0 	bl	8014e26 <strstr>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf14      	ite	ne
 8001aec:	2301      	movne	r3, #1
 8001aee:	2300      	moveq	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xb6>
				{
					return 0; // Failure
 8001af6:	2300      	movs	r3, #0
 8001af8:	e00e      	b.n	8001b18 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xd4>
		while ((HAL_GetTick() - startTime) < 1000 * 60 * 5)
 8001afa:	f001 ffdf 	bl	8003abc <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xe8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	bf94      	ite	ls
 8001b0c:	2301      	movls	r3, #1
 8001b0e:	2300      	movhi	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1c5      	bne.n	8001aa2 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0x5e>
				}
			}
		}
		return 0;
 8001b16:	2300      	movs	r3, #0
	}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	379c      	adds	r7, #156	@ 0x9c
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd90      	pop	{r4, r7, pc}
 8001b20:	08015e7c 	.word	0x08015e7c
 8001b24:	08015e84 	.word	0x08015e84
 8001b28:	08015e88 	.word	0x08015e88
 8001b2c:	000493df 	.word	0x000493df

08001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>:
      empty() const noexcept { return size() == 0; }

      // Element access.
      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f805 	bl	8001b4e <_ZNSt14__array_traitsIPN3VMB16WiFiServerClientELj10EE6_S_refERA10_KS2_j>
 8001b44:	4603      	mov	r3, r0
      }
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_ZNSt14__array_traitsIPN3VMB16WiFiServerClientELj10EE6_S_refERA10_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f92f 	bl	8001dd8 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_ZN3VMB13testFat32FileEv>:


namespace VMB
{
    bool testFat32File()
    {
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8001b8a:	af00      	add	r7, sp, #0
        FAT32File file;
 8001b8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fd4f 	bl	8000634 <_ZN3VMB9FAT32FileC1Ev>

        // Open a file for writing
        if (file.open("test.txt", FA_WRITE | FA_CREATE_ALWAYS)) {
 8001b96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b9a:	220a      	movs	r2, #10
 8001b9c:	4965      	ldr	r1, [pc, #404]	@ (8001d34 <_ZN3VMB13testFat32FileEv+0x1b0>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fe0a 	bl	80007b8 <_ZN3VMB9FAT32File4openEPKci>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d013      	beq.n	8001bd2 <_ZN3VMB13testFat32FileEv+0x4e>
            printf("File opened for writing\n\r");
 8001baa:	4863      	ldr	r0, [pc, #396]	@ (8001d38 <_ZN3VMB13testFat32FileEv+0x1b4>)
 8001bac:	f013 f890 	bl	8014cd0 <iprintf>
            file.write("Hello, FATFS!");
 8001bb0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bb4:	4961      	ldr	r1, [pc, #388]	@ (8001d3c <_ZN3VMB13testFat32FileEv+0x1b8>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fe65 	bl	8000886 <_ZN3VMB9FAT32File5writeEPKc>
            file.flush();
 8001bbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fee3 	bl	800098c <_ZN3VMB9FAT32File5flushEv>
            file.close();
 8001bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fe2d 	bl	800082a <_ZN3VMB9FAT32File5closeEv>
 8001bd0:	e002      	b.n	8001bd8 <_ZN3VMB13testFat32FileEv+0x54>
        }
        else {
            printf("Failed to open file for writing\n\r");
 8001bd2:	485b      	ldr	r0, [pc, #364]	@ (8001d40 <_ZN3VMB13testFat32FileEv+0x1bc>)
 8001bd4:	f013 f87c 	bl	8014cd0 <iprintf>
        }

        // Open the same file for reading
        if (file.open("test.txt", FA_READ)) {
 8001bd8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4955      	ldr	r1, [pc, #340]	@ (8001d34 <_ZN3VMB13testFat32FileEv+0x1b0>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fde9 	bl	80007b8 <_ZN3VMB9FAT32File4openEPKci>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d025      	beq.n	8001c38 <_ZN3VMB13testFat32FileEv+0xb4>
            char buffer[20] = { 0 };
 8001bec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001bf0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
            file.read(buffer, sizeof(buffer) - 1);
 8001c04:	f107 0108 	add.w	r1, r7, #8
 8001c08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c0c:	2213      	movs	r2, #19
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fe5e 	bl	80008d0 <_ZN3VMB9FAT32File4readEPcj>
            printf("Read from file: %s\n\r", buffer);
 8001c14:	f107 0308 	add.w	r3, r7, #8
 8001c18:	4619      	mov	r1, r3
 8001c1a:	484a      	ldr	r0, [pc, #296]	@ (8001d44 <_ZN3VMB13testFat32FileEv+0x1c0>)
 8001c1c:	f013 f858 	bl	8014cd0 <iprintf>
            file.close();
 8001c20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fe00 	bl	800082a <_ZN3VMB9FAT32File5closeEv>
            printf("Failed to open file for reading\n\r");
            return false;
        }

        // Check if file exists
        if (FAT32File::exists("test.txt")) {
 8001c2a:	4842      	ldr	r0, [pc, #264]	@ (8001d34 <_ZN3VMB13testFat32FileEv+0x1b0>)
 8001c2c:	f7fe fef6 	bl	8000a1c <_ZN3VMB9FAT32File6existsEPKc>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d010      	beq.n	8001c58 <_ZN3VMB13testFat32FileEv+0xd4>
 8001c36:	e004      	b.n	8001c42 <_ZN3VMB13testFat32FileEv+0xbe>
            printf("Failed to open file for reading\n\r");
 8001c38:	4843      	ldr	r0, [pc, #268]	@ (8001d48 <_ZN3VMB13testFat32FileEv+0x1c4>)
 8001c3a:	f013 f849 	bl	8014cd0 <iprintf>
            return false;
 8001c3e:	2400      	movs	r4, #0
 8001c40:	e06c      	b.n	8001d1c <_ZN3VMB13testFat32FileEv+0x198>
            printf("File exists!\n\r");
 8001c42:	4842      	ldr	r0, [pc, #264]	@ (8001d4c <_ZN3VMB13testFat32FileEv+0x1c8>)
 8001c44:	f013 f844 	bl	8014cd0 <iprintf>
            printf("File does not exist\n\r");
            return false;
        }

        // Rename the file
        if (FAT32File::rename("test.txt", "renamed.txt")) {
 8001c48:	4941      	ldr	r1, [pc, #260]	@ (8001d50 <_ZN3VMB13testFat32FileEv+0x1cc>)
 8001c4a:	483a      	ldr	r0, [pc, #232]	@ (8001d34 <_ZN3VMB13testFat32FileEv+0x1b0>)
 8001c4c:	f7fe fed3 	bl	80009f6 <_ZN3VMB9FAT32File6renameEPKcS2_>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00f      	beq.n	8001c76 <_ZN3VMB13testFat32FileEv+0xf2>
 8001c56:	e004      	b.n	8001c62 <_ZN3VMB13testFat32FileEv+0xde>
            printf("File does not exist\n\r");
 8001c58:	483e      	ldr	r0, [pc, #248]	@ (8001d54 <_ZN3VMB13testFat32FileEv+0x1d0>)
 8001c5a:	f013 f839 	bl	8014cd0 <iprintf>
            return false;
 8001c5e:	2400      	movs	r4, #0
 8001c60:	e05c      	b.n	8001d1c <_ZN3VMB13testFat32FileEv+0x198>
            printf("File renamed successfully\n\r");
 8001c62:	483d      	ldr	r0, [pc, #244]	@ (8001d58 <_ZN3VMB13testFat32FileEv+0x1d4>)
 8001c64:	f013 f834 	bl	8014cd0 <iprintf>
            printf("Failed to rename file\n\r");
            return false;
        }

        // Delete the file
        if (FAT32File::remove("renamed.txt")) {
 8001c68:	4839      	ldr	r0, [pc, #228]	@ (8001d50 <_ZN3VMB13testFat32FileEv+0x1cc>)
 8001c6a:	f7fe feb3 	bl	80009d4 <_ZN3VMB9FAT32File6removeEPKc>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d02c      	beq.n	8001cce <_ZN3VMB13testFat32FileEv+0x14a>
 8001c74:	e004      	b.n	8001c80 <_ZN3VMB13testFat32FileEv+0xfc>
            printf("Failed to rename file\n\r");
 8001c76:	4839      	ldr	r0, [pc, #228]	@ (8001d5c <_ZN3VMB13testFat32FileEv+0x1d8>)
 8001c78:	f013 f82a 	bl	8014cd0 <iprintf>
            return false;
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	e04d      	b.n	8001d1c <_ZN3VMB13testFat32FileEv+0x198>
            printf("File deleted successfully\n\r");
 8001c80:	4837      	ldr	r0, [pc, #220]	@ (8001d60 <_ZN3VMB13testFat32FileEv+0x1dc>)
 8001c82:	f013 f825 	bl	8014cd0 <iprintf>
            printf("Failed to delete file\n\r");
            return false;
        }

        // List files in root directory
        printf("Listing root directory:\n\r");
 8001c86:	4837      	ldr	r0, [pc, #220]	@ (8001d64 <_ZN3VMB13testFat32FileEv+0x1e0>)
 8001c88:	f013 f822 	bl	8014cd0 <iprintf>
        std::vector<std::string> files = FAT32File::listDirectory("/");
 8001c8c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c90:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001c94:	4934      	ldr	r1, [pc, #208]	@ (8001d68 <_ZN3VMB13testFat32FileEv+0x1e4>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe feee 	bl	8000a78 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc>
        for (const auto& name : files) {
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8001ca4:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8001ca8:	f7ff f95d 	bl	8000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cb2:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8001cbc:	f7fe ffc0 	bl	8000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cc6:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e017      	b.n	8001cfe <_ZN3VMB13testFat32FileEv+0x17a>
            printf("Failed to delete file\n\r");
 8001cce:	4827      	ldr	r0, [pc, #156]	@ (8001d6c <_ZN3VMB13testFat32FileEv+0x1e8>)
 8001cd0:	f012 fffe 	bl	8014cd0 <iprintf>
            return false;
 8001cd4:	2400      	movs	r4, #0
 8001cd6:	e021      	b.n	8001d1c <_ZN3VMB13testFat32FileEv+0x198>
        for (const auto& name : files) {
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f8cf 	bl	8001e7e <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 8001ce0:	f8c7 0280 	str.w	r0, [r7, #640]	@ 0x280
            printf(" - %s\n\r", name.c_str());
 8001ce4:	f8d7 0280 	ldr.w	r0, [r7, #640]	@ 0x280
 8001ce8:	f012 fe2b 	bl	8014942 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481f      	ldr	r0, [pc, #124]	@ (8001d70 <_ZN3VMB13testFat32FileEv+0x1ec>)
 8001cf2:	f012 ffed 	bl	8014cd0 <iprintf>
        for (const auto& name : files) {
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 f8af 	bl	8001e5c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 8001cfe:	463a      	mov	r2, r7
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f891 	bl	8001e2c <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1e3      	bne.n	8001cd8 <_ZN3VMB13testFat32FileEv+0x154>
        }
        return true;
 8001d10:	2401      	movs	r4, #1
    }
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f843 	bl	8001da2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8001d1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fce3 	bl	80006ec <_ZN3VMB9FAT32FileD1Ev>
 8001d26:	4623      	mov	r3, r4
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f507 7723 	add.w	r7, r7, #652	@ 0x28c
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	08015e90 	.word	0x08015e90
 8001d38:	08015e9c 	.word	0x08015e9c
 8001d3c:	08015eb8 	.word	0x08015eb8
 8001d40:	08015ec8 	.word	0x08015ec8
 8001d44:	08015eec 	.word	0x08015eec
 8001d48:	08015f04 	.word	0x08015f04
 8001d4c:	08015f28 	.word	0x08015f28
 8001d50:	08015f50 	.word	0x08015f50
 8001d54:	08015f38 	.word	0x08015f38
 8001d58:	08015f5c 	.word	0x08015f5c
 8001d5c:	08015f78 	.word	0x08015f78
 8001d60:	08015f90 	.word	0x08015f90
 8001d64:	08015fc4 	.word	0x08015fc4
 8001d68:	08015fe0 	.word	0x08015fe0
 8001d6c:	08015fac 	.word	0x08015fac
 8001d70:	08015fe4 	.word	0x08015fe4

08001d74 <_ZN3VMB8testWIFIEv>:

    bool testWIFI()
    {
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	f6ad 0d1c 	subw	sp, sp, #2076	@ 0x81c
 8001d7a:	af00      	add	r7, sp, #0
    	VMB::WiFiServerClient client(*getHuart6());
 8001d7c:	f000 f8f8 	bl	8001f70 <getHuart6>
 8001d80:	4602      	mov	r2, r0
 8001d82:	463b      	mov	r3, r7
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fc96 	bl	80016b8 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef>

    	return true;
 8001d8c:	2401      	movs	r4, #1
    }
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fd75 	bl	8001880 <_ZN3VMB16WiFiServerClientD1Ev>
    	return true;
 8001d96:	4623      	mov	r3, r4
    }
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f607 071c 	addw	r7, r7, #2076	@ 0x81c
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}

08001da2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001da2:	b5b0      	push	{r4, r5, r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681c      	ldr	r4, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe ff0c 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001dba:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7fe ff11 	bl	8000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f811 	bl	8001df0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bdb0      	pop	{r4, r5, r7, pc}

08001dd8 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f858 	bl	8001e96 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	10db      	asrs	r3, r3, #3
 8001e08:	4a07      	ldr	r2, [pc, #28]	@ (8001e28 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x38>)
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001e0e:	461a      	mov	r2, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7fe fecb 	bl	8000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      }
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fea7 	bl	8001b6c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	aaaaaaab 	.word	0xaaaaaaab

08001e2c <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff f8e8 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	681c      	ldr	r4, [r3, #0]
 8001e40:	6838      	ldr	r0, [r7, #0]
 8001e42:	f7ff f8e3 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8001e46:	4603      	mov	r3, r0
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	429c      	cmp	r4, r3
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd90      	pop	{r4, r7, pc}

08001e5c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f103 0218 	add.w	r2, r3, #24
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	601a      	str	r2, [r3, #0]
	return *this;
 8001e70:	687b      	ldr	r3, [r7, #4]
      }
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_Z9execTestsv>:
#include "application.h"
#include "LibVoiceMailBox.hpp"
#include "tests.hpp"

bool execTests()
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
	bool success = true;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	71fb      	strb	r3, [r7, #7]
	success &= VMB::testFat32File();
 8001eb6:	f7ff fe65 	bl	8001b84 <_ZN3VMB13testFat32FileEv>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf14      	ite	ne
 8001ec6:	2301      	movne	r3, #1
 8001ec8:	2300      	moveq	r3, #0
 8001eca:	71fb      	strb	r3, [r7, #7]
	success &= VMB::testWIFI();
 8001ecc:	f7ff ff52 	bl	8001d74 <_ZN3VMB8testWIFIEv>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf14      	ite	ne
 8001edc:	2301      	movne	r3, #1
 8001ede:	2300      	moveq	r3, #0
 8001ee0:	71fb      	strb	r3, [r7, #7]
	return success;
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <setup>:

void setup()
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	if (!execTests())
 8001ef0:	f7ff ffdc 	bl	8001eac <_Z9execTestsv>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f083 0301 	eor.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d007      	beq.n	8001f10 <setup+0x24>
	{
		printf("Tests failed\n\r");
 8001f00:	4806      	ldr	r0, [pc, #24]	@ (8001f1c <setup+0x30>)
 8001f02:	f012 fee5 	bl	8014cd0 <iprintf>
		while (1) 
		{
			HAL_Delay(1000);
 8001f06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f0a:	f001 fde3 	bl	8003ad4 <HAL_Delay>
 8001f0e:	e7fa      	b.n	8001f06 <setup+0x1a>
		}
	}
	else
	{
		printf("Tests passed\n\r");
 8001f10:	4803      	ldr	r0, [pc, #12]	@ (8001f20 <setup+0x34>)
 8001f12:	f012 fedd 	bl	8014cd0 <iprintf>
	}
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	08015fec 	.word	0x08015fec
 8001f20:	08015ffc 	.word	0x08015ffc

08001f24 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
	VMB::WiFiServerClient::on_HAL_UARTEx_RxEventCallback(huart, Size);
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fd1d 	bl	8001974 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


// Redirect stdout to UART
int _write(int file, char *ptr, int len) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <_write+0x28>)
 8001f5c:	f009 fb00 	bl	800b560 <HAL_UART_Transmit>
    return len;
 8001f60:	687b      	ldr	r3, [r7, #4]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000714 	.word	0x20000714

08001f70 <getHuart6>:

UART_HandleTypeDef* getHuart6()
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	return &huart6;
 8001f74:	4b02      	ldr	r3, [pc, #8]	@ (8001f80 <getHuart6+0x10>)
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	2000075c 	.word	0x2000075c

08001f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f88:	f001 fd62 	bl	8003a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f8c:	f000 f82a 	bl	8001fe4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f90:	f000 f89a 	bl	80020c8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f94:	f000 fcba 	bl	800290c <MX_GPIO_Init>
  MX_DMA_Init();
 8001f98:	f000 fc30 	bl	80027fc <MX_DMA_Init>
  MX_CRC_Init();
 8001f9c:	f000 f8c0 	bl	8002120 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001fa0:	f000 f8d2 	bl	8002148 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8001fa4:	f000 f902 	bl	80021ac <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8001fa8:	f000 fc60 	bl	800286c <MX_FMC_Init>
  MX_I2C1_Init();
 8001fac:	f000 f9fe 	bl	80023ac <MX_I2C1_Init>
  MX_I2C2_Init();
 8001fb0:	f000 fa2a 	bl	8002408 <MX_I2C2_Init>
  MX_LTDC_Init();
 8001fb4:	f000 fa56 	bl	8002464 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001fb8:	f000 fad2 	bl	8002560 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001fbc:	f000 fafc 	bl	80025b8 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8001fc0:	f000 fb58 	bl	8002674 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8001fc4:	f000 fb76 	bl	80026b4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001fc8:	f000 fbc4 	bl	8002754 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001fcc:	f000 fbec 	bl	80027a8 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001fd0:	f00c fcc4 	bl	800e95c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001fd4:	f012 f822 	bl	801401c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001fd8:	f7ff ff88 	bl	8001eec <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001fdc:	f012 f844 	bl	8014068 <MX_USB_HOST_Process>
 8001fe0:	e7fc      	b.n	8001fdc <main+0x58>
	...

08001fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b094      	sub	sp, #80	@ 0x50
 8001fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	2234      	movs	r2, #52	@ 0x34
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f012 ff0f 	bl	8014e16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	4b2c      	ldr	r3, [pc, #176]	@ (80020c0 <SystemClock_Config+0xdc>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	4a2b      	ldr	r2, [pc, #172]	@ (80020c0 <SystemClock_Config+0xdc>)
 8002012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002016:	6413      	str	r3, [r2, #64]	@ 0x40
 8002018:	4b29      	ldr	r3, [pc, #164]	@ (80020c0 <SystemClock_Config+0xdc>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002024:	2300      	movs	r3, #0
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	4b26      	ldr	r3, [pc, #152]	@ (80020c4 <SystemClock_Config+0xe0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a25      	ldr	r2, [pc, #148]	@ (80020c4 <SystemClock_Config+0xe0>)
 800202e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b23      	ldr	r3, [pc, #140]	@ (80020c4 <SystemClock_Config+0xe0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002040:	2301      	movs	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002044:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002048:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204a:	2302      	movs	r3, #2
 800204c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800204e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002052:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002054:	2304      	movs	r3, #4
 8002056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002058:	23b4      	movs	r3, #180	@ 0xb4
 800205a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800205c:	2302      	movs	r3, #2
 800205e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002060:	2306      	movs	r3, #6
 8002062:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8002064:	2306      	movs	r3, #6
 8002066:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	4618      	mov	r0, r3
 800206e:	f006 ffb5 	bl	8008fdc <HAL_RCC_OscConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002078:	f000 fde6 	bl	8002c48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800207c:	f006 fa0c 	bl	8008498 <HAL_PWREx_EnableOverDrive>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002086:	f000 fddf 	bl	8002c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208a:	230f      	movs	r3, #15
 800208c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800208e:	2302      	movs	r3, #2
 8002090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002096:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800209a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800209c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020a2:	f107 0308 	add.w	r3, r7, #8
 80020a6:	2105      	movs	r1, #5
 80020a8:	4618      	mov	r0, r3
 80020aa:	f006 fb07 	bl	80086bc <HAL_RCC_ClockConfig>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80020b4:	f000 fdc8 	bl	8002c48 <Error_Handler>
  }
}
 80020b8:	bf00      	nop
 80020ba:	3750      	adds	r7, #80	@ 0x50
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40007000 	.word	0x40007000

080020c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b090      	sub	sp, #64	@ 0x40
 80020cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	223c      	movs	r2, #60	@ 0x3c
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f012 fe9e 	bl	8014e16 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 80020da:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 80020de:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 80020e0:	2390      	movs	r3, #144	@ 0x90
 80020e2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80020e4:	2302      	movs	r3, #2
 80020e6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 80020ec:	2306      	movs	r3, #6
 80020ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80020f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80020fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002100:	2300      	movs	r3, #0
 8002102:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	4618      	mov	r0, r3
 8002108:	f006 fd2a 	bl	8008b60 <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8002112:	f000 fd99 	bl	8002c48 <Error_Handler>
  }
}
 8002116:	bf00      	nop
 8002118:	3740      	adds	r7, #64	@ 0x40
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <MX_CRC_Init+0x20>)
 8002126:	4a07      	ldr	r2, [pc, #28]	@ (8002144 <MX_CRC_Init+0x24>)
 8002128:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	@ (8002140 <MX_CRC_Init+0x20>)
 800212c:	f001 fdd8 	bl	8003ce0 <HAL_CRC_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002136:	f000 fd87 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000300 	.word	0x20000300
 8002144:	40023000 	.word	0x40023000

08002148 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800214c:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <MX_DMA2D_Init+0x5c>)
 800214e:	4a16      	ldr	r2, [pc, #88]	@ (80021a8 <MX_DMA2D_Init+0x60>)
 8002150:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002152:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <MX_DMA2D_Init+0x5c>)
 8002154:	2200      	movs	r2, #0
 8002156:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <MX_DMA2D_Init+0x5c>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800215e:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <MX_DMA2D_Init+0x5c>)
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002164:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <MX_DMA2D_Init+0x5c>)
 8002166:	2200      	movs	r2, #0
 8002168:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <MX_DMA2D_Init+0x5c>)
 800216c:	2200      	movs	r2, #0
 800216e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <MX_DMA2D_Init+0x5c>)
 8002172:	2200      	movs	r2, #0
 8002174:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002176:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <MX_DMA2D_Init+0x5c>)
 8002178:	2200      	movs	r2, #0
 800217a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800217c:	4809      	ldr	r0, [pc, #36]	@ (80021a4 <MX_DMA2D_Init+0x5c>)
 800217e:	f002 f9d9 	bl	8004534 <HAL_DMA2D_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002188:	f000 fd5e 	bl	8002c48 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800218c:	2101      	movs	r1, #1
 800218e:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <MX_DMA2D_Init+0x5c>)
 8002190:	f002 fb2a 	bl	80047e8 <HAL_DMA2D_ConfigLayer>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800219a:	f000 fd55 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000308 	.word	0x20000308
 80021a8:	4002b000 	.word	0x4002b000

080021ac <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0aa      	sub	sp, #168	@ 0xa8
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80021b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80021be:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80021c2:	2224      	movs	r2, #36	@ 0x24
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f012 fe25 	bl	8014e16 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80021cc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
 80021dc:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80021de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021e2:	2234      	movs	r2, #52	@ 0x34
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f012 fe15 	bl	8014e16 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80021ec:	463b      	mov	r3, r7
 80021ee:	222c      	movs	r2, #44	@ 0x2c
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f012 fe0f 	bl	8014e16 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80021f8:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80021fa:	4a6b      	ldr	r2, [pc, #428]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1fc>)
 80021fc:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80021fe:	4b69      	ldr	r3, [pc, #420]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8002204:	4b67      	ldr	r3, [pc, #412]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8002206:	2204      	movs	r2, #4
 8002208:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800220a:	4b66      	ldr	r3, [pc, #408]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800220c:	2201      	movs	r2, #1
 800220e:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8002210:	237d      	movs	r3, #125	@ 0x7d
 8002212:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8002216:	2302      	movs	r3, #2
 8002218:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8002222:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002226:	4619      	mov	r1, r3
 8002228:	485e      	ldr	r0, [pc, #376]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800222a:	f002 fb6f 	bl	800490c <HAL_DSI_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8002234:	f000 fd08 	bl	8002c48 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8002238:	2301      	movs	r3, #1
 800223a:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800226a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800226e:	4619      	mov	r1, r3
 8002270:	484c      	ldr	r0, [pc, #304]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 8002272:	f003 f85f 	bl	8005334 <HAL_DSI_ConfigHostTimeouts>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800227c:	f000 fce4 	bl	8002c48 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8002280:	231c      	movs	r3, #28
 8002282:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8002284:	2321      	movs	r3, #33	@ 0x21
 8002286:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8002288:	230f      	movs	r3, #15
 800228a:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800228c:	2319      	movs	r3, #25
 800228e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8002294:	230a      	movs	r3, #10
 8002296:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8002298:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800229c:	4619      	mov	r1, r3
 800229e:	4841      	ldr	r0, [pc, #260]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80022a0:	f002 ffde 	bl	8005260 <HAL_DSI_ConfigPhyTimer>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80022aa:	f000 fccd 	bl	8002c48 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80022ae:	2104      	movs	r1, #4
 80022b0:	483c      	ldr	r0, [pc, #240]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80022b2:	f002 ffad 	bl	8005210 <HAL_DSI_ConfigFlowControl>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80022bc:	f000 fcc4 	bl	8002c48 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80022c0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80022c4:	4837      	ldr	r0, [pc, #220]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80022c6:	f003 f8fb 	bl	80054c0 <HAL_DSI_SetLowPowerRXFilter>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80022d0:	f000 fcba 	bl	8002c48 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80022d4:	2100      	movs	r1, #0
 80022d6:	4833      	ldr	r0, [pc, #204]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 80022d8:	f002 fc98 	bl	8004c0c <HAL_DSI_ConfigErrorMonitor>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80022e2:	f000 fcb1 	bl	8002c48 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 80022e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80022ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022f0:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 80022f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022f6:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80022f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 80022fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8002304:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002308:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800230a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800230e:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8002310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002314:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8002316:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800231a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800231c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002320:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8002322:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002326:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8002328:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800232c:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8002332:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002336:	4619      	mov	r1, r3
 8002338:	481a      	ldr	r0, [pc, #104]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800233a:	f002 ff0b 	bl	8005154 <HAL_DSI_ConfigCommand>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8002344:	f000 fc80 	bl	8002c48 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800234c:	2305      	movs	r3, #5
 800234e:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8002350:	23c8      	movs	r3, #200	@ 0xc8
 8002352:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8002354:	2310      	movs	r3, #16
 8002356:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800235c:	2304      	movs	r3, #4
 800235e:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8002360:	2302      	movs	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800236c:	2340      	movs	r3, #64	@ 0x40
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8002370:	2301      	movs	r3, #1
 8002372:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8002374:	463b      	mov	r3, r7
 8002376:	4619      	mov	r1, r3
 8002378:	480a      	ldr	r0, [pc, #40]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800237a:	f002 fe13 	bl	8004fa4 <HAL_DSI_ConfigAdaptedCommandMode>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8002384:	f000 fc60 	bl	8002c48 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8002388:	2100      	movs	r1, #0
 800238a:	4806      	ldr	r0, [pc, #24]	@ (80023a4 <MX_DSIHOST_DSI_Init+0x1f8>)
 800238c:	f002 fde2 	bl	8004f54 <HAL_DSI_SetGenericVCID>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8002396:	f000 fc57 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	37a8      	adds	r7, #168	@ 0xa8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000348 	.word	0x20000348
 80023a8:	40016c00 	.word	0x40016c00

080023ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023b2:	4a13      	ldr	r2, [pc, #76]	@ (8002400 <MX_I2C1_Init+0x54>)
 80023b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023b8:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <MX_I2C1_Init+0x58>)
 80023ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023bc:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d0:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023d6:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023dc:	4b07      	ldr	r3, [pc, #28]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023e8:	4804      	ldr	r0, [pc, #16]	@ (80023fc <MX_I2C1_Init+0x50>)
 80023ea:	f005 fba9 	bl	8007b40 <HAL_I2C_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023f4:	f000 fc28 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000364 	.word	0x20000364
 8002400:	40005400 	.word	0x40005400
 8002404:	000186a0 	.word	0x000186a0

08002408 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800240c:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <MX_I2C2_Init+0x50>)
 800240e:	4a13      	ldr	r2, [pc, #76]	@ (800245c <MX_I2C2_Init+0x54>)
 8002410:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002412:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002414:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <MX_I2C2_Init+0x58>)
 8002416:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002418:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <MX_I2C2_Init+0x50>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800241e:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002424:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002426:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800242a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800242c:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <MX_I2C2_Init+0x50>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002438:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <MX_I2C2_Init+0x50>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002440:	2200      	movs	r2, #0
 8002442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002444:	4804      	ldr	r0, [pc, #16]	@ (8002458 <MX_I2C2_Init+0x50>)
 8002446:	f005 fb7b 	bl	8007b40 <HAL_I2C_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002450:	f000 fbfa 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200003b8 	.word	0x200003b8
 800245c:	40005800 	.word	0x40005800
 8002460:	000186a0 	.word	0x000186a0

08002464 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08e      	sub	sp, #56	@ 0x38
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2234      	movs	r2, #52	@ 0x34
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f012 fcd0 	bl	8014e16 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002476:	4b38      	ldr	r3, [pc, #224]	@ (8002558 <MX_LTDC_Init+0xf4>)
 8002478:	4a38      	ldr	r2, [pc, #224]	@ (800255c <MX_LTDC_Init+0xf8>)
 800247a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800247c:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <MX_LTDC_Init+0xf4>)
 800247e:	2200      	movs	r2, #0
 8002480:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002482:	4b35      	ldr	r3, [pc, #212]	@ (8002558 <MX_LTDC_Init+0xf4>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002488:	4b33      	ldr	r3, [pc, #204]	@ (8002558 <MX_LTDC_Init+0xf4>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800248e:	4b32      	ldr	r3, [pc, #200]	@ (8002558 <MX_LTDC_Init+0xf4>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8002494:	4b30      	ldr	r3, [pc, #192]	@ (8002558 <MX_LTDC_Init+0xf4>)
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800249a:	4b2f      	ldr	r3, [pc, #188]	@ (8002558 <MX_LTDC_Init+0xf4>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 80024a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002558 <MX_LTDC_Init+0xf4>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 80024a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002558 <MX_LTDC_Init+0xf4>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 80024ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <MX_LTDC_Init+0xf4>)
 80024ae:	22c9      	movs	r2, #201	@ 0xc9
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 80024b2:	4b29      	ldr	r3, [pc, #164]	@ (8002558 <MX_LTDC_Init+0xf4>)
 80024b4:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80024b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 80024ba:	4b27      	ldr	r3, [pc, #156]	@ (8002558 <MX_LTDC_Init+0xf4>)
 80024bc:	22ca      	movs	r2, #202	@ 0xca
 80024be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 80024c0:	4b25      	ldr	r3, [pc, #148]	@ (8002558 <MX_LTDC_Init+0xf4>)
 80024c2:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80024c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80024c8:	4b23      	ldr	r3, [pc, #140]	@ (8002558 <MX_LTDC_Init+0xf4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80024d0:	4b21      	ldr	r3, [pc, #132]	@ (8002558 <MX_LTDC_Init+0xf4>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80024d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002558 <MX_LTDC_Init+0xf4>)
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80024e0:	481d      	ldr	r0, [pc, #116]	@ (8002558 <MX_LTDC_Init+0xf4>)
 80024e2:	f005 fc71 	bl	8007dc8 <HAL_LTDC_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 80024ec:	f000 fbac 	bl	8002c48 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 80024f4:	23c8      	movs	r3, #200	@ 0xc8
 80024f6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80024fc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002500:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002502:	2302      	movs	r3, #2
 8002504:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002506:	23ff      	movs	r3, #255	@ 0xff
 8002508:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800250e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002512:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002514:	2307      	movs	r3, #7
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002518:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 800251e:	23c8      	movs	r3, #200	@ 0xc8
 8002520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8002522:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002526:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2200      	movs	r2, #0
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	@ (8002558 <MX_LTDC_Init+0xf4>)
 8002542:	f005 fdd3 	bl	80080ec <HAL_LTDC_ConfigLayer>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 800254c:	f000 fb7c 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	3738      	adds	r7, #56	@ 0x38
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2000040c 	.word	0x2000040c
 800255c:	40016800 	.word	0x40016800

08002560 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002564:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002566:	4a13      	ldr	r2, [pc, #76]	@ (80025b4 <MX_QUADSPI_Init+0x54>)
 8002568:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800256a:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 800256c:	2201      	movs	r2, #1
 800256e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002570:	4b0f      	ldr	r3, [pc, #60]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002572:	2201      	movs	r2, #1
 8002574:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002576:	4b0e      	ldr	r3, [pc, #56]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002578:	2210      	movs	r2, #16
 800257a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 800257e:	2218      	movs	r2, #24
 8002580:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002584:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002588:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800258a:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002590:	4b07      	ldr	r3, [pc, #28]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800259c:	4804      	ldr	r0, [pc, #16]	@ (80025b0 <MX_QUADSPI_Init+0x50>)
 800259e:	f005 ffcb 	bl	8008538 <HAL_QSPI_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80025a8:	f000 fb4e 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200004b4 	.word	0x200004b4
 80025b4:	a0001000 	.word	0xa0001000

080025b8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80025bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002668 <MX_SAI1_Init+0xb0>)
 80025be:	4a2b      	ldr	r2, [pc, #172]	@ (800266c <MX_SAI1_Init+0xb4>)
 80025c0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80025c2:	4b29      	ldr	r3, [pc, #164]	@ (8002668 <MX_SAI1_Init+0xb0>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80025c8:	4b27      	ldr	r3, [pc, #156]	@ (8002668 <MX_SAI1_Init+0xb0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80025ce:	4b26      	ldr	r3, [pc, #152]	@ (8002668 <MX_SAI1_Init+0xb0>)
 80025d0:	2240      	movs	r2, #64	@ 0x40
 80025d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80025d4:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <MX_SAI1_Init+0xb0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80025da:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <MX_SAI1_Init+0xb0>)
 80025dc:	2200      	movs	r2, #0
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80025e0:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <MX_SAI1_Init+0xb0>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80025e6:	4b20      	ldr	r3, [pc, #128]	@ (8002668 <MX_SAI1_Init+0xb0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80025ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002668 <MX_SAI1_Init+0xb0>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80025f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <MX_SAI1_Init+0xb0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <MX_SAI1_Init+0xb0>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80025fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <MX_SAI1_Init+0xb0>)
 8002600:	4a1b      	ldr	r2, [pc, #108]	@ (8002670 <MX_SAI1_Init+0xb8>)
 8002602:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002604:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <MX_SAI1_Init+0xb0>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800260a:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <MX_SAI1_Init+0xb0>)
 800260c:	2200      	movs	r2, #0
 800260e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002610:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <MX_SAI1_Init+0xb0>)
 8002612:	2200      	movs	r2, #0
 8002614:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002616:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <MX_SAI1_Init+0xb0>)
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800261c:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <MX_SAI1_Init+0xb0>)
 800261e:	2208      	movs	r2, #8
 8002620:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002622:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <MX_SAI1_Init+0xb0>)
 8002624:	2201      	movs	r2, #1
 8002626:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002628:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <MX_SAI1_Init+0xb0>)
 800262a:	2200      	movs	r2, #0
 800262c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800262e:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <MX_SAI1_Init+0xb0>)
 8002630:	2200      	movs	r2, #0
 8002632:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002634:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <MX_SAI1_Init+0xb0>)
 8002636:	2200      	movs	r2, #0
 8002638:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <MX_SAI1_Init+0xb0>)
 800263c:	2200      	movs	r2, #0
 800263e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002640:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <MX_SAI1_Init+0xb0>)
 8002642:	2200      	movs	r2, #0
 8002644:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002646:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <MX_SAI1_Init+0xb0>)
 8002648:	2201      	movs	r2, #1
 800264a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800264c:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <MX_SAI1_Init+0xb0>)
 800264e:	2200      	movs	r2, #0
 8002650:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002652:	4805      	ldr	r0, [pc, #20]	@ (8002668 <MX_SAI1_Init+0xb0>)
 8002654:	f006 ff46 	bl	80094e4 <HAL_SAI_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800265e:	f000 faf3 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000500 	.word	0x20000500
 800266c:	40015804 	.word	0x40015804
 8002670:	0002ee00 	.word	0x0002ee00

08002674 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <MX_SDIO_SD_Init+0x38>)
 800267a:	4a0d      	ldr	r2, [pc, #52]	@ (80026b0 <MX_SDIO_SD_Init+0x3c>)
 800267c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800267e:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <MX_SDIO_SD_Init+0x38>)
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <MX_SDIO_SD_Init+0x38>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <MX_SDIO_SD_Init+0x38>)
 800268c:	2200      	movs	r2, #0
 800268e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <MX_SDIO_SD_Init+0x38>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002696:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <MX_SDIO_SD_Init+0x38>)
 8002698:	2200      	movs	r2, #0
 800269a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800269c:	4b03      	ldr	r3, [pc, #12]	@ (80026ac <MX_SDIO_SD_Init+0x38>)
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	20000588 	.word	0x20000588
 80026b0:	40012c00 	.word	0x40012c00

080026b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c8:	463b      	mov	r3, r7
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026d0:	4b1e      	ldr	r3, [pc, #120]	@ (800274c <MX_TIM1_Init+0x98>)
 80026d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002750 <MX_TIM1_Init+0x9c>)
 80026d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026d6:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <MX_TIM1_Init+0x98>)
 80026d8:	2200      	movs	r2, #0
 80026da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <MX_TIM1_Init+0x98>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <MX_TIM1_Init+0x98>)
 80026e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ea:	4b18      	ldr	r3, [pc, #96]	@ (800274c <MX_TIM1_Init+0x98>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026f0:	4b16      	ldr	r3, [pc, #88]	@ (800274c <MX_TIM1_Init+0x98>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <MX_TIM1_Init+0x98>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026fc:	4813      	ldr	r0, [pc, #76]	@ (800274c <MX_TIM1_Init+0x98>)
 80026fe:	f008 fa69 	bl	800abd4 <HAL_TIM_Base_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002708:	f000 fa9e 	bl	8002c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800270c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	4619      	mov	r1, r3
 8002718:	480c      	ldr	r0, [pc, #48]	@ (800274c <MX_TIM1_Init+0x98>)
 800271a:	f008 fc0b 	bl	800af34 <HAL_TIM_ConfigClockSource>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002724:	f000 fa90 	bl	8002c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002730:	463b      	mov	r3, r7
 8002732:	4619      	mov	r1, r3
 8002734:	4805      	ldr	r0, [pc, #20]	@ (800274c <MX_TIM1_Init+0x98>)
 8002736:	f008 fe33 	bl	800b3a0 <HAL_TIMEx_MasterConfigSynchronization>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002740:	f000 fa82 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002744:	bf00      	nop
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200006cc 	.word	0x200006cc
 8002750:	40010000 	.word	0x40010000

08002754 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <MX_USART3_UART_Init+0x4c>)
 800275a:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <MX_USART3_UART_Init+0x50>)
 800275c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800275e:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <MX_USART3_UART_Init+0x4c>)
 8002760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002766:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <MX_USART3_UART_Init+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800276c:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <MX_USART3_UART_Init+0x4c>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002772:	4b0b      	ldr	r3, [pc, #44]	@ (80027a0 <MX_USART3_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002778:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <MX_USART3_UART_Init+0x4c>)
 800277a:	220c      	movs	r2, #12
 800277c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277e:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <MX_USART3_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002784:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <MX_USART3_UART_Init+0x4c>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800278a:	4805      	ldr	r0, [pc, #20]	@ (80027a0 <MX_USART3_UART_Init+0x4c>)
 800278c:	f008 fe98 	bl	800b4c0 <HAL_UART_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002796:	f000 fa57 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000714 	.word	0x20000714
 80027a4:	40004800 	.word	0x40004800

080027a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027ae:	4a12      	ldr	r2, [pc, #72]	@ (80027f8 <MX_USART6_UART_Init+0x50>)
 80027b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80027b2:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027ba:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027c0:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027c6:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027cc:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027ce:	220c      	movs	r2, #12
 80027d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d2:	4b08      	ldr	r3, [pc, #32]	@ (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027de:	4805      	ldr	r0, [pc, #20]	@ (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027e0:	f008 fe6e 	bl	800b4c0 <HAL_UART_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80027ea:	f000 fa2d 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	2000075c 	.word	0x2000075c
 80027f8:	40011400 	.word	0x40011400

080027fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <MX_DMA_Init+0x6c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <MX_DMA_Init+0x6c>)
 800280c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <MX_DMA_Init+0x6c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	2039      	movs	r0, #57	@ 0x39
 8002824:	f001 fa32 	bl	8003c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002828:	2039      	movs	r0, #57	@ 0x39
 800282a:	f001 fa4b 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	203b      	movs	r0, #59	@ 0x3b
 8002834:	f001 fa2a 	bl	8003c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002838:	203b      	movs	r0, #59	@ 0x3b
 800283a:	f001 fa43 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	2045      	movs	r0, #69	@ 0x45
 8002844:	f001 fa22 	bl	8003c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002848:	2045      	movs	r0, #69	@ 0x45
 800284a:	f001 fa3b 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	2046      	movs	r0, #70	@ 0x46
 8002854:	f001 fa1a 	bl	8003c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002858:	2046      	movs	r0, #70	@ 0x46
 800285a:	f001 fa33 	bl	8003cc4 <HAL_NVIC_EnableIRQ>

}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800

0800286c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
 8002880:	615a      	str	r2, [r3, #20]
 8002882:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002884:	4b1f      	ldr	r3, [pc, #124]	@ (8002904 <MX_FMC_Init+0x98>)
 8002886:	4a20      	ldr	r2, [pc, #128]	@ (8002908 <MX_FMC_Init+0x9c>)
 8002888:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800288a:	4b1e      	ldr	r3, [pc, #120]	@ (8002904 <MX_FMC_Init+0x98>)
 800288c:	2200      	movs	r2, #0
 800288e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002890:	4b1c      	ldr	r3, [pc, #112]	@ (8002904 <MX_FMC_Init+0x98>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002896:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <MX_FMC_Init+0x98>)
 8002898:	2204      	movs	r2, #4
 800289a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800289c:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <MX_FMC_Init+0x98>)
 800289e:	2220      	movs	r2, #32
 80028a0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80028a2:	4b18      	ldr	r3, [pc, #96]	@ (8002904 <MX_FMC_Init+0x98>)
 80028a4:	2240      	movs	r2, #64	@ 0x40
 80028a6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80028a8:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <MX_FMC_Init+0x98>)
 80028aa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028ae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80028b0:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <MX_FMC_Init+0x98>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80028b6:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <MX_FMC_Init+0x98>)
 80028b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <MX_FMC_Init+0x98>)
 80028c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <MX_FMC_Init+0x98>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80028cc:	2302      	movs	r3, #2
 80028ce:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80028d0:	2307      	movs	r3, #7
 80028d2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80028d4:	2304      	movs	r3, #4
 80028d6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80028d8:	2307      	movs	r3, #7
 80028da:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80028dc:	2303      	movs	r3, #3
 80028de:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80028e0:	2302      	movs	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80028e4:	2302      	movs	r3, #2
 80028e6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	4619      	mov	r1, r3
 80028ec:	4805      	ldr	r0, [pc, #20]	@ (8002904 <MX_FMC_Init+0x98>)
 80028ee:	f008 f93d 	bl	800ab6c <HAL_SDRAM_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80028f8:	f000 f9a6 	bl	8002c48 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80028fc:	bf00      	nop
 80028fe:	3720      	adds	r7, #32
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000864 	.word	0x20000864
 8002908:	a0000140 	.word	0xa0000140

0800290c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b090      	sub	sp, #64	@ 0x40
 8002910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002926:	4bae      	ldr	r3, [pc, #696]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	4aad      	ldr	r2, [pc, #692]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 800292c:	f043 0310 	orr.w	r3, r3, #16
 8002930:	6313      	str	r3, [r2, #48]	@ 0x30
 8002932:	4bab      	ldr	r3, [pc, #684]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
 8002942:	4ba7      	ldr	r3, [pc, #668]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	4aa6      	ldr	r2, [pc, #664]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	6313      	str	r3, [r2, #48]	@ 0x30
 800294e:	4ba4      	ldr	r3, [pc, #656]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	4ba0      	ldr	r3, [pc, #640]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	4a9f      	ldr	r2, [pc, #636]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6313      	str	r3, [r2, #48]	@ 0x30
 800296a:	4b9d      	ldr	r3, [pc, #628]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	4b99      	ldr	r3, [pc, #612]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4a98      	ldr	r2, [pc, #608]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4b96      	ldr	r3, [pc, #600]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	4b92      	ldr	r3, [pc, #584]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	4a91      	ldr	r2, [pc, #580]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 800299c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a2:	4b8f      	ldr	r3, [pc, #572]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	4b8b      	ldr	r3, [pc, #556]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	4a8a      	ldr	r2, [pc, #552]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 80029b8:	f043 0308 	orr.w	r3, r3, #8
 80029bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029be:	4b88      	ldr	r3, [pc, #544]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b84      	ldr	r3, [pc, #528]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	4a83      	ldr	r2, [pc, #524]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029da:	4b81      	ldr	r3, [pc, #516]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b7d      	ldr	r3, [pc, #500]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a7c      	ldr	r2, [pc, #496]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 80029f0:	f043 0320 	orr.w	r3, r3, #32
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b7a      	ldr	r3, [pc, #488]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	4b76      	ldr	r3, [pc, #472]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	4a75      	ldr	r2, [pc, #468]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002a0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a12:	4b73      	ldr	r3, [pc, #460]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	4b6f      	ldr	r3, [pc, #444]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a6e      	ldr	r2, [pc, #440]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b6c      	ldr	r3, [pc, #432]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4b68      	ldr	r3, [pc, #416]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	4a67      	ldr	r2, [pc, #412]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002a44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4a:	4b65      	ldr	r3, [pc, #404]	@ (8002be0 <MX_GPIO_Init+0x2d4>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8002a56:	2200      	movs	r2, #0
 8002a58:	210c      	movs	r1, #12
 8002a5a:	4862      	ldr	r0, [pc, #392]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002a5c:	f002 ff22 	bl	80058a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2130      	movs	r1, #48	@ 0x30
 8002a64:	4860      	ldr	r0, [pc, #384]	@ (8002be8 <MX_GPIO_Init+0x2dc>)
 8002a66:	f002 ff1d 	bl	80058a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2108      	movs	r1, #8
 8002a6e:	485f      	ldr	r0, [pc, #380]	@ (8002bec <MX_GPIO_Init+0x2e0>)
 8002a70:	f002 ff18 	bl	80058a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2140      	movs	r1, #64	@ 0x40
 8002a78:	485d      	ldr	r0, [pc, #372]	@ (8002bf0 <MX_GPIO_Init+0x2e4>)
 8002a7a:	f002 ff13 	bl	80058a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2105      	movs	r1, #5
 8002a82:	485c      	ldr	r0, [pc, #368]	@ (8002bf4 <MX_GPIO_Init+0x2e8>)
 8002a84:	f002 ff0e 	bl	80058a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2180      	movs	r1, #128	@ 0x80
 8002a8c:	485a      	ldr	r0, [pc, #360]	@ (8002bf8 <MX_GPIO_Init+0x2ec>)
 8002a8e:	f002 ff09 	bl	80058a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2108      	movs	r1, #8
 8002a96:	4859      	ldr	r0, [pc, #356]	@ (8002bfc <MX_GPIO_Init+0x2f0>)
 8002a98:	f002 ff04 	bl	80058a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	484c      	ldr	r0, [pc, #304]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002ab4:	f002 fd32 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8002ab8:	2308      	movs	r3, #8
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ac8:	2306      	movs	r3, #6
 8002aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8002acc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4848      	ldr	r0, [pc, #288]	@ (8002bf4 <MX_GPIO_Init+0x2e8>)
 8002ad4:	f002 fd22 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002adc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ae6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aea:	4619      	mov	r1, r3
 8002aec:	4841      	ldr	r0, [pc, #260]	@ (8002bf4 <MX_GPIO_Init+0x2e8>)
 8002aee:	f002 fd15 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8002af2:	2330      	movs	r3, #48	@ 0x30
 8002af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002af6:	2311      	movs	r3, #17
 8002af8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b06:	4619      	mov	r1, r3
 8002b08:	4837      	ldr	r0, [pc, #220]	@ (8002be8 <MX_GPIO_Init+0x2dc>)
 8002b0a:	f002 fd07 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8002b0e:	2308      	movs	r3, #8
 8002b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b12:	2311      	movs	r3, #17
 8002b14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b22:	4619      	mov	r1, r3
 8002b24:	4831      	ldr	r0, [pc, #196]	@ (8002bec <MX_GPIO_Init+0x2e0>)
 8002b26:	f002 fcf9 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002b2a:	2340      	movs	r3, #64	@ 0x40
 8002b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b2e:	2311      	movs	r3, #17
 8002b30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002b3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b3e:	4619      	mov	r1, r3
 8002b40:	482b      	ldr	r0, [pc, #172]	@ (8002bf0 <MX_GPIO_Init+0x2e4>)
 8002b42:	f002 fceb 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8002b46:	2305      	movs	r3, #5
 8002b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4825      	ldr	r0, [pc, #148]	@ (8002bf4 <MX_GPIO_Init+0x2e8>)
 8002b5e:	f002 fcdd 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8002b62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b74:	2302      	movs	r3, #2
 8002b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8002b78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	481a      	ldr	r0, [pc, #104]	@ (8002be8 <MX_GPIO_Init+0x2dc>)
 8002b80:	f002 fccc 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002b84:	2304      	movs	r3, #4
 8002b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b94:	4619      	mov	r1, r3
 8002b96:	4816      	ldr	r0, [pc, #88]	@ (8002bf0 <MX_GPIO_Init+0x2e4>)
 8002b98:	f002 fcc0 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ba0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002baa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4813      	ldr	r0, [pc, #76]	@ (8002c00 <MX_GPIO_Init+0x2f4>)
 8002bb2:	f002 fcb3 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bca:	4619      	mov	r1, r3
 8002bcc:	480a      	ldr	r0, [pc, #40]	@ (8002bf8 <MX_GPIO_Init+0x2ec>)
 8002bce:	f002 fca5 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e012      	b.n	8002c04 <MX_GPIO_Init+0x2f8>
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40020c00 	.word	0x40020c00
 8002bec:	40022800 	.word	0x40022800
 8002bf0:	40021800 	.word	0x40021800
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	40021c00 	.word	0x40021c00
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	40022400 	.word	0x40022400
 8002c04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4803      	ldr	r0, [pc, #12]	@ (8002c20 <MX_GPIO_Init+0x314>)
 8002c12:	f002 fc83 	bl	800551c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c16:	bf00      	nop
 8002c18:	3740      	adds	r7, #64	@ 0x40
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40020000 	.word	0x40020000

08002c24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c36:	f000 ff2d 	bl	8003a94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40001000 	.word	0x40001000

08002c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c4c:	b672      	cpsid	i
}
 8002c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c50:	bf00      	nop
 8002c52:	e7fd      	b.n	8002c50 <Error_Handler+0x8>

08002c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <HAL_MspInit+0x58>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <HAL_MspInit+0x58>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <HAL_MspInit+0x58>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <HAL_MspInit+0x58>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8002cac <HAL_MspInit+0x58>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c86:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <HAL_MspInit+0x58>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	2005      	movs	r0, #5
 8002c98:	f000 fff8 	bl	8003c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002c9c:	2005      	movs	r0, #5
 8002c9e:	f001 f811 	bl	8003cc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002cec <HAL_CRC_MspInit+0x3c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d10d      	bne.n	8002cde <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <HAL_CRC_MspInit+0x40>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	4a09      	ldr	r2, [pc, #36]	@ (8002cf0 <HAL_CRC_MspInit+0x40>)
 8002ccc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cd2:	4b07      	ldr	r3, [pc, #28]	@ (8002cf0 <HAL_CRC_MspInit+0x40>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40023000 	.word	0x40023000
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0e      	ldr	r2, [pc, #56]	@ (8002d3c <HAL_DMA2D_MspInit+0x48>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d115      	bne.n	8002d32 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <HAL_DMA2D_MspInit+0x4c>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d40 <HAL_DMA2D_MspInit+0x4c>)
 8002d10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <HAL_DMA2D_MspInit+0x4c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	205a      	movs	r0, #90	@ 0x5a
 8002d28:	f000 ffb0 	bl	8003c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002d2c:	205a      	movs	r0, #90	@ 0x5a
 8002d2e:	f000 ffc9 	bl	8003cc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	4002b000 	.word	0x4002b000
 8002d40:	40023800 	.word	0x40023800

08002d44 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	@ 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd8 <HAL_DSI_MspInit+0x94>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d133      	bne.n	8002dce <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ddc <HAL_DSI_MspInit+0x98>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ddc <HAL_DSI_MspInit+0x98>)
 8002d70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d76:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <HAL_DSI_MspInit+0x98>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4b15      	ldr	r3, [pc, #84]	@ (8002ddc <HAL_DSI_MspInit+0x98>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	4a14      	ldr	r2, [pc, #80]	@ (8002ddc <HAL_DSI_MspInit+0x98>)
 8002d8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <HAL_DSI_MspInit+0x98>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8002d9e:	2304      	movs	r3, #4
 8002da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002daa:	2303      	movs	r3, #3
 8002dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8002dae:	230d      	movs	r3, #13
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	4809      	ldr	r0, [pc, #36]	@ (8002de0 <HAL_DSI_MspInit+0x9c>)
 8002dba:	f002 fbaf 	bl	800551c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	205c      	movs	r0, #92	@ 0x5c
 8002dc4:	f000 ff62 	bl	8003c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002dc8:	205c      	movs	r0, #92	@ 0x5c
 8002dca:	f000 ff7b 	bl	8003cc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8002dce:	bf00      	nop
 8002dd0:	3728      	adds	r7, #40	@ 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40016c00 	.word	0x40016c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40022400 	.word	0x40022400

08002de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	@ 0x30
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 031c 	add.w	r3, r7, #28
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a32      	ldr	r2, [pc, #200]	@ (8002ecc <HAL_I2C_MspInit+0xe8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d12d      	bne.n	8002e62 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	4b31      	ldr	r3, [pc, #196]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a30      	ldr	r2, [pc, #192]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002e22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e28:	2312      	movs	r3, #18
 8002e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e30:	2303      	movs	r3, #3
 8002e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e34:	2304      	movs	r3, #4
 8002e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4825      	ldr	r0, [pc, #148]	@ (8002ed4 <HAL_I2C_MspInit+0xf0>)
 8002e40:	f002 fb6c 	bl	800551c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	4b21      	ldr	r3, [pc, #132]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	4a20      	ldr	r2, [pc, #128]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002e4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e54:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e60:	e030      	b.n	8002ec4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed8 <HAL_I2C_MspInit+0xf4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d12b      	bne.n	8002ec4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	4b17      	ldr	r3, [pc, #92]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e74:	4a16      	ldr	r2, [pc, #88]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e7c:	4b14      	ldr	r3, [pc, #80]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8002e88:	2330      	movs	r3, #48	@ 0x30
 8002e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e8c:	2312      	movs	r3, #18
 8002e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e90:	2301      	movs	r3, #1
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e94:	2303      	movs	r3, #3
 8002e96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e98:	2304      	movs	r3, #4
 8002e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	480e      	ldr	r0, [pc, #56]	@ (8002edc <HAL_I2C_MspInit+0xf8>)
 8002ea4:	f002 fb3a 	bl	800551c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	4a07      	ldr	r2, [pc, #28]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002eb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002eb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eb8:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <HAL_I2C_MspInit+0xec>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3730      	adds	r7, #48	@ 0x30
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40005400 	.word	0x40005400
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40005800 	.word	0x40005800
 8002edc:	40021c00 	.word	0x40021c00

08002ee0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0e      	ldr	r2, [pc, #56]	@ (8002f28 <HAL_LTDC_MspInit+0x48>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d115      	bne.n	8002f1e <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <HAL_LTDC_MspInit+0x4c>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	4a0c      	ldr	r2, [pc, #48]	@ (8002f2c <HAL_LTDC_MspInit+0x4c>)
 8002efc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <HAL_LTDC_MspInit+0x4c>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	2058      	movs	r0, #88	@ 0x58
 8002f14:	f000 feba 	bl	8003c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002f18:	2058      	movs	r0, #88	@ 0x58
 8002f1a:	f000 fed3 	bl	8003cc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40016800 	.word	0x40016800
 8002f2c:	40023800 	.word	0x40023800

08002f30 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	@ 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a31      	ldr	r2, [pc, #196]	@ (8003014 <HAL_QSPI_MspInit+0xe4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d15b      	bne.n	800300a <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <HAL_QSPI_MspInit+0xe8>)
 8002f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003018 <HAL_QSPI_MspInit+0xe8>)
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	6393      	str	r3, [r2, #56]	@ 0x38
 8002f62:	4b2d      	ldr	r3, [pc, #180]	@ (8003018 <HAL_QSPI_MspInit+0xe8>)
 8002f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b29      	ldr	r3, [pc, #164]	@ (8003018 <HAL_QSPI_MspInit+0xe8>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	4a28      	ldr	r2, [pc, #160]	@ (8003018 <HAL_QSPI_MspInit+0xe8>)
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7e:	4b26      	ldr	r3, [pc, #152]	@ (8003018 <HAL_QSPI_MspInit+0xe8>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <HAL_QSPI_MspInit+0xe8>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	4a21      	ldr	r2, [pc, #132]	@ (8003018 <HAL_QSPI_MspInit+0xe8>)
 8002f94:	f043 0320 	orr.w	r3, r3, #32
 8002f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8003018 <HAL_QSPI_MspInit+0xe8>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8002fa6:	2340      	movs	r3, #64	@ 0x40
 8002fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002fb6:	230a      	movs	r3, #10
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4816      	ldr	r0, [pc, #88]	@ (800301c <HAL_QSPI_MspInit+0xec>)
 8002fc2:	f002 faab 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8002fc6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002fd8:	2309      	movs	r3, #9
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	480f      	ldr	r0, [pc, #60]	@ (8003020 <HAL_QSPI_MspInit+0xf0>)
 8002fe4:	f002 fa9a 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8002fe8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002ffa:	230a      	movs	r3, #10
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ffe:	f107 0314 	add.w	r3, r7, #20
 8003002:	4619      	mov	r1, r3
 8003004:	4806      	ldr	r0, [pc, #24]	@ (8003020 <HAL_QSPI_MspInit+0xf0>)
 8003006:	f002 fa89 	bl	800551c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800300a:	bf00      	nop
 800300c:	3728      	adds	r7, #40	@ 0x28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	a0001000 	.word	0xa0001000
 8003018:	40023800 	.word	0x40023800
 800301c:	40020400 	.word	0x40020400
 8003020:	40021400 	.word	0x40021400

08003024 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	@ 0x28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 0314 	add.w	r3, r7, #20
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a68      	ldr	r2, [pc, #416]	@ (80031e4 <HAL_SD_MspInit+0x1c0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f040 80c9 	bne.w	80031da <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	4b66      	ldr	r3, [pc, #408]	@ (80031e8 <HAL_SD_MspInit+0x1c4>)
 800304e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003050:	4a65      	ldr	r2, [pc, #404]	@ (80031e8 <HAL_SD_MspInit+0x1c4>)
 8003052:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003056:	6453      	str	r3, [r2, #68]	@ 0x44
 8003058:	4b63      	ldr	r3, [pc, #396]	@ (80031e8 <HAL_SD_MspInit+0x1c4>)
 800305a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	4b5f      	ldr	r3, [pc, #380]	@ (80031e8 <HAL_SD_MspInit+0x1c4>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	4a5e      	ldr	r2, [pc, #376]	@ (80031e8 <HAL_SD_MspInit+0x1c4>)
 800306e:	f043 0304 	orr.w	r3, r3, #4
 8003072:	6313      	str	r3, [r2, #48]	@ 0x30
 8003074:	4b5c      	ldr	r3, [pc, #368]	@ (80031e8 <HAL_SD_MspInit+0x1c4>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	4b58      	ldr	r3, [pc, #352]	@ (80031e8 <HAL_SD_MspInit+0x1c4>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	4a57      	ldr	r2, [pc, #348]	@ (80031e8 <HAL_SD_MspInit+0x1c4>)
 800308a:	f043 0308 	orr.w	r3, r3, #8
 800308e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003090:	4b55      	ldr	r3, [pc, #340]	@ (80031e8 <HAL_SD_MspInit+0x1c4>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 800309c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80030a0:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030aa:	2303      	movs	r3, #3
 80030ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80030ae:	230c      	movs	r3, #12
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	4619      	mov	r1, r3
 80030b8:	484c      	ldr	r0, [pc, #304]	@ (80031ec <HAL_SD_MspInit+0x1c8>)
 80030ba:	f002 fa2f 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80030be:	2304      	movs	r3, #4
 80030c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ca:	2303      	movs	r3, #3
 80030cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80030ce:	230c      	movs	r3, #12
 80030d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80030d2:	f107 0314 	add.w	r3, r7, #20
 80030d6:	4619      	mov	r1, r3
 80030d8:	4845      	ldr	r0, [pc, #276]	@ (80031f0 <HAL_SD_MspInit+0x1cc>)
 80030da:	f002 fa1f 	bl	800551c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80030de:	4b45      	ldr	r3, [pc, #276]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 80030e0:	4a45      	ldr	r2, [pc, #276]	@ (80031f8 <HAL_SD_MspInit+0x1d4>)
 80030e2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80030e4:	4b43      	ldr	r3, [pc, #268]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 80030e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030ea:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ec:	4b41      	ldr	r3, [pc, #260]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f2:	4b40      	ldr	r3, [pc, #256]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030f8:	4b3e      	ldr	r3, [pc, #248]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 80030fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030fe:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003100:	4b3c      	ldr	r3, [pc, #240]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 8003102:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003106:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003108:	4b3a      	ldr	r3, [pc, #232]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 800310a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800310e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003110:	4b38      	ldr	r3, [pc, #224]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 8003112:	2220      	movs	r2, #32
 8003114:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003116:	4b37      	ldr	r3, [pc, #220]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 8003118:	2200      	movs	r2, #0
 800311a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800311c:	4b35      	ldr	r3, [pc, #212]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 800311e:	2204      	movs	r2, #4
 8003120:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003122:	4b34      	ldr	r3, [pc, #208]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 8003124:	2203      	movs	r2, #3
 8003126:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003128:	4b32      	ldr	r3, [pc, #200]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 800312a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800312e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003130:	4b30      	ldr	r3, [pc, #192]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 8003132:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003138:	482e      	ldr	r0, [pc, #184]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 800313a:	f000 fded 	bl	8003d18 <HAL_DMA_Init>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8003144:	f7ff fd80 	bl	8002c48 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a2a      	ldr	r2, [pc, #168]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 800314c:	641a      	str	r2, [r3, #64]	@ 0x40
 800314e:	4a29      	ldr	r2, [pc, #164]	@ (80031f4 <HAL_SD_MspInit+0x1d0>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003154:	4b29      	ldr	r3, [pc, #164]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 8003156:	4a2a      	ldr	r2, [pc, #168]	@ (8003200 <HAL_SD_MspInit+0x1dc>)
 8003158:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800315a:	4b28      	ldr	r3, [pc, #160]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 800315c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003160:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003162:	4b26      	ldr	r3, [pc, #152]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 8003164:	2240      	movs	r2, #64	@ 0x40
 8003166:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003168:	4b24      	ldr	r3, [pc, #144]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800316e:	4b23      	ldr	r3, [pc, #140]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 8003170:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003174:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003176:	4b21      	ldr	r3, [pc, #132]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 8003178:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800317c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800317e:	4b1f      	ldr	r3, [pc, #124]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 8003180:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003184:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003186:	4b1d      	ldr	r3, [pc, #116]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 8003188:	2220      	movs	r2, #32
 800318a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800318c:	4b1b      	ldr	r3, [pc, #108]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 800318e:	2200      	movs	r2, #0
 8003190:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003192:	4b1a      	ldr	r3, [pc, #104]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 8003194:	2204      	movs	r2, #4
 8003196:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003198:	4b18      	ldr	r3, [pc, #96]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 800319a:	2203      	movs	r2, #3
 800319c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800319e:	4b17      	ldr	r3, [pc, #92]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 80031a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80031a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80031a6:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 80031a8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80031ac:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80031ae:	4813      	ldr	r0, [pc, #76]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 80031b0:	f000 fdb2 	bl	8003d18 <HAL_DMA_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80031ba:	f7ff fd45 	bl	8002c48 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a0e      	ldr	r2, [pc, #56]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 80031c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031c4:	4a0d      	ldr	r2, [pc, #52]	@ (80031fc <HAL_SD_MspInit+0x1d8>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2031      	movs	r0, #49	@ 0x31
 80031d0:	f000 fd5c 	bl	8003c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80031d4:	2031      	movs	r0, #49	@ 0x31
 80031d6:	f000 fd75 	bl	8003cc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80031da:	bf00      	nop
 80031dc:	3728      	adds	r7, #40	@ 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020800 	.word	0x40020800
 80031f0:	40020c00 	.word	0x40020c00
 80031f4:	2000060c 	.word	0x2000060c
 80031f8:	40026458 	.word	0x40026458
 80031fc:	2000066c 	.word	0x2000066c
 8003200:	400264a0 	.word	0x400264a0

08003204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0b      	ldr	r2, [pc, #44]	@ (8003240 <HAL_TIM_Base_MspInit+0x3c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10d      	bne.n	8003232 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b0a      	ldr	r3, [pc, #40]	@ (8003244 <HAL_TIM_Base_MspInit+0x40>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	4a09      	ldr	r2, [pc, #36]	@ (8003244 <HAL_TIM_Base_MspInit+0x40>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6453      	str	r3, [r2, #68]	@ 0x44
 8003226:	4b07      	ldr	r3, [pc, #28]	@ (8003244 <HAL_TIM_Base_MspInit+0x40>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40010000 	.word	0x40010000
 8003244:	40023800 	.word	0x40023800

08003248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	@ 0x30
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 031c 	add.w	r3, r7, #28
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a65      	ldr	r2, [pc, #404]	@ (80033fc <HAL_UART_MspInit+0x1b4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d12d      	bne.n	80032c6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	4b64      	ldr	r3, [pc, #400]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	4a63      	ldr	r2, [pc, #396]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003278:	6413      	str	r3, [r2, #64]	@ 0x40
 800327a:	4b61      	ldr	r3, [pc, #388]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	4b5d      	ldr	r3, [pc, #372]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	4a5c      	ldr	r2, [pc, #368]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 8003290:	f043 0302 	orr.w	r3, r3, #2
 8003294:	6313      	str	r3, [r2, #48]	@ 0x30
 8003296:	4b5a      	ldr	r3, [pc, #360]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80032a2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80032a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a8:	2302      	movs	r3, #2
 80032aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ac:	2301      	movs	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b0:	2303      	movs	r3, #3
 80032b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032b4:	2307      	movs	r3, #7
 80032b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b8:	f107 031c 	add.w	r3, r7, #28
 80032bc:	4619      	mov	r1, r3
 80032be:	4851      	ldr	r0, [pc, #324]	@ (8003404 <HAL_UART_MspInit+0x1bc>)
 80032c0:	f002 f92c 	bl	800551c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032c4:	e095      	b.n	80033f2 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a4f      	ldr	r2, [pc, #316]	@ (8003408 <HAL_UART_MspInit+0x1c0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	f040 8090 	bne.w	80033f2 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032da:	4a49      	ldr	r2, [pc, #292]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 80032dc:	f043 0320 	orr.w	r3, r3, #32
 80032e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032e2:	4b47      	ldr	r3, [pc, #284]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b43      	ldr	r3, [pc, #268]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	4a42      	ldr	r2, [pc, #264]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fe:	4b40      	ldr	r3, [pc, #256]	@ (8003400 <HAL_UART_MspInit+0x1b8>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_RX_Pin|ARDUINO_USART6_TX_Pin;
 800330a:	23c0      	movs	r3, #192	@ 0xc0
 800330c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003316:	2303      	movs	r3, #3
 8003318:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800331a:	2308      	movs	r3, #8
 800331c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331e:	f107 031c 	add.w	r3, r7, #28
 8003322:	4619      	mov	r1, r3
 8003324:	4839      	ldr	r0, [pc, #228]	@ (800340c <HAL_UART_MspInit+0x1c4>)
 8003326:	f002 f8f9 	bl	800551c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800332a:	4b39      	ldr	r3, [pc, #228]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 800332c:	4a39      	ldr	r2, [pc, #228]	@ (8003414 <HAL_UART_MspInit+0x1cc>)
 800332e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003330:	4b37      	ldr	r3, [pc, #220]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 8003332:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003336:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003338:	4b35      	ldr	r3, [pc, #212]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800333e:	4b34      	ldr	r3, [pc, #208]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 8003340:	2200      	movs	r2, #0
 8003342:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003344:	4b32      	ldr	r3, [pc, #200]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 8003346:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800334a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800334c:	4b30      	ldr	r3, [pc, #192]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 800334e:	2200      	movs	r2, #0
 8003350:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003352:	4b2f      	ldr	r3, [pc, #188]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003358:	4b2d      	ldr	r3, [pc, #180]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 800335a:	2200      	movs	r2, #0
 800335c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800335e:	4b2c      	ldr	r3, [pc, #176]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 8003360:	2200      	movs	r2, #0
 8003362:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003364:	4b2a      	ldr	r3, [pc, #168]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 8003366:	2200      	movs	r2, #0
 8003368:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800336a:	4829      	ldr	r0, [pc, #164]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 800336c:	f000 fcd4 	bl	8003d18 <HAL_DMA_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_UART_MspInit+0x132>
      Error_Handler();
 8003376:	f7ff fc67 	bl	8002c48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a24      	ldr	r2, [pc, #144]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 800337e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003380:	4a23      	ldr	r2, [pc, #140]	@ (8003410 <HAL_UART_MspInit+0x1c8>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 8003386:	4b24      	ldr	r3, [pc, #144]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 8003388:	4a24      	ldr	r2, [pc, #144]	@ (800341c <HAL_UART_MspInit+0x1d4>)
 800338a:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800338c:	4b22      	ldr	r3, [pc, #136]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 800338e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003392:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003394:	4b20      	ldr	r3, [pc, #128]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 8003396:	2240      	movs	r2, #64	@ 0x40
 8003398:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800339a:	4b1f      	ldr	r3, [pc, #124]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 800339c:	2200      	movs	r2, #0
 800339e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 80033a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033a6:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80033b4:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033ba:	4b17      	ldr	r3, [pc, #92]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 80033bc:	2200      	movs	r2, #0
 80033be:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033c0:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80033c6:	4814      	ldr	r0, [pc, #80]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 80033c8:	f000 fca6 	bl	8003d18 <HAL_DMA_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 80033d2:	f7ff fc39 	bl	8002c48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 80033da:	639a      	str	r2, [r3, #56]	@ 0x38
 80033dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003418 <HAL_UART_MspInit+0x1d0>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80033e2:	2200      	movs	r2, #0
 80033e4:	2100      	movs	r1, #0
 80033e6:	2047      	movs	r0, #71	@ 0x47
 80033e8:	f000 fc50 	bl	8003c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80033ec:	2047      	movs	r0, #71	@ 0x47
 80033ee:	f000 fc69 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
}
 80033f2:	bf00      	nop
 80033f4:	3730      	adds	r7, #48	@ 0x30
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40004800 	.word	0x40004800
 8003400:	40023800 	.word	0x40023800
 8003404:	40020400 	.word	0x40020400
 8003408:	40011400 	.word	0x40011400
 800340c:	40020800 	.word	0x40020800
 8003410:	200007a4 	.word	0x200007a4
 8003414:	40026428 	.word	0x40026428
 8003418:	20000804 	.word	0x20000804
 800341c:	400264b8 	.word	0x400264b8

08003420 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003434:	4b44      	ldr	r3, [pc, #272]	@ (8003548 <HAL_FMC_MspInit+0x128>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f040 8081 	bne.w	8003540 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 800343e:	4b42      	ldr	r3, [pc, #264]	@ (8003548 <HAL_FMC_MspInit+0x128>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	4b40      	ldr	r3, [pc, #256]	@ (800354c <HAL_FMC_MspInit+0x12c>)
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	4a3f      	ldr	r2, [pc, #252]	@ (800354c <HAL_FMC_MspInit+0x12c>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6393      	str	r3, [r2, #56]	@ 0x38
 8003454:	4b3d      	ldr	r3, [pc, #244]	@ (800354c <HAL_FMC_MspInit+0x12c>)
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8003460:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003464:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346e:	2303      	movs	r3, #3
 8003470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003472:	230c      	movs	r3, #12
 8003474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003476:	1d3b      	adds	r3, r7, #4
 8003478:	4619      	mov	r1, r3
 800347a:	4835      	ldr	r0, [pc, #212]	@ (8003550 <HAL_FMC_MspInit+0x130>)
 800347c:	f002 f84e 	bl	800551c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8003480:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003484:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348e:	2303      	movs	r3, #3
 8003490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003492:	230c      	movs	r3, #12
 8003494:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	4619      	mov	r1, r3
 800349a:	482e      	ldr	r0, [pc, #184]	@ (8003554 <HAL_FMC_MspInit+0x134>)
 800349c:	f002 f83e 	bl	800551c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 80034a0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80034a4:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ae:	2303      	movs	r3, #3
 80034b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034b2:	230c      	movs	r3, #12
 80034b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034b6:	1d3b      	adds	r3, r7, #4
 80034b8:	4619      	mov	r1, r3
 80034ba:	4827      	ldr	r0, [pc, #156]	@ (8003558 <HAL_FMC_MspInit+0x138>)
 80034bc:	f002 f82e 	bl	800551c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 80034c0:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 80034c4:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ce:	2303      	movs	r3, #3
 80034d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034d2:	230c      	movs	r3, #12
 80034d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034d6:	1d3b      	adds	r3, r7, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4820      	ldr	r0, [pc, #128]	@ (800355c <HAL_FMC_MspInit+0x13c>)
 80034dc:	f002 f81e 	bl	800551c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80034e0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80034e4:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ee:	2303      	movs	r3, #3
 80034f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034f2:	230c      	movs	r3, #12
 80034f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4819      	ldr	r0, [pc, #100]	@ (8003560 <HAL_FMC_MspInit+0x140>)
 80034fc:	f002 f80e 	bl	800551c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8003500:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8003504:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	2302      	movs	r3, #2
 8003508:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350e:	2303      	movs	r3, #3
 8003510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003512:	230c      	movs	r3, #12
 8003514:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	4619      	mov	r1, r3
 800351a:	4812      	ldr	r0, [pc, #72]	@ (8003564 <HAL_FMC_MspInit+0x144>)
 800351c:	f001 fffe 	bl	800551c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003520:	2301      	movs	r3, #1
 8003522:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003530:	230c      	movs	r3, #12
 8003532:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	4619      	mov	r1, r3
 8003538:	480b      	ldr	r0, [pc, #44]	@ (8003568 <HAL_FMC_MspInit+0x148>)
 800353a:	f001 ffef 	bl	800551c <HAL_GPIO_Init>
 800353e:	e000      	b.n	8003542 <HAL_FMC_MspInit+0x122>
    return;
 8003540:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000898 	.word	0x20000898
 800354c:	40023800 	.word	0x40023800
 8003550:	40021000 	.word	0x40021000
 8003554:	40021800 	.word	0x40021800
 8003558:	40020c00 	.word	0x40020c00
 800355c:	40022000 	.word	0x40022000
 8003560:	40021400 	.word	0x40021400
 8003564:	40021c00 	.word	0x40021c00
 8003568:	40020800 	.word	0x40020800

0800356c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003574:	f7ff ff54 	bl	8003420 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a26      	ldr	r2, [pc, #152]	@ (8003628 <HAL_SAI_MspInit+0xa8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d146      	bne.n	8003620 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003592:	4b26      	ldr	r3, [pc, #152]	@ (800362c <HAL_SAI_MspInit+0xac>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10d      	bne.n	80035b6 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_SAI_MspInit+0xb0>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	4a23      	ldr	r2, [pc, #140]	@ (8003630 <HAL_SAI_MspInit+0xb0>)
 80035a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035aa:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <HAL_SAI_MspInit+0xb0>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80035b6:	4b1d      	ldr	r3, [pc, #116]	@ (800362c <HAL_SAI_MspInit+0xac>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3301      	adds	r3, #1
 80035bc:	4a1b      	ldr	r2, [pc, #108]	@ (800362c <HAL_SAI_MspInit+0xac>)
 80035be:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 80035c0:	2330      	movs	r3, #48	@ 0x30
 80035c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c4:	2302      	movs	r3, #2
 80035c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80035d0:	2306      	movs	r3, #6
 80035d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	4619      	mov	r1, r3
 80035da:	4816      	ldr	r0, [pc, #88]	@ (8003634 <HAL_SAI_MspInit+0xb4>)
 80035dc:	f001 ff9e 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80035e0:	2340      	movs	r3, #64	@ 0x40
 80035e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80035f0:	2306      	movs	r3, #6
 80035f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80035f4:	f107 030c 	add.w	r3, r7, #12
 80035f8:	4619      	mov	r1, r3
 80035fa:	480f      	ldr	r0, [pc, #60]	@ (8003638 <HAL_SAI_MspInit+0xb8>)
 80035fc:	f001 ff8e 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8003600:	2380      	movs	r3, #128	@ 0x80
 8003602:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	2302      	movs	r3, #2
 8003606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360c:	2300      	movs	r3, #0
 800360e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003610:	2306      	movs	r3, #6
 8003612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003614:	f107 030c 	add.w	r3, r7, #12
 8003618:	4619      	mov	r1, r3
 800361a:	4808      	ldr	r0, [pc, #32]	@ (800363c <HAL_SAI_MspInit+0xbc>)
 800361c:	f001 ff7e 	bl	800551c <HAL_GPIO_Init>

    }
}
 8003620:	bf00      	nop
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40015804 	.word	0x40015804
 800362c:	2000089c 	.word	0x2000089c
 8003630:	40023800 	.word	0x40023800
 8003634:	40021000 	.word	0x40021000
 8003638:	40020c00 	.word	0x40020c00
 800363c:	40021800 	.word	0x40021800

08003640 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08e      	sub	sp, #56	@ 0x38
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	4b33      	ldr	r3, [pc, #204]	@ (8003724 <HAL_InitTick+0xe4>)
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	4a32      	ldr	r2, [pc, #200]	@ (8003724 <HAL_InitTick+0xe4>)
 800365a:	f043 0310 	orr.w	r3, r3, #16
 800365e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003660:	4b30      	ldr	r3, [pc, #192]	@ (8003724 <HAL_InitTick+0xe4>)
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800366c:	f107 0210 	add.w	r2, r7, #16
 8003670:	f107 0314 	add.w	r3, r7, #20
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f005 fa40 	bl	8008afc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d103      	bne.n	800368e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003686:	f005 fa11 	bl	8008aac <HAL_RCC_GetPCLK1Freq>
 800368a:	6378      	str	r0, [r7, #52]	@ 0x34
 800368c:	e004      	b.n	8003698 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800368e:	f005 fa0d 	bl	8008aac <HAL_RCC_GetPCLK1Freq>
 8003692:	4603      	mov	r3, r0
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369a:	4a23      	ldr	r2, [pc, #140]	@ (8003728 <HAL_InitTick+0xe8>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	0c9b      	lsrs	r3, r3, #18
 80036a2:	3b01      	subs	r3, #1
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80036a6:	4b21      	ldr	r3, [pc, #132]	@ (800372c <HAL_InitTick+0xec>)
 80036a8:	4a21      	ldr	r2, [pc, #132]	@ (8003730 <HAL_InitTick+0xf0>)
 80036aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80036ac:	4b1f      	ldr	r3, [pc, #124]	@ (800372c <HAL_InitTick+0xec>)
 80036ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036b4:	4a1d      	ldr	r2, [pc, #116]	@ (800372c <HAL_InitTick+0xec>)
 80036b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80036ba:	4b1c      	ldr	r3, [pc, #112]	@ (800372c <HAL_InitTick+0xec>)
 80036bc:	2200      	movs	r2, #0
 80036be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c0:	4b1a      	ldr	r3, [pc, #104]	@ (800372c <HAL_InitTick+0xec>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c6:	4b19      	ldr	r3, [pc, #100]	@ (800372c <HAL_InitTick+0xec>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80036cc:	4817      	ldr	r0, [pc, #92]	@ (800372c <HAL_InitTick+0xec>)
 80036ce:	f007 fa81 	bl	800abd4 <HAL_TIM_Base_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80036d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11b      	bne.n	8003718 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80036e0:	4812      	ldr	r0, [pc, #72]	@ (800372c <HAL_InitTick+0xec>)
 80036e2:	f007 fac7 	bl	800ac74 <HAL_TIM_Base_Start_IT>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80036ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d111      	bne.n	8003718 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036f4:	2036      	movs	r0, #54	@ 0x36
 80036f6:	f000 fae5 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b0f      	cmp	r3, #15
 80036fe:	d808      	bhi.n	8003712 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003700:	2200      	movs	r2, #0
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	2036      	movs	r0, #54	@ 0x36
 8003706:	f000 fac1 	bl	8003c8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800370a:	4a0a      	ldr	r2, [pc, #40]	@ (8003734 <HAL_InitTick+0xf4>)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	e002      	b.n	8003718 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003718:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800371c:	4618      	mov	r0, r3
 800371e:	3738      	adds	r7, #56	@ 0x38
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	431bde83 	.word	0x431bde83
 800372c:	200008a0 	.word	0x200008a0
 8003730:	40001000 	.word	0x40001000
 8003734:	20000004 	.word	0x20000004

08003738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <NMI_Handler+0x4>

08003740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003744:	bf00      	nop
 8003746:	e7fd      	b.n	8003744 <HardFault_Handler+0x4>

08003748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800374c:	bf00      	nop
 800374e:	e7fd      	b.n	800374c <MemManage_Handler+0x4>

08003750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003754:	bf00      	nop
 8003756:	e7fd      	b.n	8003754 <BusFault_Handler+0x4>

08003758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800375c:	bf00      	nop
 800375e:	e7fd      	b.n	800375c <UsageFault_Handler+0x4>

08003760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800376e:	b480      	push	{r7}
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80037ac:	4802      	ldr	r0, [pc, #8]	@ (80037b8 <SDIO_IRQHandler+0x10>)
 80037ae:	f006 fb35 	bl	8009e1c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000588 	.word	0x20000588

080037bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037c0:	4802      	ldr	r0, [pc, #8]	@ (80037cc <TIM6_DAC_IRQHandler+0x10>)
 80037c2:	f007 fac7 	bl	800ad54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200008a0 	.word	0x200008a0

080037d0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80037d4:	4802      	ldr	r0, [pc, #8]	@ (80037e0 <DMA2_Stream1_IRQHandler+0x10>)
 80037d6:	f000 fc37 	bl	8004048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200007a4 	.word	0x200007a4

080037e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80037e8:	4802      	ldr	r0, [pc, #8]	@ (80037f4 <DMA2_Stream3_IRQHandler+0x10>)
 80037ea:	f000 fc2d 	bl	8004048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	2000060c 	.word	0x2000060c

080037f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80037fc:	4802      	ldr	r0, [pc, #8]	@ (8003808 <OTG_FS_IRQHandler+0x10>)
 80037fe:	f002 fb4b 	bl	8005e98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000d10 	.word	0x20000d10

0800380c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003810:	4802      	ldr	r0, [pc, #8]	@ (800381c <DMA2_Stream6_IRQHandler+0x10>)
 8003812:	f000 fc19 	bl	8004048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	2000066c 	.word	0x2000066c

08003820 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003824:	4802      	ldr	r0, [pc, #8]	@ (8003830 <DMA2_Stream7_IRQHandler+0x10>)
 8003826:	f000 fc0f 	bl	8004048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000804 	.word	0x20000804

08003834 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003838:	4802      	ldr	r0, [pc, #8]	@ (8003844 <USART6_IRQHandler+0x10>)
 800383a:	f007 ffeb 	bl	800b814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	2000075c 	.word	0x2000075c

08003848 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800384c:	4802      	ldr	r0, [pc, #8]	@ (8003858 <LTDC_IRQHandler+0x10>)
 800384e:	f004 fb8b 	bl	8007f68 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	2000040c 	.word	0x2000040c

0800385c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003860:	4802      	ldr	r0, [pc, #8]	@ (800386c <DMA2D_IRQHandler+0x10>)
 8003862:	f000 feb0 	bl	80045c6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000308 	.word	0x20000308

08003870 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8003874:	4802      	ldr	r0, [pc, #8]	@ (8003880 <DSI_IRQHandler+0x10>)
 8003876:	f001 fa86 	bl	8004d86 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000348 	.word	0x20000348

08003884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return 1;
 8003888:	2301      	movs	r3, #1
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <_kill>:

int _kill(int pid, int sig)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800389e:	f011 fb73 	bl	8014f88 <__errno>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2216      	movs	r2, #22
 80038a6:	601a      	str	r2, [r3, #0]
  return -1;
 80038a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <_exit>:

void _exit (int status)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038bc:	f04f 31ff 	mov.w	r1, #4294967295
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ffe7 	bl	8003894 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038c6:	bf00      	nop
 80038c8:	e7fd      	b.n	80038c6 <_exit+0x12>

080038ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e00a      	b.n	80038f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038dc:	f3af 8000 	nop.w
 80038e0:	4601      	mov	r1, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	60ba      	str	r2, [r7, #8]
 80038e8:	b2ca      	uxtb	r2, r1
 80038ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	3301      	adds	r3, #1
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	dbf0      	blt.n	80038dc <_read+0x12>
  }

  return len;
 80038fa:	687b      	ldr	r3, [r7, #4]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800390c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800392c:	605a      	str	r2, [r3, #4]
  return 0;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <_isatty>:

int _isatty(int file)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003944:	2301      	movs	r3, #1
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003974:	4a14      	ldr	r2, [pc, #80]	@ (80039c8 <_sbrk+0x5c>)
 8003976:	4b15      	ldr	r3, [pc, #84]	@ (80039cc <_sbrk+0x60>)
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003980:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <_sbrk+0x64>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003988:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <_sbrk+0x64>)
 800398a:	4a12      	ldr	r2, [pc, #72]	@ (80039d4 <_sbrk+0x68>)
 800398c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800398e:	4b10      	ldr	r3, [pc, #64]	@ (80039d0 <_sbrk+0x64>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	429a      	cmp	r2, r3
 800399a:	d207      	bcs.n	80039ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800399c:	f011 faf4 	bl	8014f88 <__errno>
 80039a0:	4603      	mov	r3, r0
 80039a2:	220c      	movs	r2, #12
 80039a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295
 80039aa:	e009      	b.n	80039c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039ac:	4b08      	ldr	r3, [pc, #32]	@ (80039d0 <_sbrk+0x64>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039b2:	4b07      	ldr	r3, [pc, #28]	@ (80039d0 <_sbrk+0x64>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	4a05      	ldr	r2, [pc, #20]	@ (80039d0 <_sbrk+0x64>)
 80039bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039be:	68fb      	ldr	r3, [r7, #12]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20050000 	.word	0x20050000
 80039cc:	00000400 	.word	0x00000400
 80039d0:	200008e8 	.word	0x200008e8
 80039d4:	20001240 	.word	0x20001240

080039d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039dc:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <SystemInit+0x20>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e2:	4a05      	ldr	r2, [pc, #20]	@ (80039f8 <SystemInit+0x20>)
 80039e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003a00:	f7ff ffea 	bl	80039d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a04:	480c      	ldr	r0, [pc, #48]	@ (8003a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a06:	490d      	ldr	r1, [pc, #52]	@ (8003a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a08:	4a0d      	ldr	r2, [pc, #52]	@ (8003a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a0c:	e002      	b.n	8003a14 <LoopCopyDataInit>

08003a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a12:	3304      	adds	r3, #4

08003a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a18:	d3f9      	bcc.n	8003a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a20:	e001      	b.n	8003a26 <LoopFillZerobss>

08003a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a24:	3204      	adds	r2, #4

08003a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a28:	d3fb      	bcc.n	8003a22 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003a2a:	f011 fab3 	bl	8014f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a2e:	f7fe faa9 	bl	8001f84 <main>
  bx  lr    
 8003a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a3c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003a40:	08016260 	.word	0x08016260
  ldr r2, =_sbss
 8003a44:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003a48:	20001240 	.word	0x20001240

08003a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a4c:	e7fe      	b.n	8003a4c <ADC_IRQHandler>
	...

08003a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a54:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <HAL_Init+0x40>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0d      	ldr	r2, [pc, #52]	@ (8003a90 <HAL_Init+0x40>)
 8003a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a60:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <HAL_Init+0x40>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0a      	ldr	r2, [pc, #40]	@ (8003a90 <HAL_Init+0x40>)
 8003a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a6c:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <HAL_Init+0x40>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a07      	ldr	r2, [pc, #28]	@ (8003a90 <HAL_Init+0x40>)
 8003a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a78:	2003      	movs	r0, #3
 8003a7a:	f000 f8fc 	bl	8003c76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a7e:	200f      	movs	r0, #15
 8003a80:	f7ff fdde 	bl	8003640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a84:	f7ff f8e6 	bl	8002c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00

08003a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a98:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <HAL_IncTick+0x20>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <HAL_IncTick+0x24>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a04      	ldr	r2, [pc, #16]	@ (8003ab8 <HAL_IncTick+0x24>)
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000008 	.word	0x20000008
 8003ab8:	200008ec 	.word	0x200008ec

08003abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return uwTick;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	@ (8003ad0 <HAL_GetTick+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	200008ec 	.word	0x200008ec

08003ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7ff ffee 	bl	8003abc <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d005      	beq.n	8003afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aee:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <HAL_Delay+0x44>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003afa:	bf00      	nop
 8003afc:	f7ff ffde 	bl	8003abc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d8f7      	bhi.n	8003afc <HAL_Delay+0x28>
  {
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000008 	.word	0x20000008

08003b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <__NVIC_SetPriorityGrouping+0x44>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b4e:	4a04      	ldr	r2, [pc, #16]	@ (8003b60 <__NVIC_SetPriorityGrouping+0x44>)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	60d3      	str	r3, [r2, #12]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b68:	4b04      	ldr	r3, [pc, #16]	@ (8003b7c <__NVIC_GetPriorityGrouping+0x18>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	f003 0307 	and.w	r3, r3, #7
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	db0b      	blt.n	8003baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	f003 021f 	and.w	r2, r3, #31
 8003b98:	4907      	ldr	r1, [pc, #28]	@ (8003bb8 <__NVIC_EnableIRQ+0x38>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	e000e100 	.word	0xe000e100

08003bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	db0a      	blt.n	8003be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	490c      	ldr	r1, [pc, #48]	@ (8003c08 <__NVIC_SetPriority+0x4c>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	0112      	lsls	r2, r2, #4
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	440b      	add	r3, r1
 8003be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be4:	e00a      	b.n	8003bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	4908      	ldr	r1, [pc, #32]	@ (8003c0c <__NVIC_SetPriority+0x50>)
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	3b04      	subs	r3, #4
 8003bf4:	0112      	lsls	r2, r2, #4
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	761a      	strb	r2, [r3, #24]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000e100 	.word	0xe000e100
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b089      	sub	sp, #36	@ 0x24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f1c3 0307 	rsb	r3, r3, #7
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	bf28      	it	cs
 8003c2e:	2304      	movcs	r3, #4
 8003c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3304      	adds	r3, #4
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d902      	bls.n	8003c40 <NVIC_EncodePriority+0x30>
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3b03      	subs	r3, #3
 8003c3e:	e000      	b.n	8003c42 <NVIC_EncodePriority+0x32>
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	f04f 32ff 	mov.w	r2, #4294967295
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	401a      	ands	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c58:	f04f 31ff 	mov.w	r1, #4294967295
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	43d9      	mvns	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c68:	4313      	orrs	r3, r2
         );
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3724      	adds	r7, #36	@ 0x24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff ff4c 	bl	8003b1c <__NVIC_SetPriorityGrouping>
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9e:	f7ff ff61 	bl	8003b64 <__NVIC_GetPriorityGrouping>
 8003ca2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	6978      	ldr	r0, [r7, #20]
 8003caa:	f7ff ffb1 	bl	8003c10 <NVIC_EncodePriority>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff ff80 	bl	8003bbc <__NVIC_SetPriority>
}
 8003cbc:	bf00      	nop
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff ff54 	bl	8003b80 <__NVIC_EnableIRQ>
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e00e      	b.n	8003d10 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	795b      	ldrb	r3, [r3, #5]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fe ffd4 	bl	8002cb0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d24:	f7ff feca 	bl	8003abc <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e099      	b.n	8003e68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d54:	e00f      	b.n	8003d76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d56:	f7ff feb1 	bl	8003abc <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b05      	cmp	r3, #5
 8003d62:	d908      	bls.n	8003d76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e078      	b.n	8003e68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e8      	bne.n	8003d56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4b38      	ldr	r3, [pc, #224]	@ (8003e70 <HAL_DMA_Init+0x158>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d107      	bne.n	8003de0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0307 	bic.w	r3, r3, #7
 8003df6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d117      	bne.n	8003e3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00e      	beq.n	8003e3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fb0d 	bl	800443c <DMA_CheckFifoParam>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2240      	movs	r2, #64	@ 0x40
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003e36:	2301      	movs	r3, #1
 8003e38:	e016      	b.n	8003e68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fac4 	bl	80043d0 <DMA_CalcBaseAndBitshift>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e50:	223f      	movs	r2, #63	@ 0x3f
 8003e52:	409a      	lsls	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	f010803f 	.word	0xf010803f

08003e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_DMA_Start_IT+0x26>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e040      	b.n	8003f1c <HAL_DMA_Start_IT+0xa8>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d12f      	bne.n	8003f0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fa56 	bl	8004374 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ecc:	223f      	movs	r2, #63	@ 0x3f
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0216 	orr.w	r2, r2, #22
 8003ee2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d007      	beq.n	8003efc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0208 	orr.w	r2, r2, #8
 8003efa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e005      	b.n	8003f1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
 8003f18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f32:	f7ff fdc3 	bl	8003abc <HAL_GetTick>
 8003f36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d008      	beq.n	8003f56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2280      	movs	r2, #128	@ 0x80
 8003f48:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e052      	b.n	8003ffc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0216 	bic.w	r2, r2, #22
 8003f64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <HAL_DMA_Abort+0x62>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0208 	bic.w	r2, r2, #8
 8003f94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa6:	e013      	b.n	8003fd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fa8:	f7ff fd88 	bl	8003abc <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b05      	cmp	r3, #5
 8003fb4:	d90c      	bls.n	8003fd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e015      	b.n	8003ffc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e4      	bne.n	8003fa8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe2:	223f      	movs	r2, #63	@ 0x3f
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d004      	beq.n	8004022 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2280      	movs	r2, #128	@ 0x80
 800401c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e00c      	b.n	800403c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2205      	movs	r2, #5
 8004026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004054:	4b8e      	ldr	r3, [pc, #568]	@ (8004290 <HAL_DMA_IRQHandler+0x248>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a8e      	ldr	r2, [pc, #568]	@ (8004294 <HAL_DMA_IRQHandler+0x24c>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	0a9b      	lsrs	r3, r3, #10
 8004060:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004066:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004072:	2208      	movs	r2, #8
 8004074:	409a      	lsls	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01a      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0204 	bic.w	r2, r2, #4
 800409a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a0:	2208      	movs	r2, #8
 80040a2:	409a      	lsls	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	2201      	movs	r2, #1
 80040ba:	409a      	lsls	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d012      	beq.n	80040ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d6:	2201      	movs	r2, #1
 80040d8:	409a      	lsls	r2, r3
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e2:	f043 0202 	orr.w	r2, r3, #2
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ee:	2204      	movs	r2, #4
 80040f0:	409a      	lsls	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d012      	beq.n	8004120 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00b      	beq.n	8004120 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410c:	2204      	movs	r2, #4
 800410e:	409a      	lsls	r2, r3
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004118:	f043 0204 	orr.w	r2, r3, #4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004124:	2210      	movs	r2, #16
 8004126:	409a      	lsls	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d043      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d03c      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004142:	2210      	movs	r2, #16
 8004144:	409a      	lsls	r2, r3
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d018      	beq.n	800418a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d108      	bne.n	8004178 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d024      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
 8004176:	e01f      	b.n	80041b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01b      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4798      	blx	r3
 8004188:	e016      	b.n	80041b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d107      	bne.n	80041a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0208 	bic.w	r2, r2, #8
 80041a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041bc:	2220      	movs	r2, #32
 80041be:	409a      	lsls	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 808f 	beq.w	80042e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8087 	beq.w	80042e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041de:	2220      	movs	r2, #32
 80041e0:	409a      	lsls	r2, r3
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b05      	cmp	r3, #5
 80041f0:	d136      	bne.n	8004260 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0216 	bic.w	r2, r2, #22
 8004200:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004210:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <HAL_DMA_IRQHandler+0x1da>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0208 	bic.w	r2, r2, #8
 8004230:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004236:	223f      	movs	r2, #63	@ 0x3f
 8004238:	409a      	lsls	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004252:	2b00      	cmp	r3, #0
 8004254:	d07e      	beq.n	8004354 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
        }
        return;
 800425e:	e079      	b.n	8004354 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01d      	beq.n	80042aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10d      	bne.n	8004298 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004280:	2b00      	cmp	r3, #0
 8004282:	d031      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
 800428c:	e02c      	b.n	80042e8 <HAL_DMA_IRQHandler+0x2a0>
 800428e:	bf00      	nop
 8004290:	20000000 	.word	0x20000000
 8004294:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d023      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
 80042a8:	e01e      	b.n	80042e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10f      	bne.n	80042d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0210 	bic.w	r2, r2, #16
 80042c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d032      	beq.n	8004356 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d022      	beq.n	8004342 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2205      	movs	r2, #5
 8004300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	3301      	adds	r3, #1
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	429a      	cmp	r2, r3
 800431e:	d307      	bcc.n	8004330 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f2      	bne.n	8004314 <HAL_DMA_IRQHandler+0x2cc>
 800432e:	e000      	b.n	8004332 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004330:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
 8004352:	e000      	b.n	8004356 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004354:	bf00      	nop
    }
  }
}
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004390:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b40      	cmp	r3, #64	@ 0x40
 80043a0:	d108      	bne.n	80043b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043b2:	e007      	b.n	80043c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	3b10      	subs	r3, #16
 80043e0:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <DMA_CalcBaseAndBitshift+0x64>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043ea:	4a13      	ldr	r2, [pc, #76]	@ (8004438 <DMA_CalcBaseAndBitshift+0x68>)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d909      	bls.n	8004412 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004406:	f023 0303 	bic.w	r3, r3, #3
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004410:	e007      	b.n	8004422 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800441a:	f023 0303 	bic.w	r3, r3, #3
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	aaaaaaab 	.word	0xaaaaaaab
 8004438:	0801611c 	.word	0x0801611c

0800443c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11f      	bne.n	8004496 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d856      	bhi.n	800450a <DMA_CheckFifoParam+0xce>
 800445c:	a201      	add	r2, pc, #4	@ (adr r2, 8004464 <DMA_CheckFifoParam+0x28>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004475 	.word	0x08004475
 8004468:	08004487 	.word	0x08004487
 800446c:	08004475 	.word	0x08004475
 8004470:	0800450b 	.word	0x0800450b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004478:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d046      	beq.n	800450e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004484:	e043      	b.n	800450e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800448e:	d140      	bne.n	8004512 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004494:	e03d      	b.n	8004512 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800449e:	d121      	bne.n	80044e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d837      	bhi.n	8004516 <DMA_CheckFifoParam+0xda>
 80044a6:	a201      	add	r2, pc, #4	@ (adr r2, 80044ac <DMA_CheckFifoParam+0x70>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044bd 	.word	0x080044bd
 80044b0:	080044c3 	.word	0x080044c3
 80044b4:	080044bd 	.word	0x080044bd
 80044b8:	080044d5 	.word	0x080044d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
      break;
 80044c0:	e030      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d025      	beq.n	800451a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d2:	e022      	b.n	800451a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044dc:	d11f      	bne.n	800451e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044e2:	e01c      	b.n	800451e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d903      	bls.n	80044f2 <DMA_CheckFifoParam+0xb6>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d003      	beq.n	80044f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044f0:	e018      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
      break;
 80044f6:	e015      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00e      	beq.n	8004522 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
      break;
 8004508:	e00b      	b.n	8004522 <DMA_CheckFifoParam+0xe6>
      break;
 800450a:	bf00      	nop
 800450c:	e00a      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;
 800450e:	bf00      	nop
 8004510:	e008      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;
 8004512:	bf00      	nop
 8004514:	e006      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;
 8004516:	bf00      	nop
 8004518:	e004      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;
 800451a:	bf00      	nop
 800451c:	e002      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;   
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <DMA_CheckFifoParam+0xe8>
      break;
 8004522:	bf00      	nop
    }
  } 
  
  return status; 
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop

08004534 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e03b      	b.n	80045be <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe fbca 	bl	8002cf4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004584:	f023 0107 	bic.w	r1, r3, #7
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800459e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68d1      	ldr	r1, [r2, #12]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	430b      	orrs	r3, r1
 80045ac:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d026      	beq.n	8004636 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d021      	beq.n	8004636 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004600:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004606:	f043 0201 	orr.w	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2201      	movs	r2, #1
 8004614:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2204      	movs	r2, #4
 800461a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d026      	beq.n	800468e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d021      	beq.n	800468e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004658:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2220      	movs	r2, #32
 8004660:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004666:	f043 0202 	orr.w	r2, r3, #2
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2204      	movs	r2, #4
 8004672:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d026      	beq.n	80046e6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d021      	beq.n	80046e6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046b0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2208      	movs	r2, #8
 80046b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046be:	f043 0204 	orr.w	r2, r3, #4
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2204      	movs	r2, #4
 80046ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d013      	beq.n	8004718 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00e      	beq.n	8004718 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004708:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2204      	movs	r2, #4
 8004710:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f853 	bl	80047be <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d024      	beq.n	800476c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01f      	beq.n	800476c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800473a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2202      	movs	r2, #2
 8004742:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	d01f      	beq.n	80047b6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01a      	beq.n	80047b6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800478e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2210      	movs	r2, #16
 8004796:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f80e 	bl	80047d2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
	...

080047e8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_DMA2D_ConfigLayer+0x20>
 8004804:	2302      	movs	r3, #2
 8004806:	e079      	b.n	80048fc <HAL_DMA2D_ConfigLayer+0x114>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	3318      	adds	r3, #24
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004832:	4b35      	ldr	r3, [pc, #212]	@ (8004908 <HAL_DMA2D_ConfigLayer+0x120>)
 8004834:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b0a      	cmp	r3, #10
 800483c:	d003      	beq.n	8004846 <HAL_DMA2D_ConfigLayer+0x5e>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b09      	cmp	r3, #9
 8004844:	d107      	bne.n	8004856 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e005      	b.n	8004862 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	061b      	lsls	r3, r3, #24
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d120      	bne.n	80048aa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	43db      	mvns	r3, r3
 8004872:	ea02 0103 	and.w	r1, r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	430a      	orrs	r2, r1
 800487e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b0a      	cmp	r3, #10
 8004890:	d003      	beq.n	800489a <HAL_DMA2D_ConfigLayer+0xb2>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b09      	cmp	r3, #9
 8004898:	d127      	bne.n	80048ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80048a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048a8:	e01f      	b.n	80048ea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	69da      	ldr	r2, [r3, #28]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	43db      	mvns	r3, r3
 80048b4:	ea02 0103 	and.w	r1, r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	430a      	orrs	r2, r1
 80048c0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b0a      	cmp	r3, #10
 80048d2:	d003      	beq.n	80048dc <HAL_DMA2D_ConfigLayer+0xf4>
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b09      	cmp	r3, #9
 80048da:	d106      	bne.n	80048ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80048e8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	ff03000f 	.word	0xff03000f

0800490c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	@ 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e16e      	b.n	8004bfe <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	7c5b      	ldrb	r3, [r3, #17]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fe fa0a 	bl	8002d44 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2203      	movs	r2, #3
 8004934:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800494a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8004956:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800495e:	f7ff f8ad 	bl	8003abc <HAL_GetTick>
 8004962:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004964:	e009      	b.n	800497a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004966:	f7ff f8a9 	bl	8003abc <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004974:	d901      	bls.n	800497a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e141      	b.n	8004bfe <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004982:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0ed      	beq.n	8004966 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 800499a:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800499e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80049b6:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80049be:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80049f2:	2001      	movs	r0, #1
 80049f4:	f7ff f86e 	bl	8003ad4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80049f8:	f7ff f860 	bl	8003abc <HAL_GetTick>
 80049fc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80049fe:	e009      	b.n	8004a14 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004a00:	f7ff f85c 	bl	8003abc <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a0e:	d901      	bls.n	8004a14 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0f4      	b.n	8004bfe <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0ed      	beq.n	8004a00 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	605a      	str	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a54:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6899      	ldr	r1, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0202 	orr.w	r2, r2, #2
 8004a78:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0204 	orr.w	r2, r2, #4
 8004a8c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0203 	bic.w	r2, r2, #3
 8004aa0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aba:	f7fe ffff 	bl	8003abc <HAL_GetTick>
 8004abe:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d123      	bne.n	8004b18 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8004ad0:	e00c      	b.n	8004aec <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004ad2:	f7fe fff3 	bl	8003abc <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ae0:	d904      	bls.n	8004aec <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e088      	b.n	8004bfe <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004af4:	f003 0314 	and.w	r3, r3, #20
 8004af8:	2b14      	cmp	r3, #20
 8004afa:	d1ea      	bne.n	8004ad2 <HAL_DSI_Init+0x1c6>
 8004afc:	e014      	b.n	8004b28 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004afe:	f7fe ffdd 	bl	8003abc <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b0c:	d904      	bls.n	8004b18 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e072      	b.n	8004bfe <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b20:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8004b24:	2b94      	cmp	r3, #148	@ 0x94
 8004b26:	d1ea      	bne.n	8004afe <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_DSI_Init+0x22a>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	e000      	b.n	8004b38 <HAL_DSI_Init+0x22c>
 8004b36:	2301      	movs	r3, #1
 8004b38:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	4a32      	ldr	r2, [pc, #200]	@ (8004c08 <HAL_DSI_Init+0x2fc>)
 8004b3e:	fb03 f202 	mul.w	r2, r3, r2
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004b6e:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	605a      	str	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0203 	bic.w	r2, r2, #3
 8004bd2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0201 	orr.w	r2, r2, #1
 8004bec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3728      	adds	r7, #40	@ 0x28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	003d0900 	.word	0x003d0900

08004c0c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	7c1b      	ldrb	r3, [r3, #16]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_DSI_ConfigErrorMonitor+0x16>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0ab      	b.n	8004d7a <HAL_DSI_ConfigErrorMonitor+0x16e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00b      	beq.n	8004c64 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004c5c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004c60:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8004c7e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d009      	beq.n	8004ca0 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0201 	orr.w	r2, r2, #1
 8004c9c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0202 	orr.w	r2, r2, #2
 8004cba:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d009      	beq.n	8004cdc <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 020c 	orr.w	r2, r2, #12
 8004cd8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0210 	orr.w	r2, r2, #16
 8004cf6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d009      	beq.n	8004d18 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0220 	orr.w	r2, r2, #32
 8004d14:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d32:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d50:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8004d6e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00f      	beq.n	8004dbe <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f8ad 	bl	8004f18 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00f      	beq.n	8004dee <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f89f 	bl	8004f2c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 808c 	beq.w	8004f10 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e00:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e18:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	4013      	ands	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f043 0201 	orr.w	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f043 0202 	orr.w	r2, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f043 0204 	orr.w	r2, r3, #4
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f043 0208 	orr.w	r2, r3, #8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f043 0210 	orr.w	r2, r3, #16
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d005      	beq.n	8004ed6 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f818 	bl	8004f40 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	7c1b      	ldrb	r3, [r3, #16]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_DSI_SetGenericVCID+0x16>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e016      	b.n	8004f98 <HAL_DSI_SetGenericVCID+0x44>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0203 	bic.w	r2, r2, #3
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	7c1b      	ldrb	r3, [r3, #16]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e0c5      	b.n	8005146 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0203 	bic.w	r2, r2, #3
 8005006:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0207 	bic.w	r2, r2, #7
 8005028:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6959      	ldr	r1, [r3, #20]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	431a      	orrs	r2, r3
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 020f 	bic.w	r2, r2, #15
 8005056:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6919      	ldr	r1, [r3, #16]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 020e 	bic.w	r2, r2, #14
 800507a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	005a      	lsls	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80050c8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	431a      	orrs	r2, r3
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0202 	orr.w	r2, r2, #2
 800513a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
	...

08005154 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	7c1b      	ldrb	r3, [r3, #16]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_DSI_ConfigCommand+0x16>
 8005166:	2302      	movs	r3, #2
 8005168:	e049      	b.n	80051fe <HAL_DSI_ConfigCommand+0xaa>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4b24      	ldr	r3, [pc, #144]	@ (800520c <HAL_DSI_ConfigCommand+0xb8>)
 800517c:	400b      	ands	r3, r1
 800517e:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800518e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8005194:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800519a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80051a0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80051a6:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80051ac:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80051b2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80051b8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80051be:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80051c4:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80051ca:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0202 	bic.w	r2, r2, #2
 80051e2:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	fef080ff 	.word	0xfef080ff

08005210 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	7c1b      	ldrb	r3, [r3, #16]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_DSI_ConfigFlowControl+0x16>
 8005222:	2302      	movs	r3, #2
 8005224:	e016      	b.n	8005254 <HAL_DSI_ConfigFlowControl+0x44>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 021f 	bic.w	r2, r2, #31
 800523a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	7c1b      	ldrb	r3, [r3, #16]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_DSI_ConfigPhyTimer+0x16>
 8005272:	2302      	movs	r3, #2
 8005274:	e058      	b.n	8005328 <HAL_DSI_ConfigPhyTimer+0xc8>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4293      	cmp	r3, r2
 8005286:	bf38      	it	cc
 8005288:	4613      	movcc	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800529c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	041a      	lsls	r2, r3, #16
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80052ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005304:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	021a      	lsls	r2, r3, #8
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	7c1b      	ldrb	r3, [r3, #16]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_DSI_ConfigHostTimeouts+0x16>
 8005346:	2302      	movs	r3, #2
 8005348:	e0b4      	b.n	80054b4 <HAL_DSI_ConfigHostTimeouts+0x180>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800535e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6899      	ldr	r1, [r3, #8]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	021a      	lsls	r2, r3, #8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	b292      	uxth	r2, r2
 8005380:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	041a      	lsls	r2, r3, #16
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6812      	ldr	r2, [r2, #0]
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	041b      	lsls	r3, r3, #16
 80053a4:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	0c1b      	lsrs	r3, r3, #16
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	0c1b      	lsrs	r3, r3, #16
 80053e8:	041b      	lsls	r3, r3, #16
 80053ea:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	0c1b      	lsrs	r3, r3, #16
 8005412:	041b      	lsls	r3, r3, #16
 8005414:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800543e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	0c1b      	lsrs	r3, r3, #16
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	69da      	ldr	r2, [r3, #28]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	0c1b      	lsrs	r3, r3, #16
 8005490:	041b      	lsls	r3, r3, #16
 8005492:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	7c1b      	ldrb	r3, [r3, #16]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e01b      	b.n	800550e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 80054ec:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	065a      	lsls	r2, r3, #25
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800551c:	b480      	push	{r7}
 800551e:	b089      	sub	sp, #36	@ 0x24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800552e:	2300      	movs	r3, #0
 8005530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e177      	b.n	8005828 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005538:	2201      	movs	r2, #1
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4013      	ands	r3, r2
 800554a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	429a      	cmp	r2, r3
 8005552:	f040 8166 	bne.w	8005822 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b01      	cmp	r3, #1
 8005560:	d005      	beq.n	800556e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800556a:	2b02      	cmp	r3, #2
 800556c:	d130      	bne.n	80055d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	2203      	movs	r2, #3
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	43db      	mvns	r3, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4013      	ands	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	4313      	orrs	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055a4:	2201      	movs	r2, #1
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	43db      	mvns	r3, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4013      	ands	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	091b      	lsrs	r3, r3, #4
 80055ba:	f003 0201 	and.w	r2, r3, #1
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d017      	beq.n	800560c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	2203      	movs	r2, #3
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	43db      	mvns	r3, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4013      	ands	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4313      	orrs	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d123      	bne.n	8005660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	08da      	lsrs	r2, r3, #3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3208      	adds	r2, #8
 8005620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	220f      	movs	r2, #15
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4013      	ands	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	4313      	orrs	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	08da      	lsrs	r2, r3, #3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3208      	adds	r2, #8
 800565a:	69b9      	ldr	r1, [r7, #24]
 800565c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	2203      	movs	r2, #3
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	43db      	mvns	r3, r3
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	4013      	ands	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 0203 	and.w	r2, r3, #3
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4313      	orrs	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80c0 	beq.w	8005822 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	4b66      	ldr	r3, [pc, #408]	@ (8005840 <HAL_GPIO_Init+0x324>)
 80056a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056aa:	4a65      	ldr	r2, [pc, #404]	@ (8005840 <HAL_GPIO_Init+0x324>)
 80056ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80056b2:	4b63      	ldr	r3, [pc, #396]	@ (8005840 <HAL_GPIO_Init+0x324>)
 80056b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056be:	4a61      	ldr	r2, [pc, #388]	@ (8005844 <HAL_GPIO_Init+0x328>)
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	3302      	adds	r3, #2
 80056c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	220f      	movs	r2, #15
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43db      	mvns	r3, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4013      	ands	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a58      	ldr	r2, [pc, #352]	@ (8005848 <HAL_GPIO_Init+0x32c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d037      	beq.n	800575a <HAL_GPIO_Init+0x23e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a57      	ldr	r2, [pc, #348]	@ (800584c <HAL_GPIO_Init+0x330>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d031      	beq.n	8005756 <HAL_GPIO_Init+0x23a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a56      	ldr	r2, [pc, #344]	@ (8005850 <HAL_GPIO_Init+0x334>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02b      	beq.n	8005752 <HAL_GPIO_Init+0x236>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a55      	ldr	r2, [pc, #340]	@ (8005854 <HAL_GPIO_Init+0x338>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d025      	beq.n	800574e <HAL_GPIO_Init+0x232>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a54      	ldr	r2, [pc, #336]	@ (8005858 <HAL_GPIO_Init+0x33c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01f      	beq.n	800574a <HAL_GPIO_Init+0x22e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a53      	ldr	r2, [pc, #332]	@ (800585c <HAL_GPIO_Init+0x340>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d019      	beq.n	8005746 <HAL_GPIO_Init+0x22a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a52      	ldr	r2, [pc, #328]	@ (8005860 <HAL_GPIO_Init+0x344>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_GPIO_Init+0x226>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a51      	ldr	r2, [pc, #324]	@ (8005864 <HAL_GPIO_Init+0x348>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00d      	beq.n	800573e <HAL_GPIO_Init+0x222>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a50      	ldr	r2, [pc, #320]	@ (8005868 <HAL_GPIO_Init+0x34c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <HAL_GPIO_Init+0x21e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a4f      	ldr	r2, [pc, #316]	@ (800586c <HAL_GPIO_Init+0x350>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d101      	bne.n	8005736 <HAL_GPIO_Init+0x21a>
 8005732:	2309      	movs	r3, #9
 8005734:	e012      	b.n	800575c <HAL_GPIO_Init+0x240>
 8005736:	230a      	movs	r3, #10
 8005738:	e010      	b.n	800575c <HAL_GPIO_Init+0x240>
 800573a:	2308      	movs	r3, #8
 800573c:	e00e      	b.n	800575c <HAL_GPIO_Init+0x240>
 800573e:	2307      	movs	r3, #7
 8005740:	e00c      	b.n	800575c <HAL_GPIO_Init+0x240>
 8005742:	2306      	movs	r3, #6
 8005744:	e00a      	b.n	800575c <HAL_GPIO_Init+0x240>
 8005746:	2305      	movs	r3, #5
 8005748:	e008      	b.n	800575c <HAL_GPIO_Init+0x240>
 800574a:	2304      	movs	r3, #4
 800574c:	e006      	b.n	800575c <HAL_GPIO_Init+0x240>
 800574e:	2303      	movs	r3, #3
 8005750:	e004      	b.n	800575c <HAL_GPIO_Init+0x240>
 8005752:	2302      	movs	r3, #2
 8005754:	e002      	b.n	800575c <HAL_GPIO_Init+0x240>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <HAL_GPIO_Init+0x240>
 800575a:	2300      	movs	r3, #0
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	f002 0203 	and.w	r2, r2, #3
 8005762:	0092      	lsls	r2, r2, #2
 8005764:	4093      	lsls	r3, r2
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800576c:	4935      	ldr	r1, [pc, #212]	@ (8005844 <HAL_GPIO_Init+0x328>)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	089b      	lsrs	r3, r3, #2
 8005772:	3302      	adds	r3, #2
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800577a:	4b3d      	ldr	r3, [pc, #244]	@ (8005870 <HAL_GPIO_Init+0x354>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	43db      	mvns	r3, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4013      	ands	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800579e:	4a34      	ldr	r2, [pc, #208]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057a4:	4b32      	ldr	r3, [pc, #200]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	43db      	mvns	r3, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4013      	ands	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057c8:	4a29      	ldr	r2, [pc, #164]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057ce:	4b28      	ldr	r3, [pc, #160]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	43db      	mvns	r3, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800581c:	4a14      	ldr	r2, [pc, #80]	@ (8005870 <HAL_GPIO_Init+0x354>)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	3301      	adds	r3, #1
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b0f      	cmp	r3, #15
 800582c:	f67f ae84 	bls.w	8005538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	3724      	adds	r7, #36	@ 0x24
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40023800 	.word	0x40023800
 8005844:	40013800 	.word	0x40013800
 8005848:	40020000 	.word	0x40020000
 800584c:	40020400 	.word	0x40020400
 8005850:	40020800 	.word	0x40020800
 8005854:	40020c00 	.word	0x40020c00
 8005858:	40021000 	.word	0x40021000
 800585c:	40021400 	.word	0x40021400
 8005860:	40021800 	.word	0x40021800
 8005864:	40021c00 	.word	0x40021c00
 8005868:	40022000 	.word	0x40022000
 800586c:	40022400 	.word	0x40022400
 8005870:	40013c00 	.word	0x40013c00

08005874 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	887b      	ldrh	r3, [r7, #2]
 8005886:	4013      	ands	r3, r2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
 8005890:	e001      	b.n	8005896 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005896:	7bfb      	ldrb	r3, [r7, #15]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	807b      	strh	r3, [r7, #2]
 80058b0:	4613      	mov	r3, r2
 80058b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058b4:	787b      	ldrb	r3, [r7, #1]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ba:	887a      	ldrh	r2, [r7, #2]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058c0:	e003      	b.n	80058ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058c2:	887b      	ldrh	r3, [r7, #2]
 80058c4:	041a      	lsls	r2, r3, #16
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	619a      	str	r2, [r3, #24]
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b086      	sub	sp, #24
 80058da:	af02      	add	r7, sp, #8
 80058dc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e059      	b.n	800599c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f00e fbe8 	bl	80140d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2203      	movs	r2, #3
 800590c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005916:	d102      	bne.n	800591e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f007 ff2d 	bl	800d782 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	7c1a      	ldrb	r2, [r3, #16]
 8005930:	f88d 2000 	strb.w	r2, [sp]
 8005934:	3304      	adds	r3, #4
 8005936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005938:	f007 feae 	bl	800d698 <USB_CoreInit>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e026      	b.n	800599c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2101      	movs	r1, #1
 8005954:	4618      	mov	r0, r3
 8005956:	f007 ff25 	bl	800d7a4 <USB_SetCurrentMode>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e017      	b.n	800599c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	7c1a      	ldrb	r2, [r3, #16]
 8005974:	f88d 2000 	strb.w	r2, [sp]
 8005978:	3304      	adds	r3, #4
 800597a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800597c:	f008 f8c8 	bl	800db10 <USB_HostInit>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d005      	beq.n	8005992 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e004      	b.n	800599c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80059a4:	b590      	push	{r4, r7, lr}
 80059a6:	b08b      	sub	sp, #44	@ 0x2c
 80059a8:	af04      	add	r7, sp, #16
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	4608      	mov	r0, r1
 80059ae:	4611      	mov	r1, r2
 80059b0:	461a      	mov	r2, r3
 80059b2:	4603      	mov	r3, r0
 80059b4:	70fb      	strb	r3, [r7, #3]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70bb      	strb	r3, [r7, #2]
 80059ba:	4613      	mov	r3, r2
 80059bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80059be:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80059c0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_HCD_HC_Init+0x2c>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e09d      	b.n	8005b0c <HAL_HCD_HC_Init+0x168>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	3319      	adds	r3, #25
 80059e8:	2200      	movs	r2, #0
 80059ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	3314      	adds	r3, #20
 80059fc:	787a      	ldrb	r2, [r7, #1]
 80059fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005a00:	78fa      	ldrb	r2, [r7, #3]
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3315      	adds	r3, #21
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005a14:	78fa      	ldrb	r2, [r7, #3]
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	3326      	adds	r3, #38	@ 0x26
 8005a24:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005a28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005a2a:	78fa      	ldrb	r2, [r7, #3]
 8005a2c:	78bb      	ldrb	r3, [r7, #2]
 8005a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a32:	b2d8      	uxtb	r0, r3
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	3316      	adds	r3, #22
 8005a42:	4602      	mov	r2, r0
 8005a44:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fbc8 	bl	80061e0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005a50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	da0a      	bge.n	8005a6e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005a58:	78fa      	ldrb	r2, [r7, #3]
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	3317      	adds	r3, #23
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	e009      	b.n	8005a82 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005a6e:	78fa      	ldrb	r2, [r7, #3]
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	4613      	mov	r3, r2
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	1a9b      	subs	r3, r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	3317      	adds	r3, #23
 8005a7e:	2200      	movs	r2, #0
 8005a80:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f008 f99a 	bl	800ddc0 <USB_GetHostSpeed>
 8005a8c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005a8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d10b      	bne.n	8005aae <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8005a96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d107      	bne.n	8005aae <HAL_HCD_HC_Init+0x10a>
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d104      	bne.n	8005aae <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2bbc      	cmp	r3, #188	@ 0xbc
 8005aa8:	d901      	bls.n	8005aae <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005aaa:	23bc      	movs	r3, #188	@ 0xbc
 8005aac:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005aae:	78fa      	ldrb	r2, [r7, #3]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	3318      	adds	r3, #24
 8005abe:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005ac2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	b298      	uxth	r0, r3
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	3328      	adds	r3, #40	@ 0x28
 8005ad8:	4602      	mov	r2, r0
 8005ada:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	787c      	ldrb	r4, [r7, #1]
 8005ae6:	78ba      	ldrb	r2, [r7, #2]
 8005ae8:	78f9      	ldrb	r1, [r7, #3]
 8005aea:	9302      	str	r3, [sp, #8]
 8005aec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005af0:	9301      	str	r3, [sp, #4]
 8005af2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	4623      	mov	r3, r4
 8005afa:	f008 f989 	bl	800de10 <USB_HC_Init>
 8005afe:	4603      	mov	r3, r0
 8005b00:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd90      	pop	{r4, r7, pc}

08005b14 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_HCD_HC_Halt+0x1e>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e00f      	b.n	8005b52 <HAL_HCD_HC_Halt+0x3e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	78fa      	ldrb	r2, [r7, #3]
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f008 fd1b 	bl	800e57e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	4608      	mov	r0, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	70fb      	strb	r3, [r7, #3]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	70bb      	strb	r3, [r7, #2]
 8005b72:	4613      	mov	r3, r2
 8005b74:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005b76:	78fa      	ldrb	r2, [r7, #3]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	3317      	adds	r3, #23
 8005b86:	78ba      	ldrb	r2, [r7, #2]
 8005b88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005b8a:	78fa      	ldrb	r2, [r7, #3]
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	3326      	adds	r3, #38	@ 0x26
 8005b9a:	787a      	ldrb	r2, [r7, #1]
 8005b9c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005b9e:	7c3b      	ldrb	r3, [r7, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d114      	bne.n	8005bce <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005ba4:	78fa      	ldrb	r2, [r7, #3]
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	1a9b      	subs	r3, r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	332a      	adds	r3, #42	@ 0x2a
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005bb8:	78fa      	ldrb	r2, [r7, #3]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	3319      	adds	r3, #25
 8005bc8:	7f3a      	ldrb	r2, [r7, #28]
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	e009      	b.n	8005be2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005bce:	78fa      	ldrb	r2, [r7, #3]
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	332a      	adds	r3, #42	@ 0x2a
 8005bde:	2202      	movs	r2, #2
 8005be0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005be2:	787b      	ldrb	r3, [r7, #1]
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	f200 8102 	bhi.w	8005dee <HAL_HCD_HC_SubmitRequest+0x292>
 8005bea:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005dd9 	.word	0x08005dd9
 8005bf8:	08005cc5 	.word	0x08005cc5
 8005bfc:	08005d4f 	.word	0x08005d4f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8005c00:	7c3b      	ldrb	r3, [r7, #16]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	f040 80f5 	bne.w	8005df2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8005c08:	78bb      	ldrb	r3, [r7, #2]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d12d      	bne.n	8005c6a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8005c0e:	8b3b      	ldrh	r3, [r7, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	333d      	adds	r3, #61	@ 0x3d
 8005c24:	2201      	movs	r2, #1
 8005c26:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c28:	78fa      	ldrb	r2, [r7, #3]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	333d      	adds	r3, #61	@ 0x3d
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	332a      	adds	r3, #42	@ 0x2a
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8005c52:	e0ce      	b.n	8005df2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	332a      	adds	r3, #42	@ 0x2a
 8005c64:	2202      	movs	r2, #2
 8005c66:	701a      	strb	r2, [r3, #0]
      break;
 8005c68:	e0c3      	b.n	8005df2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	331a      	adds	r3, #26
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	f040 80b8 	bne.w	8005df2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8005c82:	78fa      	ldrb	r2, [r7, #3]
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	333c      	adds	r3, #60	@ 0x3c
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c98:	78fa      	ldrb	r2, [r7, #3]
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	332a      	adds	r3, #42	@ 0x2a
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]
      break;
 8005cac:	e0a1      	b.n	8005df2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	332a      	adds	r3, #42	@ 0x2a
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	701a      	strb	r2, [r3, #0]
      break;
 8005cc2:	e096      	b.n	8005df2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005cc4:	78bb      	ldrb	r3, [r7, #2]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d120      	bne.n	8005d0c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005cca:	78fa      	ldrb	r2, [r7, #3]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	333d      	adds	r3, #61	@ 0x3d
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005ce0:	78fa      	ldrb	r2, [r7, #3]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	332a      	adds	r3, #42	@ 0x2a
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005cf4:	e07e      	b.n	8005df4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	332a      	adds	r3, #42	@ 0x2a
 8005d06:	2202      	movs	r2, #2
 8005d08:	701a      	strb	r2, [r3, #0]
      break;
 8005d0a:	e073      	b.n	8005df4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005d0c:	78fa      	ldrb	r2, [r7, #3]
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	333c      	adds	r3, #60	@ 0x3c
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d22:	78fa      	ldrb	r2, [r7, #3]
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	4613      	mov	r3, r2
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	440b      	add	r3, r1
 8005d30:	332a      	adds	r3, #42	@ 0x2a
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
      break;
 8005d36:	e05d      	b.n	8005df4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d38:	78fa      	ldrb	r2, [r7, #3]
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	1a9b      	subs	r3, r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	332a      	adds	r3, #42	@ 0x2a
 8005d48:	2202      	movs	r2, #2
 8005d4a:	701a      	strb	r2, [r3, #0]
      break;
 8005d4c:	e052      	b.n	8005df4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005d4e:	78bb      	ldrb	r3, [r7, #2]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d120      	bne.n	8005d96 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	1a9b      	subs	r3, r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	333d      	adds	r3, #61	@ 0x3d
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d6a:	78fa      	ldrb	r2, [r7, #3]
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	332a      	adds	r3, #42	@ 0x2a
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005d7e:	e039      	b.n	8005df4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d80:	78fa      	ldrb	r2, [r7, #3]
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	4613      	mov	r3, r2
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	1a9b      	subs	r3, r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	332a      	adds	r3, #42	@ 0x2a
 8005d90:	2202      	movs	r2, #2
 8005d92:	701a      	strb	r2, [r3, #0]
      break;
 8005d94:	e02e      	b.n	8005df4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005d96:	78fa      	ldrb	r2, [r7, #3]
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	440b      	add	r3, r1
 8005da4:	333c      	adds	r3, #60	@ 0x3c
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	332a      	adds	r3, #42	@ 0x2a
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	701a      	strb	r2, [r3, #0]
      break;
 8005dc0:	e018      	b.n	8005df4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005dc2:	78fa      	ldrb	r2, [r7, #3]
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	1a9b      	subs	r3, r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	332a      	adds	r3, #42	@ 0x2a
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	701a      	strb	r2, [r3, #0]
      break;
 8005dd6:	e00d      	b.n	8005df4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005dd8:	78fa      	ldrb	r2, [r7, #3]
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	332a      	adds	r3, #42	@ 0x2a
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
      break;
 8005dec:	e002      	b.n	8005df4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8005dee:	bf00      	nop
 8005df0:	e000      	b.n	8005df4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8005df2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005df4:	78fa      	ldrb	r2, [r7, #3]
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	332c      	adds	r3, #44	@ 0x2c
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005e08:	78fa      	ldrb	r2, [r7, #3]
 8005e0a:	8b39      	ldrh	r1, [r7, #24]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4403      	add	r3, r0
 8005e18:	3334      	adds	r3, #52	@ 0x34
 8005e1a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	4613      	mov	r3, r2
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	1a9b      	subs	r3, r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	440b      	add	r3, r1
 8005e2a:	334c      	adds	r3, #76	@ 0x4c
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005e30:	78fa      	ldrb	r2, [r7, #3]
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	4613      	mov	r3, r2
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	1a9b      	subs	r3, r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	3338      	adds	r3, #56	@ 0x38
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	1a9b      	subs	r3, r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	440b      	add	r3, r1
 8005e52:	3315      	adds	r3, #21
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	334d      	adds	r3, #77	@ 0x4d
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	78fa      	ldrb	r2, [r7, #3]
 8005e72:	4613      	mov	r3, r2
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	3310      	adds	r3, #16
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	4413      	add	r3, r2
 8005e80:	1d19      	adds	r1, r3, #4
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	799b      	ldrb	r3, [r3, #6]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f008 f8ee 	bl	800e068 <USB_HC_StartXfer>
 8005e8c:	4603      	mov	r3, r0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop

08005e98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f007 fdee 	bl	800da90 <USB_GetMode>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	f040 80fb 	bne.w	80060b2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f007 fdb1 	bl	800da28 <USB_ReadInterrupts>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 80f1 	beq.w	80060b0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f007 fda8 	bl	800da28 <USB_ReadInterrupts>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee2:	d104      	bne.n	8005eee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005eec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f007 fd98 	bl	800da28 <USB_ReadInterrupts>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f02:	d104      	bne.n	8005f0e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f007 fd88 	bl	800da28 <USB_ReadInterrupts>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f22:	d104      	bne.n	8005f2e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005f2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f007 fd78 	bl	800da28 <USB_ReadInterrupts>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d103      	bne.n	8005f4a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2202      	movs	r2, #2
 8005f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f007 fd6a 	bl	800da28 <USB_ReadInterrupts>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f5e:	d120      	bne.n	8005fa2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005f68:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d113      	bne.n	8005fa2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005f7a:	2110      	movs	r1, #16
 8005f7c:	6938      	ldr	r0, [r7, #16]
 8005f7e:	f007 fc5d 	bl	800d83c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005f82:	6938      	ldr	r0, [r7, #16]
 8005f84:	f007 fc8c 	bl	800d8a0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	7a5b      	ldrb	r3, [r3, #9]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d105      	bne.n	8005f9c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2101      	movs	r1, #1
 8005f96:	4618      	mov	r0, r3
 8005f98:	f007 fe72 	bl	800dc80 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f00e f919 	bl	80141d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f007 fd3e 	bl	800da28 <USB_ReadInterrupts>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fb6:	d102      	bne.n	8005fbe <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f001 fd4d 	bl	8007a58 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f007 fd30 	bl	800da28 <USB_ReadInterrupts>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d106      	bne.n	8005fe0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f00e f8e2 	bl	801419c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f007 fd1f 	bl	800da28 <USB_ReadInterrupts>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ff4:	d139      	bne.n	800606a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f008 faae 	bl	800e55c <USB_HC_ReadInterrupt>
 8006000:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	e025      	b.n	8006054 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d018      	beq.n	800604e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006032:	d106      	bne.n	8006042 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f905 	bl	800624a <HCD_HC_IN_IRQHandler>
 8006040:	e005      	b.n	800604e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 ff67 	bl	8006f1c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	3301      	adds	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	795b      	ldrb	r3, [r3, #5]
 8006058:	461a      	mov	r2, r3
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	4293      	cmp	r3, r2
 800605e:	d3d3      	bcc.n	8006008 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f007 fcda 	bl	800da28 <USB_ReadInterrupts>
 8006074:	4603      	mov	r3, r0
 8006076:	f003 0310 	and.w	r3, r3, #16
 800607a:	2b10      	cmp	r3, #16
 800607c:	d101      	bne.n	8006082 <HAL_HCD_IRQHandler+0x1ea>
 800607e:	2301      	movs	r3, #1
 8006080:	e000      	b.n	8006084 <HAL_HCD_IRQHandler+0x1ec>
 8006082:	2300      	movs	r3, #0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d014      	beq.n	80060b2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0210 	bic.w	r2, r2, #16
 8006096:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f001 fbfe 	bl	800789a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699a      	ldr	r2, [r3, #24]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0210 	orr.w	r2, r2, #16
 80060ac:	619a      	str	r2, [r3, #24]
 80060ae:	e000      	b.n	80060b2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80060b0:	bf00      	nop
    }
  }
}
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_HCD_Start+0x16>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e013      	b.n	80060f6 <HAL_HCD_Start+0x3e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2101      	movs	r1, #1
 80060dc:	4618      	mov	r0, r3
 80060de:	f007 fe36 	bl	800dd4e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f007 fb3a 	bl	800d760 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_HCD_Stop+0x16>
 8006110:	2302      	movs	r3, #2
 8006112:	e00d      	b.n	8006130 <HAL_HCD_Stop+0x32>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f008 fb89 	bl	800e838 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	f007 fdd8 	bl	800dcfa <USB_ResetPort>
 800614a:	4603      	mov	r3, r0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006160:	78fa      	ldrb	r2, [r7, #3]
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	1a9b      	subs	r3, r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	440b      	add	r3, r1
 800616e:	334c      	adds	r3, #76	@ 0x4c
 8006170:	781b      	ldrb	r3, [r3, #0]
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800618a:	78fa      	ldrb	r2, [r7, #3]
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	3338      	adds	r3, #56	@ 0x38
 800619a:	681b      	ldr	r3, [r3, #0]
}
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f007 fe1a 	bl	800ddee <USB_GetCurrentFrame>
 80061ba:	4603      	mov	r3, r0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f007 fdf5 	bl	800ddc0 <USB_GetHostSpeed>
 80061d6:	4603      	mov	r3, r0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80061ec:	78fa      	ldrb	r2, [r7, #3]
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	4613      	mov	r3, r2
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	1a9b      	subs	r3, r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	440b      	add	r3, r1
 80061fa:	331a      	adds	r3, #26
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	4613      	mov	r3, r2
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	1a9b      	subs	r3, r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	440b      	add	r3, r1
 800620e:	331b      	adds	r3, #27
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	3325      	adds	r3, #37	@ 0x25
 8006224:	2200      	movs	r2, #0
 8006226:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	1a9b      	subs	r3, r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	3324      	adds	r3, #36	@ 0x24
 8006238:	2200      	movs	r2, #0
 800623a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b086      	sub	sp, #24
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	78fa      	ldrb	r2, [r7, #3]
 8006266:	4611      	mov	r1, r2
 8006268:	4618      	mov	r0, r3
 800626a:	f007 fbf0 	bl	800da4e <USB_ReadChInterrupts>
 800626e:	4603      	mov	r3, r0
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b04      	cmp	r3, #4
 8006276:	d11a      	bne.n	80062ae <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	4413      	add	r3, r2
 8006280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006284:	461a      	mov	r2, r3
 8006286:	2304      	movs	r3, #4
 8006288:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800628a:	78fa      	ldrb	r2, [r7, #3]
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	334d      	adds	r3, #77	@ 0x4d
 800629a:	2207      	movs	r2, #7
 800629c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	78fa      	ldrb	r2, [r7, #3]
 80062a4:	4611      	mov	r1, r2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f008 f969 	bl	800e57e <USB_HC_Halt>
 80062ac:	e09e      	b.n	80063ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f007 fbc9 	bl	800da4e <USB_ReadChInterrupts>
 80062bc:	4603      	mov	r3, r0
 80062be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c6:	d11b      	bne.n	8006300 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d4:	461a      	mov	r2, r3
 80062d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80062dc:	78fa      	ldrb	r2, [r7, #3]
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	334d      	adds	r3, #77	@ 0x4d
 80062ec:	2208      	movs	r2, #8
 80062ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	4611      	mov	r1, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f008 f940 	bl	800e57e <USB_HC_Halt>
 80062fe:	e075      	b.n	80063ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	78fa      	ldrb	r2, [r7, #3]
 8006306:	4611      	mov	r1, r2
 8006308:	4618      	mov	r0, r3
 800630a:	f007 fba0 	bl	800da4e <USB_ReadChInterrupts>
 800630e:	4603      	mov	r3, r0
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b08      	cmp	r3, #8
 8006316:	d11a      	bne.n	800634e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4413      	add	r3, r2
 8006320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006324:	461a      	mov	r2, r3
 8006326:	2308      	movs	r3, #8
 8006328:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800632a:	78fa      	ldrb	r2, [r7, #3]
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	334d      	adds	r3, #77	@ 0x4d
 800633a:	2206      	movs	r2, #6
 800633c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	78fa      	ldrb	r2, [r7, #3]
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f008 f919 	bl	800e57e <USB_HC_Halt>
 800634c:	e04e      	b.n	80063ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	78fa      	ldrb	r2, [r7, #3]
 8006354:	4611      	mov	r1, r2
 8006356:	4618      	mov	r0, r3
 8006358:	f007 fb79 	bl	800da4e <USB_ReadChInterrupts>
 800635c:	4603      	mov	r3, r0
 800635e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006366:	d11b      	bne.n	80063a0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4413      	add	r3, r2
 8006370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006374:	461a      	mov	r2, r3
 8006376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800637a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800637c:	78fa      	ldrb	r2, [r7, #3]
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	4613      	mov	r3, r2
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	1a9b      	subs	r3, r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	440b      	add	r3, r1
 800638a:	334d      	adds	r3, #77	@ 0x4d
 800638c:	2209      	movs	r2, #9
 800638e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f008 f8f0 	bl	800e57e <USB_HC_Halt>
 800639e:	e025      	b.n	80063ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	4611      	mov	r1, r2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f007 fb50 	bl	800da4e <USB_ReadChInterrupts>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b4:	2b80      	cmp	r3, #128	@ 0x80
 80063b6:	d119      	bne.n	80063ec <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c4:	461a      	mov	r2, r3
 80063c6:	2380      	movs	r3, #128	@ 0x80
 80063c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80063ca:	78fa      	ldrb	r2, [r7, #3]
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	4613      	mov	r3, r2
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	440b      	add	r3, r1
 80063d8:	334d      	adds	r3, #77	@ 0x4d
 80063da:	2207      	movs	r2, #7
 80063dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	78fa      	ldrb	r2, [r7, #3]
 80063e4:	4611      	mov	r1, r2
 80063e6:	4618      	mov	r0, r3
 80063e8:	f008 f8c9 	bl	800e57e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	78fa      	ldrb	r2, [r7, #3]
 80063f2:	4611      	mov	r1, r2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f007 fb2a 	bl	800da4e <USB_ReadChInterrupts>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006404:	d112      	bne.n	800642c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	78fa      	ldrb	r2, [r7, #3]
 800640c:	4611      	mov	r1, r2
 800640e:	4618      	mov	r0, r3
 8006410:	f008 f8b5 	bl	800e57e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006420:	461a      	mov	r2, r3
 8006422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006426:	6093      	str	r3, [r2, #8]
 8006428:	f000 bd75 	b.w	8006f16 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	78fa      	ldrb	r2, [r7, #3]
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f007 fb0a 	bl	800da4e <USB_ReadChInterrupts>
 800643a:	4603      	mov	r3, r0
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b01      	cmp	r3, #1
 8006442:	f040 8128 	bne.w	8006696 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006452:	461a      	mov	r2, r3
 8006454:	2320      	movs	r3, #32
 8006456:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	1a9b      	subs	r3, r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	440b      	add	r3, r1
 8006466:	331b      	adds	r3, #27
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d119      	bne.n	80064a2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800646e:	78fa      	ldrb	r2, [r7, #3]
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	331b      	adds	r3, #27
 800647e:	2200      	movs	r2, #0
 8006480:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006482:	78fb      	ldrb	r3, [r7, #3]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	4413      	add	r3, r2
 800648a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	78fa      	ldrb	r2, [r7, #3]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	440a      	add	r2, r1
 8006498:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800649c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064a0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	799b      	ldrb	r3, [r3, #6]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01b      	beq.n	80064e2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	3330      	adds	r3, #48	@ 0x30
 80064ba:	6819      	ldr	r1, [r3, #0]
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ce:	78fa      	ldrb	r2, [r7, #3]
 80064d0:	1ac9      	subs	r1, r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4613      	mov	r3, r2
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	1a9b      	subs	r3, r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4403      	add	r3, r0
 80064de:	3338      	adds	r3, #56	@ 0x38
 80064e0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	1a9b      	subs	r3, r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	334d      	adds	r3, #77	@ 0x4d
 80064f2:	2201      	movs	r2, #1
 80064f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80064f6:	78fa      	ldrb	r2, [r7, #3]
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	1a9b      	subs	r3, r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	3344      	adds	r3, #68	@ 0x44
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006516:	461a      	mov	r2, r3
 8006518:	2301      	movs	r3, #1
 800651a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800651c:	78fa      	ldrb	r2, [r7, #3]
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	4613      	mov	r3, r2
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	3326      	adds	r3, #38	@ 0x26
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	4613      	mov	r3, r2
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	1a9b      	subs	r3, r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	3326      	adds	r3, #38	@ 0x26
 8006542:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006544:	2b02      	cmp	r3, #2
 8006546:	d110      	bne.n	800656a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	78fa      	ldrb	r2, [r7, #3]
 800654e:	4611      	mov	r1, r2
 8006550:	4618      	mov	r0, r3
 8006552:	f008 f814 	bl	800e57e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006562:	461a      	mov	r2, r3
 8006564:	2310      	movs	r3, #16
 8006566:	6093      	str	r3, [r2, #8]
 8006568:	e03d      	b.n	80065e6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800656a:	78fa      	ldrb	r2, [r7, #3]
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	4613      	mov	r3, r2
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	440b      	add	r3, r1
 8006578:	3326      	adds	r3, #38	@ 0x26
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b03      	cmp	r3, #3
 800657e:	d00a      	beq.n	8006596 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006580:	78fa      	ldrb	r2, [r7, #3]
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	4613      	mov	r3, r2
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	1a9b      	subs	r3, r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	3326      	adds	r3, #38	@ 0x26
 8006590:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006592:	2b01      	cmp	r3, #1
 8006594:	d127      	bne.n	80065e6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4413      	add	r3, r2
 800659e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	78fa      	ldrb	r2, [r7, #3]
 80065a6:	0151      	lsls	r1, r2, #5
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	440a      	add	r2, r1
 80065ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80065b4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80065b6:	78fa      	ldrb	r2, [r7, #3]
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	334c      	adds	r3, #76	@ 0x4c
 80065c6:	2201      	movs	r2, #1
 80065c8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80065ca:	78fa      	ldrb	r2, [r7, #3]
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	334c      	adds	r3, #76	@ 0x4c
 80065da:	781a      	ldrb	r2, [r3, #0]
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f00d fe05 	bl	80141f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	799b      	ldrb	r3, [r3, #6]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d13b      	bne.n	8006666 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80065ee:	78fa      	ldrb	r2, [r7, #3]
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	3338      	adds	r3, #56	@ 0x38
 80065fe:	6819      	ldr	r1, [r3, #0]
 8006600:	78fa      	ldrb	r2, [r7, #3]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4613      	mov	r3, r2
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	1a9b      	subs	r3, r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4403      	add	r3, r0
 800660e:	3328      	adds	r3, #40	@ 0x28
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	440b      	add	r3, r1
 8006614:	1e59      	subs	r1, r3, #1
 8006616:	78fa      	ldrb	r2, [r7, #3]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	1a9b      	subs	r3, r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4403      	add	r3, r0
 8006624:	3328      	adds	r3, #40	@ 0x28
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	fbb1 f3f3 	udiv	r3, r1, r3
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8470 	beq.w	8006f16 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8006636:	78fa      	ldrb	r2, [r7, #3]
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	4613      	mov	r3, r2
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	333c      	adds	r3, #60	@ 0x3c
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	78fa      	ldrb	r2, [r7, #3]
 800664a:	f083 0301 	eor.w	r3, r3, #1
 800664e:	b2d8      	uxtb	r0, r3
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	1a9b      	subs	r3, r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	333c      	adds	r3, #60	@ 0x3c
 800665e:	4602      	mov	r2, r0
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	f000 bc58 	b.w	8006f16 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	333c      	adds	r3, #60	@ 0x3c
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	78fa      	ldrb	r2, [r7, #3]
 800667a:	f083 0301 	eor.w	r3, r3, #1
 800667e:	b2d8      	uxtb	r0, r3
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	333c      	adds	r3, #60	@ 0x3c
 800668e:	4602      	mov	r2, r0
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	f000 bc40 	b.w	8006f16 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	78fa      	ldrb	r2, [r7, #3]
 800669c:	4611      	mov	r1, r2
 800669e:	4618      	mov	r0, r3
 80066a0:	f007 f9d5 	bl	800da4e <USB_ReadChInterrupts>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d131      	bne.n	8006712 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ba:	461a      	mov	r2, r3
 80066bc:	2320      	movs	r3, #32
 80066be:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80066c0:	78fa      	ldrb	r2, [r7, #3]
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	4613      	mov	r3, r2
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	331a      	adds	r3, #26
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	f040 841f 	bne.w	8006f16 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80066d8:	78fa      	ldrb	r2, [r7, #3]
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	4613      	mov	r3, r2
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	1a9b      	subs	r3, r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	440b      	add	r3, r1
 80066e6:	331b      	adds	r3, #27
 80066e8:	2201      	movs	r2, #1
 80066ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	4613      	mov	r3, r2
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	334d      	adds	r3, #77	@ 0x4d
 80066fc:	2203      	movs	r2, #3
 80066fe:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	78fa      	ldrb	r2, [r7, #3]
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f007 ff38 	bl	800e57e <USB_HC_Halt>
 800670e:	f000 bc02 	b.w	8006f16 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	78fa      	ldrb	r2, [r7, #3]
 8006718:	4611      	mov	r1, r2
 800671a:	4618      	mov	r0, r3
 800671c:	f007 f997 	bl	800da4e <USB_ReadChInterrupts>
 8006720:	4603      	mov	r3, r0
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b02      	cmp	r3, #2
 8006728:	f040 8305 	bne.w	8006d36 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006738:	461a      	mov	r2, r3
 800673a:	2302      	movs	r3, #2
 800673c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800673e:	78fa      	ldrb	r2, [r7, #3]
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	334d      	adds	r3, #77	@ 0x4d
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d114      	bne.n	800677e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006754:	78fa      	ldrb	r2, [r7, #3]
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	4613      	mov	r3, r2
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	1a9b      	subs	r3, r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	334d      	adds	r3, #77	@ 0x4d
 8006764:	2202      	movs	r2, #2
 8006766:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006768:	78fa      	ldrb	r2, [r7, #3]
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	4613      	mov	r3, r2
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	1a9b      	subs	r3, r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	334c      	adds	r3, #76	@ 0x4c
 8006778:	2201      	movs	r2, #1
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	e2cc      	b.n	8006d18 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800677e:	78fa      	ldrb	r2, [r7, #3]
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	1a9b      	subs	r3, r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	334d      	adds	r3, #77	@ 0x4d
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b06      	cmp	r3, #6
 8006792:	d114      	bne.n	80067be <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	4613      	mov	r3, r2
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	1a9b      	subs	r3, r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	334d      	adds	r3, #77	@ 0x4d
 80067a4:	2202      	movs	r2, #2
 80067a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80067a8:	78fa      	ldrb	r2, [r7, #3]
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	4613      	mov	r3, r2
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	440b      	add	r3, r1
 80067b6:	334c      	adds	r3, #76	@ 0x4c
 80067b8:	2205      	movs	r2, #5
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e2ac      	b.n	8006d18 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80067be:	78fa      	ldrb	r2, [r7, #3]
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	334d      	adds	r3, #77	@ 0x4d
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	2b07      	cmp	r3, #7
 80067d2:	d00b      	beq.n	80067ec <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	4613      	mov	r3, r2
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	1a9b      	subs	r3, r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	440b      	add	r3, r1
 80067e2:	334d      	adds	r3, #77	@ 0x4d
 80067e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	f040 80a6 	bne.w	8006938 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80067ec:	78fa      	ldrb	r2, [r7, #3]
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	4613      	mov	r3, r2
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	334d      	adds	r3, #77	@ 0x4d
 80067fc:	2202      	movs	r2, #2
 80067fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	3344      	adds	r3, #68	@ 0x44
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	1c59      	adds	r1, r3, #1
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4403      	add	r3, r0
 8006820:	3344      	adds	r3, #68	@ 0x44
 8006822:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006824:	78fa      	ldrb	r2, [r7, #3]
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	4613      	mov	r3, r2
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	3344      	adds	r3, #68	@ 0x44
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d943      	bls.n	80068c2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	4613      	mov	r3, r2
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	440b      	add	r3, r1
 8006848:	3344      	adds	r3, #68	@ 0x44
 800684a:	2200      	movs	r2, #0
 800684c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	331a      	adds	r3, #26
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d123      	bne.n	80068ac <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006864:	78fa      	ldrb	r2, [r7, #3]
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	331b      	adds	r3, #27
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006878:	78fa      	ldrb	r2, [r7, #3]
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	331c      	adds	r3, #28
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	4413      	add	r3, r2
 8006894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068aa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80068ac:	78fa      	ldrb	r2, [r7, #3]
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	334c      	adds	r3, #76	@ 0x4c
 80068bc:	2204      	movs	r2, #4
 80068be:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80068c0:	e229      	b.n	8006d16 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80068c2:	78fa      	ldrb	r2, [r7, #3]
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	334c      	adds	r3, #76	@ 0x4c
 80068d2:	2202      	movs	r2, #2
 80068d4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80068d6:	78fa      	ldrb	r2, [r7, #3]
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	3326      	adds	r3, #38	@ 0x26
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00b      	beq.n	8006904 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80068ec:	78fa      	ldrb	r2, [r7, #3]
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	4613      	mov	r3, r2
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	3326      	adds	r3, #38	@ 0x26
 80068fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80068fe:	2b02      	cmp	r3, #2
 8006900:	f040 8209 	bne.w	8006d16 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	4413      	add	r3, r2
 800690c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800691a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006922:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	4413      	add	r3, r2
 800692c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006930:	461a      	mov	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006936:	e1ee      	b.n	8006d16 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006938:	78fa      	ldrb	r2, [r7, #3]
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	334d      	adds	r3, #77	@ 0x4d
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b05      	cmp	r3, #5
 800694c:	f040 80c8 	bne.w	8006ae0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	4613      	mov	r3, r2
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	334d      	adds	r3, #77	@ 0x4d
 8006960:	2202      	movs	r2, #2
 8006962:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006964:	78fa      	ldrb	r2, [r7, #3]
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	4613      	mov	r3, r2
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	1a9b      	subs	r3, r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	331b      	adds	r3, #27
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b01      	cmp	r3, #1
 8006978:	f040 81ce 	bne.w	8006d18 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800697c:	78fa      	ldrb	r2, [r7, #3]
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	4613      	mov	r3, r2
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	440b      	add	r3, r1
 800698a:	3326      	adds	r3, #38	@ 0x26
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b03      	cmp	r3, #3
 8006990:	d16b      	bne.n	8006a6a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8006992:	78fa      	ldrb	r2, [r7, #3]
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	1a9b      	subs	r3, r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	3348      	adds	r3, #72	@ 0x48
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	1c59      	adds	r1, r3, #1
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4613      	mov	r3, r2
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	1a9b      	subs	r3, r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4403      	add	r3, r0
 80069b2:	3348      	adds	r3, #72	@ 0x48
 80069b4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80069b6:	78fa      	ldrb	r2, [r7, #3]
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	3348      	adds	r3, #72	@ 0x48
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d943      	bls.n	8006a54 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80069cc:	78fa      	ldrb	r2, [r7, #3]
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4613      	mov	r3, r2
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	3348      	adds	r3, #72	@ 0x48
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	331b      	adds	r3, #27
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80069f4:	78fa      	ldrb	r2, [r7, #3]
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	4613      	mov	r3, r2
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	3344      	adds	r3, #68	@ 0x44
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d809      	bhi.n	8006a1e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	1a9b      	subs	r3, r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	440b      	add	r3, r1
 8006a18:	331c      	adds	r3, #28
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	78fa      	ldrb	r2, [r7, #3]
 8006a2e:	0151      	lsls	r1, r2, #5
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	440a      	add	r2, r1
 8006a34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a3c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006a3e:	78fa      	ldrb	r2, [r7, #3]
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	4613      	mov	r3, r2
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	1a9b      	subs	r3, r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	334c      	adds	r3, #76	@ 0x4c
 8006a4e:	2204      	movs	r2, #4
 8006a50:	701a      	strb	r2, [r3, #0]
 8006a52:	e014      	b.n	8006a7e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006a54:	78fa      	ldrb	r2, [r7, #3]
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	440b      	add	r3, r1
 8006a62:	334c      	adds	r3, #76	@ 0x4c
 8006a64:	2202      	movs	r2, #2
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	e009      	b.n	8006a7e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	1a9b      	subs	r3, r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	440b      	add	r3, r1
 8006a78:	334c      	adds	r3, #76	@ 0x4c
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006a7e:	78fa      	ldrb	r2, [r7, #3]
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	3326      	adds	r3, #38	@ 0x26
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00b      	beq.n	8006aac <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	3326      	adds	r3, #38	@ 0x26
 8006aa4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	f040 8136 	bne.w	8006d18 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ac2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006aca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ad8:	461a      	mov	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	e11b      	b.n	8006d18 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006ae0:	78fa      	ldrb	r2, [r7, #3]
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	1a9b      	subs	r3, r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	334d      	adds	r3, #77	@ 0x4d
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	f040 8081 	bne.w	8006bfa <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006af8:	78fa      	ldrb	r2, [r7, #3]
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	4613      	mov	r3, r2
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	1a9b      	subs	r3, r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	334d      	adds	r3, #77	@ 0x4d
 8006b08:	2202      	movs	r2, #2
 8006b0a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006b0c:	78fa      	ldrb	r2, [r7, #3]
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	4613      	mov	r3, r2
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	1a9b      	subs	r3, r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	440b      	add	r3, r1
 8006b1a:	331b      	adds	r3, #27
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	f040 80fa 	bne.w	8006d18 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006b24:	78fa      	ldrb	r2, [r7, #3]
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	440b      	add	r3, r1
 8006b32:	334c      	adds	r3, #76	@ 0x4c
 8006b34:	2202      	movs	r2, #2
 8006b36:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b56:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	78fa      	ldrb	r2, [r7, #3]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b76:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	78fa      	ldrb	r2, [r7, #3]
 8006b88:	0151      	lsls	r1, r2, #5
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	440a      	add	r2, r1
 8006b8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b92:	f023 0320 	bic.w	r3, r3, #32
 8006b96:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006b98:	78fa      	ldrb	r2, [r7, #3]
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	3326      	adds	r3, #38	@ 0x26
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006bae:	78fa      	ldrb	r2, [r7, #3]
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	1a9b      	subs	r3, r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	3326      	adds	r3, #38	@ 0x26
 8006bbe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	f040 80a9 	bne.w	8006d18 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006bdc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006be4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	e08e      	b.n	8006d18 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006bfa:	78fa      	ldrb	r2, [r7, #3]
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	334d      	adds	r3, #77	@ 0x4d
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d143      	bne.n	8006c98 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006c10:	78fa      	ldrb	r2, [r7, #3]
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	334d      	adds	r3, #77	@ 0x4d
 8006c20:	2202      	movs	r2, #2
 8006c22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	334c      	adds	r3, #76	@ 0x4c
 8006c34:	2202      	movs	r2, #2
 8006c36:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006c38:	78fa      	ldrb	r2, [r7, #3]
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	1a9b      	subs	r3, r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	440b      	add	r3, r1
 8006c46:	3326      	adds	r3, #38	@ 0x26
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006c4e:	78fa      	ldrb	r2, [r7, #3]
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	3326      	adds	r3, #38	@ 0x26
 8006c5e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d159      	bne.n	8006d18 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c7a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c82:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c90:	461a      	mov	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	e03f      	b.n	8006d18 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006c98:	78fa      	ldrb	r2, [r7, #3]
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	1a9b      	subs	r3, r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	334d      	adds	r3, #77	@ 0x4d
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d126      	bne.n	8006cfc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006cae:	78fa      	ldrb	r2, [r7, #3]
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	1a9b      	subs	r3, r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	334d      	adds	r3, #77	@ 0x4d
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	3344      	adds	r3, #68	@ 0x44
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	1c59      	adds	r1, r3, #1
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	1a9b      	subs	r3, r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4403      	add	r3, r0
 8006ce2:	3344      	adds	r3, #68	@ 0x44
 8006ce4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8006ce6:	78fa      	ldrb	r2, [r7, #3]
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	1a9b      	subs	r3, r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	334c      	adds	r3, #76	@ 0x4c
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e00d      	b.n	8006d18 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006cfc:	78fa      	ldrb	r2, [r7, #3]
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	4613      	mov	r3, r2
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	1a9b      	subs	r3, r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	440b      	add	r3, r1
 8006d0a:	334d      	adds	r3, #77	@ 0x4d
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	f000 8100 	beq.w	8006f14 <HCD_HC_IN_IRQHandler+0xcca>
 8006d14:	e000      	b.n	8006d18 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006d16:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006d18:	78fa      	ldrb	r2, [r7, #3]
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	1a9b      	subs	r3, r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	440b      	add	r3, r1
 8006d26:	334c      	adds	r3, #76	@ 0x4c
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f00d fa5e 	bl	80141f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006d34:	e0ef      	b.n	8006f16 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f006 fe85 	bl	800da4e <USB_ReadChInterrupts>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4a:	2b40      	cmp	r3, #64	@ 0x40
 8006d4c:	d12f      	bne.n	8006dae <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006d4e:	78fb      	ldrb	r3, [r7, #3]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	2340      	movs	r3, #64	@ 0x40
 8006d5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006d60:	78fa      	ldrb	r2, [r7, #3]
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	4613      	mov	r3, r2
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	1a9b      	subs	r3, r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	440b      	add	r3, r1
 8006d6e:	334d      	adds	r3, #77	@ 0x4d
 8006d70:	2205      	movs	r2, #5
 8006d72:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006d74:	78fa      	ldrb	r2, [r7, #3]
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	1a9b      	subs	r3, r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	331a      	adds	r3, #26
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006d8a:	78fa      	ldrb	r2, [r7, #3]
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	1a9b      	subs	r3, r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	3344      	adds	r3, #68	@ 0x44
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	4611      	mov	r1, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f007 fbe9 	bl	800e57e <USB_HC_Halt>
 8006dac:	e0b3      	b.n	8006f16 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	4611      	mov	r1, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f006 fe49 	bl	800da4e <USB_ReadChInterrupts>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	2b10      	cmp	r3, #16
 8006dc4:	f040 80a7 	bne.w	8006f16 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006dc8:	78fa      	ldrb	r2, [r7, #3]
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	3326      	adds	r3, #38	@ 0x26
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d11b      	bne.n	8006e16 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006dde:	78fa      	ldrb	r2, [r7, #3]
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	3344      	adds	r3, #68	@ 0x44
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8006df2:	78fa      	ldrb	r2, [r7, #3]
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	334d      	adds	r3, #77	@ 0x4d
 8006e02:	2204      	movs	r2, #4
 8006e04:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	78fa      	ldrb	r2, [r7, #3]
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f007 fbb5 	bl	800e57e <USB_HC_Halt>
 8006e14:	e03f      	b.n	8006e96 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	3326      	adds	r3, #38	@ 0x26
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00a      	beq.n	8006e42 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006e2c:	78fa      	ldrb	r2, [r7, #3]
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	3326      	adds	r3, #38	@ 0x26
 8006e3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d129      	bne.n	8006e96 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006e42:	78fa      	ldrb	r2, [r7, #3]
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	3344      	adds	r3, #68	@ 0x44
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	799b      	ldrb	r3, [r3, #6]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <HCD_HC_IN_IRQHandler+0xc2a>
 8006e5e:	78fa      	ldrb	r2, [r7, #3]
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	331b      	adds	r3, #27
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d110      	bne.n	8006e96 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	334d      	adds	r3, #77	@ 0x4d
 8006e84:	2204      	movs	r2, #4
 8006e86:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	78fa      	ldrb	r2, [r7, #3]
 8006e8e:	4611      	mov	r1, r2
 8006e90:	4618      	mov	r0, r3
 8006e92:	f007 fb74 	bl	800e57e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	331b      	adds	r3, #27
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d129      	bne.n	8006f00 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006eac:	78fa      	ldrb	r2, [r7, #3]
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	1a9b      	subs	r3, r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	331b      	adds	r3, #27
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ede:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8006ee0:	78fb      	ldrb	r3, [r7, #3]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	78fa      	ldrb	r2, [r7, #3]
 8006ef0:	0151      	lsls	r1, r2, #5
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006efa:	f043 0320 	orr.w	r3, r3, #32
 8006efe:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	2310      	movs	r3, #16
 8006f10:	6093      	str	r3, [r2, #8]
 8006f12:	e000      	b.n	8006f16 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8006f14:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f006 fd87 	bl	800da4e <USB_ReadChInterrupts>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f003 0304 	and.w	r3, r3, #4
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d11b      	bne.n	8006f82 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006f4a:	78fb      	ldrb	r3, [r7, #3]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f56:	461a      	mov	r2, r3
 8006f58:	2304      	movs	r3, #4
 8006f5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	1a9b      	subs	r3, r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	334d      	adds	r3, #77	@ 0x4d
 8006f6c:	2207      	movs	r2, #7
 8006f6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	78fa      	ldrb	r2, [r7, #3]
 8006f76:	4611      	mov	r1, r2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f007 fb00 	bl	800e57e <USB_HC_Halt>
 8006f7e:	f000 bc89 	b.w	8007894 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f006 fd5f 	bl	800da4e <USB_ReadChInterrupts>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	f040 8082 	bne.w	80070a0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fa8:	461a      	mov	r2, r3
 8006faa:	2320      	movs	r3, #32
 8006fac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006fae:	78fa      	ldrb	r2, [r7, #3]
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	1a9b      	subs	r3, r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	440b      	add	r3, r1
 8006fbc:	3319      	adds	r3, #25
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d124      	bne.n	800700e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8006fc4:	78fa      	ldrb	r2, [r7, #3]
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	1a9b      	subs	r3, r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	3319      	adds	r3, #25
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006fd8:	78fa      	ldrb	r2, [r7, #3]
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	334c      	adds	r3, #76	@ 0x4c
 8006fe8:	2202      	movs	r2, #2
 8006fea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006fec:	78fa      	ldrb	r2, [r7, #3]
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	1a9b      	subs	r3, r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	334d      	adds	r3, #77	@ 0x4d
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	78fa      	ldrb	r2, [r7, #3]
 8007006:	4611      	mov	r1, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f007 fab8 	bl	800e57e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	331a      	adds	r3, #26
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b01      	cmp	r3, #1
 8007022:	f040 8437 	bne.w	8007894 <HCD_HC_OUT_IRQHandler+0x978>
 8007026:	78fa      	ldrb	r2, [r7, #3]
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	440b      	add	r3, r1
 8007034:	331b      	adds	r3, #27
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f040 842b 	bne.w	8007894 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	3326      	adds	r3, #38	@ 0x26
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d009      	beq.n	8007068 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	331b      	adds	r3, #27
 8007064:	2201      	movs	r2, #1
 8007066:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8007068:	78fa      	ldrb	r2, [r7, #3]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	334d      	adds	r3, #77	@ 0x4d
 8007078:	2203      	movs	r2, #3
 800707a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f007 fa7a 	bl	800e57e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	3344      	adds	r3, #68	@ 0x44
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e3f9      	b.n	8007894 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	78fa      	ldrb	r2, [r7, #3]
 80070a6:	4611      	mov	r1, r2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f006 fcd0 	bl	800da4e <USB_ReadChInterrupts>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070b8:	d111      	bne.n	80070de <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c6:	461a      	mov	r2, r3
 80070c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	78fa      	ldrb	r2, [r7, #3]
 80070d4:	4611      	mov	r1, r2
 80070d6:	4618      	mov	r0, r3
 80070d8:	f007 fa51 	bl	800e57e <USB_HC_Halt>
 80070dc:	e3da      	b.n	8007894 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	4611      	mov	r1, r2
 80070e6:	4618      	mov	r0, r3
 80070e8:	f006 fcb1 	bl	800da4e <USB_ReadChInterrupts>
 80070ec:	4603      	mov	r3, r0
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d168      	bne.n	80071c8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80070f6:	78fa      	ldrb	r2, [r7, #3]
 80070f8:	6879      	ldr	r1, [r7, #4]
 80070fa:	4613      	mov	r3, r2
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	1a9b      	subs	r3, r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	440b      	add	r3, r1
 8007104:	3344      	adds	r3, #68	@ 0x44
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	78fa      	ldrb	r2, [r7, #3]
 8007110:	4611      	mov	r1, r2
 8007112:	4618      	mov	r0, r3
 8007114:	f006 fc9b 	bl	800da4e <USB_ReadChInterrupts>
 8007118:	4603      	mov	r3, r0
 800711a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800711e:	2b40      	cmp	r3, #64	@ 0x40
 8007120:	d112      	bne.n	8007148 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007122:	78fa      	ldrb	r2, [r7, #3]
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	440b      	add	r3, r1
 8007130:	3319      	adds	r3, #25
 8007132:	2201      	movs	r2, #1
 8007134:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	4413      	add	r3, r2
 800713e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007142:	461a      	mov	r2, r3
 8007144:	2340      	movs	r3, #64	@ 0x40
 8007146:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8007148:	78fa      	ldrb	r2, [r7, #3]
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	4613      	mov	r3, r2
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	1a9b      	subs	r3, r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	440b      	add	r3, r1
 8007156:	331b      	adds	r3, #27
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d019      	beq.n	8007192 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800715e:	78fa      	ldrb	r2, [r7, #3]
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	1a9b      	subs	r3, r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	331b      	adds	r3, #27
 800716e:	2200      	movs	r2, #0
 8007170:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007172:	78fb      	ldrb	r3, [r7, #3]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4413      	add	r3, r2
 800717a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	78fa      	ldrb	r2, [r7, #3]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	440a      	add	r2, r1
 8007188:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800718c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007190:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007192:	78fb      	ldrb	r3, [r7, #3]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4413      	add	r3, r2
 800719a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800719e:	461a      	mov	r2, r3
 80071a0:	2301      	movs	r3, #1
 80071a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80071a4:	78fa      	ldrb	r2, [r7, #3]
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	4613      	mov	r3, r2
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	440b      	add	r3, r1
 80071b2:	334d      	adds	r3, #77	@ 0x4d
 80071b4:	2201      	movs	r2, #1
 80071b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	78fa      	ldrb	r2, [r7, #3]
 80071be:	4611      	mov	r1, r2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f007 f9dc 	bl	800e57e <USB_HC_Halt>
 80071c6:	e365      	b.n	8007894 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	78fa      	ldrb	r2, [r7, #3]
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f006 fc3c 	bl	800da4e <USB_ReadChInterrupts>
 80071d6:	4603      	mov	r3, r0
 80071d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071dc:	2b40      	cmp	r3, #64	@ 0x40
 80071de:	d139      	bne.n	8007254 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80071e0:	78fa      	ldrb	r2, [r7, #3]
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	4613      	mov	r3, r2
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	334d      	adds	r3, #77	@ 0x4d
 80071f0:	2205      	movs	r2, #5
 80071f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80071f4:	78fa      	ldrb	r2, [r7, #3]
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	4613      	mov	r3, r2
 80071fa:	011b      	lsls	r3, r3, #4
 80071fc:	1a9b      	subs	r3, r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	440b      	add	r3, r1
 8007202:	331a      	adds	r3, #26
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d109      	bne.n	800721e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	6879      	ldr	r1, [r7, #4]
 800720e:	4613      	mov	r3, r2
 8007210:	011b      	lsls	r3, r3, #4
 8007212:	1a9b      	subs	r3, r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	440b      	add	r3, r1
 8007218:	3319      	adds	r3, #25
 800721a:	2201      	movs	r2, #1
 800721c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800721e:	78fa      	ldrb	r2, [r7, #3]
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	4613      	mov	r3, r2
 8007224:	011b      	lsls	r3, r3, #4
 8007226:	1a9b      	subs	r3, r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	440b      	add	r3, r1
 800722c:	3344      	adds	r3, #68	@ 0x44
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	4611      	mov	r1, r2
 800723a:	4618      	mov	r0, r3
 800723c:	f007 f99f 	bl	800e57e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	4413      	add	r3, r2
 8007248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800724c:	461a      	mov	r2, r3
 800724e:	2340      	movs	r3, #64	@ 0x40
 8007250:	6093      	str	r3, [r2, #8]
 8007252:	e31f      	b.n	8007894 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	78fa      	ldrb	r2, [r7, #3]
 800725a:	4611      	mov	r1, r2
 800725c:	4618      	mov	r0, r3
 800725e:	f006 fbf6 	bl	800da4e <USB_ReadChInterrupts>
 8007262:	4603      	mov	r3, r0
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b08      	cmp	r3, #8
 800726a:	d11a      	bne.n	80072a2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	4413      	add	r3, r2
 8007274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007278:	461a      	mov	r2, r3
 800727a:	2308      	movs	r3, #8
 800727c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800727e:	78fa      	ldrb	r2, [r7, #3]
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	1a9b      	subs	r3, r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	334d      	adds	r3, #77	@ 0x4d
 800728e:	2206      	movs	r2, #6
 8007290:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	78fa      	ldrb	r2, [r7, #3]
 8007298:	4611      	mov	r1, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f007 f96f 	bl	800e57e <USB_HC_Halt>
 80072a0:	e2f8      	b.n	8007894 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	78fa      	ldrb	r2, [r7, #3]
 80072a8:	4611      	mov	r1, r2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f006 fbcf 	bl	800da4e <USB_ReadChInterrupts>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f003 0310 	and.w	r3, r3, #16
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	d144      	bne.n	8007344 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80072ba:	78fa      	ldrb	r2, [r7, #3]
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	1a9b      	subs	r3, r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	440b      	add	r3, r1
 80072c8:	3344      	adds	r3, #68	@ 0x44
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80072ce:	78fa      	ldrb	r2, [r7, #3]
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4613      	mov	r3, r2
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	334d      	adds	r3, #77	@ 0x4d
 80072de:	2204      	movs	r2, #4
 80072e0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80072e2:	78fa      	ldrb	r2, [r7, #3]
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	4613      	mov	r3, r2
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	440b      	add	r3, r1
 80072f0:	3319      	adds	r3, #25
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d114      	bne.n	8007322 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80072f8:	78fa      	ldrb	r2, [r7, #3]
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	1a9b      	subs	r3, r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	3318      	adds	r3, #24
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d109      	bne.n	8007322 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800730e:	78fa      	ldrb	r2, [r7, #3]
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	4613      	mov	r3, r2
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	3319      	adds	r3, #25
 800731e:	2201      	movs	r2, #1
 8007320:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	78fa      	ldrb	r2, [r7, #3]
 8007328:	4611      	mov	r1, r2
 800732a:	4618      	mov	r0, r3
 800732c:	f007 f927 	bl	800e57e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	4413      	add	r3, r2
 8007338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800733c:	461a      	mov	r2, r3
 800733e:	2310      	movs	r3, #16
 8007340:	6093      	str	r3, [r2, #8]
 8007342:	e2a7      	b.n	8007894 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	78fa      	ldrb	r2, [r7, #3]
 800734a:	4611      	mov	r1, r2
 800734c:	4618      	mov	r0, r3
 800734e:	f006 fb7e 	bl	800da4e <USB_ReadChInterrupts>
 8007352:	4603      	mov	r3, r0
 8007354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007358:	2b80      	cmp	r3, #128	@ 0x80
 800735a:	f040 8083 	bne.w	8007464 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	799b      	ldrb	r3, [r3, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d111      	bne.n	800738a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	011b      	lsls	r3, r3, #4
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	334d      	adds	r3, #77	@ 0x4d
 8007376:	2207      	movs	r2, #7
 8007378:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	4611      	mov	r1, r2
 8007382:	4618      	mov	r0, r3
 8007384:	f007 f8fb 	bl	800e57e <USB_HC_Halt>
 8007388:	e062      	b.n	8007450 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800738a:	78fa      	ldrb	r2, [r7, #3]
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	011b      	lsls	r3, r3, #4
 8007392:	1a9b      	subs	r3, r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	440b      	add	r3, r1
 8007398:	3344      	adds	r3, #68	@ 0x44
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	1c59      	adds	r1, r3, #1
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4403      	add	r3, r0
 80073aa:	3344      	adds	r3, #68	@ 0x44
 80073ac:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	3344      	adds	r3, #68	@ 0x44
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d922      	bls.n	800740a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80073c4:	78fa      	ldrb	r2, [r7, #3]
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	3344      	adds	r3, #68	@ 0x44
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	334c      	adds	r3, #76	@ 0x4c
 80073e8:	2204      	movs	r2, #4
 80073ea:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	334c      	adds	r3, #76	@ 0x4c
 80073fc:	781a      	ldrb	r2, [r3, #0]
 80073fe:	78fb      	ldrb	r3, [r7, #3]
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f00c fef4 	bl	80141f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007408:	e022      	b.n	8007450 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800740a:	78fa      	ldrb	r2, [r7, #3]
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	011b      	lsls	r3, r3, #4
 8007412:	1a9b      	subs	r3, r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	440b      	add	r3, r1
 8007418:	334c      	adds	r3, #76	@ 0x4c
 800741a:	2202      	movs	r2, #2
 800741c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800741e:	78fb      	ldrb	r3, [r7, #3]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	4413      	add	r3, r2
 8007426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007434:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800743c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4413      	add	r3, r2
 8007446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800744a:	461a      	mov	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	4413      	add	r3, r2
 8007458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800745c:	461a      	mov	r2, r3
 800745e:	2380      	movs	r3, #128	@ 0x80
 8007460:	6093      	str	r3, [r2, #8]
 8007462:	e217      	b.n	8007894 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f006 faee 	bl	800da4e <USB_ReadChInterrupts>
 8007472:	4603      	mov	r3, r0
 8007474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800747c:	d11b      	bne.n	80074b6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800747e:	78fa      	ldrb	r2, [r7, #3]
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	4613      	mov	r3, r2
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	1a9b      	subs	r3, r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	440b      	add	r3, r1
 800748c:	334d      	adds	r3, #77	@ 0x4d
 800748e:	2209      	movs	r2, #9
 8007490:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	78fa      	ldrb	r2, [r7, #3]
 8007498:	4611      	mov	r1, r2
 800749a:	4618      	mov	r0, r3
 800749c:	f007 f86f 	bl	800e57e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ac:	461a      	mov	r2, r3
 80074ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074b2:	6093      	str	r3, [r2, #8]
 80074b4:	e1ee      	b.n	8007894 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	4611      	mov	r1, r2
 80074be:	4618      	mov	r0, r3
 80074c0:	f006 fac5 	bl	800da4e <USB_ReadChInterrupts>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	f040 81df 	bne.w	800788e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074dc:	461a      	mov	r2, r3
 80074de:	2302      	movs	r3, #2
 80074e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80074e2:	78fa      	ldrb	r2, [r7, #3]
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	1a9b      	subs	r3, r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	440b      	add	r3, r1
 80074f0:	334d      	adds	r3, #77	@ 0x4d
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	f040 8093 	bne.w	8007620 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80074fa:	78fa      	ldrb	r2, [r7, #3]
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	011b      	lsls	r3, r3, #4
 8007502:	1a9b      	subs	r3, r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	334d      	adds	r3, #77	@ 0x4d
 800750a:	2202      	movs	r2, #2
 800750c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	011b      	lsls	r3, r3, #4
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	334c      	adds	r3, #76	@ 0x4c
 800751e:	2201      	movs	r2, #1
 8007520:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007522:	78fa      	ldrb	r2, [r7, #3]
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	4613      	mov	r3, r2
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	3326      	adds	r3, #38	@ 0x26
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d00b      	beq.n	8007550 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8007538:	78fa      	ldrb	r2, [r7, #3]
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	4613      	mov	r3, r2
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	3326      	adds	r3, #38	@ 0x26
 8007548:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800754a:	2b03      	cmp	r3, #3
 800754c:	f040 8190 	bne.w	8007870 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	799b      	ldrb	r3, [r3, #6]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d115      	bne.n	8007584 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8007558:	78fa      	ldrb	r2, [r7, #3]
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	4613      	mov	r3, r2
 800755e:	011b      	lsls	r3, r3, #4
 8007560:	1a9b      	subs	r3, r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	440b      	add	r3, r1
 8007566:	333d      	adds	r3, #61	@ 0x3d
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	78fa      	ldrb	r2, [r7, #3]
 800756c:	f083 0301 	eor.w	r3, r3, #1
 8007570:	b2d8      	uxtb	r0, r3
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	4613      	mov	r3, r2
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	1a9b      	subs	r3, r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	333d      	adds	r3, #61	@ 0x3d
 8007580:	4602      	mov	r2, r0
 8007582:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	799b      	ldrb	r3, [r3, #6]
 8007588:	2b01      	cmp	r3, #1
 800758a:	f040 8171 	bne.w	8007870 <HCD_HC_OUT_IRQHandler+0x954>
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	3334      	adds	r3, #52	@ 0x34
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8165 	beq.w	8007870 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80075a6:	78fa      	ldrb	r2, [r7, #3]
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	440b      	add	r3, r1
 80075b4:	3334      	adds	r3, #52	@ 0x34
 80075b6:	6819      	ldr	r1, [r3, #0]
 80075b8:	78fa      	ldrb	r2, [r7, #3]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4613      	mov	r3, r2
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4403      	add	r3, r0
 80075c6:	3328      	adds	r3, #40	@ 0x28
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	440b      	add	r3, r1
 80075cc:	1e59      	subs	r1, r3, #1
 80075ce:	78fa      	ldrb	r2, [r7, #3]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4613      	mov	r3, r2
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	1a9b      	subs	r3, r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4403      	add	r3, r0
 80075dc:	3328      	adds	r3, #40	@ 0x28
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80075e4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 813f 	beq.w	8007870 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80075f2:	78fa      	ldrb	r2, [r7, #3]
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	4613      	mov	r3, r2
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	1a9b      	subs	r3, r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	333d      	adds	r3, #61	@ 0x3d
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	78fa      	ldrb	r2, [r7, #3]
 8007606:	f083 0301 	eor.w	r3, r3, #1
 800760a:	b2d8      	uxtb	r0, r3
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	4613      	mov	r3, r2
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	1a9b      	subs	r3, r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	333d      	adds	r3, #61	@ 0x3d
 800761a:	4602      	mov	r2, r0
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e127      	b.n	8007870 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	4613      	mov	r3, r2
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	440b      	add	r3, r1
 800762e:	334d      	adds	r3, #77	@ 0x4d
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b03      	cmp	r3, #3
 8007634:	d120      	bne.n	8007678 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007636:	78fa      	ldrb	r2, [r7, #3]
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	4613      	mov	r3, r2
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	1a9b      	subs	r3, r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	440b      	add	r3, r1
 8007644:	334d      	adds	r3, #77	@ 0x4d
 8007646:	2202      	movs	r2, #2
 8007648:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800764a:	78fa      	ldrb	r2, [r7, #3]
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	011b      	lsls	r3, r3, #4
 8007652:	1a9b      	subs	r3, r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	331b      	adds	r3, #27
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b01      	cmp	r3, #1
 800765e:	f040 8107 	bne.w	8007870 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	1a9b      	subs	r3, r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	440b      	add	r3, r1
 8007670:	334c      	adds	r3, #76	@ 0x4c
 8007672:	2202      	movs	r2, #2
 8007674:	701a      	strb	r2, [r3, #0]
 8007676:	e0fb      	b.n	8007870 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	4613      	mov	r3, r2
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	1a9b      	subs	r3, r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	334d      	adds	r3, #77	@ 0x4d
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b04      	cmp	r3, #4
 800768c:	d13a      	bne.n	8007704 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800768e:	78fa      	ldrb	r2, [r7, #3]
 8007690:	6879      	ldr	r1, [r7, #4]
 8007692:	4613      	mov	r3, r2
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	334d      	adds	r3, #77	@ 0x4d
 800769e:	2202      	movs	r2, #2
 80076a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80076a2:	78fa      	ldrb	r2, [r7, #3]
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	4613      	mov	r3, r2
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	1a9b      	subs	r3, r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	334c      	adds	r3, #76	@ 0x4c
 80076b2:	2202      	movs	r2, #2
 80076b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80076b6:	78fa      	ldrb	r2, [r7, #3]
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	4613      	mov	r3, r2
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	1a9b      	subs	r3, r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	440b      	add	r3, r1
 80076c4:	331b      	adds	r3, #27
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	f040 80d1 	bne.w	8007870 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80076ce:	78fa      	ldrb	r2, [r7, #3]
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	4613      	mov	r3, r2
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	1a9b      	subs	r3, r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	331b      	adds	r3, #27
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	0151      	lsls	r1, r2, #5
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	440a      	add	r2, r1
 80076f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007700:	6053      	str	r3, [r2, #4]
 8007702:	e0b5      	b.n	8007870 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007704:	78fa      	ldrb	r2, [r7, #3]
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	4613      	mov	r3, r2
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	440b      	add	r3, r1
 8007712:	334d      	adds	r3, #77	@ 0x4d
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b05      	cmp	r3, #5
 8007718:	d114      	bne.n	8007744 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800771a:	78fa      	ldrb	r2, [r7, #3]
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	334d      	adds	r3, #77	@ 0x4d
 800772a:	2202      	movs	r2, #2
 800772c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	6879      	ldr	r1, [r7, #4]
 8007732:	4613      	mov	r3, r2
 8007734:	011b      	lsls	r3, r3, #4
 8007736:	1a9b      	subs	r3, r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	440b      	add	r3, r1
 800773c:	334c      	adds	r3, #76	@ 0x4c
 800773e:	2202      	movs	r2, #2
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	e095      	b.n	8007870 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007744:	78fa      	ldrb	r2, [r7, #3]
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	4613      	mov	r3, r2
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	1a9b      	subs	r3, r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	440b      	add	r3, r1
 8007752:	334d      	adds	r3, #77	@ 0x4d
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	2b06      	cmp	r3, #6
 8007758:	d114      	bne.n	8007784 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800775a:	78fa      	ldrb	r2, [r7, #3]
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	1a9b      	subs	r3, r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	334d      	adds	r3, #77	@ 0x4d
 800776a:	2202      	movs	r2, #2
 800776c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800776e:	78fa      	ldrb	r2, [r7, #3]
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	4613      	mov	r3, r2
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	1a9b      	subs	r3, r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	440b      	add	r3, r1
 800777c:	334c      	adds	r3, #76	@ 0x4c
 800777e:	2205      	movs	r2, #5
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	e075      	b.n	8007870 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007784:	78fa      	ldrb	r2, [r7, #3]
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	4613      	mov	r3, r2
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	334d      	adds	r3, #77	@ 0x4d
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b07      	cmp	r3, #7
 8007798:	d00a      	beq.n	80077b0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800779a:	78fa      	ldrb	r2, [r7, #3]
 800779c:	6879      	ldr	r1, [r7, #4]
 800779e:	4613      	mov	r3, r2
 80077a0:	011b      	lsls	r3, r3, #4
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	440b      	add	r3, r1
 80077a8:	334d      	adds	r3, #77	@ 0x4d
 80077aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80077ac:	2b09      	cmp	r3, #9
 80077ae:	d170      	bne.n	8007892 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80077b0:	78fa      	ldrb	r2, [r7, #3]
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	4613      	mov	r3, r2
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	1a9b      	subs	r3, r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	334d      	adds	r3, #77	@ 0x4d
 80077c0:	2202      	movs	r2, #2
 80077c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80077c4:	78fa      	ldrb	r2, [r7, #3]
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	4613      	mov	r3, r2
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	1a9b      	subs	r3, r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	440b      	add	r3, r1
 80077d2:	3344      	adds	r3, #68	@ 0x44
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	1c59      	adds	r1, r3, #1
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	4613      	mov	r3, r2
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	1a9b      	subs	r3, r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4403      	add	r3, r0
 80077e4:	3344      	adds	r3, #68	@ 0x44
 80077e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80077e8:	78fa      	ldrb	r2, [r7, #3]
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	4613      	mov	r3, r2
 80077ee:	011b      	lsls	r3, r3, #4
 80077f0:	1a9b      	subs	r3, r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	3344      	adds	r3, #68	@ 0x44
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d914      	bls.n	8007828 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80077fe:	78fa      	ldrb	r2, [r7, #3]
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	011b      	lsls	r3, r3, #4
 8007806:	1a9b      	subs	r3, r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	3344      	adds	r3, #68	@ 0x44
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007812:	78fa      	ldrb	r2, [r7, #3]
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	4613      	mov	r3, r2
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	1a9b      	subs	r3, r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	334c      	adds	r3, #76	@ 0x4c
 8007822:	2204      	movs	r2, #4
 8007824:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007826:	e022      	b.n	800786e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007828:	78fa      	ldrb	r2, [r7, #3]
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	4613      	mov	r3, r2
 800782e:	011b      	lsls	r3, r3, #4
 8007830:	1a9b      	subs	r3, r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	334c      	adds	r3, #76	@ 0x4c
 8007838:	2202      	movs	r2, #2
 800783a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	4413      	add	r3, r2
 8007844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007852:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800785a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	4413      	add	r3, r2
 8007864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007868:	461a      	mov	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800786e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007870:	78fa      	ldrb	r2, [r7, #3]
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	4613      	mov	r3, r2
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	1a9b      	subs	r3, r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	440b      	add	r3, r1
 800787e:	334c      	adds	r3, #76	@ 0x4c
 8007880:	781a      	ldrb	r2, [r3, #0]
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f00c fcb2 	bl	80141f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800788c:	e002      	b.n	8007894 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800788e:	bf00      	nop
 8007890:	e000      	b.n	8007894 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8007892:	bf00      	nop
  }
}
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b08a      	sub	sp, #40	@ 0x28
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	0c5b      	lsrs	r3, r3, #17
 80078c0:	f003 030f 	and.w	r3, r3, #15
 80078c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	091b      	lsrs	r3, r3, #4
 80078ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d004      	beq.n	80078e0 <HCD_RXQLVL_IRQHandler+0x46>
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b05      	cmp	r3, #5
 80078da:	f000 80b6 	beq.w	8007a4a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80078de:	e0b7      	b.n	8007a50 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80b3 	beq.w	8007a4e <HCD_RXQLVL_IRQHandler+0x1b4>
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	4613      	mov	r3, r2
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	1a9b      	subs	r3, r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	332c      	adds	r3, #44	@ 0x2c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 80a7 	beq.w	8007a4e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	4613      	mov	r3, r2
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	1a9b      	subs	r3, r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	3338      	adds	r3, #56	@ 0x38
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	18d1      	adds	r1, r2, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	4613      	mov	r3, r2
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4403      	add	r3, r0
 8007924:	3334      	adds	r3, #52	@ 0x34
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4299      	cmp	r1, r3
 800792a:	f200 8083 	bhi.w	8007a34 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	4613      	mov	r3, r2
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	440b      	add	r3, r1
 8007940:	332c      	adds	r3, #44	@ 0x2c
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	b292      	uxth	r2, r2
 8007948:	4619      	mov	r1, r3
 800794a:	f006 f815 	bl	800d978 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	4613      	mov	r3, r2
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	332c      	adds	r3, #44	@ 0x2c
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	18d1      	adds	r1, r2, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	4613      	mov	r3, r2
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	1a9b      	subs	r3, r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4403      	add	r3, r0
 8007972:	332c      	adds	r3, #44	@ 0x2c
 8007974:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	4613      	mov	r3, r2
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	1a9b      	subs	r3, r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	440b      	add	r3, r1
 8007984:	3338      	adds	r3, #56	@ 0x38
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	18d1      	adds	r1, r2, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4613      	mov	r3, r2
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	1a9b      	subs	r3, r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4403      	add	r3, r0
 800799a:	3338      	adds	r3, #56	@ 0x38
 800799c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	0cdb      	lsrs	r3, r3, #19
 80079ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079b2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80079b4:	6879      	ldr	r1, [r7, #4]
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	4613      	mov	r3, r2
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	1a9b      	subs	r3, r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	3328      	adds	r3, #40	@ 0x28
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	461a      	mov	r2, r3
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d13f      	bne.n	8007a4e <HCD_RXQLVL_IRQHandler+0x1b4>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d03c      	beq.n	8007a4e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80079ea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079f2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a00:	461a      	mov	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	1a9b      	subs	r3, r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	440b      	add	r3, r1
 8007a14:	333c      	adds	r3, #60	@ 0x3c
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	f083 0301 	eor.w	r3, r3, #1
 8007a1c:	b2d8      	uxtb	r0, r3
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	4613      	mov	r3, r2
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	440b      	add	r3, r1
 8007a2c:	333c      	adds	r3, #60	@ 0x3c
 8007a2e:	4602      	mov	r2, r0
 8007a30:	701a      	strb	r2, [r3, #0]
      break;
 8007a32:	e00c      	b.n	8007a4e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	334c      	adds	r3, #76	@ 0x4c
 8007a44:	2204      	movs	r2, #4
 8007a46:	701a      	strb	r2, [r3, #0]
      break;
 8007a48:	e001      	b.n	8007a4e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007a4a:	bf00      	nop
 8007a4c:	e000      	b.n	8007a50 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007a4e:	bf00      	nop
  }
}
 8007a50:	bf00      	nop
 8007a52:	3728      	adds	r7, #40	@ 0x28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007a84:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d10b      	bne.n	8007aa8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d102      	bne.n	8007aa0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f00c fb8c 	bl	80141b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f043 0302 	orr.w	r3, r3, #2
 8007aa6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f003 0308 	and.w	r3, r3, #8
 8007aae:	2b08      	cmp	r3, #8
 8007ab0:	d132      	bne.n	8007b18 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f043 0308 	orr.w	r3, r3, #8
 8007ab8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d126      	bne.n	8007b12 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	7a5b      	ldrb	r3, [r3, #9]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d113      	bne.n	8007af4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8007ad2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ad6:	d106      	bne.n	8007ae6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2102      	movs	r1, #2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f006 f8ce 	bl	800dc80 <USB_InitFSLSPClkSel>
 8007ae4:	e011      	b.n	8007b0a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2101      	movs	r1, #1
 8007aec:	4618      	mov	r0, r3
 8007aee:	f006 f8c7 	bl	800dc80 <USB_InitFSLSPClkSel>
 8007af2:	e00a      	b.n	8007b0a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	79db      	ldrb	r3, [r3, #7]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d106      	bne.n	8007b0a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b02:	461a      	mov	r2, r3
 8007b04:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8007b08:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f00c fb7e 	bl	801420c <HAL_HCD_PortEnabled_Callback>
 8007b10:	e002      	b.n	8007b18 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f00c fb88 	bl	8014228 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	d103      	bne.n	8007b2a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f043 0320 	orr.w	r3, r3, #32
 8007b28:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007b30:	461a      	mov	r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	6013      	str	r3, [r2, #0]
}
 8007b36:	bf00      	nop
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e12b      	b.n	8007daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fb f93c 	bl	8002de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2224      	movs	r2, #36	@ 0x24
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0201 	bic.w	r2, r2, #1
 8007b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ba4:	f000 ff82 	bl	8008aac <HAL_RCC_GetPCLK1Freq>
 8007ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	4a81      	ldr	r2, [pc, #516]	@ (8007db4 <HAL_I2C_Init+0x274>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d807      	bhi.n	8007bc4 <HAL_I2C_Init+0x84>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4a80      	ldr	r2, [pc, #512]	@ (8007db8 <HAL_I2C_Init+0x278>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	bf94      	ite	ls
 8007bbc:	2301      	movls	r3, #1
 8007bbe:	2300      	movhi	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	e006      	b.n	8007bd2 <HAL_I2C_Init+0x92>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4a7d      	ldr	r2, [pc, #500]	@ (8007dbc <HAL_I2C_Init+0x27c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	bf94      	ite	ls
 8007bcc:	2301      	movls	r3, #1
 8007bce:	2300      	movhi	r3, #0
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e0e7      	b.n	8007daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a78      	ldr	r2, [pc, #480]	@ (8007dc0 <HAL_I2C_Init+0x280>)
 8007bde:	fba2 2303 	umull	r2, r3, r2, r3
 8007be2:	0c9b      	lsrs	r3, r3, #18
 8007be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4a6a      	ldr	r2, [pc, #424]	@ (8007db4 <HAL_I2C_Init+0x274>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d802      	bhi.n	8007c14 <HAL_I2C_Init+0xd4>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	3301      	adds	r3, #1
 8007c12:	e009      	b.n	8007c28 <HAL_I2C_Init+0xe8>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007c1a:	fb02 f303 	mul.w	r3, r2, r3
 8007c1e:	4a69      	ldr	r2, [pc, #420]	@ (8007dc4 <HAL_I2C_Init+0x284>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	099b      	lsrs	r3, r3, #6
 8007c26:	3301      	adds	r3, #1
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6812      	ldr	r2, [r2, #0]
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007c3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	495c      	ldr	r1, [pc, #368]	@ (8007db4 <HAL_I2C_Init+0x274>)
 8007c44:	428b      	cmp	r3, r1
 8007c46:	d819      	bhi.n	8007c7c <HAL_I2C_Init+0x13c>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	1e59      	subs	r1, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c56:	1c59      	adds	r1, r3, #1
 8007c58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007c5c:	400b      	ands	r3, r1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <HAL_I2C_Init+0x138>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1e59      	subs	r1, r3, #1
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c70:	3301      	adds	r3, #1
 8007c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c76:	e051      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	e04f      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d111      	bne.n	8007ca8 <HAL_I2C_Init+0x168>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	1e58      	subs	r0, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6859      	ldr	r1, [r3, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	440b      	add	r3, r1
 8007c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c96:	3301      	adds	r3, #1
 8007c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bf0c      	ite	eq
 8007ca0:	2301      	moveq	r3, #1
 8007ca2:	2300      	movne	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	e012      	b.n	8007cce <HAL_I2C_Init+0x18e>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	1e58      	subs	r0, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6859      	ldr	r1, [r3, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	0099      	lsls	r1, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bf0c      	ite	eq
 8007cc8:	2301      	moveq	r3, #1
 8007cca:	2300      	movne	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_I2C_Init+0x196>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e022      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10e      	bne.n	8007cfc <HAL_I2C_Init+0x1bc>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1e58      	subs	r0, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6859      	ldr	r1, [r3, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	440b      	add	r3, r1
 8007cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cfa:	e00f      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	1e58      	subs	r0, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6859      	ldr	r1, [r3, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	0099      	lsls	r1, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d12:	3301      	adds	r3, #1
 8007d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	6809      	ldr	r1, [r1, #0]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69da      	ldr	r2, [r3, #28]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007d4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6911      	ldr	r1, [r2, #16]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	68d2      	ldr	r2, [r2, #12]
 8007d56:	4311      	orrs	r1, r2
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6812      	ldr	r2, [r2, #0]
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695a      	ldr	r2, [r3, #20]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2220      	movs	r2, #32
 8007d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	000186a0 	.word	0x000186a0
 8007db8:	001e847f 	.word	0x001e847f
 8007dbc:	003d08ff 	.word	0x003d08ff
 8007dc0:	431bde83 	.word	0x431bde83
 8007dc4:	10624dd3 	.word	0x10624dd3

08007dc8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e0bf      	b.n	8007f5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fb f876 	bl	8002ee0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007e0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6999      	ldr	r1, [r3, #24]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6899      	ldr	r1, [r3, #8]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8007f64 <HAL_LTDC_Init+0x19c>)
 8007e3c:	400b      	ands	r3, r1
 8007e3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	041b      	lsls	r3, r3, #16
 8007e46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6899      	ldr	r1, [r3, #8]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699a      	ldr	r2, [r3, #24]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	431a      	orrs	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68d9      	ldr	r1, [r3, #12]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4b3e      	ldr	r3, [pc, #248]	@ (8007f64 <HAL_LTDC_Init+0x19c>)
 8007e6a:	400b      	ands	r3, r1
 8007e6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	041b      	lsls	r3, r3, #16
 8007e74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68d9      	ldr	r1, [r3, #12]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a1a      	ldr	r2, [r3, #32]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	431a      	orrs	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6919      	ldr	r1, [r3, #16]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4b33      	ldr	r3, [pc, #204]	@ (8007f64 <HAL_LTDC_Init+0x19c>)
 8007e98:	400b      	ands	r3, r1
 8007e9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea0:	041b      	lsls	r3, r3, #16
 8007ea2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6919      	ldr	r1, [r3, #16]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6959      	ldr	r1, [r3, #20]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	4b27      	ldr	r3, [pc, #156]	@ (8007f64 <HAL_LTDC_Init+0x19c>)
 8007ec6:	400b      	ands	r3, r1
 8007ec8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ece:	041b      	lsls	r3, r3, #16
 8007ed0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6959      	ldr	r1, [r3, #20]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0206 	orr.w	r2, r2, #6
 8007f36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0201 	orr.w	r2, r2, #1
 8007f46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	f000f800 	.word	0xf000f800

08007f68 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d023      	beq.n	8007fd2 <HAL_LTDC_IRQHandler+0x6a>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d01e      	beq.n	8007fd2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 0204 	bic.w	r2, r2, #4
 8007fa2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2204      	movs	r2, #4
 8007faa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fb2:	f043 0201 	orr.w	r2, r3, #1
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2204      	movs	r2, #4
 8007fc0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f86f 	bl	80080b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d023      	beq.n	8008024 <HAL_LTDC_IRQHandler+0xbc>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d01e      	beq.n	8008024 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0202 	bic.w	r2, r2, #2
 8007ff4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008004:	f043 0202 	orr.w	r2, r3, #2
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2204      	movs	r2, #4
 8008012:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f846 	bl	80080b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d01b      	beq.n	8008066 <HAL_LTDC_IRQHandler+0xfe>
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	2b00      	cmp	r3, #0
 8008036:	d016      	beq.n	8008066 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 0201 	bic.w	r2, r2, #1
 8008046:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2201      	movs	r2, #1
 800804e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f82f 	bl	80080c4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d01b      	beq.n	80080a8 <HAL_LTDC_IRQHandler+0x140>
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d016      	beq.n	80080a8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0208 	bic.w	r2, r2, #8
 8008088:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2208      	movs	r2, #8
 8008090:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f818 	bl	80080d8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80080a8:	bf00      	nop
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80080ec:	b5b0      	push	{r4, r5, r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_LTDC_ConfigLayer+0x1a>
 8008102:	2302      	movs	r3, #2
 8008104:	e02c      	b.n	8008160 <HAL_LTDC_ConfigLayer+0x74>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2134      	movs	r1, #52	@ 0x34
 800811c:	fb01 f303 	mul.w	r3, r1, r3
 8008120:	4413      	add	r3, r2
 8008122:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	4614      	mov	r4, r2
 800812a:	461d      	mov	r5, r3
 800812c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800812e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	68b9      	ldr	r1, [r7, #8]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 f811 	bl	8008168 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2201      	movs	r2, #1
 800814c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bdb0      	pop	{r4, r5, r7, pc}

08008168 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008168:	b480      	push	{r7}
 800816a:	b089      	sub	sp, #36	@ 0x24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	0c1b      	lsrs	r3, r3, #16
 8008180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008184:	4413      	add	r3, r2
 8008186:	041b      	lsls	r3, r3, #16
 8008188:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	01db      	lsls	r3, r3, #7
 8008194:	4413      	add	r3, r2
 8008196:	3384      	adds	r3, #132	@ 0x84
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	6812      	ldr	r2, [r2, #0]
 800819e:	4611      	mov	r1, r2
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	01d2      	lsls	r2, r2, #7
 80081a4:	440a      	add	r2, r1
 80081a6:	3284      	adds	r2, #132	@ 0x84
 80081a8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80081ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	0c1b      	lsrs	r3, r3, #16
 80081ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80081be:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80081c0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4619      	mov	r1, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	01db      	lsls	r3, r3, #7
 80081cc:	440b      	add	r3, r1
 80081ce:	3384      	adds	r3, #132	@ 0x84
 80081d0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80081d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081e6:	4413      	add	r3, r2
 80081e8:	041b      	lsls	r3, r3, #16
 80081ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	01db      	lsls	r3, r3, #7
 80081f6:	4413      	add	r3, r2
 80081f8:	3384      	adds	r3, #132	@ 0x84
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	6812      	ldr	r2, [r2, #0]
 8008200:	4611      	mov	r1, r2
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	01d2      	lsls	r2, r2, #7
 8008206:	440a      	add	r2, r1
 8008208:	3284      	adds	r2, #132	@ 0x84
 800820a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800820e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800821e:	4413      	add	r3, r2
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4619      	mov	r1, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	01db      	lsls	r3, r3, #7
 800822c:	440b      	add	r3, r1
 800822e:	3384      	adds	r3, #132	@ 0x84
 8008230:	4619      	mov	r1, r3
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	4313      	orrs	r3, r2
 8008236:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	461a      	mov	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	01db      	lsls	r3, r3, #7
 8008242:	4413      	add	r3, r2
 8008244:	3384      	adds	r3, #132	@ 0x84
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	6812      	ldr	r2, [r2, #0]
 800824c:	4611      	mov	r1, r2
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	01d2      	lsls	r2, r2, #7
 8008252:	440a      	add	r2, r1
 8008254:	3284      	adds	r2, #132	@ 0x84
 8008256:	f023 0307 	bic.w	r3, r3, #7
 800825a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	461a      	mov	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	01db      	lsls	r3, r3, #7
 8008266:	4413      	add	r3, r2
 8008268:	3384      	adds	r3, #132	@ 0x84
 800826a:	461a      	mov	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008282:	041b      	lsls	r3, r3, #16
 8008284:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	061b      	lsls	r3, r3, #24
 800828c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	01db      	lsls	r3, r3, #7
 8008298:	4413      	add	r3, r2
 800829a:	3384      	adds	r3, #132	@ 0x84
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	01db      	lsls	r3, r3, #7
 80082a8:	4413      	add	r3, r2
 80082aa:	3384      	adds	r3, #132	@ 0x84
 80082ac:	461a      	mov	r2, r3
 80082ae:	2300      	movs	r3, #0
 80082b0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80082b8:	461a      	mov	r2, r3
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	431a      	orrs	r2, r3
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	431a      	orrs	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4619      	mov	r1, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	01db      	lsls	r3, r3, #7
 80082cc:	440b      	add	r3, r1
 80082ce:	3384      	adds	r3, #132	@ 0x84
 80082d0:	4619      	mov	r1, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	01db      	lsls	r3, r3, #7
 80082e2:	4413      	add	r3, r2
 80082e4:	3384      	adds	r3, #132	@ 0x84
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	4611      	mov	r1, r2
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	01d2      	lsls	r2, r2, #7
 80082f2:	440a      	add	r2, r1
 80082f4:	3284      	adds	r2, #132	@ 0x84
 80082f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80082fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	01db      	lsls	r3, r3, #7
 8008306:	4413      	add	r3, r2
 8008308:	3384      	adds	r3, #132	@ 0x84
 800830a:	461a      	mov	r2, r3
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	01db      	lsls	r3, r3, #7
 800831c:	4413      	add	r3, r2
 800831e:	3384      	adds	r3, #132	@ 0x84
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	6812      	ldr	r2, [r2, #0]
 8008326:	4611      	mov	r1, r2
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	01d2      	lsls	r2, r2, #7
 800832c:	440a      	add	r2, r1
 800832e:	3284      	adds	r2, #132	@ 0x84
 8008330:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008334:	f023 0307 	bic.w	r3, r3, #7
 8008338:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	69da      	ldr	r2, [r3, #28]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	68f9      	ldr	r1, [r7, #12]
 8008344:	6809      	ldr	r1, [r1, #0]
 8008346:	4608      	mov	r0, r1
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	01c9      	lsls	r1, r1, #7
 800834c:	4401      	add	r1, r0
 800834e:	3184      	adds	r1, #132	@ 0x84
 8008350:	4313      	orrs	r3, r2
 8008352:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	01db      	lsls	r3, r3, #7
 800835e:	4413      	add	r3, r2
 8008360:	3384      	adds	r3, #132	@ 0x84
 8008362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	01db      	lsls	r3, r3, #7
 800836e:	4413      	add	r3, r2
 8008370:	3384      	adds	r3, #132	@ 0x84
 8008372:	461a      	mov	r2, r3
 8008374:	2300      	movs	r3, #0
 8008376:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	01db      	lsls	r3, r3, #7
 8008382:	4413      	add	r3, r2
 8008384:	3384      	adds	r3, #132	@ 0x84
 8008386:	461a      	mov	r2, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008396:	2304      	movs	r3, #4
 8008398:	61fb      	str	r3, [r7, #28]
 800839a:	e01b      	b.n	80083d4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d102      	bne.n	80083aa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80083a4:	2303      	movs	r3, #3
 80083a6:	61fb      	str	r3, [r7, #28]
 80083a8:	e014      	b.n	80083d4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d00b      	beq.n	80083ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d007      	beq.n	80083ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d003      	beq.n	80083ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80083c6:	2b07      	cmp	r3, #7
 80083c8:	d102      	bne.n	80083d0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80083ca:	2302      	movs	r3, #2
 80083cc:	61fb      	str	r3, [r7, #28]
 80083ce:	e001      	b.n	80083d4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80083d0:	2301      	movs	r3, #1
 80083d2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	01db      	lsls	r3, r3, #7
 80083de:	4413      	add	r3, r2
 80083e0:	3384      	adds	r3, #132	@ 0x84
 80083e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	6812      	ldr	r2, [r2, #0]
 80083e8:	4611      	mov	r1, r2
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	01d2      	lsls	r2, r2, #7
 80083ee:	440a      	add	r2, r1
 80083f0:	3284      	adds	r2, #132	@ 0x84
 80083f2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80083f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fc:	69fa      	ldr	r2, [r7, #28]
 80083fe:	fb02 f303 	mul.w	r3, r2, r3
 8008402:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	6859      	ldr	r1, [r3, #4]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	1acb      	subs	r3, r1, r3
 800840e:	69f9      	ldr	r1, [r7, #28]
 8008410:	fb01 f303 	mul.w	r3, r1, r3
 8008414:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008416:	68f9      	ldr	r1, [r7, #12]
 8008418:	6809      	ldr	r1, [r1, #0]
 800841a:	4608      	mov	r0, r1
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	01c9      	lsls	r1, r1, #7
 8008420:	4401      	add	r1, r0
 8008422:	3184      	adds	r1, #132	@ 0x84
 8008424:	4313      	orrs	r3, r2
 8008426:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	01db      	lsls	r3, r3, #7
 8008432:	4413      	add	r3, r2
 8008434:	3384      	adds	r3, #132	@ 0x84
 8008436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	6812      	ldr	r2, [r2, #0]
 800843c:	4611      	mov	r1, r2
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	01d2      	lsls	r2, r2, #7
 8008442:	440a      	add	r2, r1
 8008444:	3284      	adds	r2, #132	@ 0x84
 8008446:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800844a:	f023 0307 	bic.w	r3, r3, #7
 800844e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	461a      	mov	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	01db      	lsls	r3, r3, #7
 800845a:	4413      	add	r3, r2
 800845c:	3384      	adds	r3, #132	@ 0x84
 800845e:	461a      	mov	r2, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008464:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	01db      	lsls	r3, r3, #7
 8008470:	4413      	add	r3, r2
 8008472:	3384      	adds	r3, #132	@ 0x84
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	6812      	ldr	r2, [r2, #0]
 800847a:	4611      	mov	r1, r2
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	01d2      	lsls	r2, r2, #7
 8008480:	440a      	add	r2, r1
 8008482:	3284      	adds	r2, #132	@ 0x84
 8008484:	f043 0301 	orr.w	r3, r3, #1
 8008488:	6013      	str	r3, [r2, #0]
}
 800848a:	bf00      	nop
 800848c:	3724      	adds	r7, #36	@ 0x24
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
	...

08008498 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80084a2:	2300      	movs	r3, #0
 80084a4:	603b      	str	r3, [r7, #0]
 80084a6:	4b20      	ldr	r3, [pc, #128]	@ (8008528 <HAL_PWREx_EnableOverDrive+0x90>)
 80084a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008528 <HAL_PWREx_EnableOverDrive+0x90>)
 80084ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80084b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008528 <HAL_PWREx_EnableOverDrive+0x90>)
 80084b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80084be:	4b1b      	ldr	r3, [pc, #108]	@ (800852c <HAL_PWREx_EnableOverDrive+0x94>)
 80084c0:	2201      	movs	r2, #1
 80084c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80084c4:	f7fb fafa 	bl	8003abc <HAL_GetTick>
 80084c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80084ca:	e009      	b.n	80084e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80084cc:	f7fb faf6 	bl	8003abc <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084da:	d901      	bls.n	80084e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e01f      	b.n	8008520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80084e0:	4b13      	ldr	r3, [pc, #76]	@ (8008530 <HAL_PWREx_EnableOverDrive+0x98>)
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084ec:	d1ee      	bne.n	80084cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80084ee:	4b11      	ldr	r3, [pc, #68]	@ (8008534 <HAL_PWREx_EnableOverDrive+0x9c>)
 80084f0:	2201      	movs	r2, #1
 80084f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80084f4:	f7fb fae2 	bl	8003abc <HAL_GetTick>
 80084f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80084fa:	e009      	b.n	8008510 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80084fc:	f7fb fade 	bl	8003abc <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800850a:	d901      	bls.n	8008510 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e007      	b.n	8008520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008510:	4b07      	ldr	r3, [pc, #28]	@ (8008530 <HAL_PWREx_EnableOverDrive+0x98>)
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800851c:	d1ee      	bne.n	80084fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	40023800 	.word	0x40023800
 800852c:	420e0040 	.word	0x420e0040
 8008530:	40007000 	.word	0x40007000
 8008534:	420e0044 	.word	0x420e0044

08008538 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af02      	add	r7, sp, #8
 800853e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008540:	f7fb fabc 	bl	8003abc <HAL_GetTick>
 8008544:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e069      	b.n	8008624 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10b      	bne.n	8008574 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7fa fce3 	bl	8002f30 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800856a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f85e 	bl	8008630 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	3b01      	subs	r3, #1
 8008584:	021a      	lsls	r2, r3, #8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	2120      	movs	r1, #32
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f856 	bl	800864c <QSPI_WaitFlagStateUntilTimeout>
 80085a0:	4603      	mov	r3, r0
 80085a2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80085a4:	7afb      	ldrb	r3, [r7, #11]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d137      	bne.n	800861a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80085b4:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6852      	ldr	r2, [r2, #4]
 80085bc:	0611      	lsls	r1, r2, #24
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	68d2      	ldr	r2, [r2, #12]
 80085c2:	4311      	orrs	r1, r2
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	69d2      	ldr	r2, [r2, #28]
 80085c8:	4311      	orrs	r1, r2
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6a12      	ldr	r2, [r2, #32]
 80085ce:	4311      	orrs	r1, r2
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	6812      	ldr	r2, [r2, #0]
 80085d4:	430b      	orrs	r3, r1
 80085d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	4b13      	ldr	r3, [pc, #76]	@ (800862c <HAL_QSPI_Init+0xf4>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6912      	ldr	r2, [r2, #16]
 80085e6:	0411      	lsls	r1, r2, #16
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	6952      	ldr	r2, [r2, #20]
 80085ec:	4311      	orrs	r1, r2
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	6992      	ldr	r2, [r2, #24]
 80085f2:	4311      	orrs	r1, r2
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6812      	ldr	r2, [r2, #0]
 80085f8:	430b      	orrs	r3, r1
 80085fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f042 0201 	orr.w	r2, r2, #1
 800860a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8008622:	7afb      	ldrb	r3, [r7, #11]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	ffe0f8fe 	.word	0xffe0f8fe

08008630 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	4613      	mov	r3, r2
 800865a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800865c:	e01a      	b.n	8008694 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008664:	d016      	beq.n	8008694 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008666:	f7fb fa29 	bl	8003abc <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	429a      	cmp	r2, r3
 8008674:	d302      	bcc.n	800867c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10b      	bne.n	8008694 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2204      	movs	r2, #4
 8008680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008688:	f043 0201 	orr.w	r2, r3, #1
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e00e      	b.n	80086b2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	4013      	ands	r3, r2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bf14      	ite	ne
 80086a2:	2301      	movne	r3, #1
 80086a4:	2300      	moveq	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d1d6      	bne.n	800865e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e0cc      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086d0:	4b68      	ldr	r3, [pc, #416]	@ (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d90c      	bls.n	80086f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086de:	4b65      	ldr	r3, [pc, #404]	@ (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086e6:	4b63      	ldr	r3, [pc, #396]	@ (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 030f 	and.w	r3, r3, #15
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d001      	beq.n	80086f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e0b8      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d020      	beq.n	8008746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008710:	4b59      	ldr	r3, [pc, #356]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	4a58      	ldr	r2, [pc, #352]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008716:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800871a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0308 	and.w	r3, r3, #8
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008728:	4b53      	ldr	r3, [pc, #332]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	4a52      	ldr	r2, [pc, #328]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800872e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008734:	4b50      	ldr	r3, [pc, #320]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	494d      	ldr	r1, [pc, #308]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008742:	4313      	orrs	r3, r2
 8008744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d044      	beq.n	80087dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d107      	bne.n	800876a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800875a:	4b47      	ldr	r3, [pc, #284]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d119      	bne.n	800879a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e07f      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d003      	beq.n	800877a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008776:	2b03      	cmp	r3, #3
 8008778:	d107      	bne.n	800878a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800877a:	4b3f      	ldr	r3, [pc, #252]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d109      	bne.n	800879a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e06f      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800878a:	4b3b      	ldr	r3, [pc, #236]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e067      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800879a:	4b37      	ldr	r3, [pc, #220]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f023 0203 	bic.w	r2, r3, #3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	4934      	ldr	r1, [pc, #208]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087ac:	f7fb f986 	bl	8003abc <HAL_GetTick>
 80087b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087b2:	e00a      	b.n	80087ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087b4:	f7fb f982 	bl	8003abc <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e04f      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ca:	4b2b      	ldr	r3, [pc, #172]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 020c 	and.w	r2, r3, #12
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	429a      	cmp	r2, r3
 80087da:	d1eb      	bne.n	80087b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087dc:	4b25      	ldr	r3, [pc, #148]	@ (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 030f 	and.w	r3, r3, #15
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d20c      	bcs.n	8008804 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ea:	4b22      	ldr	r3, [pc, #136]	@ (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	b2d2      	uxtb	r2, r2
 80087f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087f2:	4b20      	ldr	r3, [pc, #128]	@ (8008874 <HAL_RCC_ClockConfig+0x1b8>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 030f 	and.w	r3, r3, #15
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d001      	beq.n	8008804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e032      	b.n	800886a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	d008      	beq.n	8008822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008810:	4b19      	ldr	r3, [pc, #100]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	4916      	ldr	r1, [pc, #88]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800881e:	4313      	orrs	r3, r2
 8008820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0308 	and.w	r3, r3, #8
 800882a:	2b00      	cmp	r3, #0
 800882c:	d009      	beq.n	8008842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800882e:	4b12      	ldr	r3, [pc, #72]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	490e      	ldr	r1, [pc, #56]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800883e:	4313      	orrs	r3, r2
 8008840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008842:	f000 f821 	bl	8008888 <HAL_RCC_GetSysClockFreq>
 8008846:	4602      	mov	r2, r0
 8008848:	4b0b      	ldr	r3, [pc, #44]	@ (8008878 <HAL_RCC_ClockConfig+0x1bc>)
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	091b      	lsrs	r3, r3, #4
 800884e:	f003 030f 	and.w	r3, r3, #15
 8008852:	490a      	ldr	r1, [pc, #40]	@ (800887c <HAL_RCC_ClockConfig+0x1c0>)
 8008854:	5ccb      	ldrb	r3, [r1, r3]
 8008856:	fa22 f303 	lsr.w	r3, r2, r3
 800885a:	4a09      	ldr	r2, [pc, #36]	@ (8008880 <HAL_RCC_ClockConfig+0x1c4>)
 800885c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800885e:	4b09      	ldr	r3, [pc, #36]	@ (8008884 <HAL_RCC_ClockConfig+0x1c8>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4618      	mov	r0, r3
 8008864:	f7fa feec 	bl	8003640 <HAL_InitTick>

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	40023c00 	.word	0x40023c00
 8008878:	40023800 	.word	0x40023800
 800887c:	08016104 	.word	0x08016104
 8008880:	20000000 	.word	0x20000000
 8008884:	20000004 	.word	0x20000004

08008888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800888c:	b094      	sub	sp, #80	@ 0x50
 800888e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088a0:	4b79      	ldr	r3, [pc, #484]	@ (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f003 030c 	and.w	r3, r3, #12
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d00d      	beq.n	80088c8 <HAL_RCC_GetSysClockFreq+0x40>
 80088ac:	2b08      	cmp	r3, #8
 80088ae:	f200 80e1 	bhi.w	8008a74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <HAL_RCC_GetSysClockFreq+0x34>
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d003      	beq.n	80088c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80088ba:	e0db      	b.n	8008a74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80088bc:	4b73      	ldr	r3, [pc, #460]	@ (8008a8c <HAL_RCC_GetSysClockFreq+0x204>)
 80088be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80088c0:	e0db      	b.n	8008a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80088c2:	4b73      	ldr	r3, [pc, #460]	@ (8008a90 <HAL_RCC_GetSysClockFreq+0x208>)
 80088c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80088c6:	e0d8      	b.n	8008a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80088c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80088d2:	4b6d      	ldr	r3, [pc, #436]	@ (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d063      	beq.n	80089a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088de:	4b6a      	ldr	r3, [pc, #424]	@ (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	099b      	lsrs	r3, r3, #6
 80088e4:	2200      	movs	r2, #0
 80088e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80088ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80088f2:	2300      	movs	r3, #0
 80088f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80088fa:	4622      	mov	r2, r4
 80088fc:	462b      	mov	r3, r5
 80088fe:	f04f 0000 	mov.w	r0, #0
 8008902:	f04f 0100 	mov.w	r1, #0
 8008906:	0159      	lsls	r1, r3, #5
 8008908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800890c:	0150      	lsls	r0, r2, #5
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4621      	mov	r1, r4
 8008914:	1a51      	subs	r1, r2, r1
 8008916:	6139      	str	r1, [r7, #16]
 8008918:	4629      	mov	r1, r5
 800891a:	eb63 0301 	sbc.w	r3, r3, r1
 800891e:	617b      	str	r3, [r7, #20]
 8008920:	f04f 0200 	mov.w	r2, #0
 8008924:	f04f 0300 	mov.w	r3, #0
 8008928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800892c:	4659      	mov	r1, fp
 800892e:	018b      	lsls	r3, r1, #6
 8008930:	4651      	mov	r1, sl
 8008932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008936:	4651      	mov	r1, sl
 8008938:	018a      	lsls	r2, r1, #6
 800893a:	4651      	mov	r1, sl
 800893c:	ebb2 0801 	subs.w	r8, r2, r1
 8008940:	4659      	mov	r1, fp
 8008942:	eb63 0901 	sbc.w	r9, r3, r1
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	f04f 0300 	mov.w	r3, #0
 800894e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800895a:	4690      	mov	r8, r2
 800895c:	4699      	mov	r9, r3
 800895e:	4623      	mov	r3, r4
 8008960:	eb18 0303 	adds.w	r3, r8, r3
 8008964:	60bb      	str	r3, [r7, #8]
 8008966:	462b      	mov	r3, r5
 8008968:	eb49 0303 	adc.w	r3, r9, r3
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	f04f 0200 	mov.w	r2, #0
 8008972:	f04f 0300 	mov.w	r3, #0
 8008976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800897a:	4629      	mov	r1, r5
 800897c:	024b      	lsls	r3, r1, #9
 800897e:	4621      	mov	r1, r4
 8008980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008984:	4621      	mov	r1, r4
 8008986:	024a      	lsls	r2, r1, #9
 8008988:	4610      	mov	r0, r2
 800898a:	4619      	mov	r1, r3
 800898c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800898e:	2200      	movs	r2, #0
 8008990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008998:	f7f7 fc8a 	bl	80002b0 <__aeabi_uldivmod>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4613      	mov	r3, r2
 80089a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089a4:	e058      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089a6:	4b38      	ldr	r3, [pc, #224]	@ (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	099b      	lsrs	r3, r3, #6
 80089ac:	2200      	movs	r2, #0
 80089ae:	4618      	mov	r0, r3
 80089b0:	4611      	mov	r1, r2
 80089b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80089b6:	623b      	str	r3, [r7, #32]
 80089b8:	2300      	movs	r3, #0
 80089ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80089bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80089c0:	4642      	mov	r2, r8
 80089c2:	464b      	mov	r3, r9
 80089c4:	f04f 0000 	mov.w	r0, #0
 80089c8:	f04f 0100 	mov.w	r1, #0
 80089cc:	0159      	lsls	r1, r3, #5
 80089ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089d2:	0150      	lsls	r0, r2, #5
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4641      	mov	r1, r8
 80089da:	ebb2 0a01 	subs.w	sl, r2, r1
 80089de:	4649      	mov	r1, r9
 80089e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	f04f 0300 	mov.w	r3, #0
 80089ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80089f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80089f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80089f8:	ebb2 040a 	subs.w	r4, r2, sl
 80089fc:	eb63 050b 	sbc.w	r5, r3, fp
 8008a00:	f04f 0200 	mov.w	r2, #0
 8008a04:	f04f 0300 	mov.w	r3, #0
 8008a08:	00eb      	lsls	r3, r5, #3
 8008a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a0e:	00e2      	lsls	r2, r4, #3
 8008a10:	4614      	mov	r4, r2
 8008a12:	461d      	mov	r5, r3
 8008a14:	4643      	mov	r3, r8
 8008a16:	18e3      	adds	r3, r4, r3
 8008a18:	603b      	str	r3, [r7, #0]
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	eb45 0303 	adc.w	r3, r5, r3
 8008a20:	607b      	str	r3, [r7, #4]
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	f04f 0300 	mov.w	r3, #0
 8008a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a2e:	4629      	mov	r1, r5
 8008a30:	028b      	lsls	r3, r1, #10
 8008a32:	4621      	mov	r1, r4
 8008a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a38:	4621      	mov	r1, r4
 8008a3a:	028a      	lsls	r2, r1, #10
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a42:	2200      	movs	r2, #0
 8008a44:	61bb      	str	r3, [r7, #24]
 8008a46:	61fa      	str	r2, [r7, #28]
 8008a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a4c:	f7f7 fc30 	bl	80002b0 <__aeabi_uldivmod>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4613      	mov	r3, r2
 8008a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008a58:	4b0b      	ldr	r3, [pc, #44]	@ (8008a88 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	0c1b      	lsrs	r3, r3, #16
 8008a5e:	f003 0303 	and.w	r3, r3, #3
 8008a62:	3301      	adds	r3, #1
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008a68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008a72:	e002      	b.n	8008a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a74:	4b05      	ldr	r3, [pc, #20]	@ (8008a8c <HAL_RCC_GetSysClockFreq+0x204>)
 8008a76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3750      	adds	r7, #80	@ 0x50
 8008a80:	46bd      	mov	sp, r7
 8008a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a86:	bf00      	nop
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	00f42400 	.word	0x00f42400
 8008a90:	007a1200 	.word	0x007a1200

08008a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a98:	4b03      	ldr	r3, [pc, #12]	@ (8008aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	20000000 	.word	0x20000000

08008aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008ab0:	f7ff fff0 	bl	8008a94 <HAL_RCC_GetHCLKFreq>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	4b05      	ldr	r3, [pc, #20]	@ (8008acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	0a9b      	lsrs	r3, r3, #10
 8008abc:	f003 0307 	and.w	r3, r3, #7
 8008ac0:	4903      	ldr	r1, [pc, #12]	@ (8008ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ac2:	5ccb      	ldrb	r3, [r1, r3]
 8008ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	40023800 	.word	0x40023800
 8008ad0:	08016114 	.word	0x08016114

08008ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ad8:	f7ff ffdc 	bl	8008a94 <HAL_RCC_GetHCLKFreq>
 8008adc:	4602      	mov	r2, r0
 8008ade:	4b05      	ldr	r3, [pc, #20]	@ (8008af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	0b5b      	lsrs	r3, r3, #13
 8008ae4:	f003 0307 	and.w	r3, r3, #7
 8008ae8:	4903      	ldr	r1, [pc, #12]	@ (8008af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008aea:	5ccb      	ldrb	r3, [r1, r3]
 8008aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	40023800 	.word	0x40023800
 8008af8:	08016114 	.word	0x08016114

08008afc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	220f      	movs	r2, #15
 8008b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b0c:	4b12      	ldr	r3, [pc, #72]	@ (8008b58 <HAL_RCC_GetClockConfig+0x5c>)
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f003 0203 	and.w	r2, r3, #3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008b18:	4b0f      	ldr	r3, [pc, #60]	@ (8008b58 <HAL_RCC_GetClockConfig+0x5c>)
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008b24:	4b0c      	ldr	r3, [pc, #48]	@ (8008b58 <HAL_RCC_GetClockConfig+0x5c>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008b30:	4b09      	ldr	r3, [pc, #36]	@ (8008b58 <HAL_RCC_GetClockConfig+0x5c>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	08db      	lsrs	r3, r3, #3
 8008b36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008b3e:	4b07      	ldr	r3, [pc, #28]	@ (8008b5c <HAL_RCC_GetClockConfig+0x60>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 020f 	and.w	r2, r3, #15
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	601a      	str	r2, [r3, #0]
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40023800 	.word	0x40023800
 8008b5c:	40023c00 	.word	0x40023c00

08008b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008b88:	4b66      	ldr	r3, [pc, #408]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b8e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b96:	4963      	ldr	r1, [pc, #396]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008baa:	4b5e      	ldr	r3, [pc, #376]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bb0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb8:	495a      	ldr	r1, [pc, #360]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10b      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d105      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d075      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008be4:	4b50      	ldr	r3, [pc, #320]	@ (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008bea:	f7fa ff67 	bl	8003abc <HAL_GetTick>
 8008bee:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008bf0:	e008      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008bf2:	f7fa ff63 	bl	8003abc <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d901      	bls.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e1dc      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c04:	4b47      	ldr	r3, [pc, #284]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1f0      	bne.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d009      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	019a      	lsls	r2, r3, #6
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	071b      	lsls	r3, r3, #28
 8008c28:	493e      	ldr	r1, [pc, #248]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0302 	and.w	r3, r3, #2
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01f      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c3c:	4b39      	ldr	r3, [pc, #228]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c42:	0f1b      	lsrs	r3, r3, #28
 8008c44:	f003 0307 	and.w	r3, r3, #7
 8008c48:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	019a      	lsls	r2, r3, #6
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	061b      	lsls	r3, r3, #24
 8008c56:	431a      	orrs	r2, r3
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	071b      	lsls	r3, r3, #28
 8008c5c:	4931      	ldr	r1, [pc, #196]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008c64:	4b2f      	ldr	r3, [pc, #188]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c6a:	f023 021f 	bic.w	r2, r3, #31
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	492b      	ldr	r1, [pc, #172]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00d      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	019a      	lsls	r2, r3, #6
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	061b      	lsls	r3, r3, #24
 8008c94:	431a      	orrs	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	071b      	lsls	r3, r3, #28
 8008c9c:	4921      	ldr	r1, [pc, #132]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ca4:	4b20      	ldr	r3, [pc, #128]	@ (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008caa:	f7fa ff07 	bl	8003abc <HAL_GetTick>
 8008cae:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008cb0:	e008      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008cb2:	f7fa ff03 	bl	8003abc <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d901      	bls.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e17c      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008cc4:	4b17      	ldr	r3, [pc, #92]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0f0      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d112      	bne.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10c      	bne.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80ce 	beq.w	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008cfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cfe:	f040 80c8 	bne.w	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008d02:	4b0a      	ldr	r3, [pc, #40]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d08:	f7fa fed8 	bl	8003abc <HAL_GetTick>
 8008d0c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d0e:	e00f      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008d10:	f7fa fed4 	bl	8003abc <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d908      	bls.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e14d      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8008d22:	bf00      	nop
 8008d24:	40023800 	.word	0x40023800
 8008d28:	42470068 	.word	0x42470068
 8008d2c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d30:	4ba5      	ldr	r3, [pc, #660]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d3c:	d0e8      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0304 	and.w	r3, r3, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d02e      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008d4a:	4b9f      	ldr	r3, [pc, #636]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d50:	0c1b      	lsrs	r3, r3, #16
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	3301      	adds	r3, #1
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008d5c:	4b9a      	ldr	r3, [pc, #616]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d62:	0f1b      	lsrs	r3, r3, #28
 8008d64:	f003 0307 	and.w	r3, r3, #7
 8008d68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	019a      	lsls	r2, r3, #6
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	085b      	lsrs	r3, r3, #1
 8008d74:	3b01      	subs	r3, #1
 8008d76:	041b      	lsls	r3, r3, #16
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	061b      	lsls	r3, r3, #24
 8008d80:	431a      	orrs	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	071b      	lsls	r3, r3, #28
 8008d86:	4990      	ldr	r1, [pc, #576]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008d8e:	4b8e      	ldr	r3, [pc, #568]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d94:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	021b      	lsls	r3, r3, #8
 8008da0:	4989      	ldr	r1, [pc, #548]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0308 	and.w	r3, r3, #8
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d02c      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008db4:	4b84      	ldr	r3, [pc, #528]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dba:	0c1b      	lsrs	r3, r3, #16
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008dc6:	4b80      	ldr	r3, [pc, #512]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dcc:	0e1b      	lsrs	r3, r3, #24
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	019a      	lsls	r2, r3, #6
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	085b      	lsrs	r3, r3, #1
 8008dde:	3b01      	subs	r3, #1
 8008de0:	041b      	lsls	r3, r3, #16
 8008de2:	431a      	orrs	r2, r3
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	061b      	lsls	r3, r3, #24
 8008de8:	431a      	orrs	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	071b      	lsls	r3, r3, #28
 8008df0:	4975      	ldr	r1, [pc, #468]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008df8:	4b73      	ldr	r3, [pc, #460]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dfe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e06:	4970      	ldr	r1, [pc, #448]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d024      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008e1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e22:	d11f      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008e24:	4b68      	ldr	r3, [pc, #416]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e2a:	0e1b      	lsrs	r3, r3, #24
 8008e2c:	f003 030f 	and.w	r3, r3, #15
 8008e30:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e32:	4b65      	ldr	r3, [pc, #404]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e38:	0f1b      	lsrs	r3, r3, #28
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	019a      	lsls	r2, r3, #6
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	085b      	lsrs	r3, r3, #1
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	041b      	lsls	r3, r3, #16
 8008e50:	431a      	orrs	r2, r3
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	061b      	lsls	r3, r3, #24
 8008e56:	431a      	orrs	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	071b      	lsls	r3, r3, #28
 8008e5c:	495a      	ldr	r1, [pc, #360]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008e64:	4b59      	ldr	r3, [pc, #356]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8008e66:	2201      	movs	r2, #1
 8008e68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e6a:	f7fa fe27 	bl	8003abc <HAL_GetTick>
 8008e6e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008e70:	e008      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008e72:	f7fa fe23 	bl	8003abc <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e09c      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008e84:	4b50      	ldr	r3, [pc, #320]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e90:	d1ef      	bne.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0320 	and.w	r3, r3, #32
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 8083 	beq.w	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60bb      	str	r3, [r7, #8]
 8008ea4:	4b48      	ldr	r3, [pc, #288]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea8:	4a47      	ldr	r2, [pc, #284]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8008eb0:	4b45      	ldr	r3, [pc, #276]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eb8:	60bb      	str	r3, [r7, #8]
 8008eba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008ebc:	4b44      	ldr	r3, [pc, #272]	@ (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a43      	ldr	r2, [pc, #268]	@ (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ec6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ec8:	f7fa fdf8 	bl	8003abc <HAL_GetTick>
 8008ecc:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008ece:	e008      	b.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ed0:	f7fa fdf4 	bl	8003abc <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e06d      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0f0      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008eee:	4b36      	ldr	r3, [pc, #216]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ef6:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d02f      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d028      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f14:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f16:	4b2f      	ldr	r3, [pc, #188]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008f18:	2201      	movs	r2, #1
 8008f1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008f22:	4a29      	ldr	r2, [pc, #164]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f28:	4b27      	ldr	r3, [pc, #156]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d114      	bne.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008f34:	f7fa fdc2 	bl	8003abc <HAL_GetTick>
 8008f38:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f3a:	e00a      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f3c:	f7fa fdbe 	bl	8003abc <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d901      	bls.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e035      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f52:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0ee      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f6a:	d10d      	bne.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008f6c:	4b16      	ldr	r3, [pc, #88]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f78:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f80:	4911      	ldr	r1, [pc, #68]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	608b      	str	r3, [r1, #8]
 8008f86:	e005      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008f88:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f8e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008f92:	6093      	str	r3, [r2, #8]
 8008f94:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fa0:	4909      	ldr	r1, [pc, #36]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0310 	and.w	r3, r3, #16
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d004      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8008fb8:	4b07      	ldr	r3, [pc, #28]	@ (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8008fba:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3720      	adds	r7, #32
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	40023800 	.word	0x40023800
 8008fcc:	42470070 	.word	0x42470070
 8008fd0:	40007000 	.word	0x40007000
 8008fd4:	42470e40 	.word	0x42470e40
 8008fd8:	424711e0 	.word	0x424711e0

08008fdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e273      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d075      	beq.n	80090e6 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008ffa:	4b88      	ldr	r3, [pc, #544]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f003 030c 	and.w	r3, r3, #12
 8009002:	2b04      	cmp	r3, #4
 8009004:	d00c      	beq.n	8009020 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009006:	4b85      	ldr	r3, [pc, #532]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f003 030c 	and.w	r3, r3, #12
        || \
 800900e:	2b08      	cmp	r3, #8
 8009010:	d112      	bne.n	8009038 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009012:	4b82      	ldr	r3, [pc, #520]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800901a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800901e:	d10b      	bne.n	8009038 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009020:	4b7e      	ldr	r3, [pc, #504]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d05b      	beq.n	80090e4 <HAL_RCC_OscConfig+0x108>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d157      	bne.n	80090e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e24e      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009040:	d106      	bne.n	8009050 <HAL_RCC_OscConfig+0x74>
 8009042:	4b76      	ldr	r3, [pc, #472]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a75      	ldr	r2, [pc, #468]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	e01d      	b.n	800908c <HAL_RCC_OscConfig+0xb0>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009058:	d10c      	bne.n	8009074 <HAL_RCC_OscConfig+0x98>
 800905a:	4b70      	ldr	r3, [pc, #448]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a6f      	ldr	r2, [pc, #444]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	4b6d      	ldr	r3, [pc, #436]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a6c      	ldr	r2, [pc, #432]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 800906c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009070:	6013      	str	r3, [r2, #0]
 8009072:	e00b      	b.n	800908c <HAL_RCC_OscConfig+0xb0>
 8009074:	4b69      	ldr	r3, [pc, #420]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a68      	ldr	r2, [pc, #416]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 800907a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	4b66      	ldr	r3, [pc, #408]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a65      	ldr	r2, [pc, #404]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800908a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d013      	beq.n	80090bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009094:	f7fa fd12 	bl	8003abc <HAL_GetTick>
 8009098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800909a:	e008      	b.n	80090ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800909c:	f7fa fd0e 	bl	8003abc <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	2b64      	cmp	r3, #100	@ 0x64
 80090a8:	d901      	bls.n	80090ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e213      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ae:	4b5b      	ldr	r3, [pc, #364]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0f0      	beq.n	800909c <HAL_RCC_OscConfig+0xc0>
 80090ba:	e014      	b.n	80090e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090bc:	f7fa fcfe 	bl	8003abc <HAL_GetTick>
 80090c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090c2:	e008      	b.n	80090d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090c4:	f7fa fcfa 	bl	8003abc <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b64      	cmp	r3, #100	@ 0x64
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e1ff      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090d6:	4b51      	ldr	r3, [pc, #324]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1f0      	bne.n	80090c4 <HAL_RCC_OscConfig+0xe8>
 80090e2:	e000      	b.n	80090e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d063      	beq.n	80091ba <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80090f2:	4b4a      	ldr	r3, [pc, #296]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f003 030c 	and.w	r3, r3, #12
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00b      	beq.n	8009116 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090fe:	4b47      	ldr	r3, [pc, #284]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f003 030c 	and.w	r3, r3, #12
        || \
 8009106:	2b08      	cmp	r3, #8
 8009108:	d11c      	bne.n	8009144 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800910a:	4b44      	ldr	r3, [pc, #272]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d116      	bne.n	8009144 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009116:	4b41      	ldr	r3, [pc, #260]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d005      	beq.n	800912e <HAL_RCC_OscConfig+0x152>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d001      	beq.n	800912e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e1d3      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800912e:	4b3b      	ldr	r3, [pc, #236]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	00db      	lsls	r3, r3, #3
 800913c:	4937      	ldr	r1, [pc, #220]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 800913e:	4313      	orrs	r3, r2
 8009140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009142:	e03a      	b.n	80091ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d020      	beq.n	800918e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800914c:	4b34      	ldr	r3, [pc, #208]	@ (8009220 <HAL_RCC_OscConfig+0x244>)
 800914e:	2201      	movs	r2, #1
 8009150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009152:	f7fa fcb3 	bl	8003abc <HAL_GetTick>
 8009156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009158:	e008      	b.n	800916c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800915a:	f7fa fcaf 	bl	8003abc <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d901      	bls.n	800916c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e1b4      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800916c:	4b2b      	ldr	r3, [pc, #172]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0302 	and.w	r3, r3, #2
 8009174:	2b00      	cmp	r3, #0
 8009176:	d0f0      	beq.n	800915a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009178:	4b28      	ldr	r3, [pc, #160]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	00db      	lsls	r3, r3, #3
 8009186:	4925      	ldr	r1, [pc, #148]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 8009188:	4313      	orrs	r3, r2
 800918a:	600b      	str	r3, [r1, #0]
 800918c:	e015      	b.n	80091ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800918e:	4b24      	ldr	r3, [pc, #144]	@ (8009220 <HAL_RCC_OscConfig+0x244>)
 8009190:	2200      	movs	r2, #0
 8009192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009194:	f7fa fc92 	bl	8003abc <HAL_GetTick>
 8009198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800919a:	e008      	b.n	80091ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800919c:	f7fa fc8e 	bl	8003abc <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d901      	bls.n	80091ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e193      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091ae:	4b1b      	ldr	r3, [pc, #108]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1f0      	bne.n	800919c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0308 	and.w	r3, r3, #8
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d036      	beq.n	8009234 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d016      	beq.n	80091fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091ce:	4b15      	ldr	r3, [pc, #84]	@ (8009224 <HAL_RCC_OscConfig+0x248>)
 80091d0:	2201      	movs	r2, #1
 80091d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091d4:	f7fa fc72 	bl	8003abc <HAL_GetTick>
 80091d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091da:	e008      	b.n	80091ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091dc:	f7fa fc6e 	bl	8003abc <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e173      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091ee:	4b0b      	ldr	r3, [pc, #44]	@ (800921c <HAL_RCC_OscConfig+0x240>)
 80091f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091f2:	f003 0302 	and.w	r3, r3, #2
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0f0      	beq.n	80091dc <HAL_RCC_OscConfig+0x200>
 80091fa:	e01b      	b.n	8009234 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091fc:	4b09      	ldr	r3, [pc, #36]	@ (8009224 <HAL_RCC_OscConfig+0x248>)
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009202:	f7fa fc5b 	bl	8003abc <HAL_GetTick>
 8009206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009208:	e00e      	b.n	8009228 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800920a:	f7fa fc57 	bl	8003abc <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b02      	cmp	r3, #2
 8009216:	d907      	bls.n	8009228 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e15c      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
 800921c:	40023800 	.word	0x40023800
 8009220:	42470000 	.word	0x42470000
 8009224:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009228:	4b8a      	ldr	r3, [pc, #552]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 800922a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800922c:	f003 0302 	and.w	r3, r3, #2
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1ea      	bne.n	800920a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0304 	and.w	r3, r3, #4
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 8097 	beq.w	8009370 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009242:	2300      	movs	r3, #0
 8009244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009246:	4b83      	ldr	r3, [pc, #524]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 8009248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10f      	bne.n	8009272 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009252:	2300      	movs	r3, #0
 8009254:	60bb      	str	r3, [r7, #8]
 8009256:	4b7f      	ldr	r3, [pc, #508]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 8009258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800925a:	4a7e      	ldr	r2, [pc, #504]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 800925c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009260:	6413      	str	r3, [r2, #64]	@ 0x40
 8009262:	4b7c      	ldr	r3, [pc, #496]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 8009264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800926a:	60bb      	str	r3, [r7, #8]
 800926c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800926e:	2301      	movs	r3, #1
 8009270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009272:	4b79      	ldr	r3, [pc, #484]	@ (8009458 <HAL_RCC_OscConfig+0x47c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800927a:	2b00      	cmp	r3, #0
 800927c:	d118      	bne.n	80092b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800927e:	4b76      	ldr	r3, [pc, #472]	@ (8009458 <HAL_RCC_OscConfig+0x47c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a75      	ldr	r2, [pc, #468]	@ (8009458 <HAL_RCC_OscConfig+0x47c>)
 8009284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800928a:	f7fa fc17 	bl	8003abc <HAL_GetTick>
 800928e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009290:	e008      	b.n	80092a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009292:	f7fa fc13 	bl	8003abc <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	2b02      	cmp	r3, #2
 800929e:	d901      	bls.n	80092a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e118      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092a4:	4b6c      	ldr	r3, [pc, #432]	@ (8009458 <HAL_RCC_OscConfig+0x47c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d0f0      	beq.n	8009292 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d106      	bne.n	80092c6 <HAL_RCC_OscConfig+0x2ea>
 80092b8:	4b66      	ldr	r3, [pc, #408]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80092ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092bc:	4a65      	ldr	r2, [pc, #404]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80092be:	f043 0301 	orr.w	r3, r3, #1
 80092c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80092c4:	e01c      	b.n	8009300 <HAL_RCC_OscConfig+0x324>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	2b05      	cmp	r3, #5
 80092cc:	d10c      	bne.n	80092e8 <HAL_RCC_OscConfig+0x30c>
 80092ce:	4b61      	ldr	r3, [pc, #388]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80092d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d2:	4a60      	ldr	r2, [pc, #384]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80092d4:	f043 0304 	orr.w	r3, r3, #4
 80092d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80092da:	4b5e      	ldr	r3, [pc, #376]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80092dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092de:	4a5d      	ldr	r2, [pc, #372]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80092e0:	f043 0301 	orr.w	r3, r3, #1
 80092e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80092e6:	e00b      	b.n	8009300 <HAL_RCC_OscConfig+0x324>
 80092e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80092ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ec:	4a59      	ldr	r2, [pc, #356]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80092ee:	f023 0301 	bic.w	r3, r3, #1
 80092f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80092f4:	4b57      	ldr	r3, [pc, #348]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80092f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092f8:	4a56      	ldr	r2, [pc, #344]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80092fa:	f023 0304 	bic.w	r3, r3, #4
 80092fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d015      	beq.n	8009334 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009308:	f7fa fbd8 	bl	8003abc <HAL_GetTick>
 800930c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800930e:	e00a      	b.n	8009326 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009310:	f7fa fbd4 	bl	8003abc <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800931e:	4293      	cmp	r3, r2
 8009320:	d901      	bls.n	8009326 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e0d7      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009326:	4b4b      	ldr	r3, [pc, #300]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 8009328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800932a:	f003 0302 	and.w	r3, r3, #2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0ee      	beq.n	8009310 <HAL_RCC_OscConfig+0x334>
 8009332:	e014      	b.n	800935e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009334:	f7fa fbc2 	bl	8003abc <HAL_GetTick>
 8009338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800933a:	e00a      	b.n	8009352 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800933c:	f7fa fbbe 	bl	8003abc <HAL_GetTick>
 8009340:	4602      	mov	r2, r0
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800934a:	4293      	cmp	r3, r2
 800934c:	d901      	bls.n	8009352 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e0c1      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009352:	4b40      	ldr	r3, [pc, #256]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 8009354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1ee      	bne.n	800933c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d105      	bne.n	8009370 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009364:	4b3b      	ldr	r3, [pc, #236]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 8009366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009368:	4a3a      	ldr	r2, [pc, #232]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 800936a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800936e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 80ad 	beq.w	80094d4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800937a:	4b36      	ldr	r3, [pc, #216]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 030c 	and.w	r3, r3, #12
 8009382:	2b08      	cmp	r3, #8
 8009384:	d060      	beq.n	8009448 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	2b02      	cmp	r3, #2
 800938c:	d145      	bne.n	800941a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800938e:	4b33      	ldr	r3, [pc, #204]	@ (800945c <HAL_RCC_OscConfig+0x480>)
 8009390:	2200      	movs	r2, #0
 8009392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009394:	f7fa fb92 	bl	8003abc <HAL_GetTick>
 8009398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800939a:	e008      	b.n	80093ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800939c:	f7fa fb8e 	bl	8003abc <HAL_GetTick>
 80093a0:	4602      	mov	r2, r0
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d901      	bls.n	80093ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e093      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093ae:	4b29      	ldr	r3, [pc, #164]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1f0      	bne.n	800939c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69da      	ldr	r2, [r3, #28]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c8:	019b      	lsls	r3, r3, #6
 80093ca:	431a      	orrs	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d0:	085b      	lsrs	r3, r3, #1
 80093d2:	3b01      	subs	r3, #1
 80093d4:	041b      	lsls	r3, r3, #16
 80093d6:	431a      	orrs	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093dc:	061b      	lsls	r3, r3, #24
 80093de:	431a      	orrs	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e4:	071b      	lsls	r3, r3, #28
 80093e6:	491b      	ldr	r1, [pc, #108]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093ec:	4b1b      	ldr	r3, [pc, #108]	@ (800945c <HAL_RCC_OscConfig+0x480>)
 80093ee:	2201      	movs	r2, #1
 80093f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f2:	f7fa fb63 	bl	8003abc <HAL_GetTick>
 80093f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093f8:	e008      	b.n	800940c <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093fa:	f7fa fb5f 	bl	8003abc <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	2b02      	cmp	r3, #2
 8009406:	d901      	bls.n	800940c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e064      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800940c:	4b11      	ldr	r3, [pc, #68]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0f0      	beq.n	80093fa <HAL_RCC_OscConfig+0x41e>
 8009418:	e05c      	b.n	80094d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800941a:	4b10      	ldr	r3, [pc, #64]	@ (800945c <HAL_RCC_OscConfig+0x480>)
 800941c:	2200      	movs	r2, #0
 800941e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009420:	f7fa fb4c 	bl	8003abc <HAL_GetTick>
 8009424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009426:	e008      	b.n	800943a <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009428:	f7fa fb48 	bl	8003abc <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	2b02      	cmp	r3, #2
 8009434:	d901      	bls.n	800943a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e04d      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800943a:	4b06      	ldr	r3, [pc, #24]	@ (8009454 <HAL_RCC_OscConfig+0x478>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1f0      	bne.n	8009428 <HAL_RCC_OscConfig+0x44c>
 8009446:	e045      	b.n	80094d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d107      	bne.n	8009460 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e040      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
 8009454:	40023800 	.word	0x40023800
 8009458:	40007000 	.word	0x40007000
 800945c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009460:	4b1f      	ldr	r3, [pc, #124]	@ (80094e0 <HAL_RCC_OscConfig+0x504>)
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d030      	beq.n	80094d0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009478:	429a      	cmp	r2, r3
 800947a:	d129      	bne.n	80094d0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009486:	429a      	cmp	r2, r3
 8009488:	d122      	bne.n	80094d0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009490:	4013      	ands	r3, r2
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009498:	4293      	cmp	r3, r2
 800949a:	d119      	bne.n	80094d0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a6:	085b      	lsrs	r3, r3, #1
 80094a8:	3b01      	subs	r3, #1
 80094aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d10f      	bne.n	80094d0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094bc:	429a      	cmp	r2, r3
 80094be:	d107      	bne.n	80094d0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d001      	beq.n	80094d4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e000      	b.n	80094d6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	40023800 	.word	0x40023800

080094e4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e10c      	b.n	8009720 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d106      	bne.n	8009520 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7fa f830 	bl	8003580 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2202      	movs	r2, #2
 8009524:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f903 	bl	8009734 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f938 	bl	80097a4 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a1b      	ldr	r3, [r3, #32]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d030      	beq.n	800959e <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f957 	bl	80097f0 <SAI_GetInputClock>
 8009542:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	005b      	lsls	r3, r3, #1
 800954e:	461a      	mov	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	025b      	lsls	r3, r3, #9
 8009556:	fbb2 f3f3 	udiv	r3, r2, r3
 800955a:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4a72      	ldr	r2, [pc, #456]	@ (8009728 <HAL_SAI_Init+0x244>)
 8009560:	fba2 2303 	umull	r2, r3, r2, r3
 8009564:	08da      	lsrs	r2, r3, #3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	4b6e      	ldr	r3, [pc, #440]	@ (8009728 <HAL_SAI_Init+0x244>)
 800956e:	fba3 2301 	umull	r2, r3, r3, r1
 8009572:	08da      	lsrs	r2, r3, #3
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	1aca      	subs	r2, r1, r3
 800957e:	2a08      	cmp	r2, #8
 8009580:	d904      	bls.n	800958c <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009590:	2b04      	cmp	r3, #4
 8009592:	d104      	bne.n	800959e <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009598:	085a      	lsrs	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <HAL_SAI_Init+0xca>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d109      	bne.n	80095c2 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d101      	bne.n	80095ba <HAL_SAI_Init+0xd6>
 80095b6:	2300      	movs	r3, #0
 80095b8:	e001      	b.n	80095be <HAL_SAI_Init+0xda>
 80095ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095be:	617b      	str	r3, [r7, #20]
 80095c0:	e008      	b.n	80095d4 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d102      	bne.n	80095d0 <HAL_SAI_Init+0xec>
 80095ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095ce:	e000      	b.n	80095d2 <HAL_SAI_Init+0xee>
 80095d0:	2300      	movs	r3, #0
 80095d2:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d811      	bhi.n	8009600 <HAL_SAI_Init+0x11c>
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d20b      	bcs.n	80095f8 <HAL_SAI_Init+0x114>
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <HAL_SAI_Init+0x106>
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d003      	beq.n	80095f0 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 80095e8:	e00a      	b.n	8009600 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	613b      	str	r3, [r7, #16]
    break;
 80095ee:	e008      	b.n	8009602 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80095f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095f4:	613b      	str	r3, [r7, #16]
    break;
 80095f6:	e004      	b.n	8009602 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80095f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80095fc:	613b      	str	r3, [r7, #16]
    break;
 80095fe:	e000      	b.n	8009602 <HAL_SAI_Init+0x11e>
      break;
 8009600:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6819      	ldr	r1, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	4b47      	ldr	r3, [pc, #284]	@ (800972c <HAL_SAI_Init+0x248>)
 800960e:	400b      	ands	r3, r1
 8009610:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6819      	ldr	r1, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009620:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009626:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800962c:	431a      	orrs	r2, r3
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800963a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009646:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964c:	051b      	lsls	r3, r3, #20
 800964e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	430a      	orrs	r2, r1
 8009656:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	6812      	ldr	r2, [r2, #0]
 8009662:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8009666:	f023 030f 	bic.w	r3, r3, #15
 800966a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6859      	ldr	r1, [r3, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699a      	ldr	r2, [r3, #24]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009680:	431a      	orrs	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	430a      	orrs	r2, r1
 8009688:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6899      	ldr	r1, [r3, #8]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	4b26      	ldr	r3, [pc, #152]	@ (8009730 <HAL_SAI_Init+0x24c>)
 8009696:	400b      	ands	r3, r1
 8009698:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6899      	ldr	r1, [r3, #8]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096a4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80096aa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 80096b0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 80096b6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096bc:	3b01      	subs	r3, #1
 80096be:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80096c0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	430a      	orrs	r2, r1
 80096c8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68d9      	ldr	r1, [r3, #12]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80096d8:	400b      	ands	r3, r1
 80096da:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68d9      	ldr	r1, [r3, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096ea:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096f0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80096f2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f8:	3b01      	subs	r3, #1
 80096fa:	021b      	lsls	r3, r3, #8
 80096fc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	cccccccd 	.word	0xcccccccd
 800972c:	ff05c010 	.word	0xff05c010
 8009730:	fff88000 	.word	0xfff88000

08009734 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800973c:	4b17      	ldr	r3, [pc, #92]	@ (800979c <SAI_Disable+0x68>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a17      	ldr	r2, [pc, #92]	@ (80097a0 <SAI_Disable+0x6c>)
 8009742:	fba2 2303 	umull	r2, r3, r2, r3
 8009746:	0b1b      	lsrs	r3, r3, #12
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800975e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	1e5a      	subs	r2, r3, #1
 8009764:	60fa      	str	r2, [r7, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009770:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	72fb      	strb	r3, [r7, #11]
      break;
 800977e:	e006      	b.n	800978e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e8      	bne.n	8009760 <SAI_Disable+0x2c>

  return status;
 800978e:	7afb      	ldrb	r3, [r7, #11]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	20000000 	.word	0x20000000
 80097a0:	95cbec1b 	.word	0x95cbec1b

080097a4 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d00c      	beq.n	80097ce <SAI_BlockSynchroConfig+0x2a>
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d80d      	bhi.n	80097d4 <SAI_BlockSynchroConfig+0x30>
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d002      	beq.n	80097c2 <SAI_BlockSynchroConfig+0x1e>
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d003      	beq.n	80097c8 <SAI_BlockSynchroConfig+0x24>
 80097c0:	e008      	b.n	80097d4 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]
      break;
 80097c6:	e008      	b.n	80097da <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80097c8:	2310      	movs	r3, #16
 80097ca:	60fb      	str	r3, [r7, #12]
      break;
 80097cc:	e005      	b.n	80097da <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80097ce:	2320      	movs	r3, #32
 80097d0:	60fb      	str	r3, [r7, #12]
      break;
 80097d2:	e002      	b.n	80097da <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80097d4:	2300      	movs	r3, #0
 80097d6:	60fb      	str	r3, [r7, #12]
      break;
 80097d8:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 80097da:	4a04      	ldr	r2, [pc, #16]	@ (80097ec <SAI_BlockSynchroConfig+0x48>)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80097e0:	bf00      	nop
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	40015800 	.word	0x40015800

080097f0 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	613b      	str	r3, [r7, #16]
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a46      	ldr	r2, [pc, #280]	@ (8009924 <SAI_GetInputClock+0x134>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d10b      	bne.n	8009826 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800980e:	4b46      	ldr	r3, [pc, #280]	@ (8009928 <SAI_GetInputClock+0x138>)
 8009810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009814:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	69db      	ldr	r3, [r3, #28]
 800981c:	4942      	ldr	r1, [pc, #264]	@ (8009928 <SAI_GetInputClock+0x138>)
 800981e:	4313      	orrs	r3, r2
 8009820:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8009824:	e00b      	b.n	800983e <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8009826:	4b40      	ldr	r3, [pc, #256]	@ (8009928 <SAI_GetInputClock+0x138>)
 8009828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800982c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	493c      	ldr	r1, [pc, #240]	@ (8009928 <SAI_GetInputClock+0x138>)
 8009838:	4313      	orrs	r3, r2
 800983a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800983e:	4b3a      	ldr	r3, [pc, #232]	@ (8009928 <SAI_GetInputClock+0x138>)
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009846:	2b00      	cmp	r3, #0
 8009848:	d108      	bne.n	800985c <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800984a:	4b37      	ldr	r3, [pc, #220]	@ (8009928 <SAI_GetInputClock+0x138>)
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009852:	4a36      	ldr	r2, [pc, #216]	@ (800992c <SAI_GetInputClock+0x13c>)
 8009854:	fbb2 f3f3 	udiv	r3, r2, r3
 8009858:	613b      	str	r3, [r7, #16]
 800985a:	e007      	b.n	800986c <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800985c:	4b32      	ldr	r3, [pc, #200]	@ (8009928 <SAI_GetInputClock+0x138>)
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009864:	4a32      	ldr	r2, [pc, #200]	@ (8009930 <SAI_GetInputClock+0x140>)
 8009866:	fbb2 f3f3 	udiv	r3, r2, r3
 800986a:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d121      	bne.n	80098b8 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8009874:	4b2c      	ldr	r3, [pc, #176]	@ (8009928 <SAI_GetInputClock+0x138>)
 8009876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800987a:	0e1b      	lsrs	r3, r3, #24
 800987c:	f003 030f 	and.w	r3, r3, #15
 8009880:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 8009882:	4b29      	ldr	r3, [pc, #164]	@ (8009928 <SAI_GetInputClock+0x138>)
 8009884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009888:	099b      	lsrs	r3, r3, #6
 800988a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	fb03 f202 	mul.w	r2, r3, r2
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	fbb2 f3f3 	udiv	r3, r2, r3
 800989a:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800989c:	4b22      	ldr	r3, [pc, #136]	@ (8009928 <SAI_GetInputClock+0x138>)
 800989e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	f003 031f 	and.w	r3, r3, #31
 80098a8:	3301      	adds	r3, #1
 80098aa:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	e02d      	b.n	8009914 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098c0:	d120      	bne.n	8009904 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80098c2:	4b19      	ldr	r3, [pc, #100]	@ (8009928 <SAI_GetInputClock+0x138>)
 80098c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098c8:	0e1b      	lsrs	r3, r3, #24
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80098d0:	4b15      	ldr	r3, [pc, #84]	@ (8009928 <SAI_GetInputClock+0x138>)
 80098d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098d6:	099b      	lsrs	r3, r3, #6
 80098d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	fb03 f202 	mul.w	r2, r3, r2
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e8:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80098ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009928 <SAI_GetInputClock+0x138>)
 80098ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098f0:	f003 031f 	and.w	r3, r3, #31
 80098f4:	3301      	adds	r3, #1
 80098f6:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	e007      	b.n	8009914 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8009904:	4b08      	ldr	r3, [pc, #32]	@ (8009928 <SAI_GetInputClock+0x138>)
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	4a07      	ldr	r2, [pc, #28]	@ (8009928 <SAI_GetInputClock+0x138>)
 800990a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800990e:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8009910:	4b08      	ldr	r3, [pc, #32]	@ (8009934 <SAI_GetInputClock+0x144>)
 8009912:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8009914:	697b      	ldr	r3, [r7, #20]
}
 8009916:	4618      	mov	r0, r3
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	40015804 	.word	0x40015804
 8009928:	40023800 	.word	0x40023800
 800992c:	00f42400 	.word	0x00f42400
 8009930:	007a1200 	.word	0x007a1200
 8009934:	00bb8000 	.word	0x00bb8000

08009938 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e022      	b.n	8009990 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d105      	bne.n	8009962 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7f9 fb61 	bl	8003024 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2203      	movs	r2, #3
 8009966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f814 	bl	8009998 <HAL_SD_InitCard>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e00a      	b.n	8009990 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009998:	b5b0      	push	{r4, r5, r7, lr}
 800999a:	b08e      	sub	sp, #56	@ 0x38
 800999c:	af04      	add	r7, sp, #16
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80099a0:	2300      	movs	r3, #0
 80099a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80099a4:	2300      	movs	r3, #0
 80099a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80099b0:	2300      	movs	r3, #0
 80099b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80099b4:	2376      	movs	r3, #118	@ 0x76
 80099b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681d      	ldr	r5, [r3, #0]
 80099bc:	466c      	mov	r4, sp
 80099be:	f107 0314 	add.w	r3, r7, #20
 80099c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099ca:	f107 0308 	add.w	r3, r7, #8
 80099ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099d0:	4628      	mov	r0, r5
 80099d2:	f003 f92f 	bl	800cc34 <SDIO_Init>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80099dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e04f      	b.n	8009a88 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80099e8:	4b29      	ldr	r3, [pc, #164]	@ (8009a90 <HAL_SD_InitCard+0xf8>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f003 f967 	bl	800ccc6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80099f8:	4b25      	ldr	r3, [pc, #148]	@ (8009a90 <HAL_SD_InitCard+0xf8>)
 80099fa:	2201      	movs	r2, #1
 80099fc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80099fe:	2002      	movs	r0, #2
 8009a00:	f7fa f868 	bl	8003ad4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 ff55 	bl	800a8b4 <SD_PowerON>
 8009a0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00b      	beq.n	8009a2a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	431a      	orrs	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e02e      	b.n	8009a88 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fe74 	bl	800a718 <SD_InitCard>
 8009a30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e01b      	b.n	8009a88 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f003 f9c6 	bl	800cdea <SDMMC_CmdBlockLength>
 8009a5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00f      	beq.n	8009a86 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8009a94 <HAL_SD_InitCard+0xfc>)
 8009a6c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	431a      	orrs	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e000      	b.n	8009a88 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3728      	adds	r7, #40	@ 0x28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8009a90:	422580a0 	.word	0x422580a0
 8009a94:	004005ff 	.word	0x004005ff

08009a98 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08c      	sub	sp, #48	@ 0x30
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d107      	bne.n	8009ac0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e0be      	b.n	8009c3e <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	f040 80b7 	bne.w	8009c3c <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ad4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	441a      	add	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d907      	bls.n	8009af2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e0a5      	b.n	8009c3e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2203      	movs	r2, #3
 8009af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2200      	movs	r2, #0
 8009b00:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009b10:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b16:	4a4c      	ldr	r2, [pc, #304]	@ (8009c48 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8009b18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b1e:	4a4b      	ldr	r2, [pc, #300]	@ (8009c4c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8009b20:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b26:	2200      	movs	r2, #0
 8009b28:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b2e:	2200      	movs	r2, #0
 8009b30:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	430a      	orrs	r2, r1
 8009b4c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3380      	adds	r3, #128	@ 0x80
 8009b58:	4619      	mov	r1, r3
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	025b      	lsls	r3, r3, #9
 8009b60:	089b      	lsrs	r3, r3, #2
 8009b62:	f7fa f987 	bl	8003e74 <HAL_DMA_Start_IT>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d017      	beq.n	8009b9c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8009b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a33      	ldr	r2, [pc, #204]	@ (8009c50 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009b82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b88:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e050      	b.n	8009c3e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8009c54 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d002      	beq.n	8009bb0 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8009baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bac:	025b      	lsls	r3, r3, #9
 8009bae:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	025b      	lsls	r3, r3, #9
 8009bba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009bbc:	2390      	movs	r3, #144	@ 0x90
 8009bbe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f107 0210 	add.w	r2, r7, #16
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f003 f8db 	bl	800cd92 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d90a      	bls.n	8009bf8 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2282      	movs	r2, #130	@ 0x82
 8009be6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f003 f93f 	bl	800ce72 <SDMMC_CmdReadMultiBlock>
 8009bf4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009bf6:	e009      	b.n	8009c0c <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2281      	movs	r2, #129	@ 0x81
 8009bfc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c04:	4618      	mov	r0, r3
 8009c06:	f003 f912 	bl	800ce2e <SDMMC_CmdReadSingleBlock>
 8009c0a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d012      	beq.n	8009c38 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a0e      	ldr	r2, [pc, #56]	@ (8009c50 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009c18:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c20:	431a      	orrs	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e002      	b.n	8009c3e <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	e000      	b.n	8009c3e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009c3c:	2302      	movs	r3, #2
  }
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3730      	adds	r7, #48	@ 0x30
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	0800a527 	.word	0x0800a527
 8009c4c:	0800a599 	.word	0x0800a599
 8009c50:	004005ff 	.word	0x004005ff
 8009c54:	4225858c 	.word	0x4225858c

08009c58 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08c      	sub	sp, #48	@ 0x30
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d107      	bne.n	8009c80 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c74:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e0c1      	b.n	8009e04 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	f040 80ba 	bne.w	8009e02 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	441a      	add	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d907      	bls.n	8009cb2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e0a8      	b.n	8009e04 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2203      	movs	r2, #3
 8009cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f042 021a 	orr.w	r2, r2, #26
 8009cd0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cd6:	4a4d      	ldr	r2, [pc, #308]	@ (8009e0c <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8009cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cde:	4a4c      	ldr	r2, [pc, #304]	@ (8009e10 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8009ce0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d002      	beq.n	8009cf8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf4:	025b      	lsls	r3, r3, #9
 8009cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d90a      	bls.n	8009d14 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	22a0      	movs	r2, #160	@ 0xa0
 8009d02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f003 f8f5 	bl	800cefa <SDMMC_CmdWriteMultiBlock>
 8009d10:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009d12:	e009      	b.n	8009d28 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2290      	movs	r2, #144	@ 0x90
 8009d18:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d20:	4618      	mov	r0, r3
 8009d22:	f003 f8c8 	bl	800ceb6 <SDMMC_CmdWriteSingleBlock>
 8009d26:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d012      	beq.n	8009d54 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a38      	ldr	r2, [pc, #224]	@ (8009e14 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8009d34:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e057      	b.n	8009e04 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009d54:	4b30      	ldr	r3, [pc, #192]	@ (8009e18 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009d56:	2201      	movs	r2, #1
 8009d58:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d5e:	2240      	movs	r2, #64	@ 0x40
 8009d60:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d72:	689a      	ldr	r2, [r3, #8]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009d82:	68b9      	ldr	r1, [r7, #8]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3380      	adds	r3, #128	@ 0x80
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	025b      	lsls	r3, r3, #9
 8009d90:	089b      	lsrs	r3, r3, #2
 8009d92:	f7fa f86f 	bl	8003e74 <HAL_DMA_Start_IT>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01a      	beq.n	8009dd2 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f022 021a 	bic.w	r2, r2, #26
 8009daa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a18      	ldr	r2, [pc, #96]	@ (8009e14 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8009db2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e018      	b.n	8009e04 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	025b      	lsls	r3, r3, #9
 8009ddc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009dde:	2390      	movs	r3, #144	@ 0x90
 8009de0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009dea:	2301      	movs	r3, #1
 8009dec:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f107 0210 	add.w	r2, r7, #16
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f002 ffca 	bl	800cd92 <SDIO_ConfigData>

      return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	e000      	b.n	8009e04 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8009e02:	2302      	movs	r3, #2
  }
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3730      	adds	r7, #48	@ 0x30
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	0800a4fd 	.word	0x0800a4fd
 8009e10:	0800a599 	.word	0x0800a599
 8009e14:	004005ff 	.word	0x004005ff
 8009e18:	4225858c 	.word	0x4225858c

08009e1c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e28:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d008      	beq.n	8009e4a <HAL_SD_IRQHandler+0x2e>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f003 0308 	and.w	r3, r3, #8
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d003      	beq.n	8009e4a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fdec 	bl	800aa20 <SD_Read_IT>
 8009e48:	e155      	b.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 808f 	beq.w	8009f78 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e62:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	6812      	ldr	r2, [r2, #0]
 8009e6e:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8009e72:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8009e76:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f022 0201 	bic.w	r2, r2, #1
 8009e86:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f003 0308 	and.w	r3, r3, #8
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d039      	beq.n	8009f06 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d104      	bne.n	8009ea6 <HAL_SD_IRQHandler+0x8a>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f003 0320 	and.w	r3, r3, #32
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d011      	beq.n	8009eca <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f003 f848 	bl	800cf40 <SDMMC_CmdStopTransfer>
 8009eb0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d008      	beq.n	8009eca <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	431a      	orrs	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f91f 	bl	800a108 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009ed2:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d104      	bne.n	8009ef6 <HAL_SD_IRQHandler+0xda>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f003 0302 	and.w	r3, r3, #2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f004 fdc8 	bl	800ea8c <HAL_SD_RxCpltCallback>
 8009efc:	e0fb      	b.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f004 fdba 	bl	800ea78 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f04:	e0f7      	b.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80f2 	beq.w	800a0f6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f003 0320 	and.w	r3, r3, #32
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d011      	beq.n	8009f40 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f003 f80d 	bl	800cf40 <SDMMC_CmdStopTransfer>
 8009f26:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d008      	beq.n	8009f40 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	431a      	orrs	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f8e4 	bl	800a108 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f040 80d5 	bne.w	800a0f6 <HAL_SD_IRQHandler+0x2da>
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f003 0302 	and.w	r3, r3, #2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f040 80cf 	bne.w	800a0f6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 0208 	bic.w	r2, r2, #8
 8009f66:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f004 fd81 	bl	800ea78 <HAL_SD_TxCpltCallback>
}
 8009f76:	e0be      	b.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d008      	beq.n	8009f98 <HAL_SD_IRQHandler+0x17c>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f003 0308 	and.w	r3, r3, #8
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fd96 	bl	800aac2 <SD_Write_IT>
 8009f96:	e0ae      	b.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f9e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 80a7 	beq.w	800a0f6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d005      	beq.n	8009fc2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fba:	f043 0202 	orr.w	r2, r3, #2
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fc8:	f003 0308 	and.w	r3, r3, #8
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d005      	beq.n	8009fdc <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fd4:	f043 0208 	orr.w	r2, r3, #8
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fe2:	f003 0320 	and.w	r3, r3, #32
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d005      	beq.n	8009ff6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fee:	f043 0220 	orr.w	r2, r3, #32
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ffc:	f003 0310 	and.w	r3, r3, #16
 800a000:	2b00      	cmp	r3, #0
 800a002:	d005      	beq.n	800a010 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a008:	f043 0210 	orr.w	r2, r3, #16
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a018:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a028:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4618      	mov	r0, r3
 800a030:	f002 ff86 	bl	800cf40 <SDMMC_CmdStopTransfer>
 800a034:	4602      	mov	r2, r0
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a03a:	431a      	orrs	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f855 	bl	800a108 <HAL_SD_ErrorCallback>
}
 800a05e:	e04a      	b.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a066:	2b00      	cmp	r3, #0
 800a068:	d045      	beq.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f003 0310 	and.w	r3, r3, #16
 800a070:	2b00      	cmp	r3, #0
 800a072:	d104      	bne.n	800a07e <HAL_SD_IRQHandler+0x262>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f003 0320 	and.w	r3, r3, #32
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d011      	beq.n	800a0a2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a082:	4a1f      	ldr	r2, [pc, #124]	@ (800a100 <HAL_SD_IRQHandler+0x2e4>)
 800a084:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7f9 ffba 	bl	8004004 <HAL_DMA_Abort_IT>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d02f      	beq.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 face 	bl	800a63c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a0a0:	e029      	b.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f003 0301 	and.w	r3, r3, #1
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d104      	bne.n	800a0b6 <HAL_SD_IRQHandler+0x29a>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d011      	beq.n	800a0da <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ba:	4a12      	ldr	r2, [pc, #72]	@ (800a104 <HAL_SD_IRQHandler+0x2e8>)
 800a0bc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7f9 ff9e 	bl	8004004 <HAL_DMA_Abort_IT>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d013      	beq.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 fae9 	bl	800a6aa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a0d8:	e00d      	b.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f004 fcb8 	bl	800ea64 <HAL_SD_AbortCallback>
}
 800a0f4:	e7ff      	b.n	800a0f6 <HAL_SD_IRQHandler+0x2da>
 800a0f6:	bf00      	nop
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	0800a63d 	.word	0x0800a63d
 800a104:	0800a6ab 	.word	0x0800a6ab

0800a108 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a12a:	0f9b      	lsrs	r3, r3, #30
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a136:	0e9b      	lsrs	r3, r3, #26
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	f003 030f 	and.w	r3, r3, #15
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a148:	0e1b      	lsrs	r3, r3, #24
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	f003 0303 	and.w	r3, r3, #3
 800a150:	b2da      	uxtb	r2, r3
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a15a:	0c1b      	lsrs	r3, r3, #16
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a166:	0a1b      	lsrs	r3, r3, #8
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a172:	b2da      	uxtb	r2, r3
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a17c:	0d1b      	lsrs	r3, r3, #20
 800a17e:	b29a      	uxth	r2, r3
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a188:	0c1b      	lsrs	r3, r3, #16
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	f003 030f 	and.w	r3, r3, #15
 800a190:	b2da      	uxtb	r2, r3
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a19a:	0bdb      	lsrs	r3, r3, #15
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	b2da      	uxtb	r2, r3
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1ac:	0b9b      	lsrs	r3, r3, #14
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1be:	0b5b      	lsrs	r3, r3, #13
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1d0:	0b1b      	lsrs	r3, r3, #12
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d163      	bne.n	800a2b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1f0:	009a      	lsls	r2, r3, #2
 800a1f2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a1fc:	0f92      	lsrs	r2, r2, #30
 800a1fe:	431a      	orrs	r2, r3
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a208:	0edb      	lsrs	r3, r3, #27
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	f003 0307 	and.w	r3, r3, #7
 800a210:	b2da      	uxtb	r2, r3
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a21a:	0e1b      	lsrs	r3, r3, #24
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	f003 0307 	and.w	r3, r3, #7
 800a222:	b2da      	uxtb	r2, r3
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a22c:	0d5b      	lsrs	r3, r3, #21
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	f003 0307 	and.w	r3, r3, #7
 800a234:	b2da      	uxtb	r2, r3
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a23e:	0c9b      	lsrs	r3, r3, #18
 800a240:	b2db      	uxtb	r3, r3
 800a242:	f003 0307 	and.w	r3, r3, #7
 800a246:	b2da      	uxtb	r2, r3
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a250:	0bdb      	lsrs	r3, r3, #15
 800a252:	b2db      	uxtb	r3, r3
 800a254:	f003 0307 	and.w	r3, r3, #7
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	7e1b      	ldrb	r3, [r3, #24]
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	3302      	adds	r3, #2
 800a274:	2201      	movs	r2, #1
 800a276:	fa02 f303 	lsl.w	r3, r2, r3
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a27e:	fb03 f202 	mul.w	r2, r3, r2
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	7a1b      	ldrb	r3, [r3, #8]
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	f003 030f 	and.w	r3, r3, #15
 800a290:	2201      	movs	r2, #1
 800a292:	409a      	lsls	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a2a0:	0a52      	lsrs	r2, r2, #9
 800a2a2:	fb03 f202 	mul.w	r2, r3, r2
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2b0:	661a      	str	r2, [r3, #96]	@ 0x60
 800a2b2:	e031      	b.n	800a318 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d11d      	bne.n	800a2f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2c0:	041b      	lsls	r3, r3, #16
 800a2c2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2ca:	0c1b      	lsrs	r3, r3, #16
 800a2cc:	431a      	orrs	r2, r3
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	029a      	lsls	r2, r3, #10
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2ec:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	661a      	str	r2, [r3, #96]	@ 0x60
 800a2f6:	e00f      	b.n	800a318 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a58      	ldr	r2, [pc, #352]	@ (800a460 <HAL_SD_GetCardCSD+0x344>)
 800a2fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a304:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e09d      	b.n	800a454 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a31c:	0b9b      	lsrs	r3, r3, #14
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	b2da      	uxtb	r2, r3
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a32e:	09db      	lsrs	r3, r3, #7
 800a330:	b2db      	uxtb	r3, r3
 800a332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a336:	b2da      	uxtb	r2, r3
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a340:	b2db      	uxtb	r3, r3
 800a342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a346:	b2da      	uxtb	r2, r3
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a350:	0fdb      	lsrs	r3, r3, #31
 800a352:	b2da      	uxtb	r2, r3
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a35c:	0f5b      	lsrs	r3, r3, #29
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 0303 	and.w	r3, r3, #3
 800a364:	b2da      	uxtb	r2, r3
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a36e:	0e9b      	lsrs	r3, r3, #26
 800a370:	b2db      	uxtb	r3, r3
 800a372:	f003 0307 	and.w	r3, r3, #7
 800a376:	b2da      	uxtb	r2, r3
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a380:	0d9b      	lsrs	r3, r3, #22
 800a382:	b2db      	uxtb	r3, r3
 800a384:	f003 030f 	and.w	r3, r3, #15
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a392:	0d5b      	lsrs	r3, r3, #21
 800a394:	b2db      	uxtb	r3, r3
 800a396:	f003 0301 	and.w	r3, r3, #1
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3ae:	0c1b      	lsrs	r3, r3, #16
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3c2:	0bdb      	lsrs	r3, r3, #15
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3d6:	0b9b      	lsrs	r3, r3, #14
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3ea:	0b5b      	lsrs	r3, r3, #13
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	f003 0301 	and.w	r3, r3, #1
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3fe:	0b1b      	lsrs	r3, r3, #12
 800a400:	b2db      	uxtb	r3, r3
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	b2da      	uxtb	r2, r3
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a412:	0a9b      	lsrs	r3, r3, #10
 800a414:	b2db      	uxtb	r3, r3
 800a416:	f003 0303 	and.w	r3, r3, #3
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a426:	0a1b      	lsrs	r3, r3, #8
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	f003 0303 	and.w	r3, r3, #3
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a43a:	085b      	lsrs	r3, r3, #1
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a442:	b2da      	uxtb	r2, r3
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	004005ff 	.word	0x004005ff

0800a464 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a4c8:	f107 030c 	add.w	r3, r7, #12
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fa7e 	bl	800a9d0 <SD_SendStatus>
 800a4d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d005      	beq.n	800a4e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	0a5b      	lsrs	r3, r3, #9
 800a4ec:	f003 030f 	and.w	r3, r3, #15
 800a4f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a4f2:	693b      	ldr	r3, [r7, #16]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3718      	adds	r7, #24
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a508:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a518:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b084      	sub	sp, #16
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a532:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a538:	2b82      	cmp	r3, #130	@ 0x82
 800a53a:	d111      	bne.n	800a560 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4618      	mov	r0, r3
 800a542:	f002 fcfd 	bl	800cf40 <SDMMC_CmdStopTransfer>
 800a546:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d008      	beq.n	800a560 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	431a      	orrs	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7ff fdd4 	bl	800a108 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f022 0208 	bic.w	r2, r2, #8
 800a56e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a578:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f004 fa7f 	bl	800ea8c <HAL_SD_RxCpltCallback>
#endif
}
 800a58e:	bf00      	nop
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7f9 fed8 	bl	800435c <HAL_DMA_GetError>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d03e      	beq.n	800a630 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5b8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5c0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d002      	beq.n	800a5ce <SD_DMAError+0x36>
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d12d      	bne.n	800a62a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a19      	ldr	r2, [pc, #100]	@ (800a638 <SD_DMAError+0xa0>)
 800a5d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a5e4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a5f2:	6978      	ldr	r0, [r7, #20]
 800a5f4:	f7ff ff62 	bl	800a4bc <HAL_SD_GetCardState>
 800a5f8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2b06      	cmp	r3, #6
 800a5fe:	d002      	beq.n	800a606 <SD_DMAError+0x6e>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2b05      	cmp	r3, #5
 800a604:	d10a      	bne.n	800a61c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f002 fc98 	bl	800cf40 <SDMMC_CmdStopTransfer>
 800a610:	4602      	mov	r2, r0
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a616:	431a      	orrs	r2, r3
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	2200      	movs	r2, #0
 800a628:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a62a:	6978      	ldr	r0, [r7, #20]
 800a62c:	f7ff fd6c 	bl	800a108 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a630:	bf00      	nop
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	004005ff 	.word	0x004005ff

0800a63c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a648:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a652:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f7ff ff31 	bl	800a4bc <HAL_SD_GetCardState>
 800a65a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2b06      	cmp	r3, #6
 800a66e:	d002      	beq.n	800a676 <SD_DMATxAbort+0x3a>
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2b05      	cmp	r3, #5
 800a674:	d10a      	bne.n	800a68c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f002 fc60 	bl	800cf40 <SDMMC_CmdStopTransfer>
 800a680:	4602      	mov	r2, r0
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a686:	431a      	orrs	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a690:	2b00      	cmp	r3, #0
 800a692:	d103      	bne.n	800a69c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f004 f9e5 	bl	800ea64 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a69a:	e002      	b.n	800a6a2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff fd33 	bl	800a108 <HAL_SD_ErrorCallback>
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a6c0:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f7ff fefa 	bl	800a4bc <HAL_SD_GetCardState>
 800a6c8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b06      	cmp	r3, #6
 800a6dc:	d002      	beq.n	800a6e4 <SD_DMARxAbort+0x3a>
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	2b05      	cmp	r3, #5
 800a6e2:	d10a      	bne.n	800a6fa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f002 fc29 	bl	800cf40 <SDMMC_CmdStopTransfer>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d103      	bne.n	800a70a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f004 f9ae 	bl	800ea64 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a708:	e002      	b.n	800a710 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f7ff fcfc 	bl	800a108 <HAL_SD_ErrorCallback>
}
 800a710:	bf00      	nop
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a718:	b5b0      	push	{r4, r5, r7, lr}
 800a71a:	b094      	sub	sp, #80	@ 0x50
 800a71c:	af04      	add	r7, sp, #16
 800a71e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a720:	2301      	movs	r3, #1
 800a722:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4618      	mov	r0, r3
 800a72a:	f002 fada 	bl	800cce2 <SDIO_GetPowerState>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a734:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a738:	e0b8      	b.n	800a8ac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d02f      	beq.n	800a7a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4618      	mov	r0, r3
 800a748:	f002 fcc1 	bl	800d0ce <SDMMC_CmdSendCID>
 800a74c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <SD_InitCard+0x40>
    {
      return errorstate;
 800a754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a756:	e0a9      	b.n	800a8ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2100      	movs	r1, #0
 800a75e:	4618      	mov	r0, r3
 800a760:	f002 fb04 	bl	800cd6c <SDIO_GetResponse>
 800a764:	4602      	mov	r2, r0
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2104      	movs	r1, #4
 800a770:	4618      	mov	r0, r3
 800a772:	f002 fafb 	bl	800cd6c <SDIO_GetResponse>
 800a776:	4602      	mov	r2, r0
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2108      	movs	r1, #8
 800a782:	4618      	mov	r0, r3
 800a784:	f002 faf2 	bl	800cd6c <SDIO_GetResponse>
 800a788:	4602      	mov	r2, r0
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	210c      	movs	r1, #12
 800a794:	4618      	mov	r0, r3
 800a796:	f002 fae9 	bl	800cd6c <SDIO_GetResponse>
 800a79a:	4602      	mov	r2, r0
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d00d      	beq.n	800a7c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f107 020e 	add.w	r2, r7, #14
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f002 fcc7 	bl	800d148 <SDMMC_CmdSetRelAdd>
 800a7ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <SD_InitCard+0xae>
    {
      return errorstate;
 800a7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7c4:	e072      	b.n	800a8ac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	d036      	beq.n	800a83c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a7ce:	89fb      	ldrh	r3, [r7, #14]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7de:	041b      	lsls	r3, r3, #16
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f002 fc91 	bl	800d10a <SDMMC_CmdSendCSD>
 800a7e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7f2:	e05b      	b.n	800a8ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f002 fab6 	bl	800cd6c <SDIO_GetResponse>
 800a800:	4602      	mov	r2, r0
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2104      	movs	r1, #4
 800a80c:	4618      	mov	r0, r3
 800a80e:	f002 faad 	bl	800cd6c <SDIO_GetResponse>
 800a812:	4602      	mov	r2, r0
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2108      	movs	r1, #8
 800a81e:	4618      	mov	r0, r3
 800a820:	f002 faa4 	bl	800cd6c <SDIO_GetResponse>
 800a824:	4602      	mov	r2, r0
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	210c      	movs	r1, #12
 800a830:	4618      	mov	r0, r3
 800a832:	f002 fa9b 	bl	800cd6c <SDIO_GetResponse>
 800a836:	4602      	mov	r2, r0
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2104      	movs	r1, #4
 800a842:	4618      	mov	r0, r3
 800a844:	f002 fa92 	bl	800cd6c <SDIO_GetResponse>
 800a848:	4603      	mov	r3, r0
 800a84a:	0d1a      	lsrs	r2, r3, #20
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a850:	f107 0310 	add.w	r3, r7, #16
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7ff fc60 	bl	800a11c <HAL_SD_GetCardCSD>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d002      	beq.n	800a868 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a862:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a866:	e021      	b.n	800a8ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6819      	ldr	r1, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a870:	041b      	lsls	r3, r3, #16
 800a872:	2200      	movs	r2, #0
 800a874:	461c      	mov	r4, r3
 800a876:	4615      	mov	r5, r2
 800a878:	4622      	mov	r2, r4
 800a87a:	462b      	mov	r3, r5
 800a87c:	4608      	mov	r0, r1
 800a87e:	f002 fb81 	bl	800cf84 <SDMMC_CmdSelDesel>
 800a882:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <SD_InitCard+0x176>
  {
    return errorstate;
 800a88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a88c:	e00e      	b.n	800a8ac <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681d      	ldr	r5, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	466c      	mov	r4, sp
 800a896:	f103 0210 	add.w	r2, r3, #16
 800a89a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a89c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f002 f9c5 	bl	800cc34 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3740      	adds	r7, #64	@ 0x40
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bdb0      	pop	{r4, r5, r7, pc}

0800a8b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f002 fb7c 	bl	800cfca <SDMMC_CmdGoIdleState>
 800a8d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <SD_PowerON+0x2a>
  {
    return errorstate;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	e072      	b.n	800a9c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f002 fb8f 	bl	800d006 <SDMMC_CmdOperCond>
 800a8e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00d      	beq.n	800a90c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f002 fb65 	bl	800cfca <SDMMC_CmdGoIdleState>
 800a900:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d004      	beq.n	800a912 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	e05b      	b.n	800a9c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a916:	2b01      	cmp	r3, #1
 800a918:	d137      	bne.n	800a98a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2100      	movs	r1, #0
 800a920:	4618      	mov	r0, r3
 800a922:	f002 fb8f 	bl	800d044 <SDMMC_CmdAppCommand>
 800a926:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d02d      	beq.n	800a98a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a92e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a932:	e047      	b.n	800a9c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2100      	movs	r1, #0
 800a93a:	4618      	mov	r0, r3
 800a93c:	f002 fb82 	bl	800d044 <SDMMC_CmdAppCommand>
 800a940:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <SD_PowerON+0x98>
    {
      return errorstate;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	e03b      	b.n	800a9c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	491e      	ldr	r1, [pc, #120]	@ (800a9cc <SD_PowerON+0x118>)
 800a952:	4618      	mov	r0, r3
 800a954:	f002 fb98 	bl	800d088 <SDMMC_CmdAppOperCommand>
 800a958:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a960:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a964:	e02e      	b.n	800a9c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2100      	movs	r1, #0
 800a96c:	4618      	mov	r0, r3
 800a96e:	f002 f9fd 	bl	800cd6c <SDIO_GetResponse>
 800a972:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	0fdb      	lsrs	r3, r3, #31
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d101      	bne.n	800a980 <SD_PowerON+0xcc>
 800a97c:	2301      	movs	r3, #1
 800a97e:	e000      	b.n	800a982 <SD_PowerON+0xce>
 800a980:	2300      	movs	r3, #0
 800a982:	613b      	str	r3, [r7, #16]

    count++;
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	3301      	adds	r3, #1
 800a988:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a990:	4293      	cmp	r3, r2
 800a992:	d802      	bhi.n	800a99a <SD_PowerON+0xe6>
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d0cc      	beq.n	800a934 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d902      	bls.n	800a9aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a9a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a9a8:	e00c      	b.n	800a9c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	645a      	str	r2, [r3, #68]	@ 0x44
 800a9ba:	e002      	b.n	800a9c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	c1100000 	.word	0xc1100000

0800a9d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d102      	bne.n	800a9e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a9e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a9e4:	e018      	b.n	800aa18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9ee:	041b      	lsls	r3, r3, #16
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	f002 fbc9 	bl	800d18a <SDMMC_CmdSendStatus>
 800a9f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <SD_SendStatus+0x34>
  {
    return errorstate;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	e009      	b.n	800aa18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2100      	movs	r1, #0
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f002 f9ae 	bl	800cd6c <SDIO_GetResponse>
 800aa10:	4602      	mov	r2, r0
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa2c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa32:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d03f      	beq.n	800aaba <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	617b      	str	r3, [r7, #20]
 800aa3e:	e033      	b.n	800aaa8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4618      	mov	r0, r3
 800aa46:	f002 f920 	bl	800cc8a <SDIO_ReadFIFO>
 800aa4a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	3301      	adds	r3, #1
 800aa58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	0a1b      	lsrs	r3, r3, #8
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	0c1b      	lsrs	r3, r3, #16
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3301      	adds	r3, #1
 800aa84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	0e1b      	lsrs	r3, r3, #24
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	617b      	str	r3, [r7, #20]
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2b07      	cmp	r3, #7
 800aaac:	d9c8      	bls.n	800aa40 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800aaba:	bf00      	nop
 800aabc:	3718      	adds	r7, #24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b086      	sub	sp, #24
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d043      	beq.n	800ab64 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800aadc:	2300      	movs	r3, #0
 800aade:	617b      	str	r3, [r7, #20]
 800aae0:	e037      	b.n	800ab52 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3301      	adds	r3, #1
 800aaec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	021a      	lsls	r2, r3, #8
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	3301      	adds	r3, #1
 800ab04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	041a      	lsls	r2, r3, #16
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	061a      	lsls	r2, r3, #24
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3301      	adds	r3, #1
 800ab34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f107 0208 	add.w	r2, r7, #8
 800ab44:	4611      	mov	r1, r2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f002 f8ac 	bl	800cca4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	617b      	str	r3, [r7, #20]
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2b07      	cmp	r3, #7
 800ab56:	d9c4      	bls.n	800aae2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800ab64:	bf00      	nop
 800ab66:	3718      	adds	r7, #24
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d101      	bne.n	800ab80 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e025      	b.n	800abcc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d106      	bne.n	800ab9a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7f8 fce9 	bl	800356c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	3304      	adds	r3, #4
 800abaa:	4619      	mov	r1, r3
 800abac:	4610      	mov	r0, r2
 800abae:	f001 ff7b 	bl	800caa8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6818      	ldr	r0, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	461a      	mov	r2, r3
 800abbc:	6839      	ldr	r1, [r7, #0]
 800abbe:	f001 ffd0 	bl	800cb62 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e041      	b.n	800ac6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d106      	bne.n	800ac00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7f8 fb02 	bl	8003204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	3304      	adds	r3, #4
 800ac10:	4619      	mov	r1, r3
 800ac12:	4610      	mov	r0, r2
 800ac14:	f000 fa7e 	bl	800b114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d001      	beq.n	800ac8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e04e      	b.n	800ad2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2202      	movs	r2, #2
 800ac90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68da      	ldr	r2, [r3, #12]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f042 0201 	orr.w	r2, r2, #1
 800aca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a23      	ldr	r2, [pc, #140]	@ (800ad38 <HAL_TIM_Base_Start_IT+0xc4>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d022      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x80>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acb6:	d01d      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x80>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a1f      	ldr	r2, [pc, #124]	@ (800ad3c <HAL_TIM_Base_Start_IT+0xc8>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d018      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x80>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a1e      	ldr	r2, [pc, #120]	@ (800ad40 <HAL_TIM_Base_Start_IT+0xcc>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d013      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x80>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a1c      	ldr	r2, [pc, #112]	@ (800ad44 <HAL_TIM_Base_Start_IT+0xd0>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d00e      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x80>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a1b      	ldr	r2, [pc, #108]	@ (800ad48 <HAL_TIM_Base_Start_IT+0xd4>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d009      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x80>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a19      	ldr	r2, [pc, #100]	@ (800ad4c <HAL_TIM_Base_Start_IT+0xd8>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d004      	beq.n	800acf4 <HAL_TIM_Base_Start_IT+0x80>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a18      	ldr	r2, [pc, #96]	@ (800ad50 <HAL_TIM_Base_Start_IT+0xdc>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d111      	bne.n	800ad18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	f003 0307 	and.w	r3, r3, #7
 800acfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b06      	cmp	r3, #6
 800ad04:	d010      	beq.n	800ad28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f042 0201 	orr.w	r2, r2, #1
 800ad14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad16:	e007      	b.n	800ad28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f042 0201 	orr.w	r2, r2, #1
 800ad26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	40010000 	.word	0x40010000
 800ad3c:	40000400 	.word	0x40000400
 800ad40:	40000800 	.word	0x40000800
 800ad44:	40000c00 	.word	0x40000c00
 800ad48:	40010400 	.word	0x40010400
 800ad4c:	40014000 	.word	0x40014000
 800ad50:	40001800 	.word	0x40001800

0800ad54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	f003 0302 	and.w	r3, r3, #2
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d020      	beq.n	800adb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f003 0302 	and.w	r3, r3, #2
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d01b      	beq.n	800adb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f06f 0202 	mvn.w	r2, #2
 800ad88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	f003 0303 	and.w	r3, r3, #3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f999 	bl	800b0d6 <HAL_TIM_IC_CaptureCallback>
 800ada4:	e005      	b.n	800adb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f98b 	bl	800b0c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f99c 	bl	800b0ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	f003 0304 	and.w	r3, r3, #4
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d020      	beq.n	800ae04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d01b      	beq.n	800ae04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f06f 0204 	mvn.w	r2, #4
 800add4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2202      	movs	r2, #2
 800adda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f973 	bl	800b0d6 <HAL_TIM_IC_CaptureCallback>
 800adf0:	e005      	b.n	800adfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f965 	bl	800b0c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f976 	bl	800b0ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	f003 0308 	and.w	r3, r3, #8
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d020      	beq.n	800ae50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f003 0308 	and.w	r3, r3, #8
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d01b      	beq.n	800ae50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f06f 0208 	mvn.w	r2, #8
 800ae20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2204      	movs	r2, #4
 800ae26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	69db      	ldr	r3, [r3, #28]
 800ae2e:	f003 0303 	and.w	r3, r3, #3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f94d 	bl	800b0d6 <HAL_TIM_IC_CaptureCallback>
 800ae3c:	e005      	b.n	800ae4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f93f 	bl	800b0c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f950 	bl	800b0ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	f003 0310 	and.w	r3, r3, #16
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d020      	beq.n	800ae9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f003 0310 	and.w	r3, r3, #16
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d01b      	beq.n	800ae9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f06f 0210 	mvn.w	r2, #16
 800ae6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2208      	movs	r2, #8
 800ae72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	69db      	ldr	r3, [r3, #28]
 800ae7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f927 	bl	800b0d6 <HAL_TIM_IC_CaptureCallback>
 800ae88:	e005      	b.n	800ae96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f919 	bl	800b0c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f92a 	bl	800b0ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00c      	beq.n	800aec0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d007      	beq.n	800aec0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f06f 0201 	mvn.w	r2, #1
 800aeb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7f7 feb2 	bl	8002c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00c      	beq.n	800aee4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d007      	beq.n	800aee4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800aedc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fae4 	bl	800b4ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00c      	beq.n	800af08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d007      	beq.n	800af08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800af00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f8fb 	bl	800b0fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00c      	beq.n	800af2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f003 0320 	and.w	r3, r3, #32
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d007      	beq.n	800af2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f06f 0220 	mvn.w	r2, #32
 800af24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fab6 	bl	800b498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af2c:	bf00      	nop
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d101      	bne.n	800af50 <HAL_TIM_ConfigClockSource+0x1c>
 800af4c:	2302      	movs	r3, #2
 800af4e:	e0b4      	b.n	800b0ba <HAL_TIM_ConfigClockSource+0x186>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2202      	movs	r2, #2
 800af5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800af6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af88:	d03e      	beq.n	800b008 <HAL_TIM_ConfigClockSource+0xd4>
 800af8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af8e:	f200 8087 	bhi.w	800b0a0 <HAL_TIM_ConfigClockSource+0x16c>
 800af92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af96:	f000 8086 	beq.w	800b0a6 <HAL_TIM_ConfigClockSource+0x172>
 800af9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af9e:	d87f      	bhi.n	800b0a0 <HAL_TIM_ConfigClockSource+0x16c>
 800afa0:	2b70      	cmp	r3, #112	@ 0x70
 800afa2:	d01a      	beq.n	800afda <HAL_TIM_ConfigClockSource+0xa6>
 800afa4:	2b70      	cmp	r3, #112	@ 0x70
 800afa6:	d87b      	bhi.n	800b0a0 <HAL_TIM_ConfigClockSource+0x16c>
 800afa8:	2b60      	cmp	r3, #96	@ 0x60
 800afaa:	d050      	beq.n	800b04e <HAL_TIM_ConfigClockSource+0x11a>
 800afac:	2b60      	cmp	r3, #96	@ 0x60
 800afae:	d877      	bhi.n	800b0a0 <HAL_TIM_ConfigClockSource+0x16c>
 800afb0:	2b50      	cmp	r3, #80	@ 0x50
 800afb2:	d03c      	beq.n	800b02e <HAL_TIM_ConfigClockSource+0xfa>
 800afb4:	2b50      	cmp	r3, #80	@ 0x50
 800afb6:	d873      	bhi.n	800b0a0 <HAL_TIM_ConfigClockSource+0x16c>
 800afb8:	2b40      	cmp	r3, #64	@ 0x40
 800afba:	d058      	beq.n	800b06e <HAL_TIM_ConfigClockSource+0x13a>
 800afbc:	2b40      	cmp	r3, #64	@ 0x40
 800afbe:	d86f      	bhi.n	800b0a0 <HAL_TIM_ConfigClockSource+0x16c>
 800afc0:	2b30      	cmp	r3, #48	@ 0x30
 800afc2:	d064      	beq.n	800b08e <HAL_TIM_ConfigClockSource+0x15a>
 800afc4:	2b30      	cmp	r3, #48	@ 0x30
 800afc6:	d86b      	bhi.n	800b0a0 <HAL_TIM_ConfigClockSource+0x16c>
 800afc8:	2b20      	cmp	r3, #32
 800afca:	d060      	beq.n	800b08e <HAL_TIM_ConfigClockSource+0x15a>
 800afcc:	2b20      	cmp	r3, #32
 800afce:	d867      	bhi.n	800b0a0 <HAL_TIM_ConfigClockSource+0x16c>
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d05c      	beq.n	800b08e <HAL_TIM_ConfigClockSource+0x15a>
 800afd4:	2b10      	cmp	r3, #16
 800afd6:	d05a      	beq.n	800b08e <HAL_TIM_ConfigClockSource+0x15a>
 800afd8:	e062      	b.n	800b0a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800afea:	f000 f9b9 	bl	800b360 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800affc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	609a      	str	r2, [r3, #8]
      break;
 800b006:	e04f      	b.n	800b0a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b018:	f000 f9a2 	bl	800b360 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	689a      	ldr	r2, [r3, #8]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b02a:	609a      	str	r2, [r3, #8]
      break;
 800b02c:	e03c      	b.n	800b0a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b03a:	461a      	mov	r2, r3
 800b03c:	f000 f916 	bl	800b26c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2150      	movs	r1, #80	@ 0x50
 800b046:	4618      	mov	r0, r3
 800b048:	f000 f96f 	bl	800b32a <TIM_ITRx_SetConfig>
      break;
 800b04c:	e02c      	b.n	800b0a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b05a:	461a      	mov	r2, r3
 800b05c:	f000 f935 	bl	800b2ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2160      	movs	r1, #96	@ 0x60
 800b066:	4618      	mov	r0, r3
 800b068:	f000 f95f 	bl	800b32a <TIM_ITRx_SetConfig>
      break;
 800b06c:	e01c      	b.n	800b0a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b07a:	461a      	mov	r2, r3
 800b07c:	f000 f8f6 	bl	800b26c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2140      	movs	r1, #64	@ 0x40
 800b086:	4618      	mov	r0, r3
 800b088:	f000 f94f 	bl	800b32a <TIM_ITRx_SetConfig>
      break;
 800b08c:	e00c      	b.n	800b0a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f000 f946 	bl	800b32a <TIM_ITRx_SetConfig>
      break;
 800b09e:	e003      	b.n	800b0a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b0a4:	e000      	b.n	800b0a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b0a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b083      	sub	sp, #12
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0ca:	bf00      	nop
 800b0cc:	370c      	adds	r7, #12
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr

0800b0d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0d6:	b480      	push	{r7}
 800b0d8:	b083      	sub	sp, #12
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0de:	bf00      	nop
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0ea:	b480      	push	{r7}
 800b0ec:	b083      	sub	sp, #12
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b0f2:	bf00      	nop
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
	...

0800b114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a46      	ldr	r2, [pc, #280]	@ (800b240 <TIM_Base_SetConfig+0x12c>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d013      	beq.n	800b154 <TIM_Base_SetConfig+0x40>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b132:	d00f      	beq.n	800b154 <TIM_Base_SetConfig+0x40>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a43      	ldr	r2, [pc, #268]	@ (800b244 <TIM_Base_SetConfig+0x130>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d00b      	beq.n	800b154 <TIM_Base_SetConfig+0x40>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a42      	ldr	r2, [pc, #264]	@ (800b248 <TIM_Base_SetConfig+0x134>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d007      	beq.n	800b154 <TIM_Base_SetConfig+0x40>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a41      	ldr	r2, [pc, #260]	@ (800b24c <TIM_Base_SetConfig+0x138>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d003      	beq.n	800b154 <TIM_Base_SetConfig+0x40>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a40      	ldr	r2, [pc, #256]	@ (800b250 <TIM_Base_SetConfig+0x13c>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d108      	bne.n	800b166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b15a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4313      	orrs	r3, r2
 800b164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a35      	ldr	r2, [pc, #212]	@ (800b240 <TIM_Base_SetConfig+0x12c>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d02b      	beq.n	800b1c6 <TIM_Base_SetConfig+0xb2>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b174:	d027      	beq.n	800b1c6 <TIM_Base_SetConfig+0xb2>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a32      	ldr	r2, [pc, #200]	@ (800b244 <TIM_Base_SetConfig+0x130>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d023      	beq.n	800b1c6 <TIM_Base_SetConfig+0xb2>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a31      	ldr	r2, [pc, #196]	@ (800b248 <TIM_Base_SetConfig+0x134>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d01f      	beq.n	800b1c6 <TIM_Base_SetConfig+0xb2>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a30      	ldr	r2, [pc, #192]	@ (800b24c <TIM_Base_SetConfig+0x138>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d01b      	beq.n	800b1c6 <TIM_Base_SetConfig+0xb2>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a2f      	ldr	r2, [pc, #188]	@ (800b250 <TIM_Base_SetConfig+0x13c>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d017      	beq.n	800b1c6 <TIM_Base_SetConfig+0xb2>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a2e      	ldr	r2, [pc, #184]	@ (800b254 <TIM_Base_SetConfig+0x140>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d013      	beq.n	800b1c6 <TIM_Base_SetConfig+0xb2>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a2d      	ldr	r2, [pc, #180]	@ (800b258 <TIM_Base_SetConfig+0x144>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d00f      	beq.n	800b1c6 <TIM_Base_SetConfig+0xb2>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a2c      	ldr	r2, [pc, #176]	@ (800b25c <TIM_Base_SetConfig+0x148>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d00b      	beq.n	800b1c6 <TIM_Base_SetConfig+0xb2>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a2b      	ldr	r2, [pc, #172]	@ (800b260 <TIM_Base_SetConfig+0x14c>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d007      	beq.n	800b1c6 <TIM_Base_SetConfig+0xb2>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a2a      	ldr	r2, [pc, #168]	@ (800b264 <TIM_Base_SetConfig+0x150>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d003      	beq.n	800b1c6 <TIM_Base_SetConfig+0xb2>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a29      	ldr	r2, [pc, #164]	@ (800b268 <TIM_Base_SetConfig+0x154>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d108      	bne.n	800b1d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	689a      	ldr	r2, [r3, #8]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a10      	ldr	r2, [pc, #64]	@ (800b240 <TIM_Base_SetConfig+0x12c>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d003      	beq.n	800b20c <TIM_Base_SetConfig+0xf8>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a12      	ldr	r2, [pc, #72]	@ (800b250 <TIM_Base_SetConfig+0x13c>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d103      	bne.n	800b214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	691a      	ldr	r2, [r3, #16]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	f003 0301 	and.w	r3, r3, #1
 800b222:	2b01      	cmp	r3, #1
 800b224:	d105      	bne.n	800b232 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	f023 0201 	bic.w	r2, r3, #1
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	611a      	str	r2, [r3, #16]
  }
}
 800b232:	bf00      	nop
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	40010000 	.word	0x40010000
 800b244:	40000400 	.word	0x40000400
 800b248:	40000800 	.word	0x40000800
 800b24c:	40000c00 	.word	0x40000c00
 800b250:	40010400 	.word	0x40010400
 800b254:	40014000 	.word	0x40014000
 800b258:	40014400 	.word	0x40014400
 800b25c:	40014800 	.word	0x40014800
 800b260:	40001800 	.word	0x40001800
 800b264:	40001c00 	.word	0x40001c00
 800b268:	40002000 	.word	0x40002000

0800b26c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b087      	sub	sp, #28
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6a1b      	ldr	r3, [r3, #32]
 800b27c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	f023 0201 	bic.w	r2, r3, #1
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	011b      	lsls	r3, r3, #4
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f023 030a 	bic.w	r3, r3, #10
 800b2a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	621a      	str	r2, [r3, #32]
}
 800b2be:	bf00      	nop
 800b2c0:	371c      	adds	r7, #28
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b087      	sub	sp, #28
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	60b9      	str	r1, [r7, #8]
 800b2d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6a1b      	ldr	r3, [r3, #32]
 800b2e0:	f023 0210 	bic.w	r2, r3, #16
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b2f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	031b      	lsls	r3, r3, #12
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b306:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	011b      	lsls	r3, r3, #4
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	4313      	orrs	r3, r2
 800b310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	621a      	str	r2, [r3, #32]
}
 800b31e:	bf00      	nop
 800b320:	371c      	adds	r7, #28
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b085      	sub	sp, #20
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	4313      	orrs	r3, r2
 800b348:	f043 0307 	orr.w	r3, r3, #7
 800b34c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	609a      	str	r2, [r3, #8]
}
 800b354:	bf00      	nop
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b360:	b480      	push	{r7}
 800b362:	b087      	sub	sp, #28
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
 800b36c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b37a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	021a      	lsls	r2, r3, #8
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	431a      	orrs	r2, r3
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	4313      	orrs	r3, r2
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	609a      	str	r2, [r3, #8]
}
 800b394:	bf00      	nop
 800b396:	371c      	adds	r7, #28
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d101      	bne.n	800b3b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3b4:	2302      	movs	r3, #2
 800b3b6:	e05a      	b.n	800b46e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a21      	ldr	r2, [pc, #132]	@ (800b47c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d022      	beq.n	800b442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b404:	d01d      	beq.n	800b442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a1d      	ldr	r2, [pc, #116]	@ (800b480 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d018      	beq.n	800b442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a1b      	ldr	r2, [pc, #108]	@ (800b484 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d013      	beq.n	800b442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a1a      	ldr	r2, [pc, #104]	@ (800b488 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d00e      	beq.n	800b442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a18      	ldr	r2, [pc, #96]	@ (800b48c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d009      	beq.n	800b442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a17      	ldr	r2, [pc, #92]	@ (800b490 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d004      	beq.n	800b442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a15      	ldr	r2, [pc, #84]	@ (800b494 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d10c      	bne.n	800b45c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	4313      	orrs	r3, r2
 800b452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	40010000 	.word	0x40010000
 800b480:	40000400 	.word	0x40000400
 800b484:	40000800 	.word	0x40000800
 800b488:	40000c00 	.word	0x40000c00
 800b48c:	40010400 	.word	0x40010400
 800b490:	40014000 	.word	0x40014000
 800b494:	40001800 	.word	0x40001800

0800b498 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4b4:	bf00      	nop
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e042      	b.n	800b558 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d106      	bne.n	800b4ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7f7 feae 	bl	8003248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2224      	movs	r2, #36	@ 0x24
 800b4f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68da      	ldr	r2, [r3, #12]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f001 f85b 	bl	800c5c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	691a      	ldr	r2, [r3, #16]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	695a      	ldr	r2, [r3, #20]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68da      	ldr	r2, [r3, #12]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2220      	movs	r2, #32
 800b544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2220      	movs	r2, #32
 800b54c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08a      	sub	sp, #40	@ 0x28
 800b564:	af02      	add	r7, sp, #8
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	603b      	str	r3, [r7, #0]
 800b56c:	4613      	mov	r3, r2
 800b56e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b20      	cmp	r3, #32
 800b57e:	d175      	bne.n	800b66c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d002      	beq.n	800b58c <HAL_UART_Transmit+0x2c>
 800b586:	88fb      	ldrh	r3, [r7, #6]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e06e      	b.n	800b66e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2221      	movs	r2, #33	@ 0x21
 800b59a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b59e:	f7f8 fa8d 	bl	8003abc <HAL_GetTick>
 800b5a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	88fa      	ldrh	r2, [r7, #6]
 800b5a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	88fa      	ldrh	r2, [r7, #6]
 800b5ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5b8:	d108      	bne.n	800b5cc <HAL_UART_Transmit+0x6c>
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d104      	bne.n	800b5cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	61bb      	str	r3, [r7, #24]
 800b5ca:	e003      	b.n	800b5d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b5d4:	e02e      	b.n	800b634 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	2180      	movs	r1, #128	@ 0x80
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f000 fd34 	bl	800c04e <UART_WaitOnFlagUntilTimeout>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2220      	movs	r2, #32
 800b5f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b5f4:	2303      	movs	r3, #3
 800b5f6:	e03a      	b.n	800b66e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10b      	bne.n	800b616 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	881b      	ldrh	r3, [r3, #0]
 800b602:	461a      	mov	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b60c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	3302      	adds	r3, #2
 800b612:	61bb      	str	r3, [r7, #24]
 800b614:	e007      	b.n	800b626 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	781a      	ldrb	r2, [r3, #0]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	3301      	adds	r3, #1
 800b624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	3b01      	subs	r3, #1
 800b62e:	b29a      	uxth	r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b638:	b29b      	uxth	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1cb      	bne.n	800b5d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2200      	movs	r2, #0
 800b646:	2140      	movs	r1, #64	@ 0x40
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f000 fd00 	bl	800c04e <UART_WaitOnFlagUntilTimeout>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d005      	beq.n	800b660 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2220      	movs	r2, #32
 800b658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e006      	b.n	800b66e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2220      	movs	r2, #32
 800b664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	e000      	b.n	800b66e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b66c:	2302      	movs	r3, #2
  }
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3720      	adds	r7, #32
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08c      	sub	sp, #48	@ 0x30
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	4613      	mov	r3, r2
 800b684:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2b20      	cmp	r3, #32
 800b690:	d156      	bne.n	800b740 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <HAL_UART_Transmit_DMA+0x26>
 800b698:	88fb      	ldrh	r3, [r7, #6]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e04f      	b.n	800b742 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	88fa      	ldrh	r2, [r7, #6]
 800b6ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	88fa      	ldrh	r2, [r7, #6]
 800b6b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2221      	movs	r2, #33	@ 0x21
 800b6be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6c6:	4a21      	ldr	r2, [pc, #132]	@ (800b74c <HAL_UART_Transmit_DMA+0xd4>)
 800b6c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ce:	4a20      	ldr	r2, [pc, #128]	@ (800b750 <HAL_UART_Transmit_DMA+0xd8>)
 800b6d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6d6:	4a1f      	ldr	r2, [pc, #124]	@ (800b754 <HAL_UART_Transmit_DMA+0xdc>)
 800b6d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6de:	2200      	movs	r2, #0
 800b6e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b6e2:	f107 0308 	add.w	r3, r7, #8
 800b6e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ee:	6819      	ldr	r1, [r3, #0]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	88fb      	ldrh	r3, [r7, #6]
 800b6fa:	f7f8 fbbb 	bl	8003e74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b706:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	3314      	adds	r3, #20
 800b70e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	e853 3f00 	ldrex	r3, [r3]
 800b716:	617b      	str	r3, [r7, #20]
   return(result);
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b71e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	3314      	adds	r3, #20
 800b726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b728:	627a      	str	r2, [r7, #36]	@ 0x24
 800b72a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72c:	6a39      	ldr	r1, [r7, #32]
 800b72e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b730:	e841 2300 	strex	r3, r2, [r1]
 800b734:	61fb      	str	r3, [r7, #28]
   return(result);
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1e5      	bne.n	800b708 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	e000      	b.n	800b742 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800b740:	2302      	movs	r3, #2
  }
}
 800b742:	4618      	mov	r0, r3
 800b744:	3730      	adds	r7, #48	@ 0x30
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	0800bd9d 	.word	0x0800bd9d
 800b750:	0800be37 	.word	0x0800be37
 800b754:	0800bfbb 	.word	0x0800bfbb

0800b758 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08c      	sub	sp, #48	@ 0x30
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	4613      	mov	r3, r2
 800b764:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	2b20      	cmp	r3, #32
 800b770:	d14a      	bne.n	800b808 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b778:	88fb      	ldrh	r3, [r7, #6]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e043      	b.n	800b80a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2201      	movs	r2, #1
 800b786:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b78e:	88fb      	ldrh	r3, [r7, #6]
 800b790:	461a      	mov	r2, r3
 800b792:	68b9      	ldr	r1, [r7, #8]
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f000 fcb3 	bl	800c100 <UART_Start_Receive_DMA>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b7a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d12c      	bne.n	800b802 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d125      	bne.n	800b7fc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	613b      	str	r3, [r7, #16]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	613b      	str	r3, [r7, #16]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	613b      	str	r3, [r7, #16]
 800b7c4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	330c      	adds	r3, #12
 800b7cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	e853 3f00 	ldrex	r3, [r3]
 800b7d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	f043 0310 	orr.w	r3, r3, #16
 800b7dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	330c      	adds	r3, #12
 800b7e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7e6:	627a      	str	r2, [r7, #36]	@ 0x24
 800b7e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ea:	6a39      	ldr	r1, [r7, #32]
 800b7ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7ee:	e841 2300 	strex	r3, r2, [r1]
 800b7f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d1e5      	bne.n	800b7c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800b7fa:	e002      	b.n	800b802 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b806:	e000      	b.n	800b80a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b808:	2302      	movs	r3, #2
  }
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3730      	adds	r7, #48	@ 0x30
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b0ba      	sub	sp, #232	@ 0xe8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	695b      	ldr	r3, [r3, #20]
 800b836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b83a:	2300      	movs	r3, #0
 800b83c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b840:	2300      	movs	r3, #0
 800b842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b84a:	f003 030f 	and.w	r3, r3, #15
 800b84e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10f      	bne.n	800b87a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b85a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b85e:	f003 0320 	and.w	r3, r3, #32
 800b862:	2b00      	cmp	r3, #0
 800b864:	d009      	beq.n	800b87a <HAL_UART_IRQHandler+0x66>
 800b866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b86a:	f003 0320 	and.w	r3, r3, #32
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fde5 	bl	800c442 <UART_Receive_IT>
      return;
 800b878:	e25b      	b.n	800bd32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b87a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 80de 	beq.w	800ba40 <HAL_UART_IRQHandler+0x22c>
 800b884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d106      	bne.n	800b89e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b894:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 80d1 	beq.w	800ba40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00b      	beq.n	800b8c2 <HAL_UART_IRQHandler+0xae>
 800b8aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d005      	beq.n	800b8c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8ba:	f043 0201 	orr.w	r2, r3, #1
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8c6:	f003 0304 	and.w	r3, r3, #4
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00b      	beq.n	800b8e6 <HAL_UART_IRQHandler+0xd2>
 800b8ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d005      	beq.n	800b8e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8de:	f043 0202 	orr.w	r2, r3, #2
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8ea:	f003 0302 	and.w	r3, r3, #2
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00b      	beq.n	800b90a <HAL_UART_IRQHandler+0xf6>
 800b8f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d005      	beq.n	800b90a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b902:	f043 0204 	orr.w	r2, r3, #4
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b90e:	f003 0308 	and.w	r3, r3, #8
 800b912:	2b00      	cmp	r3, #0
 800b914:	d011      	beq.n	800b93a <HAL_UART_IRQHandler+0x126>
 800b916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b91a:	f003 0320 	and.w	r3, r3, #32
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d105      	bne.n	800b92e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d005      	beq.n	800b93a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b932:	f043 0208 	orr.w	r2, r3, #8
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 81f2 	beq.w	800bd28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b948:	f003 0320 	and.w	r3, r3, #32
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d008      	beq.n	800b962 <HAL_UART_IRQHandler+0x14e>
 800b950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b954:	f003 0320 	and.w	r3, r3, #32
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fd70 	bl	800c442 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	695b      	ldr	r3, [r3, #20]
 800b968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b96c:	2b40      	cmp	r3, #64	@ 0x40
 800b96e:	bf0c      	ite	eq
 800b970:	2301      	moveq	r3, #1
 800b972:	2300      	movne	r3, #0
 800b974:	b2db      	uxtb	r3, r3
 800b976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b97e:	f003 0308 	and.w	r3, r3, #8
 800b982:	2b00      	cmp	r3, #0
 800b984:	d103      	bne.n	800b98e <HAL_UART_IRQHandler+0x17a>
 800b986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d04f      	beq.n	800ba2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fc78 	bl	800c284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b99e:	2b40      	cmp	r3, #64	@ 0x40
 800b9a0:	d141      	bne.n	800ba26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3314      	adds	r3, #20
 800b9a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b9b0:	e853 3f00 	ldrex	r3, [r3]
 800b9b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b9b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b9bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3314      	adds	r3, #20
 800b9ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b9ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b9d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b9da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b9de:	e841 2300 	strex	r3, r2, [r1]
 800b9e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b9e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1d9      	bne.n	800b9a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d013      	beq.n	800ba1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9fa:	4a7e      	ldr	r2, [pc, #504]	@ (800bbf4 <HAL_UART_IRQHandler+0x3e0>)
 800b9fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7f8 fafe 	bl	8004004 <HAL_DMA_Abort_IT>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d016      	beq.n	800ba3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ba18:	4610      	mov	r0, r2
 800ba1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba1c:	e00e      	b.n	800ba3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f9b2 	bl	800bd88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba24:	e00a      	b.n	800ba3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f9ae 	bl	800bd88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba2c:	e006      	b.n	800ba3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f9aa 	bl	800bd88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ba3a:	e175      	b.n	800bd28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba3c:	bf00      	nop
    return;
 800ba3e:	e173      	b.n	800bd28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	f040 814f 	bne.w	800bce8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ba4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba4e:	f003 0310 	and.w	r3, r3, #16
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 8148 	beq.w	800bce8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ba58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba5c:	f003 0310 	and.w	r3, r3, #16
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 8141 	beq.w	800bce8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba66:	2300      	movs	r3, #0
 800ba68:	60bb      	str	r3, [r7, #8]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	60bb      	str	r3, [r7, #8]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	60bb      	str	r3, [r7, #8]
 800ba7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba86:	2b40      	cmp	r3, #64	@ 0x40
 800ba88:	f040 80b6 	bne.w	800bbf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 8145 	beq.w	800bd2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800baa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800baaa:	429a      	cmp	r2, r3
 800baac:	f080 813e 	bcs.w	800bd2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bab6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bac2:	f000 8088 	beq.w	800bbd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	330c      	adds	r3, #12
 800bacc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bad4:	e853 3f00 	ldrex	r3, [r3]
 800bad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800badc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bae4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	330c      	adds	r3, #12
 800baee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800baf2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800baf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bafe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bb02:	e841 2300 	strex	r3, r2, [r1]
 800bb06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bb0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1d9      	bne.n	800bac6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3314      	adds	r3, #20
 800bb18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb1c:	e853 3f00 	ldrex	r3, [r3]
 800bb20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bb22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb24:	f023 0301 	bic.w	r3, r3, #1
 800bb28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	3314      	adds	r3, #20
 800bb32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bb36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bb3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bb3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bb42:	e841 2300 	strex	r3, r2, [r1]
 800bb46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bb48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1e1      	bne.n	800bb12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	3314      	adds	r3, #20
 800bb54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb58:	e853 3f00 	ldrex	r3, [r3]
 800bb5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bb5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	3314      	adds	r3, #20
 800bb6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bb72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bb74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bb78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bb7a:	e841 2300 	strex	r3, r2, [r1]
 800bb7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bb80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e3      	bne.n	800bb4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2220      	movs	r2, #32
 800bb8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	330c      	adds	r3, #12
 800bb9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb9e:	e853 3f00 	ldrex	r3, [r3]
 800bba2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bba6:	f023 0310 	bic.w	r3, r3, #16
 800bbaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	330c      	adds	r3, #12
 800bbb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bbb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bbba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bbbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbc0:	e841 2300 	strex	r3, r2, [r1]
 800bbc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bbc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1e3      	bne.n	800bb94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7f8 f9a7 	bl	8003f24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2202      	movs	r2, #2
 800bbda:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	1ad3      	subs	r3, r2, r3
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	4619      	mov	r1, r3
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7f6 f999 	bl	8001f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bbf2:	e09b      	b.n	800bd2c <HAL_UART_IRQHandler+0x518>
 800bbf4:	0800c34b 	.word	0x0800c34b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f000 808e 	beq.w	800bd30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bc14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 8089 	beq.w	800bd30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	330c      	adds	r3, #12
 800bc24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc28:	e853 3f00 	ldrex	r3, [r3]
 800bc2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bc2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	330c      	adds	r3, #12
 800bc3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800bc42:	647a      	str	r2, [r7, #68]	@ 0x44
 800bc44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bc48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc4a:	e841 2300 	strex	r3, r2, [r1]
 800bc4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bc50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1e3      	bne.n	800bc1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3314      	adds	r3, #20
 800bc5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc60:	e853 3f00 	ldrex	r3, [r3]
 800bc64:	623b      	str	r3, [r7, #32]
   return(result);
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	f023 0301 	bic.w	r3, r3, #1
 800bc6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3314      	adds	r3, #20
 800bc76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bc7a:	633a      	str	r2, [r7, #48]	@ 0x30
 800bc7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc82:	e841 2300 	strex	r3, r2, [r1]
 800bc86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1e3      	bne.n	800bc56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2220      	movs	r2, #32
 800bc92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	330c      	adds	r3, #12
 800bca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	e853 3f00 	ldrex	r3, [r3]
 800bcaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f023 0310 	bic.w	r3, r3, #16
 800bcb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	330c      	adds	r3, #12
 800bcbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800bcc0:	61fa      	str	r2, [r7, #28]
 800bcc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc4:	69b9      	ldr	r1, [r7, #24]
 800bcc6:	69fa      	ldr	r2, [r7, #28]
 800bcc8:	e841 2300 	strex	r3, r2, [r1]
 800bccc:	617b      	str	r3, [r7, #20]
   return(result);
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1e3      	bne.n	800bc9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2202      	movs	r2, #2
 800bcd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bcda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7f6 f91f 	bl	8001f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bce6:	e023      	b.n	800bd30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d009      	beq.n	800bd08 <HAL_UART_IRQHandler+0x4f4>
 800bcf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d003      	beq.n	800bd08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fb36 	bl	800c372 <UART_Transmit_IT>
    return;
 800bd06:	e014      	b.n	800bd32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bd08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00e      	beq.n	800bd32 <HAL_UART_IRQHandler+0x51e>
 800bd14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d008      	beq.n	800bd32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fb76 	bl	800c412 <UART_EndTransmit_IT>
    return;
 800bd26:	e004      	b.n	800bd32 <HAL_UART_IRQHandler+0x51e>
    return;
 800bd28:	bf00      	nop
 800bd2a:	e002      	b.n	800bd32 <HAL_UART_IRQHandler+0x51e>
      return;
 800bd2c:	bf00      	nop
 800bd2e:	e000      	b.n	800bd32 <HAL_UART_IRQHandler+0x51e>
      return;
 800bd30:	bf00      	nop
  }
}
 800bd32:	37e8      	adds	r7, #232	@ 0xe8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bd7c:	bf00      	nop
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bd90:	bf00      	nop
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b090      	sub	sp, #64	@ 0x40
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bda8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d137      	bne.n	800be28 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bdb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdba:	2200      	movs	r2, #0
 800bdbc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bdbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3314      	adds	r3, #20
 800bdc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc8:	e853 3f00 	ldrex	r3, [r3]
 800bdcc:	623b      	str	r3, [r7, #32]
   return(result);
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bdd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bdd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3314      	adds	r3, #20
 800bddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdde:	633a      	str	r2, [r7, #48]	@ 0x30
 800bde0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bde4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e5      	bne.n	800bdbe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	330c      	adds	r3, #12
 800bdf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	e853 3f00 	ldrex	r3, [r3]
 800be00:	60fb      	str	r3, [r7, #12]
   return(result);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be08:	637b      	str	r3, [r7, #52]	@ 0x34
 800be0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	330c      	adds	r3, #12
 800be10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be12:	61fa      	str	r2, [r7, #28]
 800be14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be16:	69b9      	ldr	r1, [r7, #24]
 800be18:	69fa      	ldr	r2, [r7, #28]
 800be1a:	e841 2300 	strex	r3, r2, [r1]
 800be1e:	617b      	str	r3, [r7, #20]
   return(result);
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1e5      	bne.n	800bdf2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be26:	e002      	b.n	800be2e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800be28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800be2a:	f7ff ff85 	bl	800bd38 <HAL_UART_TxCpltCallback>
}
 800be2e:	bf00      	nop
 800be30:	3740      	adds	r7, #64	@ 0x40
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f7ff ff81 	bl	800bd4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be4a:	bf00      	nop
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b09c      	sub	sp, #112	@ 0x70
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d172      	bne.n	800bf54 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800be6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be70:	2200      	movs	r2, #0
 800be72:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	330c      	adds	r3, #12
 800be7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be7e:	e853 3f00 	ldrex	r3, [r3]
 800be82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800be84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	330c      	adds	r3, #12
 800be92:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800be94:	65ba      	str	r2, [r7, #88]	@ 0x58
 800be96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800be9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be9c:	e841 2300 	strex	r3, r2, [r1]
 800bea0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1e5      	bne.n	800be74 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3314      	adds	r3, #20
 800beae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb2:	e853 3f00 	ldrex	r3, [r3]
 800beb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800beb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beba:	f023 0301 	bic.w	r3, r3, #1
 800bebe:	667b      	str	r3, [r7, #100]	@ 0x64
 800bec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	3314      	adds	r3, #20
 800bec6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bec8:	647a      	str	r2, [r7, #68]	@ 0x44
 800beca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800becc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bece:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bed0:	e841 2300 	strex	r3, r2, [r1]
 800bed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1e5      	bne.n	800bea8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bedc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3314      	adds	r3, #20
 800bee2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee6:	e853 3f00 	ldrex	r3, [r3]
 800beea:	623b      	str	r3, [r7, #32]
   return(result);
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bef2:	663b      	str	r3, [r7, #96]	@ 0x60
 800bef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3314      	adds	r3, #20
 800befa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800befc:	633a      	str	r2, [r7, #48]	@ 0x30
 800befe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf04:	e841 2300 	strex	r3, r2, [r1]
 800bf08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1e5      	bne.n	800bedc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bf10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf12:	2220      	movs	r2, #32
 800bf14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d119      	bne.n	800bf54 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	330c      	adds	r3, #12
 800bf26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	e853 3f00 	ldrex	r3, [r3]
 800bf2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f023 0310 	bic.w	r3, r3, #16
 800bf36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	330c      	adds	r3, #12
 800bf3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bf40:	61fa      	str	r2, [r7, #28]
 800bf42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf44:	69b9      	ldr	r1, [r7, #24]
 800bf46:	69fa      	ldr	r2, [r7, #28]
 800bf48:	e841 2300 	strex	r3, r2, [r1]
 800bf4c:	617b      	str	r3, [r7, #20]
   return(result);
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1e5      	bne.n	800bf20 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf56:	2200      	movs	r2, #0
 800bf58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d106      	bne.n	800bf70 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bf66:	4619      	mov	r1, r3
 800bf68:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf6a:	f7f5 ffdb 	bl	8001f24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf6e:	e002      	b.n	800bf76 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bf70:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf72:	f7ff fef5 	bl	800bd60 <HAL_UART_RxCpltCallback>
}
 800bf76:	bf00      	nop
 800bf78:	3770      	adds	r7, #112	@ 0x70
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf8a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d108      	bne.n	800bfac <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bf9e:	085b      	lsrs	r3, r3, #1
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f7f5 ffbd 	bl	8001f24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bfaa:	e002      	b.n	800bfb2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f7ff fee1 	bl	800bd74 <HAL_UART_RxHalfCpltCallback>
}
 800bfb2:	bf00      	nop
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b084      	sub	sp, #16
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfd6:	2b80      	cmp	r3, #128	@ 0x80
 800bfd8:	bf0c      	ite	eq
 800bfda:	2301      	moveq	r3, #1
 800bfdc:	2300      	movne	r3, #0
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	2b21      	cmp	r3, #33	@ 0x21
 800bfec:	d108      	bne.n	800c000 <UART_DMAError+0x46>
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d005      	beq.n	800c000 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	2200      	movs	r2, #0
 800bff8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800bffa:	68b8      	ldr	r0, [r7, #8]
 800bffc:	f000 f91a 	bl	800c234 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c00a:	2b40      	cmp	r3, #64	@ 0x40
 800c00c:	bf0c      	ite	eq
 800c00e:	2301      	moveq	r3, #1
 800c010:	2300      	movne	r3, #0
 800c012:	b2db      	uxtb	r3, r3
 800c014:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b22      	cmp	r3, #34	@ 0x22
 800c020:	d108      	bne.n	800c034 <UART_DMAError+0x7a>
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d005      	beq.n	800c034 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	2200      	movs	r2, #0
 800c02c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c02e:	68b8      	ldr	r0, [r7, #8]
 800c030:	f000 f928 	bl	800c284 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c038:	f043 0210 	orr.w	r2, r3, #16
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c040:	68b8      	ldr	r0, [r7, #8]
 800c042:	f7ff fea1 	bl	800bd88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c046:	bf00      	nop
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b086      	sub	sp, #24
 800c052:	af00      	add	r7, sp, #0
 800c054:	60f8      	str	r0, [r7, #12]
 800c056:	60b9      	str	r1, [r7, #8]
 800c058:	603b      	str	r3, [r7, #0]
 800c05a:	4613      	mov	r3, r2
 800c05c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c05e:	e03b      	b.n	800c0d8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c066:	d037      	beq.n	800c0d8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c068:	f7f7 fd28 	bl	8003abc <HAL_GetTick>
 800c06c:	4602      	mov	r2, r0
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	6a3a      	ldr	r2, [r7, #32]
 800c074:	429a      	cmp	r2, r3
 800c076:	d302      	bcc.n	800c07e <UART_WaitOnFlagUntilTimeout+0x30>
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d101      	bne.n	800c082 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c07e:	2303      	movs	r3, #3
 800c080:	e03a      	b.n	800c0f8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	f003 0304 	and.w	r3, r3, #4
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d023      	beq.n	800c0d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	2b80      	cmp	r3, #128	@ 0x80
 800c094:	d020      	beq.n	800c0d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b40      	cmp	r3, #64	@ 0x40
 800c09a:	d01d      	beq.n	800c0d8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 0308 	and.w	r3, r3, #8
 800c0a6:	2b08      	cmp	r3, #8
 800c0a8:	d116      	bne.n	800c0d8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	617b      	str	r3, [r7, #20]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	617b      	str	r3, [r7, #20]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	617b      	str	r3, [r7, #20]
 800c0be:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f000 f8df 	bl	800c284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2208      	movs	r2, #8
 800c0ca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e00f      	b.n	800c0f8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	bf0c      	ite	eq
 800c0e8:	2301      	moveq	r3, #1
 800c0ea:	2300      	movne	r3, #0
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	79fb      	ldrb	r3, [r7, #7]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d0b4      	beq.n	800c060 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b098      	sub	sp, #96	@ 0x60
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	4613      	mov	r3, r2
 800c10c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c10e:	68ba      	ldr	r2, [r7, #8]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	88fa      	ldrh	r2, [r7, #6]
 800c118:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2222      	movs	r2, #34	@ 0x22
 800c124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c12c:	4a3e      	ldr	r2, [pc, #248]	@ (800c228 <UART_Start_Receive_DMA+0x128>)
 800c12e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c134:	4a3d      	ldr	r2, [pc, #244]	@ (800c22c <UART_Start_Receive_DMA+0x12c>)
 800c136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c13c:	4a3c      	ldr	r2, [pc, #240]	@ (800c230 <UART_Start_Receive_DMA+0x130>)
 800c13e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c144:	2200      	movs	r2, #0
 800c146:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c148:	f107 0308 	add.w	r3, r7, #8
 800c14c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	3304      	adds	r3, #4
 800c158:	4619      	mov	r1, r3
 800c15a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	88fb      	ldrh	r3, [r7, #6]
 800c160:	f7f7 fe88 	bl	8003e74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c164:	2300      	movs	r3, #0
 800c166:	613b      	str	r3, [r7, #16]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	613b      	str	r3, [r7, #16]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	613b      	str	r3, [r7, #16]
 800c178:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d019      	beq.n	800c1b6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	330c      	adds	r3, #12
 800c188:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c18c:	e853 3f00 	ldrex	r3, [r3]
 800c190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c198:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	330c      	adds	r3, #12
 800c1a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c1a2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c1a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c1a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c1aa:	e841 2300 	strex	r3, r2, [r1]
 800c1ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c1b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1e5      	bne.n	800c182 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	3314      	adds	r3, #20
 800c1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c0:	e853 3f00 	ldrex	r3, [r3]
 800c1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c8:	f043 0301 	orr.w	r3, r3, #1
 800c1cc:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3314      	adds	r3, #20
 800c1d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c1d6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c1d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c1dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1de:	e841 2300 	strex	r3, r2, [r1]
 800c1e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1e5      	bne.n	800c1b6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3314      	adds	r3, #20
 800c1f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	617b      	str	r3, [r7, #20]
   return(result);
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c200:	653b      	str	r3, [r7, #80]	@ 0x50
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	3314      	adds	r3, #20
 800c208:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c20a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c20c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	6a39      	ldr	r1, [r7, #32]
 800c210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	61fb      	str	r3, [r7, #28]
   return(result);
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e5      	bne.n	800c1ea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3760      	adds	r7, #96	@ 0x60
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	0800be53 	.word	0x0800be53
 800c22c:	0800bf7f 	.word	0x0800bf7f
 800c230:	0800bfbb 	.word	0x0800bfbb

0800c234 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c234:	b480      	push	{r7}
 800c236:	b089      	sub	sp, #36	@ 0x24
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	330c      	adds	r3, #12
 800c242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	e853 3f00 	ldrex	r3, [r3]
 800c24a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c252:	61fb      	str	r3, [r7, #28]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	330c      	adds	r3, #12
 800c25a:	69fa      	ldr	r2, [r7, #28]
 800c25c:	61ba      	str	r2, [r7, #24]
 800c25e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c260:	6979      	ldr	r1, [r7, #20]
 800c262:	69ba      	ldr	r2, [r7, #24]
 800c264:	e841 2300 	strex	r3, r2, [r1]
 800c268:	613b      	str	r3, [r7, #16]
   return(result);
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1e5      	bne.n	800c23c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2220      	movs	r2, #32
 800c274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800c278:	bf00      	nop
 800c27a:	3724      	adds	r7, #36	@ 0x24
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c284:	b480      	push	{r7}
 800c286:	b095      	sub	sp, #84	@ 0x54
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	330c      	adds	r3, #12
 800c292:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c296:	e853 3f00 	ldrex	r3, [r3]
 800c29a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c29e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	330c      	adds	r3, #12
 800c2aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c2ac:	643a      	str	r2, [r7, #64]	@ 0x40
 800c2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2b4:	e841 2300 	strex	r3, r2, [r1]
 800c2b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1e5      	bne.n	800c28c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	3314      	adds	r3, #20
 800c2c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c8:	6a3b      	ldr	r3, [r7, #32]
 800c2ca:	e853 3f00 	ldrex	r3, [r3]
 800c2ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	f023 0301 	bic.w	r3, r3, #1
 800c2d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3314      	adds	r3, #20
 800c2de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2e8:	e841 2300 	strex	r3, r2, [r1]
 800c2ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1e5      	bne.n	800c2c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d119      	bne.n	800c330 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	330c      	adds	r3, #12
 800c302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	e853 3f00 	ldrex	r3, [r3]
 800c30a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	f023 0310 	bic.w	r3, r3, #16
 800c312:	647b      	str	r3, [r7, #68]	@ 0x44
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	330c      	adds	r3, #12
 800c31a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c31c:	61ba      	str	r2, [r7, #24]
 800c31e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c320:	6979      	ldr	r1, [r7, #20]
 800c322:	69ba      	ldr	r2, [r7, #24]
 800c324:	e841 2300 	strex	r3, r2, [r1]
 800c328:	613b      	str	r3, [r7, #16]
   return(result);
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1e5      	bne.n	800c2fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2220      	movs	r2, #32
 800c334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c33e:	bf00      	nop
 800c340:	3754      	adds	r7, #84	@ 0x54
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b084      	sub	sp, #16
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c356:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2200      	movs	r2, #0
 800c362:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f7ff fd0f 	bl	800bd88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c36a:	bf00      	nop
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c372:	b480      	push	{r7}
 800c374:	b085      	sub	sp, #20
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c380:	b2db      	uxtb	r3, r3
 800c382:	2b21      	cmp	r3, #33	@ 0x21
 800c384:	d13e      	bne.n	800c404 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c38e:	d114      	bne.n	800c3ba <UART_Transmit_IT+0x48>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d110      	bne.n	800c3ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a1b      	ldr	r3, [r3, #32]
 800c39c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	881b      	ldrh	r3, [r3, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	1c9a      	adds	r2, r3, #2
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	621a      	str	r2, [r3, #32]
 800c3b8:	e008      	b.n	800c3cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a1b      	ldr	r3, [r3, #32]
 800c3be:	1c59      	adds	r1, r3, #1
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	6211      	str	r1, [r2, #32]
 800c3c4:	781a      	ldrb	r2, [r3, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10f      	bne.n	800c400 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68da      	ldr	r2, [r3, #12]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68da      	ldr	r2, [r3, #12]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c3fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	e000      	b.n	800c406 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c404:	2302      	movs	r3, #2
  }
}
 800c406:	4618      	mov	r0, r3
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b082      	sub	sp, #8
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c428:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2220      	movs	r2, #32
 800c42e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7ff fc80 	bl	800bd38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b08c      	sub	sp, #48	@ 0x30
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c450:	b2db      	uxtb	r3, r3
 800c452:	2b22      	cmp	r3, #34	@ 0x22
 800c454:	f040 80ae 	bne.w	800c5b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c460:	d117      	bne.n	800c492 <UART_Receive_IT+0x50>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d113      	bne.n	800c492 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c472:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c480:	b29a      	uxth	r2, r3
 800c482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c484:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c48a:	1c9a      	adds	r2, r3, #2
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	629a      	str	r2, [r3, #40]	@ 0x28
 800c490:	e026      	b.n	800c4e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c496:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c498:	2300      	movs	r3, #0
 800c49a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4a4:	d007      	beq.n	800c4b6 <UART_Receive_IT+0x74>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10a      	bne.n	800c4c4 <UART_Receive_IT+0x82>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	691b      	ldr	r3, [r3, #16]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d106      	bne.n	800c4c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c0:	701a      	strb	r2, [r3, #0]
 800c4c2:	e008      	b.n	800c4d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4da:	1c5a      	adds	r2, r3, #1
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d15d      	bne.n	800c5b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	68da      	ldr	r2, [r3, #12]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f022 0220 	bic.w	r2, r2, #32
 800c502:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68da      	ldr	r2, [r3, #12]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	695a      	ldr	r2, [r3, #20]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f022 0201 	bic.w	r2, r2, #1
 800c522:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2220      	movs	r2, #32
 800c528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c536:	2b01      	cmp	r3, #1
 800c538:	d135      	bne.n	800c5a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	330c      	adds	r3, #12
 800c546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	e853 3f00 	ldrex	r3, [r3]
 800c54e:	613b      	str	r3, [r7, #16]
   return(result);
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	f023 0310 	bic.w	r3, r3, #16
 800c556:	627b      	str	r3, [r7, #36]	@ 0x24
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	330c      	adds	r3, #12
 800c55e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c560:	623a      	str	r2, [r7, #32]
 800c562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c564:	69f9      	ldr	r1, [r7, #28]
 800c566:	6a3a      	ldr	r2, [r7, #32]
 800c568:	e841 2300 	strex	r3, r2, [r1]
 800c56c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d1e5      	bne.n	800c540 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 0310 	and.w	r3, r3, #16
 800c57e:	2b10      	cmp	r3, #16
 800c580:	d10a      	bne.n	800c598 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c582:	2300      	movs	r3, #0
 800c584:	60fb      	str	r3, [r7, #12]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	60fb      	str	r3, [r7, #12]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	60fb      	str	r3, [r7, #12]
 800c596:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c59c:	4619      	mov	r1, r3
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f7f5 fcc0 	bl	8001f24 <HAL_UARTEx_RxEventCallback>
 800c5a4:	e002      	b.n	800c5ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7ff fbda 	bl	800bd60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	e002      	b.n	800c5b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	e000      	b.n	800c5b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c5b4:	2302      	movs	r3, #2
  }
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3730      	adds	r7, #48	@ 0x30
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
	...

0800c5c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5c4:	b0c0      	sub	sp, #256	@ 0x100
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5dc:	68d9      	ldr	r1, [r3, #12]
 800c5de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	ea40 0301 	orr.w	r3, r0, r1
 800c5e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c5ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5ee:	689a      	ldr	r2, [r3, #8]
 800c5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	431a      	orrs	r2, r3
 800c5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5fc:	695b      	ldr	r3, [r3, #20]
 800c5fe:	431a      	orrs	r2, r3
 800c600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	4313      	orrs	r3, r2
 800c608:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c60c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c618:	f021 010c 	bic.w	r1, r1, #12
 800c61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c626:	430b      	orrs	r3, r1
 800c628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c62a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	695b      	ldr	r3, [r3, #20]
 800c632:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c63a:	6999      	ldr	r1, [r3, #24]
 800c63c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	ea40 0301 	orr.w	r3, r0, r1
 800c646:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	4b8f      	ldr	r3, [pc, #572]	@ (800c88c <UART_SetConfig+0x2cc>)
 800c650:	429a      	cmp	r2, r3
 800c652:	d005      	beq.n	800c660 <UART_SetConfig+0xa0>
 800c654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	4b8d      	ldr	r3, [pc, #564]	@ (800c890 <UART_SetConfig+0x2d0>)
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d104      	bne.n	800c66a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c660:	f7fc fa38 	bl	8008ad4 <HAL_RCC_GetPCLK2Freq>
 800c664:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c668:	e003      	b.n	800c672 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c66a:	f7fc fa1f 	bl	8008aac <HAL_RCC_GetPCLK1Freq>
 800c66e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c676:	69db      	ldr	r3, [r3, #28]
 800c678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c67c:	f040 810c 	bne.w	800c898 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c684:	2200      	movs	r2, #0
 800c686:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c68a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c68e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c692:	4622      	mov	r2, r4
 800c694:	462b      	mov	r3, r5
 800c696:	1891      	adds	r1, r2, r2
 800c698:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c69a:	415b      	adcs	r3, r3
 800c69c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c69e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	eb12 0801 	adds.w	r8, r2, r1
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	eb43 0901 	adc.w	r9, r3, r1
 800c6ae:	f04f 0200 	mov.w	r2, #0
 800c6b2:	f04f 0300 	mov.w	r3, #0
 800c6b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c6ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c6be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c6c2:	4690      	mov	r8, r2
 800c6c4:	4699      	mov	r9, r3
 800c6c6:	4623      	mov	r3, r4
 800c6c8:	eb18 0303 	adds.w	r3, r8, r3
 800c6cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c6d0:	462b      	mov	r3, r5
 800c6d2:	eb49 0303 	adc.w	r3, r9, r3
 800c6d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c6da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c6e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c6ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	18db      	adds	r3, r3, r3
 800c6f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	eb42 0303 	adc.w	r3, r2, r3
 800c6fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800c6fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c704:	f7f3 fdd4 	bl	80002b0 <__aeabi_uldivmod>
 800c708:	4602      	mov	r2, r0
 800c70a:	460b      	mov	r3, r1
 800c70c:	4b61      	ldr	r3, [pc, #388]	@ (800c894 <UART_SetConfig+0x2d4>)
 800c70e:	fba3 2302 	umull	r2, r3, r3, r2
 800c712:	095b      	lsrs	r3, r3, #5
 800c714:	011c      	lsls	r4, r3, #4
 800c716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c71a:	2200      	movs	r2, #0
 800c71c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c720:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c724:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c728:	4642      	mov	r2, r8
 800c72a:	464b      	mov	r3, r9
 800c72c:	1891      	adds	r1, r2, r2
 800c72e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c730:	415b      	adcs	r3, r3
 800c732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c738:	4641      	mov	r1, r8
 800c73a:	eb12 0a01 	adds.w	sl, r2, r1
 800c73e:	4649      	mov	r1, r9
 800c740:	eb43 0b01 	adc.w	fp, r3, r1
 800c744:	f04f 0200 	mov.w	r2, #0
 800c748:	f04f 0300 	mov.w	r3, #0
 800c74c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c750:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c758:	4692      	mov	sl, r2
 800c75a:	469b      	mov	fp, r3
 800c75c:	4643      	mov	r3, r8
 800c75e:	eb1a 0303 	adds.w	r3, sl, r3
 800c762:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c766:	464b      	mov	r3, r9
 800c768:	eb4b 0303 	adc.w	r3, fp, r3
 800c76c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c77c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c780:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c784:	460b      	mov	r3, r1
 800c786:	18db      	adds	r3, r3, r3
 800c788:	643b      	str	r3, [r7, #64]	@ 0x40
 800c78a:	4613      	mov	r3, r2
 800c78c:	eb42 0303 	adc.w	r3, r2, r3
 800c790:	647b      	str	r3, [r7, #68]	@ 0x44
 800c792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c79a:	f7f3 fd89 	bl	80002b0 <__aeabi_uldivmod>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	4611      	mov	r1, r2
 800c7a4:	4b3b      	ldr	r3, [pc, #236]	@ (800c894 <UART_SetConfig+0x2d4>)
 800c7a6:	fba3 2301 	umull	r2, r3, r3, r1
 800c7aa:	095b      	lsrs	r3, r3, #5
 800c7ac:	2264      	movs	r2, #100	@ 0x64
 800c7ae:	fb02 f303 	mul.w	r3, r2, r3
 800c7b2:	1acb      	subs	r3, r1, r3
 800c7b4:	00db      	lsls	r3, r3, #3
 800c7b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c7ba:	4b36      	ldr	r3, [pc, #216]	@ (800c894 <UART_SetConfig+0x2d4>)
 800c7bc:	fba3 2302 	umull	r2, r3, r3, r2
 800c7c0:	095b      	lsrs	r3, r3, #5
 800c7c2:	005b      	lsls	r3, r3, #1
 800c7c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c7c8:	441c      	add	r4, r3
 800c7ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c7d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c7d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c7dc:	4642      	mov	r2, r8
 800c7de:	464b      	mov	r3, r9
 800c7e0:	1891      	adds	r1, r2, r2
 800c7e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c7e4:	415b      	adcs	r3, r3
 800c7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c7ec:	4641      	mov	r1, r8
 800c7ee:	1851      	adds	r1, r2, r1
 800c7f0:	6339      	str	r1, [r7, #48]	@ 0x30
 800c7f2:	4649      	mov	r1, r9
 800c7f4:	414b      	adcs	r3, r1
 800c7f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7f8:	f04f 0200 	mov.w	r2, #0
 800c7fc:	f04f 0300 	mov.w	r3, #0
 800c800:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c804:	4659      	mov	r1, fp
 800c806:	00cb      	lsls	r3, r1, #3
 800c808:	4651      	mov	r1, sl
 800c80a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c80e:	4651      	mov	r1, sl
 800c810:	00ca      	lsls	r2, r1, #3
 800c812:	4610      	mov	r0, r2
 800c814:	4619      	mov	r1, r3
 800c816:	4603      	mov	r3, r0
 800c818:	4642      	mov	r2, r8
 800c81a:	189b      	adds	r3, r3, r2
 800c81c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c820:	464b      	mov	r3, r9
 800c822:	460a      	mov	r2, r1
 800c824:	eb42 0303 	adc.w	r3, r2, r3
 800c828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c838:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c83c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c840:	460b      	mov	r3, r1
 800c842:	18db      	adds	r3, r3, r3
 800c844:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c846:	4613      	mov	r3, r2
 800c848:	eb42 0303 	adc.w	r3, r2, r3
 800c84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c84e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c852:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c856:	f7f3 fd2b 	bl	80002b0 <__aeabi_uldivmod>
 800c85a:	4602      	mov	r2, r0
 800c85c:	460b      	mov	r3, r1
 800c85e:	4b0d      	ldr	r3, [pc, #52]	@ (800c894 <UART_SetConfig+0x2d4>)
 800c860:	fba3 1302 	umull	r1, r3, r3, r2
 800c864:	095b      	lsrs	r3, r3, #5
 800c866:	2164      	movs	r1, #100	@ 0x64
 800c868:	fb01 f303 	mul.w	r3, r1, r3
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	00db      	lsls	r3, r3, #3
 800c870:	3332      	adds	r3, #50	@ 0x32
 800c872:	4a08      	ldr	r2, [pc, #32]	@ (800c894 <UART_SetConfig+0x2d4>)
 800c874:	fba2 2303 	umull	r2, r3, r2, r3
 800c878:	095b      	lsrs	r3, r3, #5
 800c87a:	f003 0207 	and.w	r2, r3, #7
 800c87e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4422      	add	r2, r4
 800c886:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c888:	e106      	b.n	800ca98 <UART_SetConfig+0x4d8>
 800c88a:	bf00      	nop
 800c88c:	40011000 	.word	0x40011000
 800c890:	40011400 	.word	0x40011400
 800c894:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c89c:	2200      	movs	r2, #0
 800c89e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c8a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c8a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c8aa:	4642      	mov	r2, r8
 800c8ac:	464b      	mov	r3, r9
 800c8ae:	1891      	adds	r1, r2, r2
 800c8b0:	6239      	str	r1, [r7, #32]
 800c8b2:	415b      	adcs	r3, r3
 800c8b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c8ba:	4641      	mov	r1, r8
 800c8bc:	1854      	adds	r4, r2, r1
 800c8be:	4649      	mov	r1, r9
 800c8c0:	eb43 0501 	adc.w	r5, r3, r1
 800c8c4:	f04f 0200 	mov.w	r2, #0
 800c8c8:	f04f 0300 	mov.w	r3, #0
 800c8cc:	00eb      	lsls	r3, r5, #3
 800c8ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c8d2:	00e2      	lsls	r2, r4, #3
 800c8d4:	4614      	mov	r4, r2
 800c8d6:	461d      	mov	r5, r3
 800c8d8:	4643      	mov	r3, r8
 800c8da:	18e3      	adds	r3, r4, r3
 800c8dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c8e0:	464b      	mov	r3, r9
 800c8e2:	eb45 0303 	adc.w	r3, r5, r3
 800c8e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c8ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c8f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c8fa:	f04f 0200 	mov.w	r2, #0
 800c8fe:	f04f 0300 	mov.w	r3, #0
 800c902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c906:	4629      	mov	r1, r5
 800c908:	008b      	lsls	r3, r1, #2
 800c90a:	4621      	mov	r1, r4
 800c90c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c910:	4621      	mov	r1, r4
 800c912:	008a      	lsls	r2, r1, #2
 800c914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c918:	f7f3 fcca 	bl	80002b0 <__aeabi_uldivmod>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4b60      	ldr	r3, [pc, #384]	@ (800caa4 <UART_SetConfig+0x4e4>)
 800c922:	fba3 2302 	umull	r2, r3, r3, r2
 800c926:	095b      	lsrs	r3, r3, #5
 800c928:	011c      	lsls	r4, r3, #4
 800c92a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c92e:	2200      	movs	r2, #0
 800c930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c934:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c938:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c93c:	4642      	mov	r2, r8
 800c93e:	464b      	mov	r3, r9
 800c940:	1891      	adds	r1, r2, r2
 800c942:	61b9      	str	r1, [r7, #24]
 800c944:	415b      	adcs	r3, r3
 800c946:	61fb      	str	r3, [r7, #28]
 800c948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c94c:	4641      	mov	r1, r8
 800c94e:	1851      	adds	r1, r2, r1
 800c950:	6139      	str	r1, [r7, #16]
 800c952:	4649      	mov	r1, r9
 800c954:	414b      	adcs	r3, r1
 800c956:	617b      	str	r3, [r7, #20]
 800c958:	f04f 0200 	mov.w	r2, #0
 800c95c:	f04f 0300 	mov.w	r3, #0
 800c960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c964:	4659      	mov	r1, fp
 800c966:	00cb      	lsls	r3, r1, #3
 800c968:	4651      	mov	r1, sl
 800c96a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c96e:	4651      	mov	r1, sl
 800c970:	00ca      	lsls	r2, r1, #3
 800c972:	4610      	mov	r0, r2
 800c974:	4619      	mov	r1, r3
 800c976:	4603      	mov	r3, r0
 800c978:	4642      	mov	r2, r8
 800c97a:	189b      	adds	r3, r3, r2
 800c97c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c980:	464b      	mov	r3, r9
 800c982:	460a      	mov	r2, r1
 800c984:	eb42 0303 	adc.w	r3, r2, r3
 800c988:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c996:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c998:	f04f 0200 	mov.w	r2, #0
 800c99c:	f04f 0300 	mov.w	r3, #0
 800c9a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	008b      	lsls	r3, r1, #2
 800c9a8:	4641      	mov	r1, r8
 800c9aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c9ae:	4641      	mov	r1, r8
 800c9b0:	008a      	lsls	r2, r1, #2
 800c9b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c9b6:	f7f3 fc7b 	bl	80002b0 <__aeabi_uldivmod>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	4611      	mov	r1, r2
 800c9c0:	4b38      	ldr	r3, [pc, #224]	@ (800caa4 <UART_SetConfig+0x4e4>)
 800c9c2:	fba3 2301 	umull	r2, r3, r3, r1
 800c9c6:	095b      	lsrs	r3, r3, #5
 800c9c8:	2264      	movs	r2, #100	@ 0x64
 800c9ca:	fb02 f303 	mul.w	r3, r2, r3
 800c9ce:	1acb      	subs	r3, r1, r3
 800c9d0:	011b      	lsls	r3, r3, #4
 800c9d2:	3332      	adds	r3, #50	@ 0x32
 800c9d4:	4a33      	ldr	r2, [pc, #204]	@ (800caa4 <UART_SetConfig+0x4e4>)
 800c9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9da:	095b      	lsrs	r3, r3, #5
 800c9dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c9e0:	441c      	add	r4, r3
 800c9e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	673b      	str	r3, [r7, #112]	@ 0x70
 800c9ea:	677a      	str	r2, [r7, #116]	@ 0x74
 800c9ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c9f0:	4642      	mov	r2, r8
 800c9f2:	464b      	mov	r3, r9
 800c9f4:	1891      	adds	r1, r2, r2
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	415b      	adcs	r3, r3
 800c9fa:	60fb      	str	r3, [r7, #12]
 800c9fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ca00:	4641      	mov	r1, r8
 800ca02:	1851      	adds	r1, r2, r1
 800ca04:	6039      	str	r1, [r7, #0]
 800ca06:	4649      	mov	r1, r9
 800ca08:	414b      	adcs	r3, r1
 800ca0a:	607b      	str	r3, [r7, #4]
 800ca0c:	f04f 0200 	mov.w	r2, #0
 800ca10:	f04f 0300 	mov.w	r3, #0
 800ca14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ca18:	4659      	mov	r1, fp
 800ca1a:	00cb      	lsls	r3, r1, #3
 800ca1c:	4651      	mov	r1, sl
 800ca1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca22:	4651      	mov	r1, sl
 800ca24:	00ca      	lsls	r2, r1, #3
 800ca26:	4610      	mov	r0, r2
 800ca28:	4619      	mov	r1, r3
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	4642      	mov	r2, r8
 800ca2e:	189b      	adds	r3, r3, r2
 800ca30:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca32:	464b      	mov	r3, r9
 800ca34:	460a      	mov	r2, r1
 800ca36:	eb42 0303 	adc.w	r3, r2, r3
 800ca3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca46:	667a      	str	r2, [r7, #100]	@ 0x64
 800ca48:	f04f 0200 	mov.w	r2, #0
 800ca4c:	f04f 0300 	mov.w	r3, #0
 800ca50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ca54:	4649      	mov	r1, r9
 800ca56:	008b      	lsls	r3, r1, #2
 800ca58:	4641      	mov	r1, r8
 800ca5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca5e:	4641      	mov	r1, r8
 800ca60:	008a      	lsls	r2, r1, #2
 800ca62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ca66:	f7f3 fc23 	bl	80002b0 <__aeabi_uldivmod>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	4b0d      	ldr	r3, [pc, #52]	@ (800caa4 <UART_SetConfig+0x4e4>)
 800ca70:	fba3 1302 	umull	r1, r3, r3, r2
 800ca74:	095b      	lsrs	r3, r3, #5
 800ca76:	2164      	movs	r1, #100	@ 0x64
 800ca78:	fb01 f303 	mul.w	r3, r1, r3
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	011b      	lsls	r3, r3, #4
 800ca80:	3332      	adds	r3, #50	@ 0x32
 800ca82:	4a08      	ldr	r2, [pc, #32]	@ (800caa4 <UART_SetConfig+0x4e4>)
 800ca84:	fba2 2303 	umull	r2, r3, r2, r3
 800ca88:	095b      	lsrs	r3, r3, #5
 800ca8a:	f003 020f 	and.w	r2, r3, #15
 800ca8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4422      	add	r2, r4
 800ca96:	609a      	str	r2, [r3, #8]
}
 800ca98:	bf00      	nop
 800ca9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800caa4:	51eb851f 	.word	0x51eb851f

0800caa8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d123      	bne.n	800cb02 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800cac2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	6851      	ldr	r1, [r2, #4]
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	6892      	ldr	r2, [r2, #8]
 800cace:	4311      	orrs	r1, r2
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	68d2      	ldr	r2, [r2, #12]
 800cad4:	4311      	orrs	r1, r2
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	6912      	ldr	r2, [r2, #16]
 800cada:	4311      	orrs	r1, r2
 800cadc:	683a      	ldr	r2, [r7, #0]
 800cade:	6952      	ldr	r2, [r2, #20]
 800cae0:	4311      	orrs	r1, r2
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	6992      	ldr	r2, [r2, #24]
 800cae6:	4311      	orrs	r1, r2
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	69d2      	ldr	r2, [r2, #28]
 800caec:	4311      	orrs	r1, r2
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	6a12      	ldr	r2, [r2, #32]
 800caf2:	4311      	orrs	r1, r2
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800caf8:	430a      	orrs	r2, r1
 800cafa:	431a      	orrs	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	e028      	b.n	800cb54 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	69d9      	ldr	r1, [r3, #28]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	6a1b      	ldr	r3, [r3, #32]
 800cb12:	4319      	orrs	r1, r3
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb18:	430b      	orrs	r3, r1
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800cb28:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb2c:	683a      	ldr	r2, [r7, #0]
 800cb2e:	6851      	ldr	r1, [r2, #4]
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	6892      	ldr	r2, [r2, #8]
 800cb34:	4311      	orrs	r1, r2
 800cb36:	683a      	ldr	r2, [r7, #0]
 800cb38:	68d2      	ldr	r2, [r2, #12]
 800cb3a:	4311      	orrs	r1, r2
 800cb3c:	683a      	ldr	r2, [r7, #0]
 800cb3e:	6912      	ldr	r2, [r2, #16]
 800cb40:	4311      	orrs	r1, r2
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	6952      	ldr	r2, [r2, #20]
 800cb46:	4311      	orrs	r1, r2
 800cb48:	683a      	ldr	r2, [r7, #0]
 800cb4a:	6992      	ldr	r2, [r2, #24]
 800cb4c:	430a      	orrs	r2, r1
 800cb4e:	431a      	orrs	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	370c      	adds	r7, #12
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b085      	sub	sp, #20
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	60f8      	str	r0, [r7, #12]
 800cb6a:	60b9      	str	r1, [r7, #8]
 800cb6c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d128      	bne.n	800cbc6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	1e59      	subs	r1, r3, #1
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	011b      	lsls	r3, r3, #4
 800cb8a:	4319      	orrs	r1, r3
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	3b01      	subs	r3, #1
 800cb92:	021b      	lsls	r3, r3, #8
 800cb94:	4319      	orrs	r1, r3
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	031b      	lsls	r3, r3, #12
 800cb9e:	4319      	orrs	r1, r3
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	041b      	lsls	r3, r3, #16
 800cba8:	4319      	orrs	r1, r3
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	695b      	ldr	r3, [r3, #20]
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	051b      	lsls	r3, r3, #20
 800cbb2:	4319      	orrs	r1, r3
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	061b      	lsls	r3, r3, #24
 800cbbc:	430b      	orrs	r3, r1
 800cbbe:	431a      	orrs	r2, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	609a      	str	r2, [r3, #8]
 800cbc4:	e02f      	b.n	800cc26 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cbce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	68d2      	ldr	r2, [r2, #12]
 800cbd6:	3a01      	subs	r2, #1
 800cbd8:	0311      	lsls	r1, r2, #12
 800cbda:	68ba      	ldr	r2, [r7, #8]
 800cbdc:	6952      	ldr	r2, [r2, #20]
 800cbde:	3a01      	subs	r2, #1
 800cbe0:	0512      	lsls	r2, r2, #20
 800cbe2:	430a      	orrs	r2, r1
 800cbe4:	431a      	orrs	r2, r3
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	1e59      	subs	r1, r3, #1
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	011b      	lsls	r3, r3, #4
 800cc00:	4319      	orrs	r1, r3
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	3b01      	subs	r3, #1
 800cc08:	021b      	lsls	r3, r3, #8
 800cc0a:	4319      	orrs	r1, r3
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	3b01      	subs	r3, #1
 800cc12:	041b      	lsls	r3, r3, #16
 800cc14:	4319      	orrs	r1, r3
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	699b      	ldr	r3, [r3, #24]
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	061b      	lsls	r3, r3, #24
 800cc1e:	430b      	orrs	r3, r1
 800cc20:	431a      	orrs	r2, r3
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3714      	adds	r7, #20
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cc34:	b084      	sub	sp, #16
 800cc36:	b480      	push	{r7}
 800cc38:	b085      	sub	sp, #20
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	f107 001c 	add.w	r0, r7, #28
 800cc42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cc46:	2300      	movs	r3, #0
 800cc48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cc4a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cc4c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cc4e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800cc52:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800cc56:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800cc5a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800cc5e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800cc6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	431a      	orrs	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	b004      	add	sp, #16
 800cc88:	4770      	bx	lr

0800cc8a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cc8a:	b480      	push	{r7}
 800cc8c:	b083      	sub	sp, #12
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	370c      	adds	r7, #12
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr

0800ccc6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ccc6:	b480      	push	{r7}
 800ccc8:	b083      	sub	sp, #12
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2203      	movs	r2, #3
 800ccd2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	370c      	adds	r7, #12
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cce2:	b480      	push	{r7}
 800cce4:	b083      	sub	sp, #12
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f003 0303 	and.w	r3, r3, #3
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	370c      	adds	r7, #12
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b085      	sub	sp, #20
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cd1c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cd22:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cd28:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cd2a:	68fa      	ldr	r2, [r7, #12]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800cd38:	f023 030f 	bic.w	r3, r3, #15
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	431a      	orrs	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cd52:	b480      	push	{r7}
 800cd54:	b083      	sub	sp, #12
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	b2db      	uxtb	r3, r3
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	3314      	adds	r3, #20
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	4413      	add	r3, r2
 800cd80:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
}  
 800cd86:	4618      	mov	r0, r3
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr

0800cd92 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cd92:	b480      	push	{r7}
 800cd94:	b085      	sub	sp, #20
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
 800cd9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	685a      	ldr	r2, [r3, #4]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cdb8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cdbe:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cdc4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	431a      	orrs	r2, r3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0

}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3714      	adds	r7, #20
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b088      	sub	sp, #32
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
 800cdf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cdf8:	2310      	movs	r3, #16
 800cdfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdfc:	2340      	movs	r3, #64	@ 0x40
 800cdfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce00:	2300      	movs	r3, #0
 800ce02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce0a:	f107 0308 	add.w	r3, r7, #8
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7ff ff74 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ce16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce1a:	2110      	movs	r1, #16
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 f9d7 	bl	800d1d0 <SDMMC_GetCmdResp1>
 800ce22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce24:	69fb      	ldr	r3, [r7, #28]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3720      	adds	r7, #32
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b088      	sub	sp, #32
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ce3c:	2311      	movs	r3, #17
 800ce3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce40:	2340      	movs	r3, #64	@ 0x40
 800ce42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce44:	2300      	movs	r3, #0
 800ce46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce4e:	f107 0308 	add.w	r3, r7, #8
 800ce52:	4619      	mov	r1, r3
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff ff52 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ce5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce5e:	2111      	movs	r1, #17
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 f9b5 	bl	800d1d0 <SDMMC_GetCmdResp1>
 800ce66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce68:	69fb      	ldr	r3, [r7, #28]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3720      	adds	r7, #32
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ce72:	b580      	push	{r7, lr}
 800ce74:	b088      	sub	sp, #32
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
 800ce7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ce80:	2312      	movs	r3, #18
 800ce82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce84:	2340      	movs	r3, #64	@ 0x40
 800ce86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce92:	f107 0308 	add.w	r3, r7, #8
 800ce96:	4619      	mov	r1, r3
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7ff ff30 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ce9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cea2:	2112      	movs	r1, #18
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f993 	bl	800d1d0 <SDMMC_GetCmdResp1>
 800ceaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceac:	69fb      	ldr	r3, [r7, #28]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3720      	adds	r7, #32
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b088      	sub	sp, #32
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cec4:	2318      	movs	r3, #24
 800cec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cec8:	2340      	movs	r3, #64	@ 0x40
 800ceca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cecc:	2300      	movs	r3, #0
 800cece:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ced0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ced4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ced6:	f107 0308 	add.w	r3, r7, #8
 800ceda:	4619      	mov	r1, r3
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff ff0e 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cee6:	2118      	movs	r1, #24
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 f971 	bl	800d1d0 <SDMMC_GetCmdResp1>
 800ceee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cef0:	69fb      	ldr	r3, [r7, #28]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3720      	adds	r7, #32
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b088      	sub	sp, #32
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cf08:	2319      	movs	r3, #25
 800cf0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf0c:	2340      	movs	r3, #64	@ 0x40
 800cf0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf10:	2300      	movs	r3, #0
 800cf12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf1a:	f107 0308 	add.w	r3, r7, #8
 800cf1e:	4619      	mov	r1, r3
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f7ff feec 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cf26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf2a:	2119      	movs	r1, #25
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f94f 	bl	800d1d0 <SDMMC_GetCmdResp1>
 800cf32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf34:	69fb      	ldr	r3, [r7, #28]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3720      	adds	r7, #32
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
	...

0800cf40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b088      	sub	sp, #32
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cf4c:	230c      	movs	r3, #12
 800cf4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf50:	2340      	movs	r3, #64	@ 0x40
 800cf52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf54:	2300      	movs	r3, #0
 800cf56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf5e:	f107 0308 	add.w	r3, r7, #8
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7ff feca 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cf6a:	4a05      	ldr	r2, [pc, #20]	@ (800cf80 <SDMMC_CmdStopTransfer+0x40>)
 800cf6c:	210c      	movs	r1, #12
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 f92e 	bl	800d1d0 <SDMMC_GetCmdResp1>
 800cf74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf76:	69fb      	ldr	r3, [r7, #28]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3720      	adds	r7, #32
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	05f5e100 	.word	0x05f5e100

0800cf84 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b08a      	sub	sp, #40	@ 0x28
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cf94:	2307      	movs	r3, #7
 800cf96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf98:	2340      	movs	r3, #64	@ 0x40
 800cf9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfa4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfa6:	f107 0310 	add.w	r3, r7, #16
 800cfaa:	4619      	mov	r1, r3
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f7ff fea6 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cfb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfb6:	2107      	movs	r1, #7
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 f909 	bl	800d1d0 <SDMMC_GetCmdResp1>
 800cfbe:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3728      	adds	r7, #40	@ 0x28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b088      	sub	sp, #32
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfe6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfe8:	f107 0308 	add.w	r3, r7, #8
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7ff fe85 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 fb23 	bl	800d640 <SDMMC_GetCmdError>
 800cffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cffc:	69fb      	ldr	r3, [r7, #28]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3720      	adds	r7, #32
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b088      	sub	sp, #32
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d00e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d014:	2308      	movs	r3, #8
 800d016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d018:	2340      	movs	r3, #64	@ 0x40
 800d01a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d01c:	2300      	movs	r3, #0
 800d01e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d020:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d024:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d026:	f107 0308 	add.w	r3, r7, #8
 800d02a:	4619      	mov	r1, r3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff fe66 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 fab6 	bl	800d5a4 <SDMMC_GetCmdResp7>
 800d038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d03a:	69fb      	ldr	r3, [r7, #28]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3720      	adds	r7, #32
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b088      	sub	sp, #32
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d052:	2337      	movs	r3, #55	@ 0x37
 800d054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d056:	2340      	movs	r3, #64	@ 0x40
 800d058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d05a:	2300      	movs	r3, #0
 800d05c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d05e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d062:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d064:	f107 0308 	add.w	r3, r7, #8
 800d068:	4619      	mov	r1, r3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7ff fe47 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d070:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d074:	2137      	movs	r1, #55	@ 0x37
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f8aa 	bl	800d1d0 <SDMMC_GetCmdResp1>
 800d07c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d07e:	69fb      	ldr	r3, [r7, #28]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3720      	adds	r7, #32
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b088      	sub	sp, #32
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d098:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d09c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d09e:	2329      	movs	r3, #41	@ 0x29
 800d0a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0a2:	2340      	movs	r3, #64	@ 0x40
 800d0a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0b0:	f107 0308 	add.w	r3, r7, #8
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7ff fe21 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 f9bd 	bl	800d43c <SDMMC_GetCmdResp3>
 800d0c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0c4:	69fb      	ldr	r3, [r7, #28]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3720      	adds	r7, #32
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b088      	sub	sp, #32
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d0da:	2302      	movs	r3, #2
 800d0dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d0de:	23c0      	movs	r3, #192	@ 0xc0
 800d0e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0ec:	f107 0308 	add.w	r3, r7, #8
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fe03 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 f957 	bl	800d3ac <SDMMC_GetCmdResp2>
 800d0fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d100:	69fb      	ldr	r3, [r7, #28]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3720      	adds	r7, #32
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b088      	sub	sp, #32
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d118:	2309      	movs	r3, #9
 800d11a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d11c:	23c0      	movs	r3, #192	@ 0xc0
 800d11e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d120:	2300      	movs	r3, #0
 800d122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d128:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d12a:	f107 0308 	add.w	r3, r7, #8
 800d12e:	4619      	mov	r1, r3
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7ff fde4 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 f938 	bl	800d3ac <SDMMC_GetCmdResp2>
 800d13c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d13e:	69fb      	ldr	r3, [r7, #28]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3720      	adds	r7, #32
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b088      	sub	sp, #32
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d152:	2300      	movs	r3, #0
 800d154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d156:	2303      	movs	r3, #3
 800d158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d15a:	2340      	movs	r3, #64	@ 0x40
 800d15c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d15e:	2300      	movs	r3, #0
 800d160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d162:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d166:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d168:	f107 0308 	add.w	r3, r7, #8
 800d16c:	4619      	mov	r1, r3
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7ff fdc5 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	2103      	movs	r1, #3
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f99d 	bl	800d4b8 <SDMMC_GetCmdResp6>
 800d17e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d180:	69fb      	ldr	r3, [r7, #28]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3720      	adds	r7, #32
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b088      	sub	sp, #32
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d198:	230d      	movs	r3, #13
 800d19a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d19c:	2340      	movs	r3, #64	@ 0x40
 800d19e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1aa:	f107 0308 	add.w	r3, r7, #8
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f7ff fda4 	bl	800ccfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d1b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1ba:	210d      	movs	r1, #13
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 f807 	bl	800d1d0 <SDMMC_GetCmdResp1>
 800d1c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1c4:	69fb      	ldr	r3, [r7, #28]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3720      	adds	r7, #32
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
	...

0800d1d0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b088      	sub	sp, #32
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	460b      	mov	r3, r1
 800d1da:	607a      	str	r2, [r7, #4]
 800d1dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d1de:	4b70      	ldr	r3, [pc, #448]	@ (800d3a0 <SDMMC_GetCmdResp1+0x1d0>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a70      	ldr	r2, [pc, #448]	@ (800d3a4 <SDMMC_GetCmdResp1+0x1d4>)
 800d1e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d1e8:	0a5a      	lsrs	r2, r3, #9
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	fb02 f303 	mul.w	r3, r2, r3
 800d1f0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	1e5a      	subs	r2, r3, #1
 800d1f6:	61fa      	str	r2, [r7, #28]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d102      	bne.n	800d202 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d200:	e0c9      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d206:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d0ef      	beq.n	800d1f2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d1ea      	bne.n	800d1f2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d220:	f003 0304 	and.w	r3, r3, #4
 800d224:	2b00      	cmp	r3, #0
 800d226:	d004      	beq.n	800d232 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2204      	movs	r2, #4
 800d22c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d22e:	2304      	movs	r3, #4
 800d230:	e0b1      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d236:	f003 0301 	and.w	r3, r3, #1
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d004      	beq.n	800d248 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2201      	movs	r2, #1
 800d242:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d244:	2301      	movs	r3, #1
 800d246:	e0a6      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	22c5      	movs	r2, #197	@ 0xc5
 800d24c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	f7ff fd7f 	bl	800cd52 <SDIO_GetCommandResponse>
 800d254:	4603      	mov	r3, r0
 800d256:	461a      	mov	r2, r3
 800d258:	7afb      	ldrb	r3, [r7, #11]
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d001      	beq.n	800d262 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d25e:	2301      	movs	r3, #1
 800d260:	e099      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d262:	2100      	movs	r1, #0
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f7ff fd81 	bl	800cd6c <SDIO_GetResponse>
 800d26a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d26c:	697a      	ldr	r2, [r7, #20]
 800d26e:	4b4e      	ldr	r3, [pc, #312]	@ (800d3a8 <SDMMC_GetCmdResp1+0x1d8>)
 800d270:	4013      	ands	r3, r2
 800d272:	2b00      	cmp	r3, #0
 800d274:	d101      	bne.n	800d27a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d276:	2300      	movs	r3, #0
 800d278:	e08d      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	da02      	bge.n	800d286 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d280:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d284:	e087      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d001      	beq.n	800d294 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d290:	2340      	movs	r3, #64	@ 0x40
 800d292:	e080      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d001      	beq.n	800d2a2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d29e:	2380      	movs	r3, #128	@ 0x80
 800d2a0:	e079      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d2ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2b0:	e071      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d2bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d2c0:	e069      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d2cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2d0:	e061      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d2dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d2e0:	e059      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d002      	beq.n	800d2f2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d2ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2f0:	e051      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d002      	beq.n	800d302 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d2fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d300:	e049      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d002      	beq.n	800d312 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d30c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d310:	e041      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d002      	beq.n	800d322 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d31c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d320:	e039      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d002      	beq.n	800d332 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d32c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d330:	e031      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d002      	beq.n	800d342 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d33c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d340:	e029      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d34c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d350:	e021      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d35c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d360:	e019      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d36c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d370:	e011      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d002      	beq.n	800d382 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d37c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d380:	e009      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	f003 0308 	and.w	r3, r3, #8
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d002      	beq.n	800d392 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d38c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d390:	e001      	b.n	800d396 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d392:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d396:	4618      	mov	r0, r3
 800d398:	3720      	adds	r7, #32
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	20000000 	.word	0x20000000
 800d3a4:	10624dd3 	.word	0x10624dd3
 800d3a8:	fdffe008 	.word	0xfdffe008

0800d3ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3b4:	4b1f      	ldr	r3, [pc, #124]	@ (800d434 <SDMMC_GetCmdResp2+0x88>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a1f      	ldr	r2, [pc, #124]	@ (800d438 <SDMMC_GetCmdResp2+0x8c>)
 800d3ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d3be:	0a5b      	lsrs	r3, r3, #9
 800d3c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3c4:	fb02 f303 	mul.w	r3, r2, r3
 800d3c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	1e5a      	subs	r2, r3, #1
 800d3ce:	60fa      	str	r2, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d102      	bne.n	800d3da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3d8:	e026      	b.n	800d428 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d0ef      	beq.n	800d3ca <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1ea      	bne.n	800d3ca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3f8:	f003 0304 	and.w	r3, r3, #4
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d004      	beq.n	800d40a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2204      	movs	r2, #4
 800d404:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d406:	2304      	movs	r3, #4
 800d408:	e00e      	b.n	800d428 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d40e:	f003 0301 	and.w	r3, r3, #1
 800d412:	2b00      	cmp	r3, #0
 800d414:	d004      	beq.n	800d420 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d41c:	2301      	movs	r3, #1
 800d41e:	e003      	b.n	800d428 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	22c5      	movs	r2, #197	@ 0xc5
 800d424:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d426:	2300      	movs	r3, #0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3714      	adds	r7, #20
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr
 800d434:	20000000 	.word	0x20000000
 800d438:	10624dd3 	.word	0x10624dd3

0800d43c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d444:	4b1a      	ldr	r3, [pc, #104]	@ (800d4b0 <SDMMC_GetCmdResp3+0x74>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a1a      	ldr	r2, [pc, #104]	@ (800d4b4 <SDMMC_GetCmdResp3+0x78>)
 800d44a:	fba2 2303 	umull	r2, r3, r2, r3
 800d44e:	0a5b      	lsrs	r3, r3, #9
 800d450:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d454:	fb02 f303 	mul.w	r3, r2, r3
 800d458:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	1e5a      	subs	r2, r3, #1
 800d45e:	60fa      	str	r2, [r7, #12]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d102      	bne.n	800d46a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d464:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d468:	e01b      	b.n	800d4a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d46e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d476:	2b00      	cmp	r3, #0
 800d478:	d0ef      	beq.n	800d45a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1ea      	bne.n	800d45a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d488:	f003 0304 	and.w	r3, r3, #4
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d004      	beq.n	800d49a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2204      	movs	r2, #4
 800d494:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d496:	2304      	movs	r3, #4
 800d498:	e003      	b.n	800d4a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	22c5      	movs	r2, #197	@ 0xc5
 800d49e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3714      	adds	r7, #20
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	20000000 	.word	0x20000000
 800d4b4:	10624dd3 	.word	0x10624dd3

0800d4b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b088      	sub	sp, #32
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	607a      	str	r2, [r7, #4]
 800d4c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d4c6:	4b35      	ldr	r3, [pc, #212]	@ (800d59c <SDMMC_GetCmdResp6+0xe4>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a35      	ldr	r2, [pc, #212]	@ (800d5a0 <SDMMC_GetCmdResp6+0xe8>)
 800d4cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d0:	0a5b      	lsrs	r3, r3, #9
 800d4d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4d6:	fb02 f303 	mul.w	r3, r2, r3
 800d4da:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	1e5a      	subs	r2, r3, #1
 800d4e0:	61fa      	str	r2, [r7, #28]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d102      	bne.n	800d4ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d4ea:	e052      	b.n	800d592 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4f0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d0ef      	beq.n	800d4dc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1ea      	bne.n	800d4dc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d50a:	f003 0304 	and.w	r3, r3, #4
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d004      	beq.n	800d51c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2204      	movs	r2, #4
 800d516:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d518:	2304      	movs	r3, #4
 800d51a:	e03a      	b.n	800d592 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d520:	f003 0301 	and.w	r3, r3, #1
 800d524:	2b00      	cmp	r3, #0
 800d526:	d004      	beq.n	800d532 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2201      	movs	r2, #1
 800d52c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d52e:	2301      	movs	r3, #1
 800d530:	e02f      	b.n	800d592 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f7ff fc0d 	bl	800cd52 <SDIO_GetCommandResponse>
 800d538:	4603      	mov	r3, r0
 800d53a:	461a      	mov	r2, r3
 800d53c:	7afb      	ldrb	r3, [r7, #11]
 800d53e:	4293      	cmp	r3, r2
 800d540:	d001      	beq.n	800d546 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d542:	2301      	movs	r3, #1
 800d544:	e025      	b.n	800d592 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	22c5      	movs	r2, #197	@ 0xc5
 800d54a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d54c:	2100      	movs	r1, #0
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f7ff fc0c 	bl	800cd6c <SDIO_GetResponse>
 800d554:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d106      	bne.n	800d56e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	0c1b      	lsrs	r3, r3, #16
 800d564:	b29a      	uxth	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d56a:	2300      	movs	r3, #0
 800d56c:	e011      	b.n	800d592 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d002      	beq.n	800d57e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d578:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d57c:	e009      	b.n	800d592 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d58c:	e001      	b.n	800d592 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d58e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d592:	4618      	mov	r0, r3
 800d594:	3720      	adds	r7, #32
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	20000000 	.word	0x20000000
 800d5a0:	10624dd3 	.word	0x10624dd3

0800d5a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d5ac:	4b22      	ldr	r3, [pc, #136]	@ (800d638 <SDMMC_GetCmdResp7+0x94>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a22      	ldr	r2, [pc, #136]	@ (800d63c <SDMMC_GetCmdResp7+0x98>)
 800d5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5b6:	0a5b      	lsrs	r3, r3, #9
 800d5b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5bc:	fb02 f303 	mul.w	r3, r2, r3
 800d5c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	1e5a      	subs	r2, r3, #1
 800d5c6:	60fa      	str	r2, [r7, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d102      	bne.n	800d5d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d5cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d5d0:	e02c      	b.n	800d62c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d0ef      	beq.n	800d5c2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1ea      	bne.n	800d5c2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5f0:	f003 0304 	and.w	r3, r3, #4
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d004      	beq.n	800d602 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2204      	movs	r2, #4
 800d5fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5fe:	2304      	movs	r3, #4
 800d600:	e014      	b.n	800d62c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d606:	f003 0301 	and.w	r3, r3, #1
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d004      	beq.n	800d618 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2201      	movs	r2, #1
 800d612:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d614:	2301      	movs	r3, #1
 800d616:	e009      	b.n	800d62c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d61c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d620:	2b00      	cmp	r3, #0
 800d622:	d002      	beq.n	800d62a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2240      	movs	r2, #64	@ 0x40
 800d628:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d62a:	2300      	movs	r3, #0
  
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3714      	adds	r7, #20
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	20000000 	.word	0x20000000
 800d63c:	10624dd3 	.word	0x10624dd3

0800d640 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d648:	4b11      	ldr	r3, [pc, #68]	@ (800d690 <SDMMC_GetCmdError+0x50>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a11      	ldr	r2, [pc, #68]	@ (800d694 <SDMMC_GetCmdError+0x54>)
 800d64e:	fba2 2303 	umull	r2, r3, r2, r3
 800d652:	0a5b      	lsrs	r3, r3, #9
 800d654:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d658:	fb02 f303 	mul.w	r3, r2, r3
 800d65c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	1e5a      	subs	r2, r3, #1
 800d662:	60fa      	str	r2, [r7, #12]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d102      	bne.n	800d66e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d668:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d66c:	e009      	b.n	800d682 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d676:	2b00      	cmp	r3, #0
 800d678:	d0f1      	beq.n	800d65e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	22c5      	movs	r2, #197	@ 0xc5
 800d67e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	3714      	adds	r7, #20
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	20000000 	.word	0x20000000
 800d694:	10624dd3 	.word	0x10624dd3

0800d698 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d698:	b084      	sub	sp, #16
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b084      	sub	sp, #16
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
 800d6a2:	f107 001c 	add.w	r0, r7, #28
 800d6a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d6aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d123      	bne.n	800d6fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800d6c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d6da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d105      	bne.n	800d6ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 f9dc 	bl	800daac <USB_CoreReset>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73fb      	strb	r3, [r7, #15]
 800d6f8:	e01b      	b.n	800d732 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 f9d0 	bl	800daac <USB_CoreReset>
 800d70c:	4603      	mov	r3, r0
 800d70e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d710:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d714:	2b00      	cmp	r3, #0
 800d716:	d106      	bne.n	800d726 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d71c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	639a      	str	r2, [r3, #56]	@ 0x38
 800d724:	e005      	b.n	800d732 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d72a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d732:	7fbb      	ldrb	r3, [r7, #30]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d10b      	bne.n	800d750 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	f043 0206 	orr.w	r2, r3, #6
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	f043 0220 	orr.w	r2, r3, #32
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d750:	7bfb      	ldrb	r3, [r7, #15]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d75c:	b004      	add	sp, #16
 800d75e:	4770      	bx	lr

0800d760 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	f043 0201 	orr.w	r2, r3, #1
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d782:	b480      	push	{r7}
 800d784:	b083      	sub	sp, #12
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	689b      	ldr	r3, [r3, #8]
 800d78e:	f023 0201 	bic.w	r2, r3, #1
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d796:	2300      	movs	r3, #0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d7c0:	78fb      	ldrb	r3, [r7, #3]
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d115      	bne.n	800d7f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d7d2:	200a      	movs	r0, #10
 800d7d4:	f7f6 f97e 	bl	8003ad4 <HAL_Delay>
      ms += 10U;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	330a      	adds	r3, #10
 800d7dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 f956 	bl	800da90 <USB_GetMode>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d01e      	beq.n	800d828 <USB_SetCurrentMode+0x84>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2bc7      	cmp	r3, #199	@ 0xc7
 800d7ee:	d9f0      	bls.n	800d7d2 <USB_SetCurrentMode+0x2e>
 800d7f0:	e01a      	b.n	800d828 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d7f2:	78fb      	ldrb	r3, [r7, #3]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d115      	bne.n	800d824 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d804:	200a      	movs	r0, #10
 800d806:	f7f6 f965 	bl	8003ad4 <HAL_Delay>
      ms += 10U;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	330a      	adds	r3, #10
 800d80e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 f93d 	bl	800da90 <USB_GetMode>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d005      	beq.n	800d828 <USB_SetCurrentMode+0x84>
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2bc7      	cmp	r3, #199	@ 0xc7
 800d820:	d9f0      	bls.n	800d804 <USB_SetCurrentMode+0x60>
 800d822:	e001      	b.n	800d828 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d824:	2301      	movs	r3, #1
 800d826:	e005      	b.n	800d834 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2bc8      	cmp	r3, #200	@ 0xc8
 800d82c:	d101      	bne.n	800d832 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	e000      	b.n	800d834 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b085      	sub	sp, #20
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d846:	2300      	movs	r3, #0
 800d848:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	3301      	adds	r3, #1
 800d84e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d856:	d901      	bls.n	800d85c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d858:	2303      	movs	r3, #3
 800d85a:	e01b      	b.n	800d894 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	691b      	ldr	r3, [r3, #16]
 800d860:	2b00      	cmp	r3, #0
 800d862:	daf2      	bge.n	800d84a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d864:	2300      	movs	r3, #0
 800d866:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	019b      	lsls	r3, r3, #6
 800d86c:	f043 0220 	orr.w	r2, r3, #32
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	3301      	adds	r3, #1
 800d878:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d880:	d901      	bls.n	800d886 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d882:	2303      	movs	r3, #3
 800d884:	e006      	b.n	800d894 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	f003 0320 	and.w	r3, r3, #32
 800d88e:	2b20      	cmp	r3, #32
 800d890:	d0f0      	beq.n	800d874 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d892:	2300      	movs	r3, #0
}
 800d894:	4618      	mov	r0, r3
 800d896:	3714      	adds	r7, #20
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8b8:	d901      	bls.n	800d8be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	e018      	b.n	800d8f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	daf2      	bge.n	800d8ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2210      	movs	r2, #16
 800d8ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8dc:	d901      	bls.n	800d8e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	e006      	b.n	800d8f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	f003 0310 	and.w	r3, r3, #16
 800d8ea:	2b10      	cmp	r3, #16
 800d8ec:	d0f0      	beq.n	800d8d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d8ee:	2300      	movs	r3, #0
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3714      	adds	r7, #20
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b089      	sub	sp, #36	@ 0x24
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	4611      	mov	r1, r2
 800d908:	461a      	mov	r2, r3
 800d90a:	460b      	mov	r3, r1
 800d90c:	71fb      	strb	r3, [r7, #7]
 800d90e:	4613      	mov	r3, r2
 800d910:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d91a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d123      	bne.n	800d96a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d922:	88bb      	ldrh	r3, [r7, #4]
 800d924:	3303      	adds	r3, #3
 800d926:	089b      	lsrs	r3, r3, #2
 800d928:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d92a:	2300      	movs	r3, #0
 800d92c:	61bb      	str	r3, [r7, #24]
 800d92e:	e018      	b.n	800d962 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d930:	79fb      	ldrb	r3, [r7, #7]
 800d932:	031a      	lsls	r2, r3, #12
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	4413      	add	r3, r2
 800d938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d93c:	461a      	mov	r2, r3
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	3301      	adds	r3, #1
 800d948:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	3301      	adds	r3, #1
 800d94e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	3301      	adds	r3, #1
 800d954:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	3301      	adds	r3, #1
 800d95a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	3301      	adds	r3, #1
 800d960:	61bb      	str	r3, [r7, #24]
 800d962:	69ba      	ldr	r2, [r7, #24]
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	429a      	cmp	r2, r3
 800d968:	d3e2      	bcc.n	800d930 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d96a:	2300      	movs	r3, #0
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3724      	adds	r7, #36	@ 0x24
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d978:	b480      	push	{r7}
 800d97a:	b08b      	sub	sp, #44	@ 0x2c
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	4613      	mov	r3, r2
 800d984:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d98e:	88fb      	ldrh	r3, [r7, #6]
 800d990:	089b      	lsrs	r3, r3, #2
 800d992:	b29b      	uxth	r3, r3
 800d994:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d996:	88fb      	ldrh	r3, [r7, #6]
 800d998:	f003 0303 	and.w	r3, r3, #3
 800d99c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d99e:	2300      	movs	r3, #0
 800d9a0:	623b      	str	r3, [r7, #32]
 800d9a2:	e014      	b.n	800d9ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ae:	601a      	str	r2, [r3, #0]
    pDest++;
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9be:	3301      	adds	r3, #1
 800d9c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d9c8:	6a3b      	ldr	r3, [r7, #32]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	623b      	str	r3, [r7, #32]
 800d9ce:	6a3a      	ldr	r2, [r7, #32]
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d3e6      	bcc.n	800d9a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d9d6:	8bfb      	ldrh	r3, [r7, #30]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d01e      	beq.n	800da1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	f107 0310 	add.w	r3, r7, #16
 800d9ec:	6812      	ldr	r2, [r2, #0]
 800d9ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d9f0:	693a      	ldr	r2, [r7, #16]
 800d9f2:	6a3b      	ldr	r3, [r7, #32]
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	00db      	lsls	r3, r3, #3
 800d9f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da00:	701a      	strb	r2, [r3, #0]
      i++;
 800da02:	6a3b      	ldr	r3, [r7, #32]
 800da04:	3301      	adds	r3, #1
 800da06:	623b      	str	r3, [r7, #32]
      pDest++;
 800da08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da0a:	3301      	adds	r3, #1
 800da0c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800da0e:	8bfb      	ldrh	r3, [r7, #30]
 800da10:	3b01      	subs	r3, #1
 800da12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800da14:	8bfb      	ldrh	r3, [r7, #30]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1ea      	bne.n	800d9f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800da1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	372c      	adds	r7, #44	@ 0x2c
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	695b      	ldr	r3, [r3, #20]
 800da34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	699b      	ldr	r3, [r3, #24]
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	4013      	ands	r3, r2
 800da3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800da40:	68fb      	ldr	r3, [r7, #12]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3714      	adds	r7, #20
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800da4e:	b480      	push	{r7}
 800da50:	b085      	sub	sp, #20
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
 800da56:	460b      	mov	r3, r1
 800da58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800da5e:	78fb      	ldrb	r3, [r7, #3]
 800da60:	015a      	lsls	r2, r3, #5
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	4413      	add	r3, r2
 800da66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800da6e:	78fb      	ldrb	r3, [r7, #3]
 800da70:	015a      	lsls	r2, r3, #5
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	4413      	add	r3, r2
 800da76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	4013      	ands	r3, r2
 800da80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da82:	68bb      	ldr	r3, [r7, #8]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	695b      	ldr	r3, [r3, #20]
 800da9c:	f003 0301 	and.w	r3, r3, #1
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dab4:	2300      	movs	r3, #0
 800dab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	3301      	adds	r3, #1
 800dabc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dac4:	d901      	bls.n	800daca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dac6:	2303      	movs	r3, #3
 800dac8:	e01b      	b.n	800db02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	691b      	ldr	r3, [r3, #16]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	daf2      	bge.n	800dab8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dad2:	2300      	movs	r3, #0
 800dad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	691b      	ldr	r3, [r3, #16]
 800dada:	f043 0201 	orr.w	r2, r3, #1
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	3301      	adds	r3, #1
 800dae6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800daee:	d901      	bls.n	800daf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800daf0:	2303      	movs	r3, #3
 800daf2:	e006      	b.n	800db02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	691b      	ldr	r3, [r3, #16]
 800daf8:	f003 0301 	and.w	r3, r3, #1
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d0f0      	beq.n	800dae2 <USB_CoreReset+0x36>

  return HAL_OK;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3714      	adds	r7, #20
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
	...

0800db10 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db10:	b084      	sub	sp, #16
 800db12:	b580      	push	{r7, lr}
 800db14:	b086      	sub	sp, #24
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800db1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db30:	461a      	mov	r2, r3
 800db32:	2300      	movs	r3, #0
 800db34:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db3a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d119      	bne.n	800db82 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800db4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db52:	2b01      	cmp	r3, #1
 800db54:	d10a      	bne.n	800db6c <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800db64:	f043 0304 	orr.w	r3, r3, #4
 800db68:	6013      	str	r3, [r2, #0]
 800db6a:	e014      	b.n	800db96 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800db7a:	f023 0304 	bic.w	r3, r3, #4
 800db7e:	6013      	str	r3, [r2, #0]
 800db80:	e009      	b.n	800db96 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	68fa      	ldr	r2, [r7, #12]
 800db8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800db90:	f023 0304 	bic.w	r3, r3, #4
 800db94:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800db96:	2110      	movs	r1, #16
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f7ff fe4f 	bl	800d83c <USB_FlushTxFifo>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d001      	beq.n	800dba8 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800dba4:	2301      	movs	r3, #1
 800dba6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7ff fe79 	bl	800d8a0 <USB_FlushRxFifo>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d001      	beq.n	800dbb8 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800dbb8:	2300      	movs	r3, #0
 800dbba:	613b      	str	r3, [r7, #16]
 800dbbc:	e015      	b.n	800dbea <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	015a      	lsls	r2, r3, #5
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f04f 33ff 	mov.w	r3, #4294967295
 800dbd0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	015a      	lsls	r2, r3, #5
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	4413      	add	r3, r2
 800dbda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbde:	461a      	mov	r2, r3
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	613b      	str	r3, [r7, #16]
 800dbea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dbee:	461a      	mov	r2, r3
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d3e3      	bcc.n	800dbbe <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800dc02:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4a18      	ldr	r2, [pc, #96]	@ (800dc68 <USB_HostInit+0x158>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d10b      	bne.n	800dc24 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc12:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4a15      	ldr	r2, [pc, #84]	@ (800dc6c <USB_HostInit+0x15c>)
 800dc18:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a14      	ldr	r2, [pc, #80]	@ (800dc70 <USB_HostInit+0x160>)
 800dc1e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800dc22:	e009      	b.n	800dc38 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2280      	movs	r2, #128	@ 0x80
 800dc28:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a11      	ldr	r2, [pc, #68]	@ (800dc74 <USB_HostInit+0x164>)
 800dc2e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4a11      	ldr	r2, [pc, #68]	@ (800dc78 <USB_HostInit+0x168>)
 800dc34:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dc38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d105      	bne.n	800dc4c <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	699b      	ldr	r3, [r3, #24]
 800dc44:	f043 0210 	orr.w	r2, r3, #16
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	699a      	ldr	r2, [r3, #24]
 800dc50:	4b0a      	ldr	r3, [pc, #40]	@ (800dc7c <USB_HostInit+0x16c>)
 800dc52:	4313      	orrs	r3, r2
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800dc58:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3718      	adds	r7, #24
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc64:	b004      	add	sp, #16
 800dc66:	4770      	bx	lr
 800dc68:	40040000 	.word	0x40040000
 800dc6c:	01000200 	.word	0x01000200
 800dc70:	00e00300 	.word	0x00e00300
 800dc74:	00600080 	.word	0x00600080
 800dc78:	004000e0 	.word	0x004000e0
 800dc7c:	a3200008 	.word	0xa3200008

0800dc80 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dc9e:	f023 0303 	bic.w	r3, r3, #3
 800dca2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	78fb      	ldrb	r3, [r7, #3]
 800dcae:	f003 0303 	and.w	r3, r3, #3
 800dcb2:	68f9      	ldr	r1, [r7, #12]
 800dcb4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800dcbc:	78fb      	ldrb	r3, [r7, #3]
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d107      	bne.n	800dcd2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dcc8:	461a      	mov	r2, r3
 800dcca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800dcce:	6053      	str	r3, [r2, #4]
 800dcd0:	e00c      	b.n	800dcec <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800dcd2:	78fb      	ldrb	r3, [r7, #3]
 800dcd4:	2b02      	cmp	r3, #2
 800dcd6:	d107      	bne.n	800dce8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dcde:	461a      	mov	r2, r3
 800dce0:	f241 7370 	movw	r3, #6000	@ 0x1770
 800dce4:	6053      	str	r3, [r2, #4]
 800dce6:	e001      	b.n	800dcec <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800dce8:	2301      	movs	r3, #1
 800dcea:	e000      	b.n	800dcee <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3714      	adds	r7, #20
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr

0800dcfa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b084      	sub	sp, #16
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800dd06:	2300      	movs	r3, #0
 800dd08:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800dd1a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800dd24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd28:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800dd2a:	2064      	movs	r0, #100	@ 0x64
 800dd2c:	f7f5 fed2 	bl	8003ad4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800dd38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd3c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800dd3e:	200a      	movs	r0, #10
 800dd40:	f7f5 fec8 	bl	8003ad4 <HAL_Delay>

  return HAL_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3710      	adds	r7, #16
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800dd4e:	b480      	push	{r7}
 800dd50:	b085      	sub	sp, #20
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
 800dd56:	460b      	mov	r3, r1
 800dd58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800dd72:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d109      	bne.n	800dd92 <USB_DriveVbus+0x44>
 800dd7e:	78fb      	ldrb	r3, [r7, #3]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d106      	bne.n	800dd92 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800dd8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dd90:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dd98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd9c:	d109      	bne.n	800ddb2 <USB_DriveVbus+0x64>
 800dd9e:	78fb      	ldrb	r3, [r7, #3]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d106      	bne.n	800ddb2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ddac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ddb0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ddb2:	2300      	movs	r3, #0
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3714      	adds	r7, #20
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	0c5b      	lsrs	r3, r3, #17
 800ddde:	f003 0303 	and.w	r3, r3, #3
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3714      	adds	r7, #20
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr

0800ddee <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800ddee:	b480      	push	{r7}
 800ddf0:	b085      	sub	sp, #20
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	b29b      	uxth	r3, r3
}
 800de04:	4618      	mov	r0, r3
 800de06:	3714      	adds	r7, #20
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b088      	sub	sp, #32
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	4608      	mov	r0, r1
 800de1a:	4611      	mov	r1, r2
 800de1c:	461a      	mov	r2, r3
 800de1e:	4603      	mov	r3, r0
 800de20:	70fb      	strb	r3, [r7, #3]
 800de22:	460b      	mov	r3, r1
 800de24:	70bb      	strb	r3, [r7, #2]
 800de26:	4613      	mov	r3, r2
 800de28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800de32:	78fb      	ldrb	r3, [r7, #3]
 800de34:	015a      	lsls	r2, r3, #5
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	4413      	add	r3, r2
 800de3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de3e:	461a      	mov	r2, r3
 800de40:	f04f 33ff 	mov.w	r3, #4294967295
 800de44:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800de46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800de4a:	2b03      	cmp	r3, #3
 800de4c:	d87c      	bhi.n	800df48 <USB_HC_Init+0x138>
 800de4e:	a201      	add	r2, pc, #4	@ (adr r2, 800de54 <USB_HC_Init+0x44>)
 800de50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de54:	0800de65 	.word	0x0800de65
 800de58:	0800df0b 	.word	0x0800df0b
 800de5c:	0800de65 	.word	0x0800de65
 800de60:	0800decd 	.word	0x0800decd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800de64:	78fb      	ldrb	r3, [r7, #3]
 800de66:	015a      	lsls	r2, r3, #5
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	4413      	add	r3, r2
 800de6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de70:	461a      	mov	r2, r3
 800de72:	f240 439d 	movw	r3, #1181	@ 0x49d
 800de76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800de78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	da10      	bge.n	800dea2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800de80:	78fb      	ldrb	r3, [r7, #3]
 800de82:	015a      	lsls	r2, r3, #5
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	4413      	add	r3, r2
 800de88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	78fa      	ldrb	r2, [r7, #3]
 800de90:	0151      	lsls	r1, r2, #5
 800de92:	693a      	ldr	r2, [r7, #16]
 800de94:	440a      	add	r2, r1
 800de96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800de9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de9e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800dea0:	e055      	b.n	800df4e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4a6f      	ldr	r2, [pc, #444]	@ (800e064 <USB_HC_Init+0x254>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d151      	bne.n	800df4e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800deaa:	78fb      	ldrb	r3, [r7, #3]
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	78fa      	ldrb	r2, [r7, #3]
 800deba:	0151      	lsls	r1, r2, #5
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	440a      	add	r2, r1
 800dec0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dec4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800dec8:	60d3      	str	r3, [r2, #12]
      break;
 800deca:	e040      	b.n	800df4e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800decc:	78fb      	ldrb	r3, [r7, #3]
 800dece:	015a      	lsls	r2, r3, #5
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	4413      	add	r3, r2
 800ded4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ded8:	461a      	mov	r2, r3
 800deda:	f240 639d 	movw	r3, #1693	@ 0x69d
 800dede:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dee0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	da34      	bge.n	800df52 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dee8:	78fb      	ldrb	r3, [r7, #3]
 800deea:	015a      	lsls	r2, r3, #5
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	4413      	add	r3, r2
 800def0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	78fa      	ldrb	r2, [r7, #3]
 800def8:	0151      	lsls	r1, r2, #5
 800defa:	693a      	ldr	r2, [r7, #16]
 800defc:	440a      	add	r2, r1
 800defe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df06:	60d3      	str	r3, [r2, #12]
      }

      break;
 800df08:	e023      	b.n	800df52 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800df0a:	78fb      	ldrb	r3, [r7, #3]
 800df0c:	015a      	lsls	r2, r3, #5
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	4413      	add	r3, r2
 800df12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df16:	461a      	mov	r2, r3
 800df18:	f240 2325 	movw	r3, #549	@ 0x225
 800df1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800df1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800df22:	2b00      	cmp	r3, #0
 800df24:	da17      	bge.n	800df56 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800df26:	78fb      	ldrb	r3, [r7, #3]
 800df28:	015a      	lsls	r2, r3, #5
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	4413      	add	r3, r2
 800df2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	78fa      	ldrb	r2, [r7, #3]
 800df36:	0151      	lsls	r1, r2, #5
 800df38:	693a      	ldr	r2, [r7, #16]
 800df3a:	440a      	add	r2, r1
 800df3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df40:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800df44:	60d3      	str	r3, [r2, #12]
      }
      break;
 800df46:	e006      	b.n	800df56 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	77fb      	strb	r3, [r7, #31]
      break;
 800df4c:	e004      	b.n	800df58 <USB_HC_Init+0x148>
      break;
 800df4e:	bf00      	nop
 800df50:	e002      	b.n	800df58 <USB_HC_Init+0x148>
      break;
 800df52:	bf00      	nop
 800df54:	e000      	b.n	800df58 <USB_HC_Init+0x148>
      break;
 800df56:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800df58:	78fb      	ldrb	r3, [r7, #3]
 800df5a:	015a      	lsls	r2, r3, #5
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	4413      	add	r3, r2
 800df60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df64:	461a      	mov	r2, r3
 800df66:	2300      	movs	r3, #0
 800df68:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800df6a:	78fb      	ldrb	r3, [r7, #3]
 800df6c:	015a      	lsls	r2, r3, #5
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	4413      	add	r3, r2
 800df72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	78fa      	ldrb	r2, [r7, #3]
 800df7a:	0151      	lsls	r1, r2, #5
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	440a      	add	r2, r1
 800df80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800df84:	f043 0302 	orr.w	r3, r3, #2
 800df88:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800df90:	699a      	ldr	r2, [r3, #24]
 800df92:	78fb      	ldrb	r3, [r7, #3]
 800df94:	f003 030f 	and.w	r3, r3, #15
 800df98:	2101      	movs	r1, #1
 800df9a:	fa01 f303 	lsl.w	r3, r1, r3
 800df9e:	6939      	ldr	r1, [r7, #16]
 800dfa0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	699b      	ldr	r3, [r3, #24]
 800dfac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800dfb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	da03      	bge.n	800dfc4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800dfbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfc0:	61bb      	str	r3, [r7, #24]
 800dfc2:	e001      	b.n	800dfc8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7ff fef9 	bl	800ddc0 <USB_GetHostSpeed>
 800dfce:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800dfd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d106      	bne.n	800dfe6 <USB_HC_Init+0x1d6>
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2b02      	cmp	r3, #2
 800dfdc:	d003      	beq.n	800dfe6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800dfde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800dfe2:	617b      	str	r3, [r7, #20]
 800dfe4:	e001      	b.n	800dfea <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dfea:	787b      	ldrb	r3, [r7, #1]
 800dfec:	059b      	lsls	r3, r3, #22
 800dfee:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dff2:	78bb      	ldrb	r3, [r7, #2]
 800dff4:	02db      	lsls	r3, r3, #11
 800dff6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dffa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dffc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e000:	049b      	lsls	r3, r3, #18
 800e002:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e006:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800e008:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e00a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e00e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	431a      	orrs	r2, r3
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e018:	78fa      	ldrb	r2, [r7, #3]
 800e01a:	0151      	lsls	r1, r2, #5
 800e01c:	693a      	ldr	r2, [r7, #16]
 800e01e:	440a      	add	r2, r1
 800e020:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e024:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e028:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800e02a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e02e:	2b03      	cmp	r3, #3
 800e030:	d003      	beq.n	800e03a <USB_HC_Init+0x22a>
 800e032:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e036:	2b01      	cmp	r3, #1
 800e038:	d10f      	bne.n	800e05a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800e03a:	78fb      	ldrb	r3, [r7, #3]
 800e03c:	015a      	lsls	r2, r3, #5
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	4413      	add	r3, r2
 800e042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	78fa      	ldrb	r2, [r7, #3]
 800e04a:	0151      	lsls	r1, r2, #5
 800e04c:	693a      	ldr	r2, [r7, #16]
 800e04e:	440a      	add	r2, r1
 800e050:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e054:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e058:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e05a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3720      	adds	r7, #32
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	40040000 	.word	0x40040000

0800e068 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b08c      	sub	sp, #48	@ 0x30
 800e06c:	af02      	add	r7, sp, #8
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	4613      	mov	r3, r2
 800e074:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	785b      	ldrb	r3, [r3, #1]
 800e07e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800e080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e084:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	4a5d      	ldr	r2, [pc, #372]	@ (800e200 <USB_HC_StartXfer+0x198>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d12f      	bne.n	800e0ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800e08e:	79fb      	ldrb	r3, [r7, #7]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d11c      	bne.n	800e0ce <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	7c9b      	ldrb	r3, [r3, #18]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d003      	beq.n	800e0a4 <USB_HC_StartXfer+0x3c>
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	7c9b      	ldrb	r3, [r3, #18]
 800e0a0:	2b02      	cmp	r3, #2
 800e0a2:	d124      	bne.n	800e0ee <USB_HC_StartXfer+0x86>
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	799b      	ldrb	r3, [r3, #6]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d120      	bne.n	800e0ee <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	015a      	lsls	r2, r3, #5
 800e0b0:	6a3b      	ldr	r3, [r7, #32]
 800e0b2:	4413      	add	r3, r2
 800e0b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0b8:	68db      	ldr	r3, [r3, #12]
 800e0ba:	69fa      	ldr	r2, [r7, #28]
 800e0bc:	0151      	lsls	r1, r2, #5
 800e0be:	6a3a      	ldr	r2, [r7, #32]
 800e0c0:	440a      	add	r2, r1
 800e0c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0ca:	60d3      	str	r3, [r2, #12]
 800e0cc:	e00f      	b.n	800e0ee <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	791b      	ldrb	r3, [r3, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d10b      	bne.n	800e0ee <USB_HC_StartXfer+0x86>
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	795b      	ldrb	r3, [r3, #5]
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d107      	bne.n	800e0ee <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	785b      	ldrb	r3, [r3, #1]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f000 fb6b 	bl	800e7c0 <USB_DoPing>
        return HAL_OK;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	e232      	b.n	800e554 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	799b      	ldrb	r3, [r3, #6]
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d158      	bne.n	800e1a8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	78db      	ldrb	r3, [r3, #3]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d007      	beq.n	800e112 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e102:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e104:	68ba      	ldr	r2, [r7, #8]
 800e106:	8a92      	ldrh	r2, [r2, #20]
 800e108:	fb03 f202 	mul.w	r2, r3, r2
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	61da      	str	r2, [r3, #28]
 800e110:	e07c      	b.n	800e20c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	7c9b      	ldrb	r3, [r3, #18]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d130      	bne.n	800e17c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	6a1b      	ldr	r3, [r3, #32]
 800e11e:	2bbc      	cmp	r3, #188	@ 0xbc
 800e120:	d918      	bls.n	800e154 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	8a9b      	ldrh	r3, [r3, #20]
 800e126:	461a      	mov	r2, r3
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	69da      	ldr	r2, [r3, #28]
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d003      	beq.n	800e144 <USB_HC_StartXfer+0xdc>
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	2b02      	cmp	r3, #2
 800e142:	d103      	bne.n	800e14c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	2202      	movs	r2, #2
 800e148:	60da      	str	r2, [r3, #12]
 800e14a:	e05f      	b.n	800e20c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	2201      	movs	r2, #1
 800e150:	60da      	str	r2, [r3, #12]
 800e152:	e05b      	b.n	800e20c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	6a1a      	ldr	r2, [r3, #32]
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	2b01      	cmp	r3, #1
 800e162:	d007      	beq.n	800e174 <USB_HC_StartXfer+0x10c>
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	2b02      	cmp	r3, #2
 800e16a:	d003      	beq.n	800e174 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	2204      	movs	r2, #4
 800e170:	60da      	str	r2, [r3, #12]
 800e172:	e04b      	b.n	800e20c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	2203      	movs	r2, #3
 800e178:	60da      	str	r2, [r3, #12]
 800e17a:	e047      	b.n	800e20c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800e17c:	79fb      	ldrb	r3, [r7, #7]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d10d      	bne.n	800e19e <USB_HC_StartXfer+0x136>
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	6a1b      	ldr	r3, [r3, #32]
 800e186:	68ba      	ldr	r2, [r7, #8]
 800e188:	8a92      	ldrh	r2, [r2, #20]
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d907      	bls.n	800e19e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e18e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	8a92      	ldrh	r2, [r2, #20]
 800e194:	fb03 f202 	mul.w	r2, r3, r2
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	61da      	str	r2, [r3, #28]
 800e19c:	e036      	b.n	800e20c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	6a1a      	ldr	r2, [r3, #32]
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	61da      	str	r2, [r3, #28]
 800e1a6:	e031      	b.n	800e20c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	6a1b      	ldr	r3, [r3, #32]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d018      	beq.n	800e1e2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	6a1b      	ldr	r3, [r3, #32]
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	8a92      	ldrh	r2, [r2, #20]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	3b01      	subs	r3, #1
 800e1bc:	68ba      	ldr	r2, [r7, #8]
 800e1be:	8a92      	ldrh	r2, [r2, #20]
 800e1c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800e1c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e1c8:	8b7b      	ldrh	r3, [r7, #26]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d90b      	bls.n	800e1e6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800e1ce:	8b7b      	ldrh	r3, [r7, #26]
 800e1d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e1d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1d4:	68ba      	ldr	r2, [r7, #8]
 800e1d6:	8a92      	ldrh	r2, [r2, #20]
 800e1d8:	fb03 f202 	mul.w	r2, r3, r2
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	61da      	str	r2, [r3, #28]
 800e1e0:	e001      	b.n	800e1e6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	78db      	ldrb	r3, [r3, #3]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d00a      	beq.n	800e204 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e1ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e1f0:	68ba      	ldr	r2, [r7, #8]
 800e1f2:	8a92      	ldrh	r2, [r2, #20]
 800e1f4:	fb03 f202 	mul.w	r2, r3, r2
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	61da      	str	r2, [r3, #28]
 800e1fc:	e006      	b.n	800e20c <USB_HC_StartXfer+0x1a4>
 800e1fe:	bf00      	nop
 800e200:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	6a1a      	ldr	r2, [r3, #32]
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	69db      	ldr	r3, [r3, #28]
 800e210:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e214:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e216:	04d9      	lsls	r1, r3, #19
 800e218:	4ba3      	ldr	r3, [pc, #652]	@ (800e4a8 <USB_HC_StartXfer+0x440>)
 800e21a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e21c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	7d9b      	ldrb	r3, [r3, #22]
 800e222:	075b      	lsls	r3, r3, #29
 800e224:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e228:	69f9      	ldr	r1, [r7, #28]
 800e22a:	0148      	lsls	r0, r1, #5
 800e22c:	6a39      	ldr	r1, [r7, #32]
 800e22e:	4401      	add	r1, r0
 800e230:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e234:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e236:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e238:	79fb      	ldrb	r3, [r7, #7]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d009      	beq.n	800e252 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	6999      	ldr	r1, [r3, #24]
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	015a      	lsls	r2, r3, #5
 800e246:	6a3b      	ldr	r3, [r7, #32]
 800e248:	4413      	add	r3, r2
 800e24a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e24e:	460a      	mov	r2, r1
 800e250:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	2b00      	cmp	r3, #0
 800e260:	bf0c      	ite	eq
 800e262:	2301      	moveq	r3, #1
 800e264:	2300      	movne	r3, #0
 800e266:	b2db      	uxtb	r3, r3
 800e268:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	015a      	lsls	r2, r3, #5
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	4413      	add	r3, r2
 800e272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	69fa      	ldr	r2, [r7, #28]
 800e27a:	0151      	lsls	r1, r2, #5
 800e27c:	6a3a      	ldr	r2, [r7, #32]
 800e27e:	440a      	add	r2, r1
 800e280:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e284:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e288:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	015a      	lsls	r2, r3, #5
 800e28e:	6a3b      	ldr	r3, [r7, #32]
 800e290:	4413      	add	r3, r2
 800e292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	7e7b      	ldrb	r3, [r7, #25]
 800e29a:	075b      	lsls	r3, r3, #29
 800e29c:	69f9      	ldr	r1, [r7, #28]
 800e29e:	0148      	lsls	r0, r1, #5
 800e2a0:	6a39      	ldr	r1, [r7, #32]
 800e2a2:	4401      	add	r1, r0
 800e2a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	799b      	ldrb	r3, [r3, #6]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	f040 80c3 	bne.w	800e43c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	7c5b      	ldrb	r3, [r3, #17]
 800e2ba:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e2bc:	68ba      	ldr	r2, [r7, #8]
 800e2be:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	69fa      	ldr	r2, [r7, #28]
 800e2c4:	0151      	lsls	r1, r2, #5
 800e2c6:	6a3a      	ldr	r2, [r7, #32]
 800e2c8:	440a      	add	r2, r1
 800e2ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e2ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e2d2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	015a      	lsls	r2, r3, #5
 800e2d8:	6a3b      	ldr	r3, [r7, #32]
 800e2da:	4413      	add	r3, r2
 800e2dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	69fa      	ldr	r2, [r7, #28]
 800e2e4:	0151      	lsls	r1, r2, #5
 800e2e6:	6a3a      	ldr	r2, [r7, #32]
 800e2e8:	440a      	add	r2, r1
 800e2ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e2ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e2f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	79db      	ldrb	r3, [r3, #7]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d123      	bne.n	800e344 <USB_HC_StartXfer+0x2dc>
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	78db      	ldrb	r3, [r3, #3]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d11f      	bne.n	800e344 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	015a      	lsls	r2, r3, #5
 800e308:	6a3b      	ldr	r3, [r7, #32]
 800e30a:	4413      	add	r3, r2
 800e30c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	69fa      	ldr	r2, [r7, #28]
 800e314:	0151      	lsls	r1, r2, #5
 800e316:	6a3a      	ldr	r2, [r7, #32]
 800e318:	440a      	add	r2, r1
 800e31a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e31e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e322:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	015a      	lsls	r2, r3, #5
 800e328:	6a3b      	ldr	r3, [r7, #32]
 800e32a:	4413      	add	r3, r2
 800e32c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	69fa      	ldr	r2, [r7, #28]
 800e334:	0151      	lsls	r1, r2, #5
 800e336:	6a3a      	ldr	r2, [r7, #32]
 800e338:	440a      	add	r2, r1
 800e33a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e33e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e342:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	7c9b      	ldrb	r3, [r3, #18]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d003      	beq.n	800e354 <USB_HC_StartXfer+0x2ec>
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	7c9b      	ldrb	r3, [r3, #18]
 800e350:	2b03      	cmp	r3, #3
 800e352:	d117      	bne.n	800e384 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d113      	bne.n	800e384 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	78db      	ldrb	r3, [r3, #3]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d10f      	bne.n	800e384 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	015a      	lsls	r2, r3, #5
 800e368:	6a3b      	ldr	r3, [r7, #32]
 800e36a:	4413      	add	r3, r2
 800e36c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	69fa      	ldr	r2, [r7, #28]
 800e374:	0151      	lsls	r1, r2, #5
 800e376:	6a3a      	ldr	r2, [r7, #32]
 800e378:	440a      	add	r2, r1
 800e37a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e37e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e382:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	7c9b      	ldrb	r3, [r3, #18]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d162      	bne.n	800e452 <USB_HC_StartXfer+0x3ea>
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	78db      	ldrb	r3, [r3, #3]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d15e      	bne.n	800e452 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	3b01      	subs	r3, #1
 800e39a:	2b03      	cmp	r3, #3
 800e39c:	d858      	bhi.n	800e450 <USB_HC_StartXfer+0x3e8>
 800e39e:	a201      	add	r2, pc, #4	@ (adr r2, 800e3a4 <USB_HC_StartXfer+0x33c>)
 800e3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a4:	0800e3b5 	.word	0x0800e3b5
 800e3a8:	0800e3d7 	.word	0x0800e3d7
 800e3ac:	0800e3f9 	.word	0x0800e3f9
 800e3b0:	0800e41b 	.word	0x0800e41b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	015a      	lsls	r2, r3, #5
 800e3b8:	6a3b      	ldr	r3, [r7, #32]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	69fa      	ldr	r2, [r7, #28]
 800e3c4:	0151      	lsls	r1, r2, #5
 800e3c6:	6a3a      	ldr	r2, [r7, #32]
 800e3c8:	440a      	add	r2, r1
 800e3ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3d2:	6053      	str	r3, [r2, #4]
          break;
 800e3d4:	e03d      	b.n	800e452 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	015a      	lsls	r2, r3, #5
 800e3da:	6a3b      	ldr	r3, [r7, #32]
 800e3dc:	4413      	add	r3, r2
 800e3de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	69fa      	ldr	r2, [r7, #28]
 800e3e6:	0151      	lsls	r1, r2, #5
 800e3e8:	6a3a      	ldr	r2, [r7, #32]
 800e3ea:	440a      	add	r2, r1
 800e3ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3f0:	f043 030e 	orr.w	r3, r3, #14
 800e3f4:	6053      	str	r3, [r2, #4]
          break;
 800e3f6:	e02c      	b.n	800e452 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	015a      	lsls	r2, r3, #5
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
 800e3fe:	4413      	add	r3, r2
 800e400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	69fa      	ldr	r2, [r7, #28]
 800e408:	0151      	lsls	r1, r2, #5
 800e40a:	6a3a      	ldr	r2, [r7, #32]
 800e40c:	440a      	add	r2, r1
 800e40e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e416:	6053      	str	r3, [r2, #4]
          break;
 800e418:	e01b      	b.n	800e452 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	015a      	lsls	r2, r3, #5
 800e41e:	6a3b      	ldr	r3, [r7, #32]
 800e420:	4413      	add	r3, r2
 800e422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	69fa      	ldr	r2, [r7, #28]
 800e42a:	0151      	lsls	r1, r2, #5
 800e42c:	6a3a      	ldr	r2, [r7, #32]
 800e42e:	440a      	add	r2, r1
 800e430:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e434:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e438:	6053      	str	r3, [r2, #4]
          break;
 800e43a:	e00a      	b.n	800e452 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	015a      	lsls	r2, r3, #5
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	4413      	add	r3, r2
 800e444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e448:	461a      	mov	r2, r3
 800e44a:	2300      	movs	r3, #0
 800e44c:	6053      	str	r3, [r2, #4]
 800e44e:	e000      	b.n	800e452 <USB_HC_StartXfer+0x3ea>
          break;
 800e450:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	015a      	lsls	r2, r3, #5
 800e456:	6a3b      	ldr	r3, [r7, #32]
 800e458:	4413      	add	r3, r2
 800e45a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e468:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	78db      	ldrb	r3, [r3, #3]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d004      	beq.n	800e47c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e478:	613b      	str	r3, [r7, #16]
 800e47a:	e003      	b.n	800e484 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e482:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e48a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e48c:	69fb      	ldr	r3, [r7, #28]
 800e48e:	015a      	lsls	r2, r3, #5
 800e490:	6a3b      	ldr	r3, [r7, #32]
 800e492:	4413      	add	r3, r2
 800e494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e498:	461a      	mov	r2, r3
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e49e:	79fb      	ldrb	r3, [r7, #7]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d003      	beq.n	800e4ac <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	e055      	b.n	800e554 <USB_HC_StartXfer+0x4ec>
 800e4a8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	78db      	ldrb	r3, [r3, #3]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d14e      	bne.n	800e552 <USB_HC_StartXfer+0x4ea>
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	6a1b      	ldr	r3, [r3, #32]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d04a      	beq.n	800e552 <USB_HC_StartXfer+0x4ea>
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	79db      	ldrb	r3, [r3, #7]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d146      	bne.n	800e552 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	7c9b      	ldrb	r3, [r3, #18]
 800e4c8:	2b03      	cmp	r3, #3
 800e4ca:	d831      	bhi.n	800e530 <USB_HC_StartXfer+0x4c8>
 800e4cc:	a201      	add	r2, pc, #4	@ (adr r2, 800e4d4 <USB_HC_StartXfer+0x46c>)
 800e4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d2:	bf00      	nop
 800e4d4:	0800e4e5 	.word	0x0800e4e5
 800e4d8:	0800e509 	.word	0x0800e509
 800e4dc:	0800e4e5 	.word	0x0800e4e5
 800e4e0:	0800e509 	.word	0x0800e509
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	6a1b      	ldr	r3, [r3, #32]
 800e4e8:	3303      	adds	r3, #3
 800e4ea:	089b      	lsrs	r3, r3, #2
 800e4ec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e4ee:	8afa      	ldrh	r2, [r7, #22]
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d91c      	bls.n	800e534 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	699b      	ldr	r3, [r3, #24]
 800e4fe:	f043 0220 	orr.w	r2, r3, #32
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	619a      	str	r2, [r3, #24]
        }
        break;
 800e506:	e015      	b.n	800e534 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	6a1b      	ldr	r3, [r3, #32]
 800e50c:	3303      	adds	r3, #3
 800e50e:	089b      	lsrs	r3, r3, #2
 800e510:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e512:	8afa      	ldrh	r2, [r7, #22]
 800e514:	6a3b      	ldr	r3, [r7, #32]
 800e516:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e51a:	691b      	ldr	r3, [r3, #16]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	429a      	cmp	r2, r3
 800e520:	d90a      	bls.n	800e538 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	699b      	ldr	r3, [r3, #24]
 800e526:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	619a      	str	r2, [r3, #24]
        }
        break;
 800e52e:	e003      	b.n	800e538 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800e530:	bf00      	nop
 800e532:	e002      	b.n	800e53a <USB_HC_StartXfer+0x4d2>
        break;
 800e534:	bf00      	nop
 800e536:	e000      	b.n	800e53a <USB_HC_StartXfer+0x4d2>
        break;
 800e538:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	6999      	ldr	r1, [r3, #24]
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	785a      	ldrb	r2, [r3, #1]
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	6a1b      	ldr	r3, [r3, #32]
 800e546:	b29b      	uxth	r3, r3
 800e548:	2000      	movs	r0, #0
 800e54a:	9000      	str	r0, [sp, #0]
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f7ff f9d5 	bl	800d8fc <USB_WritePacket>
  }

  return HAL_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3728      	adds	r7, #40	@ 0x28
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e56e:	695b      	ldr	r3, [r3, #20]
 800e570:	b29b      	uxth	r3, r3
}
 800e572:	4618      	mov	r0, r3
 800e574:	3714      	adds	r7, #20
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e57e:	b480      	push	{r7}
 800e580:	b089      	sub	sp, #36	@ 0x24
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
 800e586:	460b      	mov	r3, r1
 800e588:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800e58e:	78fb      	ldrb	r3, [r7, #3]
 800e590:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e592:	2300      	movs	r3, #0
 800e594:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	015a      	lsls	r2, r3, #5
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	4413      	add	r3, r2
 800e59e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	0c9b      	lsrs	r3, r3, #18
 800e5a6:	f003 0303 	and.w	r3, r3, #3
 800e5aa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	015a      	lsls	r2, r3, #5
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	0fdb      	lsrs	r3, r3, #31
 800e5bc:	f003 0301 	and.w	r3, r3, #1
 800e5c0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	015a      	lsls	r2, r3, #5
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	0fdb      	lsrs	r3, r3, #31
 800e5d2:	f003 0301 	and.w	r3, r3, #1
 800e5d6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	f003 0320 	and.w	r3, r3, #32
 800e5e0:	2b20      	cmp	r3, #32
 800e5e2:	d10d      	bne.n	800e600 <USB_HC_Halt+0x82>
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d10a      	bne.n	800e600 <USB_HC_Halt+0x82>
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d005      	beq.n	800e5fc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d002      	beq.n	800e5fc <USB_HC_Halt+0x7e>
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	2b03      	cmp	r3, #3
 800e5fa:	d101      	bne.n	800e600 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	e0d8      	b.n	800e7b2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d002      	beq.n	800e60c <USB_HC_Halt+0x8e>
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	2b02      	cmp	r3, #2
 800e60a:	d173      	bne.n	800e6f4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	015a      	lsls	r2, r3, #5
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	4413      	add	r3, r2
 800e614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	69ba      	ldr	r2, [r7, #24]
 800e61c:	0151      	lsls	r1, r2, #5
 800e61e:	69fa      	ldr	r2, [r7, #28]
 800e620:	440a      	add	r2, r1
 800e622:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e626:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e62a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	f003 0320 	and.w	r3, r3, #32
 800e634:	2b00      	cmp	r3, #0
 800e636:	d14a      	bne.n	800e6ce <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e63c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e640:	2b00      	cmp	r3, #0
 800e642:	d133      	bne.n	800e6ac <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e644:	69bb      	ldr	r3, [r7, #24]
 800e646:	015a      	lsls	r2, r3, #5
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	4413      	add	r3, r2
 800e64c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	69ba      	ldr	r2, [r7, #24]
 800e654:	0151      	lsls	r1, r2, #5
 800e656:	69fa      	ldr	r2, [r7, #28]
 800e658:	440a      	add	r2, r1
 800e65a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e65e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e662:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e664:	69bb      	ldr	r3, [r7, #24]
 800e666:	015a      	lsls	r2, r3, #5
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	4413      	add	r3, r2
 800e66c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	69ba      	ldr	r2, [r7, #24]
 800e674:	0151      	lsls	r1, r2, #5
 800e676:	69fa      	ldr	r2, [r7, #28]
 800e678:	440a      	add	r2, r1
 800e67a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e67e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e682:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	3301      	adds	r3, #1
 800e688:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e690:	d82e      	bhi.n	800e6f0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	015a      	lsls	r2, r3, #5
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	4413      	add	r3, r2
 800e69a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e6a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6a8:	d0ec      	beq.n	800e684 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e6aa:	e081      	b.n	800e7b0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	015a      	lsls	r2, r3, #5
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	69ba      	ldr	r2, [r7, #24]
 800e6bc:	0151      	lsls	r1, r2, #5
 800e6be:	69fa      	ldr	r2, [r7, #28]
 800e6c0:	440a      	add	r2, r1
 800e6c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e6c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e6ca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e6cc:	e070      	b.n	800e7b0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	015a      	lsls	r2, r3, #5
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	69ba      	ldr	r2, [r7, #24]
 800e6de:	0151      	lsls	r1, r2, #5
 800e6e0:	69fa      	ldr	r2, [r7, #28]
 800e6e2:	440a      	add	r2, r1
 800e6e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e6e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e6ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e6ee:	e05f      	b.n	800e7b0 <USB_HC_Halt+0x232>
            break;
 800e6f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e6f2:	e05d      	b.n	800e7b0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	015a      	lsls	r2, r3, #5
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	69ba      	ldr	r2, [r7, #24]
 800e704:	0151      	lsls	r1, r2, #5
 800e706:	69fa      	ldr	r2, [r7, #28]
 800e708:	440a      	add	r2, r1
 800e70a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e70e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e712:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e720:	2b00      	cmp	r3, #0
 800e722:	d133      	bne.n	800e78c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e724:	69bb      	ldr	r3, [r7, #24]
 800e726:	015a      	lsls	r2, r3, #5
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	4413      	add	r3, r2
 800e72c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	69ba      	ldr	r2, [r7, #24]
 800e734:	0151      	lsls	r1, r2, #5
 800e736:	69fa      	ldr	r2, [r7, #28]
 800e738:	440a      	add	r2, r1
 800e73a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e73e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e742:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	015a      	lsls	r2, r3, #5
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	4413      	add	r3, r2
 800e74c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	69ba      	ldr	r2, [r7, #24]
 800e754:	0151      	lsls	r1, r2, #5
 800e756:	69fa      	ldr	r2, [r7, #28]
 800e758:	440a      	add	r2, r1
 800e75a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e75e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e762:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	3301      	adds	r3, #1
 800e768:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e770:	d81d      	bhi.n	800e7ae <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	015a      	lsls	r2, r3, #5
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	4413      	add	r3, r2
 800e77a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e788:	d0ec      	beq.n	800e764 <USB_HC_Halt+0x1e6>
 800e78a:	e011      	b.n	800e7b0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	015a      	lsls	r2, r3, #5
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	4413      	add	r3, r2
 800e794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	69ba      	ldr	r2, [r7, #24]
 800e79c:	0151      	lsls	r1, r2, #5
 800e79e:	69fa      	ldr	r2, [r7, #28]
 800e7a0:	440a      	add	r2, r1
 800e7a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e7a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e7aa:	6013      	str	r3, [r2, #0]
 800e7ac:	e000      	b.n	800e7b0 <USB_HC_Halt+0x232>
          break;
 800e7ae:	bf00      	nop
    }
  }

  return HAL_OK;
 800e7b0:	2300      	movs	r3, #0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3724      	adds	r7, #36	@ 0x24
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
	...

0800e7c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b087      	sub	sp, #28
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e7d0:	78fb      	ldrb	r3, [r7, #3]
 800e7d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	04da      	lsls	r2, r3, #19
 800e7dc:	4b15      	ldr	r3, [pc, #84]	@ (800e834 <USB_DoPing+0x74>)
 800e7de:	4013      	ands	r3, r2
 800e7e0:	693a      	ldr	r2, [r7, #16]
 800e7e2:	0151      	lsls	r1, r2, #5
 800e7e4:	697a      	ldr	r2, [r7, #20]
 800e7e6:	440a      	add	r2, r1
 800e7e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e7ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e7f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	015a      	lsls	r2, r3, #5
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e808:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e810:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	015a      	lsls	r2, r3, #5
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	4413      	add	r3, r2
 800e81a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e81e:	461a      	mov	r2, r3
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e824:	2300      	movs	r3, #0
}
 800e826:	4618      	mov	r0, r3
 800e828:	371c      	adds	r7, #28
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	1ff80000 	.word	0x1ff80000

0800e838 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b088      	sub	sp, #32
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e840:	2300      	movs	r3, #0
 800e842:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e848:	2300      	movs	r3, #0
 800e84a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f7fe ff98 	bl	800d782 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e852:	2110      	movs	r1, #16
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7fe fff1 	bl	800d83c <USB_FlushTxFifo>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d001      	beq.n	800e864 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e860:	2301      	movs	r3, #1
 800e862:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f7ff f81b 	bl	800d8a0 <USB_FlushRxFifo>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d001      	beq.n	800e874 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e874:	2300      	movs	r3, #0
 800e876:	61bb      	str	r3, [r7, #24]
 800e878:	e01f      	b.n	800e8ba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	015a      	lsls	r2, r3, #5
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	4413      	add	r3, r2
 800e882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e890:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e898:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e8a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	015a      	lsls	r2, r3, #5
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	61bb      	str	r3, [r7, #24]
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	2b0f      	cmp	r3, #15
 800e8be:	d9dc      	bls.n	800e87a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	61bb      	str	r3, [r7, #24]
 800e8c4:	e034      	b.n	800e930 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	015a      	lsls	r2, r3, #5
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e8dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e8e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e8ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	015a      	lsls	r2, r3, #5
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	3301      	adds	r3, #1
 800e904:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e90c:	d80c      	bhi.n	800e928 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	015a      	lsls	r2, r3, #5
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	4413      	add	r3, r2
 800e916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e924:	d0ec      	beq.n	800e900 <USB_StopHost+0xc8>
 800e926:	e000      	b.n	800e92a <USB_StopHost+0xf2>
        break;
 800e928:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e92a:	69bb      	ldr	r3, [r7, #24]
 800e92c:	3301      	adds	r3, #1
 800e92e:	61bb      	str	r3, [r7, #24]
 800e930:	69bb      	ldr	r3, [r7, #24]
 800e932:	2b0f      	cmp	r3, #15
 800e934:	d9c7      	bls.n	800e8c6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e93c:	461a      	mov	r2, r3
 800e93e:	f04f 33ff 	mov.w	r3, #4294967295
 800e942:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f04f 32ff 	mov.w	r2, #4294967295
 800e94a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f7fe ff07 	bl	800d760 <USB_EnableGlobalInt>

  return ret;
 800e952:	7ffb      	ldrb	r3, [r7, #31]
}
 800e954:	4618      	mov	r0, r3
 800e956:	3720      	adds	r7, #32
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e960:	4904      	ldr	r1, [pc, #16]	@ (800e974 <MX_FATFS_Init+0x18>)
 800e962:	4805      	ldr	r0, [pc, #20]	@ (800e978 <MX_FATFS_Init+0x1c>)
 800e964:	f005 fb4a 	bl	8013ffc <FATFS_LinkDriver>
 800e968:	4603      	mov	r3, r0
 800e96a:	461a      	mov	r2, r3
 800e96c:	4b03      	ldr	r3, [pc, #12]	@ (800e97c <MX_FATFS_Init+0x20>)
 800e96e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e970:	bf00      	nop
 800e972:	bd80      	pop	{r7, pc}
 800e974:	200008f4 	.word	0x200008f4
 800e978:	08016124 	.word	0x08016124
 800e97c:	200008f0 	.word	0x200008f0

0800e980 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e980:	b480      	push	{r7}
 800e982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e984:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e986:	4618      	mov	r0, r3
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e996:	2300      	movs	r3, #0
 800e998:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e99a:	f000 f888 	bl	800eaae <BSP_SD_IsDetected>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d001      	beq.n	800e9a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e005      	b.n	800e9b4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e9a8:	4804      	ldr	r0, [pc, #16]	@ (800e9bc <BSP_SD_Init+0x2c>)
 800e9aa:	f7fa ffc5 	bl	8009938 <HAL_SD_Init>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e9b2:	79fb      	ldrb	r3, [r7, #7]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	20000588 	.word	0x20000588

0800e9c0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b086      	sub	sp, #24
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	68ba      	ldr	r2, [r7, #8]
 800e9d4:	68f9      	ldr	r1, [r7, #12]
 800e9d6:	4806      	ldr	r0, [pc, #24]	@ (800e9f0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e9d8:	f7fb f85e 	bl	8009a98 <HAL_SD_ReadBlocks_DMA>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d001      	beq.n	800e9e6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e9e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3718      	adds	r7, #24
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	20000588 	.word	0x20000588

0800e9f4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b086      	sub	sp, #24
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ea00:	2300      	movs	r3, #0
 800ea02:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	68ba      	ldr	r2, [r7, #8]
 800ea08:	68f9      	ldr	r1, [r7, #12]
 800ea0a:	4806      	ldr	r0, [pc, #24]	@ (800ea24 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ea0c:	f7fb f924 	bl	8009c58 <HAL_SD_WriteBlocks_DMA>
 800ea10:	4603      	mov	r3, r0
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d001      	beq.n	800ea1a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ea16:	2301      	movs	r3, #1
 800ea18:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ea1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3718      	adds	r7, #24
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	20000588 	.word	0x20000588

0800ea28 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ea2c:	4805      	ldr	r0, [pc, #20]	@ (800ea44 <BSP_SD_GetCardState+0x1c>)
 800ea2e:	f7fb fd45 	bl	800a4bc <HAL_SD_GetCardState>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b04      	cmp	r3, #4
 800ea36:	bf14      	ite	ne
 800ea38:	2301      	movne	r3, #1
 800ea3a:	2300      	moveq	r3, #0
 800ea3c:	b2db      	uxtb	r3, r3
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20000588 	.word	0x20000588

0800ea48 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ea50:	6879      	ldr	r1, [r7, #4]
 800ea52:	4803      	ldr	r0, [pc, #12]	@ (800ea60 <BSP_SD_GetCardInfo+0x18>)
 800ea54:	f7fb fd06 	bl	800a464 <HAL_SD_GetCardInfo>
}
 800ea58:	bf00      	nop
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	20000588 	.word	0x20000588

0800ea64 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ea6c:	f000 f818 	bl	800eaa0 <BSP_SD_AbortCallback>
}
 800ea70:	bf00      	nop
 800ea72:	3708      	adds	r7, #8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ea80:	f000 f9a8 	bl	800edd4 <BSP_SD_WriteCpltCallback>
}
 800ea84:	bf00      	nop
 800ea86:	3708      	adds	r7, #8
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b082      	sub	sp, #8
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ea94:	f000 f9aa 	bl	800edec <BSP_SD_ReadCpltCallback>
}
 800ea98:	bf00      	nop
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	af00      	add	r7, sp, #0

}
 800eaa4:	bf00      	nop
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr

0800eaae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b082      	sub	sp, #8
 800eab2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800eab4:	2301      	movs	r3, #1
 800eab6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800eab8:	f000 f80c 	bl	800ead4 <BSP_PlatformIsDetected>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d101      	bne.n	800eac6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800eac2:	2300      	movs	r3, #0
 800eac4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800eac6:	79fb      	ldrb	r3, [r7, #7]
 800eac8:	b2db      	uxtb	r3, r3
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3708      	adds	r7, #8
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
	...

0800ead4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800eada:	2301      	movs	r3, #1
 800eadc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800eade:	2104      	movs	r1, #4
 800eae0:	4806      	ldr	r0, [pc, #24]	@ (800eafc <BSP_PlatformIsDetected+0x28>)
 800eae2:	f7f6 fec7 	bl	8005874 <HAL_GPIO_ReadPin>
 800eae6:	4603      	mov	r3, r0
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d001      	beq.n	800eaf0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800eaec:	2300      	movs	r3, #0
 800eaee:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800eaf0:	79fb      	ldrb	r3, [r7, #7]
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3708      	adds	r7, #8
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	40021800 	.word	0x40021800

0800eb00 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800eb08:	f7f4 ffd8 	bl	8003abc <HAL_GetTick>
 800eb0c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800eb0e:	e006      	b.n	800eb1e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eb10:	f7ff ff8a 	bl	800ea28 <BSP_SD_GetCardState>
 800eb14:	4603      	mov	r3, r0
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d101      	bne.n	800eb1e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	e009      	b.n	800eb32 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800eb1e:	f7f4 ffcd 	bl	8003abc <HAL_GetTick>
 800eb22:	4602      	mov	r2, r0
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	1ad3      	subs	r3, r2, r3
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d8f0      	bhi.n	800eb10 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800eb2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
	...

0800eb3c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	4603      	mov	r3, r0
 800eb44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800eb46:	4b0b      	ldr	r3, [pc, #44]	@ (800eb74 <SD_CheckStatus+0x38>)
 800eb48:	2201      	movs	r2, #1
 800eb4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800eb4c:	f7ff ff6c 	bl	800ea28 <BSP_SD_GetCardState>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d107      	bne.n	800eb66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800eb56:	4b07      	ldr	r3, [pc, #28]	@ (800eb74 <SD_CheckStatus+0x38>)
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	f023 0301 	bic.w	r3, r3, #1
 800eb60:	b2da      	uxtb	r2, r3
 800eb62:	4b04      	ldr	r3, [pc, #16]	@ (800eb74 <SD_CheckStatus+0x38>)
 800eb64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800eb66:	4b03      	ldr	r3, [pc, #12]	@ (800eb74 <SD_CheckStatus+0x38>)
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	b2db      	uxtb	r3, r3
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20000009 	.word	0x20000009

0800eb78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	4603      	mov	r3, r0
 800eb80:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800eb82:	f7ff ff05 	bl	800e990 <BSP_SD_Init>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d107      	bne.n	800eb9c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800eb8c:	79fb      	ldrb	r3, [r7, #7]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7ff ffd4 	bl	800eb3c <SD_CheckStatus>
 800eb94:	4603      	mov	r3, r0
 800eb96:	461a      	mov	r2, r3
 800eb98:	4b04      	ldr	r3, [pc, #16]	@ (800ebac <SD_initialize+0x34>)
 800eb9a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800eb9c:	4b03      	ldr	r3, [pc, #12]	@ (800ebac <SD_initialize+0x34>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	b2db      	uxtb	r3, r3
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	20000009 	.word	0x20000009

0800ebb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ebba:	79fb      	ldrb	r3, [r7, #7]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7ff ffbd 	bl	800eb3c <SD_CheckStatus>
 800ebc2:	4603      	mov	r3, r0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3708      	adds	r7, #8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b086      	sub	sp, #24
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	60b9      	str	r1, [r7, #8]
 800ebd4:	607a      	str	r2, [r7, #4]
 800ebd6:	603b      	str	r3, [r7, #0]
 800ebd8:	4603      	mov	r3, r0
 800ebda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ebe0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ebe4:	f7ff ff8c 	bl	800eb00 <SD_CheckStatusWithTimeout>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	da01      	bge.n	800ebf2 <SD_read+0x26>
  {
    return res;
 800ebee:	7dfb      	ldrb	r3, [r7, #23]
 800ebf0:	e03b      	b.n	800ec6a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	6879      	ldr	r1, [r7, #4]
 800ebf6:	68b8      	ldr	r0, [r7, #8]
 800ebf8:	f7ff fee2 	bl	800e9c0 <BSP_SD_ReadBlocks_DMA>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d132      	bne.n	800ec68 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ec02:	4b1c      	ldr	r3, [pc, #112]	@ (800ec74 <SD_read+0xa8>)
 800ec04:	2200      	movs	r2, #0
 800ec06:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ec08:	f7f4 ff58 	bl	8003abc <HAL_GetTick>
 800ec0c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ec0e:	bf00      	nop
 800ec10:	4b18      	ldr	r3, [pc, #96]	@ (800ec74 <SD_read+0xa8>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d108      	bne.n	800ec2a <SD_read+0x5e>
 800ec18:	f7f4 ff50 	bl	8003abc <HAL_GetTick>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	1ad3      	subs	r3, r2, r3
 800ec22:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d9f2      	bls.n	800ec10 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ec2a:	4b12      	ldr	r3, [pc, #72]	@ (800ec74 <SD_read+0xa8>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d102      	bne.n	800ec38 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ec32:	2301      	movs	r3, #1
 800ec34:	75fb      	strb	r3, [r7, #23]
 800ec36:	e017      	b.n	800ec68 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ec38:	4b0e      	ldr	r3, [pc, #56]	@ (800ec74 <SD_read+0xa8>)
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ec3e:	f7f4 ff3d 	bl	8003abc <HAL_GetTick>
 800ec42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ec44:	e007      	b.n	800ec56 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ec46:	f7ff feef 	bl	800ea28 <BSP_SD_GetCardState>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d102      	bne.n	800ec56 <SD_read+0x8a>
          {
            res = RES_OK;
 800ec50:	2300      	movs	r3, #0
 800ec52:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ec54:	e008      	b.n	800ec68 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ec56:	f7f4 ff31 	bl	8003abc <HAL_GetTick>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d9ee      	bls.n	800ec46 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ec68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3718      	adds	r7, #24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	200008fc 	.word	0x200008fc

0800ec78 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b086      	sub	sp, #24
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60b9      	str	r1, [r7, #8]
 800ec80:	607a      	str	r2, [r7, #4]
 800ec82:	603b      	str	r3, [r7, #0]
 800ec84:	4603      	mov	r3, r0
 800ec86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ec8c:	4b24      	ldr	r3, [pc, #144]	@ (800ed20 <SD_write+0xa8>)
 800ec8e:	2200      	movs	r2, #0
 800ec90:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ec92:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ec96:	f7ff ff33 	bl	800eb00 <SD_CheckStatusWithTimeout>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	da01      	bge.n	800eca4 <SD_write+0x2c>
  {
    return res;
 800eca0:	7dfb      	ldrb	r3, [r7, #23]
 800eca2:	e038      	b.n	800ed16 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800eca4:	683a      	ldr	r2, [r7, #0]
 800eca6:	6879      	ldr	r1, [r7, #4]
 800eca8:	68b8      	ldr	r0, [r7, #8]
 800ecaa:	f7ff fea3 	bl	800e9f4 <BSP_SD_WriteBlocks_DMA>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d12f      	bne.n	800ed14 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ecb4:	f7f4 ff02 	bl	8003abc <HAL_GetTick>
 800ecb8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ecba:	bf00      	nop
 800ecbc:	4b18      	ldr	r3, [pc, #96]	@ (800ed20 <SD_write+0xa8>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d108      	bne.n	800ecd6 <SD_write+0x5e>
 800ecc4:	f7f4 fefa 	bl	8003abc <HAL_GetTick>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	1ad3      	subs	r3, r2, r3
 800ecce:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d9f2      	bls.n	800ecbc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ecd6:	4b12      	ldr	r3, [pc, #72]	@ (800ed20 <SD_write+0xa8>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d102      	bne.n	800ece4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ecde:	2301      	movs	r3, #1
 800ece0:	75fb      	strb	r3, [r7, #23]
 800ece2:	e017      	b.n	800ed14 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ece4:	4b0e      	ldr	r3, [pc, #56]	@ (800ed20 <SD_write+0xa8>)
 800ece6:	2200      	movs	r2, #0
 800ece8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ecea:	f7f4 fee7 	bl	8003abc <HAL_GetTick>
 800ecee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ecf0:	e007      	b.n	800ed02 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ecf2:	f7ff fe99 	bl	800ea28 <BSP_SD_GetCardState>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d102      	bne.n	800ed02 <SD_write+0x8a>
          {
            res = RES_OK;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	75fb      	strb	r3, [r7, #23]
            break;
 800ed00:	e008      	b.n	800ed14 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ed02:	f7f4 fedb 	bl	8003abc <HAL_GetTick>
 800ed06:	4602      	mov	r2, r0
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	1ad3      	subs	r3, r2, r3
 800ed0c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d9ee      	bls.n	800ecf2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ed14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3718      	adds	r7, #24
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	200008f8 	.word	0x200008f8

0800ed24 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b08c      	sub	sp, #48	@ 0x30
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	603a      	str	r2, [r7, #0]
 800ed2e:	71fb      	strb	r3, [r7, #7]
 800ed30:	460b      	mov	r3, r1
 800ed32:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ed34:	2301      	movs	r3, #1
 800ed36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ed3a:	4b25      	ldr	r3, [pc, #148]	@ (800edd0 <SD_ioctl+0xac>)
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	f003 0301 	and.w	r3, r3, #1
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d001      	beq.n	800ed4c <SD_ioctl+0x28>
 800ed48:	2303      	movs	r3, #3
 800ed4a:	e03c      	b.n	800edc6 <SD_ioctl+0xa2>

  switch (cmd)
 800ed4c:	79bb      	ldrb	r3, [r7, #6]
 800ed4e:	2b03      	cmp	r3, #3
 800ed50:	d834      	bhi.n	800edbc <SD_ioctl+0x98>
 800ed52:	a201      	add	r2, pc, #4	@ (adr r2, 800ed58 <SD_ioctl+0x34>)
 800ed54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed58:	0800ed69 	.word	0x0800ed69
 800ed5c:	0800ed71 	.word	0x0800ed71
 800ed60:	0800ed89 	.word	0x0800ed89
 800ed64:	0800eda3 	.word	0x0800eda3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ed6e:	e028      	b.n	800edc2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ed70:	f107 030c 	add.w	r3, r7, #12
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7ff fe67 	bl	800ea48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ed7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ed86:	e01c      	b.n	800edc2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ed88:	f107 030c 	add.w	r3, r7, #12
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7ff fe5b 	bl	800ea48 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ed92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800eda0:	e00f      	b.n	800edc2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eda2:	f107 030c 	add.w	r3, r7, #12
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7ff fe4e 	bl	800ea48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800edac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edae:	0a5a      	lsrs	r2, r3, #9
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800edb4:	2300      	movs	r3, #0
 800edb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800edba:	e002      	b.n	800edc2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800edbc:	2304      	movs	r3, #4
 800edbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800edc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3730      	adds	r7, #48	@ 0x30
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	20000009 	.word	0x20000009

0800edd4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800edd4:	b480      	push	{r7}
 800edd6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800edd8:	4b03      	ldr	r3, [pc, #12]	@ (800ede8 <BSP_SD_WriteCpltCallback+0x14>)
 800edda:	2201      	movs	r2, #1
 800eddc:	601a      	str	r2, [r3, #0]
}
 800edde:	bf00      	nop
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr
 800ede8:	200008f8 	.word	0x200008f8

0800edec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800edec:	b480      	push	{r7}
 800edee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800edf0:	4b03      	ldr	r3, [pc, #12]	@ (800ee00 <BSP_SD_ReadCpltCallback+0x14>)
 800edf2:	2201      	movs	r2, #1
 800edf4:	601a      	str	r2, [r3, #0]
}
 800edf6:	bf00      	nop
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr
 800ee00:	200008fc 	.word	0x200008fc

0800ee04 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ee04:	b590      	push	{r4, r7, lr}
 800ee06:	b089      	sub	sp, #36	@ 0x24
 800ee08:	af04      	add	r7, sp, #16
 800ee0a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	2202      	movs	r2, #2
 800ee10:	2102      	movs	r1, #2
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 fc85 	bl	800f722 <USBH_FindInterface>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ee1c:	7bfb      	ldrb	r3, [r7, #15]
 800ee1e:	2bff      	cmp	r3, #255	@ 0xff
 800ee20:	d002      	beq.n	800ee28 <USBH_CDC_InterfaceInit+0x24>
 800ee22:	7bfb      	ldrb	r3, [r7, #15]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d901      	bls.n	800ee2c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ee28:	2302      	movs	r3, #2
 800ee2a:	e13d      	b.n	800f0a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ee2c:	7bfb      	ldrb	r3, [r7, #15]
 800ee2e:	4619      	mov	r1, r3
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 fc5a 	bl	800f6ea <USBH_SelectInterface>
 800ee36:	4603      	mov	r3, r0
 800ee38:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ee3a:	7bbb      	ldrb	r3, [r7, #14]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ee40:	2302      	movs	r3, #2
 800ee42:	e131      	b.n	800f0a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800ee4a:	2050      	movs	r0, #80	@ 0x50
 800ee4c:	f005 fdc0 	bl	80149d0 <malloc>
 800ee50:	4603      	mov	r3, r0
 800ee52:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ee5a:	69db      	ldr	r3, [r3, #28]
 800ee5c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d101      	bne.n	800ee68 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ee64:	2302      	movs	r3, #2
 800ee66:	e11f      	b.n	800f0a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ee68:	2250      	movs	r2, #80	@ 0x50
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	68b8      	ldr	r0, [r7, #8]
 800ee6e:	f005 ffd2 	bl	8014e16 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	211a      	movs	r1, #26
 800ee78:	fb01 f303 	mul.w	r3, r1, r3
 800ee7c:	4413      	add	r3, r2
 800ee7e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	b25b      	sxtb	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	da15      	bge.n	800eeb6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ee8a:	7bfb      	ldrb	r3, [r7, #15]
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	211a      	movs	r1, #26
 800ee90:	fb01 f303 	mul.w	r3, r1, r3
 800ee94:	4413      	add	r3, r2
 800ee96:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ee9a:	781a      	ldrb	r2, [r3, #0]
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800eea0:	7bfb      	ldrb	r3, [r7, #15]
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	211a      	movs	r1, #26
 800eea6:	fb01 f303 	mul.w	r3, r1, r3
 800eeaa:	4413      	add	r3, r2
 800eeac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800eeb0:	881a      	ldrh	r2, [r3, #0]
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	785b      	ldrb	r3, [r3, #1]
 800eeba:	4619      	mov	r1, r3
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f001 ffbe 	bl	8010e3e <USBH_AllocPipe>
 800eec2:	4603      	mov	r3, r0
 800eec4:	461a      	mov	r2, r3
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	7819      	ldrb	r1, [r3, #0]
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	7858      	ldrb	r0, [r3, #1]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	8952      	ldrh	r2, [r2, #10]
 800eee2:	9202      	str	r2, [sp, #8]
 800eee4:	2203      	movs	r2, #3
 800eee6:	9201      	str	r2, [sp, #4]
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	4623      	mov	r3, r4
 800eeec:	4602      	mov	r2, r0
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f001 ff76 	bl	8010de0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	2200      	movs	r2, #0
 800eefa:	4619      	mov	r1, r3
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f005 fb11 	bl	8014524 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ef02:	2300      	movs	r3, #0
 800ef04:	2200      	movs	r2, #0
 800ef06:	210a      	movs	r1, #10
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f000 fc0a 	bl	800f722 <USBH_FindInterface>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ef12:	7bfb      	ldrb	r3, [r7, #15]
 800ef14:	2bff      	cmp	r3, #255	@ 0xff
 800ef16:	d002      	beq.n	800ef1e <USBH_CDC_InterfaceInit+0x11a>
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d901      	bls.n	800ef22 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ef1e:	2302      	movs	r3, #2
 800ef20:	e0c2      	b.n	800f0a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ef22:	7bfb      	ldrb	r3, [r7, #15]
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	211a      	movs	r1, #26
 800ef28:	fb01 f303 	mul.w	r3, r1, r3
 800ef2c:	4413      	add	r3, r2
 800ef2e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	b25b      	sxtb	r3, r3
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	da16      	bge.n	800ef68 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ef3a:	7bfb      	ldrb	r3, [r7, #15]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	211a      	movs	r1, #26
 800ef40:	fb01 f303 	mul.w	r3, r1, r3
 800ef44:	4413      	add	r3, r2
 800ef46:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ef4a:	781a      	ldrb	r2, [r3, #0]
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ef50:	7bfb      	ldrb	r3, [r7, #15]
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	211a      	movs	r1, #26
 800ef56:	fb01 f303 	mul.w	r3, r1, r3
 800ef5a:	4413      	add	r3, r2
 800ef5c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ef60:	881a      	ldrh	r2, [r3, #0]
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	835a      	strh	r2, [r3, #26]
 800ef66:	e015      	b.n	800ef94 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ef68:	7bfb      	ldrb	r3, [r7, #15]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	211a      	movs	r1, #26
 800ef6e:	fb01 f303 	mul.w	r3, r1, r3
 800ef72:	4413      	add	r3, r2
 800ef74:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ef78:	781a      	ldrb	r2, [r3, #0]
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ef7e:	7bfb      	ldrb	r3, [r7, #15]
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	211a      	movs	r1, #26
 800ef84:	fb01 f303 	mul.w	r3, r1, r3
 800ef88:	4413      	add	r3, r2
 800ef8a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ef8e:	881a      	ldrh	r2, [r3, #0]
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ef94:	7bfb      	ldrb	r3, [r7, #15]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	211a      	movs	r1, #26
 800ef9a:	fb01 f303 	mul.w	r3, r1, r3
 800ef9e:	4413      	add	r3, r2
 800efa0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	b25b      	sxtb	r3, r3
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	da16      	bge.n	800efda <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800efac:	7bfb      	ldrb	r3, [r7, #15]
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	211a      	movs	r1, #26
 800efb2:	fb01 f303 	mul.w	r3, r1, r3
 800efb6:	4413      	add	r3, r2
 800efb8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800efbc:	781a      	ldrb	r2, [r3, #0]
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800efc2:	7bfb      	ldrb	r3, [r7, #15]
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	211a      	movs	r1, #26
 800efc8:	fb01 f303 	mul.w	r3, r1, r3
 800efcc:	4413      	add	r3, r2
 800efce:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800efd2:	881a      	ldrh	r2, [r3, #0]
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	835a      	strh	r2, [r3, #26]
 800efd8:	e015      	b.n	800f006 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800efda:	7bfb      	ldrb	r3, [r7, #15]
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	211a      	movs	r1, #26
 800efe0:	fb01 f303 	mul.w	r3, r1, r3
 800efe4:	4413      	add	r3, r2
 800efe6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800efea:	781a      	ldrb	r2, [r3, #0]
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800eff0:	7bfb      	ldrb	r3, [r7, #15]
 800eff2:	687a      	ldr	r2, [r7, #4]
 800eff4:	211a      	movs	r1, #26
 800eff6:	fb01 f303 	mul.w	r3, r1, r3
 800effa:	4413      	add	r3, r2
 800effc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f000:	881a      	ldrh	r2, [r3, #0]
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	7b9b      	ldrb	r3, [r3, #14]
 800f00a:	4619      	mov	r1, r3
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f001 ff16 	bl	8010e3e <USBH_AllocPipe>
 800f012:	4603      	mov	r3, r0
 800f014:	461a      	mov	r2, r3
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	7bdb      	ldrb	r3, [r3, #15]
 800f01e:	4619      	mov	r1, r3
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f001 ff0c 	bl	8010e3e <USBH_AllocPipe>
 800f026:	4603      	mov	r3, r0
 800f028:	461a      	mov	r2, r3
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	7b59      	ldrb	r1, [r3, #13]
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	7b98      	ldrb	r0, [r3, #14]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f042:	68ba      	ldr	r2, [r7, #8]
 800f044:	8b12      	ldrh	r2, [r2, #24]
 800f046:	9202      	str	r2, [sp, #8]
 800f048:	2202      	movs	r2, #2
 800f04a:	9201      	str	r2, [sp, #4]
 800f04c:	9300      	str	r3, [sp, #0]
 800f04e:	4623      	mov	r3, r4
 800f050:	4602      	mov	r2, r0
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f001 fec4 	bl	8010de0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	7b19      	ldrb	r1, [r3, #12]
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	7bd8      	ldrb	r0, [r3, #15]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f06c:	68ba      	ldr	r2, [r7, #8]
 800f06e:	8b52      	ldrh	r2, [r2, #26]
 800f070:	9202      	str	r2, [sp, #8]
 800f072:	2202      	movs	r2, #2
 800f074:	9201      	str	r2, [sp, #4]
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	4623      	mov	r3, r4
 800f07a:	4602      	mov	r2, r0
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f001 feaf 	bl	8010de0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	2200      	movs	r2, #0
 800f086:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	7b5b      	ldrb	r3, [r3, #13]
 800f08e:	2200      	movs	r2, #0
 800f090:	4619      	mov	r1, r3
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f005 fa46 	bl	8014524 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	7b1b      	ldrb	r3, [r3, #12]
 800f09c:	2200      	movs	r2, #0
 800f09e:	4619      	mov	r1, r3
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f005 fa3f 	bl	8014524 <USBH_LL_SetToggle>

  return USBH_OK;
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3714      	adds	r7, #20
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd90      	pop	{r4, r7, pc}

0800f0b0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f0be:	69db      	ldr	r3, [r3, #28]
 800f0c0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00e      	beq.n	800f0e8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f001 fea4 	bl	8010e1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f001 fecf 	bl	8010e80 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	7b1b      	ldrb	r3, [r3, #12]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00e      	beq.n	800f10e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	7b1b      	ldrb	r3, [r3, #12]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f001 fe91 	bl	8010e1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	7b1b      	ldrb	r3, [r3, #12]
 800f100:	4619      	mov	r1, r3
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f001 febc 	bl	8010e80 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2200      	movs	r2, #0
 800f10c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	7b5b      	ldrb	r3, [r3, #13]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d00e      	beq.n	800f134 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	7b5b      	ldrb	r3, [r3, #13]
 800f11a:	4619      	mov	r1, r3
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f001 fe7e 	bl	8010e1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	7b5b      	ldrb	r3, [r3, #13]
 800f126:	4619      	mov	r1, r3
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f001 fea9 	bl	8010e80 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2200      	movs	r2, #0
 800f132:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f13a:	69db      	ldr	r3, [r3, #28]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d00b      	beq.n	800f158 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f146:	69db      	ldr	r3, [r3, #28]
 800f148:	4618      	mov	r0, r3
 800f14a:	f005 fc49 	bl	80149e0 <free>
    phost->pActiveClass->pData = 0U;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f154:	2200      	movs	r2, #0
 800f156:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b084      	sub	sp, #16
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f170:	69db      	ldr	r3, [r3, #28]
 800f172:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	3340      	adds	r3, #64	@ 0x40
 800f178:	4619      	mov	r1, r3
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 f8b1 	bl	800f2e2 <GetLineCoding>
 800f180:	4603      	mov	r3, r0
 800f182:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f184:	7afb      	ldrb	r3, [r7, #11]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d105      	bne.n	800f196 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f190:	2102      	movs	r1, #2
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f196:	7afb      	ldrb	r3, [r7, #11]
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3710      	adds	r7, #16
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f1b6:	69db      	ldr	r3, [r3, #28]
 800f1b8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f1c0:	2b04      	cmp	r3, #4
 800f1c2:	d877      	bhi.n	800f2b4 <USBH_CDC_Process+0x114>
 800f1c4:	a201      	add	r2, pc, #4	@ (adr r2, 800f1cc <USBH_CDC_Process+0x2c>)
 800f1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ca:	bf00      	nop
 800f1cc:	0800f1e1 	.word	0x0800f1e1
 800f1d0:	0800f1e7 	.word	0x0800f1e7
 800f1d4:	0800f217 	.word	0x0800f217
 800f1d8:	0800f28b 	.word	0x0800f28b
 800f1dc:	0800f299 	.word	0x0800f299
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800f1e4:	e06d      	b.n	800f2c2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 f897 	bl	800f320 <SetLineCoding>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f1f6:	7bbb      	ldrb	r3, [r7, #14]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d104      	bne.n	800f206 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	2202      	movs	r2, #2
 800f200:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f204:	e058      	b.n	800f2b8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f206:	7bbb      	ldrb	r3, [r7, #14]
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d055      	beq.n	800f2b8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	2204      	movs	r2, #4
 800f210:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f214:	e050      	b.n	800f2b8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	3340      	adds	r3, #64	@ 0x40
 800f21a:	4619      	mov	r1, r3
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 f860 	bl	800f2e2 <GetLineCoding>
 800f222:	4603      	mov	r3, r0
 800f224:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f226:	7bbb      	ldrb	r3, [r7, #14]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d126      	bne.n	800f27a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2200      	movs	r2, #0
 800f230:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f23e:	791b      	ldrb	r3, [r3, #4]
 800f240:	429a      	cmp	r2, r3
 800f242:	d13b      	bne.n	800f2bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f24e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f250:	429a      	cmp	r2, r3
 800f252:	d133      	bne.n	800f2bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f25e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f260:	429a      	cmp	r2, r3
 800f262:	d12b      	bne.n	800f2bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f26c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f26e:	429a      	cmp	r2, r3
 800f270:	d124      	bne.n	800f2bc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 f958 	bl	800f528 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f278:	e020      	b.n	800f2bc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f27a:	7bbb      	ldrb	r3, [r7, #14]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d01d      	beq.n	800f2bc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	2204      	movs	r2, #4
 800f284:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f288:	e018      	b.n	800f2bc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 f867 	bl	800f35e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 f8da 	bl	800f44a <CDC_ProcessReception>
      break;
 800f296:	e014      	b.n	800f2c2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f298:	2100      	movs	r1, #0
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f001 f81a 	bl	80102d4 <USBH_ClrFeature>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f2a4:	7bbb      	ldrb	r3, [r7, #14]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10a      	bne.n	800f2c0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800f2b2:	e005      	b.n	800f2c0 <USBH_CDC_Process+0x120>

    default:
      break;
 800f2b4:	bf00      	nop
 800f2b6:	e004      	b.n	800f2c2 <USBH_CDC_Process+0x122>
      break;
 800f2b8:	bf00      	nop
 800f2ba:	e002      	b.n	800f2c2 <USBH_CDC_Process+0x122>
      break;
 800f2bc:	bf00      	nop
 800f2be:	e000      	b.n	800f2c2 <USBH_CDC_Process+0x122>
      break;
 800f2c0:	bf00      	nop

  }

  return status;
 800f2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3710      	adds	r7, #16
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	370c      	adds	r7, #12
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr

0800f2e2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b082      	sub	sp, #8
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
 800f2ea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	22a1      	movs	r2, #161	@ 0xa1
 800f2f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2221      	movs	r2, #33	@ 0x21
 800f2f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2200      	movs	r2, #0
 800f302:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2207      	movs	r2, #7
 800f308:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	2207      	movs	r2, #7
 800f30e:	4619      	mov	r1, r3
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f001 fb14 	bl	801093e <USBH_CtlReq>
 800f316:	4603      	mov	r3, r0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3708      	adds	r7, #8
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2221      	movs	r2, #33	@ 0x21
 800f32e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2220      	movs	r2, #32
 800f334:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2200      	movs	r2, #0
 800f33a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2207      	movs	r2, #7
 800f346:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	2207      	movs	r2, #7
 800f34c:	4619      	mov	r1, r3
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f001 faf5 	bl	801093e <USBH_CtlReq>
 800f354:	4603      	mov	r3, r0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b086      	sub	sp, #24
 800f362:	af02      	add	r7, sp, #8
 800f364:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f36c:	69db      	ldr	r3, [r3, #28]
 800f36e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f370:	2300      	movs	r3, #0
 800f372:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d002      	beq.n	800f384 <CDC_ProcessTransmission+0x26>
 800f37e:	2b02      	cmp	r3, #2
 800f380:	d023      	beq.n	800f3ca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f382:	e05e      	b.n	800f442 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f388:	68fa      	ldr	r2, [r7, #12]
 800f38a:	8b12      	ldrh	r2, [r2, #24]
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d90b      	bls.n	800f3a8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	69d9      	ldr	r1, [r3, #28]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	8b1a      	ldrh	r2, [r3, #24]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	7b5b      	ldrb	r3, [r3, #13]
 800f39c:	2001      	movs	r0, #1
 800f39e:	9000      	str	r0, [sp, #0]
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f001 fcda 	bl	8010d5a <USBH_BulkSendData>
 800f3a6:	e00b      	b.n	800f3c0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	7b5b      	ldrb	r3, [r3, #13]
 800f3b6:	2001      	movs	r0, #1
 800f3b8:	9000      	str	r0, [sp, #0]
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f001 fccd 	bl	8010d5a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2202      	movs	r2, #2
 800f3c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800f3c8:	e03b      	b.n	800f442 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	7b5b      	ldrb	r3, [r3, #13]
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f005 f87d 	bl	80144d0 <USBH_LL_GetURBState>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f3da:	7afb      	ldrb	r3, [r7, #11]
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d128      	bne.n	800f432 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	8b12      	ldrh	r2, [r2, #24]
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d90e      	bls.n	800f40a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3f0:	68fa      	ldr	r2, [r7, #12]
 800f3f2:	8b12      	ldrh	r2, [r2, #24]
 800f3f4:	1a9a      	subs	r2, r3, r2
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	69db      	ldr	r3, [r3, #28]
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	8b12      	ldrh	r2, [r2, #24]
 800f402:	441a      	add	r2, r3
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	61da      	str	r2, [r3, #28]
 800f408:	e002      	b.n	800f410 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2200      	movs	r2, #0
 800f40e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f414:	2b00      	cmp	r3, #0
 800f416:	d004      	beq.n	800f422 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2201      	movs	r2, #1
 800f41c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800f420:	e00e      	b.n	800f440 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	2200      	movs	r2, #0
 800f426:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f868 	bl	800f500 <USBH_CDC_TransmitCallback>
      break;
 800f430:	e006      	b.n	800f440 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800f432:	7afb      	ldrb	r3, [r7, #11]
 800f434:	2b02      	cmp	r3, #2
 800f436:	d103      	bne.n	800f440 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2201      	movs	r2, #1
 800f43c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800f440:	bf00      	nop
  }
}
 800f442:	bf00      	nop
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b086      	sub	sp, #24
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f458:	69db      	ldr	r3, [r3, #28]
 800f45a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f45c:	2300      	movs	r3, #0
 800f45e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800f466:	2b03      	cmp	r3, #3
 800f468:	d002      	beq.n	800f470 <CDC_ProcessReception+0x26>
 800f46a:	2b04      	cmp	r3, #4
 800f46c:	d00e      	beq.n	800f48c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f46e:	e043      	b.n	800f4f8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	6a19      	ldr	r1, [r3, #32]
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	8b5a      	ldrh	r2, [r3, #26]
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	7b1b      	ldrb	r3, [r3, #12]
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f001 fc91 	bl	8010da4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	2204      	movs	r2, #4
 800f486:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800f48a:	e035      	b.n	800f4f8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	7b1b      	ldrb	r3, [r3, #12]
 800f490:	4619      	mov	r1, r3
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f005 f81c 	bl	80144d0 <USBH_LL_GetURBState>
 800f498:	4603      	mov	r3, r0
 800f49a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f49c:	7cfb      	ldrb	r3, [r7, #19]
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d129      	bne.n	800f4f6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	7b1b      	ldrb	r3, [r3, #12]
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f004 ff7f 	bl	80143ac <USBH_LL_GetLastXferSize>
 800f4ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d016      	beq.n	800f4e8 <CDC_ProcessReception+0x9e>
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	8b5b      	ldrh	r3, [r3, #26]
 800f4be:	461a      	mov	r2, r3
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d110      	bne.n	800f4e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	1ad2      	subs	r2, r2, r3
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	6a1a      	ldr	r2, [r3, #32]
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	441a      	add	r2, r3
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	2203      	movs	r2, #3
 800f4e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800f4e6:	e006      	b.n	800f4f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 f80f 	bl	800f514 <USBH_CDC_ReceiveCallback>
      break;
 800f4f6:	bf00      	nop
  }
}
 800f4f8:	bf00      	nop
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f508:	bf00      	nop
 800f50a:	370c      	adds	r7, #12
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr

0800f514 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f51c:	bf00      	nop
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr

0800f528 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f530:	bf00      	nop
 800f532:	370c      	adds	r7, #12
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr

0800f53c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	4613      	mov	r3, r2
 800f548:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d101      	bne.n	800f554 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f550:	2302      	movs	r3, #2
 800f552:	e029      	b.n	800f5a8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	79fa      	ldrb	r2, [r7, #7]
 800f558:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2200      	movs	r2, #0
 800f560:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2200      	movs	r2, #0
 800f568:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f000 f81f 	bl	800f5b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2200      	movs	r2, #0
 800f576:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2200      	movs	r2, #0
 800f57e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2200      	movs	r2, #0
 800f58e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d003      	beq.n	800f5a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	68ba      	ldr	r2, [r7, #8]
 800f59c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f004 fe4f 	bl	8014244 <USBH_LL_Init>

  return USBH_OK;
 800f5a6:	2300      	movs	r3, #0
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3710      	adds	r7, #16
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f5bc:	2300      	movs	r3, #0
 800f5be:	60fb      	str	r3, [r7, #12]
 800f5c0:	e009      	b.n	800f5d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	33e0      	adds	r3, #224	@ 0xe0
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	4413      	add	r3, r2
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	60fb      	str	r3, [r7, #12]
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2b0f      	cmp	r3, #15
 800f5da:	d9f2      	bls.n	800f5c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f5dc:	2300      	movs	r3, #0
 800f5de:	60fb      	str	r3, [r7, #12]
 800f5e0:	e009      	b.n	800f5f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	60fb      	str	r3, [r7, #12]
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f5fc:	d3f1      	bcc.n	800f5e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2201      	movs	r2, #1
 800f60e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2200      	movs	r2, #0
 800f614:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2201      	movs	r2, #1
 800f61c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2240      	movs	r2, #64	@ 0x40
 800f622:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2200      	movs	r2, #0
 800f628:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2200      	movs	r2, #0
 800f62e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2201      	movs	r2, #1
 800f636:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2200      	movs	r2, #0
 800f646:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	331c      	adds	r3, #28
 800f64e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f652:	2100      	movs	r1, #0
 800f654:	4618      	mov	r0, r3
 800f656:	f005 fbde 	bl	8014e16 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f664:	2100      	movs	r1, #0
 800f666:	4618      	mov	r0, r3
 800f668:	f005 fbd5 	bl	8014e16 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800f672:	2212      	movs	r2, #18
 800f674:	2100      	movs	r1, #0
 800f676:	4618      	mov	r0, r3
 800f678:	f005 fbcd 	bl	8014e16 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f682:	223e      	movs	r2, #62	@ 0x3e
 800f684:	2100      	movs	r1, #0
 800f686:	4618      	mov	r0, r3
 800f688:	f005 fbc5 	bl	8014e16 <memset>

  return USBH_OK;
 800f68c:	2300      	movs	r3, #0
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3710      	adds	r7, #16
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f696:	b480      	push	{r7}
 800f698:	b085      	sub	sp, #20
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]
 800f69e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d016      	beq.n	800f6d8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d10e      	bne.n	800f6d2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f6ba:	1c59      	adds	r1, r3, #1
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	33de      	adds	r3, #222	@ 0xde
 800f6c6:	6839      	ldr	r1, [r7, #0]
 800f6c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	73fb      	strb	r3, [r7, #15]
 800f6d0:	e004      	b.n	800f6dc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f6d2:	2302      	movs	r3, #2
 800f6d4:	73fb      	strb	r3, [r7, #15]
 800f6d6:	e001      	b.n	800f6dc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f6d8:	2302      	movs	r3, #2
 800f6da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3714      	adds	r7, #20
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr

0800f6ea <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f6ea:	b480      	push	{r7}
 800f6ec:	b085      	sub	sp, #20
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800f700:	78fa      	ldrb	r2, [r7, #3]
 800f702:	429a      	cmp	r2, r3
 800f704:	d204      	bcs.n	800f710 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	78fa      	ldrb	r2, [r7, #3]
 800f70a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800f70e:	e001      	b.n	800f714 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f710:	2302      	movs	r3, #2
 800f712:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f714:	7bfb      	ldrb	r3, [r7, #15]
}
 800f716:	4618      	mov	r0, r3
 800f718:	3714      	adds	r7, #20
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f722:	b480      	push	{r7}
 800f724:	b087      	sub	sp, #28
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	4608      	mov	r0, r1
 800f72c:	4611      	mov	r1, r2
 800f72e:	461a      	mov	r2, r3
 800f730:	4603      	mov	r3, r0
 800f732:	70fb      	strb	r3, [r7, #3]
 800f734:	460b      	mov	r3, r1
 800f736:	70bb      	strb	r3, [r7, #2]
 800f738:	4613      	mov	r3, r2
 800f73a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f73c:	2300      	movs	r3, #0
 800f73e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f740:	2300      	movs	r3, #0
 800f742:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800f74a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f74c:	e025      	b.n	800f79a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f74e:	7dfb      	ldrb	r3, [r7, #23]
 800f750:	221a      	movs	r2, #26
 800f752:	fb02 f303 	mul.w	r3, r2, r3
 800f756:	3308      	adds	r3, #8
 800f758:	68fa      	ldr	r2, [r7, #12]
 800f75a:	4413      	add	r3, r2
 800f75c:	3302      	adds	r3, #2
 800f75e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	795b      	ldrb	r3, [r3, #5]
 800f764:	78fa      	ldrb	r2, [r7, #3]
 800f766:	429a      	cmp	r2, r3
 800f768:	d002      	beq.n	800f770 <USBH_FindInterface+0x4e>
 800f76a:	78fb      	ldrb	r3, [r7, #3]
 800f76c:	2bff      	cmp	r3, #255	@ 0xff
 800f76e:	d111      	bne.n	800f794 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f774:	78ba      	ldrb	r2, [r7, #2]
 800f776:	429a      	cmp	r2, r3
 800f778:	d002      	beq.n	800f780 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f77a:	78bb      	ldrb	r3, [r7, #2]
 800f77c:	2bff      	cmp	r3, #255	@ 0xff
 800f77e:	d109      	bne.n	800f794 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f784:	787a      	ldrb	r2, [r7, #1]
 800f786:	429a      	cmp	r2, r3
 800f788:	d002      	beq.n	800f790 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f78a:	787b      	ldrb	r3, [r7, #1]
 800f78c:	2bff      	cmp	r3, #255	@ 0xff
 800f78e:	d101      	bne.n	800f794 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f790:	7dfb      	ldrb	r3, [r7, #23]
 800f792:	e006      	b.n	800f7a2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f794:	7dfb      	ldrb	r3, [r7, #23]
 800f796:	3301      	adds	r3, #1
 800f798:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f79a:	7dfb      	ldrb	r3, [r7, #23]
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d9d6      	bls.n	800f74e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f7a0:	23ff      	movs	r3, #255	@ 0xff
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	371c      	adds	r7, #28
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr

0800f7ae <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b082      	sub	sp, #8
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f004 fd80 	bl	80142bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f7bc:	2101      	movs	r1, #1
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f004 fe99 	bl	80144f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
	...

0800f7d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b088      	sub	sp, #32
 800f7d4:	af04      	add	r7, sp, #16
 800f7d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f7d8:	2302      	movs	r3, #2
 800f7da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d102      	bne.n	800f7f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2203      	movs	r2, #3
 800f7f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	2b0b      	cmp	r3, #11
 800f7fa:	f200 81bb 	bhi.w	800fb74 <USBH_Process+0x3a4>
 800f7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800f804 <USBH_Process+0x34>)
 800f800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f804:	0800f835 	.word	0x0800f835
 800f808:	0800f867 	.word	0x0800f867
 800f80c:	0800f8cf 	.word	0x0800f8cf
 800f810:	0800fb0f 	.word	0x0800fb0f
 800f814:	0800fb75 	.word	0x0800fb75
 800f818:	0800f96f 	.word	0x0800f96f
 800f81c:	0800fab5 	.word	0x0800fab5
 800f820:	0800f9a5 	.word	0x0800f9a5
 800f824:	0800f9c5 	.word	0x0800f9c5
 800f828:	0800f9e3 	.word	0x0800f9e3
 800f82c:	0800fa27 	.word	0x0800fa27
 800f830:	0800faf7 	.word	0x0800faf7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	f000 819b 	beq.w	800fb78 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2201      	movs	r2, #1
 800f846:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f848:	20c8      	movs	r0, #200	@ 0xc8
 800f84a:	f004 fe9e 	bl	801458a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f004 fd91 	bl	8014376 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2200      	movs	r2, #0
 800f860:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f864:	e188      	b.n	800fb78 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d107      	bne.n	800f880 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2200      	movs	r2, #0
 800f874:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2202      	movs	r2, #2
 800f87c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f87e:	e18a      	b.n	800fb96 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f886:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f88a:	d914      	bls.n	800f8b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f892:	3301      	adds	r3, #1
 800f894:	b2da      	uxtb	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f8a2:	2b03      	cmp	r3, #3
 800f8a4:	d903      	bls.n	800f8ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	220d      	movs	r2, #13
 800f8aa:	701a      	strb	r2, [r3, #0]
      break;
 800f8ac:	e173      	b.n	800fb96 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	701a      	strb	r2, [r3, #0]
      break;
 800f8b4:	e16f      	b.n	800fb96 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f8bc:	f103 020a 	add.w	r2, r3, #10
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800f8c6:	200a      	movs	r0, #10
 800f8c8:	f004 fe5f 	bl	801458a <USBH_Delay>
      break;
 800f8cc:	e163      	b.n	800fb96 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d005      	beq.n	800f8e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f8de:	2104      	movs	r1, #4
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f8e4:	2064      	movs	r0, #100	@ 0x64
 800f8e6:	f004 fe50 	bl	801458a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f004 fd1c 	bl	8014328 <USBH_LL_GetSpeed>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2205      	movs	r2, #5
 800f8fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f900:	2100      	movs	r1, #0
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f001 fa9b 	bl	8010e3e <USBH_AllocPipe>
 800f908:	4603      	mov	r3, r0
 800f90a:	461a      	mov	r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f910:	2180      	movs	r1, #128	@ 0x80
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f001 fa93 	bl	8010e3e <USBH_AllocPipe>
 800f918:	4603      	mov	r3, r0
 800f91a:	461a      	mov	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	7919      	ldrb	r1, [r3, #4]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f934:	9202      	str	r2, [sp, #8]
 800f936:	2200      	movs	r2, #0
 800f938:	9201      	str	r2, [sp, #4]
 800f93a:	9300      	str	r3, [sp, #0]
 800f93c:	4603      	mov	r3, r0
 800f93e:	2280      	movs	r2, #128	@ 0x80
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f001 fa4d 	bl	8010de0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	7959      	ldrb	r1, [r3, #5]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f95a:	9202      	str	r2, [sp, #8]
 800f95c:	2200      	movs	r2, #0
 800f95e:	9201      	str	r2, [sp, #4]
 800f960:	9300      	str	r3, [sp, #0]
 800f962:	4603      	mov	r3, r0
 800f964:	2200      	movs	r2, #0
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f001 fa3a 	bl	8010de0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f96c:	e113      	b.n	800fb96 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 f916 	bl	800fba0 <USBH_HandleEnum>
 800f974:	4603      	mov	r3, r0
 800f976:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f978:	7bbb      	ldrb	r3, [r7, #14]
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	f040 80fd 	bne.w	800fb7c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2200      	movs	r2, #0
 800f986:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800f990:	2b01      	cmp	r3, #1
 800f992:	d103      	bne.n	800f99c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2208      	movs	r2, #8
 800f998:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f99a:	e0ef      	b.n	800fb7c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2207      	movs	r2, #7
 800f9a0:	701a      	strb	r2, [r3, #0]
      break;
 800f9a2:	e0eb      	b.n	800fb7c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	f000 80e8 	beq.w	800fb80 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f9b6:	2101      	movs	r1, #1
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2208      	movs	r2, #8
 800f9c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800f9c2:	e0dd      	b.n	800fb80 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f000 fc3a 	bl	8010246 <USBH_SetCfg>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	f040 80d5 	bne.w	800fb84 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2209      	movs	r2, #9
 800f9de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f9e0:	e0d0      	b.n	800fb84 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800f9e8:	f003 0320 	and.w	r3, r3, #32
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d016      	beq.n	800fa1e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800f9f0:	2101      	movs	r1, #1
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 fc4a 	bl	801028c <USBH_SetFeature>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f9fc:	7bbb      	ldrb	r3, [r7, #14]
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d103      	bne.n	800fa0c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	220a      	movs	r2, #10
 800fa08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fa0a:	e0bd      	b.n	800fb88 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800fa0c:	7bbb      	ldrb	r3, [r7, #14]
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	2b03      	cmp	r3, #3
 800fa12:	f040 80b9 	bne.w	800fb88 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	220a      	movs	r2, #10
 800fa1a:	701a      	strb	r2, [r3, #0]
      break;
 800fa1c:	e0b4      	b.n	800fb88 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	220a      	movs	r2, #10
 800fa22:	701a      	strb	r2, [r3, #0]
      break;
 800fa24:	e0b0      	b.n	800fb88 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	f000 80ad 	beq.w	800fb8c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	73fb      	strb	r3, [r7, #15]
 800fa3e:	e016      	b.n	800fa6e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800fa40:	7bfa      	ldrb	r2, [r7, #15]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	32de      	adds	r2, #222	@ 0xde
 800fa46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa4a:	791a      	ldrb	r2, [r3, #4]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d108      	bne.n	800fa68 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800fa56:	7bfa      	ldrb	r2, [r7, #15]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	32de      	adds	r2, #222	@ 0xde
 800fa5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800fa66:	e005      	b.n	800fa74 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fa68:	7bfb      	ldrb	r3, [r7, #15]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	73fb      	strb	r3, [r7, #15]
 800fa6e:	7bfb      	ldrb	r3, [r7, #15]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d0e5      	beq.n	800fa40 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d016      	beq.n	800faac <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fa84:	689b      	ldr	r3, [r3, #8]
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	4798      	blx	r3
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d109      	bne.n	800faa4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2206      	movs	r2, #6
 800fa94:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fa9c:	2103      	movs	r1, #3
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800faa2:	e073      	b.n	800fb8c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	220d      	movs	r2, #13
 800faa8:	701a      	strb	r2, [r3, #0]
      break;
 800faaa:	e06f      	b.n	800fb8c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	220d      	movs	r2, #13
 800fab0:	701a      	strb	r2, [r3, #0]
      break;
 800fab2:	e06b      	b.n	800fb8c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d017      	beq.n	800faee <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fac4:	691b      	ldr	r3, [r3, #16]
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	4798      	blx	r3
 800faca:	4603      	mov	r3, r0
 800facc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800face:	7bbb      	ldrb	r3, [r7, #14]
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d103      	bne.n	800fade <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	220b      	movs	r2, #11
 800fada:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fadc:	e058      	b.n	800fb90 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800fade:	7bbb      	ldrb	r3, [r7, #14]
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	2b02      	cmp	r3, #2
 800fae4:	d154      	bne.n	800fb90 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	220d      	movs	r2, #13
 800faea:	701a      	strb	r2, [r3, #0]
      break;
 800faec:	e050      	b.n	800fb90 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	220d      	movs	r2, #13
 800faf2:	701a      	strb	r2, [r3, #0]
      break;
 800faf4:	e04c      	b.n	800fb90 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d049      	beq.n	800fb94 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fb06:	695b      	ldr	r3, [r3, #20]
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	4798      	blx	r3
      }
      break;
 800fb0c:	e042      	b.n	800fb94 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2200      	movs	r2, #0
 800fb12:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f7ff fd4a 	bl	800f5b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d009      	beq.n	800fb3a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fb2c:	68db      	ldr	r3, [r3, #12]
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2200      	movs	r2, #0
 800fb36:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d005      	beq.n	800fb50 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fb4a:	2105      	movs	r1, #5
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d107      	bne.n	800fb6c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f7ff fe22 	bl	800f7ae <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fb6a:	e014      	b.n	800fb96 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f004 fba5 	bl	80142bc <USBH_LL_Start>
      break;
 800fb72:	e010      	b.n	800fb96 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800fb74:	bf00      	nop
 800fb76:	e00e      	b.n	800fb96 <USBH_Process+0x3c6>
      break;
 800fb78:	bf00      	nop
 800fb7a:	e00c      	b.n	800fb96 <USBH_Process+0x3c6>
      break;
 800fb7c:	bf00      	nop
 800fb7e:	e00a      	b.n	800fb96 <USBH_Process+0x3c6>
    break;
 800fb80:	bf00      	nop
 800fb82:	e008      	b.n	800fb96 <USBH_Process+0x3c6>
      break;
 800fb84:	bf00      	nop
 800fb86:	e006      	b.n	800fb96 <USBH_Process+0x3c6>
      break;
 800fb88:	bf00      	nop
 800fb8a:	e004      	b.n	800fb96 <USBH_Process+0x3c6>
      break;
 800fb8c:	bf00      	nop
 800fb8e:	e002      	b.n	800fb96 <USBH_Process+0x3c6>
      break;
 800fb90:	bf00      	nop
 800fb92:	e000      	b.n	800fb96 <USBH_Process+0x3c6>
      break;
 800fb94:	bf00      	nop
  }
  return USBH_OK;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b088      	sub	sp, #32
 800fba4:	af04      	add	r7, sp, #16
 800fba6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800fbac:	2301      	movs	r3, #1
 800fbae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	785b      	ldrb	r3, [r3, #1]
 800fbb4:	2b07      	cmp	r3, #7
 800fbb6:	f200 81bd 	bhi.w	800ff34 <USBH_HandleEnum+0x394>
 800fbba:	a201      	add	r2, pc, #4	@ (adr r2, 800fbc0 <USBH_HandleEnum+0x20>)
 800fbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc0:	0800fbe1 	.word	0x0800fbe1
 800fbc4:	0800fc9b 	.word	0x0800fc9b
 800fbc8:	0800fd05 	.word	0x0800fd05
 800fbcc:	0800fd8f 	.word	0x0800fd8f
 800fbd0:	0800fdf9 	.word	0x0800fdf9
 800fbd4:	0800fe69 	.word	0x0800fe69
 800fbd8:	0800feaf 	.word	0x0800feaf
 800fbdc:	0800fef5 	.word	0x0800fef5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fbe0:	2108      	movs	r1, #8
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f000 fa4c 	bl	8010080 <USBH_Get_DevDesc>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fbec:	7bbb      	ldrb	r3, [r7, #14]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d12e      	bne.n	800fc50 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	7919      	ldrb	r1, [r3, #4]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fc16:	9202      	str	r2, [sp, #8]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	9201      	str	r2, [sp, #4]
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	4603      	mov	r3, r0
 800fc20:	2280      	movs	r2, #128	@ 0x80
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f001 f8dc 	bl	8010de0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	7959      	ldrb	r1, [r3, #5]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fc3c:	9202      	str	r2, [sp, #8]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	9201      	str	r2, [sp, #4]
 800fc42:	9300      	str	r3, [sp, #0]
 800fc44:	4603      	mov	r3, r0
 800fc46:	2200      	movs	r2, #0
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f001 f8c9 	bl	8010de0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fc4e:	e173      	b.n	800ff38 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fc50:	7bbb      	ldrb	r3, [r7, #14]
 800fc52:	2b03      	cmp	r3, #3
 800fc54:	f040 8170 	bne.w	800ff38 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fc5e:	3301      	adds	r3, #1
 800fc60:	b2da      	uxtb	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fc6e:	2b03      	cmp	r3, #3
 800fc70:	d903      	bls.n	800fc7a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	220d      	movs	r2, #13
 800fc76:	701a      	strb	r2, [r3, #0]
      break;
 800fc78:	e15e      	b.n	800ff38 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	795b      	ldrb	r3, [r3, #5]
 800fc7e:	4619      	mov	r1, r3
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f001 f8fd 	bl	8010e80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	791b      	ldrb	r3, [r3, #4]
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f001 f8f7 	bl	8010e80 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	701a      	strb	r2, [r3, #0]
      break;
 800fc98:	e14e      	b.n	800ff38 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fc9a:	2112      	movs	r1, #18
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f000 f9ef 	bl	8010080 <USBH_Get_DevDesc>
 800fca2:	4603      	mov	r3, r0
 800fca4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fca6:	7bbb      	ldrb	r3, [r7, #14]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d103      	bne.n	800fcb4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2202      	movs	r2, #2
 800fcb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fcb2:	e143      	b.n	800ff3c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fcb4:	7bbb      	ldrb	r3, [r7, #14]
 800fcb6:	2b03      	cmp	r3, #3
 800fcb8:	f040 8140 	bne.w	800ff3c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	b2da      	uxtb	r2, r3
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fcd2:	2b03      	cmp	r3, #3
 800fcd4:	d903      	bls.n	800fcde <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	220d      	movs	r2, #13
 800fcda:	701a      	strb	r2, [r3, #0]
      break;
 800fcdc:	e12e      	b.n	800ff3c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	795b      	ldrb	r3, [r3, #5]
 800fce2:	4619      	mov	r1, r3
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f001 f8cb 	bl	8010e80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	791b      	ldrb	r3, [r3, #4]
 800fcee:	4619      	mov	r1, r3
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f001 f8c5 	bl	8010e80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	701a      	strb	r2, [r3, #0]
      break;
 800fd02:	e11b      	b.n	800ff3c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800fd04:	2101      	movs	r1, #1
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 fa79 	bl	80101fe <USBH_SetAddress>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fd10:	7bbb      	ldrb	r3, [r7, #14]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d130      	bne.n	800fd78 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800fd16:	2002      	movs	r0, #2
 800fd18:	f004 fc37 	bl	801458a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2201      	movs	r2, #1
 800fd20:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2203      	movs	r2, #3
 800fd28:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	7919      	ldrb	r1, [r3, #4]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fd3e:	9202      	str	r2, [sp, #8]
 800fd40:	2200      	movs	r2, #0
 800fd42:	9201      	str	r2, [sp, #4]
 800fd44:	9300      	str	r3, [sp, #0]
 800fd46:	4603      	mov	r3, r0
 800fd48:	2280      	movs	r2, #128	@ 0x80
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f001 f848 	bl	8010de0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	7959      	ldrb	r1, [r3, #5]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fd64:	9202      	str	r2, [sp, #8]
 800fd66:	2200      	movs	r2, #0
 800fd68:	9201      	str	r2, [sp, #4]
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2200      	movs	r2, #0
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f001 f835 	bl	8010de0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fd76:	e0e3      	b.n	800ff40 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fd78:	7bbb      	ldrb	r3, [r7, #14]
 800fd7a:	2b03      	cmp	r3, #3
 800fd7c:	f040 80e0 	bne.w	800ff40 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	220d      	movs	r2, #13
 800fd84:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	705a      	strb	r2, [r3, #1]
      break;
 800fd8c:	e0d8      	b.n	800ff40 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800fd8e:	2109      	movs	r1, #9
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f000 f9a1 	bl	80100d8 <USBH_Get_CfgDesc>
 800fd96:	4603      	mov	r3, r0
 800fd98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fd9a:	7bbb      	ldrb	r3, [r7, #14]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d103      	bne.n	800fda8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2204      	movs	r2, #4
 800fda4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fda6:	e0cd      	b.n	800ff44 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fda8:	7bbb      	ldrb	r3, [r7, #14]
 800fdaa:	2b03      	cmp	r3, #3
 800fdac:	f040 80ca 	bne.w	800ff44 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	b2da      	uxtb	r2, r3
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fdc6:	2b03      	cmp	r3, #3
 800fdc8:	d903      	bls.n	800fdd2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	220d      	movs	r2, #13
 800fdce:	701a      	strb	r2, [r3, #0]
      break;
 800fdd0:	e0b8      	b.n	800ff44 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	795b      	ldrb	r3, [r3, #5]
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f001 f851 	bl	8010e80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	791b      	ldrb	r3, [r3, #4]
 800fde2:	4619      	mov	r1, r3
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f001 f84b 	bl	8010e80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2200      	movs	r2, #0
 800fdee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	701a      	strb	r2, [r3, #0]
      break;
 800fdf6:	e0a5      	b.n	800ff44 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800fdfe:	4619      	mov	r1, r3
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 f969 	bl	80100d8 <USBH_Get_CfgDesc>
 800fe06:	4603      	mov	r3, r0
 800fe08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fe0a:	7bbb      	ldrb	r3, [r7, #14]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d103      	bne.n	800fe18 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2205      	movs	r2, #5
 800fe14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fe16:	e097      	b.n	800ff48 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe18:	7bbb      	ldrb	r3, [r7, #14]
 800fe1a:	2b03      	cmp	r3, #3
 800fe1c:	f040 8094 	bne.w	800ff48 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fe26:	3301      	adds	r3, #1
 800fe28:	b2da      	uxtb	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800fe36:	2b03      	cmp	r3, #3
 800fe38:	d903      	bls.n	800fe42 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	220d      	movs	r2, #13
 800fe3e:	701a      	strb	r2, [r3, #0]
      break;
 800fe40:	e082      	b.n	800ff48 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	795b      	ldrb	r3, [r3, #5]
 800fe46:	4619      	mov	r1, r3
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f001 f819 	bl	8010e80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	791b      	ldrb	r3, [r3, #4]
 800fe52:	4619      	mov	r1, r3
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f001 f813 	bl	8010e80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2200      	movs	r2, #0
 800fe64:	701a      	strb	r2, [r3, #0]
      break;
 800fe66:	e06f      	b.n	800ff48 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d019      	beq.n	800fea6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fe7e:	23ff      	movs	r3, #255	@ 0xff
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 f953 	bl	801012c <USBH_Get_StringDesc>
 800fe86:	4603      	mov	r3, r0
 800fe88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fe8a:	7bbb      	ldrb	r3, [r7, #14]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d103      	bne.n	800fe98 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2206      	movs	r2, #6
 800fe94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fe96:	e059      	b.n	800ff4c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe98:	7bbb      	ldrb	r3, [r7, #14]
 800fe9a:	2b03      	cmp	r3, #3
 800fe9c:	d156      	bne.n	800ff4c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2206      	movs	r2, #6
 800fea2:	705a      	strb	r2, [r3, #1]
      break;
 800fea4:	e052      	b.n	800ff4c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2206      	movs	r2, #6
 800feaa:	705a      	strb	r2, [r3, #1]
      break;
 800feac:	e04e      	b.n	800ff4c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d019      	beq.n	800feec <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fec4:	23ff      	movs	r3, #255	@ 0xff
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f000 f930 	bl	801012c <USBH_Get_StringDesc>
 800fecc:	4603      	mov	r3, r0
 800fece:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fed0:	7bbb      	ldrb	r3, [r7, #14]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d103      	bne.n	800fede <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2207      	movs	r2, #7
 800feda:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fedc:	e038      	b.n	800ff50 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fede:	7bbb      	ldrb	r3, [r7, #14]
 800fee0:	2b03      	cmp	r3, #3
 800fee2:	d135      	bne.n	800ff50 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2207      	movs	r2, #7
 800fee8:	705a      	strb	r2, [r3, #1]
      break;
 800feea:	e031      	b.n	800ff50 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2207      	movs	r2, #7
 800fef0:	705a      	strb	r2, [r3, #1]
      break;
 800fef2:	e02d      	b.n	800ff50 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d017      	beq.n	800ff2e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ff0a:	23ff      	movs	r3, #255	@ 0xff
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f000 f90d 	bl	801012c <USBH_Get_StringDesc>
 800ff12:	4603      	mov	r3, r0
 800ff14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ff16:	7bbb      	ldrb	r3, [r7, #14]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d102      	bne.n	800ff22 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ff20:	e018      	b.n	800ff54 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff22:	7bbb      	ldrb	r3, [r7, #14]
 800ff24:	2b03      	cmp	r3, #3
 800ff26:	d115      	bne.n	800ff54 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ff2c:	e012      	b.n	800ff54 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	73fb      	strb	r3, [r7, #15]
      break;
 800ff32:	e00f      	b.n	800ff54 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800ff34:	bf00      	nop
 800ff36:	e00e      	b.n	800ff56 <USBH_HandleEnum+0x3b6>
      break;
 800ff38:	bf00      	nop
 800ff3a:	e00c      	b.n	800ff56 <USBH_HandleEnum+0x3b6>
      break;
 800ff3c:	bf00      	nop
 800ff3e:	e00a      	b.n	800ff56 <USBH_HandleEnum+0x3b6>
      break;
 800ff40:	bf00      	nop
 800ff42:	e008      	b.n	800ff56 <USBH_HandleEnum+0x3b6>
      break;
 800ff44:	bf00      	nop
 800ff46:	e006      	b.n	800ff56 <USBH_HandleEnum+0x3b6>
      break;
 800ff48:	bf00      	nop
 800ff4a:	e004      	b.n	800ff56 <USBH_HandleEnum+0x3b6>
      break;
 800ff4c:	bf00      	nop
 800ff4e:	e002      	b.n	800ff56 <USBH_HandleEnum+0x3b6>
      break;
 800ff50:	bf00      	nop
 800ff52:	e000      	b.n	800ff56 <USBH_HandleEnum+0x3b6>
      break;
 800ff54:	bf00      	nop
  }
  return Status;
 800ff56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3710      	adds	r7, #16
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	683a      	ldr	r2, [r7, #0]
 800ff6e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ff72:	bf00      	nop
 800ff74:	370c      	adds	r7, #12
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr

0800ff7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b082      	sub	sp, #8
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ff8c:	1c5a      	adds	r2, r3, #1
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f000 f804 	bl	800ffa2 <USBH_HandleSof>
}
 800ff9a:	bf00      	nop
 800ff9c:	3708      	adds	r7, #8
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}

0800ffa2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ffa2:	b580      	push	{r7, lr}
 800ffa4:	b082      	sub	sp, #8
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	b2db      	uxtb	r3, r3
 800ffb0:	2b0b      	cmp	r3, #11
 800ffb2:	d10a      	bne.n	800ffca <USBH_HandleSof+0x28>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d005      	beq.n	800ffca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ffc4:	699b      	ldr	r3, [r3, #24]
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	4798      	blx	r3
  }
}
 800ffca:	bf00      	nop
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}

0800ffd2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ffd2:	b480      	push	{r7}
 800ffd4:	b083      	sub	sp, #12
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2201      	movs	r2, #1
 800ffde:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ffe2:	bf00      	nop
}
 800ffe4:	370c      	adds	r7, #12
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr

0800ffee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ffee:	b480      	push	{r7}
 800fff0:	b083      	sub	sp, #12
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800fffe:	bf00      	nop
}
 8010000:	370c      	adds	r7, #12
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr

0801000a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801000a:	b480      	push	{r7}
 801000c:	b083      	sub	sp, #12
 801000e:	af00      	add	r7, sp, #0
 8010010:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2201      	movs	r2, #1
 8010016:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2200      	movs	r2, #0
 801001e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2200      	movs	r2, #0
 8010026:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801002a:	2300      	movs	r3, #0
}
 801002c:	4618      	mov	r0, r3
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2201      	movs	r2, #1
 8010044:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f004 f94a 	bl	80142f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	791b      	ldrb	r3, [r3, #4]
 8010062:	4619      	mov	r1, r3
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 ff0b 	bl	8010e80 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	795b      	ldrb	r3, [r3, #5]
 801006e:	4619      	mov	r1, r3
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 ff05 	bl	8010e80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010076:	2300      	movs	r3, #0
}
 8010078:	4618      	mov	r0, r3
 801007a:	3708      	adds	r7, #8
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b086      	sub	sp, #24
 8010084:	af02      	add	r7, sp, #8
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	460b      	mov	r3, r1
 801008a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 801008c:	887b      	ldrh	r3, [r7, #2]
 801008e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010092:	d901      	bls.n	8010098 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010094:	2303      	movs	r3, #3
 8010096:	e01b      	b.n	80100d0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 801009e:	887b      	ldrh	r3, [r7, #2]
 80100a0:	9300      	str	r3, [sp, #0]
 80100a2:	4613      	mov	r3, r2
 80100a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80100a8:	2100      	movs	r1, #0
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f000 f872 	bl	8010194 <USBH_GetDescriptor>
 80100b0:	4603      	mov	r3, r0
 80100b2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80100b4:	7bfb      	ldrb	r3, [r7, #15]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d109      	bne.n	80100ce <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80100c0:	887a      	ldrh	r2, [r7, #2]
 80100c2:	4619      	mov	r1, r3
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 f929 	bl	801031c <USBH_ParseDevDesc>
 80100ca:	4603      	mov	r3, r0
 80100cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80100ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3710      	adds	r7, #16
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af02      	add	r7, sp, #8
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	460b      	mov	r3, r1
 80100e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	331c      	adds	r3, #28
 80100e8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80100ea:	887b      	ldrh	r3, [r7, #2]
 80100ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80100f0:	d901      	bls.n	80100f6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80100f2:	2303      	movs	r3, #3
 80100f4:	e016      	b.n	8010124 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80100f6:	887b      	ldrh	r3, [r7, #2]
 80100f8:	9300      	str	r3, [sp, #0]
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010100:	2100      	movs	r1, #0
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 f846 	bl	8010194 <USBH_GetDescriptor>
 8010108:	4603      	mov	r3, r0
 801010a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801010c:	7bfb      	ldrb	r3, [r7, #15]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d107      	bne.n	8010122 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8010112:	887b      	ldrh	r3, [r7, #2]
 8010114:	461a      	mov	r2, r3
 8010116:	68b9      	ldr	r1, [r7, #8]
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 f9af 	bl	801047c <USBH_ParseCfgDesc>
 801011e:	4603      	mov	r3, r0
 8010120:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010122:	7bfb      	ldrb	r3, [r7, #15]
}
 8010124:	4618      	mov	r0, r3
 8010126:	3710      	adds	r7, #16
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b088      	sub	sp, #32
 8010130:	af02      	add	r7, sp, #8
 8010132:	60f8      	str	r0, [r7, #12]
 8010134:	607a      	str	r2, [r7, #4]
 8010136:	461a      	mov	r2, r3
 8010138:	460b      	mov	r3, r1
 801013a:	72fb      	strb	r3, [r7, #11]
 801013c:	4613      	mov	r3, r2
 801013e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8010140:	893b      	ldrh	r3, [r7, #8]
 8010142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010146:	d802      	bhi.n	801014e <USBH_Get_StringDesc+0x22>
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d101      	bne.n	8010152 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 801014e:	2303      	movs	r3, #3
 8010150:	e01c      	b.n	801018c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8010152:	7afb      	ldrb	r3, [r7, #11]
 8010154:	b29b      	uxth	r3, r3
 8010156:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801015a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010162:	893b      	ldrh	r3, [r7, #8]
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	460b      	mov	r3, r1
 8010168:	2100      	movs	r1, #0
 801016a:	68f8      	ldr	r0, [r7, #12]
 801016c:	f000 f812 	bl	8010194 <USBH_GetDescriptor>
 8010170:	4603      	mov	r3, r0
 8010172:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8010174:	7dfb      	ldrb	r3, [r7, #23]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d107      	bne.n	801018a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010180:	893a      	ldrh	r2, [r7, #8]
 8010182:	6879      	ldr	r1, [r7, #4]
 8010184:	4618      	mov	r0, r3
 8010186:	f000 fb8d 	bl	80108a4 <USBH_ParseStringDesc>
  }

  return status;
 801018a:	7dfb      	ldrb	r3, [r7, #23]
}
 801018c:	4618      	mov	r0, r3
 801018e:	3718      	adds	r7, #24
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	607b      	str	r3, [r7, #4]
 801019e:	460b      	mov	r3, r1
 80101a0:	72fb      	strb	r3, [r7, #11]
 80101a2:	4613      	mov	r3, r2
 80101a4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	789b      	ldrb	r3, [r3, #2]
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d11c      	bne.n	80101e8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80101ae:	7afb      	ldrb	r3, [r7, #11]
 80101b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80101b4:	b2da      	uxtb	r2, r3
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2206      	movs	r2, #6
 80101be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	893a      	ldrh	r2, [r7, #8]
 80101c4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80101c6:	893b      	ldrh	r3, [r7, #8]
 80101c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80101cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80101d0:	d104      	bne.n	80101dc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f240 4209 	movw	r2, #1033	@ 0x409
 80101d8:	829a      	strh	r2, [r3, #20]
 80101da:	e002      	b.n	80101e2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2200      	movs	r2, #0
 80101e0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	8b3a      	ldrh	r2, [r7, #24]
 80101e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80101e8:	8b3b      	ldrh	r3, [r7, #24]
 80101ea:	461a      	mov	r2, r3
 80101ec:	6879      	ldr	r1, [r7, #4]
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	f000 fba5 	bl	801093e <USBH_CtlReq>
 80101f4:	4603      	mov	r3, r0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3710      	adds	r7, #16
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80101fe:	b580      	push	{r7, lr}
 8010200:	b082      	sub	sp, #8
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
 8010206:	460b      	mov	r3, r1
 8010208:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	789b      	ldrb	r3, [r3, #2]
 801020e:	2b01      	cmp	r3, #1
 8010210:	d10f      	bne.n	8010232 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2200      	movs	r2, #0
 8010216:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2205      	movs	r2, #5
 801021c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801021e:	78fb      	ldrb	r3, [r7, #3]
 8010220:	b29a      	uxth	r2, r3
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2200      	movs	r2, #0
 801022a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2200      	movs	r2, #0
 8010230:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010232:	2200      	movs	r2, #0
 8010234:	2100      	movs	r1, #0
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f000 fb81 	bl	801093e <USBH_CtlReq>
 801023c:	4603      	mov	r3, r0
}
 801023e:	4618      	mov	r0, r3
 8010240:	3708      	adds	r7, #8
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}

08010246 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010246:	b580      	push	{r7, lr}
 8010248:	b082      	sub	sp, #8
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
 801024e:	460b      	mov	r3, r1
 8010250:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	789b      	ldrb	r3, [r3, #2]
 8010256:	2b01      	cmp	r3, #1
 8010258:	d10e      	bne.n	8010278 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2200      	movs	r2, #0
 801025e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2209      	movs	r2, #9
 8010264:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	887a      	ldrh	r2, [r7, #2]
 801026a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2200      	movs	r2, #0
 8010270:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2200      	movs	r2, #0
 8010276:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010278:	2200      	movs	r2, #0
 801027a:	2100      	movs	r1, #0
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 fb5e 	bl	801093e <USBH_CtlReq>
 8010282:	4603      	mov	r3, r0
}
 8010284:	4618      	mov	r0, r3
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	460b      	mov	r3, r1
 8010296:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	789b      	ldrb	r3, [r3, #2]
 801029c:	2b01      	cmp	r3, #1
 801029e:	d10f      	bne.n	80102c0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2200      	movs	r2, #0
 80102a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2203      	movs	r2, #3
 80102aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80102ac:	78fb      	ldrb	r3, [r7, #3]
 80102ae:	b29a      	uxth	r2, r3
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2200      	movs	r2, #0
 80102b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80102c0:	2200      	movs	r2, #0
 80102c2:	2100      	movs	r1, #0
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 fb3a 	bl	801093e <USBH_CtlReq>
 80102ca:	4603      	mov	r3, r0
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	460b      	mov	r3, r1
 80102de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	789b      	ldrb	r3, [r3, #2]
 80102e4:	2b01      	cmp	r3, #1
 80102e6:	d10f      	bne.n	8010308 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2202      	movs	r2, #2
 80102ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2201      	movs	r2, #1
 80102f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80102fa:	78fb      	ldrb	r3, [r7, #3]
 80102fc:	b29a      	uxth	r2, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2200      	movs	r2, #0
 8010306:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010308:	2200      	movs	r2, #0
 801030a:	2100      	movs	r1, #0
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 fb16 	bl	801093e <USBH_CtlReq>
 8010312:	4603      	mov	r3, r0
}
 8010314:	4618      	mov	r0, r3
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801031c:	b480      	push	{r7}
 801031e:	b087      	sub	sp, #28
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	4613      	mov	r3, r2
 8010328:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010330:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8010332:	2300      	movs	r3, #0
 8010334:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d101      	bne.n	8010340 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 801033c:	2302      	movs	r3, #2
 801033e:	e094      	b.n	801046a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	781a      	ldrb	r2, [r3, #0]
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	785a      	ldrb	r2, [r3, #1]
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	3302      	adds	r3, #2
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	461a      	mov	r2, r3
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	3303      	adds	r3, #3
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	021b      	lsls	r3, r3, #8
 8010360:	b29b      	uxth	r3, r3
 8010362:	4313      	orrs	r3, r2
 8010364:	b29a      	uxth	r2, r3
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	791a      	ldrb	r2, [r3, #4]
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	795a      	ldrb	r2, [r3, #5]
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	799a      	ldrb	r2, [r3, #6]
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	79da      	ldrb	r2, [r3, #7]
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010390:	2b00      	cmp	r3, #0
 8010392:	d004      	beq.n	801039e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801039a:	2b01      	cmp	r3, #1
 801039c:	d11b      	bne.n	80103d6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	79db      	ldrb	r3, [r3, #7]
 80103a2:	2b20      	cmp	r3, #32
 80103a4:	dc0f      	bgt.n	80103c6 <USBH_ParseDevDesc+0xaa>
 80103a6:	2b08      	cmp	r3, #8
 80103a8:	db0f      	blt.n	80103ca <USBH_ParseDevDesc+0xae>
 80103aa:	3b08      	subs	r3, #8
 80103ac:	4a32      	ldr	r2, [pc, #200]	@ (8010478 <USBH_ParseDevDesc+0x15c>)
 80103ae:	fa22 f303 	lsr.w	r3, r2, r3
 80103b2:	f003 0301 	and.w	r3, r3, #1
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	bf14      	ite	ne
 80103ba:	2301      	movne	r3, #1
 80103bc:	2300      	moveq	r3, #0
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d106      	bne.n	80103d2 <USBH_ParseDevDesc+0xb6>
 80103c4:	e001      	b.n	80103ca <USBH_ParseDevDesc+0xae>
 80103c6:	2b40      	cmp	r3, #64	@ 0x40
 80103c8:	d003      	beq.n	80103d2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	2208      	movs	r2, #8
 80103ce:	71da      	strb	r2, [r3, #7]
        break;
 80103d0:	e000      	b.n	80103d4 <USBH_ParseDevDesc+0xb8>
        break;
 80103d2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80103d4:	e00e      	b.n	80103f4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80103dc:	2b02      	cmp	r3, #2
 80103de:	d107      	bne.n	80103f0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	79db      	ldrb	r3, [r3, #7]
 80103e4:	2b08      	cmp	r3, #8
 80103e6:	d005      	beq.n	80103f4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	2208      	movs	r2, #8
 80103ec:	71da      	strb	r2, [r3, #7]
 80103ee:	e001      	b.n	80103f4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80103f0:	2303      	movs	r3, #3
 80103f2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80103f4:	88fb      	ldrh	r3, [r7, #6]
 80103f6:	2b08      	cmp	r3, #8
 80103f8:	d936      	bls.n	8010468 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	3308      	adds	r3, #8
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	461a      	mov	r2, r3
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	3309      	adds	r3, #9
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	021b      	lsls	r3, r3, #8
 801040a:	b29b      	uxth	r3, r3
 801040c:	4313      	orrs	r3, r2
 801040e:	b29a      	uxth	r2, r3
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	330a      	adds	r3, #10
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	461a      	mov	r2, r3
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	330b      	adds	r3, #11
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	021b      	lsls	r3, r3, #8
 8010424:	b29b      	uxth	r3, r3
 8010426:	4313      	orrs	r3, r2
 8010428:	b29a      	uxth	r2, r3
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	330c      	adds	r3, #12
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	461a      	mov	r2, r3
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	330d      	adds	r3, #13
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	021b      	lsls	r3, r3, #8
 801043e:	b29b      	uxth	r3, r3
 8010440:	4313      	orrs	r3, r2
 8010442:	b29a      	uxth	r2, r3
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	7b9a      	ldrb	r2, [r3, #14]
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	7bda      	ldrb	r2, [r3, #15]
 8010454:	693b      	ldr	r3, [r7, #16]
 8010456:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	7c1a      	ldrb	r2, [r3, #16]
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	7c5a      	ldrb	r2, [r3, #17]
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8010468:	7dfb      	ldrb	r3, [r7, #23]
}
 801046a:	4618      	mov	r0, r3
 801046c:	371c      	adds	r7, #28
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	01000101 	.word	0x01000101

0801047c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b08c      	sub	sp, #48	@ 0x30
 8010480:	af00      	add	r7, sp, #0
 8010482:	60f8      	str	r0, [r7, #12]
 8010484:	60b9      	str	r1, [r7, #8]
 8010486:	4613      	mov	r3, r2
 8010488:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010490:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010492:	2300      	movs	r3, #0
 8010494:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010498:	2300      	movs	r3, #0
 801049a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 801049e:	2300      	movs	r3, #0
 80104a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80104aa:	2302      	movs	r3, #2
 80104ac:	e0da      	b.n	8010664 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80104b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	2b09      	cmp	r3, #9
 80104b8:	d002      	beq.n	80104c0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80104ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104bc:	2209      	movs	r2, #9
 80104be:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	781a      	ldrb	r2, [r3, #0]
 80104c4:	6a3b      	ldr	r3, [r7, #32]
 80104c6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	785a      	ldrb	r2, [r3, #1]
 80104cc:	6a3b      	ldr	r3, [r7, #32]
 80104ce:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	3302      	adds	r3, #2
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	461a      	mov	r2, r3
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	3303      	adds	r3, #3
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	021b      	lsls	r3, r3, #8
 80104e0:	b29b      	uxth	r3, r3
 80104e2:	4313      	orrs	r3, r2
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80104ea:	bf28      	it	cs
 80104ec:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	6a3b      	ldr	r3, [r7, #32]
 80104f4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	791a      	ldrb	r2, [r3, #4]
 80104fa:	6a3b      	ldr	r3, [r7, #32]
 80104fc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	795a      	ldrb	r2, [r3, #5]
 8010502:	6a3b      	ldr	r3, [r7, #32]
 8010504:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	799a      	ldrb	r2, [r3, #6]
 801050a:	6a3b      	ldr	r3, [r7, #32]
 801050c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	79da      	ldrb	r2, [r3, #7]
 8010512:	6a3b      	ldr	r3, [r7, #32]
 8010514:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	7a1a      	ldrb	r2, [r3, #8]
 801051a:	6a3b      	ldr	r3, [r7, #32]
 801051c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801051e:	88fb      	ldrh	r3, [r7, #6]
 8010520:	2b09      	cmp	r3, #9
 8010522:	f240 809d 	bls.w	8010660 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8010526:	2309      	movs	r3, #9
 8010528:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 801052a:	2300      	movs	r3, #0
 801052c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801052e:	e081      	b.n	8010634 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010530:	f107 0316 	add.w	r3, r7, #22
 8010534:	4619      	mov	r1, r3
 8010536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010538:	f000 f9e7 	bl	801090a <USBH_GetNextDesc>
 801053c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 801053e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010540:	785b      	ldrb	r3, [r3, #1]
 8010542:	2b04      	cmp	r3, #4
 8010544:	d176      	bne.n	8010634 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8010546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	2b09      	cmp	r3, #9
 801054c:	d002      	beq.n	8010554 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 801054e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010550:	2209      	movs	r2, #9
 8010552:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8010554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010558:	221a      	movs	r2, #26
 801055a:	fb02 f303 	mul.w	r3, r2, r3
 801055e:	3308      	adds	r3, #8
 8010560:	6a3a      	ldr	r2, [r7, #32]
 8010562:	4413      	add	r3, r2
 8010564:	3302      	adds	r3, #2
 8010566:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801056a:	69f8      	ldr	r0, [r7, #28]
 801056c:	f000 f87e 	bl	801066c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010570:	2300      	movs	r3, #0
 8010572:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8010576:	2300      	movs	r3, #0
 8010578:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801057a:	e043      	b.n	8010604 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801057c:	f107 0316 	add.w	r3, r7, #22
 8010580:	4619      	mov	r1, r3
 8010582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010584:	f000 f9c1 	bl	801090a <USBH_GetNextDesc>
 8010588:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801058a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801058c:	785b      	ldrb	r3, [r3, #1]
 801058e:	2b05      	cmp	r3, #5
 8010590:	d138      	bne.n	8010604 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8010592:	69fb      	ldr	r3, [r7, #28]
 8010594:	795b      	ldrb	r3, [r3, #5]
 8010596:	2b01      	cmp	r3, #1
 8010598:	d113      	bne.n	80105c2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 801059e:	2b02      	cmp	r3, #2
 80105a0:	d003      	beq.n	80105aa <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80105a2:	69fb      	ldr	r3, [r7, #28]
 80105a4:	799b      	ldrb	r3, [r3, #6]
 80105a6:	2b03      	cmp	r3, #3
 80105a8:	d10b      	bne.n	80105c2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80105aa:	69fb      	ldr	r3, [r7, #28]
 80105ac:	79db      	ldrb	r3, [r3, #7]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d10b      	bne.n	80105ca <USBH_ParseCfgDesc+0x14e>
 80105b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	2b09      	cmp	r3, #9
 80105b8:	d007      	beq.n	80105ca <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80105ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105bc:	2209      	movs	r2, #9
 80105be:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80105c0:	e003      	b.n	80105ca <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80105c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105c4:	2207      	movs	r2, #7
 80105c6:	701a      	strb	r2, [r3, #0]
 80105c8:	e000      	b.n	80105cc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80105ca:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80105cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105d0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80105d4:	3201      	adds	r2, #1
 80105d6:	00d2      	lsls	r2, r2, #3
 80105d8:	211a      	movs	r1, #26
 80105da:	fb01 f303 	mul.w	r3, r1, r3
 80105de:	4413      	add	r3, r2
 80105e0:	3308      	adds	r3, #8
 80105e2:	6a3a      	ldr	r2, [r7, #32]
 80105e4:	4413      	add	r3, r2
 80105e6:	3304      	adds	r3, #4
 80105e8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80105ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80105ec:	69b9      	ldr	r1, [r7, #24]
 80105ee:	68f8      	ldr	r0, [r7, #12]
 80105f0:	f000 f870 	bl	80106d4 <USBH_ParseEPDesc>
 80105f4:	4603      	mov	r3, r0
 80105f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80105fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80105fe:	3301      	adds	r3, #1
 8010600:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	791b      	ldrb	r3, [r3, #4]
 8010608:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801060c:	429a      	cmp	r2, r3
 801060e:	d204      	bcs.n	801061a <USBH_ParseCfgDesc+0x19e>
 8010610:	6a3b      	ldr	r3, [r7, #32]
 8010612:	885a      	ldrh	r2, [r3, #2]
 8010614:	8afb      	ldrh	r3, [r7, #22]
 8010616:	429a      	cmp	r2, r3
 8010618:	d8b0      	bhi.n	801057c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	791b      	ldrb	r3, [r3, #4]
 801061e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010622:	429a      	cmp	r2, r3
 8010624:	d201      	bcs.n	801062a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8010626:	2303      	movs	r3, #3
 8010628:	e01c      	b.n	8010664 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 801062a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801062e:	3301      	adds	r3, #1
 8010630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010638:	2b01      	cmp	r3, #1
 801063a:	d805      	bhi.n	8010648 <USBH_ParseCfgDesc+0x1cc>
 801063c:	6a3b      	ldr	r3, [r7, #32]
 801063e:	885a      	ldrh	r2, [r3, #2]
 8010640:	8afb      	ldrh	r3, [r7, #22]
 8010642:	429a      	cmp	r2, r3
 8010644:	f63f af74 	bhi.w	8010530 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8010648:	6a3b      	ldr	r3, [r7, #32]
 801064a:	791b      	ldrb	r3, [r3, #4]
 801064c:	2b02      	cmp	r3, #2
 801064e:	bf28      	it	cs
 8010650:	2302      	movcs	r3, #2
 8010652:	b2db      	uxtb	r3, r3
 8010654:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010658:	429a      	cmp	r2, r3
 801065a:	d201      	bcs.n	8010660 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 801065c:	2303      	movs	r3, #3
 801065e:	e001      	b.n	8010664 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8010660:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010664:	4618      	mov	r0, r3
 8010666:	3730      	adds	r7, #48	@ 0x30
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 801066c:	b480      	push	{r7}
 801066e:	b083      	sub	sp, #12
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	781a      	ldrb	r2, [r3, #0]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	785a      	ldrb	r2, [r3, #1]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	789a      	ldrb	r2, [r3, #2]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	78da      	ldrb	r2, [r3, #3]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	3304      	adds	r3, #4
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	2b02      	cmp	r3, #2
 801069e:	bf28      	it	cs
 80106a0:	2302      	movcs	r3, #2
 80106a2:	b2da      	uxtb	r2, r3
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	795a      	ldrb	r2, [r3, #5]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	799a      	ldrb	r2, [r3, #6]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	79da      	ldrb	r2, [r3, #7]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	7a1a      	ldrb	r2, [r3, #8]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	721a      	strb	r2, [r3, #8]
}
 80106c8:	bf00      	nop
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b087      	sub	sp, #28
 80106d8:	af00      	add	r7, sp, #0
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80106e0:	2300      	movs	r3, #0
 80106e2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	781a      	ldrb	r2, [r3, #0]
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	785a      	ldrb	r2, [r3, #1]
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	789a      	ldrb	r2, [r3, #2]
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	78da      	ldrb	r2, [r3, #3]
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	3304      	adds	r3, #4
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	461a      	mov	r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	3305      	adds	r3, #5
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	021b      	lsls	r3, r3, #8
 8010714:	b29b      	uxth	r3, r3
 8010716:	4313      	orrs	r3, r2
 8010718:	b29a      	uxth	r2, r3
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	799a      	ldrb	r2, [r3, #6]
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	889b      	ldrh	r3, [r3, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d009      	beq.n	8010742 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010736:	d804      	bhi.n	8010742 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 801073c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010740:	d901      	bls.n	8010746 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8010742:	2303      	movs	r3, #3
 8010744:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801074c:	2b00      	cmp	r3, #0
 801074e:	d136      	bne.n	80107be <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	78db      	ldrb	r3, [r3, #3]
 8010754:	f003 0303 	and.w	r3, r3, #3
 8010758:	2b02      	cmp	r3, #2
 801075a:	d108      	bne.n	801076e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	889b      	ldrh	r3, [r3, #4]
 8010760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010764:	f240 8097 	bls.w	8010896 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010768:	2303      	movs	r3, #3
 801076a:	75fb      	strb	r3, [r7, #23]
 801076c:	e093      	b.n	8010896 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	78db      	ldrb	r3, [r3, #3]
 8010772:	f003 0303 	and.w	r3, r3, #3
 8010776:	2b00      	cmp	r3, #0
 8010778:	d107      	bne.n	801078a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	889b      	ldrh	r3, [r3, #4]
 801077e:	2b40      	cmp	r3, #64	@ 0x40
 8010780:	f240 8089 	bls.w	8010896 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010784:	2303      	movs	r3, #3
 8010786:	75fb      	strb	r3, [r7, #23]
 8010788:	e085      	b.n	8010896 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	78db      	ldrb	r3, [r3, #3]
 801078e:	f003 0303 	and.w	r3, r3, #3
 8010792:	2b01      	cmp	r3, #1
 8010794:	d005      	beq.n	80107a2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	78db      	ldrb	r3, [r3, #3]
 801079a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801079e:	2b03      	cmp	r3, #3
 80107a0:	d10a      	bne.n	80107b8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	799b      	ldrb	r3, [r3, #6]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d003      	beq.n	80107b2 <USBH_ParseEPDesc+0xde>
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	799b      	ldrb	r3, [r3, #6]
 80107ae:	2b10      	cmp	r3, #16
 80107b0:	d970      	bls.n	8010894 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80107b2:	2303      	movs	r3, #3
 80107b4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80107b6:	e06d      	b.n	8010894 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80107b8:	2303      	movs	r3, #3
 80107ba:	75fb      	strb	r3, [r7, #23]
 80107bc:	e06b      	b.n	8010896 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	d13c      	bne.n	8010842 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	78db      	ldrb	r3, [r3, #3]
 80107cc:	f003 0303 	and.w	r3, r3, #3
 80107d0:	2b02      	cmp	r3, #2
 80107d2:	d005      	beq.n	80107e0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	78db      	ldrb	r3, [r3, #3]
 80107d8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d106      	bne.n	80107ee <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	889b      	ldrh	r3, [r3, #4]
 80107e4:	2b40      	cmp	r3, #64	@ 0x40
 80107e6:	d956      	bls.n	8010896 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80107e8:	2303      	movs	r3, #3
 80107ea:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80107ec:	e053      	b.n	8010896 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	78db      	ldrb	r3, [r3, #3]
 80107f2:	f003 0303 	and.w	r3, r3, #3
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d10e      	bne.n	8010818 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	799b      	ldrb	r3, [r3, #6]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d007      	beq.n	8010812 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8010806:	2b10      	cmp	r3, #16
 8010808:	d803      	bhi.n	8010812 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 801080e:	2b40      	cmp	r3, #64	@ 0x40
 8010810:	d941      	bls.n	8010896 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010812:	2303      	movs	r3, #3
 8010814:	75fb      	strb	r3, [r7, #23]
 8010816:	e03e      	b.n	8010896 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	78db      	ldrb	r3, [r3, #3]
 801081c:	f003 0303 	and.w	r3, r3, #3
 8010820:	2b03      	cmp	r3, #3
 8010822:	d10b      	bne.n	801083c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	799b      	ldrb	r3, [r3, #6]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d004      	beq.n	8010836 <USBH_ParseEPDesc+0x162>
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	889b      	ldrh	r3, [r3, #4]
 8010830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010834:	d32f      	bcc.n	8010896 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010836:	2303      	movs	r3, #3
 8010838:	75fb      	strb	r3, [r7, #23]
 801083a:	e02c      	b.n	8010896 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801083c:	2303      	movs	r3, #3
 801083e:	75fb      	strb	r3, [r7, #23]
 8010840:	e029      	b.n	8010896 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010848:	2b02      	cmp	r3, #2
 801084a:	d120      	bne.n	801088e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	78db      	ldrb	r3, [r3, #3]
 8010850:	f003 0303 	and.w	r3, r3, #3
 8010854:	2b00      	cmp	r3, #0
 8010856:	d106      	bne.n	8010866 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	889b      	ldrh	r3, [r3, #4]
 801085c:	2b08      	cmp	r3, #8
 801085e:	d01a      	beq.n	8010896 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010860:	2303      	movs	r3, #3
 8010862:	75fb      	strb	r3, [r7, #23]
 8010864:	e017      	b.n	8010896 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	78db      	ldrb	r3, [r3, #3]
 801086a:	f003 0303 	and.w	r3, r3, #3
 801086e:	2b03      	cmp	r3, #3
 8010870:	d10a      	bne.n	8010888 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	799b      	ldrb	r3, [r3, #6]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d003      	beq.n	8010882 <USBH_ParseEPDesc+0x1ae>
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	889b      	ldrh	r3, [r3, #4]
 801087e:	2b08      	cmp	r3, #8
 8010880:	d909      	bls.n	8010896 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010882:	2303      	movs	r3, #3
 8010884:	75fb      	strb	r3, [r7, #23]
 8010886:	e006      	b.n	8010896 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010888:	2303      	movs	r3, #3
 801088a:	75fb      	strb	r3, [r7, #23]
 801088c:	e003      	b.n	8010896 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 801088e:	2303      	movs	r3, #3
 8010890:	75fb      	strb	r3, [r7, #23]
 8010892:	e000      	b.n	8010896 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010894:	bf00      	nop
  }

  return status;
 8010896:	7dfb      	ldrb	r3, [r7, #23]
}
 8010898:	4618      	mov	r0, r3
 801089a:	371c      	adds	r7, #28
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b087      	sub	sp, #28
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	4613      	mov	r3, r2
 80108b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	3301      	adds	r3, #1
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	2b03      	cmp	r3, #3
 80108ba:	d120      	bne.n	80108fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	1e9a      	subs	r2, r3, #2
 80108c2:	88fb      	ldrh	r3, [r7, #6]
 80108c4:	4293      	cmp	r3, r2
 80108c6:	bf28      	it	cs
 80108c8:	4613      	movcs	r3, r2
 80108ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	3302      	adds	r3, #2
 80108d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80108d2:	2300      	movs	r3, #0
 80108d4:	82fb      	strh	r3, [r7, #22]
 80108d6:	e00b      	b.n	80108f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80108d8:	8afb      	ldrh	r3, [r7, #22]
 80108da:	68fa      	ldr	r2, [r7, #12]
 80108dc:	4413      	add	r3, r2
 80108de:	781a      	ldrb	r2, [r3, #0]
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	3301      	adds	r3, #1
 80108e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80108ea:	8afb      	ldrh	r3, [r7, #22]
 80108ec:	3302      	adds	r3, #2
 80108ee:	82fb      	strh	r3, [r7, #22]
 80108f0:	8afa      	ldrh	r2, [r7, #22]
 80108f2:	8abb      	ldrh	r3, [r7, #20]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d3ef      	bcc.n	80108d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	2200      	movs	r2, #0
 80108fc:	701a      	strb	r2, [r3, #0]
  }
}
 80108fe:	bf00      	nop
 8010900:	371c      	adds	r7, #28
 8010902:	46bd      	mov	sp, r7
 8010904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010908:	4770      	bx	lr

0801090a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801090a:	b480      	push	{r7}
 801090c:	b085      	sub	sp, #20
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
 8010912:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	881b      	ldrh	r3, [r3, #0]
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	7812      	ldrb	r2, [r2, #0]
 801091c:	4413      	add	r3, r2
 801091e:	b29a      	uxth	r2, r3
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	4413      	add	r3, r2
 801092e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010930:	68fb      	ldr	r3, [r7, #12]
}
 8010932:	4618      	mov	r0, r3
 8010934:	3714      	adds	r7, #20
 8010936:	46bd      	mov	sp, r7
 8010938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093c:	4770      	bx	lr

0801093e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801093e:	b580      	push	{r7, lr}
 8010940:	b086      	sub	sp, #24
 8010942:	af00      	add	r7, sp, #0
 8010944:	60f8      	str	r0, [r7, #12]
 8010946:	60b9      	str	r1, [r7, #8]
 8010948:	4613      	mov	r3, r2
 801094a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801094c:	2301      	movs	r3, #1
 801094e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	789b      	ldrb	r3, [r3, #2]
 8010954:	2b01      	cmp	r3, #1
 8010956:	d002      	beq.n	801095e <USBH_CtlReq+0x20>
 8010958:	2b02      	cmp	r3, #2
 801095a:	d00f      	beq.n	801097c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801095c:	e027      	b.n	80109ae <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	68ba      	ldr	r2, [r7, #8]
 8010962:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	88fa      	ldrh	r2, [r7, #6]
 8010968:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2201      	movs	r2, #1
 801096e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2202      	movs	r2, #2
 8010974:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010976:	2301      	movs	r3, #1
 8010978:	75fb      	strb	r3, [r7, #23]
      break;
 801097a:	e018      	b.n	80109ae <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 801097c:	68f8      	ldr	r0, [r7, #12]
 801097e:	f000 f81b 	bl	80109b8 <USBH_HandleControl>
 8010982:	4603      	mov	r3, r0
 8010984:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010986:	7dfb      	ldrb	r3, [r7, #23]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d002      	beq.n	8010992 <USBH_CtlReq+0x54>
 801098c:	7dfb      	ldrb	r3, [r7, #23]
 801098e:	2b03      	cmp	r3, #3
 8010990:	d106      	bne.n	80109a0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2201      	movs	r2, #1
 8010996:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2200      	movs	r2, #0
 801099c:	761a      	strb	r2, [r3, #24]
      break;
 801099e:	e005      	b.n	80109ac <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80109a0:	7dfb      	ldrb	r3, [r7, #23]
 80109a2:	2b02      	cmp	r3, #2
 80109a4:	d102      	bne.n	80109ac <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2201      	movs	r2, #1
 80109aa:	709a      	strb	r2, [r3, #2]
      break;
 80109ac:	bf00      	nop
  }
  return status;
 80109ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3718      	adds	r7, #24
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b086      	sub	sp, #24
 80109bc:	af02      	add	r7, sp, #8
 80109be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80109c0:	2301      	movs	r3, #1
 80109c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80109c4:	2300      	movs	r3, #0
 80109c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	7e1b      	ldrb	r3, [r3, #24]
 80109cc:	3b01      	subs	r3, #1
 80109ce:	2b0a      	cmp	r3, #10
 80109d0:	f200 8156 	bhi.w	8010c80 <USBH_HandleControl+0x2c8>
 80109d4:	a201      	add	r2, pc, #4	@ (adr r2, 80109dc <USBH_HandleControl+0x24>)
 80109d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109da:	bf00      	nop
 80109dc:	08010a09 	.word	0x08010a09
 80109e0:	08010a23 	.word	0x08010a23
 80109e4:	08010a8d 	.word	0x08010a8d
 80109e8:	08010ab3 	.word	0x08010ab3
 80109ec:	08010aeb 	.word	0x08010aeb
 80109f0:	08010b15 	.word	0x08010b15
 80109f4:	08010b67 	.word	0x08010b67
 80109f8:	08010b89 	.word	0x08010b89
 80109fc:	08010bc5 	.word	0x08010bc5
 8010a00:	08010beb 	.word	0x08010beb
 8010a04:	08010c29 	.word	0x08010c29
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f103 0110 	add.w	r1, r3, #16
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	795b      	ldrb	r3, [r3, #5]
 8010a12:	461a      	mov	r2, r3
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f000 f943 	bl	8010ca0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2202      	movs	r2, #2
 8010a1e:	761a      	strb	r2, [r3, #24]
      break;
 8010a20:	e139      	b.n	8010c96 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	795b      	ldrb	r3, [r3, #5]
 8010a26:	4619      	mov	r1, r3
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f003 fd51 	bl	80144d0 <USBH_LL_GetURBState>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010a32:	7bbb      	ldrb	r3, [r7, #14]
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d11e      	bne.n	8010a76 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	7c1b      	ldrb	r3, [r3, #16]
 8010a3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010a40:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	8adb      	ldrh	r3, [r3, #22]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d00a      	beq.n	8010a60 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010a4a:	7b7b      	ldrb	r3, [r7, #13]
 8010a4c:	2b80      	cmp	r3, #128	@ 0x80
 8010a4e:	d103      	bne.n	8010a58 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2203      	movs	r2, #3
 8010a54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010a56:	e115      	b.n	8010c84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2205      	movs	r2, #5
 8010a5c:	761a      	strb	r2, [r3, #24]
      break;
 8010a5e:	e111      	b.n	8010c84 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8010a60:	7b7b      	ldrb	r3, [r7, #13]
 8010a62:	2b80      	cmp	r3, #128	@ 0x80
 8010a64:	d103      	bne.n	8010a6e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2209      	movs	r2, #9
 8010a6a:	761a      	strb	r2, [r3, #24]
      break;
 8010a6c:	e10a      	b.n	8010c84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2207      	movs	r2, #7
 8010a72:	761a      	strb	r2, [r3, #24]
      break;
 8010a74:	e106      	b.n	8010c84 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010a76:	7bbb      	ldrb	r3, [r7, #14]
 8010a78:	2b04      	cmp	r3, #4
 8010a7a:	d003      	beq.n	8010a84 <USBH_HandleControl+0xcc>
 8010a7c:	7bbb      	ldrb	r3, [r7, #14]
 8010a7e:	2b02      	cmp	r3, #2
 8010a80:	f040 8100 	bne.w	8010c84 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	220b      	movs	r2, #11
 8010a88:	761a      	strb	r2, [r3, #24]
      break;
 8010a8a:	e0fb      	b.n	8010c84 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010a92:	b29a      	uxth	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6899      	ldr	r1, [r3, #8]
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	899a      	ldrh	r2, [r3, #12]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	791b      	ldrb	r3, [r3, #4]
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f000 f93a 	bl	8010d1e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2204      	movs	r2, #4
 8010aae:	761a      	strb	r2, [r3, #24]
      break;
 8010ab0:	e0f1      	b.n	8010c96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	791b      	ldrb	r3, [r3, #4]
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f003 fd09 	bl	80144d0 <USBH_LL_GetURBState>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010ac2:	7bbb      	ldrb	r3, [r7, #14]
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d102      	bne.n	8010ace <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2209      	movs	r2, #9
 8010acc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010ace:	7bbb      	ldrb	r3, [r7, #14]
 8010ad0:	2b05      	cmp	r3, #5
 8010ad2:	d102      	bne.n	8010ada <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010ad4:	2303      	movs	r3, #3
 8010ad6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010ad8:	e0d6      	b.n	8010c88 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8010ada:	7bbb      	ldrb	r3, [r7, #14]
 8010adc:	2b04      	cmp	r3, #4
 8010ade:	f040 80d3 	bne.w	8010c88 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	220b      	movs	r2, #11
 8010ae6:	761a      	strb	r2, [r3, #24]
      break;
 8010ae8:	e0ce      	b.n	8010c88 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6899      	ldr	r1, [r3, #8]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	899a      	ldrh	r2, [r3, #12]
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	795b      	ldrb	r3, [r3, #5]
 8010af6:	2001      	movs	r0, #1
 8010af8:	9000      	str	r0, [sp, #0]
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f8ea 	bl	8010cd4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2206      	movs	r2, #6
 8010b10:	761a      	strb	r2, [r3, #24]
      break;
 8010b12:	e0c0      	b.n	8010c96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	795b      	ldrb	r3, [r3, #5]
 8010b18:	4619      	mov	r1, r3
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f003 fcd8 	bl	80144d0 <USBH_LL_GetURBState>
 8010b20:	4603      	mov	r3, r0
 8010b22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010b24:	7bbb      	ldrb	r3, [r7, #14]
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d103      	bne.n	8010b32 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2207      	movs	r2, #7
 8010b2e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010b30:	e0ac      	b.n	8010c8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8010b32:	7bbb      	ldrb	r3, [r7, #14]
 8010b34:	2b05      	cmp	r3, #5
 8010b36:	d105      	bne.n	8010b44 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	220c      	movs	r2, #12
 8010b3c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010b3e:	2303      	movs	r3, #3
 8010b40:	73fb      	strb	r3, [r7, #15]
      break;
 8010b42:	e0a3      	b.n	8010c8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010b44:	7bbb      	ldrb	r3, [r7, #14]
 8010b46:	2b02      	cmp	r3, #2
 8010b48:	d103      	bne.n	8010b52 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2205      	movs	r2, #5
 8010b4e:	761a      	strb	r2, [r3, #24]
      break;
 8010b50:	e09c      	b.n	8010c8c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8010b52:	7bbb      	ldrb	r3, [r7, #14]
 8010b54:	2b04      	cmp	r3, #4
 8010b56:	f040 8099 	bne.w	8010c8c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	220b      	movs	r2, #11
 8010b5e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010b60:	2302      	movs	r3, #2
 8010b62:	73fb      	strb	r3, [r7, #15]
      break;
 8010b64:	e092      	b.n	8010c8c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	791b      	ldrb	r3, [r3, #4]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	2100      	movs	r1, #0
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f000 f8d5 	bl	8010d1e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010b7a:	b29a      	uxth	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2208      	movs	r2, #8
 8010b84:	761a      	strb	r2, [r3, #24]

      break;
 8010b86:	e086      	b.n	8010c96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	791b      	ldrb	r3, [r3, #4]
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f003 fc9e 	bl	80144d0 <USBH_LL_GetURBState>
 8010b94:	4603      	mov	r3, r0
 8010b96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010b98:	7bbb      	ldrb	r3, [r7, #14]
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d105      	bne.n	8010baa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	220d      	movs	r2, #13
 8010ba2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010ba8:	e072      	b.n	8010c90 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8010baa:	7bbb      	ldrb	r3, [r7, #14]
 8010bac:	2b04      	cmp	r3, #4
 8010bae:	d103      	bne.n	8010bb8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	220b      	movs	r2, #11
 8010bb4:	761a      	strb	r2, [r3, #24]
      break;
 8010bb6:	e06b      	b.n	8010c90 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8010bb8:	7bbb      	ldrb	r3, [r7, #14]
 8010bba:	2b05      	cmp	r3, #5
 8010bbc:	d168      	bne.n	8010c90 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8010bbe:	2303      	movs	r3, #3
 8010bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8010bc2:	e065      	b.n	8010c90 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	795b      	ldrb	r3, [r3, #5]
 8010bc8:	2201      	movs	r2, #1
 8010bca:	9200      	str	r2, [sp, #0]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	2100      	movs	r1, #0
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f000 f87f 	bl	8010cd4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	220a      	movs	r2, #10
 8010be6:	761a      	strb	r2, [r3, #24]
      break;
 8010be8:	e055      	b.n	8010c96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	795b      	ldrb	r3, [r3, #5]
 8010bee:	4619      	mov	r1, r3
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f003 fc6d 	bl	80144d0 <USBH_LL_GetURBState>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010bfa:	7bbb      	ldrb	r3, [r7, #14]
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d105      	bne.n	8010c0c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010c00:	2300      	movs	r3, #0
 8010c02:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	220d      	movs	r2, #13
 8010c08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010c0a:	e043      	b.n	8010c94 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010c0c:	7bbb      	ldrb	r3, [r7, #14]
 8010c0e:	2b02      	cmp	r3, #2
 8010c10:	d103      	bne.n	8010c1a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2209      	movs	r2, #9
 8010c16:	761a      	strb	r2, [r3, #24]
      break;
 8010c18:	e03c      	b.n	8010c94 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8010c1a:	7bbb      	ldrb	r3, [r7, #14]
 8010c1c:	2b04      	cmp	r3, #4
 8010c1e:	d139      	bne.n	8010c94 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	220b      	movs	r2, #11
 8010c24:	761a      	strb	r2, [r3, #24]
      break;
 8010c26:	e035      	b.n	8010c94 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	7e5b      	ldrb	r3, [r3, #25]
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	b2da      	uxtb	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	765a      	strb	r2, [r3, #25]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	7e5b      	ldrb	r3, [r3, #25]
 8010c38:	2b02      	cmp	r3, #2
 8010c3a:	d806      	bhi.n	8010c4a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2201      	movs	r2, #1
 8010c40:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2201      	movs	r2, #1
 8010c46:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010c48:	e025      	b.n	8010c96 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010c50:	2106      	movs	r1, #6
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	795b      	ldrb	r3, [r3, #5]
 8010c60:	4619      	mov	r1, r3
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f000 f90c 	bl	8010e80 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	791b      	ldrb	r3, [r3, #4]
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 f906 	bl	8010e80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2200      	movs	r2, #0
 8010c78:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010c7a:	2302      	movs	r3, #2
 8010c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8010c7e:	e00a      	b.n	8010c96 <USBH_HandleControl+0x2de>

    default:
      break;
 8010c80:	bf00      	nop
 8010c82:	e008      	b.n	8010c96 <USBH_HandleControl+0x2de>
      break;
 8010c84:	bf00      	nop
 8010c86:	e006      	b.n	8010c96 <USBH_HandleControl+0x2de>
      break;
 8010c88:	bf00      	nop
 8010c8a:	e004      	b.n	8010c96 <USBH_HandleControl+0x2de>
      break;
 8010c8c:	bf00      	nop
 8010c8e:	e002      	b.n	8010c96 <USBH_HandleControl+0x2de>
      break;
 8010c90:	bf00      	nop
 8010c92:	e000      	b.n	8010c96 <USBH_HandleControl+0x2de>
      break;
 8010c94:	bf00      	nop
  }

  return status;
 8010c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b088      	sub	sp, #32
 8010ca4:	af04      	add	r7, sp, #16
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	4613      	mov	r3, r2
 8010cac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010cae:	79f9      	ldrb	r1, [r7, #7]
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	9303      	str	r3, [sp, #12]
 8010cb4:	2308      	movs	r3, #8
 8010cb6:	9302      	str	r3, [sp, #8]
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	9301      	str	r3, [sp, #4]
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	9300      	str	r3, [sp, #0]
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	68f8      	ldr	r0, [r7, #12]
 8010cc6:	f003 fbd2 	bl	801446e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8010cca:	2300      	movs	r3, #0
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3710      	adds	r7, #16
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b088      	sub	sp, #32
 8010cd8:	af04      	add	r7, sp, #16
 8010cda:	60f8      	str	r0, [r7, #12]
 8010cdc:	60b9      	str	r1, [r7, #8]
 8010cde:	4611      	mov	r1, r2
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	80fb      	strh	r3, [r7, #6]
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d001      	beq.n	8010cf8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010cf8:	7979      	ldrb	r1, [r7, #5]
 8010cfa:	7e3b      	ldrb	r3, [r7, #24]
 8010cfc:	9303      	str	r3, [sp, #12]
 8010cfe:	88fb      	ldrh	r3, [r7, #6]
 8010d00:	9302      	str	r3, [sp, #8]
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	9301      	str	r3, [sp, #4]
 8010d06:	2301      	movs	r3, #1
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	68f8      	ldr	r0, [r7, #12]
 8010d10:	f003 fbad 	bl	801446e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3710      	adds	r7, #16
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}

08010d1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010d1e:	b580      	push	{r7, lr}
 8010d20:	b088      	sub	sp, #32
 8010d22:	af04      	add	r7, sp, #16
 8010d24:	60f8      	str	r0, [r7, #12]
 8010d26:	60b9      	str	r1, [r7, #8]
 8010d28:	4611      	mov	r1, r2
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	80fb      	strh	r3, [r7, #6]
 8010d30:	4613      	mov	r3, r2
 8010d32:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010d34:	7979      	ldrb	r1, [r7, #5]
 8010d36:	2300      	movs	r3, #0
 8010d38:	9303      	str	r3, [sp, #12]
 8010d3a:	88fb      	ldrh	r3, [r7, #6]
 8010d3c:	9302      	str	r3, [sp, #8]
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	9301      	str	r3, [sp, #4]
 8010d42:	2301      	movs	r3, #1
 8010d44:	9300      	str	r3, [sp, #0]
 8010d46:	2300      	movs	r3, #0
 8010d48:	2201      	movs	r2, #1
 8010d4a:	68f8      	ldr	r0, [r7, #12]
 8010d4c:	f003 fb8f 	bl	801446e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010d50:	2300      	movs	r3, #0

}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3710      	adds	r7, #16
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}

08010d5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010d5a:	b580      	push	{r7, lr}
 8010d5c:	b088      	sub	sp, #32
 8010d5e:	af04      	add	r7, sp, #16
 8010d60:	60f8      	str	r0, [r7, #12]
 8010d62:	60b9      	str	r1, [r7, #8]
 8010d64:	4611      	mov	r1, r2
 8010d66:	461a      	mov	r2, r3
 8010d68:	460b      	mov	r3, r1
 8010d6a:	80fb      	strh	r3, [r7, #6]
 8010d6c:	4613      	mov	r3, r2
 8010d6e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d001      	beq.n	8010d7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010d7e:	7979      	ldrb	r1, [r7, #5]
 8010d80:	7e3b      	ldrb	r3, [r7, #24]
 8010d82:	9303      	str	r3, [sp, #12]
 8010d84:	88fb      	ldrh	r3, [r7, #6]
 8010d86:	9302      	str	r3, [sp, #8]
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	9301      	str	r3, [sp, #4]
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	9300      	str	r3, [sp, #0]
 8010d90:	2302      	movs	r3, #2
 8010d92:	2200      	movs	r2, #0
 8010d94:	68f8      	ldr	r0, [r7, #12]
 8010d96:	f003 fb6a 	bl	801446e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010d9a:	2300      	movs	r3, #0
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3710      	adds	r7, #16
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b088      	sub	sp, #32
 8010da8:	af04      	add	r7, sp, #16
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	60b9      	str	r1, [r7, #8]
 8010dae:	4611      	mov	r1, r2
 8010db0:	461a      	mov	r2, r3
 8010db2:	460b      	mov	r3, r1
 8010db4:	80fb      	strh	r3, [r7, #6]
 8010db6:	4613      	mov	r3, r2
 8010db8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010dba:	7979      	ldrb	r1, [r7, #5]
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	9303      	str	r3, [sp, #12]
 8010dc0:	88fb      	ldrh	r3, [r7, #6]
 8010dc2:	9302      	str	r3, [sp, #8]
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	9301      	str	r3, [sp, #4]
 8010dc8:	2301      	movs	r3, #1
 8010dca:	9300      	str	r3, [sp, #0]
 8010dcc:	2302      	movs	r3, #2
 8010dce:	2201      	movs	r2, #1
 8010dd0:	68f8      	ldr	r0, [r7, #12]
 8010dd2:	f003 fb4c 	bl	801446e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010dd6:	2300      	movs	r3, #0
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3710      	adds	r7, #16
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}

08010de0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b086      	sub	sp, #24
 8010de4:	af04      	add	r7, sp, #16
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	4608      	mov	r0, r1
 8010dea:	4611      	mov	r1, r2
 8010dec:	461a      	mov	r2, r3
 8010dee:	4603      	mov	r3, r0
 8010df0:	70fb      	strb	r3, [r7, #3]
 8010df2:	460b      	mov	r3, r1
 8010df4:	70bb      	strb	r3, [r7, #2]
 8010df6:	4613      	mov	r3, r2
 8010df8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010dfa:	7878      	ldrb	r0, [r7, #1]
 8010dfc:	78ba      	ldrb	r2, [r7, #2]
 8010dfe:	78f9      	ldrb	r1, [r7, #3]
 8010e00:	8b3b      	ldrh	r3, [r7, #24]
 8010e02:	9302      	str	r3, [sp, #8]
 8010e04:	7d3b      	ldrb	r3, [r7, #20]
 8010e06:	9301      	str	r3, [sp, #4]
 8010e08:	7c3b      	ldrb	r3, [r7, #16]
 8010e0a:	9300      	str	r3, [sp, #0]
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f003 fadf 	bl	80143d2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8010e14:	2300      	movs	r3, #0
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3708      	adds	r7, #8
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}

08010e1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010e1e:	b580      	push	{r7, lr}
 8010e20:	b082      	sub	sp, #8
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
 8010e26:	460b      	mov	r3, r1
 8010e28:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8010e2a:	78fb      	ldrb	r3, [r7, #3]
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f003 fafe 	bl	8014430 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010e34:	2300      	movs	r3, #0
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3708      	adds	r7, #8
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}

08010e3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010e3e:	b580      	push	{r7, lr}
 8010e40:	b084      	sub	sp, #16
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
 8010e46:	460b      	mov	r3, r1
 8010e48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f000 f836 	bl	8010ebc <USBH_GetFreePipe>
 8010e50:	4603      	mov	r3, r0
 8010e52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010e54:	89fb      	ldrh	r3, [r7, #14]
 8010e56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d00a      	beq.n	8010e74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8010e5e:	78fa      	ldrb	r2, [r7, #3]
 8010e60:	89fb      	ldrh	r3, [r7, #14]
 8010e62:	f003 030f 	and.w	r3, r3, #15
 8010e66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010e6a:	6879      	ldr	r1, [r7, #4]
 8010e6c:	33e0      	adds	r3, #224	@ 0xe0
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	440b      	add	r3, r1
 8010e72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010e74:	89fb      	ldrh	r3, [r7, #14]
 8010e76:	b2db      	uxtb	r3, r3
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3710      	adds	r7, #16
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010e80:	b480      	push	{r7}
 8010e82:	b083      	sub	sp, #12
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	460b      	mov	r3, r1
 8010e8a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010e8c:	78fb      	ldrb	r3, [r7, #3]
 8010e8e:	2b0f      	cmp	r3, #15
 8010e90:	d80d      	bhi.n	8010eae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010e92:	78fb      	ldrb	r3, [r7, #3]
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	33e0      	adds	r3, #224	@ 0xe0
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	4413      	add	r3, r2
 8010e9c:	685a      	ldr	r2, [r3, #4]
 8010e9e:	78fb      	ldrb	r3, [r7, #3]
 8010ea0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010ea4:	6879      	ldr	r1, [r7, #4]
 8010ea6:	33e0      	adds	r3, #224	@ 0xe0
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	440b      	add	r3, r1
 8010eac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010eae:	2300      	movs	r3, #0
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	370c      	adds	r7, #12
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eba:	4770      	bx	lr

08010ebc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b085      	sub	sp, #20
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010ec8:	2300      	movs	r3, #0
 8010eca:	73fb      	strb	r3, [r7, #15]
 8010ecc:	e00f      	b.n	8010eee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010ece:	7bfb      	ldrb	r3, [r7, #15]
 8010ed0:	687a      	ldr	r2, [r7, #4]
 8010ed2:	33e0      	adds	r3, #224	@ 0xe0
 8010ed4:	009b      	lsls	r3, r3, #2
 8010ed6:	4413      	add	r3, r2
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d102      	bne.n	8010ee8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010ee2:	7bfb      	ldrb	r3, [r7, #15]
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	e007      	b.n	8010ef8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010ee8:	7bfb      	ldrb	r3, [r7, #15]
 8010eea:	3301      	adds	r3, #1
 8010eec:	73fb      	strb	r3, [r7, #15]
 8010eee:	7bfb      	ldrb	r3, [r7, #15]
 8010ef0:	2b0f      	cmp	r3, #15
 8010ef2:	d9ec      	bls.n	8010ece <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010ef4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3714      	adds	r7, #20
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr

08010f04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010f0e:	79fb      	ldrb	r3, [r7, #7]
 8010f10:	4a08      	ldr	r2, [pc, #32]	@ (8010f34 <disk_status+0x30>)
 8010f12:	009b      	lsls	r3, r3, #2
 8010f14:	4413      	add	r3, r2
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	79fa      	ldrb	r2, [r7, #7]
 8010f1c:	4905      	ldr	r1, [pc, #20]	@ (8010f34 <disk_status+0x30>)
 8010f1e:	440a      	add	r2, r1
 8010f20:	7a12      	ldrb	r2, [r2, #8]
 8010f22:	4610      	mov	r0, r2
 8010f24:	4798      	blx	r3
 8010f26:	4603      	mov	r3, r0
 8010f28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3710      	adds	r7, #16
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}
 8010f34:	20000928 	.word	0x20000928

08010f38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b084      	sub	sp, #16
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	4603      	mov	r3, r0
 8010f40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010f42:	2300      	movs	r3, #0
 8010f44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010f46:	79fb      	ldrb	r3, [r7, #7]
 8010f48:	4a0e      	ldr	r2, [pc, #56]	@ (8010f84 <disk_initialize+0x4c>)
 8010f4a:	5cd3      	ldrb	r3, [r2, r3]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d114      	bne.n	8010f7a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010f50:	79fb      	ldrb	r3, [r7, #7]
 8010f52:	4a0c      	ldr	r2, [pc, #48]	@ (8010f84 <disk_initialize+0x4c>)
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	4413      	add	r3, r2
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	79fa      	ldrb	r2, [r7, #7]
 8010f5e:	4909      	ldr	r1, [pc, #36]	@ (8010f84 <disk_initialize+0x4c>)
 8010f60:	440a      	add	r2, r1
 8010f62:	7a12      	ldrb	r2, [r2, #8]
 8010f64:	4610      	mov	r0, r2
 8010f66:	4798      	blx	r3
 8010f68:	4603      	mov	r3, r0
 8010f6a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010f6c:	7bfb      	ldrb	r3, [r7, #15]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d103      	bne.n	8010f7a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010f72:	79fb      	ldrb	r3, [r7, #7]
 8010f74:	4a03      	ldr	r2, [pc, #12]	@ (8010f84 <disk_initialize+0x4c>)
 8010f76:	2101      	movs	r1, #1
 8010f78:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3710      	adds	r7, #16
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	20000928 	.word	0x20000928

08010f88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010f88:	b590      	push	{r4, r7, lr}
 8010f8a:	b087      	sub	sp, #28
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60b9      	str	r1, [r7, #8]
 8010f90:	607a      	str	r2, [r7, #4]
 8010f92:	603b      	str	r3, [r7, #0]
 8010f94:	4603      	mov	r3, r0
 8010f96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010f98:	7bfb      	ldrb	r3, [r7, #15]
 8010f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8010fc4 <disk_read+0x3c>)
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	4413      	add	r3, r2
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	689c      	ldr	r4, [r3, #8]
 8010fa4:	7bfb      	ldrb	r3, [r7, #15]
 8010fa6:	4a07      	ldr	r2, [pc, #28]	@ (8010fc4 <disk_read+0x3c>)
 8010fa8:	4413      	add	r3, r2
 8010faa:	7a18      	ldrb	r0, [r3, #8]
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	68b9      	ldr	r1, [r7, #8]
 8010fb2:	47a0      	blx	r4
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8010fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	371c      	adds	r7, #28
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd90      	pop	{r4, r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	20000928 	.word	0x20000928

08010fc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010fc8:	b590      	push	{r4, r7, lr}
 8010fca:	b087      	sub	sp, #28
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60b9      	str	r1, [r7, #8]
 8010fd0:	607a      	str	r2, [r7, #4]
 8010fd2:	603b      	str	r3, [r7, #0]
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010fd8:	7bfb      	ldrb	r3, [r7, #15]
 8010fda:	4a0a      	ldr	r2, [pc, #40]	@ (8011004 <disk_write+0x3c>)
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	4413      	add	r3, r2
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	68dc      	ldr	r4, [r3, #12]
 8010fe4:	7bfb      	ldrb	r3, [r7, #15]
 8010fe6:	4a07      	ldr	r2, [pc, #28]	@ (8011004 <disk_write+0x3c>)
 8010fe8:	4413      	add	r3, r2
 8010fea:	7a18      	ldrb	r0, [r3, #8]
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	68b9      	ldr	r1, [r7, #8]
 8010ff2:	47a0      	blx	r4
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	75fb      	strb	r3, [r7, #23]
  return res;
 8010ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	371c      	adds	r7, #28
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd90      	pop	{r4, r7, pc}
 8011002:	bf00      	nop
 8011004:	20000928 	.word	0x20000928

08011008 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0
 801100e:	4603      	mov	r3, r0
 8011010:	603a      	str	r2, [r7, #0]
 8011012:	71fb      	strb	r3, [r7, #7]
 8011014:	460b      	mov	r3, r1
 8011016:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011018:	79fb      	ldrb	r3, [r7, #7]
 801101a:	4a09      	ldr	r2, [pc, #36]	@ (8011040 <disk_ioctl+0x38>)
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	4413      	add	r3, r2
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	691b      	ldr	r3, [r3, #16]
 8011024:	79fa      	ldrb	r2, [r7, #7]
 8011026:	4906      	ldr	r1, [pc, #24]	@ (8011040 <disk_ioctl+0x38>)
 8011028:	440a      	add	r2, r1
 801102a:	7a10      	ldrb	r0, [r2, #8]
 801102c:	79b9      	ldrb	r1, [r7, #6]
 801102e:	683a      	ldr	r2, [r7, #0]
 8011030:	4798      	blx	r3
 8011032:	4603      	mov	r3, r0
 8011034:	73fb      	strb	r3, [r7, #15]
  return res;
 8011036:	7bfb      	ldrb	r3, [r7, #15]
}
 8011038:	4618      	mov	r0, r3
 801103a:	3710      	adds	r7, #16
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	20000928 	.word	0x20000928

08011044 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011044:	b480      	push	{r7}
 8011046:	b085      	sub	sp, #20
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	3301      	adds	r3, #1
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011054:	89fb      	ldrh	r3, [r7, #14]
 8011056:	021b      	lsls	r3, r3, #8
 8011058:	b21a      	sxth	r2, r3
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	b21b      	sxth	r3, r3
 8011060:	4313      	orrs	r3, r2
 8011062:	b21b      	sxth	r3, r3
 8011064:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011066:	89fb      	ldrh	r3, [r7, #14]
}
 8011068:	4618      	mov	r0, r3
 801106a:	3714      	adds	r7, #20
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr

08011074 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011074:	b480      	push	{r7}
 8011076:	b085      	sub	sp, #20
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	3303      	adds	r3, #3
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	021b      	lsls	r3, r3, #8
 8011088:	687a      	ldr	r2, [r7, #4]
 801108a:	3202      	adds	r2, #2
 801108c:	7812      	ldrb	r2, [r2, #0]
 801108e:	4313      	orrs	r3, r2
 8011090:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	021b      	lsls	r3, r3, #8
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	3201      	adds	r2, #1
 801109a:	7812      	ldrb	r2, [r2, #0]
 801109c:	4313      	orrs	r3, r2
 801109e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	021b      	lsls	r3, r3, #8
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	7812      	ldrb	r2, [r2, #0]
 80110a8:	4313      	orrs	r3, r2
 80110aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80110ac:	68fb      	ldr	r3, [r7, #12]
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3714      	adds	r7, #20
 80110b2:	46bd      	mov	sp, r7
 80110b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b8:	4770      	bx	lr

080110ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80110ba:	b480      	push	{r7}
 80110bc:	b083      	sub	sp, #12
 80110be:	af00      	add	r7, sp, #0
 80110c0:	6078      	str	r0, [r7, #4]
 80110c2:	460b      	mov	r3, r1
 80110c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	1c5a      	adds	r2, r3, #1
 80110ca:	607a      	str	r2, [r7, #4]
 80110cc:	887a      	ldrh	r2, [r7, #2]
 80110ce:	b2d2      	uxtb	r2, r2
 80110d0:	701a      	strb	r2, [r3, #0]
 80110d2:	887b      	ldrh	r3, [r7, #2]
 80110d4:	0a1b      	lsrs	r3, r3, #8
 80110d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	1c5a      	adds	r2, r3, #1
 80110dc:	607a      	str	r2, [r7, #4]
 80110de:	887a      	ldrh	r2, [r7, #2]
 80110e0:	b2d2      	uxtb	r2, r2
 80110e2:	701a      	strb	r2, [r3, #0]
}
 80110e4:	bf00      	nop
 80110e6:	370c      	adds	r7, #12
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80110f0:	b480      	push	{r7}
 80110f2:	b083      	sub	sp, #12
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	1c5a      	adds	r2, r3, #1
 80110fe:	607a      	str	r2, [r7, #4]
 8011100:	683a      	ldr	r2, [r7, #0]
 8011102:	b2d2      	uxtb	r2, r2
 8011104:	701a      	strb	r2, [r3, #0]
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	0a1b      	lsrs	r3, r3, #8
 801110a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	1c5a      	adds	r2, r3, #1
 8011110:	607a      	str	r2, [r7, #4]
 8011112:	683a      	ldr	r2, [r7, #0]
 8011114:	b2d2      	uxtb	r2, r2
 8011116:	701a      	strb	r2, [r3, #0]
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	0a1b      	lsrs	r3, r3, #8
 801111c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	1c5a      	adds	r2, r3, #1
 8011122:	607a      	str	r2, [r7, #4]
 8011124:	683a      	ldr	r2, [r7, #0]
 8011126:	b2d2      	uxtb	r2, r2
 8011128:	701a      	strb	r2, [r3, #0]
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	0a1b      	lsrs	r3, r3, #8
 801112e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	1c5a      	adds	r2, r3, #1
 8011134:	607a      	str	r2, [r7, #4]
 8011136:	683a      	ldr	r2, [r7, #0]
 8011138:	b2d2      	uxtb	r2, r2
 801113a:	701a      	strb	r2, [r3, #0]
}
 801113c:	bf00      	nop
 801113e:	370c      	adds	r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011148:	b480      	push	{r7}
 801114a:	b087      	sub	sp, #28
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d00d      	beq.n	801117e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011162:	693a      	ldr	r2, [r7, #16]
 8011164:	1c53      	adds	r3, r2, #1
 8011166:	613b      	str	r3, [r7, #16]
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	1c59      	adds	r1, r3, #1
 801116c:	6179      	str	r1, [r7, #20]
 801116e:	7812      	ldrb	r2, [r2, #0]
 8011170:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	3b01      	subs	r3, #1
 8011176:	607b      	str	r3, [r7, #4]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d1f1      	bne.n	8011162 <mem_cpy+0x1a>
	}
}
 801117e:	bf00      	nop
 8011180:	371c      	adds	r7, #28
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr

0801118a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801118a:	b480      	push	{r7}
 801118c:	b087      	sub	sp, #28
 801118e:	af00      	add	r7, sp, #0
 8011190:	60f8      	str	r0, [r7, #12]
 8011192:	60b9      	str	r1, [r7, #8]
 8011194:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	1c5a      	adds	r2, r3, #1
 801119e:	617a      	str	r2, [r7, #20]
 80111a0:	68ba      	ldr	r2, [r7, #8]
 80111a2:	b2d2      	uxtb	r2, r2
 80111a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	3b01      	subs	r3, #1
 80111aa:	607b      	str	r3, [r7, #4]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d1f3      	bne.n	801119a <mem_set+0x10>
}
 80111b2:	bf00      	nop
 80111b4:	bf00      	nop
 80111b6:	371c      	adds	r7, #28
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr

080111c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80111c0:	b480      	push	{r7}
 80111c2:	b089      	sub	sp, #36	@ 0x24
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	60b9      	str	r1, [r7, #8]
 80111ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	61fb      	str	r3, [r7, #28]
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80111d4:	2300      	movs	r3, #0
 80111d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80111d8:	69fb      	ldr	r3, [r7, #28]
 80111da:	1c5a      	adds	r2, r3, #1
 80111dc:	61fa      	str	r2, [r7, #28]
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	4619      	mov	r1, r3
 80111e2:	69bb      	ldr	r3, [r7, #24]
 80111e4:	1c5a      	adds	r2, r3, #1
 80111e6:	61ba      	str	r2, [r7, #24]
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	1acb      	subs	r3, r1, r3
 80111ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	3b01      	subs	r3, #1
 80111f2:	607b      	str	r3, [r7, #4]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d002      	beq.n	8011200 <mem_cmp+0x40>
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d0eb      	beq.n	80111d8 <mem_cmp+0x18>

	return r;
 8011200:	697b      	ldr	r3, [r7, #20]
}
 8011202:	4618      	mov	r0, r3
 8011204:	3724      	adds	r7, #36	@ 0x24
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr

0801120e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801120e:	b480      	push	{r7}
 8011210:	b083      	sub	sp, #12
 8011212:	af00      	add	r7, sp, #0
 8011214:	6078      	str	r0, [r7, #4]
 8011216:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011218:	e002      	b.n	8011220 <chk_chr+0x12>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	3301      	adds	r3, #1
 801121e:	607b      	str	r3, [r7, #4]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d005      	beq.n	8011234 <chk_chr+0x26>
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	461a      	mov	r2, r3
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	4293      	cmp	r3, r2
 8011232:	d1f2      	bne.n	801121a <chk_chr+0xc>
	return *str;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	781b      	ldrb	r3, [r3, #0]
}
 8011238:	4618      	mov	r0, r3
 801123a:	370c      	adds	r7, #12
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr

08011244 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011244:	b480      	push	{r7}
 8011246:	b085      	sub	sp, #20
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801124e:	2300      	movs	r3, #0
 8011250:	60bb      	str	r3, [r7, #8]
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	60fb      	str	r3, [r7, #12]
 8011256:	e029      	b.n	80112ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011258:	4a27      	ldr	r2, [pc, #156]	@ (80112f8 <chk_lock+0xb4>)
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	011b      	lsls	r3, r3, #4
 801125e:	4413      	add	r3, r2
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d01d      	beq.n	80112a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011266:	4a24      	ldr	r2, [pc, #144]	@ (80112f8 <chk_lock+0xb4>)
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	011b      	lsls	r3, r3, #4
 801126c:	4413      	add	r3, r2
 801126e:	681a      	ldr	r2, [r3, #0]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	429a      	cmp	r2, r3
 8011276:	d116      	bne.n	80112a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011278:	4a1f      	ldr	r2, [pc, #124]	@ (80112f8 <chk_lock+0xb4>)
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	011b      	lsls	r3, r3, #4
 801127e:	4413      	add	r3, r2
 8011280:	3304      	adds	r3, #4
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011288:	429a      	cmp	r2, r3
 801128a:	d10c      	bne.n	80112a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801128c:	4a1a      	ldr	r2, [pc, #104]	@ (80112f8 <chk_lock+0xb4>)
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	011b      	lsls	r3, r3, #4
 8011292:	4413      	add	r3, r2
 8011294:	3308      	adds	r3, #8
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801129c:	429a      	cmp	r2, r3
 801129e:	d102      	bne.n	80112a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80112a0:	e007      	b.n	80112b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80112a2:	2301      	movs	r3, #1
 80112a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	3301      	adds	r3, #1
 80112aa:	60fb      	str	r3, [r7, #12]
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d9d2      	bls.n	8011258 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2b02      	cmp	r3, #2
 80112b6:	d109      	bne.n	80112cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d102      	bne.n	80112c4 <chk_lock+0x80>
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	2b02      	cmp	r3, #2
 80112c2:	d101      	bne.n	80112c8 <chk_lock+0x84>
 80112c4:	2300      	movs	r3, #0
 80112c6:	e010      	b.n	80112ea <chk_lock+0xa6>
 80112c8:	2312      	movs	r3, #18
 80112ca:	e00e      	b.n	80112ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d108      	bne.n	80112e4 <chk_lock+0xa0>
 80112d2:	4a09      	ldr	r2, [pc, #36]	@ (80112f8 <chk_lock+0xb4>)
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	011b      	lsls	r3, r3, #4
 80112d8:	4413      	add	r3, r2
 80112da:	330c      	adds	r3, #12
 80112dc:	881b      	ldrh	r3, [r3, #0]
 80112de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80112e2:	d101      	bne.n	80112e8 <chk_lock+0xa4>
 80112e4:	2310      	movs	r3, #16
 80112e6:	e000      	b.n	80112ea <chk_lock+0xa6>
 80112e8:	2300      	movs	r3, #0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3714      	adds	r7, #20
 80112ee:	46bd      	mov	sp, r7
 80112f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f4:	4770      	bx	lr
 80112f6:	bf00      	nop
 80112f8:	20000908 	.word	0x20000908

080112fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80112fc:	b480      	push	{r7}
 80112fe:	b083      	sub	sp, #12
 8011300:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011302:	2300      	movs	r3, #0
 8011304:	607b      	str	r3, [r7, #4]
 8011306:	e002      	b.n	801130e <enq_lock+0x12>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	3301      	adds	r3, #1
 801130c:	607b      	str	r3, [r7, #4]
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2b01      	cmp	r3, #1
 8011312:	d806      	bhi.n	8011322 <enq_lock+0x26>
 8011314:	4a09      	ldr	r2, [pc, #36]	@ (801133c <enq_lock+0x40>)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	011b      	lsls	r3, r3, #4
 801131a:	4413      	add	r3, r2
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1f2      	bne.n	8011308 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2b02      	cmp	r3, #2
 8011326:	bf14      	ite	ne
 8011328:	2301      	movne	r3, #1
 801132a:	2300      	moveq	r3, #0
 801132c:	b2db      	uxtb	r3, r3
}
 801132e:	4618      	mov	r0, r3
 8011330:	370c      	adds	r7, #12
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop
 801133c:	20000908 	.word	0x20000908

08011340 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011340:	b480      	push	{r7}
 8011342:	b085      	sub	sp, #20
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801134a:	2300      	movs	r3, #0
 801134c:	60fb      	str	r3, [r7, #12]
 801134e:	e01f      	b.n	8011390 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011350:	4a41      	ldr	r2, [pc, #260]	@ (8011458 <inc_lock+0x118>)
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	011b      	lsls	r3, r3, #4
 8011356:	4413      	add	r3, r2
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	429a      	cmp	r2, r3
 8011360:	d113      	bne.n	801138a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011362:	4a3d      	ldr	r2, [pc, #244]	@ (8011458 <inc_lock+0x118>)
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	011b      	lsls	r3, r3, #4
 8011368:	4413      	add	r3, r2
 801136a:	3304      	adds	r3, #4
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011372:	429a      	cmp	r2, r3
 8011374:	d109      	bne.n	801138a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011376:	4a38      	ldr	r2, [pc, #224]	@ (8011458 <inc_lock+0x118>)
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	011b      	lsls	r3, r3, #4
 801137c:	4413      	add	r3, r2
 801137e:	3308      	adds	r3, #8
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011386:	429a      	cmp	r2, r3
 8011388:	d006      	beq.n	8011398 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	3301      	adds	r3, #1
 801138e:	60fb      	str	r3, [r7, #12]
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2b01      	cmp	r3, #1
 8011394:	d9dc      	bls.n	8011350 <inc_lock+0x10>
 8011396:	e000      	b.n	801139a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011398:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2b02      	cmp	r3, #2
 801139e:	d132      	bne.n	8011406 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80113a0:	2300      	movs	r3, #0
 80113a2:	60fb      	str	r3, [r7, #12]
 80113a4:	e002      	b.n	80113ac <inc_lock+0x6c>
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	3301      	adds	r3, #1
 80113aa:	60fb      	str	r3, [r7, #12]
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2b01      	cmp	r3, #1
 80113b0:	d806      	bhi.n	80113c0 <inc_lock+0x80>
 80113b2:	4a29      	ldr	r2, [pc, #164]	@ (8011458 <inc_lock+0x118>)
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	011b      	lsls	r3, r3, #4
 80113b8:	4413      	add	r3, r2
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d1f2      	bne.n	80113a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b02      	cmp	r3, #2
 80113c4:	d101      	bne.n	80113ca <inc_lock+0x8a>
 80113c6:	2300      	movs	r3, #0
 80113c8:	e040      	b.n	801144c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681a      	ldr	r2, [r3, #0]
 80113ce:	4922      	ldr	r1, [pc, #136]	@ (8011458 <inc_lock+0x118>)
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	011b      	lsls	r3, r3, #4
 80113d4:	440b      	add	r3, r1
 80113d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	689a      	ldr	r2, [r3, #8]
 80113dc:	491e      	ldr	r1, [pc, #120]	@ (8011458 <inc_lock+0x118>)
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	011b      	lsls	r3, r3, #4
 80113e2:	440b      	add	r3, r1
 80113e4:	3304      	adds	r3, #4
 80113e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	695a      	ldr	r2, [r3, #20]
 80113ec:	491a      	ldr	r1, [pc, #104]	@ (8011458 <inc_lock+0x118>)
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	011b      	lsls	r3, r3, #4
 80113f2:	440b      	add	r3, r1
 80113f4:	3308      	adds	r3, #8
 80113f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80113f8:	4a17      	ldr	r2, [pc, #92]	@ (8011458 <inc_lock+0x118>)
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	011b      	lsls	r3, r3, #4
 80113fe:	4413      	add	r3, r2
 8011400:	330c      	adds	r3, #12
 8011402:	2200      	movs	r2, #0
 8011404:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d009      	beq.n	8011420 <inc_lock+0xe0>
 801140c:	4a12      	ldr	r2, [pc, #72]	@ (8011458 <inc_lock+0x118>)
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	011b      	lsls	r3, r3, #4
 8011412:	4413      	add	r3, r2
 8011414:	330c      	adds	r3, #12
 8011416:	881b      	ldrh	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d001      	beq.n	8011420 <inc_lock+0xe0>
 801141c:	2300      	movs	r3, #0
 801141e:	e015      	b.n	801144c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d108      	bne.n	8011438 <inc_lock+0xf8>
 8011426:	4a0c      	ldr	r2, [pc, #48]	@ (8011458 <inc_lock+0x118>)
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	011b      	lsls	r3, r3, #4
 801142c:	4413      	add	r3, r2
 801142e:	330c      	adds	r3, #12
 8011430:	881b      	ldrh	r3, [r3, #0]
 8011432:	3301      	adds	r3, #1
 8011434:	b29a      	uxth	r2, r3
 8011436:	e001      	b.n	801143c <inc_lock+0xfc>
 8011438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801143c:	4906      	ldr	r1, [pc, #24]	@ (8011458 <inc_lock+0x118>)
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	011b      	lsls	r3, r3, #4
 8011442:	440b      	add	r3, r1
 8011444:	330c      	adds	r3, #12
 8011446:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	3301      	adds	r3, #1
}
 801144c:	4618      	mov	r0, r3
 801144e:	3714      	adds	r7, #20
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr
 8011458:	20000908 	.word	0x20000908

0801145c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801145c:	b480      	push	{r7}
 801145e:	b085      	sub	sp, #20
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	3b01      	subs	r3, #1
 8011468:	607b      	str	r3, [r7, #4]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2b01      	cmp	r3, #1
 801146e:	d825      	bhi.n	80114bc <dec_lock+0x60>
		n = Files[i].ctr;
 8011470:	4a17      	ldr	r2, [pc, #92]	@ (80114d0 <dec_lock+0x74>)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	011b      	lsls	r3, r3, #4
 8011476:	4413      	add	r3, r2
 8011478:	330c      	adds	r3, #12
 801147a:	881b      	ldrh	r3, [r3, #0]
 801147c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801147e:	89fb      	ldrh	r3, [r7, #14]
 8011480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011484:	d101      	bne.n	801148a <dec_lock+0x2e>
 8011486:	2300      	movs	r3, #0
 8011488:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801148a:	89fb      	ldrh	r3, [r7, #14]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d002      	beq.n	8011496 <dec_lock+0x3a>
 8011490:	89fb      	ldrh	r3, [r7, #14]
 8011492:	3b01      	subs	r3, #1
 8011494:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011496:	4a0e      	ldr	r2, [pc, #56]	@ (80114d0 <dec_lock+0x74>)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	011b      	lsls	r3, r3, #4
 801149c:	4413      	add	r3, r2
 801149e:	330c      	adds	r3, #12
 80114a0:	89fa      	ldrh	r2, [r7, #14]
 80114a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80114a4:	89fb      	ldrh	r3, [r7, #14]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d105      	bne.n	80114b6 <dec_lock+0x5a>
 80114aa:	4a09      	ldr	r2, [pc, #36]	@ (80114d0 <dec_lock+0x74>)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	011b      	lsls	r3, r3, #4
 80114b0:	4413      	add	r3, r2
 80114b2:	2200      	movs	r2, #0
 80114b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80114b6:	2300      	movs	r3, #0
 80114b8:	737b      	strb	r3, [r7, #13]
 80114ba:	e001      	b.n	80114c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80114bc:	2302      	movs	r3, #2
 80114be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80114c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3714      	adds	r7, #20
 80114c6:	46bd      	mov	sp, r7
 80114c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114cc:	4770      	bx	lr
 80114ce:	bf00      	nop
 80114d0:	20000908 	.word	0x20000908

080114d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b085      	sub	sp, #20
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80114dc:	2300      	movs	r3, #0
 80114de:	60fb      	str	r3, [r7, #12]
 80114e0:	e010      	b.n	8011504 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80114e2:	4a0d      	ldr	r2, [pc, #52]	@ (8011518 <clear_lock+0x44>)
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	011b      	lsls	r3, r3, #4
 80114e8:	4413      	add	r3, r2
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d105      	bne.n	80114fe <clear_lock+0x2a>
 80114f2:	4a09      	ldr	r2, [pc, #36]	@ (8011518 <clear_lock+0x44>)
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	011b      	lsls	r3, r3, #4
 80114f8:	4413      	add	r3, r2
 80114fa:	2200      	movs	r2, #0
 80114fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	3301      	adds	r3, #1
 8011502:	60fb      	str	r3, [r7, #12]
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2b01      	cmp	r3, #1
 8011508:	d9eb      	bls.n	80114e2 <clear_lock+0xe>
	}
}
 801150a:	bf00      	nop
 801150c:	bf00      	nop
 801150e:	3714      	adds	r7, #20
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr
 8011518:	20000908 	.word	0x20000908

0801151c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b086      	sub	sp, #24
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011524:	2300      	movs	r3, #0
 8011526:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	78db      	ldrb	r3, [r3, #3]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d034      	beq.n	801159a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011534:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	7858      	ldrb	r0, [r3, #1]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011540:	2301      	movs	r3, #1
 8011542:	697a      	ldr	r2, [r7, #20]
 8011544:	f7ff fd40 	bl	8010fc8 <disk_write>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d002      	beq.n	8011554 <sync_window+0x38>
			res = FR_DISK_ERR;
 801154e:	2301      	movs	r3, #1
 8011550:	73fb      	strb	r3, [r7, #15]
 8011552:	e022      	b.n	801159a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2200      	movs	r2, #0
 8011558:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6a1b      	ldr	r3, [r3, #32]
 801155e:	697a      	ldr	r2, [r7, #20]
 8011560:	1ad2      	subs	r2, r2, r3
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	699b      	ldr	r3, [r3, #24]
 8011566:	429a      	cmp	r2, r3
 8011568:	d217      	bcs.n	801159a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	789b      	ldrb	r3, [r3, #2]
 801156e:	613b      	str	r3, [r7, #16]
 8011570:	e010      	b.n	8011594 <sync_window+0x78>
					wsect += fs->fsize;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	699b      	ldr	r3, [r3, #24]
 8011576:	697a      	ldr	r2, [r7, #20]
 8011578:	4413      	add	r3, r2
 801157a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	7858      	ldrb	r0, [r3, #1]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011586:	2301      	movs	r3, #1
 8011588:	697a      	ldr	r2, [r7, #20]
 801158a:	f7ff fd1d 	bl	8010fc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	3b01      	subs	r3, #1
 8011592:	613b      	str	r3, [r7, #16]
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	2b01      	cmp	r3, #1
 8011598:	d8eb      	bhi.n	8011572 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801159a:	7bfb      	ldrb	r3, [r7, #15]
}
 801159c:	4618      	mov	r0, r3
 801159e:	3718      	adds	r7, #24
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80115ae:	2300      	movs	r3, #0
 80115b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115b6:	683a      	ldr	r2, [r7, #0]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d01b      	beq.n	80115f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f7ff ffad 	bl	801151c <sync_window>
 80115c2:	4603      	mov	r3, r0
 80115c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80115c6:	7bfb      	ldrb	r3, [r7, #15]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d113      	bne.n	80115f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	7858      	ldrb	r0, [r3, #1]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80115d6:	2301      	movs	r3, #1
 80115d8:	683a      	ldr	r2, [r7, #0]
 80115da:	f7ff fcd5 	bl	8010f88 <disk_read>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d004      	beq.n	80115ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80115e4:	f04f 33ff 	mov.w	r3, #4294967295
 80115e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80115ea:	2301      	movs	r3, #1
 80115ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	683a      	ldr	r2, [r7, #0]
 80115f2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80115f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3710      	adds	r7, #16
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
	...

08011600 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f7ff ff87 	bl	801151c <sync_window>
 801160e:	4603      	mov	r3, r0
 8011610:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011612:	7bfb      	ldrb	r3, [r7, #15]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d158      	bne.n	80116ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	2b03      	cmp	r3, #3
 801161e:	d148      	bne.n	80116b2 <sync_fs+0xb2>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	791b      	ldrb	r3, [r3, #4]
 8011624:	2b01      	cmp	r3, #1
 8011626:	d144      	bne.n	80116b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	3330      	adds	r3, #48	@ 0x30
 801162c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011630:	2100      	movs	r1, #0
 8011632:	4618      	mov	r0, r3
 8011634:	f7ff fda9 	bl	801118a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	3330      	adds	r3, #48	@ 0x30
 801163c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011640:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011644:	4618      	mov	r0, r3
 8011646:	f7ff fd38 	bl	80110ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	3330      	adds	r3, #48	@ 0x30
 801164e:	4921      	ldr	r1, [pc, #132]	@ (80116d4 <sync_fs+0xd4>)
 8011650:	4618      	mov	r0, r3
 8011652:	f7ff fd4d 	bl	80110f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	3330      	adds	r3, #48	@ 0x30
 801165a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801165e:	491e      	ldr	r1, [pc, #120]	@ (80116d8 <sync_fs+0xd8>)
 8011660:	4618      	mov	r0, r3
 8011662:	f7ff fd45 	bl	80110f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	3330      	adds	r3, #48	@ 0x30
 801166a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	691b      	ldr	r3, [r3, #16]
 8011672:	4619      	mov	r1, r3
 8011674:	4610      	mov	r0, r2
 8011676:	f7ff fd3b 	bl	80110f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	3330      	adds	r3, #48	@ 0x30
 801167e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	68db      	ldr	r3, [r3, #12]
 8011686:	4619      	mov	r1, r3
 8011688:	4610      	mov	r0, r2
 801168a:	f7ff fd31 	bl	80110f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	69db      	ldr	r3, [r3, #28]
 8011692:	1c5a      	adds	r2, r3, #1
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	7858      	ldrb	r0, [r3, #1]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116a6:	2301      	movs	r3, #1
 80116a8:	f7ff fc8e 	bl	8010fc8 <disk_write>
			fs->fsi_flag = 0;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2200      	movs	r2, #0
 80116b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	785b      	ldrb	r3, [r3, #1]
 80116b6:	2200      	movs	r2, #0
 80116b8:	2100      	movs	r1, #0
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7ff fca4 	bl	8011008 <disk_ioctl>
 80116c0:	4603      	mov	r3, r0
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d001      	beq.n	80116ca <sync_fs+0xca>
 80116c6:	2301      	movs	r3, #1
 80116c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80116ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80116cc:	4618      	mov	r0, r3
 80116ce:	3710      	adds	r7, #16
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	41615252 	.word	0x41615252
 80116d8:	61417272 	.word	0x61417272

080116dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80116dc:	b480      	push	{r7}
 80116de:	b083      	sub	sp, #12
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	3b02      	subs	r3, #2
 80116ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	695b      	ldr	r3, [r3, #20]
 80116f0:	3b02      	subs	r3, #2
 80116f2:	683a      	ldr	r2, [r7, #0]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d301      	bcc.n	80116fc <clust2sect+0x20>
 80116f8:	2300      	movs	r3, #0
 80116fa:	e008      	b.n	801170e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	895b      	ldrh	r3, [r3, #10]
 8011700:	461a      	mov	r2, r3
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	fb03 f202 	mul.w	r2, r3, r2
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801170c:	4413      	add	r3, r2
}
 801170e:	4618      	mov	r0, r3
 8011710:	370c      	adds	r7, #12
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr

0801171a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801171a:	b580      	push	{r7, lr}
 801171c:	b086      	sub	sp, #24
 801171e:	af00      	add	r7, sp, #0
 8011720:	6078      	str	r0, [r7, #4]
 8011722:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	2b01      	cmp	r3, #1
 801172e:	d904      	bls.n	801173a <get_fat+0x20>
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	695b      	ldr	r3, [r3, #20]
 8011734:	683a      	ldr	r2, [r7, #0]
 8011736:	429a      	cmp	r2, r3
 8011738:	d302      	bcc.n	8011740 <get_fat+0x26>
		val = 1;	/* Internal error */
 801173a:	2301      	movs	r3, #1
 801173c:	617b      	str	r3, [r7, #20]
 801173e:	e08e      	b.n	801185e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011740:	f04f 33ff 	mov.w	r3, #4294967295
 8011744:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	2b03      	cmp	r3, #3
 801174c:	d061      	beq.n	8011812 <get_fat+0xf8>
 801174e:	2b03      	cmp	r3, #3
 8011750:	dc7b      	bgt.n	801184a <get_fat+0x130>
 8011752:	2b01      	cmp	r3, #1
 8011754:	d002      	beq.n	801175c <get_fat+0x42>
 8011756:	2b02      	cmp	r3, #2
 8011758:	d041      	beq.n	80117de <get_fat+0xc4>
 801175a:	e076      	b.n	801184a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	60fb      	str	r3, [r7, #12]
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	085b      	lsrs	r3, r3, #1
 8011764:	68fa      	ldr	r2, [r7, #12]
 8011766:	4413      	add	r3, r2
 8011768:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	6a1a      	ldr	r2, [r3, #32]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	0a5b      	lsrs	r3, r3, #9
 8011772:	4413      	add	r3, r2
 8011774:	4619      	mov	r1, r3
 8011776:	6938      	ldr	r0, [r7, #16]
 8011778:	f7ff ff14 	bl	80115a4 <move_window>
 801177c:	4603      	mov	r3, r0
 801177e:	2b00      	cmp	r3, #0
 8011780:	d166      	bne.n	8011850 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	1c5a      	adds	r2, r3, #1
 8011786:	60fa      	str	r2, [r7, #12]
 8011788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801178c:	693a      	ldr	r2, [r7, #16]
 801178e:	4413      	add	r3, r2
 8011790:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011794:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011796:	693b      	ldr	r3, [r7, #16]
 8011798:	6a1a      	ldr	r2, [r3, #32]
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	0a5b      	lsrs	r3, r3, #9
 801179e:	4413      	add	r3, r2
 80117a0:	4619      	mov	r1, r3
 80117a2:	6938      	ldr	r0, [r7, #16]
 80117a4:	f7ff fefe 	bl	80115a4 <move_window>
 80117a8:	4603      	mov	r3, r0
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d152      	bne.n	8011854 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117b4:	693a      	ldr	r2, [r7, #16]
 80117b6:	4413      	add	r3, r2
 80117b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80117bc:	021b      	lsls	r3, r3, #8
 80117be:	68ba      	ldr	r2, [r7, #8]
 80117c0:	4313      	orrs	r3, r2
 80117c2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	f003 0301 	and.w	r3, r3, #1
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d002      	beq.n	80117d4 <get_fat+0xba>
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	091b      	lsrs	r3, r3, #4
 80117d2:	e002      	b.n	80117da <get_fat+0xc0>
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80117da:	617b      	str	r3, [r7, #20]
			break;
 80117dc:	e03f      	b.n	801185e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	6a1a      	ldr	r2, [r3, #32]
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	0a1b      	lsrs	r3, r3, #8
 80117e6:	4413      	add	r3, r2
 80117e8:	4619      	mov	r1, r3
 80117ea:	6938      	ldr	r0, [r7, #16]
 80117ec:	f7ff feda 	bl	80115a4 <move_window>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d130      	bne.n	8011858 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	005b      	lsls	r3, r3, #1
 8011800:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011804:	4413      	add	r3, r2
 8011806:	4618      	mov	r0, r3
 8011808:	f7ff fc1c 	bl	8011044 <ld_word>
 801180c:	4603      	mov	r3, r0
 801180e:	617b      	str	r3, [r7, #20]
			break;
 8011810:	e025      	b.n	801185e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	6a1a      	ldr	r2, [r3, #32]
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	09db      	lsrs	r3, r3, #7
 801181a:	4413      	add	r3, r2
 801181c:	4619      	mov	r1, r3
 801181e:	6938      	ldr	r0, [r7, #16]
 8011820:	f7ff fec0 	bl	80115a4 <move_window>
 8011824:	4603      	mov	r3, r0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d118      	bne.n	801185c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	009b      	lsls	r3, r3, #2
 8011834:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011838:	4413      	add	r3, r2
 801183a:	4618      	mov	r0, r3
 801183c:	f7ff fc1a 	bl	8011074 <ld_dword>
 8011840:	4603      	mov	r3, r0
 8011842:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011846:	617b      	str	r3, [r7, #20]
			break;
 8011848:	e009      	b.n	801185e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801184a:	2301      	movs	r3, #1
 801184c:	617b      	str	r3, [r7, #20]
 801184e:	e006      	b.n	801185e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011850:	bf00      	nop
 8011852:	e004      	b.n	801185e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011854:	bf00      	nop
 8011856:	e002      	b.n	801185e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011858:	bf00      	nop
 801185a:	e000      	b.n	801185e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801185c:	bf00      	nop
		}
	}

	return val;
 801185e:	697b      	ldr	r3, [r7, #20]
}
 8011860:	4618      	mov	r0, r3
 8011862:	3718      	adds	r7, #24
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011868:	b590      	push	{r4, r7, lr}
 801186a:	b089      	sub	sp, #36	@ 0x24
 801186c:	af00      	add	r7, sp, #0
 801186e:	60f8      	str	r0, [r7, #12]
 8011870:	60b9      	str	r1, [r7, #8]
 8011872:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011874:	2302      	movs	r3, #2
 8011876:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	2b01      	cmp	r3, #1
 801187c:	f240 80d9 	bls.w	8011a32 <put_fat+0x1ca>
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	695b      	ldr	r3, [r3, #20]
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	429a      	cmp	r2, r3
 8011888:	f080 80d3 	bcs.w	8011a32 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	2b03      	cmp	r3, #3
 8011892:	f000 8096 	beq.w	80119c2 <put_fat+0x15a>
 8011896:	2b03      	cmp	r3, #3
 8011898:	f300 80cb 	bgt.w	8011a32 <put_fat+0x1ca>
 801189c:	2b01      	cmp	r3, #1
 801189e:	d002      	beq.n	80118a6 <put_fat+0x3e>
 80118a0:	2b02      	cmp	r3, #2
 80118a2:	d06e      	beq.n	8011982 <put_fat+0x11a>
 80118a4:	e0c5      	b.n	8011a32 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	61bb      	str	r3, [r7, #24]
 80118aa:	69bb      	ldr	r3, [r7, #24]
 80118ac:	085b      	lsrs	r3, r3, #1
 80118ae:	69ba      	ldr	r2, [r7, #24]
 80118b0:	4413      	add	r3, r2
 80118b2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	6a1a      	ldr	r2, [r3, #32]
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	0a5b      	lsrs	r3, r3, #9
 80118bc:	4413      	add	r3, r2
 80118be:	4619      	mov	r1, r3
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	f7ff fe6f 	bl	80115a4 <move_window>
 80118c6:	4603      	mov	r3, r0
 80118c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80118ca:	7ffb      	ldrb	r3, [r7, #31]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	f040 80a9 	bne.w	8011a24 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	1c59      	adds	r1, r3, #1
 80118dc:	61b9      	str	r1, [r7, #24]
 80118de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118e2:	4413      	add	r3, r2
 80118e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	f003 0301 	and.w	r3, r3, #1
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d00d      	beq.n	801190c <put_fat+0xa4>
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	b25b      	sxtb	r3, r3
 80118f6:	f003 030f 	and.w	r3, r3, #15
 80118fa:	b25a      	sxtb	r2, r3
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	b2db      	uxtb	r3, r3
 8011900:	011b      	lsls	r3, r3, #4
 8011902:	b25b      	sxtb	r3, r3
 8011904:	4313      	orrs	r3, r2
 8011906:	b25b      	sxtb	r3, r3
 8011908:	b2db      	uxtb	r3, r3
 801190a:	e001      	b.n	8011910 <put_fat+0xa8>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	b2db      	uxtb	r3, r3
 8011910:	697a      	ldr	r2, [r7, #20]
 8011912:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2201      	movs	r2, #1
 8011918:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	6a1a      	ldr	r2, [r3, #32]
 801191e:	69bb      	ldr	r3, [r7, #24]
 8011920:	0a5b      	lsrs	r3, r3, #9
 8011922:	4413      	add	r3, r2
 8011924:	4619      	mov	r1, r3
 8011926:	68f8      	ldr	r0, [r7, #12]
 8011928:	f7ff fe3c 	bl	80115a4 <move_window>
 801192c:	4603      	mov	r3, r0
 801192e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011930:	7ffb      	ldrb	r3, [r7, #31]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d178      	bne.n	8011a28 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801193c:	69bb      	ldr	r3, [r7, #24]
 801193e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011942:	4413      	add	r3, r2
 8011944:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	f003 0301 	and.w	r3, r3, #1
 801194c:	2b00      	cmp	r3, #0
 801194e:	d003      	beq.n	8011958 <put_fat+0xf0>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	091b      	lsrs	r3, r3, #4
 8011954:	b2db      	uxtb	r3, r3
 8011956:	e00e      	b.n	8011976 <put_fat+0x10e>
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	b25b      	sxtb	r3, r3
 801195e:	f023 030f 	bic.w	r3, r3, #15
 8011962:	b25a      	sxtb	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	0a1b      	lsrs	r3, r3, #8
 8011968:	b25b      	sxtb	r3, r3
 801196a:	f003 030f 	and.w	r3, r3, #15
 801196e:	b25b      	sxtb	r3, r3
 8011970:	4313      	orrs	r3, r2
 8011972:	b25b      	sxtb	r3, r3
 8011974:	b2db      	uxtb	r3, r3
 8011976:	697a      	ldr	r2, [r7, #20]
 8011978:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	2201      	movs	r2, #1
 801197e:	70da      	strb	r2, [r3, #3]
			break;
 8011980:	e057      	b.n	8011a32 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	6a1a      	ldr	r2, [r3, #32]
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	0a1b      	lsrs	r3, r3, #8
 801198a:	4413      	add	r3, r2
 801198c:	4619      	mov	r1, r3
 801198e:	68f8      	ldr	r0, [r7, #12]
 8011990:	f7ff fe08 	bl	80115a4 <move_window>
 8011994:	4603      	mov	r3, r0
 8011996:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011998:	7ffb      	ldrb	r3, [r7, #31]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d146      	bne.n	8011a2c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	005b      	lsls	r3, r3, #1
 80119a8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80119ac:	4413      	add	r3, r2
 80119ae:	687a      	ldr	r2, [r7, #4]
 80119b0:	b292      	uxth	r2, r2
 80119b2:	4611      	mov	r1, r2
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7ff fb80 	bl	80110ba <st_word>
			fs->wflag = 1;
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	2201      	movs	r2, #1
 80119be:	70da      	strb	r2, [r3, #3]
			break;
 80119c0:	e037      	b.n	8011a32 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	6a1a      	ldr	r2, [r3, #32]
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	09db      	lsrs	r3, r3, #7
 80119ca:	4413      	add	r3, r2
 80119cc:	4619      	mov	r1, r3
 80119ce:	68f8      	ldr	r0, [r7, #12]
 80119d0:	f7ff fde8 	bl	80115a4 <move_window>
 80119d4:	4603      	mov	r3, r0
 80119d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80119d8:	7ffb      	ldrb	r3, [r7, #31]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d128      	bne.n	8011a30 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	009b      	lsls	r3, r3, #2
 80119ee:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80119f2:	4413      	add	r3, r2
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7ff fb3d 	bl	8011074 <ld_dword>
 80119fa:	4603      	mov	r3, r0
 80119fc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011a00:	4323      	orrs	r3, r4
 8011a02:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011a12:	4413      	add	r3, r2
 8011a14:	6879      	ldr	r1, [r7, #4]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7ff fb6a 	bl	80110f0 <st_dword>
			fs->wflag = 1;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	70da      	strb	r2, [r3, #3]
			break;
 8011a22:	e006      	b.n	8011a32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011a24:	bf00      	nop
 8011a26:	e004      	b.n	8011a32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011a28:	bf00      	nop
 8011a2a:	e002      	b.n	8011a32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011a2c:	bf00      	nop
 8011a2e:	e000      	b.n	8011a32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011a30:	bf00      	nop
		}
	}
	return res;
 8011a32:	7ffb      	ldrb	r3, [r7, #31]
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3724      	adds	r7, #36	@ 0x24
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd90      	pop	{r4, r7, pc}

08011a3c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b088      	sub	sp, #32
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d904      	bls.n	8011a62 <remove_chain+0x26>
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	695b      	ldr	r3, [r3, #20]
 8011a5c:	68ba      	ldr	r2, [r7, #8]
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d301      	bcc.n	8011a66 <remove_chain+0x2a>
 8011a62:	2302      	movs	r3, #2
 8011a64:	e04b      	b.n	8011afe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d00c      	beq.n	8011a86 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8011a70:	6879      	ldr	r1, [r7, #4]
 8011a72:	69b8      	ldr	r0, [r7, #24]
 8011a74:	f7ff fef8 	bl	8011868 <put_fat>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011a7c:	7ffb      	ldrb	r3, [r7, #31]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d001      	beq.n	8011a86 <remove_chain+0x4a>
 8011a82:	7ffb      	ldrb	r3, [r7, #31]
 8011a84:	e03b      	b.n	8011afe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011a86:	68b9      	ldr	r1, [r7, #8]
 8011a88:	68f8      	ldr	r0, [r7, #12]
 8011a8a:	f7ff fe46 	bl	801171a <get_fat>
 8011a8e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d031      	beq.n	8011afa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d101      	bne.n	8011aa0 <remove_chain+0x64>
 8011a9c:	2302      	movs	r3, #2
 8011a9e:	e02e      	b.n	8011afe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aa6:	d101      	bne.n	8011aac <remove_chain+0x70>
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	e028      	b.n	8011afe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011aac:	2200      	movs	r2, #0
 8011aae:	68b9      	ldr	r1, [r7, #8]
 8011ab0:	69b8      	ldr	r0, [r7, #24]
 8011ab2:	f7ff fed9 	bl	8011868 <put_fat>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011aba:	7ffb      	ldrb	r3, [r7, #31]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d001      	beq.n	8011ac4 <remove_chain+0x88>
 8011ac0:	7ffb      	ldrb	r3, [r7, #31]
 8011ac2:	e01c      	b.n	8011afe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	691a      	ldr	r2, [r3, #16]
 8011ac8:	69bb      	ldr	r3, [r7, #24]
 8011aca:	695b      	ldr	r3, [r3, #20]
 8011acc:	3b02      	subs	r3, #2
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d20b      	bcs.n	8011aea <remove_chain+0xae>
			fs->free_clst++;
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	691b      	ldr	r3, [r3, #16]
 8011ad6:	1c5a      	adds	r2, r3, #1
 8011ad8:	69bb      	ldr	r3, [r7, #24]
 8011ada:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	791b      	ldrb	r3, [r3, #4]
 8011ae0:	f043 0301 	orr.w	r3, r3, #1
 8011ae4:	b2da      	uxtb	r2, r3
 8011ae6:	69bb      	ldr	r3, [r7, #24]
 8011ae8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011aee:	69bb      	ldr	r3, [r7, #24]
 8011af0:	695b      	ldr	r3, [r3, #20]
 8011af2:	68ba      	ldr	r2, [r7, #8]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d3c6      	bcc.n	8011a86 <remove_chain+0x4a>
 8011af8:	e000      	b.n	8011afc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011afa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011afc:	2300      	movs	r3, #0
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3720      	adds	r7, #32
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b088      	sub	sp, #32
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
 8011b0e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d10d      	bne.n	8011b38 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	68db      	ldr	r3, [r3, #12]
 8011b20:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d004      	beq.n	8011b32 <create_chain+0x2c>
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	695b      	ldr	r3, [r3, #20]
 8011b2c:	69ba      	ldr	r2, [r7, #24]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d31b      	bcc.n	8011b6a <create_chain+0x64>
 8011b32:	2301      	movs	r3, #1
 8011b34:	61bb      	str	r3, [r7, #24]
 8011b36:	e018      	b.n	8011b6a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011b38:	6839      	ldr	r1, [r7, #0]
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f7ff fded 	bl	801171a <get_fat>
 8011b40:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d801      	bhi.n	8011b4c <create_chain+0x46>
 8011b48:	2301      	movs	r3, #1
 8011b4a:	e070      	b.n	8011c2e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b52:	d101      	bne.n	8011b58 <create_chain+0x52>
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	e06a      	b.n	8011c2e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	695b      	ldr	r3, [r3, #20]
 8011b5c:	68fa      	ldr	r2, [r7, #12]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d201      	bcs.n	8011b66 <create_chain+0x60>
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	e063      	b.n	8011c2e <create_chain+0x128>
		scl = clst;
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011b6a:	69bb      	ldr	r3, [r7, #24]
 8011b6c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	3301      	adds	r3, #1
 8011b72:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	695b      	ldr	r3, [r3, #20]
 8011b78:	69fa      	ldr	r2, [r7, #28]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d307      	bcc.n	8011b8e <create_chain+0x88>
				ncl = 2;
 8011b7e:	2302      	movs	r3, #2
 8011b80:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011b82:	69fa      	ldr	r2, [r7, #28]
 8011b84:	69bb      	ldr	r3, [r7, #24]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d901      	bls.n	8011b8e <create_chain+0x88>
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	e04f      	b.n	8011c2e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011b8e:	69f9      	ldr	r1, [r7, #28]
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7ff fdc2 	bl	801171a <get_fat>
 8011b96:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00e      	beq.n	8011bbc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d003      	beq.n	8011bac <create_chain+0xa6>
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011baa:	d101      	bne.n	8011bb0 <create_chain+0xaa>
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	e03e      	b.n	8011c2e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011bb0:	69fa      	ldr	r2, [r7, #28]
 8011bb2:	69bb      	ldr	r3, [r7, #24]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d1da      	bne.n	8011b6e <create_chain+0x68>
 8011bb8:	2300      	movs	r3, #0
 8011bba:	e038      	b.n	8011c2e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011bbc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8011bc2:	69f9      	ldr	r1, [r7, #28]
 8011bc4:	6938      	ldr	r0, [r7, #16]
 8011bc6:	f7ff fe4f 	bl	8011868 <put_fat>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011bce:	7dfb      	ldrb	r3, [r7, #23]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d109      	bne.n	8011be8 <create_chain+0xe2>
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d006      	beq.n	8011be8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011bda:	69fa      	ldr	r2, [r7, #28]
 8011bdc:	6839      	ldr	r1, [r7, #0]
 8011bde:	6938      	ldr	r0, [r7, #16]
 8011be0:	f7ff fe42 	bl	8011868 <put_fat>
 8011be4:	4603      	mov	r3, r0
 8011be6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011be8:	7dfb      	ldrb	r3, [r7, #23]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d116      	bne.n	8011c1c <create_chain+0x116>
		fs->last_clst = ncl;
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	69fa      	ldr	r2, [r7, #28]
 8011bf2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	691a      	ldr	r2, [r3, #16]
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	695b      	ldr	r3, [r3, #20]
 8011bfc:	3b02      	subs	r3, #2
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d804      	bhi.n	8011c0c <create_chain+0x106>
 8011c02:	693b      	ldr	r3, [r7, #16]
 8011c04:	691b      	ldr	r3, [r3, #16]
 8011c06:	1e5a      	subs	r2, r3, #1
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	791b      	ldrb	r3, [r3, #4]
 8011c10:	f043 0301 	orr.w	r3, r3, #1
 8011c14:	b2da      	uxtb	r2, r3
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	711a      	strb	r2, [r3, #4]
 8011c1a:	e007      	b.n	8011c2c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011c1c:	7dfb      	ldrb	r3, [r7, #23]
 8011c1e:	2b01      	cmp	r3, #1
 8011c20:	d102      	bne.n	8011c28 <create_chain+0x122>
 8011c22:	f04f 33ff 	mov.w	r3, #4294967295
 8011c26:	e000      	b.n	8011c2a <create_chain+0x124>
 8011c28:	2301      	movs	r3, #1
 8011c2a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011c2c:	69fb      	ldr	r3, [r7, #28]
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	3720      	adds	r7, #32
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}

08011c36 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011c36:	b480      	push	{r7}
 8011c38:	b087      	sub	sp, #28
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
 8011c3e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c4a:	3304      	adds	r3, #4
 8011c4c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	0a5b      	lsrs	r3, r3, #9
 8011c52:	68fa      	ldr	r2, [r7, #12]
 8011c54:	8952      	ldrh	r2, [r2, #10]
 8011c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c5a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	1d1a      	adds	r2, r3, #4
 8011c60:	613a      	str	r2, [r7, #16]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d101      	bne.n	8011c70 <clmt_clust+0x3a>
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	e010      	b.n	8011c92 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011c70:	697a      	ldr	r2, [r7, #20]
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d307      	bcc.n	8011c88 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011c78:	697a      	ldr	r2, [r7, #20]
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	1ad3      	subs	r3, r2, r3
 8011c7e:	617b      	str	r3, [r7, #20]
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	3304      	adds	r3, #4
 8011c84:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011c86:	e7e9      	b.n	8011c5c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011c88:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	681a      	ldr	r2, [r3, #0]
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	4413      	add	r3, r2
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	371c      	adds	r7, #28
 8011c96:	46bd      	mov	sp, r7
 8011c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9c:	4770      	bx	lr

08011c9e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011c9e:	b580      	push	{r7, lr}
 8011ca0:	b086      	sub	sp, #24
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
 8011ca6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011cb4:	d204      	bcs.n	8011cc0 <dir_sdi+0x22>
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	f003 031f 	and.w	r3, r3, #31
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d001      	beq.n	8011cc4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011cc0:	2302      	movs	r3, #2
 8011cc2:	e063      	b.n	8011d8c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	683a      	ldr	r2, [r7, #0]
 8011cc8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	689b      	ldr	r3, [r3, #8]
 8011cce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d106      	bne.n	8011ce4 <dir_sdi+0x46>
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	2b02      	cmp	r3, #2
 8011cdc:	d902      	bls.n	8011ce4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ce2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d10c      	bne.n	8011d04 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	095b      	lsrs	r3, r3, #5
 8011cee:	693a      	ldr	r2, [r7, #16]
 8011cf0:	8912      	ldrh	r2, [r2, #8]
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d301      	bcc.n	8011cfa <dir_sdi+0x5c>
 8011cf6:	2302      	movs	r3, #2
 8011cf8:	e048      	b.n	8011d8c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	61da      	str	r2, [r3, #28]
 8011d02:	e029      	b.n	8011d58 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	895b      	ldrh	r3, [r3, #10]
 8011d08:	025b      	lsls	r3, r3, #9
 8011d0a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011d0c:	e019      	b.n	8011d42 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6979      	ldr	r1, [r7, #20]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7ff fd01 	bl	801171a <get_fat>
 8011d18:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d20:	d101      	bne.n	8011d26 <dir_sdi+0x88>
 8011d22:	2301      	movs	r3, #1
 8011d24:	e032      	b.n	8011d8c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	2b01      	cmp	r3, #1
 8011d2a:	d904      	bls.n	8011d36 <dir_sdi+0x98>
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	695b      	ldr	r3, [r3, #20]
 8011d30:	697a      	ldr	r2, [r7, #20]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d301      	bcc.n	8011d3a <dir_sdi+0x9c>
 8011d36:	2302      	movs	r3, #2
 8011d38:	e028      	b.n	8011d8c <dir_sdi+0xee>
			ofs -= csz;
 8011d3a:	683a      	ldr	r2, [r7, #0]
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	1ad3      	subs	r3, r2, r3
 8011d40:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011d42:	683a      	ldr	r2, [r7, #0]
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d2e1      	bcs.n	8011d0e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011d4a:	6979      	ldr	r1, [r7, #20]
 8011d4c:	6938      	ldr	r0, [r7, #16]
 8011d4e:	f7ff fcc5 	bl	80116dc <clust2sect>
 8011d52:	4602      	mov	r2, r0
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	697a      	ldr	r2, [r7, #20]
 8011d5c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	69db      	ldr	r3, [r3, #28]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d101      	bne.n	8011d6a <dir_sdi+0xcc>
 8011d66:	2302      	movs	r3, #2
 8011d68:	e010      	b.n	8011d8c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	69da      	ldr	r2, [r3, #28]
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	0a5b      	lsrs	r3, r3, #9
 8011d72:	441a      	add	r2, r3
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d84:	441a      	add	r2, r3
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011d8a:	2300      	movs	r3, #0
}
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	3718      	adds	r7, #24
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b086      	sub	sp, #24
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	695b      	ldr	r3, [r3, #20]
 8011da8:	3320      	adds	r3, #32
 8011daa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	69db      	ldr	r3, [r3, #28]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d003      	beq.n	8011dbc <dir_next+0x28>
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011dba:	d301      	bcc.n	8011dc0 <dir_next+0x2c>
 8011dbc:	2304      	movs	r3, #4
 8011dbe:	e0aa      	b.n	8011f16 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	f040 8098 	bne.w	8011efc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	69db      	ldr	r3, [r3, #28]
 8011dd0:	1c5a      	adds	r2, r3, #1
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	699b      	ldr	r3, [r3, #24]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d10b      	bne.n	8011df6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	095b      	lsrs	r3, r3, #5
 8011de2:	68fa      	ldr	r2, [r7, #12]
 8011de4:	8912      	ldrh	r2, [r2, #8]
 8011de6:	4293      	cmp	r3, r2
 8011de8:	f0c0 8088 	bcc.w	8011efc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2200      	movs	r2, #0
 8011df0:	61da      	str	r2, [r3, #28]
 8011df2:	2304      	movs	r3, #4
 8011df4:	e08f      	b.n	8011f16 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	0a5b      	lsrs	r3, r3, #9
 8011dfa:	68fa      	ldr	r2, [r7, #12]
 8011dfc:	8952      	ldrh	r2, [r2, #10]
 8011dfe:	3a01      	subs	r2, #1
 8011e00:	4013      	ands	r3, r2
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d17a      	bne.n	8011efc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	699b      	ldr	r3, [r3, #24]
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	4610      	mov	r0, r2
 8011e10:	f7ff fc83 	bl	801171a <get_fat>
 8011e14:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d801      	bhi.n	8011e20 <dir_next+0x8c>
 8011e1c:	2302      	movs	r3, #2
 8011e1e:	e07a      	b.n	8011f16 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e26:	d101      	bne.n	8011e2c <dir_next+0x98>
 8011e28:	2301      	movs	r3, #1
 8011e2a:	e074      	b.n	8011f16 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	695b      	ldr	r3, [r3, #20]
 8011e30:	697a      	ldr	r2, [r7, #20]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d358      	bcc.n	8011ee8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d104      	bne.n	8011e46 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	61da      	str	r2, [r3, #28]
 8011e42:	2304      	movs	r3, #4
 8011e44:	e067      	b.n	8011f16 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011e46:	687a      	ldr	r2, [r7, #4]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	699b      	ldr	r3, [r3, #24]
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	4610      	mov	r0, r2
 8011e50:	f7ff fe59 	bl	8011b06 <create_chain>
 8011e54:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d101      	bne.n	8011e60 <dir_next+0xcc>
 8011e5c:	2307      	movs	r3, #7
 8011e5e:	e05a      	b.n	8011f16 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	2b01      	cmp	r3, #1
 8011e64:	d101      	bne.n	8011e6a <dir_next+0xd6>
 8011e66:	2302      	movs	r3, #2
 8011e68:	e055      	b.n	8011f16 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e70:	d101      	bne.n	8011e76 <dir_next+0xe2>
 8011e72:	2301      	movs	r3, #1
 8011e74:	e04f      	b.n	8011f16 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011e76:	68f8      	ldr	r0, [r7, #12]
 8011e78:	f7ff fb50 	bl	801151c <sync_window>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d001      	beq.n	8011e86 <dir_next+0xf2>
 8011e82:	2301      	movs	r3, #1
 8011e84:	e047      	b.n	8011f16 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	3330      	adds	r3, #48	@ 0x30
 8011e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011e8e:	2100      	movs	r1, #0
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7ff f97a 	bl	801118a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011e96:	2300      	movs	r3, #0
 8011e98:	613b      	str	r3, [r7, #16]
 8011e9a:	6979      	ldr	r1, [r7, #20]
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f7ff fc1d 	bl	80116dc <clust2sect>
 8011ea2:	4602      	mov	r2, r0
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011ea8:	e012      	b.n	8011ed0 <dir_next+0x13c>
						fs->wflag = 1;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	2201      	movs	r2, #1
 8011eae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011eb0:	68f8      	ldr	r0, [r7, #12]
 8011eb2:	f7ff fb33 	bl	801151c <sync_window>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d001      	beq.n	8011ec0 <dir_next+0x12c>
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	e02a      	b.n	8011f16 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	613b      	str	r3, [r7, #16]
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011eca:	1c5a      	adds	r2, r3, #1
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	895b      	ldrh	r3, [r3, #10]
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	693b      	ldr	r3, [r7, #16]
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	d3e6      	bcc.n	8011eaa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	1ad2      	subs	r2, r2, r3
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	697a      	ldr	r2, [r7, #20]
 8011eec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011eee:	6979      	ldr	r1, [r7, #20]
 8011ef0:	68f8      	ldr	r0, [r7, #12]
 8011ef2:	f7ff fbf3 	bl	80116dc <clust2sect>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	68ba      	ldr	r2, [r7, #8]
 8011f00:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f0e:	441a      	add	r2, r3
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011f14:	2300      	movs	r3, #0
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3718      	adds	r7, #24
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b086      	sub	sp, #24
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
 8011f26:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011f2e:	2100      	movs	r1, #0
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f7ff feb4 	bl	8011c9e <dir_sdi>
 8011f36:	4603      	mov	r3, r0
 8011f38:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011f3a:	7dfb      	ldrb	r3, [r7, #23]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d12b      	bne.n	8011f98 <dir_alloc+0x7a>
		n = 0;
 8011f40:	2300      	movs	r3, #0
 8011f42:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	69db      	ldr	r3, [r3, #28]
 8011f48:	4619      	mov	r1, r3
 8011f4a:	68f8      	ldr	r0, [r7, #12]
 8011f4c:	f7ff fb2a 	bl	80115a4 <move_window>
 8011f50:	4603      	mov	r3, r0
 8011f52:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011f54:	7dfb      	ldrb	r3, [r7, #23]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d11d      	bne.n	8011f96 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6a1b      	ldr	r3, [r3, #32]
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	2be5      	cmp	r3, #229	@ 0xe5
 8011f62:	d004      	beq.n	8011f6e <dir_alloc+0x50>
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6a1b      	ldr	r3, [r3, #32]
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d107      	bne.n	8011f7e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	3301      	adds	r3, #1
 8011f72:	613b      	str	r3, [r7, #16]
 8011f74:	693a      	ldr	r2, [r7, #16]
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d102      	bne.n	8011f82 <dir_alloc+0x64>
 8011f7c:	e00c      	b.n	8011f98 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011f7e:	2300      	movs	r3, #0
 8011f80:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011f82:	2101      	movs	r1, #1
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f7ff ff05 	bl	8011d94 <dir_next>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011f8e:	7dfb      	ldrb	r3, [r7, #23]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d0d7      	beq.n	8011f44 <dir_alloc+0x26>
 8011f94:	e000      	b.n	8011f98 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011f96:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011f98:	7dfb      	ldrb	r3, [r7, #23]
 8011f9a:	2b04      	cmp	r3, #4
 8011f9c:	d101      	bne.n	8011fa2 <dir_alloc+0x84>
 8011f9e:	2307      	movs	r3, #7
 8011fa0:	75fb      	strb	r3, [r7, #23]
	return res;
 8011fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3718      	adds	r7, #24
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}

08011fac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b084      	sub	sp, #16
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	331a      	adds	r3, #26
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7ff f842 	bl	8011044 <ld_word>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	2b03      	cmp	r3, #3
 8011fca:	d109      	bne.n	8011fe0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	3314      	adds	r3, #20
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7ff f837 	bl	8011044 <ld_word>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	041b      	lsls	r3, r3, #16
 8011fda:	68fa      	ldr	r2, [r7, #12]
 8011fdc:	4313      	orrs	r3, r2
 8011fde:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3710      	adds	r7, #16
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}

08011fea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011fea:	b580      	push	{r7, lr}
 8011fec:	b084      	sub	sp, #16
 8011fee:	af00      	add	r7, sp, #0
 8011ff0:	60f8      	str	r0, [r7, #12]
 8011ff2:	60b9      	str	r1, [r7, #8]
 8011ff4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	331a      	adds	r3, #26
 8011ffa:	687a      	ldr	r2, [r7, #4]
 8011ffc:	b292      	uxth	r2, r2
 8011ffe:	4611      	mov	r1, r2
 8012000:	4618      	mov	r0, r3
 8012002:	f7ff f85a 	bl	80110ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	2b03      	cmp	r3, #3
 801200c:	d109      	bne.n	8012022 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	f103 0214 	add.w	r2, r3, #20
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	0c1b      	lsrs	r3, r3, #16
 8012018:	b29b      	uxth	r3, r3
 801201a:	4619      	mov	r1, r3
 801201c:	4610      	mov	r0, r2
 801201e:	f7ff f84c 	bl	80110ba <st_word>
	}
}
 8012022:	bf00      	nop
 8012024:	3710      	adds	r7, #16
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}

0801202a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801202a:	b580      	push	{r7, lr}
 801202c:	b086      	sub	sp, #24
 801202e:	af00      	add	r7, sp, #0
 8012030:	6078      	str	r0, [r7, #4]
 8012032:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012034:	2304      	movs	r3, #4
 8012036:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801203e:	e03c      	b.n	80120ba <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	69db      	ldr	r3, [r3, #28]
 8012044:	4619      	mov	r1, r3
 8012046:	6938      	ldr	r0, [r7, #16]
 8012048:	f7ff faac 	bl	80115a4 <move_window>
 801204c:	4603      	mov	r3, r0
 801204e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012050:	7dfb      	ldrb	r3, [r7, #23]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d136      	bne.n	80120c4 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6a1b      	ldr	r3, [r3, #32]
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801205e:	7bfb      	ldrb	r3, [r7, #15]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d102      	bne.n	801206a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012064:	2304      	movs	r3, #4
 8012066:	75fb      	strb	r3, [r7, #23]
 8012068:	e031      	b.n	80120ce <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6a1b      	ldr	r3, [r3, #32]
 801206e:	330b      	adds	r3, #11
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012076:	73bb      	strb	r3, [r7, #14]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	7bba      	ldrb	r2, [r7, #14]
 801207c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801207e:	7bfb      	ldrb	r3, [r7, #15]
 8012080:	2be5      	cmp	r3, #229	@ 0xe5
 8012082:	d011      	beq.n	80120a8 <dir_read+0x7e>
 8012084:	7bfb      	ldrb	r3, [r7, #15]
 8012086:	2b2e      	cmp	r3, #46	@ 0x2e
 8012088:	d00e      	beq.n	80120a8 <dir_read+0x7e>
 801208a:	7bbb      	ldrb	r3, [r7, #14]
 801208c:	2b0f      	cmp	r3, #15
 801208e:	d00b      	beq.n	80120a8 <dir_read+0x7e>
 8012090:	7bbb      	ldrb	r3, [r7, #14]
 8012092:	f023 0320 	bic.w	r3, r3, #32
 8012096:	2b08      	cmp	r3, #8
 8012098:	bf0c      	ite	eq
 801209a:	2301      	moveq	r3, #1
 801209c:	2300      	movne	r3, #0
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	461a      	mov	r2, r3
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	4293      	cmp	r3, r2
 80120a6:	d00f      	beq.n	80120c8 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80120a8:	2100      	movs	r1, #0
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f7ff fe72 	bl	8011d94 <dir_next>
 80120b0:	4603      	mov	r3, r0
 80120b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80120b4:	7dfb      	ldrb	r3, [r7, #23]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d108      	bne.n	80120cc <dir_read+0xa2>
	while (dp->sect) {
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	69db      	ldr	r3, [r3, #28]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d1be      	bne.n	8012040 <dir_read+0x16>
 80120c2:	e004      	b.n	80120ce <dir_read+0xa4>
		if (res != FR_OK) break;
 80120c4:	bf00      	nop
 80120c6:	e002      	b.n	80120ce <dir_read+0xa4>
				break;
 80120c8:	bf00      	nop
 80120ca:	e000      	b.n	80120ce <dir_read+0xa4>
		if (res != FR_OK) break;
 80120cc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80120ce:	7dfb      	ldrb	r3, [r7, #23]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d002      	beq.n	80120da <dir_read+0xb0>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2200      	movs	r2, #0
 80120d8:	61da      	str	r2, [r3, #28]
	return res;
 80120da:	7dfb      	ldrb	r3, [r7, #23]
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3718      	adds	r7, #24
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b086      	sub	sp, #24
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80120f2:	2100      	movs	r1, #0
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f7ff fdd2 	bl	8011c9e <dir_sdi>
 80120fa:	4603      	mov	r3, r0
 80120fc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80120fe:	7dfb      	ldrb	r3, [r7, #23]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d001      	beq.n	8012108 <dir_find+0x24>
 8012104:	7dfb      	ldrb	r3, [r7, #23]
 8012106:	e03e      	b.n	8012186 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	69db      	ldr	r3, [r3, #28]
 801210c:	4619      	mov	r1, r3
 801210e:	6938      	ldr	r0, [r7, #16]
 8012110:	f7ff fa48 	bl	80115a4 <move_window>
 8012114:	4603      	mov	r3, r0
 8012116:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012118:	7dfb      	ldrb	r3, [r7, #23]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d12f      	bne.n	801217e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6a1b      	ldr	r3, [r3, #32]
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012126:	7bfb      	ldrb	r3, [r7, #15]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d102      	bne.n	8012132 <dir_find+0x4e>
 801212c:	2304      	movs	r3, #4
 801212e:	75fb      	strb	r3, [r7, #23]
 8012130:	e028      	b.n	8012184 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6a1b      	ldr	r3, [r3, #32]
 8012136:	330b      	adds	r3, #11
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801213e:	b2da      	uxtb	r2, r3
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	6a1b      	ldr	r3, [r3, #32]
 8012148:	330b      	adds	r3, #11
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	f003 0308 	and.w	r3, r3, #8
 8012150:	2b00      	cmp	r3, #0
 8012152:	d10a      	bne.n	801216a <dir_find+0x86>
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6a18      	ldr	r0, [r3, #32]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	3324      	adds	r3, #36	@ 0x24
 801215c:	220b      	movs	r2, #11
 801215e:	4619      	mov	r1, r3
 8012160:	f7ff f82e 	bl	80111c0 <mem_cmp>
 8012164:	4603      	mov	r3, r0
 8012166:	2b00      	cmp	r3, #0
 8012168:	d00b      	beq.n	8012182 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801216a:	2100      	movs	r1, #0
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7ff fe11 	bl	8011d94 <dir_next>
 8012172:	4603      	mov	r3, r0
 8012174:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012176:	7dfb      	ldrb	r3, [r7, #23]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d0c5      	beq.n	8012108 <dir_find+0x24>
 801217c:	e002      	b.n	8012184 <dir_find+0xa0>
		if (res != FR_OK) break;
 801217e:	bf00      	nop
 8012180:	e000      	b.n	8012184 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012182:	bf00      	nop

	return res;
 8012184:	7dfb      	ldrb	r3, [r7, #23]
}
 8012186:	4618      	mov	r0, r3
 8012188:	3718      	adds	r7, #24
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}

0801218e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801218e:	b580      	push	{r7, lr}
 8012190:	b084      	sub	sp, #16
 8012192:	af00      	add	r7, sp, #0
 8012194:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801219c:	2101      	movs	r1, #1
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7ff febd 	bl	8011f1e <dir_alloc>
 80121a4:	4603      	mov	r3, r0
 80121a6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80121a8:	7bfb      	ldrb	r3, [r7, #15]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d11c      	bne.n	80121e8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	69db      	ldr	r3, [r3, #28]
 80121b2:	4619      	mov	r1, r3
 80121b4:	68b8      	ldr	r0, [r7, #8]
 80121b6:	f7ff f9f5 	bl	80115a4 <move_window>
 80121ba:	4603      	mov	r3, r0
 80121bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80121be:	7bfb      	ldrb	r3, [r7, #15]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d111      	bne.n	80121e8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6a1b      	ldr	r3, [r3, #32]
 80121c8:	2220      	movs	r2, #32
 80121ca:	2100      	movs	r1, #0
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7fe ffdc 	bl	801118a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6a18      	ldr	r0, [r3, #32]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	3324      	adds	r3, #36	@ 0x24
 80121da:	220b      	movs	r2, #11
 80121dc:	4619      	mov	r1, r3
 80121de:	f7fe ffb3 	bl	8011148 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	2201      	movs	r2, #1
 80121e6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80121e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3710      	adds	r7, #16
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}

080121f2 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80121f2:	b580      	push	{r7, lr}
 80121f4:	b084      	sub	sp, #16
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	69db      	ldr	r3, [r3, #28]
 8012204:	4619      	mov	r1, r3
 8012206:	68f8      	ldr	r0, [r7, #12]
 8012208:	f7ff f9cc 	bl	80115a4 <move_window>
 801220c:	4603      	mov	r3, r0
 801220e:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012210:	7afb      	ldrb	r3, [r7, #11]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d106      	bne.n	8012224 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6a1b      	ldr	r3, [r3, #32]
 801221a:	22e5      	movs	r2, #229	@ 0xe5
 801221c:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	2201      	movs	r2, #1
 8012222:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012224:	7afb      	ldrb	r3, [r7, #11]
}
 8012226:	4618      	mov	r0, r3
 8012228:	3710      	adds	r7, #16
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b086      	sub	sp, #24
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
 8012236:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	2200      	movs	r2, #0
 801223c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	69db      	ldr	r3, [r3, #28]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d04f      	beq.n	80122e6 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012246:	2300      	movs	r3, #0
 8012248:	613b      	str	r3, [r7, #16]
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801224e:	e022      	b.n	8012296 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6a1a      	ldr	r2, [r3, #32]
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	1c59      	adds	r1, r3, #1
 8012258:	6179      	str	r1, [r7, #20]
 801225a:	4413      	add	r3, r2
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012260:	7bfb      	ldrb	r3, [r7, #15]
 8012262:	2b20      	cmp	r3, #32
 8012264:	d016      	beq.n	8012294 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012266:	7bfb      	ldrb	r3, [r7, #15]
 8012268:	2b05      	cmp	r3, #5
 801226a:	d101      	bne.n	8012270 <get_fileinfo+0x42>
 801226c:	23e5      	movs	r3, #229	@ 0xe5
 801226e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	2b09      	cmp	r3, #9
 8012274:	d106      	bne.n	8012284 <get_fileinfo+0x56>
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	1c5a      	adds	r2, r3, #1
 801227a:	613a      	str	r2, [r7, #16]
 801227c:	683a      	ldr	r2, [r7, #0]
 801227e:	4413      	add	r3, r2
 8012280:	222e      	movs	r2, #46	@ 0x2e
 8012282:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	1c5a      	adds	r2, r3, #1
 8012288:	613a      	str	r2, [r7, #16]
 801228a:	683a      	ldr	r2, [r7, #0]
 801228c:	4413      	add	r3, r2
 801228e:	7bfa      	ldrb	r2, [r7, #15]
 8012290:	725a      	strb	r2, [r3, #9]
 8012292:	e000      	b.n	8012296 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8012294:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	2b0a      	cmp	r3, #10
 801229a:	d9d9      	bls.n	8012250 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801229c:	683a      	ldr	r2, [r7, #0]
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	4413      	add	r3, r2
 80122a2:	3309      	adds	r3, #9
 80122a4:	2200      	movs	r2, #0
 80122a6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6a1b      	ldr	r3, [r3, #32]
 80122ac:	7ada      	ldrb	r2, [r3, #11]
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6a1b      	ldr	r3, [r3, #32]
 80122b6:	331c      	adds	r3, #28
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7fe fedb 	bl	8011074 <ld_dword>
 80122be:	4602      	mov	r2, r0
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6a1b      	ldr	r3, [r3, #32]
 80122c8:	3316      	adds	r3, #22
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7fe fed2 	bl	8011074 <ld_dword>
 80122d0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	80da      	strh	r2, [r3, #6]
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	0c1b      	lsrs	r3, r3, #16
 80122de:	b29a      	uxth	r2, r3
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	809a      	strh	r2, [r3, #4]
 80122e4:	e000      	b.n	80122e8 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80122e6:	bf00      	nop
}
 80122e8:	3718      	adds	r7, #24
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
	...

080122f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b088      	sub	sp, #32
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
 80122f8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	60fb      	str	r3, [r7, #12]
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	3324      	adds	r3, #36	@ 0x24
 8012304:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012306:	220b      	movs	r2, #11
 8012308:	2120      	movs	r1, #32
 801230a:	68b8      	ldr	r0, [r7, #8]
 801230c:	f7fe ff3d 	bl	801118a <mem_set>
	si = i = 0; ni = 8;
 8012310:	2300      	movs	r3, #0
 8012312:	613b      	str	r3, [r7, #16]
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	61fb      	str	r3, [r7, #28]
 8012318:	2308      	movs	r3, #8
 801231a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801231c:	69fb      	ldr	r3, [r7, #28]
 801231e:	1c5a      	adds	r2, r3, #1
 8012320:	61fa      	str	r2, [r7, #28]
 8012322:	68fa      	ldr	r2, [r7, #12]
 8012324:	4413      	add	r3, r2
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801232a:	7efb      	ldrb	r3, [r7, #27]
 801232c:	2b20      	cmp	r3, #32
 801232e:	d94e      	bls.n	80123ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012330:	7efb      	ldrb	r3, [r7, #27]
 8012332:	2b2f      	cmp	r3, #47	@ 0x2f
 8012334:	d006      	beq.n	8012344 <create_name+0x54>
 8012336:	7efb      	ldrb	r3, [r7, #27]
 8012338:	2b5c      	cmp	r3, #92	@ 0x5c
 801233a:	d110      	bne.n	801235e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801233c:	e002      	b.n	8012344 <create_name+0x54>
 801233e:	69fb      	ldr	r3, [r7, #28]
 8012340:	3301      	adds	r3, #1
 8012342:	61fb      	str	r3, [r7, #28]
 8012344:	68fa      	ldr	r2, [r7, #12]
 8012346:	69fb      	ldr	r3, [r7, #28]
 8012348:	4413      	add	r3, r2
 801234a:	781b      	ldrb	r3, [r3, #0]
 801234c:	2b2f      	cmp	r3, #47	@ 0x2f
 801234e:	d0f6      	beq.n	801233e <create_name+0x4e>
 8012350:	68fa      	ldr	r2, [r7, #12]
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	4413      	add	r3, r2
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	2b5c      	cmp	r3, #92	@ 0x5c
 801235a:	d0f0      	beq.n	801233e <create_name+0x4e>
			break;
 801235c:	e038      	b.n	80123d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801235e:	7efb      	ldrb	r3, [r7, #27]
 8012360:	2b2e      	cmp	r3, #46	@ 0x2e
 8012362:	d003      	beq.n	801236c <create_name+0x7c>
 8012364:	693a      	ldr	r2, [r7, #16]
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	429a      	cmp	r2, r3
 801236a:	d30c      	bcc.n	8012386 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	2b0b      	cmp	r3, #11
 8012370:	d002      	beq.n	8012378 <create_name+0x88>
 8012372:	7efb      	ldrb	r3, [r7, #27]
 8012374:	2b2e      	cmp	r3, #46	@ 0x2e
 8012376:	d001      	beq.n	801237c <create_name+0x8c>
 8012378:	2306      	movs	r3, #6
 801237a:	e044      	b.n	8012406 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801237c:	2308      	movs	r3, #8
 801237e:	613b      	str	r3, [r7, #16]
 8012380:	230b      	movs	r3, #11
 8012382:	617b      	str	r3, [r7, #20]
			continue;
 8012384:	e022      	b.n	80123cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012386:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801238a:	2b00      	cmp	r3, #0
 801238c:	da04      	bge.n	8012398 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801238e:	7efb      	ldrb	r3, [r7, #27]
 8012390:	3b80      	subs	r3, #128	@ 0x80
 8012392:	4a1f      	ldr	r2, [pc, #124]	@ (8012410 <create_name+0x120>)
 8012394:	5cd3      	ldrb	r3, [r2, r3]
 8012396:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012398:	7efb      	ldrb	r3, [r7, #27]
 801239a:	4619      	mov	r1, r3
 801239c:	481d      	ldr	r0, [pc, #116]	@ (8012414 <create_name+0x124>)
 801239e:	f7fe ff36 	bl	801120e <chk_chr>
 80123a2:	4603      	mov	r3, r0
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d001      	beq.n	80123ac <create_name+0xbc>
 80123a8:	2306      	movs	r3, #6
 80123aa:	e02c      	b.n	8012406 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80123ac:	7efb      	ldrb	r3, [r7, #27]
 80123ae:	2b60      	cmp	r3, #96	@ 0x60
 80123b0:	d905      	bls.n	80123be <create_name+0xce>
 80123b2:	7efb      	ldrb	r3, [r7, #27]
 80123b4:	2b7a      	cmp	r3, #122	@ 0x7a
 80123b6:	d802      	bhi.n	80123be <create_name+0xce>
 80123b8:	7efb      	ldrb	r3, [r7, #27]
 80123ba:	3b20      	subs	r3, #32
 80123bc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	1c5a      	adds	r2, r3, #1
 80123c2:	613a      	str	r2, [r7, #16]
 80123c4:	68ba      	ldr	r2, [r7, #8]
 80123c6:	4413      	add	r3, r2
 80123c8:	7efa      	ldrb	r2, [r7, #27]
 80123ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80123cc:	e7a6      	b.n	801231c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80123ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80123d0:	68fa      	ldr	r2, [r7, #12]
 80123d2:	69fb      	ldr	r3, [r7, #28]
 80123d4:	441a      	add	r2, r3
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d101      	bne.n	80123e4 <create_name+0xf4>
 80123e0:	2306      	movs	r3, #6
 80123e2:	e010      	b.n	8012406 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	2be5      	cmp	r3, #229	@ 0xe5
 80123ea:	d102      	bne.n	80123f2 <create_name+0x102>
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	2205      	movs	r2, #5
 80123f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80123f2:	7efb      	ldrb	r3, [r7, #27]
 80123f4:	2b20      	cmp	r3, #32
 80123f6:	d801      	bhi.n	80123fc <create_name+0x10c>
 80123f8:	2204      	movs	r2, #4
 80123fa:	e000      	b.n	80123fe <create_name+0x10e>
 80123fc:	2200      	movs	r2, #0
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	330b      	adds	r3, #11
 8012402:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012404:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012406:	4618      	mov	r0, r3
 8012408:	3720      	adds	r7, #32
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	08016138 	.word	0x08016138
 8012414:	08016010 	.word	0x08016010

08012418 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b086      	sub	sp, #24
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801242c:	e002      	b.n	8012434 <follow_path+0x1c>
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	3301      	adds	r3, #1
 8012432:	603b      	str	r3, [r7, #0]
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	2b2f      	cmp	r3, #47	@ 0x2f
 801243a:	d0f8      	beq.n	801242e <follow_path+0x16>
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	2b5c      	cmp	r3, #92	@ 0x5c
 8012442:	d0f4      	beq.n	801242e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	2200      	movs	r2, #0
 8012448:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	2b1f      	cmp	r3, #31
 8012450:	d80a      	bhi.n	8012468 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2280      	movs	r2, #128	@ 0x80
 8012456:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801245a:	2100      	movs	r1, #0
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f7ff fc1e 	bl	8011c9e <dir_sdi>
 8012462:	4603      	mov	r3, r0
 8012464:	75fb      	strb	r3, [r7, #23]
 8012466:	e043      	b.n	80124f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012468:	463b      	mov	r3, r7
 801246a:	4619      	mov	r1, r3
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f7ff ff3f 	bl	80122f0 <create_name>
 8012472:	4603      	mov	r3, r0
 8012474:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012476:	7dfb      	ldrb	r3, [r7, #23]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d134      	bne.n	80124e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f7ff fe31 	bl	80120e4 <dir_find>
 8012482:	4603      	mov	r3, r0
 8012484:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801248c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801248e:	7dfb      	ldrb	r3, [r7, #23]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d00a      	beq.n	80124aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012494:	7dfb      	ldrb	r3, [r7, #23]
 8012496:	2b04      	cmp	r3, #4
 8012498:	d127      	bne.n	80124ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801249a:	7afb      	ldrb	r3, [r7, #11]
 801249c:	f003 0304 	and.w	r3, r3, #4
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d122      	bne.n	80124ea <follow_path+0xd2>
 80124a4:	2305      	movs	r3, #5
 80124a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80124a8:	e01f      	b.n	80124ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80124aa:	7afb      	ldrb	r3, [r7, #11]
 80124ac:	f003 0304 	and.w	r3, r3, #4
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d11c      	bne.n	80124ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80124b4:	693b      	ldr	r3, [r7, #16]
 80124b6:	799b      	ldrb	r3, [r3, #6]
 80124b8:	f003 0310 	and.w	r3, r3, #16
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d102      	bne.n	80124c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80124c0:	2305      	movs	r3, #5
 80124c2:	75fb      	strb	r3, [r7, #23]
 80124c4:	e014      	b.n	80124f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	695b      	ldr	r3, [r3, #20]
 80124d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124d4:	4413      	add	r3, r2
 80124d6:	4619      	mov	r1, r3
 80124d8:	68f8      	ldr	r0, [r7, #12]
 80124da:	f7ff fd67 	bl	8011fac <ld_clust>
 80124de:	4602      	mov	r2, r0
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80124e4:	e7c0      	b.n	8012468 <follow_path+0x50>
			if (res != FR_OK) break;
 80124e6:	bf00      	nop
 80124e8:	e002      	b.n	80124f0 <follow_path+0xd8>
				break;
 80124ea:	bf00      	nop
 80124ec:	e000      	b.n	80124f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80124ee:	bf00      	nop
			}
		}
	}

	return res;
 80124f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3718      	adds	r7, #24
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}

080124fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80124fa:	b480      	push	{r7}
 80124fc:	b087      	sub	sp, #28
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012502:	f04f 33ff 	mov.w	r3, #4294967295
 8012506:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d031      	beq.n	8012574 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	617b      	str	r3, [r7, #20]
 8012516:	e002      	b.n	801251e <get_ldnumber+0x24>
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	3301      	adds	r3, #1
 801251c:	617b      	str	r3, [r7, #20]
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	2b20      	cmp	r3, #32
 8012524:	d903      	bls.n	801252e <get_ldnumber+0x34>
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	2b3a      	cmp	r3, #58	@ 0x3a
 801252c:	d1f4      	bne.n	8012518 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	2b3a      	cmp	r3, #58	@ 0x3a
 8012534:	d11c      	bne.n	8012570 <get_ldnumber+0x76>
			tp = *path;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	1c5a      	adds	r2, r3, #1
 8012540:	60fa      	str	r2, [r7, #12]
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	3b30      	subs	r3, #48	@ 0x30
 8012546:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	2b09      	cmp	r3, #9
 801254c:	d80e      	bhi.n	801256c <get_ldnumber+0x72>
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	429a      	cmp	r2, r3
 8012554:	d10a      	bne.n	801256c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d107      	bne.n	801256c <get_ldnumber+0x72>
					vol = (int)i;
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	3301      	adds	r3, #1
 8012564:	617b      	str	r3, [r7, #20]
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	697a      	ldr	r2, [r7, #20]
 801256a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801256c:	693b      	ldr	r3, [r7, #16]
 801256e:	e002      	b.n	8012576 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012570:	2300      	movs	r3, #0
 8012572:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012574:	693b      	ldr	r3, [r7, #16]
}
 8012576:	4618      	mov	r0, r3
 8012578:	371c      	adds	r7, #28
 801257a:	46bd      	mov	sp, r7
 801257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012580:	4770      	bx	lr
	...

08012584 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b082      	sub	sp, #8
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2200      	movs	r2, #0
 8012592:	70da      	strb	r2, [r3, #3]
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f04f 32ff 	mov.w	r2, #4294967295
 801259a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801259c:	6839      	ldr	r1, [r7, #0]
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f7ff f800 	bl	80115a4 <move_window>
 80125a4:	4603      	mov	r3, r0
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d001      	beq.n	80125ae <check_fs+0x2a>
 80125aa:	2304      	movs	r3, #4
 80125ac:	e038      	b.n	8012620 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	3330      	adds	r3, #48	@ 0x30
 80125b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7fe fd44 	bl	8011044 <ld_word>
 80125bc:	4603      	mov	r3, r0
 80125be:	461a      	mov	r2, r3
 80125c0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d001      	beq.n	80125cc <check_fs+0x48>
 80125c8:	2303      	movs	r3, #3
 80125ca:	e029      	b.n	8012620 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80125d2:	2be9      	cmp	r3, #233	@ 0xe9
 80125d4:	d009      	beq.n	80125ea <check_fs+0x66>
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80125dc:	2beb      	cmp	r3, #235	@ 0xeb
 80125de:	d11e      	bne.n	801261e <check_fs+0x9a>
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80125e6:	2b90      	cmp	r3, #144	@ 0x90
 80125e8:	d119      	bne.n	801261e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	3330      	adds	r3, #48	@ 0x30
 80125ee:	3336      	adds	r3, #54	@ 0x36
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7fe fd3f 	bl	8011074 <ld_dword>
 80125f6:	4603      	mov	r3, r0
 80125f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80125fc:	4a0a      	ldr	r2, [pc, #40]	@ (8012628 <check_fs+0xa4>)
 80125fe:	4293      	cmp	r3, r2
 8012600:	d101      	bne.n	8012606 <check_fs+0x82>
 8012602:	2300      	movs	r3, #0
 8012604:	e00c      	b.n	8012620 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	3330      	adds	r3, #48	@ 0x30
 801260a:	3352      	adds	r3, #82	@ 0x52
 801260c:	4618      	mov	r0, r3
 801260e:	f7fe fd31 	bl	8011074 <ld_dword>
 8012612:	4603      	mov	r3, r0
 8012614:	4a05      	ldr	r2, [pc, #20]	@ (801262c <check_fs+0xa8>)
 8012616:	4293      	cmp	r3, r2
 8012618:	d101      	bne.n	801261e <check_fs+0x9a>
 801261a:	2300      	movs	r3, #0
 801261c:	e000      	b.n	8012620 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801261e:	2302      	movs	r3, #2
}
 8012620:	4618      	mov	r0, r3
 8012622:	3708      	adds	r7, #8
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}
 8012628:	00544146 	.word	0x00544146
 801262c:	33544146 	.word	0x33544146

08012630 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b096      	sub	sp, #88	@ 0x58
 8012634:	af00      	add	r7, sp, #0
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	60b9      	str	r1, [r7, #8]
 801263a:	4613      	mov	r3, r2
 801263c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	2200      	movs	r2, #0
 8012642:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012644:	68f8      	ldr	r0, [r7, #12]
 8012646:	f7ff ff58 	bl	80124fa <get_ldnumber>
 801264a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801264c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801264e:	2b00      	cmp	r3, #0
 8012650:	da01      	bge.n	8012656 <find_volume+0x26>
 8012652:	230b      	movs	r3, #11
 8012654:	e22d      	b.n	8012ab2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012656:	4aa1      	ldr	r2, [pc, #644]	@ (80128dc <find_volume+0x2ac>)
 8012658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801265e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012662:	2b00      	cmp	r3, #0
 8012664:	d101      	bne.n	801266a <find_volume+0x3a>
 8012666:	230c      	movs	r3, #12
 8012668:	e223      	b.n	8012ab2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801266e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012670:	79fb      	ldrb	r3, [r7, #7]
 8012672:	f023 0301 	bic.w	r3, r3, #1
 8012676:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d01a      	beq.n	80126b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012682:	785b      	ldrb	r3, [r3, #1]
 8012684:	4618      	mov	r0, r3
 8012686:	f7fe fc3d 	bl	8010f04 <disk_status>
 801268a:	4603      	mov	r3, r0
 801268c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012690:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012694:	f003 0301 	and.w	r3, r3, #1
 8012698:	2b00      	cmp	r3, #0
 801269a:	d10c      	bne.n	80126b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801269c:	79fb      	ldrb	r3, [r7, #7]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d007      	beq.n	80126b2 <find_volume+0x82>
 80126a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126a6:	f003 0304 	and.w	r3, r3, #4
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d001      	beq.n	80126b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80126ae:	230a      	movs	r3, #10
 80126b0:	e1ff      	b.n	8012ab2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80126b2:	2300      	movs	r3, #0
 80126b4:	e1fd      	b.n	8012ab2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80126b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126b8:	2200      	movs	r2, #0
 80126ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80126bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126be:	b2da      	uxtb	r2, r3
 80126c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80126c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126c6:	785b      	ldrb	r3, [r3, #1]
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7fe fc35 	bl	8010f38 <disk_initialize>
 80126ce:	4603      	mov	r3, r0
 80126d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80126d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126d8:	f003 0301 	and.w	r3, r3, #1
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d001      	beq.n	80126e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80126e0:	2303      	movs	r3, #3
 80126e2:	e1e6      	b.n	8012ab2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80126e4:	79fb      	ldrb	r3, [r7, #7]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d007      	beq.n	80126fa <find_volume+0xca>
 80126ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126ee:	f003 0304 	and.w	r3, r3, #4
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d001      	beq.n	80126fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80126f6:	230a      	movs	r3, #10
 80126f8:	e1db      	b.n	8012ab2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80126fa:	2300      	movs	r3, #0
 80126fc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80126fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012700:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012702:	f7ff ff3f 	bl	8012584 <check_fs>
 8012706:	4603      	mov	r3, r0
 8012708:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801270c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012710:	2b02      	cmp	r3, #2
 8012712:	d149      	bne.n	80127a8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012714:	2300      	movs	r3, #0
 8012716:	643b      	str	r3, [r7, #64]	@ 0x40
 8012718:	e01e      	b.n	8012758 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801271a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801271c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012722:	011b      	lsls	r3, r3, #4
 8012724:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012728:	4413      	add	r3, r2
 801272a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801272c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801272e:	3304      	adds	r3, #4
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d006      	beq.n	8012744 <find_volume+0x114>
 8012736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012738:	3308      	adds	r3, #8
 801273a:	4618      	mov	r0, r3
 801273c:	f7fe fc9a 	bl	8011074 <ld_dword>
 8012740:	4602      	mov	r2, r0
 8012742:	e000      	b.n	8012746 <find_volume+0x116>
 8012744:	2200      	movs	r2, #0
 8012746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	3358      	adds	r3, #88	@ 0x58
 801274c:	443b      	add	r3, r7
 801274e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012754:	3301      	adds	r3, #1
 8012756:	643b      	str	r3, [r7, #64]	@ 0x40
 8012758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801275a:	2b03      	cmp	r3, #3
 801275c:	d9dd      	bls.n	801271a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801275e:	2300      	movs	r3, #0
 8012760:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8012762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <find_volume+0x13e>
 8012768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801276a:	3b01      	subs	r3, #1
 801276c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801276e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012770:	009b      	lsls	r3, r3, #2
 8012772:	3358      	adds	r3, #88	@ 0x58
 8012774:	443b      	add	r3, r7
 8012776:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801277a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801277c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801277e:	2b00      	cmp	r3, #0
 8012780:	d005      	beq.n	801278e <find_volume+0x15e>
 8012782:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012784:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012786:	f7ff fefd 	bl	8012584 <check_fs>
 801278a:	4603      	mov	r3, r0
 801278c:	e000      	b.n	8012790 <find_volume+0x160>
 801278e:	2303      	movs	r3, #3
 8012790:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012794:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012798:	2b01      	cmp	r3, #1
 801279a:	d905      	bls.n	80127a8 <find_volume+0x178>
 801279c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801279e:	3301      	adds	r3, #1
 80127a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80127a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127a4:	2b03      	cmp	r3, #3
 80127a6:	d9e2      	bls.n	801276e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80127a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80127ac:	2b04      	cmp	r3, #4
 80127ae:	d101      	bne.n	80127b4 <find_volume+0x184>
 80127b0:	2301      	movs	r3, #1
 80127b2:	e17e      	b.n	8012ab2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80127b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80127b8:	2b01      	cmp	r3, #1
 80127ba:	d901      	bls.n	80127c0 <find_volume+0x190>
 80127bc:	230d      	movs	r3, #13
 80127be:	e178      	b.n	8012ab2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80127c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127c2:	3330      	adds	r3, #48	@ 0x30
 80127c4:	330b      	adds	r3, #11
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fe fc3c 	bl	8011044 <ld_word>
 80127cc:	4603      	mov	r3, r0
 80127ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127d2:	d001      	beq.n	80127d8 <find_volume+0x1a8>
 80127d4:	230d      	movs	r3, #13
 80127d6:	e16c      	b.n	8012ab2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80127d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127da:	3330      	adds	r3, #48	@ 0x30
 80127dc:	3316      	adds	r3, #22
 80127de:	4618      	mov	r0, r3
 80127e0:	f7fe fc30 	bl	8011044 <ld_word>
 80127e4:	4603      	mov	r3, r0
 80127e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80127e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d106      	bne.n	80127fc <find_volume+0x1cc>
 80127ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127f0:	3330      	adds	r3, #48	@ 0x30
 80127f2:	3324      	adds	r3, #36	@ 0x24
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7fe fc3d 	bl	8011074 <ld_dword>
 80127fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80127fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012800:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012804:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8012808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801280a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801280c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801280e:	789b      	ldrb	r3, [r3, #2]
 8012810:	2b01      	cmp	r3, #1
 8012812:	d005      	beq.n	8012820 <find_volume+0x1f0>
 8012814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012816:	789b      	ldrb	r3, [r3, #2]
 8012818:	2b02      	cmp	r3, #2
 801281a:	d001      	beq.n	8012820 <find_volume+0x1f0>
 801281c:	230d      	movs	r3, #13
 801281e:	e148      	b.n	8012ab2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012822:	789b      	ldrb	r3, [r3, #2]
 8012824:	461a      	mov	r2, r3
 8012826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012828:	fb02 f303 	mul.w	r3, r2, r3
 801282c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801282e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012834:	461a      	mov	r2, r3
 8012836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012838:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801283a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801283c:	895b      	ldrh	r3, [r3, #10]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d008      	beq.n	8012854 <find_volume+0x224>
 8012842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012844:	895b      	ldrh	r3, [r3, #10]
 8012846:	461a      	mov	r2, r3
 8012848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801284a:	895b      	ldrh	r3, [r3, #10]
 801284c:	3b01      	subs	r3, #1
 801284e:	4013      	ands	r3, r2
 8012850:	2b00      	cmp	r3, #0
 8012852:	d001      	beq.n	8012858 <find_volume+0x228>
 8012854:	230d      	movs	r3, #13
 8012856:	e12c      	b.n	8012ab2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801285a:	3330      	adds	r3, #48	@ 0x30
 801285c:	3311      	adds	r3, #17
 801285e:	4618      	mov	r0, r3
 8012860:	f7fe fbf0 	bl	8011044 <ld_word>
 8012864:	4603      	mov	r3, r0
 8012866:	461a      	mov	r2, r3
 8012868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801286a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801286c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801286e:	891b      	ldrh	r3, [r3, #8]
 8012870:	f003 030f 	and.w	r3, r3, #15
 8012874:	b29b      	uxth	r3, r3
 8012876:	2b00      	cmp	r3, #0
 8012878:	d001      	beq.n	801287e <find_volume+0x24e>
 801287a:	230d      	movs	r3, #13
 801287c:	e119      	b.n	8012ab2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801287e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012880:	3330      	adds	r3, #48	@ 0x30
 8012882:	3313      	adds	r3, #19
 8012884:	4618      	mov	r0, r3
 8012886:	f7fe fbdd 	bl	8011044 <ld_word>
 801288a:	4603      	mov	r3, r0
 801288c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801288e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012890:	2b00      	cmp	r3, #0
 8012892:	d106      	bne.n	80128a2 <find_volume+0x272>
 8012894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012896:	3330      	adds	r3, #48	@ 0x30
 8012898:	3320      	adds	r3, #32
 801289a:	4618      	mov	r0, r3
 801289c:	f7fe fbea 	bl	8011074 <ld_dword>
 80128a0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80128a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128a4:	3330      	adds	r3, #48	@ 0x30
 80128a6:	330e      	adds	r3, #14
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7fe fbcb 	bl	8011044 <ld_word>
 80128ae:	4603      	mov	r3, r0
 80128b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80128b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d101      	bne.n	80128bc <find_volume+0x28c>
 80128b8:	230d      	movs	r3, #13
 80128ba:	e0fa      	b.n	8012ab2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80128bc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80128be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128c0:	4413      	add	r3, r2
 80128c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80128c4:	8912      	ldrh	r2, [r2, #8]
 80128c6:	0912      	lsrs	r2, r2, #4
 80128c8:	b292      	uxth	r2, r2
 80128ca:	4413      	add	r3, r2
 80128cc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80128ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80128d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d204      	bcs.n	80128e0 <find_volume+0x2b0>
 80128d6:	230d      	movs	r3, #13
 80128d8:	e0eb      	b.n	8012ab2 <find_volume+0x482>
 80128da:	bf00      	nop
 80128dc:	20000900 	.word	0x20000900
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80128e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80128e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128e4:	1ad3      	subs	r3, r2, r3
 80128e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80128e8:	8952      	ldrh	r2, [r2, #10]
 80128ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80128ee:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80128f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d101      	bne.n	80128fa <find_volume+0x2ca>
 80128f6:	230d      	movs	r3, #13
 80128f8:	e0db      	b.n	8012ab2 <find_volume+0x482>
		fmt = FS_FAT32;
 80128fa:	2303      	movs	r3, #3
 80128fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012902:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012906:	4293      	cmp	r3, r2
 8012908:	d802      	bhi.n	8012910 <find_volume+0x2e0>
 801290a:	2302      	movs	r3, #2
 801290c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012912:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012916:	4293      	cmp	r3, r2
 8012918:	d802      	bhi.n	8012920 <find_volume+0x2f0>
 801291a:	2301      	movs	r3, #1
 801291c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012922:	1c9a      	adds	r2, r3, #2
 8012924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012926:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801292a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801292c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801292e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012932:	441a      	add	r2, r3
 8012934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012936:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012938:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801293c:	441a      	add	r2, r3
 801293e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012940:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8012942:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012946:	2b03      	cmp	r3, #3
 8012948:	d11e      	bne.n	8012988 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801294a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801294c:	3330      	adds	r3, #48	@ 0x30
 801294e:	332a      	adds	r3, #42	@ 0x2a
 8012950:	4618      	mov	r0, r3
 8012952:	f7fe fb77 	bl	8011044 <ld_word>
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d001      	beq.n	8012960 <find_volume+0x330>
 801295c:	230d      	movs	r3, #13
 801295e:	e0a8      	b.n	8012ab2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012962:	891b      	ldrh	r3, [r3, #8]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d001      	beq.n	801296c <find_volume+0x33c>
 8012968:	230d      	movs	r3, #13
 801296a:	e0a2      	b.n	8012ab2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801296c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801296e:	3330      	adds	r3, #48	@ 0x30
 8012970:	332c      	adds	r3, #44	@ 0x2c
 8012972:	4618      	mov	r0, r3
 8012974:	f7fe fb7e 	bl	8011074 <ld_dword>
 8012978:	4602      	mov	r2, r0
 801297a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801297c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012980:	695b      	ldr	r3, [r3, #20]
 8012982:	009b      	lsls	r3, r3, #2
 8012984:	647b      	str	r3, [r7, #68]	@ 0x44
 8012986:	e01f      	b.n	80129c8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801298a:	891b      	ldrh	r3, [r3, #8]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d101      	bne.n	8012994 <find_volume+0x364>
 8012990:	230d      	movs	r3, #13
 8012992:	e08e      	b.n	8012ab2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012996:	6a1a      	ldr	r2, [r3, #32]
 8012998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801299a:	441a      	add	r2, r3
 801299c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801299e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80129a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80129a4:	2b02      	cmp	r3, #2
 80129a6:	d103      	bne.n	80129b0 <find_volume+0x380>
 80129a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129aa:	695b      	ldr	r3, [r3, #20]
 80129ac:	005b      	lsls	r3, r3, #1
 80129ae:	e00a      	b.n	80129c6 <find_volume+0x396>
 80129b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129b2:	695a      	ldr	r2, [r3, #20]
 80129b4:	4613      	mov	r3, r2
 80129b6:	005b      	lsls	r3, r3, #1
 80129b8:	4413      	add	r3, r2
 80129ba:	085a      	lsrs	r2, r3, #1
 80129bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129be:	695b      	ldr	r3, [r3, #20]
 80129c0:	f003 0301 	and.w	r3, r3, #1
 80129c4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80129c6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80129c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129ca:	699a      	ldr	r2, [r3, #24]
 80129cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80129ce:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80129d2:	0a5b      	lsrs	r3, r3, #9
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d201      	bcs.n	80129dc <find_volume+0x3ac>
 80129d8:	230d      	movs	r3, #13
 80129da:	e06a      	b.n	8012ab2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80129dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129de:	f04f 32ff 	mov.w	r2, #4294967295
 80129e2:	611a      	str	r2, [r3, #16]
 80129e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129e6:	691a      	ldr	r2, [r3, #16]
 80129e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129ea:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80129ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129ee:	2280      	movs	r2, #128	@ 0x80
 80129f0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80129f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80129f6:	2b03      	cmp	r3, #3
 80129f8:	d149      	bne.n	8012a8e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80129fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129fc:	3330      	adds	r3, #48	@ 0x30
 80129fe:	3330      	adds	r3, #48	@ 0x30
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7fe fb1f 	bl	8011044 <ld_word>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b01      	cmp	r3, #1
 8012a0a:	d140      	bne.n	8012a8e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a0e:	3301      	adds	r3, #1
 8012a10:	4619      	mov	r1, r3
 8012a12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012a14:	f7fe fdc6 	bl	80115a4 <move_window>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d137      	bne.n	8012a8e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8012a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a20:	2200      	movs	r2, #0
 8012a22:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a26:	3330      	adds	r3, #48	@ 0x30
 8012a28:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7fe fb09 	bl	8011044 <ld_word>
 8012a32:	4603      	mov	r3, r0
 8012a34:	461a      	mov	r2, r3
 8012a36:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d127      	bne.n	8012a8e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a40:	3330      	adds	r3, #48	@ 0x30
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7fe fb16 	bl	8011074 <ld_dword>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8012abc <find_volume+0x48c>)
 8012a4c:	4293      	cmp	r3, r2
 8012a4e:	d11e      	bne.n	8012a8e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a52:	3330      	adds	r3, #48	@ 0x30
 8012a54:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7fe fb0b 	bl	8011074 <ld_dword>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	4a17      	ldr	r2, [pc, #92]	@ (8012ac0 <find_volume+0x490>)
 8012a62:	4293      	cmp	r3, r2
 8012a64:	d113      	bne.n	8012a8e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a68:	3330      	adds	r3, #48	@ 0x30
 8012a6a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7fe fb00 	bl	8011074 <ld_dword>
 8012a74:	4602      	mov	r2, r0
 8012a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a78:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a7c:	3330      	adds	r3, #48	@ 0x30
 8012a7e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7fe faf6 	bl	8011074 <ld_dword>
 8012a88:	4602      	mov	r2, r0
 8012a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a8c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a90:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012a94:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012a96:	4b0b      	ldr	r3, [pc, #44]	@ (8012ac4 <find_volume+0x494>)
 8012a98:	881b      	ldrh	r3, [r3, #0]
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	b29a      	uxth	r2, r3
 8012a9e:	4b09      	ldr	r3, [pc, #36]	@ (8012ac4 <find_volume+0x494>)
 8012aa0:	801a      	strh	r2, [r3, #0]
 8012aa2:	4b08      	ldr	r3, [pc, #32]	@ (8012ac4 <find_volume+0x494>)
 8012aa4:	881a      	ldrh	r2, [r3, #0]
 8012aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aa8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012aaa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012aac:	f7fe fd12 	bl	80114d4 <clear_lock>
#endif
	return FR_OK;
 8012ab0:	2300      	movs	r3, #0
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3758      	adds	r7, #88	@ 0x58
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}
 8012aba:	bf00      	nop
 8012abc:	41615252 	.word	0x41615252
 8012ac0:	61417272 	.word	0x61417272
 8012ac4:	20000904 	.word	0x20000904

08012ac8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012ad2:	2309      	movs	r3, #9
 8012ad4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d01c      	beq.n	8012b16 <validate+0x4e>
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d018      	beq.n	8012b16 <validate+0x4e>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d013      	beq.n	8012b16 <validate+0x4e>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	889a      	ldrh	r2, [r3, #4]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	88db      	ldrh	r3, [r3, #6]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d10c      	bne.n	8012b16 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	785b      	ldrb	r3, [r3, #1]
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7fe f9fe 	bl	8010f04 <disk_status>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	f003 0301 	and.w	r3, r3, #1
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d101      	bne.n	8012b16 <validate+0x4e>
			res = FR_OK;
 8012b12:	2300      	movs	r3, #0
 8012b14:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012b16:	7bfb      	ldrb	r3, [r7, #15]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d102      	bne.n	8012b22 <validate+0x5a>
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	e000      	b.n	8012b24 <validate+0x5c>
 8012b22:	2300      	movs	r3, #0
 8012b24:	683a      	ldr	r2, [r7, #0]
 8012b26:	6013      	str	r3, [r2, #0]
	return res;
 8012b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	3710      	adds	r7, #16
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}
	...

08012b34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b088      	sub	sp, #32
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	4613      	mov	r3, r2
 8012b40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012b46:	f107 0310 	add.w	r3, r7, #16
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7ff fcd5 	bl	80124fa <get_ldnumber>
 8012b50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012b52:	69fb      	ldr	r3, [r7, #28]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	da01      	bge.n	8012b5c <f_mount+0x28>
 8012b58:	230b      	movs	r3, #11
 8012b5a:	e02b      	b.n	8012bb4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012b5c:	4a17      	ldr	r2, [pc, #92]	@ (8012bbc <f_mount+0x88>)
 8012b5e:	69fb      	ldr	r3, [r7, #28]
 8012b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012b66:	69bb      	ldr	r3, [r7, #24]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d005      	beq.n	8012b78 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012b6c:	69b8      	ldr	r0, [r7, #24]
 8012b6e:	f7fe fcb1 	bl	80114d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012b72:	69bb      	ldr	r3, [r7, #24]
 8012b74:	2200      	movs	r2, #0
 8012b76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d002      	beq.n	8012b84 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	2200      	movs	r2, #0
 8012b82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	490d      	ldr	r1, [pc, #52]	@ (8012bbc <f_mount+0x88>)
 8012b88:	69fb      	ldr	r3, [r7, #28]
 8012b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d002      	beq.n	8012b9a <f_mount+0x66>
 8012b94:	79fb      	ldrb	r3, [r7, #7]
 8012b96:	2b01      	cmp	r3, #1
 8012b98:	d001      	beq.n	8012b9e <f_mount+0x6a>
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	e00a      	b.n	8012bb4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012b9e:	f107 010c 	add.w	r1, r7, #12
 8012ba2:	f107 0308 	add.w	r3, r7, #8
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7ff fd41 	bl	8012630 <find_volume>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3720      	adds	r7, #32
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}
 8012bbc:	20000900 	.word	0x20000900

08012bc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b098      	sub	sp, #96	@ 0x60
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	60b9      	str	r1, [r7, #8]
 8012bca:	4613      	mov	r3, r2
 8012bcc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d101      	bne.n	8012bd8 <f_open+0x18>
 8012bd4:	2309      	movs	r3, #9
 8012bd6:	e1a9      	b.n	8012f2c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012bd8:	79fb      	ldrb	r3, [r7, #7]
 8012bda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012bde:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012be0:	79fa      	ldrb	r2, [r7, #7]
 8012be2:	f107 0110 	add.w	r1, r7, #16
 8012be6:	f107 0308 	add.w	r3, r7, #8
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7ff fd20 	bl	8012630 <find_volume>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8012bf6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	f040 818d 	bne.w	8012f1a <f_open+0x35a>
		dj.obj.fs = fs;
 8012c00:	693b      	ldr	r3, [r7, #16]
 8012c02:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012c04:	68ba      	ldr	r2, [r7, #8]
 8012c06:	f107 0314 	add.w	r3, r7, #20
 8012c0a:	4611      	mov	r1, r2
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7ff fc03 	bl	8012418 <follow_path>
 8012c12:	4603      	mov	r3, r0
 8012c14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012c18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d118      	bne.n	8012c52 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012c20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012c24:	b25b      	sxtb	r3, r3
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	da03      	bge.n	8012c32 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012c2a:	2306      	movs	r3, #6
 8012c2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012c30:	e00f      	b.n	8012c52 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012c32:	79fb      	ldrb	r3, [r7, #7]
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	bf8c      	ite	hi
 8012c38:	2301      	movhi	r3, #1
 8012c3a:	2300      	movls	r3, #0
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	461a      	mov	r2, r3
 8012c40:	f107 0314 	add.w	r3, r7, #20
 8012c44:	4611      	mov	r1, r2
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7fe fafc 	bl	8011244 <chk_lock>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012c52:	79fb      	ldrb	r3, [r7, #7]
 8012c54:	f003 031c 	and.w	r3, r3, #28
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d07f      	beq.n	8012d5c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8012c5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d017      	beq.n	8012c94 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012c64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012c68:	2b04      	cmp	r3, #4
 8012c6a:	d10e      	bne.n	8012c8a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012c6c:	f7fe fb46 	bl	80112fc <enq_lock>
 8012c70:	4603      	mov	r3, r0
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d006      	beq.n	8012c84 <f_open+0xc4>
 8012c76:	f107 0314 	add.w	r3, r7, #20
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7ff fa87 	bl	801218e <dir_register>
 8012c80:	4603      	mov	r3, r0
 8012c82:	e000      	b.n	8012c86 <f_open+0xc6>
 8012c84:	2312      	movs	r3, #18
 8012c86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012c8a:	79fb      	ldrb	r3, [r7, #7]
 8012c8c:	f043 0308 	orr.w	r3, r3, #8
 8012c90:	71fb      	strb	r3, [r7, #7]
 8012c92:	e010      	b.n	8012cb6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012c94:	7ebb      	ldrb	r3, [r7, #26]
 8012c96:	f003 0311 	and.w	r3, r3, #17
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d003      	beq.n	8012ca6 <f_open+0xe6>
					res = FR_DENIED;
 8012c9e:	2307      	movs	r3, #7
 8012ca0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012ca4:	e007      	b.n	8012cb6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012ca6:	79fb      	ldrb	r3, [r7, #7]
 8012ca8:	f003 0304 	and.w	r3, r3, #4
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d002      	beq.n	8012cb6 <f_open+0xf6>
 8012cb0:	2308      	movs	r3, #8
 8012cb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012cb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d168      	bne.n	8012d90 <f_open+0x1d0>
 8012cbe:	79fb      	ldrb	r3, [r7, #7]
 8012cc0:	f003 0308 	and.w	r3, r3, #8
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d063      	beq.n	8012d90 <f_open+0x1d0>
				dw = GET_FATTIME();
 8012cc8:	f7fb fe5a 	bl	800e980 <get_fattime>
 8012ccc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cd0:	330e      	adds	r3, #14
 8012cd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7fe fa0b 	bl	80110f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cdc:	3316      	adds	r3, #22
 8012cde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fe fa05 	bl	80110f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ce8:	330b      	adds	r3, #11
 8012cea:	2220      	movs	r2, #32
 8012cec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012cf2:	4611      	mov	r1, r2
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7ff f959 	bl	8011fac <ld_clust>
 8012cfa:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012d00:	2200      	movs	r2, #0
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7ff f971 	bl	8011fea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d0a:	331c      	adds	r3, #28
 8012d0c:	2100      	movs	r1, #0
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7fe f9ee 	bl	80110f0 <st_dword>
					fs->wflag = 1;
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	2201      	movs	r2, #1
 8012d18:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d037      	beq.n	8012d90 <f_open+0x1d0>
						dw = fs->winsect;
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d24:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012d26:	f107 0314 	add.w	r3, r7, #20
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7fe fe84 	bl	8011a3c <remove_chain>
 8012d34:	4603      	mov	r3, r0
 8012d36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8012d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d126      	bne.n	8012d90 <f_open+0x1d0>
							res = move_window(fs, dw);
 8012d42:	693b      	ldr	r3, [r7, #16]
 8012d44:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012d46:	4618      	mov	r0, r3
 8012d48:	f7fe fc2c 	bl	80115a4 <move_window>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012d56:	3a01      	subs	r2, #1
 8012d58:	60da      	str	r2, [r3, #12]
 8012d5a:	e019      	b.n	8012d90 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012d5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d115      	bne.n	8012d90 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012d64:	7ebb      	ldrb	r3, [r7, #26]
 8012d66:	f003 0310 	and.w	r3, r3, #16
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d003      	beq.n	8012d76 <f_open+0x1b6>
					res = FR_NO_FILE;
 8012d6e:	2304      	movs	r3, #4
 8012d70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012d74:	e00c      	b.n	8012d90 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012d76:	79fb      	ldrb	r3, [r7, #7]
 8012d78:	f003 0302 	and.w	r3, r3, #2
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d007      	beq.n	8012d90 <f_open+0x1d0>
 8012d80:	7ebb      	ldrb	r3, [r7, #26]
 8012d82:	f003 0301 	and.w	r3, r3, #1
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d002      	beq.n	8012d90 <f_open+0x1d0>
						res = FR_DENIED;
 8012d8a:	2307      	movs	r3, #7
 8012d8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012d90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d126      	bne.n	8012de6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012d98:	79fb      	ldrb	r3, [r7, #7]
 8012d9a:	f003 0308 	and.w	r3, r3, #8
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d003      	beq.n	8012daa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8012da2:	79fb      	ldrb	r3, [r7, #7]
 8012da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012da8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012daa:	693b      	ldr	r3, [r7, #16]
 8012dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8012db2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012db8:	79fb      	ldrb	r3, [r7, #7]
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	bf8c      	ite	hi
 8012dbe:	2301      	movhi	r3, #1
 8012dc0:	2300      	movls	r3, #0
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	461a      	mov	r2, r3
 8012dc6:	f107 0314 	add.w	r3, r7, #20
 8012dca:	4611      	mov	r1, r2
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7fe fab7 	bl	8011340 <inc_lock>
 8012dd2:	4602      	mov	r2, r0
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	691b      	ldr	r3, [r3, #16]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d102      	bne.n	8012de6 <f_open+0x226>
 8012de0:	2302      	movs	r3, #2
 8012de2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012de6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	f040 8095 	bne.w	8012f1a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012df0:	693b      	ldr	r3, [r7, #16]
 8012df2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012df4:	4611      	mov	r1, r2
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7ff f8d8 	bl	8011fac <ld_clust>
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e04:	331c      	adds	r3, #28
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7fe f934 	bl	8011074 <ld_dword>
 8012e0c:	4602      	mov	r2, r0
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	2200      	movs	r2, #0
 8012e16:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012e18:	693a      	ldr	r2, [r7, #16]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	88da      	ldrh	r2, [r3, #6]
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	79fa      	ldrb	r2, [r7, #7]
 8012e2a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	2200      	movs	r2, #0
 8012e30:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	2200      	movs	r2, #0
 8012e36:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	3330      	adds	r3, #48	@ 0x30
 8012e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e46:	2100      	movs	r1, #0
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7fe f99e 	bl	801118a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012e4e:	79fb      	ldrb	r3, [r7, #7]
 8012e50:	f003 0320 	and.w	r3, r3, #32
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d060      	beq.n	8012f1a <f_open+0x35a>
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	68db      	ldr	r3, [r3, #12]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d05c      	beq.n	8012f1a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	68da      	ldr	r2, [r3, #12]
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	895b      	ldrh	r3, [r3, #10]
 8012e6c:	025b      	lsls	r3, r3, #9
 8012e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	689b      	ldr	r3, [r3, #8]
 8012e74:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	68db      	ldr	r3, [r3, #12]
 8012e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8012e7c:	e016      	b.n	8012eac <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fe fc49 	bl	801171a <get_fat>
 8012e88:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012e8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e8c:	2b01      	cmp	r3, #1
 8012e8e:	d802      	bhi.n	8012e96 <f_open+0x2d6>
 8012e90:	2302      	movs	r3, #2
 8012e92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012e96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e9c:	d102      	bne.n	8012ea4 <f_open+0x2e4>
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012ea4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ea8:	1ad3      	subs	r3, r2, r3
 8012eaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8012eac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d103      	bne.n	8012ebc <f_open+0x2fc>
 8012eb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d8e0      	bhi.n	8012e7e <f_open+0x2be>
				}
				fp->clust = clst;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012ec0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012ec2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d127      	bne.n	8012f1a <f_open+0x35a>
 8012eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d022      	beq.n	8012f1a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7fe fbff 	bl	80116dc <clust2sect>
 8012ede:	6478      	str	r0, [r7, #68]	@ 0x44
 8012ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d103      	bne.n	8012eee <f_open+0x32e>
						res = FR_INT_ERR;
 8012ee6:	2302      	movs	r3, #2
 8012ee8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012eec:	e015      	b.n	8012f1a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ef0:	0a5a      	lsrs	r2, r3, #9
 8012ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ef4:	441a      	add	r2, r3
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	7858      	ldrb	r0, [r3, #1]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	6a1a      	ldr	r2, [r3, #32]
 8012f08:	2301      	movs	r3, #1
 8012f0a:	f7fe f83d 	bl	8010f88 <disk_read>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d002      	beq.n	8012f1a <f_open+0x35a>
 8012f14:	2301      	movs	r3, #1
 8012f16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012f1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d002      	beq.n	8012f28 <f_open+0x368>
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	2200      	movs	r2, #0
 8012f26:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012f28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	3760      	adds	r7, #96	@ 0x60
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b08e      	sub	sp, #56	@ 0x38
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	60f8      	str	r0, [r7, #12]
 8012f3c:	60b9      	str	r1, [r7, #8]
 8012f3e:	607a      	str	r2, [r7, #4]
 8012f40:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	2200      	movs	r2, #0
 8012f4a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	f107 0214 	add.w	r2, r7, #20
 8012f52:	4611      	mov	r1, r2
 8012f54:	4618      	mov	r0, r3
 8012f56:	f7ff fdb7 	bl	8012ac8 <validate>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012f60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d107      	bne.n	8012f78 <f_read+0x44>
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	7d5b      	ldrb	r3, [r3, #21]
 8012f6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012f70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d002      	beq.n	8012f7e <f_read+0x4a>
 8012f78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012f7c:	e115      	b.n	80131aa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	7d1b      	ldrb	r3, [r3, #20]
 8012f82:	f003 0301 	and.w	r3, r3, #1
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d101      	bne.n	8012f8e <f_read+0x5a>
 8012f8a:	2307      	movs	r3, #7
 8012f8c:	e10d      	b.n	80131aa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	68da      	ldr	r2, [r3, #12]
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	699b      	ldr	r3, [r3, #24]
 8012f96:	1ad3      	subs	r3, r2, r3
 8012f98:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012f9a:	687a      	ldr	r2, [r7, #4]
 8012f9c:	6a3b      	ldr	r3, [r7, #32]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	f240 80fe 	bls.w	80131a0 <f_read+0x26c>
 8012fa4:	6a3b      	ldr	r3, [r7, #32]
 8012fa6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012fa8:	e0fa      	b.n	80131a0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	699b      	ldr	r3, [r3, #24]
 8012fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	f040 80c6 	bne.w	8013144 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	699b      	ldr	r3, [r3, #24]
 8012fbc:	0a5b      	lsrs	r3, r3, #9
 8012fbe:	697a      	ldr	r2, [r7, #20]
 8012fc0:	8952      	ldrh	r2, [r2, #10]
 8012fc2:	3a01      	subs	r2, #1
 8012fc4:	4013      	ands	r3, r2
 8012fc6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d12f      	bne.n	801302e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	699b      	ldr	r3, [r3, #24]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d103      	bne.n	8012fde <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	689b      	ldr	r3, [r3, #8]
 8012fda:	633b      	str	r3, [r7, #48]	@ 0x30
 8012fdc:	e013      	b.n	8013006 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d007      	beq.n	8012ff6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	699b      	ldr	r3, [r3, #24]
 8012fea:	4619      	mov	r1, r3
 8012fec:	68f8      	ldr	r0, [r7, #12]
 8012fee:	f7fe fe22 	bl	8011c36 <clmt_clust>
 8012ff2:	6338      	str	r0, [r7, #48]	@ 0x30
 8012ff4:	e007      	b.n	8013006 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012ff6:	68fa      	ldr	r2, [r7, #12]
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	69db      	ldr	r3, [r3, #28]
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	4610      	mov	r0, r2
 8013000:	f7fe fb8b 	bl	801171a <get_fat>
 8013004:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013008:	2b01      	cmp	r3, #1
 801300a:	d804      	bhi.n	8013016 <f_read+0xe2>
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2202      	movs	r2, #2
 8013010:	755a      	strb	r2, [r3, #21]
 8013012:	2302      	movs	r3, #2
 8013014:	e0c9      	b.n	80131aa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801301c:	d104      	bne.n	8013028 <f_read+0xf4>
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2201      	movs	r2, #1
 8013022:	755a      	strb	r2, [r3, #21]
 8013024:	2301      	movs	r3, #1
 8013026:	e0c0      	b.n	80131aa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801302c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801302e:	697a      	ldr	r2, [r7, #20]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	69db      	ldr	r3, [r3, #28]
 8013034:	4619      	mov	r1, r3
 8013036:	4610      	mov	r0, r2
 8013038:	f7fe fb50 	bl	80116dc <clust2sect>
 801303c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801303e:	69bb      	ldr	r3, [r7, #24]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d104      	bne.n	801304e <f_read+0x11a>
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2202      	movs	r2, #2
 8013048:	755a      	strb	r2, [r3, #21]
 801304a:	2302      	movs	r3, #2
 801304c:	e0ad      	b.n	80131aa <f_read+0x276>
			sect += csect;
 801304e:	69ba      	ldr	r2, [r7, #24]
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	4413      	add	r3, r2
 8013054:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	0a5b      	lsrs	r3, r3, #9
 801305a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801305e:	2b00      	cmp	r3, #0
 8013060:	d039      	beq.n	80130d6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013062:	69fa      	ldr	r2, [r7, #28]
 8013064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013066:	4413      	add	r3, r2
 8013068:	697a      	ldr	r2, [r7, #20]
 801306a:	8952      	ldrh	r2, [r2, #10]
 801306c:	4293      	cmp	r3, r2
 801306e:	d905      	bls.n	801307c <f_read+0x148>
					cc = fs->csize - csect;
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	895b      	ldrh	r3, [r3, #10]
 8013074:	461a      	mov	r2, r3
 8013076:	69fb      	ldr	r3, [r7, #28]
 8013078:	1ad3      	subs	r3, r2, r3
 801307a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	7858      	ldrb	r0, [r3, #1]
 8013080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013082:	69ba      	ldr	r2, [r7, #24]
 8013084:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013086:	f7fd ff7f 	bl	8010f88 <disk_read>
 801308a:	4603      	mov	r3, r0
 801308c:	2b00      	cmp	r3, #0
 801308e:	d004      	beq.n	801309a <f_read+0x166>
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	2201      	movs	r2, #1
 8013094:	755a      	strb	r2, [r3, #21]
 8013096:	2301      	movs	r3, #1
 8013098:	e087      	b.n	80131aa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	7d1b      	ldrb	r3, [r3, #20]
 801309e:	b25b      	sxtb	r3, r3
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	da14      	bge.n	80130ce <f_read+0x19a>
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	6a1a      	ldr	r2, [r3, #32]
 80130a8:	69bb      	ldr	r3, [r7, #24]
 80130aa:	1ad3      	subs	r3, r2, r3
 80130ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d90d      	bls.n	80130ce <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	6a1a      	ldr	r2, [r3, #32]
 80130b6:	69bb      	ldr	r3, [r7, #24]
 80130b8:	1ad3      	subs	r3, r2, r3
 80130ba:	025b      	lsls	r3, r3, #9
 80130bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130be:	18d0      	adds	r0, r2, r3
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	3330      	adds	r3, #48	@ 0x30
 80130c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130c8:	4619      	mov	r1, r3
 80130ca:	f7fe f83d 	bl	8011148 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80130ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130d0:	025b      	lsls	r3, r3, #9
 80130d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80130d4:	e050      	b.n	8013178 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	6a1b      	ldr	r3, [r3, #32]
 80130da:	69ba      	ldr	r2, [r7, #24]
 80130dc:	429a      	cmp	r2, r3
 80130de:	d02e      	beq.n	801313e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	7d1b      	ldrb	r3, [r3, #20]
 80130e4:	b25b      	sxtb	r3, r3
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	da18      	bge.n	801311c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	7858      	ldrb	r0, [r3, #1]
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	6a1a      	ldr	r2, [r3, #32]
 80130f8:	2301      	movs	r3, #1
 80130fa:	f7fd ff65 	bl	8010fc8 <disk_write>
 80130fe:	4603      	mov	r3, r0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d004      	beq.n	801310e <f_read+0x1da>
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	2201      	movs	r2, #1
 8013108:	755a      	strb	r2, [r3, #21]
 801310a:	2301      	movs	r3, #1
 801310c:	e04d      	b.n	80131aa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	7d1b      	ldrb	r3, [r3, #20]
 8013112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013116:	b2da      	uxtb	r2, r3
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	7858      	ldrb	r0, [r3, #1]
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013126:	2301      	movs	r3, #1
 8013128:	69ba      	ldr	r2, [r7, #24]
 801312a:	f7fd ff2d 	bl	8010f88 <disk_read>
 801312e:	4603      	mov	r3, r0
 8013130:	2b00      	cmp	r3, #0
 8013132:	d004      	beq.n	801313e <f_read+0x20a>
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	2201      	movs	r2, #1
 8013138:	755a      	strb	r2, [r3, #21]
 801313a:	2301      	movs	r3, #1
 801313c:	e035      	b.n	80131aa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	69ba      	ldr	r2, [r7, #24]
 8013142:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	699b      	ldr	r3, [r3, #24]
 8013148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801314c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013150:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	429a      	cmp	r2, r3
 8013158:	d901      	bls.n	801315e <f_read+0x22a>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	699b      	ldr	r3, [r3, #24]
 8013168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801316c:	4413      	add	r3, r2
 801316e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013170:	4619      	mov	r1, r3
 8013172:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013174:	f7fd ffe8 	bl	8011148 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801317a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801317c:	4413      	add	r3, r2
 801317e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	699a      	ldr	r2, [r3, #24]
 8013184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013186:	441a      	add	r2, r3
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	619a      	str	r2, [r3, #24]
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013192:	441a      	add	r2, r3
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	601a      	str	r2, [r3, #0]
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801319c:	1ad3      	subs	r3, r2, r3
 801319e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f47f af01 	bne.w	8012faa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80131a8:	2300      	movs	r3, #0
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3738      	adds	r7, #56	@ 0x38
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b08c      	sub	sp, #48	@ 0x30
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	60f8      	str	r0, [r7, #12]
 80131ba:	60b9      	str	r1, [r7, #8]
 80131bc:	607a      	str	r2, [r7, #4]
 80131be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	2200      	movs	r2, #0
 80131c8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f107 0210 	add.w	r2, r7, #16
 80131d0:	4611      	mov	r1, r2
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7ff fc78 	bl	8012ac8 <validate>
 80131d8:	4603      	mov	r3, r0
 80131da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80131de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d107      	bne.n	80131f6 <f_write+0x44>
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	7d5b      	ldrb	r3, [r3, #21]
 80131ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80131ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d002      	beq.n	80131fc <f_write+0x4a>
 80131f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80131fa:	e14b      	b.n	8013494 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	7d1b      	ldrb	r3, [r3, #20]
 8013200:	f003 0302 	and.w	r3, r3, #2
 8013204:	2b00      	cmp	r3, #0
 8013206:	d101      	bne.n	801320c <f_write+0x5a>
 8013208:	2307      	movs	r3, #7
 801320a:	e143      	b.n	8013494 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	699a      	ldr	r2, [r3, #24]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	441a      	add	r2, r3
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	699b      	ldr	r3, [r3, #24]
 8013218:	429a      	cmp	r2, r3
 801321a:	f080 812d 	bcs.w	8013478 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	699b      	ldr	r3, [r3, #24]
 8013222:	43db      	mvns	r3, r3
 8013224:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013226:	e127      	b.n	8013478 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	699b      	ldr	r3, [r3, #24]
 801322c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013230:	2b00      	cmp	r3, #0
 8013232:	f040 80e3 	bne.w	80133fc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	699b      	ldr	r3, [r3, #24]
 801323a:	0a5b      	lsrs	r3, r3, #9
 801323c:	693a      	ldr	r2, [r7, #16]
 801323e:	8952      	ldrh	r2, [r2, #10]
 8013240:	3a01      	subs	r2, #1
 8013242:	4013      	ands	r3, r2
 8013244:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013246:	69bb      	ldr	r3, [r7, #24]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d143      	bne.n	80132d4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	699b      	ldr	r3, [r3, #24]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d10c      	bne.n	801326e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	689b      	ldr	r3, [r3, #8]
 8013258:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801325c:	2b00      	cmp	r3, #0
 801325e:	d11a      	bne.n	8013296 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	2100      	movs	r1, #0
 8013264:	4618      	mov	r0, r3
 8013266:	f7fe fc4e 	bl	8011b06 <create_chain>
 801326a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801326c:	e013      	b.n	8013296 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013272:	2b00      	cmp	r3, #0
 8013274:	d007      	beq.n	8013286 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	699b      	ldr	r3, [r3, #24]
 801327a:	4619      	mov	r1, r3
 801327c:	68f8      	ldr	r0, [r7, #12]
 801327e:	f7fe fcda 	bl	8011c36 <clmt_clust>
 8013282:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013284:	e007      	b.n	8013296 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013286:	68fa      	ldr	r2, [r7, #12]
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	69db      	ldr	r3, [r3, #28]
 801328c:	4619      	mov	r1, r3
 801328e:	4610      	mov	r0, r2
 8013290:	f7fe fc39 	bl	8011b06 <create_chain>
 8013294:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013298:	2b00      	cmp	r3, #0
 801329a:	f000 80f2 	beq.w	8013482 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801329e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132a0:	2b01      	cmp	r3, #1
 80132a2:	d104      	bne.n	80132ae <f_write+0xfc>
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2202      	movs	r2, #2
 80132a8:	755a      	strb	r2, [r3, #21]
 80132aa:	2302      	movs	r3, #2
 80132ac:	e0f2      	b.n	8013494 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80132ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132b4:	d104      	bne.n	80132c0 <f_write+0x10e>
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	2201      	movs	r2, #1
 80132ba:	755a      	strb	r2, [r3, #21]
 80132bc:	2301      	movs	r3, #1
 80132be:	e0e9      	b.n	8013494 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80132c4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	689b      	ldr	r3, [r3, #8]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d102      	bne.n	80132d4 <f_write+0x122>
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80132d2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	7d1b      	ldrb	r3, [r3, #20]
 80132d8:	b25b      	sxtb	r3, r3
 80132da:	2b00      	cmp	r3, #0
 80132dc:	da18      	bge.n	8013310 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80132de:	693b      	ldr	r3, [r7, #16]
 80132e0:	7858      	ldrb	r0, [r3, #1]
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	6a1a      	ldr	r2, [r3, #32]
 80132ec:	2301      	movs	r3, #1
 80132ee:	f7fd fe6b 	bl	8010fc8 <disk_write>
 80132f2:	4603      	mov	r3, r0
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d004      	beq.n	8013302 <f_write+0x150>
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	2201      	movs	r2, #1
 80132fc:	755a      	strb	r2, [r3, #21]
 80132fe:	2301      	movs	r3, #1
 8013300:	e0c8      	b.n	8013494 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	7d1b      	ldrb	r3, [r3, #20]
 8013306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801330a:	b2da      	uxtb	r2, r3
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013310:	693a      	ldr	r2, [r7, #16]
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	69db      	ldr	r3, [r3, #28]
 8013316:	4619      	mov	r1, r3
 8013318:	4610      	mov	r0, r2
 801331a:	f7fe f9df 	bl	80116dc <clust2sect>
 801331e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d104      	bne.n	8013330 <f_write+0x17e>
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	2202      	movs	r2, #2
 801332a:	755a      	strb	r2, [r3, #21]
 801332c:	2302      	movs	r3, #2
 801332e:	e0b1      	b.n	8013494 <f_write+0x2e2>
			sect += csect;
 8013330:	697a      	ldr	r2, [r7, #20]
 8013332:	69bb      	ldr	r3, [r7, #24]
 8013334:	4413      	add	r3, r2
 8013336:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	0a5b      	lsrs	r3, r3, #9
 801333c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801333e:	6a3b      	ldr	r3, [r7, #32]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d03c      	beq.n	80133be <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013344:	69ba      	ldr	r2, [r7, #24]
 8013346:	6a3b      	ldr	r3, [r7, #32]
 8013348:	4413      	add	r3, r2
 801334a:	693a      	ldr	r2, [r7, #16]
 801334c:	8952      	ldrh	r2, [r2, #10]
 801334e:	4293      	cmp	r3, r2
 8013350:	d905      	bls.n	801335e <f_write+0x1ac>
					cc = fs->csize - csect;
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	895b      	ldrh	r3, [r3, #10]
 8013356:	461a      	mov	r2, r3
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	1ad3      	subs	r3, r2, r3
 801335c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	7858      	ldrb	r0, [r3, #1]
 8013362:	6a3b      	ldr	r3, [r7, #32]
 8013364:	697a      	ldr	r2, [r7, #20]
 8013366:	69f9      	ldr	r1, [r7, #28]
 8013368:	f7fd fe2e 	bl	8010fc8 <disk_write>
 801336c:	4603      	mov	r3, r0
 801336e:	2b00      	cmp	r3, #0
 8013370:	d004      	beq.n	801337c <f_write+0x1ca>
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	2201      	movs	r2, #1
 8013376:	755a      	strb	r2, [r3, #21]
 8013378:	2301      	movs	r3, #1
 801337a:	e08b      	b.n	8013494 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	6a1a      	ldr	r2, [r3, #32]
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	1ad3      	subs	r3, r2, r3
 8013384:	6a3a      	ldr	r2, [r7, #32]
 8013386:	429a      	cmp	r2, r3
 8013388:	d915      	bls.n	80133b6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	6a1a      	ldr	r2, [r3, #32]
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	1ad3      	subs	r3, r2, r3
 8013398:	025b      	lsls	r3, r3, #9
 801339a:	69fa      	ldr	r2, [r7, #28]
 801339c:	4413      	add	r3, r2
 801339e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80133a2:	4619      	mov	r1, r3
 80133a4:	f7fd fed0 	bl	8011148 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	7d1b      	ldrb	r3, [r3, #20]
 80133ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80133b0:	b2da      	uxtb	r2, r3
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80133b6:	6a3b      	ldr	r3, [r7, #32]
 80133b8:	025b      	lsls	r3, r3, #9
 80133ba:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80133bc:	e03f      	b.n	801343e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	6a1b      	ldr	r3, [r3, #32]
 80133c2:	697a      	ldr	r2, [r7, #20]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d016      	beq.n	80133f6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	699a      	ldr	r2, [r3, #24]
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d210      	bcs.n	80133f6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	7858      	ldrb	r0, [r3, #1]
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80133de:	2301      	movs	r3, #1
 80133e0:	697a      	ldr	r2, [r7, #20]
 80133e2:	f7fd fdd1 	bl	8010f88 <disk_read>
 80133e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d004      	beq.n	80133f6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2201      	movs	r2, #1
 80133f0:	755a      	strb	r2, [r3, #21]
 80133f2:	2301      	movs	r3, #1
 80133f4:	e04e      	b.n	8013494 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	697a      	ldr	r2, [r7, #20]
 80133fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	699b      	ldr	r3, [r3, #24]
 8013400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013404:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013408:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801340a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	429a      	cmp	r2, r3
 8013410:	d901      	bls.n	8013416 <f_write+0x264>
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	699b      	ldr	r3, [r3, #24]
 8013420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013424:	4413      	add	r3, r2
 8013426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013428:	69f9      	ldr	r1, [r7, #28]
 801342a:	4618      	mov	r0, r3
 801342c:	f7fd fe8c 	bl	8011148 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	7d1b      	ldrb	r3, [r3, #20]
 8013434:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013438:	b2da      	uxtb	r2, r3
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801343e:	69fa      	ldr	r2, [r7, #28]
 8013440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013442:	4413      	add	r3, r2
 8013444:	61fb      	str	r3, [r7, #28]
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	699a      	ldr	r2, [r3, #24]
 801344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801344c:	441a      	add	r2, r3
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	619a      	str	r2, [r3, #24]
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	68da      	ldr	r2, [r3, #12]
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	699b      	ldr	r3, [r3, #24]
 801345a:	429a      	cmp	r2, r3
 801345c:	bf38      	it	cc
 801345e:	461a      	movcc	r2, r3
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	60da      	str	r2, [r3, #12]
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	681a      	ldr	r2, [r3, #0]
 8013468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801346a:	441a      	add	r2, r3
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	601a      	str	r2, [r3, #0]
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013474:	1ad3      	subs	r3, r2, r3
 8013476:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2b00      	cmp	r3, #0
 801347c:	f47f aed4 	bne.w	8013228 <f_write+0x76>
 8013480:	e000      	b.n	8013484 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013482:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	7d1b      	ldrb	r3, [r3, #20]
 8013488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801348c:	b2da      	uxtb	r2, r3
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013492:	2300      	movs	r3, #0
}
 8013494:	4618      	mov	r0, r3
 8013496:	3730      	adds	r7, #48	@ 0x30
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}

0801349c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b086      	sub	sp, #24
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f107 0208 	add.w	r2, r7, #8
 80134aa:	4611      	mov	r1, r2
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7ff fb0b 	bl	8012ac8 <validate>
 80134b2:	4603      	mov	r3, r0
 80134b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80134b6:	7dfb      	ldrb	r3, [r7, #23]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d168      	bne.n	801358e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	7d1b      	ldrb	r3, [r3, #20]
 80134c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d062      	beq.n	801358e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	7d1b      	ldrb	r3, [r3, #20]
 80134cc:	b25b      	sxtb	r3, r3
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	da15      	bge.n	80134fe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	7858      	ldrb	r0, [r3, #1]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6a1a      	ldr	r2, [r3, #32]
 80134e0:	2301      	movs	r3, #1
 80134e2:	f7fd fd71 	bl	8010fc8 <disk_write>
 80134e6:	4603      	mov	r3, r0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d001      	beq.n	80134f0 <f_sync+0x54>
 80134ec:	2301      	movs	r3, #1
 80134ee:	e04f      	b.n	8013590 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	7d1b      	ldrb	r3, [r3, #20]
 80134f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134f8:	b2da      	uxtb	r2, r3
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80134fe:	f7fb fa3f 	bl	800e980 <get_fattime>
 8013502:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013504:	68ba      	ldr	r2, [r7, #8]
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801350a:	4619      	mov	r1, r3
 801350c:	4610      	mov	r0, r2
 801350e:	f7fe f849 	bl	80115a4 <move_window>
 8013512:	4603      	mov	r3, r0
 8013514:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013516:	7dfb      	ldrb	r3, [r7, #23]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d138      	bne.n	801358e <f_sync+0xf2>
					dir = fp->dir_ptr;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013520:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	330b      	adds	r3, #11
 8013526:	781a      	ldrb	r2, [r3, #0]
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	330b      	adds	r3, #11
 801352c:	f042 0220 	orr.w	r2, r2, #32
 8013530:	b2d2      	uxtb	r2, r2
 8013532:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6818      	ldr	r0, [r3, #0]
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	689b      	ldr	r3, [r3, #8]
 801353c:	461a      	mov	r2, r3
 801353e:	68f9      	ldr	r1, [r7, #12]
 8013540:	f7fe fd53 	bl	8011fea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	f103 021c 	add.w	r2, r3, #28
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	68db      	ldr	r3, [r3, #12]
 801354e:	4619      	mov	r1, r3
 8013550:	4610      	mov	r0, r2
 8013552:	f7fd fdcd 	bl	80110f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	3316      	adds	r3, #22
 801355a:	6939      	ldr	r1, [r7, #16]
 801355c:	4618      	mov	r0, r3
 801355e:	f7fd fdc7 	bl	80110f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	3312      	adds	r3, #18
 8013566:	2100      	movs	r1, #0
 8013568:	4618      	mov	r0, r3
 801356a:	f7fd fda6 	bl	80110ba <st_word>
					fs->wflag = 1;
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	2201      	movs	r2, #1
 8013572:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	4618      	mov	r0, r3
 8013578:	f7fe f842 	bl	8011600 <sync_fs>
 801357c:	4603      	mov	r3, r0
 801357e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	7d1b      	ldrb	r3, [r3, #20]
 8013584:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013588:	b2da      	uxtb	r2, r3
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801358e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013590:	4618      	mov	r0, r3
 8013592:	3718      	adds	r7, #24
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f7ff ff7b 	bl	801349c <f_sync>
 80135a6:	4603      	mov	r3, r0
 80135a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80135aa:	7bfb      	ldrb	r3, [r7, #15]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d118      	bne.n	80135e2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f107 0208 	add.w	r2, r7, #8
 80135b6:	4611      	mov	r1, r2
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7ff fa85 	bl	8012ac8 <validate>
 80135be:	4603      	mov	r3, r0
 80135c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80135c2:	7bfb      	ldrb	r3, [r7, #15]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d10c      	bne.n	80135e2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	691b      	ldr	r3, [r3, #16]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7fd ff45 	bl	801145c <dec_lock>
 80135d2:	4603      	mov	r3, r0
 80135d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80135d6:	7bfb      	ldrb	r3, [r7, #15]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d102      	bne.n	80135e2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2200      	movs	r2, #0
 80135e0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80135e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80135e4:	4618      	mov	r0, r3
 80135e6:	3710      	adds	r7, #16
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}

080135ec <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b090      	sub	sp, #64	@ 0x40
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f107 0208 	add.w	r2, r7, #8
 80135fc:	4611      	mov	r1, r2
 80135fe:	4618      	mov	r0, r3
 8013600:	f7ff fa62 	bl	8012ac8 <validate>
 8013604:	4603      	mov	r3, r0
 8013606:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801360a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801360e:	2b00      	cmp	r3, #0
 8013610:	d103      	bne.n	801361a <f_lseek+0x2e>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	7d5b      	ldrb	r3, [r3, #21]
 8013616:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801361a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801361e:	2b00      	cmp	r3, #0
 8013620:	d002      	beq.n	8013628 <f_lseek+0x3c>
 8013622:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013626:	e1e6      	b.n	80139f6 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801362c:	2b00      	cmp	r3, #0
 801362e:	f000 80d1 	beq.w	80137d4 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013638:	d15a      	bne.n	80136f0 <f_lseek+0x104>
			tbl = fp->cltbl;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801363e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013642:	1d1a      	adds	r2, r3, #4
 8013644:	627a      	str	r2, [r7, #36]	@ 0x24
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	617b      	str	r3, [r7, #20]
 801364a:	2302      	movs	r3, #2
 801364c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	689b      	ldr	r3, [r3, #8]
 8013652:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8013654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013656:	2b00      	cmp	r3, #0
 8013658:	d03a      	beq.n	80136d0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801365c:	613b      	str	r3, [r7, #16]
 801365e:	2300      	movs	r3, #0
 8013660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013664:	3302      	adds	r3, #2
 8013666:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8013668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801366a:	60fb      	str	r3, [r7, #12]
 801366c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801366e:	3301      	adds	r3, #1
 8013670:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013676:	4618      	mov	r0, r3
 8013678:	f7fe f84f 	bl	801171a <get_fat>
 801367c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801367e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013680:	2b01      	cmp	r3, #1
 8013682:	d804      	bhi.n	801368e <f_lseek+0xa2>
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2202      	movs	r2, #2
 8013688:	755a      	strb	r2, [r3, #21]
 801368a:	2302      	movs	r3, #2
 801368c:	e1b3      	b.n	80139f6 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801368e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013694:	d104      	bne.n	80136a0 <f_lseek+0xb4>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	2201      	movs	r2, #1
 801369a:	755a      	strb	r2, [r3, #21]
 801369c:	2301      	movs	r3, #1
 801369e:	e1aa      	b.n	80139f6 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	3301      	adds	r3, #1
 80136a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d0de      	beq.n	8013668 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80136aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	429a      	cmp	r2, r3
 80136b0:	d809      	bhi.n	80136c6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80136b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136b4:	1d1a      	adds	r2, r3, #4
 80136b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80136b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80136ba:	601a      	str	r2, [r3, #0]
 80136bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136be:	1d1a      	adds	r2, r3, #4
 80136c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80136c2:	693a      	ldr	r2, [r7, #16]
 80136c4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	695b      	ldr	r3, [r3, #20]
 80136ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d3c4      	bcc.n	801365a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80136d6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80136d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	429a      	cmp	r2, r3
 80136de:	d803      	bhi.n	80136e8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80136e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136e2:	2200      	movs	r2, #0
 80136e4:	601a      	str	r2, [r3, #0]
 80136e6:	e184      	b.n	80139f2 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80136e8:	2311      	movs	r3, #17
 80136ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80136ee:	e180      	b.n	80139f2 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	68db      	ldr	r3, [r3, #12]
 80136f4:	683a      	ldr	r2, [r7, #0]
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d902      	bls.n	8013700 <f_lseek+0x114>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	68db      	ldr	r3, [r3, #12]
 80136fe:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	683a      	ldr	r2, [r7, #0]
 8013704:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	2b00      	cmp	r3, #0
 801370a:	f000 8172 	beq.w	80139f2 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	3b01      	subs	r3, #1
 8013712:	4619      	mov	r1, r3
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f7fe fa8e 	bl	8011c36 <clmt_clust>
 801371a:	4602      	mov	r2, r0
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013720:	68ba      	ldr	r2, [r7, #8]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	69db      	ldr	r3, [r3, #28]
 8013726:	4619      	mov	r1, r3
 8013728:	4610      	mov	r0, r2
 801372a:	f7fd ffd7 	bl	80116dc <clust2sect>
 801372e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013730:	69bb      	ldr	r3, [r7, #24]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d104      	bne.n	8013740 <f_lseek+0x154>
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	2202      	movs	r2, #2
 801373a:	755a      	strb	r2, [r3, #21]
 801373c:	2302      	movs	r3, #2
 801373e:	e15a      	b.n	80139f6 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	3b01      	subs	r3, #1
 8013744:	0a5b      	lsrs	r3, r3, #9
 8013746:	68ba      	ldr	r2, [r7, #8]
 8013748:	8952      	ldrh	r2, [r2, #10]
 801374a:	3a01      	subs	r2, #1
 801374c:	4013      	ands	r3, r2
 801374e:	69ba      	ldr	r2, [r7, #24]
 8013750:	4413      	add	r3, r2
 8013752:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	699b      	ldr	r3, [r3, #24]
 8013758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801375c:	2b00      	cmp	r3, #0
 801375e:	f000 8148 	beq.w	80139f2 <f_lseek+0x406>
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6a1b      	ldr	r3, [r3, #32]
 8013766:	69ba      	ldr	r2, [r7, #24]
 8013768:	429a      	cmp	r2, r3
 801376a:	f000 8142 	beq.w	80139f2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	7d1b      	ldrb	r3, [r3, #20]
 8013772:	b25b      	sxtb	r3, r3
 8013774:	2b00      	cmp	r3, #0
 8013776:	da18      	bge.n	80137aa <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	7858      	ldrb	r0, [r3, #1]
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6a1a      	ldr	r2, [r3, #32]
 8013786:	2301      	movs	r3, #1
 8013788:	f7fd fc1e 	bl	8010fc8 <disk_write>
 801378c:	4603      	mov	r3, r0
 801378e:	2b00      	cmp	r3, #0
 8013790:	d004      	beq.n	801379c <f_lseek+0x1b0>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2201      	movs	r2, #1
 8013796:	755a      	strb	r2, [r3, #21]
 8013798:	2301      	movs	r3, #1
 801379a:	e12c      	b.n	80139f6 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	7d1b      	ldrb	r3, [r3, #20]
 80137a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80137a4:	b2da      	uxtb	r2, r3
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	7858      	ldrb	r0, [r3, #1]
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80137b4:	2301      	movs	r3, #1
 80137b6:	69ba      	ldr	r2, [r7, #24]
 80137b8:	f7fd fbe6 	bl	8010f88 <disk_read>
 80137bc:	4603      	mov	r3, r0
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d004      	beq.n	80137cc <f_lseek+0x1e0>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2201      	movs	r2, #1
 80137c6:	755a      	strb	r2, [r3, #21]
 80137c8:	2301      	movs	r3, #1
 80137ca:	e114      	b.n	80139f6 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	69ba      	ldr	r2, [r7, #24]
 80137d0:	621a      	str	r2, [r3, #32]
 80137d2:	e10e      	b.n	80139f2 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	68db      	ldr	r3, [r3, #12]
 80137d8:	683a      	ldr	r2, [r7, #0]
 80137da:	429a      	cmp	r2, r3
 80137dc:	d908      	bls.n	80137f0 <f_lseek+0x204>
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	7d1b      	ldrb	r3, [r3, #20]
 80137e2:	f003 0302 	and.w	r3, r3, #2
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d102      	bne.n	80137f0 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	68db      	ldr	r3, [r3, #12]
 80137ee:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	699b      	ldr	r3, [r3, #24]
 80137f4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80137f6:	2300      	movs	r3, #0
 80137f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80137fe:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	f000 80a7 	beq.w	8013956 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	895b      	ldrh	r3, [r3, #10]
 801380c:	025b      	lsls	r3, r3, #9
 801380e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013810:	6a3b      	ldr	r3, [r7, #32]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d01b      	beq.n	801384e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	1e5a      	subs	r2, r3, #1
 801381a:	69fb      	ldr	r3, [r7, #28]
 801381c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013820:	6a3b      	ldr	r3, [r7, #32]
 8013822:	1e59      	subs	r1, r3, #1
 8013824:	69fb      	ldr	r3, [r7, #28]
 8013826:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801382a:	429a      	cmp	r2, r3
 801382c:	d30f      	bcc.n	801384e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801382e:	6a3b      	ldr	r3, [r7, #32]
 8013830:	1e5a      	subs	r2, r3, #1
 8013832:	69fb      	ldr	r3, [r7, #28]
 8013834:	425b      	negs	r3, r3
 8013836:	401a      	ands	r2, r3
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	699b      	ldr	r3, [r3, #24]
 8013840:	683a      	ldr	r2, [r7, #0]
 8013842:	1ad3      	subs	r3, r2, r3
 8013844:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	69db      	ldr	r3, [r3, #28]
 801384a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801384c:	e022      	b.n	8013894 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	689b      	ldr	r3, [r3, #8]
 8013852:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013856:	2b00      	cmp	r3, #0
 8013858:	d119      	bne.n	801388e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	2100      	movs	r1, #0
 801385e:	4618      	mov	r0, r3
 8013860:	f7fe f951 	bl	8011b06 <create_chain>
 8013864:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013868:	2b01      	cmp	r3, #1
 801386a:	d104      	bne.n	8013876 <f_lseek+0x28a>
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2202      	movs	r2, #2
 8013870:	755a      	strb	r2, [r3, #21]
 8013872:	2302      	movs	r3, #2
 8013874:	e0bf      	b.n	80139f6 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013878:	f1b3 3fff 	cmp.w	r3, #4294967295
 801387c:	d104      	bne.n	8013888 <f_lseek+0x29c>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	2201      	movs	r2, #1
 8013882:	755a      	strb	r2, [r3, #21]
 8013884:	2301      	movs	r3, #1
 8013886:	e0b6      	b.n	80139f6 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801388c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013892:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013896:	2b00      	cmp	r3, #0
 8013898:	d05d      	beq.n	8013956 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801389a:	e03a      	b.n	8013912 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801389c:	683a      	ldr	r2, [r7, #0]
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	1ad3      	subs	r3, r2, r3
 80138a2:	603b      	str	r3, [r7, #0]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	699a      	ldr	r2, [r3, #24]
 80138a8:	69fb      	ldr	r3, [r7, #28]
 80138aa:	441a      	add	r2, r3
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	7d1b      	ldrb	r3, [r3, #20]
 80138b4:	f003 0302 	and.w	r3, r3, #2
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d00b      	beq.n	80138d4 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7fe f920 	bl	8011b06 <create_chain>
 80138c6:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80138c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d108      	bne.n	80138e0 <f_lseek+0x2f4>
							ofs = 0; break;
 80138ce:	2300      	movs	r3, #0
 80138d0:	603b      	str	r3, [r7, #0]
 80138d2:	e022      	b.n	801391a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80138d8:	4618      	mov	r0, r3
 80138da:	f7fd ff1e 	bl	801171a <get_fat>
 80138de:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138e6:	d104      	bne.n	80138f2 <f_lseek+0x306>
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2201      	movs	r2, #1
 80138ec:	755a      	strb	r2, [r3, #21]
 80138ee:	2301      	movs	r3, #1
 80138f0:	e081      	b.n	80139f6 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80138f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f4:	2b01      	cmp	r3, #1
 80138f6:	d904      	bls.n	8013902 <f_lseek+0x316>
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	695b      	ldr	r3, [r3, #20]
 80138fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80138fe:	429a      	cmp	r2, r3
 8013900:	d304      	bcc.n	801390c <f_lseek+0x320>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	2202      	movs	r2, #2
 8013906:	755a      	strb	r2, [r3, #21]
 8013908:	2302      	movs	r3, #2
 801390a:	e074      	b.n	80139f6 <f_lseek+0x40a>
					fp->clust = clst;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013910:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013912:	683a      	ldr	r2, [r7, #0]
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	429a      	cmp	r2, r3
 8013918:	d8c0      	bhi.n	801389c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	699a      	ldr	r2, [r3, #24]
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	441a      	add	r2, r3
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801392c:	2b00      	cmp	r3, #0
 801392e:	d012      	beq.n	8013956 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013934:	4618      	mov	r0, r3
 8013936:	f7fd fed1 	bl	80116dc <clust2sect>
 801393a:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801393c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801393e:	2b00      	cmp	r3, #0
 8013940:	d104      	bne.n	801394c <f_lseek+0x360>
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2202      	movs	r2, #2
 8013946:	755a      	strb	r2, [r3, #21]
 8013948:	2302      	movs	r3, #2
 801394a:	e054      	b.n	80139f6 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	0a5b      	lsrs	r3, r3, #9
 8013950:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013952:	4413      	add	r3, r2
 8013954:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	699a      	ldr	r2, [r3, #24]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	68db      	ldr	r3, [r3, #12]
 801395e:	429a      	cmp	r2, r3
 8013960:	d90a      	bls.n	8013978 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	699a      	ldr	r2, [r3, #24]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	7d1b      	ldrb	r3, [r3, #20]
 801396e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013972:	b2da      	uxtb	r2, r3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	699b      	ldr	r3, [r3, #24]
 801397c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013980:	2b00      	cmp	r3, #0
 8013982:	d036      	beq.n	80139f2 <f_lseek+0x406>
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6a1b      	ldr	r3, [r3, #32]
 8013988:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801398a:	429a      	cmp	r2, r3
 801398c:	d031      	beq.n	80139f2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	7d1b      	ldrb	r3, [r3, #20]
 8013992:	b25b      	sxtb	r3, r3
 8013994:	2b00      	cmp	r3, #0
 8013996:	da18      	bge.n	80139ca <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013998:	68bb      	ldr	r3, [r7, #8]
 801399a:	7858      	ldrb	r0, [r3, #1]
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6a1a      	ldr	r2, [r3, #32]
 80139a6:	2301      	movs	r3, #1
 80139a8:	f7fd fb0e 	bl	8010fc8 <disk_write>
 80139ac:	4603      	mov	r3, r0
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d004      	beq.n	80139bc <f_lseek+0x3d0>
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2201      	movs	r2, #1
 80139b6:	755a      	strb	r2, [r3, #21]
 80139b8:	2301      	movs	r3, #1
 80139ba:	e01c      	b.n	80139f6 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	7d1b      	ldrb	r3, [r3, #20]
 80139c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80139c4:	b2da      	uxtb	r2, r3
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	7858      	ldrb	r0, [r3, #1]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80139d4:	2301      	movs	r3, #1
 80139d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80139d8:	f7fd fad6 	bl	8010f88 <disk_read>
 80139dc:	4603      	mov	r3, r0
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d004      	beq.n	80139ec <f_lseek+0x400>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2201      	movs	r2, #1
 80139e6:	755a      	strb	r2, [r3, #21]
 80139e8:	2301      	movs	r3, #1
 80139ea:	e004      	b.n	80139f6 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80139f0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80139f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80139f6:	4618      	mov	r0, r3
 80139f8:	3740      	adds	r7, #64	@ 0x40
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}

080139fe <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80139fe:	b580      	push	{r7, lr}
 8013a00:	b086      	sub	sp, #24
 8013a02:	af00      	add	r7, sp, #0
 8013a04:	6078      	str	r0, [r7, #4]
 8013a06:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d101      	bne.n	8013a12 <f_opendir+0x14>
 8013a0e:	2309      	movs	r3, #9
 8013a10:	e064      	b.n	8013adc <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8013a16:	f107 010c 	add.w	r1, r7, #12
 8013a1a:	463b      	mov	r3, r7
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7fe fe06 	bl	8012630 <find_volume>
 8013a24:	4603      	mov	r3, r0
 8013a26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013a28:	7dfb      	ldrb	r3, [r7, #23]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d14f      	bne.n	8013ace <f_opendir+0xd0>
		obj->fs = fs;
 8013a2e:	68fa      	ldr	r2, [r7, #12]
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	4619      	mov	r1, r3
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f7fe fced 	bl	8012418 <follow_path>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8013a42:	7dfb      	ldrb	r3, [r7, #23]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d13d      	bne.n	8013ac4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013a4e:	b25b      	sxtb	r3, r3
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	db12      	blt.n	8013a7a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	799b      	ldrb	r3, [r3, #6]
 8013a58:	f003 0310 	and.w	r3, r3, #16
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d00a      	beq.n	8013a76 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013a60:	68fa      	ldr	r2, [r7, #12]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6a1b      	ldr	r3, [r3, #32]
 8013a66:	4619      	mov	r1, r3
 8013a68:	4610      	mov	r0, r2
 8013a6a:	f7fe fa9f 	bl	8011fac <ld_clust>
 8013a6e:	4602      	mov	r2, r0
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	609a      	str	r2, [r3, #8]
 8013a74:	e001      	b.n	8013a7a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8013a76:	2305      	movs	r3, #5
 8013a78:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8013a7a:	7dfb      	ldrb	r3, [r7, #23]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d121      	bne.n	8013ac4 <f_opendir+0xc6>
				obj->id = fs->id;
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	88da      	ldrh	r2, [r3, #6]
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013a88:	2100      	movs	r1, #0
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f7fe f907 	bl	8011c9e <dir_sdi>
 8013a90:	4603      	mov	r3, r0
 8013a92:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8013a94:	7dfb      	ldrb	r3, [r7, #23]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d114      	bne.n	8013ac4 <f_opendir+0xc6>
					if (obj->sclust) {
 8013a9a:	693b      	ldr	r3, [r7, #16]
 8013a9c:	689b      	ldr	r3, [r3, #8]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d00d      	beq.n	8013abe <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013aa2:	2100      	movs	r1, #0
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f7fd fc4b 	bl	8011340 <inc_lock>
 8013aaa:	4602      	mov	r2, r0
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	691b      	ldr	r3, [r3, #16]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d105      	bne.n	8013ac4 <f_opendir+0xc6>
 8013ab8:	2312      	movs	r3, #18
 8013aba:	75fb      	strb	r3, [r7, #23]
 8013abc:	e002      	b.n	8013ac4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013ac4:	7dfb      	ldrb	r3, [r7, #23]
 8013ac6:	2b04      	cmp	r3, #4
 8013ac8:	d101      	bne.n	8013ace <f_opendir+0xd0>
 8013aca:	2305      	movs	r3, #5
 8013acc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013ace:	7dfb      	ldrb	r3, [r7, #23]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d002      	beq.n	8013ada <f_opendir+0xdc>
 8013ad4:	693b      	ldr	r3, [r7, #16]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3718      	adds	r7, #24
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b084      	sub	sp, #16
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f107 0208 	add.w	r2, r7, #8
 8013af2:	4611      	mov	r1, r2
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7fe ffe7 	bl	8012ac8 <validate>
 8013afa:	4603      	mov	r3, r0
 8013afc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013afe:	7bfb      	ldrb	r3, [r7, #15]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d110      	bne.n	8013b26 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	691b      	ldr	r3, [r3, #16]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d006      	beq.n	8013b1a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	691b      	ldr	r3, [r3, #16]
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7fd fca3 	bl	801145c <dec_lock>
 8013b16:	4603      	mov	r3, r0
 8013b18:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8013b1a:	7bfb      	ldrb	r3, [r7, #15]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d102      	bne.n	8013b26 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2200      	movs	r2, #0
 8013b24:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8013b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}

08013b30 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b084      	sub	sp, #16
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f107 0208 	add.w	r2, r7, #8
 8013b40:	4611      	mov	r1, r2
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7fe ffc0 	bl	8012ac8 <validate>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013b4c:	7bfb      	ldrb	r3, [r7, #15]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d126      	bne.n	8013ba0 <f_readdir+0x70>
		if (!fno) {
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d106      	bne.n	8013b66 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013b58:	2100      	movs	r1, #0
 8013b5a:	6878      	ldr	r0, [r7, #4]
 8013b5c:	f7fe f89f 	bl	8011c9e <dir_sdi>
 8013b60:	4603      	mov	r3, r0
 8013b62:	73fb      	strb	r3, [r7, #15]
 8013b64:	e01c      	b.n	8013ba0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8013b66:	2100      	movs	r1, #0
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f7fe fa5e 	bl	801202a <dir_read>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8013b72:	7bfb      	ldrb	r3, [r7, #15]
 8013b74:	2b04      	cmp	r3, #4
 8013b76:	d101      	bne.n	8013b7c <f_readdir+0x4c>
 8013b78:	2300      	movs	r3, #0
 8013b7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8013b7c:	7bfb      	ldrb	r3, [r7, #15]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d10e      	bne.n	8013ba0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013b82:	6839      	ldr	r1, [r7, #0]
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f7fe fb52 	bl	801222e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013b8a:	2100      	movs	r1, #0
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f7fe f901 	bl	8011d94 <dir_next>
 8013b92:	4603      	mov	r3, r0
 8013b94:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8013b96:	7bfb      	ldrb	r3, [r7, #15]
 8013b98:	2b04      	cmp	r3, #4
 8013b9a:	d101      	bne.n	8013ba0 <f_readdir+0x70>
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8013ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3710      	adds	r7, #16
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}

08013baa <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013baa:	b580      	push	{r7, lr}
 8013bac:	b090      	sub	sp, #64	@ 0x40
 8013bae:	af00      	add	r7, sp, #0
 8013bb0:	6078      	str	r0, [r7, #4]
 8013bb2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8013bb4:	f107 010c 	add.w	r1, r7, #12
 8013bb8:	1d3b      	adds	r3, r7, #4
 8013bba:	2200      	movs	r2, #0
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7fe fd37 	bl	8012630 <find_volume>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8013bc8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d11f      	bne.n	8013c10 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013bd0:	687a      	ldr	r2, [r7, #4]
 8013bd2:	f107 030c 	add.w	r3, r7, #12
 8013bd6:	4611      	mov	r1, r2
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7fe fc1d 	bl	8012418 <follow_path>
 8013bde:	4603      	mov	r3, r0
 8013be0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8013be4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d111      	bne.n	8013c10 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8013bec:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8013bf0:	b25b      	sxtb	r3, r3
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	da03      	bge.n	8013bfe <f_stat+0x54>
				res = FR_INVALID_NAME;
 8013bf6:	2306      	movs	r3, #6
 8013bf8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8013bfc:	e008      	b.n	8013c10 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d005      	beq.n	8013c10 <f_stat+0x66>
 8013c04:	f107 030c 	add.w	r3, r7, #12
 8013c08:	6839      	ldr	r1, [r7, #0]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fe fb0f 	bl	801222e <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8013c10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3740      	adds	r7, #64	@ 0x40
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b09e      	sub	sp, #120	@ 0x78
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013c24:	2300      	movs	r3, #0
 8013c26:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013c28:	f107 010c 	add.w	r1, r7, #12
 8013c2c:	1d3b      	adds	r3, r7, #4
 8013c2e:	2202      	movs	r2, #2
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7fe fcfd 	bl	8012630 <find_volume>
 8013c36:	4603      	mov	r3, r0
 8013c38:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8013c40:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	f040 808e 	bne.w	8013d66 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8013c50:	4611      	mov	r1, r2
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7fe fbe0 	bl	8012418 <follow_path>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013c5e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d108      	bne.n	8013c78 <f_unlink+0x5c>
 8013c66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8013c6a:	2102      	movs	r1, #2
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7fd fae9 	bl	8011244 <chk_lock>
 8013c72:	4603      	mov	r3, r0
 8013c74:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013c78:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d172      	bne.n	8013d66 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013c80:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013c84:	b25b      	sxtb	r3, r3
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	da03      	bge.n	8013c92 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013c8a:	2306      	movs	r3, #6
 8013c8c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8013c90:	e008      	b.n	8013ca4 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013c92:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013c96:	f003 0301 	and.w	r3, r3, #1
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d002      	beq.n	8013ca4 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013c9e:	2307      	movs	r3, #7
 8013ca0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 8013ca4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d134      	bne.n	8013d16 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013cb0:	4611      	mov	r1, r2
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7fe f97a 	bl	8011fac <ld_clust>
 8013cb8:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013cba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013cbe:	f003 0310 	and.w	r3, r3, #16
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d027      	beq.n	8013d16 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013cca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013ccc:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013cce:	f107 0310 	add.w	r3, r7, #16
 8013cd2:	2100      	movs	r1, #0
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7fd ffe2 	bl	8011c9e <dir_sdi>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8013ce0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d116      	bne.n	8013d16 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013ce8:	f107 0310 	add.w	r3, r7, #16
 8013cec:	2100      	movs	r1, #0
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7fe f99b 	bl	801202a <dir_read>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013cfa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d102      	bne.n	8013d08 <f_unlink+0xec>
 8013d02:	2307      	movs	r3, #7
 8013d04:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013d08:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013d0c:	2b04      	cmp	r3, #4
 8013d0e:	d102      	bne.n	8013d16 <f_unlink+0xfa>
 8013d10:	2300      	movs	r3, #0
 8013d12:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013d16:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d123      	bne.n	8013d66 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013d1e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7fe fa65 	bl	80121f2 <dir_remove>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013d2e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d10c      	bne.n	8013d50 <f_unlink+0x134>
 8013d36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d009      	beq.n	8013d50 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013d3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8013d40:	2200      	movs	r2, #0
 8013d42:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7fd fe79 	bl	8011a3c <remove_chain>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013d50:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d106      	bne.n	8013d66 <f_unlink+0x14a>
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7fd fc50 	bl	8011600 <sync_fs>
 8013d60:	4603      	mov	r3, r0
 8013d62:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013d66:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	3778      	adds	r7, #120	@ 0x78
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 8013d72:	b590      	push	{r4, r7, lr}
 8013d74:	b0a5      	sub	sp, #148	@ 0x94
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
 8013d7a:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 8013d7c:	463b      	mov	r3, r7
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7fe fbbb 	bl	80124fa <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 8013d84:	f107 0120 	add.w	r1, r7, #32
 8013d88:	1d3b      	adds	r3, r7, #4
 8013d8a:	2202      	movs	r2, #2
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7fe fc4f 	bl	8012630 <find_volume>
 8013d92:	4603      	mov	r3, r0
 8013d94:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 8013d98:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	f040 80db 	bne.w	8013f58 <f_rename+0x1e6>
		djo.obj.fs = fs;
 8013da2:	6a3b      	ldr	r3, [r7, #32]
 8013da4:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013dac:	4611      	mov	r1, r2
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7fe fb32 	bl	8012418 <follow_path>
 8013db4:	4603      	mov	r3, r0
 8013db6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8013dba:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d108      	bne.n	8013dd4 <f_rename+0x62>
 8013dc2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8013dc6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d002      	beq.n	8013dd4 <f_rename+0x62>
 8013dce:	2306      	movs	r3, #6
 8013dd0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 8013dd4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d108      	bne.n	8013dee <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 8013ddc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013de0:	2102      	movs	r1, #2
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7fd fa2e 	bl	8011244 <chk_lock>
 8013de8:	4603      	mov	r3, r0
 8013dea:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 8013dee:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	f040 80b0 	bne.w	8013f58 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 8013df8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013dfa:	f103 010b 	add.w	r1, r3, #11
 8013dfe:	f107 0308 	add.w	r3, r7, #8
 8013e02:	2215      	movs	r2, #21
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7fd f99f 	bl	8011148 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8013e0a:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8013e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013e12:	2230      	movs	r2, #48	@ 0x30
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7fd f997 	bl	8011148 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8013e1a:	683a      	ldr	r2, [r7, #0]
 8013e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013e20:	4611      	mov	r1, r2
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7fe faf8 	bl	8012418 <follow_path>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8013e2e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d10c      	bne.n	8013e50 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8013e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013e38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	d105      	bne.n	8013e4a <f_rename+0xd8>
 8013e3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013e40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d101      	bne.n	8013e4a <f_rename+0xd8>
 8013e46:	2304      	movs	r3, #4
 8013e48:	e000      	b.n	8013e4c <f_rename+0xda>
 8013e4a:	2308      	movs	r3, #8
 8013e4c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8013e50:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013e54:	2b04      	cmp	r3, #4
 8013e56:	d168      	bne.n	8013f2a <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 8013e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7fe f996 	bl	801218e <dir_register>
 8013e62:	4603      	mov	r3, r0
 8013e64:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 8013e68:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d15c      	bne.n	8013f2a <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 8013e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 8013e76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e7a:	f103 000d 	add.w	r0, r3, #13
 8013e7e:	f107 0308 	add.w	r3, r7, #8
 8013e82:	3302      	adds	r3, #2
 8013e84:	2213      	movs	r2, #19
 8013e86:	4619      	mov	r1, r3
 8013e88:	f7fd f95e 	bl	8011148 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 8013e8c:	7a3a      	ldrb	r2, [r7, #8]
 8013e8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013e92:	330b      	adds	r3, #11
 8013e94:	f042 0220 	orr.w	r2, r2, #32
 8013e98:	b2d2      	uxtb	r2, r2
 8013e9a:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 8013e9c:	6a3b      	ldr	r3, [r7, #32]
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8013ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013ea6:	330b      	adds	r3, #11
 8013ea8:	781b      	ldrb	r3, [r3, #0]
 8013eaa:	f003 0310 	and.w	r3, r3, #16
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d03b      	beq.n	8013f2a <f_rename+0x1b8>
 8013eb2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d037      	beq.n	8013f2a <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 8013eba:	6a3c      	ldr	r4, [r7, #32]
 8013ebc:	6a3b      	ldr	r3, [r7, #32]
 8013ebe:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7fe f872 	bl	8011fac <ld_clust>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	4619      	mov	r1, r3
 8013ecc:	4620      	mov	r0, r4
 8013ece:	f7fd fc05 	bl	80116dc <clust2sect>
 8013ed2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 8013ed6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d103      	bne.n	8013ee6 <f_rename+0x174>
								res = FR_INT_ERR;
 8013ede:	2302      	movs	r3, #2
 8013ee0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8013ee4:	e021      	b.n	8013f2a <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 8013ee6:	6a3b      	ldr	r3, [r7, #32]
 8013ee8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7fd fb59 	bl	80115a4 <move_window>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8013ef8:	6a3b      	ldr	r3, [r7, #32]
 8013efa:	3330      	adds	r3, #48	@ 0x30
 8013efc:	3320      	adds	r3, #32
 8013efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 8013f02:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d10f      	bne.n	8013f2a <f_rename+0x1b8>
 8013f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f0e:	3301      	adds	r3, #1
 8013f10:	781b      	ldrb	r3, [r3, #0]
 8013f12:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f14:	d109      	bne.n	8013f2a <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 8013f16:	6a3b      	ldr	r3, [r7, #32]
 8013f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013f1a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fe f863 	bl	8011fea <st_clust>
									fs->wflag = 1;
 8013f24:	6a3b      	ldr	r3, [r7, #32]
 8013f26:	2201      	movs	r2, #1
 8013f28:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 8013f2a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d112      	bne.n	8013f58 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 8013f32:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7fe f95b 	bl	80121f2 <dir_remove>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 8013f42:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d106      	bne.n	8013f58 <f_rename+0x1e6>
					res = sync_fs(fs);
 8013f4a:	6a3b      	ldr	r3, [r7, #32]
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f7fd fb57 	bl	8011600 <sync_fs>
 8013f52:	4603      	mov	r3, r0
 8013f54:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013f58:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3794      	adds	r7, #148	@ 0x94
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd90      	pop	{r4, r7, pc}

08013f64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013f64:	b480      	push	{r7}
 8013f66:	b087      	sub	sp, #28
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	4613      	mov	r3, r2
 8013f70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013f72:	2301      	movs	r3, #1
 8013f74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013f76:	2300      	movs	r3, #0
 8013f78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8013ff8 <FATFS_LinkDriverEx+0x94>)
 8013f7c:	7a5b      	ldrb	r3, [r3, #9]
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d131      	bne.n	8013fe8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013f84:	4b1c      	ldr	r3, [pc, #112]	@ (8013ff8 <FATFS_LinkDriverEx+0x94>)
 8013f86:	7a5b      	ldrb	r3, [r3, #9]
 8013f88:	b2db      	uxtb	r3, r3
 8013f8a:	461a      	mov	r2, r3
 8013f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8013ff8 <FATFS_LinkDriverEx+0x94>)
 8013f8e:	2100      	movs	r1, #0
 8013f90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013f92:	4b19      	ldr	r3, [pc, #100]	@ (8013ff8 <FATFS_LinkDriverEx+0x94>)
 8013f94:	7a5b      	ldrb	r3, [r3, #9]
 8013f96:	b2db      	uxtb	r3, r3
 8013f98:	4a17      	ldr	r2, [pc, #92]	@ (8013ff8 <FATFS_LinkDriverEx+0x94>)
 8013f9a:	009b      	lsls	r3, r3, #2
 8013f9c:	4413      	add	r3, r2
 8013f9e:	68fa      	ldr	r2, [r7, #12]
 8013fa0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013fa2:	4b15      	ldr	r3, [pc, #84]	@ (8013ff8 <FATFS_LinkDriverEx+0x94>)
 8013fa4:	7a5b      	ldrb	r3, [r3, #9]
 8013fa6:	b2db      	uxtb	r3, r3
 8013fa8:	461a      	mov	r2, r3
 8013faa:	4b13      	ldr	r3, [pc, #76]	@ (8013ff8 <FATFS_LinkDriverEx+0x94>)
 8013fac:	4413      	add	r3, r2
 8013fae:	79fa      	ldrb	r2, [r7, #7]
 8013fb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013fb2:	4b11      	ldr	r3, [pc, #68]	@ (8013ff8 <FATFS_LinkDriverEx+0x94>)
 8013fb4:	7a5b      	ldrb	r3, [r3, #9]
 8013fb6:	b2db      	uxtb	r3, r3
 8013fb8:	1c5a      	adds	r2, r3, #1
 8013fba:	b2d1      	uxtb	r1, r2
 8013fbc:	4a0e      	ldr	r2, [pc, #56]	@ (8013ff8 <FATFS_LinkDriverEx+0x94>)
 8013fbe:	7251      	strb	r1, [r2, #9]
 8013fc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013fc2:	7dbb      	ldrb	r3, [r7, #22]
 8013fc4:	3330      	adds	r3, #48	@ 0x30
 8013fc6:	b2da      	uxtb	r2, r3
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	3301      	adds	r3, #1
 8013fd0:	223a      	movs	r2, #58	@ 0x3a
 8013fd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	3302      	adds	r3, #2
 8013fd8:	222f      	movs	r2, #47	@ 0x2f
 8013fda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	3303      	adds	r3, #3
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	371c      	adds	r7, #28
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff4:	4770      	bx	lr
 8013ff6:	bf00      	nop
 8013ff8:	20000928 	.word	0x20000928

08013ffc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014006:	2200      	movs	r2, #0
 8014008:	6839      	ldr	r1, [r7, #0]
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f7ff ffaa 	bl	8013f64 <FATFS_LinkDriverEx>
 8014010:	4603      	mov	r3, r0
}
 8014012:	4618      	mov	r0, r3
 8014014:	3708      	adds	r7, #8
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
	...

0801401c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8014020:	2201      	movs	r2, #1
 8014022:	490e      	ldr	r1, [pc, #56]	@ (801405c <MX_USB_HOST_Init+0x40>)
 8014024:	480e      	ldr	r0, [pc, #56]	@ (8014060 <MX_USB_HOST_Init+0x44>)
 8014026:	f7fb fa89 	bl	800f53c <USBH_Init>
 801402a:	4603      	mov	r3, r0
 801402c:	2b00      	cmp	r3, #0
 801402e:	d001      	beq.n	8014034 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8014030:	f7ee fe0a 	bl	8002c48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8014034:	490b      	ldr	r1, [pc, #44]	@ (8014064 <MX_USB_HOST_Init+0x48>)
 8014036:	480a      	ldr	r0, [pc, #40]	@ (8014060 <MX_USB_HOST_Init+0x44>)
 8014038:	f7fb fb2d 	bl	800f696 <USBH_RegisterClass>
 801403c:	4603      	mov	r3, r0
 801403e:	2b00      	cmp	r3, #0
 8014040:	d001      	beq.n	8014046 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8014042:	f7ee fe01 	bl	8002c48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8014046:	4806      	ldr	r0, [pc, #24]	@ (8014060 <MX_USB_HOST_Init+0x44>)
 8014048:	f7fb fbb1 	bl	800f7ae <USBH_Start>
 801404c:	4603      	mov	r3, r0
 801404e:	2b00      	cmp	r3, #0
 8014050:	d001      	beq.n	8014056 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8014052:	f7ee fdf9 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8014056:	bf00      	nop
 8014058:	bd80      	pop	{r7, pc}
 801405a:	bf00      	nop
 801405c:	0801407d 	.word	0x0801407d
 8014060:	20000934 	.word	0x20000934
 8014064:	2000000c 	.word	0x2000000c

08014068 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 801406c:	4802      	ldr	r0, [pc, #8]	@ (8014078 <MX_USB_HOST_Process+0x10>)
 801406e:	f7fb fbaf 	bl	800f7d0 <USBH_Process>
}
 8014072:	bf00      	nop
 8014074:	bd80      	pop	{r7, pc}
 8014076:	bf00      	nop
 8014078:	20000934 	.word	0x20000934

0801407c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801407c:	b480      	push	{r7}
 801407e:	b083      	sub	sp, #12
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	460b      	mov	r3, r1
 8014086:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8014088:	78fb      	ldrb	r3, [r7, #3]
 801408a:	3b01      	subs	r3, #1
 801408c:	2b04      	cmp	r3, #4
 801408e:	d819      	bhi.n	80140c4 <USBH_UserProcess+0x48>
 8014090:	a201      	add	r2, pc, #4	@ (adr r2, 8014098 <USBH_UserProcess+0x1c>)
 8014092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014096:	bf00      	nop
 8014098:	080140c5 	.word	0x080140c5
 801409c:	080140b5 	.word	0x080140b5
 80140a0:	080140c5 	.word	0x080140c5
 80140a4:	080140bd 	.word	0x080140bd
 80140a8:	080140ad 	.word	0x080140ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80140ac:	4b09      	ldr	r3, [pc, #36]	@ (80140d4 <USBH_UserProcess+0x58>)
 80140ae:	2203      	movs	r2, #3
 80140b0:	701a      	strb	r2, [r3, #0]
  break;
 80140b2:	e008      	b.n	80140c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80140b4:	4b07      	ldr	r3, [pc, #28]	@ (80140d4 <USBH_UserProcess+0x58>)
 80140b6:	2202      	movs	r2, #2
 80140b8:	701a      	strb	r2, [r3, #0]
  break;
 80140ba:	e004      	b.n	80140c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80140bc:	4b05      	ldr	r3, [pc, #20]	@ (80140d4 <USBH_UserProcess+0x58>)
 80140be:	2201      	movs	r2, #1
 80140c0:	701a      	strb	r2, [r3, #0]
  break;
 80140c2:	e000      	b.n	80140c6 <USBH_UserProcess+0x4a>

  default:
  break;
 80140c4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80140c6:	bf00      	nop
 80140c8:	370c      	adds	r7, #12
 80140ca:	46bd      	mov	sp, r7
 80140cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d0:	4770      	bx	lr
 80140d2:	bf00      	nop
 80140d4:	20000d0c 	.word	0x20000d0c

080140d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b08a      	sub	sp, #40	@ 0x28
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80140e0:	f107 0314 	add.w	r3, r7, #20
 80140e4:	2200      	movs	r2, #0
 80140e6:	601a      	str	r2, [r3, #0]
 80140e8:	605a      	str	r2, [r3, #4]
 80140ea:	609a      	str	r2, [r3, #8]
 80140ec:	60da      	str	r2, [r3, #12]
 80140ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80140f8:	d147      	bne.n	801418a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80140fa:	2300      	movs	r3, #0
 80140fc:	613b      	str	r3, [r7, #16]
 80140fe:	4b25      	ldr	r3, [pc, #148]	@ (8014194 <HAL_HCD_MspInit+0xbc>)
 8014100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014102:	4a24      	ldr	r2, [pc, #144]	@ (8014194 <HAL_HCD_MspInit+0xbc>)
 8014104:	f043 0301 	orr.w	r3, r3, #1
 8014108:	6313      	str	r3, [r2, #48]	@ 0x30
 801410a:	4b22      	ldr	r3, [pc, #136]	@ (8014194 <HAL_HCD_MspInit+0xbc>)
 801410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801410e:	f003 0301 	and.w	r3, r3, #1
 8014112:	613b      	str	r3, [r7, #16]
 8014114:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8014116:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801411a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801411c:	2302      	movs	r3, #2
 801411e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014120:	2300      	movs	r3, #0
 8014122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014124:	2303      	movs	r3, #3
 8014126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014128:	230a      	movs	r3, #10
 801412a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801412c:	f107 0314 	add.w	r3, r7, #20
 8014130:	4619      	mov	r1, r3
 8014132:	4819      	ldr	r0, [pc, #100]	@ (8014198 <HAL_HCD_MspInit+0xc0>)
 8014134:	f7f1 f9f2 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8014138:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801413c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801413e:	2302      	movs	r3, #2
 8014140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014142:	2300      	movs	r3, #0
 8014144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8014146:	f107 0314 	add.w	r3, r7, #20
 801414a:	4619      	mov	r1, r3
 801414c:	4812      	ldr	r0, [pc, #72]	@ (8014198 <HAL_HCD_MspInit+0xc0>)
 801414e:	f7f1 f9e5 	bl	800551c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014152:	4b10      	ldr	r3, [pc, #64]	@ (8014194 <HAL_HCD_MspInit+0xbc>)
 8014154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014156:	4a0f      	ldr	r2, [pc, #60]	@ (8014194 <HAL_HCD_MspInit+0xbc>)
 8014158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801415c:	6353      	str	r3, [r2, #52]	@ 0x34
 801415e:	2300      	movs	r3, #0
 8014160:	60fb      	str	r3, [r7, #12]
 8014162:	4b0c      	ldr	r3, [pc, #48]	@ (8014194 <HAL_HCD_MspInit+0xbc>)
 8014164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014166:	4a0b      	ldr	r2, [pc, #44]	@ (8014194 <HAL_HCD_MspInit+0xbc>)
 8014168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801416c:	6453      	str	r3, [r2, #68]	@ 0x44
 801416e:	4b09      	ldr	r3, [pc, #36]	@ (8014194 <HAL_HCD_MspInit+0xbc>)
 8014170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014176:	60fb      	str	r3, [r7, #12]
 8014178:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801417a:	2200      	movs	r2, #0
 801417c:	2100      	movs	r1, #0
 801417e:	2043      	movs	r0, #67	@ 0x43
 8014180:	f7ef fd84 	bl	8003c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014184:	2043      	movs	r0, #67	@ 0x43
 8014186:	f7ef fd9d 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801418a:	bf00      	nop
 801418c:	3728      	adds	r7, #40	@ 0x28
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop
 8014194:	40023800 	.word	0x40023800
 8014198:	40020000 	.word	0x40020000

0801419c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80141aa:	4618      	mov	r0, r3
 80141ac:	f7fb fee7 	bl	800ff7e <USBH_LL_IncTimer>
}
 80141b0:	bf00      	nop
 80141b2:	3708      	adds	r7, #8
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}

080141b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7fb ff1f 	bl	801000a <USBH_LL_Connect>
}
 80141cc:	bf00      	nop
 80141ce:	3708      	adds	r7, #8
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd80      	pop	{r7, pc}

080141d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b082      	sub	sp, #8
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80141e2:	4618      	mov	r0, r3
 80141e4:	f7fb ff28 	bl	8010038 <USBH_LL_Disconnect>
}
 80141e8:	bf00      	nop
 80141ea:	3708      	adds	r7, #8
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80141f0:	b480      	push	{r7}
 80141f2:	b083      	sub	sp, #12
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	460b      	mov	r3, r1
 80141fa:	70fb      	strb	r3, [r7, #3]
 80141fc:	4613      	mov	r3, r2
 80141fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8014200:	bf00      	nop
 8014202:	370c      	adds	r7, #12
 8014204:	46bd      	mov	sp, r7
 8014206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420a:	4770      	bx	lr

0801420c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801421a:	4618      	mov	r0, r3
 801421c:	f7fb fed9 	bl	800ffd2 <USBH_LL_PortEnabled>
}
 8014220:	bf00      	nop
 8014222:	3708      	adds	r7, #8
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}

08014228 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b082      	sub	sp, #8
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014236:	4618      	mov	r0, r3
 8014238:	f7fb fed9 	bl	800ffee <USBH_LL_PortDisabled>
}
 801423c:	bf00      	nop
 801423e:	3708      	adds	r7, #8
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}

08014244 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b082      	sub	sp, #8
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8014252:	2b01      	cmp	r3, #1
 8014254:	d12a      	bne.n	80142ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8014256:	4a18      	ldr	r2, [pc, #96]	@ (80142b8 <USBH_LL_Init+0x74>)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	4a15      	ldr	r2, [pc, #84]	@ (80142b8 <USBH_LL_Init+0x74>)
 8014262:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014266:	4b14      	ldr	r3, [pc, #80]	@ (80142b8 <USBH_LL_Init+0x74>)
 8014268:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801426c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801426e:	4b12      	ldr	r3, [pc, #72]	@ (80142b8 <USBH_LL_Init+0x74>)
 8014270:	2208      	movs	r2, #8
 8014272:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8014274:	4b10      	ldr	r3, [pc, #64]	@ (80142b8 <USBH_LL_Init+0x74>)
 8014276:	2201      	movs	r2, #1
 8014278:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801427a:	4b0f      	ldr	r3, [pc, #60]	@ (80142b8 <USBH_LL_Init+0x74>)
 801427c:	2200      	movs	r2, #0
 801427e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8014280:	4b0d      	ldr	r3, [pc, #52]	@ (80142b8 <USBH_LL_Init+0x74>)
 8014282:	2202      	movs	r2, #2
 8014284:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014286:	4b0c      	ldr	r3, [pc, #48]	@ (80142b8 <USBH_LL_Init+0x74>)
 8014288:	2200      	movs	r2, #0
 801428a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801428c:	480a      	ldr	r0, [pc, #40]	@ (80142b8 <USBH_LL_Init+0x74>)
 801428e:	f7f1 fb22 	bl	80058d6 <HAL_HCD_Init>
 8014292:	4603      	mov	r3, r0
 8014294:	2b00      	cmp	r3, #0
 8014296:	d001      	beq.n	801429c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8014298:	f7ee fcd6 	bl	8002c48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801429c:	4806      	ldr	r0, [pc, #24]	@ (80142b8 <USBH_LL_Init+0x74>)
 801429e:	f7f1 ff83 	bl	80061a8 <HAL_HCD_GetCurrentFrame>
 80142a2:	4603      	mov	r3, r0
 80142a4:	4619      	mov	r1, r3
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f7fb fe5a 	bl	800ff60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80142ac:	2300      	movs	r3, #0
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3708      	adds	r7, #8
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	20000d10 	.word	0x20000d10

080142bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142c4:	2300      	movs	r3, #0
 80142c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80142c8:	2300      	movs	r3, #0
 80142ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7f1 fef0 	bl	80060b8 <HAL_HCD_Start>
 80142d8:	4603      	mov	r3, r0
 80142da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80142dc:	7bfb      	ldrb	r3, [r7, #15]
 80142de:	4618      	mov	r0, r3
 80142e0:	f000 f95e 	bl	80145a0 <USBH_Get_USB_Status>
 80142e4:	4603      	mov	r3, r0
 80142e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3710      	adds	r7, #16
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}

080142f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80142f2:	b580      	push	{r7, lr}
 80142f4:	b084      	sub	sp, #16
 80142f6:	af00      	add	r7, sp, #0
 80142f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142fa:	2300      	movs	r3, #0
 80142fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80142fe:	2300      	movs	r3, #0
 8014300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8014308:	4618      	mov	r0, r3
 801430a:	f7f1 fef8 	bl	80060fe <HAL_HCD_Stop>
 801430e:	4603      	mov	r3, r0
 8014310:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014312:	7bfb      	ldrb	r3, [r7, #15]
 8014314:	4618      	mov	r0, r3
 8014316:	f000 f943 	bl	80145a0 <USBH_Get_USB_Status>
 801431a:	4603      	mov	r3, r0
 801431c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801431e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014320:	4618      	mov	r0, r3
 8014322:	3710      	adds	r7, #16
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}

08014328 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b084      	sub	sp, #16
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8014330:	2301      	movs	r3, #1
 8014332:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801433a:	4618      	mov	r0, r3
 801433c:	f7f1 ff42 	bl	80061c4 <HAL_HCD_GetCurrentSpeed>
 8014340:	4603      	mov	r3, r0
 8014342:	2b02      	cmp	r3, #2
 8014344:	d00c      	beq.n	8014360 <USBH_LL_GetSpeed+0x38>
 8014346:	2b02      	cmp	r3, #2
 8014348:	d80d      	bhi.n	8014366 <USBH_LL_GetSpeed+0x3e>
 801434a:	2b00      	cmp	r3, #0
 801434c:	d002      	beq.n	8014354 <USBH_LL_GetSpeed+0x2c>
 801434e:	2b01      	cmp	r3, #1
 8014350:	d003      	beq.n	801435a <USBH_LL_GetSpeed+0x32>
 8014352:	e008      	b.n	8014366 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8014354:	2300      	movs	r3, #0
 8014356:	73fb      	strb	r3, [r7, #15]
    break;
 8014358:	e008      	b.n	801436c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801435a:	2301      	movs	r3, #1
 801435c:	73fb      	strb	r3, [r7, #15]
    break;
 801435e:	e005      	b.n	801436c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8014360:	2302      	movs	r3, #2
 8014362:	73fb      	strb	r3, [r7, #15]
    break;
 8014364:	e002      	b.n	801436c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8014366:	2301      	movs	r3, #1
 8014368:	73fb      	strb	r3, [r7, #15]
    break;
 801436a:	bf00      	nop
  }
  return  speed;
 801436c:	7bfb      	ldrb	r3, [r7, #15]
}
 801436e:	4618      	mov	r0, r3
 8014370:	3710      	adds	r7, #16
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}

08014376 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8014376:	b580      	push	{r7, lr}
 8014378:	b084      	sub	sp, #16
 801437a:	af00      	add	r7, sp, #0
 801437c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801437e:	2300      	movs	r3, #0
 8014380:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014382:	2300      	movs	r3, #0
 8014384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801438c:	4618      	mov	r0, r3
 801438e:	f7f1 fed3 	bl	8006138 <HAL_HCD_ResetPort>
 8014392:	4603      	mov	r3, r0
 8014394:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014396:	7bfb      	ldrb	r3, [r7, #15]
 8014398:	4618      	mov	r0, r3
 801439a:	f000 f901 	bl	80145a0 <USBH_Get_USB_Status>
 801439e:	4603      	mov	r3, r0
 80143a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80143a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80143a4:	4618      	mov	r0, r3
 80143a6:	3710      	adds	r7, #16
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}

080143ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	460b      	mov	r3, r1
 80143b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80143be:	78fa      	ldrb	r2, [r7, #3]
 80143c0:	4611      	mov	r1, r2
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7f1 fedb 	bl	800617e <HAL_HCD_HC_GetXferCount>
 80143c8:	4603      	mov	r3, r0
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3708      	adds	r7, #8
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}

080143d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80143d2:	b590      	push	{r4, r7, lr}
 80143d4:	b089      	sub	sp, #36	@ 0x24
 80143d6:	af04      	add	r7, sp, #16
 80143d8:	6078      	str	r0, [r7, #4]
 80143da:	4608      	mov	r0, r1
 80143dc:	4611      	mov	r1, r2
 80143de:	461a      	mov	r2, r3
 80143e0:	4603      	mov	r3, r0
 80143e2:	70fb      	strb	r3, [r7, #3]
 80143e4:	460b      	mov	r3, r1
 80143e6:	70bb      	strb	r3, [r7, #2]
 80143e8:	4613      	mov	r3, r2
 80143ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143ec:	2300      	movs	r3, #0
 80143ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80143f0:	2300      	movs	r3, #0
 80143f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80143fa:	787c      	ldrb	r4, [r7, #1]
 80143fc:	78ba      	ldrb	r2, [r7, #2]
 80143fe:	78f9      	ldrb	r1, [r7, #3]
 8014400:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014402:	9302      	str	r3, [sp, #8]
 8014404:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014408:	9301      	str	r3, [sp, #4]
 801440a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801440e:	9300      	str	r3, [sp, #0]
 8014410:	4623      	mov	r3, r4
 8014412:	f7f1 fac7 	bl	80059a4 <HAL_HCD_HC_Init>
 8014416:	4603      	mov	r3, r0
 8014418:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801441a:	7bfb      	ldrb	r3, [r7, #15]
 801441c:	4618      	mov	r0, r3
 801441e:	f000 f8bf 	bl	80145a0 <USBH_Get_USB_Status>
 8014422:	4603      	mov	r3, r0
 8014424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014426:	7bbb      	ldrb	r3, [r7, #14]
}
 8014428:	4618      	mov	r0, r3
 801442a:	3714      	adds	r7, #20
 801442c:	46bd      	mov	sp, r7
 801442e:	bd90      	pop	{r4, r7, pc}

08014430 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b084      	sub	sp, #16
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	460b      	mov	r3, r1
 801443a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801443c:	2300      	movs	r3, #0
 801443e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014440:	2300      	movs	r3, #0
 8014442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801444a:	78fa      	ldrb	r2, [r7, #3]
 801444c:	4611      	mov	r1, r2
 801444e:	4618      	mov	r0, r3
 8014450:	f7f1 fb60 	bl	8005b14 <HAL_HCD_HC_Halt>
 8014454:	4603      	mov	r3, r0
 8014456:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014458:	7bfb      	ldrb	r3, [r7, #15]
 801445a:	4618      	mov	r0, r3
 801445c:	f000 f8a0 	bl	80145a0 <USBH_Get_USB_Status>
 8014460:	4603      	mov	r3, r0
 8014462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014464:	7bbb      	ldrb	r3, [r7, #14]
}
 8014466:	4618      	mov	r0, r3
 8014468:	3710      	adds	r7, #16
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}

0801446e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801446e:	b590      	push	{r4, r7, lr}
 8014470:	b089      	sub	sp, #36	@ 0x24
 8014472:	af04      	add	r7, sp, #16
 8014474:	6078      	str	r0, [r7, #4]
 8014476:	4608      	mov	r0, r1
 8014478:	4611      	mov	r1, r2
 801447a:	461a      	mov	r2, r3
 801447c:	4603      	mov	r3, r0
 801447e:	70fb      	strb	r3, [r7, #3]
 8014480:	460b      	mov	r3, r1
 8014482:	70bb      	strb	r3, [r7, #2]
 8014484:	4613      	mov	r3, r2
 8014486:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014488:	2300      	movs	r3, #0
 801448a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801448c:	2300      	movs	r3, #0
 801448e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8014496:	787c      	ldrb	r4, [r7, #1]
 8014498:	78ba      	ldrb	r2, [r7, #2]
 801449a:	78f9      	ldrb	r1, [r7, #3]
 801449c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80144a0:	9303      	str	r3, [sp, #12]
 80144a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80144a4:	9302      	str	r3, [sp, #8]
 80144a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144a8:	9301      	str	r3, [sp, #4]
 80144aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80144ae:	9300      	str	r3, [sp, #0]
 80144b0:	4623      	mov	r3, r4
 80144b2:	f7f1 fb53 	bl	8005b5c <HAL_HCD_HC_SubmitRequest>
 80144b6:	4603      	mov	r3, r0
 80144b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80144ba:	7bfb      	ldrb	r3, [r7, #15]
 80144bc:	4618      	mov	r0, r3
 80144be:	f000 f86f 	bl	80145a0 <USBH_Get_USB_Status>
 80144c2:	4603      	mov	r3, r0
 80144c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80144c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3714      	adds	r7, #20
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd90      	pop	{r4, r7, pc}

080144d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
 80144d8:	460b      	mov	r3, r1
 80144da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80144e2:	78fa      	ldrb	r2, [r7, #3]
 80144e4:	4611      	mov	r1, r2
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7f1 fe34 	bl	8006154 <HAL_HCD_HC_GetURBState>
 80144ec:	4603      	mov	r3, r0
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3708      	adds	r7, #8
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}

080144f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80144f6:	b580      	push	{r7, lr}
 80144f8:	b082      	sub	sp, #8
 80144fa:	af00      	add	r7, sp, #0
 80144fc:	6078      	str	r0, [r7, #4]
 80144fe:	460b      	mov	r3, r1
 8014500:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8014508:	2b01      	cmp	r3, #1
 801450a:	d103      	bne.n	8014514 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801450c:	78fb      	ldrb	r3, [r7, #3]
 801450e:	4618      	mov	r0, r3
 8014510:	f000 f872 	bl	80145f8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014514:	20c8      	movs	r0, #200	@ 0xc8
 8014516:	f7ef fadd 	bl	8003ad4 <HAL_Delay>
  return USBH_OK;
 801451a:	2300      	movs	r3, #0
}
 801451c:	4618      	mov	r0, r3
 801451e:	3708      	adds	r7, #8
 8014520:	46bd      	mov	sp, r7
 8014522:	bd80      	pop	{r7, pc}

08014524 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014524:	b480      	push	{r7}
 8014526:	b085      	sub	sp, #20
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	460b      	mov	r3, r1
 801452e:	70fb      	strb	r3, [r7, #3]
 8014530:	4613      	mov	r3, r2
 8014532:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801453a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801453c:	78fa      	ldrb	r2, [r7, #3]
 801453e:	68f9      	ldr	r1, [r7, #12]
 8014540:	4613      	mov	r3, r2
 8014542:	011b      	lsls	r3, r3, #4
 8014544:	1a9b      	subs	r3, r3, r2
 8014546:	009b      	lsls	r3, r3, #2
 8014548:	440b      	add	r3, r1
 801454a:	3317      	adds	r3, #23
 801454c:	781b      	ldrb	r3, [r3, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d00a      	beq.n	8014568 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8014552:	78fa      	ldrb	r2, [r7, #3]
 8014554:	68f9      	ldr	r1, [r7, #12]
 8014556:	4613      	mov	r3, r2
 8014558:	011b      	lsls	r3, r3, #4
 801455a:	1a9b      	subs	r3, r3, r2
 801455c:	009b      	lsls	r3, r3, #2
 801455e:	440b      	add	r3, r1
 8014560:	333c      	adds	r3, #60	@ 0x3c
 8014562:	78ba      	ldrb	r2, [r7, #2]
 8014564:	701a      	strb	r2, [r3, #0]
 8014566:	e009      	b.n	801457c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8014568:	78fa      	ldrb	r2, [r7, #3]
 801456a:	68f9      	ldr	r1, [r7, #12]
 801456c:	4613      	mov	r3, r2
 801456e:	011b      	lsls	r3, r3, #4
 8014570:	1a9b      	subs	r3, r3, r2
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	440b      	add	r3, r1
 8014576:	333d      	adds	r3, #61	@ 0x3d
 8014578:	78ba      	ldrb	r2, [r7, #2]
 801457a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801457c:	2300      	movs	r3, #0
}
 801457e:	4618      	mov	r0, r3
 8014580:	3714      	adds	r7, #20
 8014582:	46bd      	mov	sp, r7
 8014584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014588:	4770      	bx	lr

0801458a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801458a:	b580      	push	{r7, lr}
 801458c:	b082      	sub	sp, #8
 801458e:	af00      	add	r7, sp, #0
 8014590:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f7ef fa9e 	bl	8003ad4 <HAL_Delay>
}
 8014598:	bf00      	nop
 801459a:	3708      	adds	r7, #8
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80145a0:	b480      	push	{r7}
 80145a2:	b085      	sub	sp, #20
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	4603      	mov	r3, r0
 80145a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80145aa:	2300      	movs	r3, #0
 80145ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80145ae:	79fb      	ldrb	r3, [r7, #7]
 80145b0:	2b03      	cmp	r3, #3
 80145b2:	d817      	bhi.n	80145e4 <USBH_Get_USB_Status+0x44>
 80145b4:	a201      	add	r2, pc, #4	@ (adr r2, 80145bc <USBH_Get_USB_Status+0x1c>)
 80145b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145ba:	bf00      	nop
 80145bc:	080145cd 	.word	0x080145cd
 80145c0:	080145d3 	.word	0x080145d3
 80145c4:	080145d9 	.word	0x080145d9
 80145c8:	080145df 	.word	0x080145df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80145cc:	2300      	movs	r3, #0
 80145ce:	73fb      	strb	r3, [r7, #15]
    break;
 80145d0:	e00b      	b.n	80145ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80145d2:	2302      	movs	r3, #2
 80145d4:	73fb      	strb	r3, [r7, #15]
    break;
 80145d6:	e008      	b.n	80145ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80145d8:	2301      	movs	r3, #1
 80145da:	73fb      	strb	r3, [r7, #15]
    break;
 80145dc:	e005      	b.n	80145ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80145de:	2302      	movs	r3, #2
 80145e0:	73fb      	strb	r3, [r7, #15]
    break;
 80145e2:	e002      	b.n	80145ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80145e4:	2302      	movs	r3, #2
 80145e6:	73fb      	strb	r3, [r7, #15]
    break;
 80145e8:	bf00      	nop
  }
  return usb_status;
 80145ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80145ec:	4618      	mov	r0, r3
 80145ee:	3714      	adds	r7, #20
 80145f0:	46bd      	mov	sp, r7
 80145f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f6:	4770      	bx	lr

080145f8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b084      	sub	sp, #16
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	4603      	mov	r3, r0
 8014600:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8014602:	79fb      	ldrb	r3, [r7, #7]
 8014604:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8014606:	79fb      	ldrb	r3, [r7, #7]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d102      	bne.n	8014612 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801460c:	2300      	movs	r3, #0
 801460e:	73fb      	strb	r3, [r7, #15]
 8014610:	e001      	b.n	8014616 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8014612:	2301      	movs	r3, #1
 8014614:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 8014616:	7bfb      	ldrb	r3, [r7, #15]
 8014618:	461a      	mov	r2, r3
 801461a:	2104      	movs	r1, #4
 801461c:	4803      	ldr	r0, [pc, #12]	@ (801462c <MX_DriverVbusFS+0x34>)
 801461e:	f7f1 f941 	bl	80058a4 <HAL_GPIO_WritePin>
}
 8014622:	bf00      	nop
 8014624:	3710      	adds	r7, #16
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	40020400 	.word	0x40020400

08014630 <_ZdlPvj>:
 8014630:	f000 b9bc 	b.w	80149ac <_ZdlPv>

08014634 <_Znwj>:
 8014634:	2801      	cmp	r0, #1
 8014636:	bf38      	it	cc
 8014638:	2001      	movcc	r0, #1
 801463a:	b510      	push	{r4, lr}
 801463c:	4604      	mov	r4, r0
 801463e:	4620      	mov	r0, r4
 8014640:	f000 f9c6 	bl	80149d0 <malloc>
 8014644:	b100      	cbz	r0, 8014648 <_Znwj+0x14>
 8014646:	bd10      	pop	{r4, pc}
 8014648:	f000 f9b2 	bl	80149b0 <_ZSt15get_new_handlerv>
 801464c:	b908      	cbnz	r0, 8014652 <_Znwj+0x1e>
 801464e:	f000 f9b7 	bl	80149c0 <abort>
 8014652:	4780      	blx	r0
 8014654:	e7f3      	b.n	801463e <_Znwj+0xa>

08014656 <_ZNSaIcEC1Ev>:
 8014656:	4770      	bx	lr

08014658 <_ZNSaIcED1Ev>:
 8014658:	4770      	bx	lr

0801465a <_ZSt17__throw_bad_allocv>:
 801465a:	b508      	push	{r3, lr}
 801465c:	f000 f9b0 	bl	80149c0 <abort>

08014660 <_ZSt28__throw_bad_array_new_lengthv>:
 8014660:	b508      	push	{r3, lr}
 8014662:	f000 f9ad 	bl	80149c0 <abort>

08014666 <_ZSt19__throw_logic_errorPKc>:
 8014666:	b508      	push	{r3, lr}
 8014668:	f000 f9aa 	bl	80149c0 <abort>

0801466c <_ZSt20__throw_length_errorPKc>:
 801466c:	b508      	push	{r3, lr}
 801466e:	f000 f9a7 	bl	80149c0 <abort>

08014672 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8014672:	b10a      	cbz	r2, 8014678 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8014674:	f000 bcb5 	b.w	8014fe2 <memcpy>
 8014678:	4770      	bx	lr

0801467a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 801467a:	f850 3b08 	ldr.w	r3, [r0], #8
 801467e:	1a1b      	subs	r3, r3, r0
 8014680:	4258      	negs	r0, r3
 8014682:	4158      	adcs	r0, r3
 8014684:	4770      	bx	lr
	...

08014688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8014688:	b508      	push	{r3, lr}
 801468a:	680b      	ldr	r3, [r1, #0]
 801468c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014690:	d302      	bcc.n	8014698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8014692:	480d      	ldr	r0, [pc, #52]	@ (80146c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8014694:	f7ff ffea 	bl	801466c <_ZSt20__throw_length_errorPKc>
 8014698:	4293      	cmp	r3, r2
 801469a:	d90b      	bls.n	80146b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801469c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80146a0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80146a4:	d206      	bcs.n	80146b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80146a6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80146aa:	bf2a      	itet	cs
 80146ac:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80146b0:	6008      	strcc	r0, [r1, #0]
 80146b2:	600b      	strcs	r3, [r1, #0]
 80146b4:	6808      	ldr	r0, [r1, #0]
 80146b6:	3001      	adds	r0, #1
 80146b8:	d501      	bpl.n	80146be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80146ba:	f7ff ffce 	bl	801465a <_ZSt17__throw_bad_allocv>
 80146be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80146c2:	f7ff bfb7 	b.w	8014634 <_Znwj>
 80146c6:	bf00      	nop
 80146c8:	080161b8 	.word	0x080161b8

080146cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80146cc:	b510      	push	{r4, lr}
 80146ce:	4604      	mov	r4, r0
 80146d0:	f7ff ffd3 	bl	801467a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80146d4:	b920      	cbnz	r0, 80146e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 80146d6:	6820      	ldr	r0, [r4, #0]
 80146d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146dc:	f000 b966 	b.w	80149ac <_ZdlPv>
 80146e0:	bd10      	pop	{r4, pc}

080146e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80146e2:	6840      	ldr	r0, [r0, #4]
 80146e4:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80146e8:	3901      	subs	r1, #1
 80146ea:	1a09      	subs	r1, r1, r0
 80146ec:	4291      	cmp	r1, r2
 80146ee:	b508      	push	{r3, lr}
 80146f0:	d202      	bcs.n	80146f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80146f2:	4618      	mov	r0, r3
 80146f4:	f7ff ffba 	bl	801466c <_ZSt20__throw_length_errorPKc>
 80146f8:	bd08      	pop	{r3, pc}

080146fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80146fa:	6803      	ldr	r3, [r0, #0]
 80146fc:	428b      	cmp	r3, r1
 80146fe:	d806      	bhi.n	801470e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8014700:	6842      	ldr	r2, [r0, #4]
 8014702:	4413      	add	r3, r2
 8014704:	4299      	cmp	r1, r3
 8014706:	bf94      	ite	ls
 8014708:	2000      	movls	r0, #0
 801470a:	2001      	movhi	r0, #1
 801470c:	4770      	bx	lr
 801470e:	2001      	movs	r0, #1
 8014710:	4770      	bx	lr

08014712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8014712:	2a01      	cmp	r2, #1
 8014714:	b410      	push	{r4}
 8014716:	d104      	bne.n	8014722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8014718:	780a      	ldrb	r2, [r1, #0]
 801471a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801471e:	7002      	strb	r2, [r0, #0]
 8014720:	4770      	bx	lr
 8014722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014726:	f7ff bfa4 	b.w	8014672 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801472a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801472a:	2a01      	cmp	r2, #1
 801472c:	b430      	push	{r4, r5}
 801472e:	d103      	bne.n	8014738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8014730:	780b      	ldrb	r3, [r1, #0]
 8014732:	7003      	strb	r3, [r0, #0]
 8014734:	bc30      	pop	{r4, r5}
 8014736:	4770      	bx	lr
 8014738:	2a00      	cmp	r2, #0
 801473a:	d0fb      	beq.n	8014734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 801473c:	bc30      	pop	{r4, r5}
 801473e:	f000 bb50 	b.w	8014de2 <memmove>

08014742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8014742:	b508      	push	{r3, lr}
 8014744:	1a52      	subs	r2, r2, r1
 8014746:	f7ff ffe4 	bl	8014712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801474a:	bd08      	pop	{r3, pc}

0801474c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 801474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801474e:	f100 0708 	add.w	r7, r0, #8
 8014752:	6007      	str	r7, [r0, #0]
 8014754:	4605      	mov	r5, r0
 8014756:	4608      	mov	r0, r1
 8014758:	460c      	mov	r4, r1
 801475a:	f7ff ff8e 	bl	801467a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801475e:	f104 0608 	add.w	r6, r4, #8
 8014762:	6862      	ldr	r2, [r4, #4]
 8014764:	b160      	cbz	r0, 8014780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8014766:	3201      	adds	r2, #1
 8014768:	4631      	mov	r1, r6
 801476a:	4638      	mov	r0, r7
 801476c:	f7ff ff81 	bl	8014672 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8014770:	6863      	ldr	r3, [r4, #4]
 8014772:	606b      	str	r3, [r5, #4]
 8014774:	2300      	movs	r3, #0
 8014776:	7223      	strb	r3, [r4, #8]
 8014778:	6026      	str	r6, [r4, #0]
 801477a:	6063      	str	r3, [r4, #4]
 801477c:	4628      	mov	r0, r5
 801477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014780:	6823      	ldr	r3, [r4, #0]
 8014782:	602b      	str	r3, [r5, #0]
 8014784:	68a3      	ldr	r3, [r4, #8]
 8014786:	60ab      	str	r3, [r5, #8]
 8014788:	e7f2      	b.n	8014770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

0801478a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801478a:	b510      	push	{r4, lr}
 801478c:	4604      	mov	r4, r0
 801478e:	f7ff ff9d 	bl	80146cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8014792:	4620      	mov	r0, r4
 8014794:	bd10      	pop	{r4, pc}

08014796 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8014796:	b510      	push	{r4, lr}
 8014798:	4604      	mov	r4, r0
 801479a:	f7ff ff6e 	bl	801467a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801479e:	b908      	cbnz	r0, 80147a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 80147a0:	68a0      	ldr	r0, [r4, #8]
 80147a2:	bd10      	pop	{r4, pc}
 80147a4:	200f      	movs	r0, #15
 80147a6:	e7fc      	b.n	80147a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

080147a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80147a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80147ac:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80147ae:	461f      	mov	r7, r3
 80147b0:	6843      	ldr	r3, [r0, #4]
 80147b2:	eb01 0802 	add.w	r8, r1, r2
 80147b6:	1ab2      	subs	r2, r6, r2
 80147b8:	441a      	add	r2, r3
 80147ba:	4604      	mov	r4, r0
 80147bc:	460d      	mov	r5, r1
 80147be:	eba3 0908 	sub.w	r9, r3, r8
 80147c2:	9201      	str	r2, [sp, #4]
 80147c4:	f7ff ffe7 	bl	8014796 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80147c8:	a901      	add	r1, sp, #4
 80147ca:	4602      	mov	r2, r0
 80147cc:	4620      	mov	r0, r4
 80147ce:	f7ff ff5b 	bl	8014688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80147d2:	4682      	mov	sl, r0
 80147d4:	b11d      	cbz	r5, 80147de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 80147d6:	6821      	ldr	r1, [r4, #0]
 80147d8:	462a      	mov	r2, r5
 80147da:	f7ff ff9a 	bl	8014712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80147de:	b137      	cbz	r7, 80147ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80147e0:	b12e      	cbz	r6, 80147ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80147e2:	4632      	mov	r2, r6
 80147e4:	4639      	mov	r1, r7
 80147e6:	eb0a 0005 	add.w	r0, sl, r5
 80147ea:	f7ff ff92 	bl	8014712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80147ee:	f1b9 0f00 	cmp.w	r9, #0
 80147f2:	d007      	beq.n	8014804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 80147f4:	6821      	ldr	r1, [r4, #0]
 80147f6:	4435      	add	r5, r6
 80147f8:	464a      	mov	r2, r9
 80147fa:	4441      	add	r1, r8
 80147fc:	eb0a 0005 	add.w	r0, sl, r5
 8014800:	f7ff ff87 	bl	8014712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8014804:	4620      	mov	r0, r4
 8014806:	f7ff ff61 	bl	80146cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801480a:	9b01      	ldr	r3, [sp, #4]
 801480c:	f8c4 a000 	str.w	sl, [r4]
 8014810:	60a3      	str	r3, [r4, #8]
 8014812:	b002      	add	sp, #8
 8014814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014818 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8014818:	6802      	ldr	r2, [r0, #0]
 801481a:	2300      	movs	r3, #0
 801481c:	6043      	str	r3, [r0, #4]
 801481e:	7013      	strb	r3, [r2, #0]
 8014820:	4770      	bx	lr
	...

08014824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8014824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014828:	b085      	sub	sp, #20
 801482a:	4680      	mov	r8, r0
 801482c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801482e:	4614      	mov	r4, r2
 8014830:	4689      	mov	r9, r1
 8014832:	462a      	mov	r2, r5
 8014834:	4621      	mov	r1, r4
 8014836:	461f      	mov	r7, r3
 8014838:	4b37      	ldr	r3, [pc, #220]	@ (8014918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 801483a:	f7ff ff52 	bl	80146e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801483e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014842:	9303      	str	r3, [sp, #12]
 8014844:	eba5 0b04 	sub.w	fp, r5, r4
 8014848:	4640      	mov	r0, r8
 801484a:	eb03 0a0b 	add.w	sl, r3, fp
 801484e:	f7ff ffa2 	bl	8014796 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8014852:	4550      	cmp	r0, sl
 8014854:	d354      	bcc.n	8014900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8014856:	f8d8 6000 	ldr.w	r6, [r8]
 801485a:	9b03      	ldr	r3, [sp, #12]
 801485c:	444e      	add	r6, r9
 801485e:	4639      	mov	r1, r7
 8014860:	44a1      	add	r9, r4
 8014862:	4640      	mov	r0, r8
 8014864:	eba3 0909 	sub.w	r9, r3, r9
 8014868:	f7ff ff47 	bl	80146fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 801486c:	b180      	cbz	r0, 8014890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 801486e:	f1b9 0f00 	cmp.w	r9, #0
 8014872:	d006      	beq.n	8014882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8014874:	42ac      	cmp	r4, r5
 8014876:	d004      	beq.n	8014882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8014878:	464a      	mov	r2, r9
 801487a:	1931      	adds	r1, r6, r4
 801487c:	1970      	adds	r0, r6, r5
 801487e:	f7ff ff54 	bl	801472a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8014882:	b315      	cbz	r5, 80148ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8014884:	462a      	mov	r2, r5
 8014886:	4639      	mov	r1, r7
 8014888:	4630      	mov	r0, r6
 801488a:	f7ff ff42 	bl	8014712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801488e:	e01c      	b.n	80148ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8014890:	b135      	cbz	r5, 80148a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8014892:	42ac      	cmp	r4, r5
 8014894:	d33c      	bcc.n	8014910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8014896:	462a      	mov	r2, r5
 8014898:	4639      	mov	r1, r7
 801489a:	4630      	mov	r0, r6
 801489c:	f7ff ff45 	bl	801472a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80148a0:	f1b9 0f00 	cmp.w	r9, #0
 80148a4:	d011      	beq.n	80148ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80148a6:	42ac      	cmp	r4, r5
 80148a8:	d00f      	beq.n	80148ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80148aa:	464a      	mov	r2, r9
 80148ac:	1931      	adds	r1, r6, r4
 80148ae:	1970      	adds	r0, r6, r5
 80148b0:	f7ff ff3b 	bl	801472a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80148b4:	42ac      	cmp	r4, r5
 80148b6:	d208      	bcs.n	80148ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80148b8:	4434      	add	r4, r6
 80148ba:	197b      	adds	r3, r7, r5
 80148bc:	429c      	cmp	r4, r3
 80148be:	d30f      	bcc.n	80148e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 80148c0:	462a      	mov	r2, r5
 80148c2:	4639      	mov	r1, r7
 80148c4:	4630      	mov	r0, r6
 80148c6:	f7ff ff30 	bl	801472a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80148ca:	f8d8 3000 	ldr.w	r3, [r8]
 80148ce:	f8c8 a004 	str.w	sl, [r8, #4]
 80148d2:	2200      	movs	r2, #0
 80148d4:	4640      	mov	r0, r8
 80148d6:	f803 200a 	strb.w	r2, [r3, sl]
 80148da:	b005      	add	sp, #20
 80148dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148e0:	42bc      	cmp	r4, r7
 80148e2:	d803      	bhi.n	80148ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 80148e4:	462a      	mov	r2, r5
 80148e6:	eb07 010b 	add.w	r1, r7, fp
 80148ea:	e7cd      	b.n	8014888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 80148ec:	1be4      	subs	r4, r4, r7
 80148ee:	4622      	mov	r2, r4
 80148f0:	4639      	mov	r1, r7
 80148f2:	4630      	mov	r0, r6
 80148f4:	f7ff ff19 	bl	801472a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80148f8:	1b2a      	subs	r2, r5, r4
 80148fa:	1971      	adds	r1, r6, r5
 80148fc:	1930      	adds	r0, r6, r4
 80148fe:	e7c4      	b.n	801488a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8014900:	9500      	str	r5, [sp, #0]
 8014902:	463b      	mov	r3, r7
 8014904:	4622      	mov	r2, r4
 8014906:	4649      	mov	r1, r9
 8014908:	4640      	mov	r0, r8
 801490a:	f7ff ff4d 	bl	80147a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801490e:	e7dc      	b.n	80148ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8014910:	f1b9 0f00 	cmp.w	r9, #0
 8014914:	d0d0      	beq.n	80148b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8014916:	e7c8      	b.n	80148aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8014918:	080161d0 	.word	0x080161d0

0801491c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 801491c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801491e:	4604      	mov	r4, r0
 8014920:	4608      	mov	r0, r1
 8014922:	460d      	mov	r5, r1
 8014924:	f7eb fcbc 	bl	80002a0 <strlen>
 8014928:	9000      	str	r0, [sp, #0]
 801492a:	6862      	ldr	r2, [r4, #4]
 801492c:	462b      	mov	r3, r5
 801492e:	2100      	movs	r1, #0
 8014930:	4620      	mov	r0, r4
 8014932:	f7ff ff77 	bl	8014824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8014936:	b003      	add	sp, #12
 8014938:	bd30      	pop	{r4, r5, pc}

0801493a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 801493a:	b508      	push	{r3, lr}
 801493c:	f7ff ffee 	bl	801491c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8014940:	bd08      	pop	{r3, pc}

08014942 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8014942:	6800      	ldr	r0, [r0, #0]
 8014944:	4770      	bx	lr

08014946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8014946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014948:	1a53      	subs	r3, r2, r1
 801494a:	2b0f      	cmp	r3, #15
 801494c:	4604      	mov	r4, r0
 801494e:	460d      	mov	r5, r1
 8014950:	4616      	mov	r6, r2
 8014952:	9301      	str	r3, [sp, #4]
 8014954:	d906      	bls.n	8014964 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8014956:	2200      	movs	r2, #0
 8014958:	a901      	add	r1, sp, #4
 801495a:	f7ff fe95 	bl	8014688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801495e:	9b01      	ldr	r3, [sp, #4]
 8014960:	6020      	str	r0, [r4, #0]
 8014962:	60a3      	str	r3, [r4, #8]
 8014964:	4632      	mov	r2, r6
 8014966:	4629      	mov	r1, r5
 8014968:	6820      	ldr	r0, [r4, #0]
 801496a:	f7ff feea 	bl	8014742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 801496e:	9b01      	ldr	r3, [sp, #4]
 8014970:	6822      	ldr	r2, [r4, #0]
 8014972:	6063      	str	r3, [r4, #4]
 8014974:	2100      	movs	r1, #0
 8014976:	54d1      	strb	r1, [r2, r3]
 8014978:	b002      	add	sp, #8
 801497a:	bd70      	pop	{r4, r5, r6, pc}

0801497c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 801497c:	b538      	push	{r3, r4, r5, lr}
 801497e:	f100 0308 	add.w	r3, r0, #8
 8014982:	4604      	mov	r4, r0
 8014984:	6003      	str	r3, [r0, #0]
 8014986:	460d      	mov	r5, r1
 8014988:	b911      	cbnz	r1, 8014990 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 801498a:	4807      	ldr	r0, [pc, #28]	@ (80149a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 801498c:	f7ff fe6b 	bl	8014666 <_ZSt19__throw_logic_errorPKc>
 8014990:	4608      	mov	r0, r1
 8014992:	f7eb fc85 	bl	80002a0 <strlen>
 8014996:	f04f 0300 	mov.w	r3, #0
 801499a:	182a      	adds	r2, r5, r0
 801499c:	4629      	mov	r1, r5
 801499e:	4620      	mov	r0, r4
 80149a0:	f7ff ffd1 	bl	8014946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80149a4:	4620      	mov	r0, r4
 80149a6:	bd38      	pop	{r3, r4, r5, pc}
 80149a8:	080161e9 	.word	0x080161e9

080149ac <_ZdlPv>:
 80149ac:	f000 b818 	b.w	80149e0 <free>

080149b0 <_ZSt15get_new_handlerv>:
 80149b0:	4b02      	ldr	r3, [pc, #8]	@ (80149bc <_ZSt15get_new_handlerv+0xc>)
 80149b2:	6818      	ldr	r0, [r3, #0]
 80149b4:	f3bf 8f5b 	dmb	ish
 80149b8:	4770      	bx	lr
 80149ba:	bf00      	nop
 80149bc:	200010f0 	.word	0x200010f0

080149c0 <abort>:
 80149c0:	b508      	push	{r3, lr}
 80149c2:	2006      	movs	r0, #6
 80149c4:	f000 fa6e 	bl	8014ea4 <raise>
 80149c8:	2001      	movs	r0, #1
 80149ca:	f7ee ff73 	bl	80038b4 <_exit>
	...

080149d0 <malloc>:
 80149d0:	4b02      	ldr	r3, [pc, #8]	@ (80149dc <malloc+0xc>)
 80149d2:	4601      	mov	r1, r0
 80149d4:	6818      	ldr	r0, [r3, #0]
 80149d6:	f000 b82d 	b.w	8014a34 <_malloc_r>
 80149da:	bf00      	nop
 80149dc:	20000038 	.word	0x20000038

080149e0 <free>:
 80149e0:	4b02      	ldr	r3, [pc, #8]	@ (80149ec <free+0xc>)
 80149e2:	4601      	mov	r1, r0
 80149e4:	6818      	ldr	r0, [r3, #0]
 80149e6:	f000 bb0b 	b.w	8015000 <_free_r>
 80149ea:	bf00      	nop
 80149ec:	20000038 	.word	0x20000038

080149f0 <sbrk_aligned>:
 80149f0:	b570      	push	{r4, r5, r6, lr}
 80149f2:	4e0f      	ldr	r6, [pc, #60]	@ (8014a30 <sbrk_aligned+0x40>)
 80149f4:	460c      	mov	r4, r1
 80149f6:	6831      	ldr	r1, [r6, #0]
 80149f8:	4605      	mov	r5, r0
 80149fa:	b911      	cbnz	r1, 8014a02 <sbrk_aligned+0x12>
 80149fc:	f000 faa2 	bl	8014f44 <_sbrk_r>
 8014a00:	6030      	str	r0, [r6, #0]
 8014a02:	4621      	mov	r1, r4
 8014a04:	4628      	mov	r0, r5
 8014a06:	f000 fa9d 	bl	8014f44 <_sbrk_r>
 8014a0a:	1c43      	adds	r3, r0, #1
 8014a0c:	d103      	bne.n	8014a16 <sbrk_aligned+0x26>
 8014a0e:	f04f 34ff 	mov.w	r4, #4294967295
 8014a12:	4620      	mov	r0, r4
 8014a14:	bd70      	pop	{r4, r5, r6, pc}
 8014a16:	1cc4      	adds	r4, r0, #3
 8014a18:	f024 0403 	bic.w	r4, r4, #3
 8014a1c:	42a0      	cmp	r0, r4
 8014a1e:	d0f8      	beq.n	8014a12 <sbrk_aligned+0x22>
 8014a20:	1a21      	subs	r1, r4, r0
 8014a22:	4628      	mov	r0, r5
 8014a24:	f000 fa8e 	bl	8014f44 <_sbrk_r>
 8014a28:	3001      	adds	r0, #1
 8014a2a:	d1f2      	bne.n	8014a12 <sbrk_aligned+0x22>
 8014a2c:	e7ef      	b.n	8014a0e <sbrk_aligned+0x1e>
 8014a2e:	bf00      	nop
 8014a30:	200010f4 	.word	0x200010f4

08014a34 <_malloc_r>:
 8014a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a38:	1ccd      	adds	r5, r1, #3
 8014a3a:	f025 0503 	bic.w	r5, r5, #3
 8014a3e:	3508      	adds	r5, #8
 8014a40:	2d0c      	cmp	r5, #12
 8014a42:	bf38      	it	cc
 8014a44:	250c      	movcc	r5, #12
 8014a46:	2d00      	cmp	r5, #0
 8014a48:	4606      	mov	r6, r0
 8014a4a:	db01      	blt.n	8014a50 <_malloc_r+0x1c>
 8014a4c:	42a9      	cmp	r1, r5
 8014a4e:	d904      	bls.n	8014a5a <_malloc_r+0x26>
 8014a50:	230c      	movs	r3, #12
 8014a52:	6033      	str	r3, [r6, #0]
 8014a54:	2000      	movs	r0, #0
 8014a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014b30 <_malloc_r+0xfc>
 8014a5e:	f000 f869 	bl	8014b34 <__malloc_lock>
 8014a62:	f8d8 3000 	ldr.w	r3, [r8]
 8014a66:	461c      	mov	r4, r3
 8014a68:	bb44      	cbnz	r4, 8014abc <_malloc_r+0x88>
 8014a6a:	4629      	mov	r1, r5
 8014a6c:	4630      	mov	r0, r6
 8014a6e:	f7ff ffbf 	bl	80149f0 <sbrk_aligned>
 8014a72:	1c43      	adds	r3, r0, #1
 8014a74:	4604      	mov	r4, r0
 8014a76:	d158      	bne.n	8014b2a <_malloc_r+0xf6>
 8014a78:	f8d8 4000 	ldr.w	r4, [r8]
 8014a7c:	4627      	mov	r7, r4
 8014a7e:	2f00      	cmp	r7, #0
 8014a80:	d143      	bne.n	8014b0a <_malloc_r+0xd6>
 8014a82:	2c00      	cmp	r4, #0
 8014a84:	d04b      	beq.n	8014b1e <_malloc_r+0xea>
 8014a86:	6823      	ldr	r3, [r4, #0]
 8014a88:	4639      	mov	r1, r7
 8014a8a:	4630      	mov	r0, r6
 8014a8c:	eb04 0903 	add.w	r9, r4, r3
 8014a90:	f000 fa58 	bl	8014f44 <_sbrk_r>
 8014a94:	4581      	cmp	r9, r0
 8014a96:	d142      	bne.n	8014b1e <_malloc_r+0xea>
 8014a98:	6821      	ldr	r1, [r4, #0]
 8014a9a:	1a6d      	subs	r5, r5, r1
 8014a9c:	4629      	mov	r1, r5
 8014a9e:	4630      	mov	r0, r6
 8014aa0:	f7ff ffa6 	bl	80149f0 <sbrk_aligned>
 8014aa4:	3001      	adds	r0, #1
 8014aa6:	d03a      	beq.n	8014b1e <_malloc_r+0xea>
 8014aa8:	6823      	ldr	r3, [r4, #0]
 8014aaa:	442b      	add	r3, r5
 8014aac:	6023      	str	r3, [r4, #0]
 8014aae:	f8d8 3000 	ldr.w	r3, [r8]
 8014ab2:	685a      	ldr	r2, [r3, #4]
 8014ab4:	bb62      	cbnz	r2, 8014b10 <_malloc_r+0xdc>
 8014ab6:	f8c8 7000 	str.w	r7, [r8]
 8014aba:	e00f      	b.n	8014adc <_malloc_r+0xa8>
 8014abc:	6822      	ldr	r2, [r4, #0]
 8014abe:	1b52      	subs	r2, r2, r5
 8014ac0:	d420      	bmi.n	8014b04 <_malloc_r+0xd0>
 8014ac2:	2a0b      	cmp	r2, #11
 8014ac4:	d917      	bls.n	8014af6 <_malloc_r+0xc2>
 8014ac6:	1961      	adds	r1, r4, r5
 8014ac8:	42a3      	cmp	r3, r4
 8014aca:	6025      	str	r5, [r4, #0]
 8014acc:	bf18      	it	ne
 8014ace:	6059      	strne	r1, [r3, #4]
 8014ad0:	6863      	ldr	r3, [r4, #4]
 8014ad2:	bf08      	it	eq
 8014ad4:	f8c8 1000 	streq.w	r1, [r8]
 8014ad8:	5162      	str	r2, [r4, r5]
 8014ada:	604b      	str	r3, [r1, #4]
 8014adc:	4630      	mov	r0, r6
 8014ade:	f000 f82f 	bl	8014b40 <__malloc_unlock>
 8014ae2:	f104 000b 	add.w	r0, r4, #11
 8014ae6:	1d23      	adds	r3, r4, #4
 8014ae8:	f020 0007 	bic.w	r0, r0, #7
 8014aec:	1ac2      	subs	r2, r0, r3
 8014aee:	bf1c      	itt	ne
 8014af0:	1a1b      	subne	r3, r3, r0
 8014af2:	50a3      	strne	r3, [r4, r2]
 8014af4:	e7af      	b.n	8014a56 <_malloc_r+0x22>
 8014af6:	6862      	ldr	r2, [r4, #4]
 8014af8:	42a3      	cmp	r3, r4
 8014afa:	bf0c      	ite	eq
 8014afc:	f8c8 2000 	streq.w	r2, [r8]
 8014b00:	605a      	strne	r2, [r3, #4]
 8014b02:	e7eb      	b.n	8014adc <_malloc_r+0xa8>
 8014b04:	4623      	mov	r3, r4
 8014b06:	6864      	ldr	r4, [r4, #4]
 8014b08:	e7ae      	b.n	8014a68 <_malloc_r+0x34>
 8014b0a:	463c      	mov	r4, r7
 8014b0c:	687f      	ldr	r7, [r7, #4]
 8014b0e:	e7b6      	b.n	8014a7e <_malloc_r+0x4a>
 8014b10:	461a      	mov	r2, r3
 8014b12:	685b      	ldr	r3, [r3, #4]
 8014b14:	42a3      	cmp	r3, r4
 8014b16:	d1fb      	bne.n	8014b10 <_malloc_r+0xdc>
 8014b18:	2300      	movs	r3, #0
 8014b1a:	6053      	str	r3, [r2, #4]
 8014b1c:	e7de      	b.n	8014adc <_malloc_r+0xa8>
 8014b1e:	230c      	movs	r3, #12
 8014b20:	6033      	str	r3, [r6, #0]
 8014b22:	4630      	mov	r0, r6
 8014b24:	f000 f80c 	bl	8014b40 <__malloc_unlock>
 8014b28:	e794      	b.n	8014a54 <_malloc_r+0x20>
 8014b2a:	6005      	str	r5, [r0, #0]
 8014b2c:	e7d6      	b.n	8014adc <_malloc_r+0xa8>
 8014b2e:	bf00      	nop
 8014b30:	200010f8 	.word	0x200010f8

08014b34 <__malloc_lock>:
 8014b34:	4801      	ldr	r0, [pc, #4]	@ (8014b3c <__malloc_lock+0x8>)
 8014b36:	f000 ba52 	b.w	8014fde <__retarget_lock_acquire_recursive>
 8014b3a:	bf00      	nop
 8014b3c:	2000123c 	.word	0x2000123c

08014b40 <__malloc_unlock>:
 8014b40:	4801      	ldr	r0, [pc, #4]	@ (8014b48 <__malloc_unlock+0x8>)
 8014b42:	f000 ba4d 	b.w	8014fe0 <__retarget_lock_release_recursive>
 8014b46:	bf00      	nop
 8014b48:	2000123c 	.word	0x2000123c

08014b4c <std>:
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	b510      	push	{r4, lr}
 8014b50:	4604      	mov	r4, r0
 8014b52:	e9c0 3300 	strd	r3, r3, [r0]
 8014b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b5a:	6083      	str	r3, [r0, #8]
 8014b5c:	8181      	strh	r1, [r0, #12]
 8014b5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8014b60:	81c2      	strh	r2, [r0, #14]
 8014b62:	6183      	str	r3, [r0, #24]
 8014b64:	4619      	mov	r1, r3
 8014b66:	2208      	movs	r2, #8
 8014b68:	305c      	adds	r0, #92	@ 0x5c
 8014b6a:	f000 f954 	bl	8014e16 <memset>
 8014b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8014ba4 <std+0x58>)
 8014b70:	6263      	str	r3, [r4, #36]	@ 0x24
 8014b72:	4b0d      	ldr	r3, [pc, #52]	@ (8014ba8 <std+0x5c>)
 8014b74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014b76:	4b0d      	ldr	r3, [pc, #52]	@ (8014bac <std+0x60>)
 8014b78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8014bb0 <std+0x64>)
 8014b7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8014b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8014bb4 <std+0x68>)
 8014b80:	6224      	str	r4, [r4, #32]
 8014b82:	429c      	cmp	r4, r3
 8014b84:	d006      	beq.n	8014b94 <std+0x48>
 8014b86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014b8a:	4294      	cmp	r4, r2
 8014b8c:	d002      	beq.n	8014b94 <std+0x48>
 8014b8e:	33d0      	adds	r3, #208	@ 0xd0
 8014b90:	429c      	cmp	r4, r3
 8014b92:	d105      	bne.n	8014ba0 <std+0x54>
 8014b94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b9c:	f000 ba1e 	b.w	8014fdc <__retarget_lock_init_recursive>
 8014ba0:	bd10      	pop	{r4, pc}
 8014ba2:	bf00      	nop
 8014ba4:	08014d5d 	.word	0x08014d5d
 8014ba8:	08014d7f 	.word	0x08014d7f
 8014bac:	08014db7 	.word	0x08014db7
 8014bb0:	08014ddb 	.word	0x08014ddb
 8014bb4:	200010fc 	.word	0x200010fc

08014bb8 <stdio_exit_handler>:
 8014bb8:	4a02      	ldr	r2, [pc, #8]	@ (8014bc4 <stdio_exit_handler+0xc>)
 8014bba:	4903      	ldr	r1, [pc, #12]	@ (8014bc8 <stdio_exit_handler+0x10>)
 8014bbc:	4803      	ldr	r0, [pc, #12]	@ (8014bcc <stdio_exit_handler+0x14>)
 8014bbe:	f000 b869 	b.w	8014c94 <_fwalk_sglue>
 8014bc2:	bf00      	nop
 8014bc4:	2000002c 	.word	0x2000002c
 8014bc8:	080159ed 	.word	0x080159ed
 8014bcc:	2000003c 	.word	0x2000003c

08014bd0 <cleanup_stdio>:
 8014bd0:	6841      	ldr	r1, [r0, #4]
 8014bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8014c04 <cleanup_stdio+0x34>)
 8014bd4:	4299      	cmp	r1, r3
 8014bd6:	b510      	push	{r4, lr}
 8014bd8:	4604      	mov	r4, r0
 8014bda:	d001      	beq.n	8014be0 <cleanup_stdio+0x10>
 8014bdc:	f000 ff06 	bl	80159ec <_fflush_r>
 8014be0:	68a1      	ldr	r1, [r4, #8]
 8014be2:	4b09      	ldr	r3, [pc, #36]	@ (8014c08 <cleanup_stdio+0x38>)
 8014be4:	4299      	cmp	r1, r3
 8014be6:	d002      	beq.n	8014bee <cleanup_stdio+0x1e>
 8014be8:	4620      	mov	r0, r4
 8014bea:	f000 feff 	bl	80159ec <_fflush_r>
 8014bee:	68e1      	ldr	r1, [r4, #12]
 8014bf0:	4b06      	ldr	r3, [pc, #24]	@ (8014c0c <cleanup_stdio+0x3c>)
 8014bf2:	4299      	cmp	r1, r3
 8014bf4:	d004      	beq.n	8014c00 <cleanup_stdio+0x30>
 8014bf6:	4620      	mov	r0, r4
 8014bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bfc:	f000 bef6 	b.w	80159ec <_fflush_r>
 8014c00:	bd10      	pop	{r4, pc}
 8014c02:	bf00      	nop
 8014c04:	200010fc 	.word	0x200010fc
 8014c08:	20001164 	.word	0x20001164
 8014c0c:	200011cc 	.word	0x200011cc

08014c10 <global_stdio_init.part.0>:
 8014c10:	b510      	push	{r4, lr}
 8014c12:	4b0b      	ldr	r3, [pc, #44]	@ (8014c40 <global_stdio_init.part.0+0x30>)
 8014c14:	4c0b      	ldr	r4, [pc, #44]	@ (8014c44 <global_stdio_init.part.0+0x34>)
 8014c16:	4a0c      	ldr	r2, [pc, #48]	@ (8014c48 <global_stdio_init.part.0+0x38>)
 8014c18:	601a      	str	r2, [r3, #0]
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	2104      	movs	r1, #4
 8014c20:	f7ff ff94 	bl	8014b4c <std>
 8014c24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014c28:	2201      	movs	r2, #1
 8014c2a:	2109      	movs	r1, #9
 8014c2c:	f7ff ff8e 	bl	8014b4c <std>
 8014c30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014c34:	2202      	movs	r2, #2
 8014c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c3a:	2112      	movs	r1, #18
 8014c3c:	f7ff bf86 	b.w	8014b4c <std>
 8014c40:	20001234 	.word	0x20001234
 8014c44:	200010fc 	.word	0x200010fc
 8014c48:	08014bb9 	.word	0x08014bb9

08014c4c <__sfp_lock_acquire>:
 8014c4c:	4801      	ldr	r0, [pc, #4]	@ (8014c54 <__sfp_lock_acquire+0x8>)
 8014c4e:	f000 b9c6 	b.w	8014fde <__retarget_lock_acquire_recursive>
 8014c52:	bf00      	nop
 8014c54:	2000123d 	.word	0x2000123d

08014c58 <__sfp_lock_release>:
 8014c58:	4801      	ldr	r0, [pc, #4]	@ (8014c60 <__sfp_lock_release+0x8>)
 8014c5a:	f000 b9c1 	b.w	8014fe0 <__retarget_lock_release_recursive>
 8014c5e:	bf00      	nop
 8014c60:	2000123d 	.word	0x2000123d

08014c64 <__sinit>:
 8014c64:	b510      	push	{r4, lr}
 8014c66:	4604      	mov	r4, r0
 8014c68:	f7ff fff0 	bl	8014c4c <__sfp_lock_acquire>
 8014c6c:	6a23      	ldr	r3, [r4, #32]
 8014c6e:	b11b      	cbz	r3, 8014c78 <__sinit+0x14>
 8014c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c74:	f7ff bff0 	b.w	8014c58 <__sfp_lock_release>
 8014c78:	4b04      	ldr	r3, [pc, #16]	@ (8014c8c <__sinit+0x28>)
 8014c7a:	6223      	str	r3, [r4, #32]
 8014c7c:	4b04      	ldr	r3, [pc, #16]	@ (8014c90 <__sinit+0x2c>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d1f5      	bne.n	8014c70 <__sinit+0xc>
 8014c84:	f7ff ffc4 	bl	8014c10 <global_stdio_init.part.0>
 8014c88:	e7f2      	b.n	8014c70 <__sinit+0xc>
 8014c8a:	bf00      	nop
 8014c8c:	08014bd1 	.word	0x08014bd1
 8014c90:	20001234 	.word	0x20001234

08014c94 <_fwalk_sglue>:
 8014c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c98:	4607      	mov	r7, r0
 8014c9a:	4688      	mov	r8, r1
 8014c9c:	4614      	mov	r4, r2
 8014c9e:	2600      	movs	r6, #0
 8014ca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014ca4:	f1b9 0901 	subs.w	r9, r9, #1
 8014ca8:	d505      	bpl.n	8014cb6 <_fwalk_sglue+0x22>
 8014caa:	6824      	ldr	r4, [r4, #0]
 8014cac:	2c00      	cmp	r4, #0
 8014cae:	d1f7      	bne.n	8014ca0 <_fwalk_sglue+0xc>
 8014cb0:	4630      	mov	r0, r6
 8014cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cb6:	89ab      	ldrh	r3, [r5, #12]
 8014cb8:	2b01      	cmp	r3, #1
 8014cba:	d907      	bls.n	8014ccc <_fwalk_sglue+0x38>
 8014cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	d003      	beq.n	8014ccc <_fwalk_sglue+0x38>
 8014cc4:	4629      	mov	r1, r5
 8014cc6:	4638      	mov	r0, r7
 8014cc8:	47c0      	blx	r8
 8014cca:	4306      	orrs	r6, r0
 8014ccc:	3568      	adds	r5, #104	@ 0x68
 8014cce:	e7e9      	b.n	8014ca4 <_fwalk_sglue+0x10>

08014cd0 <iprintf>:
 8014cd0:	b40f      	push	{r0, r1, r2, r3}
 8014cd2:	b507      	push	{r0, r1, r2, lr}
 8014cd4:	4906      	ldr	r1, [pc, #24]	@ (8014cf0 <iprintf+0x20>)
 8014cd6:	ab04      	add	r3, sp, #16
 8014cd8:	6808      	ldr	r0, [r1, #0]
 8014cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cde:	6881      	ldr	r1, [r0, #8]
 8014ce0:	9301      	str	r3, [sp, #4]
 8014ce2:	f000 fb59 	bl	8015398 <_vfiprintf_r>
 8014ce6:	b003      	add	sp, #12
 8014ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8014cec:	b004      	add	sp, #16
 8014cee:	4770      	bx	lr
 8014cf0:	20000038 	.word	0x20000038

08014cf4 <sniprintf>:
 8014cf4:	b40c      	push	{r2, r3}
 8014cf6:	b530      	push	{r4, r5, lr}
 8014cf8:	4b17      	ldr	r3, [pc, #92]	@ (8014d58 <sniprintf+0x64>)
 8014cfa:	1e0c      	subs	r4, r1, #0
 8014cfc:	681d      	ldr	r5, [r3, #0]
 8014cfe:	b09d      	sub	sp, #116	@ 0x74
 8014d00:	da08      	bge.n	8014d14 <sniprintf+0x20>
 8014d02:	238b      	movs	r3, #139	@ 0x8b
 8014d04:	602b      	str	r3, [r5, #0]
 8014d06:	f04f 30ff 	mov.w	r0, #4294967295
 8014d0a:	b01d      	add	sp, #116	@ 0x74
 8014d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d10:	b002      	add	sp, #8
 8014d12:	4770      	bx	lr
 8014d14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014d18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014d1c:	bf14      	ite	ne
 8014d1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014d22:	4623      	moveq	r3, r4
 8014d24:	9304      	str	r3, [sp, #16]
 8014d26:	9307      	str	r3, [sp, #28]
 8014d28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014d2c:	9002      	str	r0, [sp, #8]
 8014d2e:	9006      	str	r0, [sp, #24]
 8014d30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014d34:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014d36:	ab21      	add	r3, sp, #132	@ 0x84
 8014d38:	a902      	add	r1, sp, #8
 8014d3a:	4628      	mov	r0, r5
 8014d3c:	9301      	str	r3, [sp, #4]
 8014d3e:	f000 fa05 	bl	801514c <_svfiprintf_r>
 8014d42:	1c43      	adds	r3, r0, #1
 8014d44:	bfbc      	itt	lt
 8014d46:	238b      	movlt	r3, #139	@ 0x8b
 8014d48:	602b      	strlt	r3, [r5, #0]
 8014d4a:	2c00      	cmp	r4, #0
 8014d4c:	d0dd      	beq.n	8014d0a <sniprintf+0x16>
 8014d4e:	9b02      	ldr	r3, [sp, #8]
 8014d50:	2200      	movs	r2, #0
 8014d52:	701a      	strb	r2, [r3, #0]
 8014d54:	e7d9      	b.n	8014d0a <sniprintf+0x16>
 8014d56:	bf00      	nop
 8014d58:	20000038 	.word	0x20000038

08014d5c <__sread>:
 8014d5c:	b510      	push	{r4, lr}
 8014d5e:	460c      	mov	r4, r1
 8014d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d64:	f000 f8c8 	bl	8014ef8 <_read_r>
 8014d68:	2800      	cmp	r0, #0
 8014d6a:	bfab      	itete	ge
 8014d6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8014d70:	181b      	addge	r3, r3, r0
 8014d72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014d76:	bfac      	ite	ge
 8014d78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014d7a:	81a3      	strhlt	r3, [r4, #12]
 8014d7c:	bd10      	pop	{r4, pc}

08014d7e <__swrite>:
 8014d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d82:	461f      	mov	r7, r3
 8014d84:	898b      	ldrh	r3, [r1, #12]
 8014d86:	05db      	lsls	r3, r3, #23
 8014d88:	4605      	mov	r5, r0
 8014d8a:	460c      	mov	r4, r1
 8014d8c:	4616      	mov	r6, r2
 8014d8e:	d505      	bpl.n	8014d9c <__swrite+0x1e>
 8014d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d94:	2302      	movs	r3, #2
 8014d96:	2200      	movs	r2, #0
 8014d98:	f000 f89c 	bl	8014ed4 <_lseek_r>
 8014d9c:	89a3      	ldrh	r3, [r4, #12]
 8014d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014da2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014da6:	81a3      	strh	r3, [r4, #12]
 8014da8:	4632      	mov	r2, r6
 8014daa:	463b      	mov	r3, r7
 8014dac:	4628      	mov	r0, r5
 8014dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014db2:	f000 b8d7 	b.w	8014f64 <_write_r>

08014db6 <__sseek>:
 8014db6:	b510      	push	{r4, lr}
 8014db8:	460c      	mov	r4, r1
 8014dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dbe:	f000 f889 	bl	8014ed4 <_lseek_r>
 8014dc2:	1c43      	adds	r3, r0, #1
 8014dc4:	89a3      	ldrh	r3, [r4, #12]
 8014dc6:	bf15      	itete	ne
 8014dc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014dca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014dce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014dd2:	81a3      	strheq	r3, [r4, #12]
 8014dd4:	bf18      	it	ne
 8014dd6:	81a3      	strhne	r3, [r4, #12]
 8014dd8:	bd10      	pop	{r4, pc}

08014dda <__sclose>:
 8014dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dde:	f000 b869 	b.w	8014eb4 <_close_r>

08014de2 <memmove>:
 8014de2:	4288      	cmp	r0, r1
 8014de4:	b510      	push	{r4, lr}
 8014de6:	eb01 0402 	add.w	r4, r1, r2
 8014dea:	d902      	bls.n	8014df2 <memmove+0x10>
 8014dec:	4284      	cmp	r4, r0
 8014dee:	4623      	mov	r3, r4
 8014df0:	d807      	bhi.n	8014e02 <memmove+0x20>
 8014df2:	1e43      	subs	r3, r0, #1
 8014df4:	42a1      	cmp	r1, r4
 8014df6:	d008      	beq.n	8014e0a <memmove+0x28>
 8014df8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014dfc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014e00:	e7f8      	b.n	8014df4 <memmove+0x12>
 8014e02:	4402      	add	r2, r0
 8014e04:	4601      	mov	r1, r0
 8014e06:	428a      	cmp	r2, r1
 8014e08:	d100      	bne.n	8014e0c <memmove+0x2a>
 8014e0a:	bd10      	pop	{r4, pc}
 8014e0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014e10:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014e14:	e7f7      	b.n	8014e06 <memmove+0x24>

08014e16 <memset>:
 8014e16:	4402      	add	r2, r0
 8014e18:	4603      	mov	r3, r0
 8014e1a:	4293      	cmp	r3, r2
 8014e1c:	d100      	bne.n	8014e20 <memset+0xa>
 8014e1e:	4770      	bx	lr
 8014e20:	f803 1b01 	strb.w	r1, [r3], #1
 8014e24:	e7f9      	b.n	8014e1a <memset+0x4>

08014e26 <strstr>:
 8014e26:	780a      	ldrb	r2, [r1, #0]
 8014e28:	b570      	push	{r4, r5, r6, lr}
 8014e2a:	b96a      	cbnz	r2, 8014e48 <strstr+0x22>
 8014e2c:	bd70      	pop	{r4, r5, r6, pc}
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d109      	bne.n	8014e46 <strstr+0x20>
 8014e32:	460c      	mov	r4, r1
 8014e34:	4605      	mov	r5, r0
 8014e36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d0f6      	beq.n	8014e2c <strstr+0x6>
 8014e3e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014e42:	429e      	cmp	r6, r3
 8014e44:	d0f7      	beq.n	8014e36 <strstr+0x10>
 8014e46:	3001      	adds	r0, #1
 8014e48:	7803      	ldrb	r3, [r0, #0]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d1ef      	bne.n	8014e2e <strstr+0x8>
 8014e4e:	4618      	mov	r0, r3
 8014e50:	e7ec      	b.n	8014e2c <strstr+0x6>

08014e52 <_raise_r>:
 8014e52:	291f      	cmp	r1, #31
 8014e54:	b538      	push	{r3, r4, r5, lr}
 8014e56:	4605      	mov	r5, r0
 8014e58:	460c      	mov	r4, r1
 8014e5a:	d904      	bls.n	8014e66 <_raise_r+0x14>
 8014e5c:	2316      	movs	r3, #22
 8014e5e:	6003      	str	r3, [r0, #0]
 8014e60:	f04f 30ff 	mov.w	r0, #4294967295
 8014e64:	bd38      	pop	{r3, r4, r5, pc}
 8014e66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014e68:	b112      	cbz	r2, 8014e70 <_raise_r+0x1e>
 8014e6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014e6e:	b94b      	cbnz	r3, 8014e84 <_raise_r+0x32>
 8014e70:	4628      	mov	r0, r5
 8014e72:	f000 f865 	bl	8014f40 <_getpid_r>
 8014e76:	4622      	mov	r2, r4
 8014e78:	4601      	mov	r1, r0
 8014e7a:	4628      	mov	r0, r5
 8014e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e80:	f000 b84c 	b.w	8014f1c <_kill_r>
 8014e84:	2b01      	cmp	r3, #1
 8014e86:	d00a      	beq.n	8014e9e <_raise_r+0x4c>
 8014e88:	1c59      	adds	r1, r3, #1
 8014e8a:	d103      	bne.n	8014e94 <_raise_r+0x42>
 8014e8c:	2316      	movs	r3, #22
 8014e8e:	6003      	str	r3, [r0, #0]
 8014e90:	2001      	movs	r0, #1
 8014e92:	e7e7      	b.n	8014e64 <_raise_r+0x12>
 8014e94:	2100      	movs	r1, #0
 8014e96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014e9a:	4620      	mov	r0, r4
 8014e9c:	4798      	blx	r3
 8014e9e:	2000      	movs	r0, #0
 8014ea0:	e7e0      	b.n	8014e64 <_raise_r+0x12>
	...

08014ea4 <raise>:
 8014ea4:	4b02      	ldr	r3, [pc, #8]	@ (8014eb0 <raise+0xc>)
 8014ea6:	4601      	mov	r1, r0
 8014ea8:	6818      	ldr	r0, [r3, #0]
 8014eaa:	f7ff bfd2 	b.w	8014e52 <_raise_r>
 8014eae:	bf00      	nop
 8014eb0:	20000038 	.word	0x20000038

08014eb4 <_close_r>:
 8014eb4:	b538      	push	{r3, r4, r5, lr}
 8014eb6:	4d06      	ldr	r5, [pc, #24]	@ (8014ed0 <_close_r+0x1c>)
 8014eb8:	2300      	movs	r3, #0
 8014eba:	4604      	mov	r4, r0
 8014ebc:	4608      	mov	r0, r1
 8014ebe:	602b      	str	r3, [r5, #0]
 8014ec0:	f7ee fd20 	bl	8003904 <_close>
 8014ec4:	1c43      	adds	r3, r0, #1
 8014ec6:	d102      	bne.n	8014ece <_close_r+0x1a>
 8014ec8:	682b      	ldr	r3, [r5, #0]
 8014eca:	b103      	cbz	r3, 8014ece <_close_r+0x1a>
 8014ecc:	6023      	str	r3, [r4, #0]
 8014ece:	bd38      	pop	{r3, r4, r5, pc}
 8014ed0:	20001238 	.word	0x20001238

08014ed4 <_lseek_r>:
 8014ed4:	b538      	push	{r3, r4, r5, lr}
 8014ed6:	4d07      	ldr	r5, [pc, #28]	@ (8014ef4 <_lseek_r+0x20>)
 8014ed8:	4604      	mov	r4, r0
 8014eda:	4608      	mov	r0, r1
 8014edc:	4611      	mov	r1, r2
 8014ede:	2200      	movs	r2, #0
 8014ee0:	602a      	str	r2, [r5, #0]
 8014ee2:	461a      	mov	r2, r3
 8014ee4:	f7ee fd35 	bl	8003952 <_lseek>
 8014ee8:	1c43      	adds	r3, r0, #1
 8014eea:	d102      	bne.n	8014ef2 <_lseek_r+0x1e>
 8014eec:	682b      	ldr	r3, [r5, #0]
 8014eee:	b103      	cbz	r3, 8014ef2 <_lseek_r+0x1e>
 8014ef0:	6023      	str	r3, [r4, #0]
 8014ef2:	bd38      	pop	{r3, r4, r5, pc}
 8014ef4:	20001238 	.word	0x20001238

08014ef8 <_read_r>:
 8014ef8:	b538      	push	{r3, r4, r5, lr}
 8014efa:	4d07      	ldr	r5, [pc, #28]	@ (8014f18 <_read_r+0x20>)
 8014efc:	4604      	mov	r4, r0
 8014efe:	4608      	mov	r0, r1
 8014f00:	4611      	mov	r1, r2
 8014f02:	2200      	movs	r2, #0
 8014f04:	602a      	str	r2, [r5, #0]
 8014f06:	461a      	mov	r2, r3
 8014f08:	f7ee fcdf 	bl	80038ca <_read>
 8014f0c:	1c43      	adds	r3, r0, #1
 8014f0e:	d102      	bne.n	8014f16 <_read_r+0x1e>
 8014f10:	682b      	ldr	r3, [r5, #0]
 8014f12:	b103      	cbz	r3, 8014f16 <_read_r+0x1e>
 8014f14:	6023      	str	r3, [r4, #0]
 8014f16:	bd38      	pop	{r3, r4, r5, pc}
 8014f18:	20001238 	.word	0x20001238

08014f1c <_kill_r>:
 8014f1c:	b538      	push	{r3, r4, r5, lr}
 8014f1e:	4d07      	ldr	r5, [pc, #28]	@ (8014f3c <_kill_r+0x20>)
 8014f20:	2300      	movs	r3, #0
 8014f22:	4604      	mov	r4, r0
 8014f24:	4608      	mov	r0, r1
 8014f26:	4611      	mov	r1, r2
 8014f28:	602b      	str	r3, [r5, #0]
 8014f2a:	f7ee fcb3 	bl	8003894 <_kill>
 8014f2e:	1c43      	adds	r3, r0, #1
 8014f30:	d102      	bne.n	8014f38 <_kill_r+0x1c>
 8014f32:	682b      	ldr	r3, [r5, #0]
 8014f34:	b103      	cbz	r3, 8014f38 <_kill_r+0x1c>
 8014f36:	6023      	str	r3, [r4, #0]
 8014f38:	bd38      	pop	{r3, r4, r5, pc}
 8014f3a:	bf00      	nop
 8014f3c:	20001238 	.word	0x20001238

08014f40 <_getpid_r>:
 8014f40:	f7ee bca0 	b.w	8003884 <_getpid>

08014f44 <_sbrk_r>:
 8014f44:	b538      	push	{r3, r4, r5, lr}
 8014f46:	4d06      	ldr	r5, [pc, #24]	@ (8014f60 <_sbrk_r+0x1c>)
 8014f48:	2300      	movs	r3, #0
 8014f4a:	4604      	mov	r4, r0
 8014f4c:	4608      	mov	r0, r1
 8014f4e:	602b      	str	r3, [r5, #0]
 8014f50:	f7ee fd0c 	bl	800396c <_sbrk>
 8014f54:	1c43      	adds	r3, r0, #1
 8014f56:	d102      	bne.n	8014f5e <_sbrk_r+0x1a>
 8014f58:	682b      	ldr	r3, [r5, #0]
 8014f5a:	b103      	cbz	r3, 8014f5e <_sbrk_r+0x1a>
 8014f5c:	6023      	str	r3, [r4, #0]
 8014f5e:	bd38      	pop	{r3, r4, r5, pc}
 8014f60:	20001238 	.word	0x20001238

08014f64 <_write_r>:
 8014f64:	b538      	push	{r3, r4, r5, lr}
 8014f66:	4d07      	ldr	r5, [pc, #28]	@ (8014f84 <_write_r+0x20>)
 8014f68:	4604      	mov	r4, r0
 8014f6a:	4608      	mov	r0, r1
 8014f6c:	4611      	mov	r1, r2
 8014f6e:	2200      	movs	r2, #0
 8014f70:	602a      	str	r2, [r5, #0]
 8014f72:	461a      	mov	r2, r3
 8014f74:	f7ec ffe6 	bl	8001f44 <_write>
 8014f78:	1c43      	adds	r3, r0, #1
 8014f7a:	d102      	bne.n	8014f82 <_write_r+0x1e>
 8014f7c:	682b      	ldr	r3, [r5, #0]
 8014f7e:	b103      	cbz	r3, 8014f82 <_write_r+0x1e>
 8014f80:	6023      	str	r3, [r4, #0]
 8014f82:	bd38      	pop	{r3, r4, r5, pc}
 8014f84:	20001238 	.word	0x20001238

08014f88 <__errno>:
 8014f88:	4b01      	ldr	r3, [pc, #4]	@ (8014f90 <__errno+0x8>)
 8014f8a:	6818      	ldr	r0, [r3, #0]
 8014f8c:	4770      	bx	lr
 8014f8e:	bf00      	nop
 8014f90:	20000038 	.word	0x20000038

08014f94 <__libc_init_array>:
 8014f94:	b570      	push	{r4, r5, r6, lr}
 8014f96:	4d0d      	ldr	r5, [pc, #52]	@ (8014fcc <__libc_init_array+0x38>)
 8014f98:	4c0d      	ldr	r4, [pc, #52]	@ (8014fd0 <__libc_init_array+0x3c>)
 8014f9a:	1b64      	subs	r4, r4, r5
 8014f9c:	10a4      	asrs	r4, r4, #2
 8014f9e:	2600      	movs	r6, #0
 8014fa0:	42a6      	cmp	r6, r4
 8014fa2:	d109      	bne.n	8014fb8 <__libc_init_array+0x24>
 8014fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8014fd4 <__libc_init_array+0x40>)
 8014fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8014fd8 <__libc_init_array+0x44>)
 8014fa8:	f000 fe96 	bl	8015cd8 <_init>
 8014fac:	1b64      	subs	r4, r4, r5
 8014fae:	10a4      	asrs	r4, r4, #2
 8014fb0:	2600      	movs	r6, #0
 8014fb2:	42a6      	cmp	r6, r4
 8014fb4:	d105      	bne.n	8014fc2 <__libc_init_array+0x2e>
 8014fb6:	bd70      	pop	{r4, r5, r6, pc}
 8014fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fbc:	4798      	blx	r3
 8014fbe:	3601      	adds	r6, #1
 8014fc0:	e7ee      	b.n	8014fa0 <__libc_init_array+0xc>
 8014fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fc6:	4798      	blx	r3
 8014fc8:	3601      	adds	r6, #1
 8014fca:	e7f2      	b.n	8014fb2 <__libc_init_array+0x1e>
 8014fcc:	08016258 	.word	0x08016258
 8014fd0:	08016258 	.word	0x08016258
 8014fd4:	08016258 	.word	0x08016258
 8014fd8:	0801625c 	.word	0x0801625c

08014fdc <__retarget_lock_init_recursive>:
 8014fdc:	4770      	bx	lr

08014fde <__retarget_lock_acquire_recursive>:
 8014fde:	4770      	bx	lr

08014fe0 <__retarget_lock_release_recursive>:
 8014fe0:	4770      	bx	lr

08014fe2 <memcpy>:
 8014fe2:	440a      	add	r2, r1
 8014fe4:	4291      	cmp	r1, r2
 8014fe6:	f100 33ff 	add.w	r3, r0, #4294967295
 8014fea:	d100      	bne.n	8014fee <memcpy+0xc>
 8014fec:	4770      	bx	lr
 8014fee:	b510      	push	{r4, lr}
 8014ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ff8:	4291      	cmp	r1, r2
 8014ffa:	d1f9      	bne.n	8014ff0 <memcpy+0xe>
 8014ffc:	bd10      	pop	{r4, pc}
	...

08015000 <_free_r>:
 8015000:	b538      	push	{r3, r4, r5, lr}
 8015002:	4605      	mov	r5, r0
 8015004:	2900      	cmp	r1, #0
 8015006:	d041      	beq.n	801508c <_free_r+0x8c>
 8015008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801500c:	1f0c      	subs	r4, r1, #4
 801500e:	2b00      	cmp	r3, #0
 8015010:	bfb8      	it	lt
 8015012:	18e4      	addlt	r4, r4, r3
 8015014:	f7ff fd8e 	bl	8014b34 <__malloc_lock>
 8015018:	4a1d      	ldr	r2, [pc, #116]	@ (8015090 <_free_r+0x90>)
 801501a:	6813      	ldr	r3, [r2, #0]
 801501c:	b933      	cbnz	r3, 801502c <_free_r+0x2c>
 801501e:	6063      	str	r3, [r4, #4]
 8015020:	6014      	str	r4, [r2, #0]
 8015022:	4628      	mov	r0, r5
 8015024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015028:	f7ff bd8a 	b.w	8014b40 <__malloc_unlock>
 801502c:	42a3      	cmp	r3, r4
 801502e:	d908      	bls.n	8015042 <_free_r+0x42>
 8015030:	6820      	ldr	r0, [r4, #0]
 8015032:	1821      	adds	r1, r4, r0
 8015034:	428b      	cmp	r3, r1
 8015036:	bf01      	itttt	eq
 8015038:	6819      	ldreq	r1, [r3, #0]
 801503a:	685b      	ldreq	r3, [r3, #4]
 801503c:	1809      	addeq	r1, r1, r0
 801503e:	6021      	streq	r1, [r4, #0]
 8015040:	e7ed      	b.n	801501e <_free_r+0x1e>
 8015042:	461a      	mov	r2, r3
 8015044:	685b      	ldr	r3, [r3, #4]
 8015046:	b10b      	cbz	r3, 801504c <_free_r+0x4c>
 8015048:	42a3      	cmp	r3, r4
 801504a:	d9fa      	bls.n	8015042 <_free_r+0x42>
 801504c:	6811      	ldr	r1, [r2, #0]
 801504e:	1850      	adds	r0, r2, r1
 8015050:	42a0      	cmp	r0, r4
 8015052:	d10b      	bne.n	801506c <_free_r+0x6c>
 8015054:	6820      	ldr	r0, [r4, #0]
 8015056:	4401      	add	r1, r0
 8015058:	1850      	adds	r0, r2, r1
 801505a:	4283      	cmp	r3, r0
 801505c:	6011      	str	r1, [r2, #0]
 801505e:	d1e0      	bne.n	8015022 <_free_r+0x22>
 8015060:	6818      	ldr	r0, [r3, #0]
 8015062:	685b      	ldr	r3, [r3, #4]
 8015064:	6053      	str	r3, [r2, #4]
 8015066:	4408      	add	r0, r1
 8015068:	6010      	str	r0, [r2, #0]
 801506a:	e7da      	b.n	8015022 <_free_r+0x22>
 801506c:	d902      	bls.n	8015074 <_free_r+0x74>
 801506e:	230c      	movs	r3, #12
 8015070:	602b      	str	r3, [r5, #0]
 8015072:	e7d6      	b.n	8015022 <_free_r+0x22>
 8015074:	6820      	ldr	r0, [r4, #0]
 8015076:	1821      	adds	r1, r4, r0
 8015078:	428b      	cmp	r3, r1
 801507a:	bf04      	itt	eq
 801507c:	6819      	ldreq	r1, [r3, #0]
 801507e:	685b      	ldreq	r3, [r3, #4]
 8015080:	6063      	str	r3, [r4, #4]
 8015082:	bf04      	itt	eq
 8015084:	1809      	addeq	r1, r1, r0
 8015086:	6021      	streq	r1, [r4, #0]
 8015088:	6054      	str	r4, [r2, #4]
 801508a:	e7ca      	b.n	8015022 <_free_r+0x22>
 801508c:	bd38      	pop	{r3, r4, r5, pc}
 801508e:	bf00      	nop
 8015090:	200010f8 	.word	0x200010f8

08015094 <__ssputs_r>:
 8015094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015098:	688e      	ldr	r6, [r1, #8]
 801509a:	461f      	mov	r7, r3
 801509c:	42be      	cmp	r6, r7
 801509e:	680b      	ldr	r3, [r1, #0]
 80150a0:	4682      	mov	sl, r0
 80150a2:	460c      	mov	r4, r1
 80150a4:	4690      	mov	r8, r2
 80150a6:	d82d      	bhi.n	8015104 <__ssputs_r+0x70>
 80150a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80150ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80150b0:	d026      	beq.n	8015100 <__ssputs_r+0x6c>
 80150b2:	6965      	ldr	r5, [r4, #20]
 80150b4:	6909      	ldr	r1, [r1, #16]
 80150b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80150ba:	eba3 0901 	sub.w	r9, r3, r1
 80150be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80150c2:	1c7b      	adds	r3, r7, #1
 80150c4:	444b      	add	r3, r9
 80150c6:	106d      	asrs	r5, r5, #1
 80150c8:	429d      	cmp	r5, r3
 80150ca:	bf38      	it	cc
 80150cc:	461d      	movcc	r5, r3
 80150ce:	0553      	lsls	r3, r2, #21
 80150d0:	d527      	bpl.n	8015122 <__ssputs_r+0x8e>
 80150d2:	4629      	mov	r1, r5
 80150d4:	f7ff fcae 	bl	8014a34 <_malloc_r>
 80150d8:	4606      	mov	r6, r0
 80150da:	b360      	cbz	r0, 8015136 <__ssputs_r+0xa2>
 80150dc:	6921      	ldr	r1, [r4, #16]
 80150de:	464a      	mov	r2, r9
 80150e0:	f7ff ff7f 	bl	8014fe2 <memcpy>
 80150e4:	89a3      	ldrh	r3, [r4, #12]
 80150e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80150ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80150ee:	81a3      	strh	r3, [r4, #12]
 80150f0:	6126      	str	r6, [r4, #16]
 80150f2:	6165      	str	r5, [r4, #20]
 80150f4:	444e      	add	r6, r9
 80150f6:	eba5 0509 	sub.w	r5, r5, r9
 80150fa:	6026      	str	r6, [r4, #0]
 80150fc:	60a5      	str	r5, [r4, #8]
 80150fe:	463e      	mov	r6, r7
 8015100:	42be      	cmp	r6, r7
 8015102:	d900      	bls.n	8015106 <__ssputs_r+0x72>
 8015104:	463e      	mov	r6, r7
 8015106:	6820      	ldr	r0, [r4, #0]
 8015108:	4632      	mov	r2, r6
 801510a:	4641      	mov	r1, r8
 801510c:	f7ff fe69 	bl	8014de2 <memmove>
 8015110:	68a3      	ldr	r3, [r4, #8]
 8015112:	1b9b      	subs	r3, r3, r6
 8015114:	60a3      	str	r3, [r4, #8]
 8015116:	6823      	ldr	r3, [r4, #0]
 8015118:	4433      	add	r3, r6
 801511a:	6023      	str	r3, [r4, #0]
 801511c:	2000      	movs	r0, #0
 801511e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015122:	462a      	mov	r2, r5
 8015124:	f000 fd1e 	bl	8015b64 <_realloc_r>
 8015128:	4606      	mov	r6, r0
 801512a:	2800      	cmp	r0, #0
 801512c:	d1e0      	bne.n	80150f0 <__ssputs_r+0x5c>
 801512e:	6921      	ldr	r1, [r4, #16]
 8015130:	4650      	mov	r0, sl
 8015132:	f7ff ff65 	bl	8015000 <_free_r>
 8015136:	230c      	movs	r3, #12
 8015138:	f8ca 3000 	str.w	r3, [sl]
 801513c:	89a3      	ldrh	r3, [r4, #12]
 801513e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015142:	81a3      	strh	r3, [r4, #12]
 8015144:	f04f 30ff 	mov.w	r0, #4294967295
 8015148:	e7e9      	b.n	801511e <__ssputs_r+0x8a>
	...

0801514c <_svfiprintf_r>:
 801514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015150:	4698      	mov	r8, r3
 8015152:	898b      	ldrh	r3, [r1, #12]
 8015154:	061b      	lsls	r3, r3, #24
 8015156:	b09d      	sub	sp, #116	@ 0x74
 8015158:	4607      	mov	r7, r0
 801515a:	460d      	mov	r5, r1
 801515c:	4614      	mov	r4, r2
 801515e:	d510      	bpl.n	8015182 <_svfiprintf_r+0x36>
 8015160:	690b      	ldr	r3, [r1, #16]
 8015162:	b973      	cbnz	r3, 8015182 <_svfiprintf_r+0x36>
 8015164:	2140      	movs	r1, #64	@ 0x40
 8015166:	f7ff fc65 	bl	8014a34 <_malloc_r>
 801516a:	6028      	str	r0, [r5, #0]
 801516c:	6128      	str	r0, [r5, #16]
 801516e:	b930      	cbnz	r0, 801517e <_svfiprintf_r+0x32>
 8015170:	230c      	movs	r3, #12
 8015172:	603b      	str	r3, [r7, #0]
 8015174:	f04f 30ff 	mov.w	r0, #4294967295
 8015178:	b01d      	add	sp, #116	@ 0x74
 801517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801517e:	2340      	movs	r3, #64	@ 0x40
 8015180:	616b      	str	r3, [r5, #20]
 8015182:	2300      	movs	r3, #0
 8015184:	9309      	str	r3, [sp, #36]	@ 0x24
 8015186:	2320      	movs	r3, #32
 8015188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801518c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015190:	2330      	movs	r3, #48	@ 0x30
 8015192:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015330 <_svfiprintf_r+0x1e4>
 8015196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801519a:	f04f 0901 	mov.w	r9, #1
 801519e:	4623      	mov	r3, r4
 80151a0:	469a      	mov	sl, r3
 80151a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151a6:	b10a      	cbz	r2, 80151ac <_svfiprintf_r+0x60>
 80151a8:	2a25      	cmp	r2, #37	@ 0x25
 80151aa:	d1f9      	bne.n	80151a0 <_svfiprintf_r+0x54>
 80151ac:	ebba 0b04 	subs.w	fp, sl, r4
 80151b0:	d00b      	beq.n	80151ca <_svfiprintf_r+0x7e>
 80151b2:	465b      	mov	r3, fp
 80151b4:	4622      	mov	r2, r4
 80151b6:	4629      	mov	r1, r5
 80151b8:	4638      	mov	r0, r7
 80151ba:	f7ff ff6b 	bl	8015094 <__ssputs_r>
 80151be:	3001      	adds	r0, #1
 80151c0:	f000 80a7 	beq.w	8015312 <_svfiprintf_r+0x1c6>
 80151c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80151c6:	445a      	add	r2, fp
 80151c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80151ca:	f89a 3000 	ldrb.w	r3, [sl]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	f000 809f 	beq.w	8015312 <_svfiprintf_r+0x1c6>
 80151d4:	2300      	movs	r3, #0
 80151d6:	f04f 32ff 	mov.w	r2, #4294967295
 80151da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151de:	f10a 0a01 	add.w	sl, sl, #1
 80151e2:	9304      	str	r3, [sp, #16]
 80151e4:	9307      	str	r3, [sp, #28]
 80151e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80151ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80151ec:	4654      	mov	r4, sl
 80151ee:	2205      	movs	r2, #5
 80151f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151f4:	484e      	ldr	r0, [pc, #312]	@ (8015330 <_svfiprintf_r+0x1e4>)
 80151f6:	f7eb f803 	bl	8000200 <memchr>
 80151fa:	9a04      	ldr	r2, [sp, #16]
 80151fc:	b9d8      	cbnz	r0, 8015236 <_svfiprintf_r+0xea>
 80151fe:	06d0      	lsls	r0, r2, #27
 8015200:	bf44      	itt	mi
 8015202:	2320      	movmi	r3, #32
 8015204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015208:	0711      	lsls	r1, r2, #28
 801520a:	bf44      	itt	mi
 801520c:	232b      	movmi	r3, #43	@ 0x2b
 801520e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015212:	f89a 3000 	ldrb.w	r3, [sl]
 8015216:	2b2a      	cmp	r3, #42	@ 0x2a
 8015218:	d015      	beq.n	8015246 <_svfiprintf_r+0xfa>
 801521a:	9a07      	ldr	r2, [sp, #28]
 801521c:	4654      	mov	r4, sl
 801521e:	2000      	movs	r0, #0
 8015220:	f04f 0c0a 	mov.w	ip, #10
 8015224:	4621      	mov	r1, r4
 8015226:	f811 3b01 	ldrb.w	r3, [r1], #1
 801522a:	3b30      	subs	r3, #48	@ 0x30
 801522c:	2b09      	cmp	r3, #9
 801522e:	d94b      	bls.n	80152c8 <_svfiprintf_r+0x17c>
 8015230:	b1b0      	cbz	r0, 8015260 <_svfiprintf_r+0x114>
 8015232:	9207      	str	r2, [sp, #28]
 8015234:	e014      	b.n	8015260 <_svfiprintf_r+0x114>
 8015236:	eba0 0308 	sub.w	r3, r0, r8
 801523a:	fa09 f303 	lsl.w	r3, r9, r3
 801523e:	4313      	orrs	r3, r2
 8015240:	9304      	str	r3, [sp, #16]
 8015242:	46a2      	mov	sl, r4
 8015244:	e7d2      	b.n	80151ec <_svfiprintf_r+0xa0>
 8015246:	9b03      	ldr	r3, [sp, #12]
 8015248:	1d19      	adds	r1, r3, #4
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	9103      	str	r1, [sp, #12]
 801524e:	2b00      	cmp	r3, #0
 8015250:	bfbb      	ittet	lt
 8015252:	425b      	neglt	r3, r3
 8015254:	f042 0202 	orrlt.w	r2, r2, #2
 8015258:	9307      	strge	r3, [sp, #28]
 801525a:	9307      	strlt	r3, [sp, #28]
 801525c:	bfb8      	it	lt
 801525e:	9204      	strlt	r2, [sp, #16]
 8015260:	7823      	ldrb	r3, [r4, #0]
 8015262:	2b2e      	cmp	r3, #46	@ 0x2e
 8015264:	d10a      	bne.n	801527c <_svfiprintf_r+0x130>
 8015266:	7863      	ldrb	r3, [r4, #1]
 8015268:	2b2a      	cmp	r3, #42	@ 0x2a
 801526a:	d132      	bne.n	80152d2 <_svfiprintf_r+0x186>
 801526c:	9b03      	ldr	r3, [sp, #12]
 801526e:	1d1a      	adds	r2, r3, #4
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	9203      	str	r2, [sp, #12]
 8015274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015278:	3402      	adds	r4, #2
 801527a:	9305      	str	r3, [sp, #20]
 801527c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015340 <_svfiprintf_r+0x1f4>
 8015280:	7821      	ldrb	r1, [r4, #0]
 8015282:	2203      	movs	r2, #3
 8015284:	4650      	mov	r0, sl
 8015286:	f7ea ffbb 	bl	8000200 <memchr>
 801528a:	b138      	cbz	r0, 801529c <_svfiprintf_r+0x150>
 801528c:	9b04      	ldr	r3, [sp, #16]
 801528e:	eba0 000a 	sub.w	r0, r0, sl
 8015292:	2240      	movs	r2, #64	@ 0x40
 8015294:	4082      	lsls	r2, r0
 8015296:	4313      	orrs	r3, r2
 8015298:	3401      	adds	r4, #1
 801529a:	9304      	str	r3, [sp, #16]
 801529c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152a0:	4824      	ldr	r0, [pc, #144]	@ (8015334 <_svfiprintf_r+0x1e8>)
 80152a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80152a6:	2206      	movs	r2, #6
 80152a8:	f7ea ffaa 	bl	8000200 <memchr>
 80152ac:	2800      	cmp	r0, #0
 80152ae:	d036      	beq.n	801531e <_svfiprintf_r+0x1d2>
 80152b0:	4b21      	ldr	r3, [pc, #132]	@ (8015338 <_svfiprintf_r+0x1ec>)
 80152b2:	bb1b      	cbnz	r3, 80152fc <_svfiprintf_r+0x1b0>
 80152b4:	9b03      	ldr	r3, [sp, #12]
 80152b6:	3307      	adds	r3, #7
 80152b8:	f023 0307 	bic.w	r3, r3, #7
 80152bc:	3308      	adds	r3, #8
 80152be:	9303      	str	r3, [sp, #12]
 80152c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152c2:	4433      	add	r3, r6
 80152c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80152c6:	e76a      	b.n	801519e <_svfiprintf_r+0x52>
 80152c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80152cc:	460c      	mov	r4, r1
 80152ce:	2001      	movs	r0, #1
 80152d0:	e7a8      	b.n	8015224 <_svfiprintf_r+0xd8>
 80152d2:	2300      	movs	r3, #0
 80152d4:	3401      	adds	r4, #1
 80152d6:	9305      	str	r3, [sp, #20]
 80152d8:	4619      	mov	r1, r3
 80152da:	f04f 0c0a 	mov.w	ip, #10
 80152de:	4620      	mov	r0, r4
 80152e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152e4:	3a30      	subs	r2, #48	@ 0x30
 80152e6:	2a09      	cmp	r2, #9
 80152e8:	d903      	bls.n	80152f2 <_svfiprintf_r+0x1a6>
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d0c6      	beq.n	801527c <_svfiprintf_r+0x130>
 80152ee:	9105      	str	r1, [sp, #20]
 80152f0:	e7c4      	b.n	801527c <_svfiprintf_r+0x130>
 80152f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80152f6:	4604      	mov	r4, r0
 80152f8:	2301      	movs	r3, #1
 80152fa:	e7f0      	b.n	80152de <_svfiprintf_r+0x192>
 80152fc:	ab03      	add	r3, sp, #12
 80152fe:	9300      	str	r3, [sp, #0]
 8015300:	462a      	mov	r2, r5
 8015302:	4b0e      	ldr	r3, [pc, #56]	@ (801533c <_svfiprintf_r+0x1f0>)
 8015304:	a904      	add	r1, sp, #16
 8015306:	4638      	mov	r0, r7
 8015308:	f3af 8000 	nop.w
 801530c:	1c42      	adds	r2, r0, #1
 801530e:	4606      	mov	r6, r0
 8015310:	d1d6      	bne.n	80152c0 <_svfiprintf_r+0x174>
 8015312:	89ab      	ldrh	r3, [r5, #12]
 8015314:	065b      	lsls	r3, r3, #25
 8015316:	f53f af2d 	bmi.w	8015174 <_svfiprintf_r+0x28>
 801531a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801531c:	e72c      	b.n	8015178 <_svfiprintf_r+0x2c>
 801531e:	ab03      	add	r3, sp, #12
 8015320:	9300      	str	r3, [sp, #0]
 8015322:	462a      	mov	r2, r5
 8015324:	4b05      	ldr	r3, [pc, #20]	@ (801533c <_svfiprintf_r+0x1f0>)
 8015326:	a904      	add	r1, sp, #16
 8015328:	4638      	mov	r0, r7
 801532a:	f000 f9bb 	bl	80156a4 <_printf_i>
 801532e:	e7ed      	b.n	801530c <_svfiprintf_r+0x1c0>
 8015330:	0801621b 	.word	0x0801621b
 8015334:	08016225 	.word	0x08016225
 8015338:	00000000 	.word	0x00000000
 801533c:	08015095 	.word	0x08015095
 8015340:	08016221 	.word	0x08016221

08015344 <__sfputc_r>:
 8015344:	6893      	ldr	r3, [r2, #8]
 8015346:	3b01      	subs	r3, #1
 8015348:	2b00      	cmp	r3, #0
 801534a:	b410      	push	{r4}
 801534c:	6093      	str	r3, [r2, #8]
 801534e:	da08      	bge.n	8015362 <__sfputc_r+0x1e>
 8015350:	6994      	ldr	r4, [r2, #24]
 8015352:	42a3      	cmp	r3, r4
 8015354:	db01      	blt.n	801535a <__sfputc_r+0x16>
 8015356:	290a      	cmp	r1, #10
 8015358:	d103      	bne.n	8015362 <__sfputc_r+0x1e>
 801535a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801535e:	f000 bb6d 	b.w	8015a3c <__swbuf_r>
 8015362:	6813      	ldr	r3, [r2, #0]
 8015364:	1c58      	adds	r0, r3, #1
 8015366:	6010      	str	r0, [r2, #0]
 8015368:	7019      	strb	r1, [r3, #0]
 801536a:	4608      	mov	r0, r1
 801536c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015370:	4770      	bx	lr

08015372 <__sfputs_r>:
 8015372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015374:	4606      	mov	r6, r0
 8015376:	460f      	mov	r7, r1
 8015378:	4614      	mov	r4, r2
 801537a:	18d5      	adds	r5, r2, r3
 801537c:	42ac      	cmp	r4, r5
 801537e:	d101      	bne.n	8015384 <__sfputs_r+0x12>
 8015380:	2000      	movs	r0, #0
 8015382:	e007      	b.n	8015394 <__sfputs_r+0x22>
 8015384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015388:	463a      	mov	r2, r7
 801538a:	4630      	mov	r0, r6
 801538c:	f7ff ffda 	bl	8015344 <__sfputc_r>
 8015390:	1c43      	adds	r3, r0, #1
 8015392:	d1f3      	bne.n	801537c <__sfputs_r+0xa>
 8015394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015398 <_vfiprintf_r>:
 8015398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801539c:	460d      	mov	r5, r1
 801539e:	b09d      	sub	sp, #116	@ 0x74
 80153a0:	4614      	mov	r4, r2
 80153a2:	4698      	mov	r8, r3
 80153a4:	4606      	mov	r6, r0
 80153a6:	b118      	cbz	r0, 80153b0 <_vfiprintf_r+0x18>
 80153a8:	6a03      	ldr	r3, [r0, #32]
 80153aa:	b90b      	cbnz	r3, 80153b0 <_vfiprintf_r+0x18>
 80153ac:	f7ff fc5a 	bl	8014c64 <__sinit>
 80153b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80153b2:	07d9      	lsls	r1, r3, #31
 80153b4:	d405      	bmi.n	80153c2 <_vfiprintf_r+0x2a>
 80153b6:	89ab      	ldrh	r3, [r5, #12]
 80153b8:	059a      	lsls	r2, r3, #22
 80153ba:	d402      	bmi.n	80153c2 <_vfiprintf_r+0x2a>
 80153bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80153be:	f7ff fe0e 	bl	8014fde <__retarget_lock_acquire_recursive>
 80153c2:	89ab      	ldrh	r3, [r5, #12]
 80153c4:	071b      	lsls	r3, r3, #28
 80153c6:	d501      	bpl.n	80153cc <_vfiprintf_r+0x34>
 80153c8:	692b      	ldr	r3, [r5, #16]
 80153ca:	b99b      	cbnz	r3, 80153f4 <_vfiprintf_r+0x5c>
 80153cc:	4629      	mov	r1, r5
 80153ce:	4630      	mov	r0, r6
 80153d0:	f000 fb72 	bl	8015ab8 <__swsetup_r>
 80153d4:	b170      	cbz	r0, 80153f4 <_vfiprintf_r+0x5c>
 80153d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80153d8:	07dc      	lsls	r4, r3, #31
 80153da:	d504      	bpl.n	80153e6 <_vfiprintf_r+0x4e>
 80153dc:	f04f 30ff 	mov.w	r0, #4294967295
 80153e0:	b01d      	add	sp, #116	@ 0x74
 80153e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153e6:	89ab      	ldrh	r3, [r5, #12]
 80153e8:	0598      	lsls	r0, r3, #22
 80153ea:	d4f7      	bmi.n	80153dc <_vfiprintf_r+0x44>
 80153ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80153ee:	f7ff fdf7 	bl	8014fe0 <__retarget_lock_release_recursive>
 80153f2:	e7f3      	b.n	80153dc <_vfiprintf_r+0x44>
 80153f4:	2300      	movs	r3, #0
 80153f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80153f8:	2320      	movs	r3, #32
 80153fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80153fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015402:	2330      	movs	r3, #48	@ 0x30
 8015404:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80155b4 <_vfiprintf_r+0x21c>
 8015408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801540c:	f04f 0901 	mov.w	r9, #1
 8015410:	4623      	mov	r3, r4
 8015412:	469a      	mov	sl, r3
 8015414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015418:	b10a      	cbz	r2, 801541e <_vfiprintf_r+0x86>
 801541a:	2a25      	cmp	r2, #37	@ 0x25
 801541c:	d1f9      	bne.n	8015412 <_vfiprintf_r+0x7a>
 801541e:	ebba 0b04 	subs.w	fp, sl, r4
 8015422:	d00b      	beq.n	801543c <_vfiprintf_r+0xa4>
 8015424:	465b      	mov	r3, fp
 8015426:	4622      	mov	r2, r4
 8015428:	4629      	mov	r1, r5
 801542a:	4630      	mov	r0, r6
 801542c:	f7ff ffa1 	bl	8015372 <__sfputs_r>
 8015430:	3001      	adds	r0, #1
 8015432:	f000 80a7 	beq.w	8015584 <_vfiprintf_r+0x1ec>
 8015436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015438:	445a      	add	r2, fp
 801543a:	9209      	str	r2, [sp, #36]	@ 0x24
 801543c:	f89a 3000 	ldrb.w	r3, [sl]
 8015440:	2b00      	cmp	r3, #0
 8015442:	f000 809f 	beq.w	8015584 <_vfiprintf_r+0x1ec>
 8015446:	2300      	movs	r3, #0
 8015448:	f04f 32ff 	mov.w	r2, #4294967295
 801544c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015450:	f10a 0a01 	add.w	sl, sl, #1
 8015454:	9304      	str	r3, [sp, #16]
 8015456:	9307      	str	r3, [sp, #28]
 8015458:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801545c:	931a      	str	r3, [sp, #104]	@ 0x68
 801545e:	4654      	mov	r4, sl
 8015460:	2205      	movs	r2, #5
 8015462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015466:	4853      	ldr	r0, [pc, #332]	@ (80155b4 <_vfiprintf_r+0x21c>)
 8015468:	f7ea feca 	bl	8000200 <memchr>
 801546c:	9a04      	ldr	r2, [sp, #16]
 801546e:	b9d8      	cbnz	r0, 80154a8 <_vfiprintf_r+0x110>
 8015470:	06d1      	lsls	r1, r2, #27
 8015472:	bf44      	itt	mi
 8015474:	2320      	movmi	r3, #32
 8015476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801547a:	0713      	lsls	r3, r2, #28
 801547c:	bf44      	itt	mi
 801547e:	232b      	movmi	r3, #43	@ 0x2b
 8015480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015484:	f89a 3000 	ldrb.w	r3, [sl]
 8015488:	2b2a      	cmp	r3, #42	@ 0x2a
 801548a:	d015      	beq.n	80154b8 <_vfiprintf_r+0x120>
 801548c:	9a07      	ldr	r2, [sp, #28]
 801548e:	4654      	mov	r4, sl
 8015490:	2000      	movs	r0, #0
 8015492:	f04f 0c0a 	mov.w	ip, #10
 8015496:	4621      	mov	r1, r4
 8015498:	f811 3b01 	ldrb.w	r3, [r1], #1
 801549c:	3b30      	subs	r3, #48	@ 0x30
 801549e:	2b09      	cmp	r3, #9
 80154a0:	d94b      	bls.n	801553a <_vfiprintf_r+0x1a2>
 80154a2:	b1b0      	cbz	r0, 80154d2 <_vfiprintf_r+0x13a>
 80154a4:	9207      	str	r2, [sp, #28]
 80154a6:	e014      	b.n	80154d2 <_vfiprintf_r+0x13a>
 80154a8:	eba0 0308 	sub.w	r3, r0, r8
 80154ac:	fa09 f303 	lsl.w	r3, r9, r3
 80154b0:	4313      	orrs	r3, r2
 80154b2:	9304      	str	r3, [sp, #16]
 80154b4:	46a2      	mov	sl, r4
 80154b6:	e7d2      	b.n	801545e <_vfiprintf_r+0xc6>
 80154b8:	9b03      	ldr	r3, [sp, #12]
 80154ba:	1d19      	adds	r1, r3, #4
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	9103      	str	r1, [sp, #12]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	bfbb      	ittet	lt
 80154c4:	425b      	neglt	r3, r3
 80154c6:	f042 0202 	orrlt.w	r2, r2, #2
 80154ca:	9307      	strge	r3, [sp, #28]
 80154cc:	9307      	strlt	r3, [sp, #28]
 80154ce:	bfb8      	it	lt
 80154d0:	9204      	strlt	r2, [sp, #16]
 80154d2:	7823      	ldrb	r3, [r4, #0]
 80154d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80154d6:	d10a      	bne.n	80154ee <_vfiprintf_r+0x156>
 80154d8:	7863      	ldrb	r3, [r4, #1]
 80154da:	2b2a      	cmp	r3, #42	@ 0x2a
 80154dc:	d132      	bne.n	8015544 <_vfiprintf_r+0x1ac>
 80154de:	9b03      	ldr	r3, [sp, #12]
 80154e0:	1d1a      	adds	r2, r3, #4
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	9203      	str	r2, [sp, #12]
 80154e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80154ea:	3402      	adds	r4, #2
 80154ec:	9305      	str	r3, [sp, #20]
 80154ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80155c4 <_vfiprintf_r+0x22c>
 80154f2:	7821      	ldrb	r1, [r4, #0]
 80154f4:	2203      	movs	r2, #3
 80154f6:	4650      	mov	r0, sl
 80154f8:	f7ea fe82 	bl	8000200 <memchr>
 80154fc:	b138      	cbz	r0, 801550e <_vfiprintf_r+0x176>
 80154fe:	9b04      	ldr	r3, [sp, #16]
 8015500:	eba0 000a 	sub.w	r0, r0, sl
 8015504:	2240      	movs	r2, #64	@ 0x40
 8015506:	4082      	lsls	r2, r0
 8015508:	4313      	orrs	r3, r2
 801550a:	3401      	adds	r4, #1
 801550c:	9304      	str	r3, [sp, #16]
 801550e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015512:	4829      	ldr	r0, [pc, #164]	@ (80155b8 <_vfiprintf_r+0x220>)
 8015514:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015518:	2206      	movs	r2, #6
 801551a:	f7ea fe71 	bl	8000200 <memchr>
 801551e:	2800      	cmp	r0, #0
 8015520:	d03f      	beq.n	80155a2 <_vfiprintf_r+0x20a>
 8015522:	4b26      	ldr	r3, [pc, #152]	@ (80155bc <_vfiprintf_r+0x224>)
 8015524:	bb1b      	cbnz	r3, 801556e <_vfiprintf_r+0x1d6>
 8015526:	9b03      	ldr	r3, [sp, #12]
 8015528:	3307      	adds	r3, #7
 801552a:	f023 0307 	bic.w	r3, r3, #7
 801552e:	3308      	adds	r3, #8
 8015530:	9303      	str	r3, [sp, #12]
 8015532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015534:	443b      	add	r3, r7
 8015536:	9309      	str	r3, [sp, #36]	@ 0x24
 8015538:	e76a      	b.n	8015410 <_vfiprintf_r+0x78>
 801553a:	fb0c 3202 	mla	r2, ip, r2, r3
 801553e:	460c      	mov	r4, r1
 8015540:	2001      	movs	r0, #1
 8015542:	e7a8      	b.n	8015496 <_vfiprintf_r+0xfe>
 8015544:	2300      	movs	r3, #0
 8015546:	3401      	adds	r4, #1
 8015548:	9305      	str	r3, [sp, #20]
 801554a:	4619      	mov	r1, r3
 801554c:	f04f 0c0a 	mov.w	ip, #10
 8015550:	4620      	mov	r0, r4
 8015552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015556:	3a30      	subs	r2, #48	@ 0x30
 8015558:	2a09      	cmp	r2, #9
 801555a:	d903      	bls.n	8015564 <_vfiprintf_r+0x1cc>
 801555c:	2b00      	cmp	r3, #0
 801555e:	d0c6      	beq.n	80154ee <_vfiprintf_r+0x156>
 8015560:	9105      	str	r1, [sp, #20]
 8015562:	e7c4      	b.n	80154ee <_vfiprintf_r+0x156>
 8015564:	fb0c 2101 	mla	r1, ip, r1, r2
 8015568:	4604      	mov	r4, r0
 801556a:	2301      	movs	r3, #1
 801556c:	e7f0      	b.n	8015550 <_vfiprintf_r+0x1b8>
 801556e:	ab03      	add	r3, sp, #12
 8015570:	9300      	str	r3, [sp, #0]
 8015572:	462a      	mov	r2, r5
 8015574:	4b12      	ldr	r3, [pc, #72]	@ (80155c0 <_vfiprintf_r+0x228>)
 8015576:	a904      	add	r1, sp, #16
 8015578:	4630      	mov	r0, r6
 801557a:	f3af 8000 	nop.w
 801557e:	4607      	mov	r7, r0
 8015580:	1c78      	adds	r0, r7, #1
 8015582:	d1d6      	bne.n	8015532 <_vfiprintf_r+0x19a>
 8015584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015586:	07d9      	lsls	r1, r3, #31
 8015588:	d405      	bmi.n	8015596 <_vfiprintf_r+0x1fe>
 801558a:	89ab      	ldrh	r3, [r5, #12]
 801558c:	059a      	lsls	r2, r3, #22
 801558e:	d402      	bmi.n	8015596 <_vfiprintf_r+0x1fe>
 8015590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015592:	f7ff fd25 	bl	8014fe0 <__retarget_lock_release_recursive>
 8015596:	89ab      	ldrh	r3, [r5, #12]
 8015598:	065b      	lsls	r3, r3, #25
 801559a:	f53f af1f 	bmi.w	80153dc <_vfiprintf_r+0x44>
 801559e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80155a0:	e71e      	b.n	80153e0 <_vfiprintf_r+0x48>
 80155a2:	ab03      	add	r3, sp, #12
 80155a4:	9300      	str	r3, [sp, #0]
 80155a6:	462a      	mov	r2, r5
 80155a8:	4b05      	ldr	r3, [pc, #20]	@ (80155c0 <_vfiprintf_r+0x228>)
 80155aa:	a904      	add	r1, sp, #16
 80155ac:	4630      	mov	r0, r6
 80155ae:	f000 f879 	bl	80156a4 <_printf_i>
 80155b2:	e7e4      	b.n	801557e <_vfiprintf_r+0x1e6>
 80155b4:	0801621b 	.word	0x0801621b
 80155b8:	08016225 	.word	0x08016225
 80155bc:	00000000 	.word	0x00000000
 80155c0:	08015373 	.word	0x08015373
 80155c4:	08016221 	.word	0x08016221

080155c8 <_printf_common>:
 80155c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155cc:	4616      	mov	r6, r2
 80155ce:	4698      	mov	r8, r3
 80155d0:	688a      	ldr	r2, [r1, #8]
 80155d2:	690b      	ldr	r3, [r1, #16]
 80155d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80155d8:	4293      	cmp	r3, r2
 80155da:	bfb8      	it	lt
 80155dc:	4613      	movlt	r3, r2
 80155de:	6033      	str	r3, [r6, #0]
 80155e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80155e4:	4607      	mov	r7, r0
 80155e6:	460c      	mov	r4, r1
 80155e8:	b10a      	cbz	r2, 80155ee <_printf_common+0x26>
 80155ea:	3301      	adds	r3, #1
 80155ec:	6033      	str	r3, [r6, #0]
 80155ee:	6823      	ldr	r3, [r4, #0]
 80155f0:	0699      	lsls	r1, r3, #26
 80155f2:	bf42      	ittt	mi
 80155f4:	6833      	ldrmi	r3, [r6, #0]
 80155f6:	3302      	addmi	r3, #2
 80155f8:	6033      	strmi	r3, [r6, #0]
 80155fa:	6825      	ldr	r5, [r4, #0]
 80155fc:	f015 0506 	ands.w	r5, r5, #6
 8015600:	d106      	bne.n	8015610 <_printf_common+0x48>
 8015602:	f104 0a19 	add.w	sl, r4, #25
 8015606:	68e3      	ldr	r3, [r4, #12]
 8015608:	6832      	ldr	r2, [r6, #0]
 801560a:	1a9b      	subs	r3, r3, r2
 801560c:	42ab      	cmp	r3, r5
 801560e:	dc26      	bgt.n	801565e <_printf_common+0x96>
 8015610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015614:	6822      	ldr	r2, [r4, #0]
 8015616:	3b00      	subs	r3, #0
 8015618:	bf18      	it	ne
 801561a:	2301      	movne	r3, #1
 801561c:	0692      	lsls	r2, r2, #26
 801561e:	d42b      	bmi.n	8015678 <_printf_common+0xb0>
 8015620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015624:	4641      	mov	r1, r8
 8015626:	4638      	mov	r0, r7
 8015628:	47c8      	blx	r9
 801562a:	3001      	adds	r0, #1
 801562c:	d01e      	beq.n	801566c <_printf_common+0xa4>
 801562e:	6823      	ldr	r3, [r4, #0]
 8015630:	6922      	ldr	r2, [r4, #16]
 8015632:	f003 0306 	and.w	r3, r3, #6
 8015636:	2b04      	cmp	r3, #4
 8015638:	bf02      	ittt	eq
 801563a:	68e5      	ldreq	r5, [r4, #12]
 801563c:	6833      	ldreq	r3, [r6, #0]
 801563e:	1aed      	subeq	r5, r5, r3
 8015640:	68a3      	ldr	r3, [r4, #8]
 8015642:	bf0c      	ite	eq
 8015644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015648:	2500      	movne	r5, #0
 801564a:	4293      	cmp	r3, r2
 801564c:	bfc4      	itt	gt
 801564e:	1a9b      	subgt	r3, r3, r2
 8015650:	18ed      	addgt	r5, r5, r3
 8015652:	2600      	movs	r6, #0
 8015654:	341a      	adds	r4, #26
 8015656:	42b5      	cmp	r5, r6
 8015658:	d11a      	bne.n	8015690 <_printf_common+0xc8>
 801565a:	2000      	movs	r0, #0
 801565c:	e008      	b.n	8015670 <_printf_common+0xa8>
 801565e:	2301      	movs	r3, #1
 8015660:	4652      	mov	r2, sl
 8015662:	4641      	mov	r1, r8
 8015664:	4638      	mov	r0, r7
 8015666:	47c8      	blx	r9
 8015668:	3001      	adds	r0, #1
 801566a:	d103      	bne.n	8015674 <_printf_common+0xac>
 801566c:	f04f 30ff 	mov.w	r0, #4294967295
 8015670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015674:	3501      	adds	r5, #1
 8015676:	e7c6      	b.n	8015606 <_printf_common+0x3e>
 8015678:	18e1      	adds	r1, r4, r3
 801567a:	1c5a      	adds	r2, r3, #1
 801567c:	2030      	movs	r0, #48	@ 0x30
 801567e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015682:	4422      	add	r2, r4
 8015684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801568c:	3302      	adds	r3, #2
 801568e:	e7c7      	b.n	8015620 <_printf_common+0x58>
 8015690:	2301      	movs	r3, #1
 8015692:	4622      	mov	r2, r4
 8015694:	4641      	mov	r1, r8
 8015696:	4638      	mov	r0, r7
 8015698:	47c8      	blx	r9
 801569a:	3001      	adds	r0, #1
 801569c:	d0e6      	beq.n	801566c <_printf_common+0xa4>
 801569e:	3601      	adds	r6, #1
 80156a0:	e7d9      	b.n	8015656 <_printf_common+0x8e>
	...

080156a4 <_printf_i>:
 80156a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80156a8:	7e0f      	ldrb	r7, [r1, #24]
 80156aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80156ac:	2f78      	cmp	r7, #120	@ 0x78
 80156ae:	4691      	mov	r9, r2
 80156b0:	4680      	mov	r8, r0
 80156b2:	460c      	mov	r4, r1
 80156b4:	469a      	mov	sl, r3
 80156b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80156ba:	d807      	bhi.n	80156cc <_printf_i+0x28>
 80156bc:	2f62      	cmp	r7, #98	@ 0x62
 80156be:	d80a      	bhi.n	80156d6 <_printf_i+0x32>
 80156c0:	2f00      	cmp	r7, #0
 80156c2:	f000 80d2 	beq.w	801586a <_printf_i+0x1c6>
 80156c6:	2f58      	cmp	r7, #88	@ 0x58
 80156c8:	f000 80b9 	beq.w	801583e <_printf_i+0x19a>
 80156cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80156d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80156d4:	e03a      	b.n	801574c <_printf_i+0xa8>
 80156d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80156da:	2b15      	cmp	r3, #21
 80156dc:	d8f6      	bhi.n	80156cc <_printf_i+0x28>
 80156de:	a101      	add	r1, pc, #4	@ (adr r1, 80156e4 <_printf_i+0x40>)
 80156e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80156e4:	0801573d 	.word	0x0801573d
 80156e8:	08015751 	.word	0x08015751
 80156ec:	080156cd 	.word	0x080156cd
 80156f0:	080156cd 	.word	0x080156cd
 80156f4:	080156cd 	.word	0x080156cd
 80156f8:	080156cd 	.word	0x080156cd
 80156fc:	08015751 	.word	0x08015751
 8015700:	080156cd 	.word	0x080156cd
 8015704:	080156cd 	.word	0x080156cd
 8015708:	080156cd 	.word	0x080156cd
 801570c:	080156cd 	.word	0x080156cd
 8015710:	08015851 	.word	0x08015851
 8015714:	0801577b 	.word	0x0801577b
 8015718:	0801580b 	.word	0x0801580b
 801571c:	080156cd 	.word	0x080156cd
 8015720:	080156cd 	.word	0x080156cd
 8015724:	08015873 	.word	0x08015873
 8015728:	080156cd 	.word	0x080156cd
 801572c:	0801577b 	.word	0x0801577b
 8015730:	080156cd 	.word	0x080156cd
 8015734:	080156cd 	.word	0x080156cd
 8015738:	08015813 	.word	0x08015813
 801573c:	6833      	ldr	r3, [r6, #0]
 801573e:	1d1a      	adds	r2, r3, #4
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	6032      	str	r2, [r6, #0]
 8015744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801574c:	2301      	movs	r3, #1
 801574e:	e09d      	b.n	801588c <_printf_i+0x1e8>
 8015750:	6833      	ldr	r3, [r6, #0]
 8015752:	6820      	ldr	r0, [r4, #0]
 8015754:	1d19      	adds	r1, r3, #4
 8015756:	6031      	str	r1, [r6, #0]
 8015758:	0606      	lsls	r6, r0, #24
 801575a:	d501      	bpl.n	8015760 <_printf_i+0xbc>
 801575c:	681d      	ldr	r5, [r3, #0]
 801575e:	e003      	b.n	8015768 <_printf_i+0xc4>
 8015760:	0645      	lsls	r5, r0, #25
 8015762:	d5fb      	bpl.n	801575c <_printf_i+0xb8>
 8015764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015768:	2d00      	cmp	r5, #0
 801576a:	da03      	bge.n	8015774 <_printf_i+0xd0>
 801576c:	232d      	movs	r3, #45	@ 0x2d
 801576e:	426d      	negs	r5, r5
 8015770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015774:	4859      	ldr	r0, [pc, #356]	@ (80158dc <_printf_i+0x238>)
 8015776:	230a      	movs	r3, #10
 8015778:	e011      	b.n	801579e <_printf_i+0xfa>
 801577a:	6821      	ldr	r1, [r4, #0]
 801577c:	6833      	ldr	r3, [r6, #0]
 801577e:	0608      	lsls	r0, r1, #24
 8015780:	f853 5b04 	ldr.w	r5, [r3], #4
 8015784:	d402      	bmi.n	801578c <_printf_i+0xe8>
 8015786:	0649      	lsls	r1, r1, #25
 8015788:	bf48      	it	mi
 801578a:	b2ad      	uxthmi	r5, r5
 801578c:	2f6f      	cmp	r7, #111	@ 0x6f
 801578e:	4853      	ldr	r0, [pc, #332]	@ (80158dc <_printf_i+0x238>)
 8015790:	6033      	str	r3, [r6, #0]
 8015792:	bf14      	ite	ne
 8015794:	230a      	movne	r3, #10
 8015796:	2308      	moveq	r3, #8
 8015798:	2100      	movs	r1, #0
 801579a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801579e:	6866      	ldr	r6, [r4, #4]
 80157a0:	60a6      	str	r6, [r4, #8]
 80157a2:	2e00      	cmp	r6, #0
 80157a4:	bfa2      	ittt	ge
 80157a6:	6821      	ldrge	r1, [r4, #0]
 80157a8:	f021 0104 	bicge.w	r1, r1, #4
 80157ac:	6021      	strge	r1, [r4, #0]
 80157ae:	b90d      	cbnz	r5, 80157b4 <_printf_i+0x110>
 80157b0:	2e00      	cmp	r6, #0
 80157b2:	d04b      	beq.n	801584c <_printf_i+0x1a8>
 80157b4:	4616      	mov	r6, r2
 80157b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80157ba:	fb03 5711 	mls	r7, r3, r1, r5
 80157be:	5dc7      	ldrb	r7, [r0, r7]
 80157c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80157c4:	462f      	mov	r7, r5
 80157c6:	42bb      	cmp	r3, r7
 80157c8:	460d      	mov	r5, r1
 80157ca:	d9f4      	bls.n	80157b6 <_printf_i+0x112>
 80157cc:	2b08      	cmp	r3, #8
 80157ce:	d10b      	bne.n	80157e8 <_printf_i+0x144>
 80157d0:	6823      	ldr	r3, [r4, #0]
 80157d2:	07df      	lsls	r7, r3, #31
 80157d4:	d508      	bpl.n	80157e8 <_printf_i+0x144>
 80157d6:	6923      	ldr	r3, [r4, #16]
 80157d8:	6861      	ldr	r1, [r4, #4]
 80157da:	4299      	cmp	r1, r3
 80157dc:	bfde      	ittt	le
 80157de:	2330      	movle	r3, #48	@ 0x30
 80157e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80157e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80157e8:	1b92      	subs	r2, r2, r6
 80157ea:	6122      	str	r2, [r4, #16]
 80157ec:	f8cd a000 	str.w	sl, [sp]
 80157f0:	464b      	mov	r3, r9
 80157f2:	aa03      	add	r2, sp, #12
 80157f4:	4621      	mov	r1, r4
 80157f6:	4640      	mov	r0, r8
 80157f8:	f7ff fee6 	bl	80155c8 <_printf_common>
 80157fc:	3001      	adds	r0, #1
 80157fe:	d14a      	bne.n	8015896 <_printf_i+0x1f2>
 8015800:	f04f 30ff 	mov.w	r0, #4294967295
 8015804:	b004      	add	sp, #16
 8015806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801580a:	6823      	ldr	r3, [r4, #0]
 801580c:	f043 0320 	orr.w	r3, r3, #32
 8015810:	6023      	str	r3, [r4, #0]
 8015812:	4833      	ldr	r0, [pc, #204]	@ (80158e0 <_printf_i+0x23c>)
 8015814:	2778      	movs	r7, #120	@ 0x78
 8015816:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801581a:	6823      	ldr	r3, [r4, #0]
 801581c:	6831      	ldr	r1, [r6, #0]
 801581e:	061f      	lsls	r7, r3, #24
 8015820:	f851 5b04 	ldr.w	r5, [r1], #4
 8015824:	d402      	bmi.n	801582c <_printf_i+0x188>
 8015826:	065f      	lsls	r7, r3, #25
 8015828:	bf48      	it	mi
 801582a:	b2ad      	uxthmi	r5, r5
 801582c:	6031      	str	r1, [r6, #0]
 801582e:	07d9      	lsls	r1, r3, #31
 8015830:	bf44      	itt	mi
 8015832:	f043 0320 	orrmi.w	r3, r3, #32
 8015836:	6023      	strmi	r3, [r4, #0]
 8015838:	b11d      	cbz	r5, 8015842 <_printf_i+0x19e>
 801583a:	2310      	movs	r3, #16
 801583c:	e7ac      	b.n	8015798 <_printf_i+0xf4>
 801583e:	4827      	ldr	r0, [pc, #156]	@ (80158dc <_printf_i+0x238>)
 8015840:	e7e9      	b.n	8015816 <_printf_i+0x172>
 8015842:	6823      	ldr	r3, [r4, #0]
 8015844:	f023 0320 	bic.w	r3, r3, #32
 8015848:	6023      	str	r3, [r4, #0]
 801584a:	e7f6      	b.n	801583a <_printf_i+0x196>
 801584c:	4616      	mov	r6, r2
 801584e:	e7bd      	b.n	80157cc <_printf_i+0x128>
 8015850:	6833      	ldr	r3, [r6, #0]
 8015852:	6825      	ldr	r5, [r4, #0]
 8015854:	6961      	ldr	r1, [r4, #20]
 8015856:	1d18      	adds	r0, r3, #4
 8015858:	6030      	str	r0, [r6, #0]
 801585a:	062e      	lsls	r6, r5, #24
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	d501      	bpl.n	8015864 <_printf_i+0x1c0>
 8015860:	6019      	str	r1, [r3, #0]
 8015862:	e002      	b.n	801586a <_printf_i+0x1c6>
 8015864:	0668      	lsls	r0, r5, #25
 8015866:	d5fb      	bpl.n	8015860 <_printf_i+0x1bc>
 8015868:	8019      	strh	r1, [r3, #0]
 801586a:	2300      	movs	r3, #0
 801586c:	6123      	str	r3, [r4, #16]
 801586e:	4616      	mov	r6, r2
 8015870:	e7bc      	b.n	80157ec <_printf_i+0x148>
 8015872:	6833      	ldr	r3, [r6, #0]
 8015874:	1d1a      	adds	r2, r3, #4
 8015876:	6032      	str	r2, [r6, #0]
 8015878:	681e      	ldr	r6, [r3, #0]
 801587a:	6862      	ldr	r2, [r4, #4]
 801587c:	2100      	movs	r1, #0
 801587e:	4630      	mov	r0, r6
 8015880:	f7ea fcbe 	bl	8000200 <memchr>
 8015884:	b108      	cbz	r0, 801588a <_printf_i+0x1e6>
 8015886:	1b80      	subs	r0, r0, r6
 8015888:	6060      	str	r0, [r4, #4]
 801588a:	6863      	ldr	r3, [r4, #4]
 801588c:	6123      	str	r3, [r4, #16]
 801588e:	2300      	movs	r3, #0
 8015890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015894:	e7aa      	b.n	80157ec <_printf_i+0x148>
 8015896:	6923      	ldr	r3, [r4, #16]
 8015898:	4632      	mov	r2, r6
 801589a:	4649      	mov	r1, r9
 801589c:	4640      	mov	r0, r8
 801589e:	47d0      	blx	sl
 80158a0:	3001      	adds	r0, #1
 80158a2:	d0ad      	beq.n	8015800 <_printf_i+0x15c>
 80158a4:	6823      	ldr	r3, [r4, #0]
 80158a6:	079b      	lsls	r3, r3, #30
 80158a8:	d413      	bmi.n	80158d2 <_printf_i+0x22e>
 80158aa:	68e0      	ldr	r0, [r4, #12]
 80158ac:	9b03      	ldr	r3, [sp, #12]
 80158ae:	4298      	cmp	r0, r3
 80158b0:	bfb8      	it	lt
 80158b2:	4618      	movlt	r0, r3
 80158b4:	e7a6      	b.n	8015804 <_printf_i+0x160>
 80158b6:	2301      	movs	r3, #1
 80158b8:	4632      	mov	r2, r6
 80158ba:	4649      	mov	r1, r9
 80158bc:	4640      	mov	r0, r8
 80158be:	47d0      	blx	sl
 80158c0:	3001      	adds	r0, #1
 80158c2:	d09d      	beq.n	8015800 <_printf_i+0x15c>
 80158c4:	3501      	adds	r5, #1
 80158c6:	68e3      	ldr	r3, [r4, #12]
 80158c8:	9903      	ldr	r1, [sp, #12]
 80158ca:	1a5b      	subs	r3, r3, r1
 80158cc:	42ab      	cmp	r3, r5
 80158ce:	dcf2      	bgt.n	80158b6 <_printf_i+0x212>
 80158d0:	e7eb      	b.n	80158aa <_printf_i+0x206>
 80158d2:	2500      	movs	r5, #0
 80158d4:	f104 0619 	add.w	r6, r4, #25
 80158d8:	e7f5      	b.n	80158c6 <_printf_i+0x222>
 80158da:	bf00      	nop
 80158dc:	0801622c 	.word	0x0801622c
 80158e0:	0801623d 	.word	0x0801623d

080158e4 <__sflush_r>:
 80158e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80158e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158ec:	0716      	lsls	r6, r2, #28
 80158ee:	4605      	mov	r5, r0
 80158f0:	460c      	mov	r4, r1
 80158f2:	d454      	bmi.n	801599e <__sflush_r+0xba>
 80158f4:	684b      	ldr	r3, [r1, #4]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	dc02      	bgt.n	8015900 <__sflush_r+0x1c>
 80158fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	dd48      	ble.n	8015992 <__sflush_r+0xae>
 8015900:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015902:	2e00      	cmp	r6, #0
 8015904:	d045      	beq.n	8015992 <__sflush_r+0xae>
 8015906:	2300      	movs	r3, #0
 8015908:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801590c:	682f      	ldr	r7, [r5, #0]
 801590e:	6a21      	ldr	r1, [r4, #32]
 8015910:	602b      	str	r3, [r5, #0]
 8015912:	d030      	beq.n	8015976 <__sflush_r+0x92>
 8015914:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015916:	89a3      	ldrh	r3, [r4, #12]
 8015918:	0759      	lsls	r1, r3, #29
 801591a:	d505      	bpl.n	8015928 <__sflush_r+0x44>
 801591c:	6863      	ldr	r3, [r4, #4]
 801591e:	1ad2      	subs	r2, r2, r3
 8015920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015922:	b10b      	cbz	r3, 8015928 <__sflush_r+0x44>
 8015924:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015926:	1ad2      	subs	r2, r2, r3
 8015928:	2300      	movs	r3, #0
 801592a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801592c:	6a21      	ldr	r1, [r4, #32]
 801592e:	4628      	mov	r0, r5
 8015930:	47b0      	blx	r6
 8015932:	1c43      	adds	r3, r0, #1
 8015934:	89a3      	ldrh	r3, [r4, #12]
 8015936:	d106      	bne.n	8015946 <__sflush_r+0x62>
 8015938:	6829      	ldr	r1, [r5, #0]
 801593a:	291d      	cmp	r1, #29
 801593c:	d82b      	bhi.n	8015996 <__sflush_r+0xb2>
 801593e:	4a2a      	ldr	r2, [pc, #168]	@ (80159e8 <__sflush_r+0x104>)
 8015940:	410a      	asrs	r2, r1
 8015942:	07d6      	lsls	r6, r2, #31
 8015944:	d427      	bmi.n	8015996 <__sflush_r+0xb2>
 8015946:	2200      	movs	r2, #0
 8015948:	6062      	str	r2, [r4, #4]
 801594a:	04d9      	lsls	r1, r3, #19
 801594c:	6922      	ldr	r2, [r4, #16]
 801594e:	6022      	str	r2, [r4, #0]
 8015950:	d504      	bpl.n	801595c <__sflush_r+0x78>
 8015952:	1c42      	adds	r2, r0, #1
 8015954:	d101      	bne.n	801595a <__sflush_r+0x76>
 8015956:	682b      	ldr	r3, [r5, #0]
 8015958:	b903      	cbnz	r3, 801595c <__sflush_r+0x78>
 801595a:	6560      	str	r0, [r4, #84]	@ 0x54
 801595c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801595e:	602f      	str	r7, [r5, #0]
 8015960:	b1b9      	cbz	r1, 8015992 <__sflush_r+0xae>
 8015962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015966:	4299      	cmp	r1, r3
 8015968:	d002      	beq.n	8015970 <__sflush_r+0x8c>
 801596a:	4628      	mov	r0, r5
 801596c:	f7ff fb48 	bl	8015000 <_free_r>
 8015970:	2300      	movs	r3, #0
 8015972:	6363      	str	r3, [r4, #52]	@ 0x34
 8015974:	e00d      	b.n	8015992 <__sflush_r+0xae>
 8015976:	2301      	movs	r3, #1
 8015978:	4628      	mov	r0, r5
 801597a:	47b0      	blx	r6
 801597c:	4602      	mov	r2, r0
 801597e:	1c50      	adds	r0, r2, #1
 8015980:	d1c9      	bne.n	8015916 <__sflush_r+0x32>
 8015982:	682b      	ldr	r3, [r5, #0]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d0c6      	beq.n	8015916 <__sflush_r+0x32>
 8015988:	2b1d      	cmp	r3, #29
 801598a:	d001      	beq.n	8015990 <__sflush_r+0xac>
 801598c:	2b16      	cmp	r3, #22
 801598e:	d11e      	bne.n	80159ce <__sflush_r+0xea>
 8015990:	602f      	str	r7, [r5, #0]
 8015992:	2000      	movs	r0, #0
 8015994:	e022      	b.n	80159dc <__sflush_r+0xf8>
 8015996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801599a:	b21b      	sxth	r3, r3
 801599c:	e01b      	b.n	80159d6 <__sflush_r+0xf2>
 801599e:	690f      	ldr	r7, [r1, #16]
 80159a0:	2f00      	cmp	r7, #0
 80159a2:	d0f6      	beq.n	8015992 <__sflush_r+0xae>
 80159a4:	0793      	lsls	r3, r2, #30
 80159a6:	680e      	ldr	r6, [r1, #0]
 80159a8:	bf08      	it	eq
 80159aa:	694b      	ldreq	r3, [r1, #20]
 80159ac:	600f      	str	r7, [r1, #0]
 80159ae:	bf18      	it	ne
 80159b0:	2300      	movne	r3, #0
 80159b2:	eba6 0807 	sub.w	r8, r6, r7
 80159b6:	608b      	str	r3, [r1, #8]
 80159b8:	f1b8 0f00 	cmp.w	r8, #0
 80159bc:	dde9      	ble.n	8015992 <__sflush_r+0xae>
 80159be:	6a21      	ldr	r1, [r4, #32]
 80159c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80159c2:	4643      	mov	r3, r8
 80159c4:	463a      	mov	r2, r7
 80159c6:	4628      	mov	r0, r5
 80159c8:	47b0      	blx	r6
 80159ca:	2800      	cmp	r0, #0
 80159cc:	dc08      	bgt.n	80159e0 <__sflush_r+0xfc>
 80159ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159d6:	81a3      	strh	r3, [r4, #12]
 80159d8:	f04f 30ff 	mov.w	r0, #4294967295
 80159dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159e0:	4407      	add	r7, r0
 80159e2:	eba8 0800 	sub.w	r8, r8, r0
 80159e6:	e7e7      	b.n	80159b8 <__sflush_r+0xd4>
 80159e8:	dfbffffe 	.word	0xdfbffffe

080159ec <_fflush_r>:
 80159ec:	b538      	push	{r3, r4, r5, lr}
 80159ee:	690b      	ldr	r3, [r1, #16]
 80159f0:	4605      	mov	r5, r0
 80159f2:	460c      	mov	r4, r1
 80159f4:	b913      	cbnz	r3, 80159fc <_fflush_r+0x10>
 80159f6:	2500      	movs	r5, #0
 80159f8:	4628      	mov	r0, r5
 80159fa:	bd38      	pop	{r3, r4, r5, pc}
 80159fc:	b118      	cbz	r0, 8015a06 <_fflush_r+0x1a>
 80159fe:	6a03      	ldr	r3, [r0, #32]
 8015a00:	b90b      	cbnz	r3, 8015a06 <_fflush_r+0x1a>
 8015a02:	f7ff f92f 	bl	8014c64 <__sinit>
 8015a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d0f3      	beq.n	80159f6 <_fflush_r+0xa>
 8015a0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015a10:	07d0      	lsls	r0, r2, #31
 8015a12:	d404      	bmi.n	8015a1e <_fflush_r+0x32>
 8015a14:	0599      	lsls	r1, r3, #22
 8015a16:	d402      	bmi.n	8015a1e <_fflush_r+0x32>
 8015a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a1a:	f7ff fae0 	bl	8014fde <__retarget_lock_acquire_recursive>
 8015a1e:	4628      	mov	r0, r5
 8015a20:	4621      	mov	r1, r4
 8015a22:	f7ff ff5f 	bl	80158e4 <__sflush_r>
 8015a26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015a28:	07da      	lsls	r2, r3, #31
 8015a2a:	4605      	mov	r5, r0
 8015a2c:	d4e4      	bmi.n	80159f8 <_fflush_r+0xc>
 8015a2e:	89a3      	ldrh	r3, [r4, #12]
 8015a30:	059b      	lsls	r3, r3, #22
 8015a32:	d4e1      	bmi.n	80159f8 <_fflush_r+0xc>
 8015a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a36:	f7ff fad3 	bl	8014fe0 <__retarget_lock_release_recursive>
 8015a3a:	e7dd      	b.n	80159f8 <_fflush_r+0xc>

08015a3c <__swbuf_r>:
 8015a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a3e:	460e      	mov	r6, r1
 8015a40:	4614      	mov	r4, r2
 8015a42:	4605      	mov	r5, r0
 8015a44:	b118      	cbz	r0, 8015a4e <__swbuf_r+0x12>
 8015a46:	6a03      	ldr	r3, [r0, #32]
 8015a48:	b90b      	cbnz	r3, 8015a4e <__swbuf_r+0x12>
 8015a4a:	f7ff f90b 	bl	8014c64 <__sinit>
 8015a4e:	69a3      	ldr	r3, [r4, #24]
 8015a50:	60a3      	str	r3, [r4, #8]
 8015a52:	89a3      	ldrh	r3, [r4, #12]
 8015a54:	071a      	lsls	r2, r3, #28
 8015a56:	d501      	bpl.n	8015a5c <__swbuf_r+0x20>
 8015a58:	6923      	ldr	r3, [r4, #16]
 8015a5a:	b943      	cbnz	r3, 8015a6e <__swbuf_r+0x32>
 8015a5c:	4621      	mov	r1, r4
 8015a5e:	4628      	mov	r0, r5
 8015a60:	f000 f82a 	bl	8015ab8 <__swsetup_r>
 8015a64:	b118      	cbz	r0, 8015a6e <__swbuf_r+0x32>
 8015a66:	f04f 37ff 	mov.w	r7, #4294967295
 8015a6a:	4638      	mov	r0, r7
 8015a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a6e:	6823      	ldr	r3, [r4, #0]
 8015a70:	6922      	ldr	r2, [r4, #16]
 8015a72:	1a98      	subs	r0, r3, r2
 8015a74:	6963      	ldr	r3, [r4, #20]
 8015a76:	b2f6      	uxtb	r6, r6
 8015a78:	4283      	cmp	r3, r0
 8015a7a:	4637      	mov	r7, r6
 8015a7c:	dc05      	bgt.n	8015a8a <__swbuf_r+0x4e>
 8015a7e:	4621      	mov	r1, r4
 8015a80:	4628      	mov	r0, r5
 8015a82:	f7ff ffb3 	bl	80159ec <_fflush_r>
 8015a86:	2800      	cmp	r0, #0
 8015a88:	d1ed      	bne.n	8015a66 <__swbuf_r+0x2a>
 8015a8a:	68a3      	ldr	r3, [r4, #8]
 8015a8c:	3b01      	subs	r3, #1
 8015a8e:	60a3      	str	r3, [r4, #8]
 8015a90:	6823      	ldr	r3, [r4, #0]
 8015a92:	1c5a      	adds	r2, r3, #1
 8015a94:	6022      	str	r2, [r4, #0]
 8015a96:	701e      	strb	r6, [r3, #0]
 8015a98:	6962      	ldr	r2, [r4, #20]
 8015a9a:	1c43      	adds	r3, r0, #1
 8015a9c:	429a      	cmp	r2, r3
 8015a9e:	d004      	beq.n	8015aaa <__swbuf_r+0x6e>
 8015aa0:	89a3      	ldrh	r3, [r4, #12]
 8015aa2:	07db      	lsls	r3, r3, #31
 8015aa4:	d5e1      	bpl.n	8015a6a <__swbuf_r+0x2e>
 8015aa6:	2e0a      	cmp	r6, #10
 8015aa8:	d1df      	bne.n	8015a6a <__swbuf_r+0x2e>
 8015aaa:	4621      	mov	r1, r4
 8015aac:	4628      	mov	r0, r5
 8015aae:	f7ff ff9d 	bl	80159ec <_fflush_r>
 8015ab2:	2800      	cmp	r0, #0
 8015ab4:	d0d9      	beq.n	8015a6a <__swbuf_r+0x2e>
 8015ab6:	e7d6      	b.n	8015a66 <__swbuf_r+0x2a>

08015ab8 <__swsetup_r>:
 8015ab8:	b538      	push	{r3, r4, r5, lr}
 8015aba:	4b29      	ldr	r3, [pc, #164]	@ (8015b60 <__swsetup_r+0xa8>)
 8015abc:	4605      	mov	r5, r0
 8015abe:	6818      	ldr	r0, [r3, #0]
 8015ac0:	460c      	mov	r4, r1
 8015ac2:	b118      	cbz	r0, 8015acc <__swsetup_r+0x14>
 8015ac4:	6a03      	ldr	r3, [r0, #32]
 8015ac6:	b90b      	cbnz	r3, 8015acc <__swsetup_r+0x14>
 8015ac8:	f7ff f8cc 	bl	8014c64 <__sinit>
 8015acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ad0:	0719      	lsls	r1, r3, #28
 8015ad2:	d422      	bmi.n	8015b1a <__swsetup_r+0x62>
 8015ad4:	06da      	lsls	r2, r3, #27
 8015ad6:	d407      	bmi.n	8015ae8 <__swsetup_r+0x30>
 8015ad8:	2209      	movs	r2, #9
 8015ada:	602a      	str	r2, [r5, #0]
 8015adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015ae0:	81a3      	strh	r3, [r4, #12]
 8015ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ae6:	e033      	b.n	8015b50 <__swsetup_r+0x98>
 8015ae8:	0758      	lsls	r0, r3, #29
 8015aea:	d512      	bpl.n	8015b12 <__swsetup_r+0x5a>
 8015aec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015aee:	b141      	cbz	r1, 8015b02 <__swsetup_r+0x4a>
 8015af0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015af4:	4299      	cmp	r1, r3
 8015af6:	d002      	beq.n	8015afe <__swsetup_r+0x46>
 8015af8:	4628      	mov	r0, r5
 8015afa:	f7ff fa81 	bl	8015000 <_free_r>
 8015afe:	2300      	movs	r3, #0
 8015b00:	6363      	str	r3, [r4, #52]	@ 0x34
 8015b02:	89a3      	ldrh	r3, [r4, #12]
 8015b04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015b08:	81a3      	strh	r3, [r4, #12]
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	6063      	str	r3, [r4, #4]
 8015b0e:	6923      	ldr	r3, [r4, #16]
 8015b10:	6023      	str	r3, [r4, #0]
 8015b12:	89a3      	ldrh	r3, [r4, #12]
 8015b14:	f043 0308 	orr.w	r3, r3, #8
 8015b18:	81a3      	strh	r3, [r4, #12]
 8015b1a:	6923      	ldr	r3, [r4, #16]
 8015b1c:	b94b      	cbnz	r3, 8015b32 <__swsetup_r+0x7a>
 8015b1e:	89a3      	ldrh	r3, [r4, #12]
 8015b20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015b28:	d003      	beq.n	8015b32 <__swsetup_r+0x7a>
 8015b2a:	4621      	mov	r1, r4
 8015b2c:	4628      	mov	r0, r5
 8015b2e:	f000 f86d 	bl	8015c0c <__smakebuf_r>
 8015b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b36:	f013 0201 	ands.w	r2, r3, #1
 8015b3a:	d00a      	beq.n	8015b52 <__swsetup_r+0x9a>
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	60a2      	str	r2, [r4, #8]
 8015b40:	6962      	ldr	r2, [r4, #20]
 8015b42:	4252      	negs	r2, r2
 8015b44:	61a2      	str	r2, [r4, #24]
 8015b46:	6922      	ldr	r2, [r4, #16]
 8015b48:	b942      	cbnz	r2, 8015b5c <__swsetup_r+0xa4>
 8015b4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015b4e:	d1c5      	bne.n	8015adc <__swsetup_r+0x24>
 8015b50:	bd38      	pop	{r3, r4, r5, pc}
 8015b52:	0799      	lsls	r1, r3, #30
 8015b54:	bf58      	it	pl
 8015b56:	6962      	ldrpl	r2, [r4, #20]
 8015b58:	60a2      	str	r2, [r4, #8]
 8015b5a:	e7f4      	b.n	8015b46 <__swsetup_r+0x8e>
 8015b5c:	2000      	movs	r0, #0
 8015b5e:	e7f7      	b.n	8015b50 <__swsetup_r+0x98>
 8015b60:	20000038 	.word	0x20000038

08015b64 <_realloc_r>:
 8015b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b68:	4680      	mov	r8, r0
 8015b6a:	4615      	mov	r5, r2
 8015b6c:	460c      	mov	r4, r1
 8015b6e:	b921      	cbnz	r1, 8015b7a <_realloc_r+0x16>
 8015b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b74:	4611      	mov	r1, r2
 8015b76:	f7fe bf5d 	b.w	8014a34 <_malloc_r>
 8015b7a:	b92a      	cbnz	r2, 8015b88 <_realloc_r+0x24>
 8015b7c:	f7ff fa40 	bl	8015000 <_free_r>
 8015b80:	2400      	movs	r4, #0
 8015b82:	4620      	mov	r0, r4
 8015b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b88:	f000 f89e 	bl	8015cc8 <_malloc_usable_size_r>
 8015b8c:	4285      	cmp	r5, r0
 8015b8e:	4606      	mov	r6, r0
 8015b90:	d802      	bhi.n	8015b98 <_realloc_r+0x34>
 8015b92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015b96:	d8f4      	bhi.n	8015b82 <_realloc_r+0x1e>
 8015b98:	4629      	mov	r1, r5
 8015b9a:	4640      	mov	r0, r8
 8015b9c:	f7fe ff4a 	bl	8014a34 <_malloc_r>
 8015ba0:	4607      	mov	r7, r0
 8015ba2:	2800      	cmp	r0, #0
 8015ba4:	d0ec      	beq.n	8015b80 <_realloc_r+0x1c>
 8015ba6:	42b5      	cmp	r5, r6
 8015ba8:	462a      	mov	r2, r5
 8015baa:	4621      	mov	r1, r4
 8015bac:	bf28      	it	cs
 8015bae:	4632      	movcs	r2, r6
 8015bb0:	f7ff fa17 	bl	8014fe2 <memcpy>
 8015bb4:	4621      	mov	r1, r4
 8015bb6:	4640      	mov	r0, r8
 8015bb8:	f7ff fa22 	bl	8015000 <_free_r>
 8015bbc:	463c      	mov	r4, r7
 8015bbe:	e7e0      	b.n	8015b82 <_realloc_r+0x1e>

08015bc0 <__swhatbuf_r>:
 8015bc0:	b570      	push	{r4, r5, r6, lr}
 8015bc2:	460c      	mov	r4, r1
 8015bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bc8:	2900      	cmp	r1, #0
 8015bca:	b096      	sub	sp, #88	@ 0x58
 8015bcc:	4615      	mov	r5, r2
 8015bce:	461e      	mov	r6, r3
 8015bd0:	da0d      	bge.n	8015bee <__swhatbuf_r+0x2e>
 8015bd2:	89a3      	ldrh	r3, [r4, #12]
 8015bd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015bd8:	f04f 0100 	mov.w	r1, #0
 8015bdc:	bf14      	ite	ne
 8015bde:	2340      	movne	r3, #64	@ 0x40
 8015be0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015be4:	2000      	movs	r0, #0
 8015be6:	6031      	str	r1, [r6, #0]
 8015be8:	602b      	str	r3, [r5, #0]
 8015bea:	b016      	add	sp, #88	@ 0x58
 8015bec:	bd70      	pop	{r4, r5, r6, pc}
 8015bee:	466a      	mov	r2, sp
 8015bf0:	f000 f848 	bl	8015c84 <_fstat_r>
 8015bf4:	2800      	cmp	r0, #0
 8015bf6:	dbec      	blt.n	8015bd2 <__swhatbuf_r+0x12>
 8015bf8:	9901      	ldr	r1, [sp, #4]
 8015bfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015bfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015c02:	4259      	negs	r1, r3
 8015c04:	4159      	adcs	r1, r3
 8015c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015c0a:	e7eb      	b.n	8015be4 <__swhatbuf_r+0x24>

08015c0c <__smakebuf_r>:
 8015c0c:	898b      	ldrh	r3, [r1, #12]
 8015c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c10:	079d      	lsls	r5, r3, #30
 8015c12:	4606      	mov	r6, r0
 8015c14:	460c      	mov	r4, r1
 8015c16:	d507      	bpl.n	8015c28 <__smakebuf_r+0x1c>
 8015c18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015c1c:	6023      	str	r3, [r4, #0]
 8015c1e:	6123      	str	r3, [r4, #16]
 8015c20:	2301      	movs	r3, #1
 8015c22:	6163      	str	r3, [r4, #20]
 8015c24:	b003      	add	sp, #12
 8015c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c28:	ab01      	add	r3, sp, #4
 8015c2a:	466a      	mov	r2, sp
 8015c2c:	f7ff ffc8 	bl	8015bc0 <__swhatbuf_r>
 8015c30:	9f00      	ldr	r7, [sp, #0]
 8015c32:	4605      	mov	r5, r0
 8015c34:	4639      	mov	r1, r7
 8015c36:	4630      	mov	r0, r6
 8015c38:	f7fe fefc 	bl	8014a34 <_malloc_r>
 8015c3c:	b948      	cbnz	r0, 8015c52 <__smakebuf_r+0x46>
 8015c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c42:	059a      	lsls	r2, r3, #22
 8015c44:	d4ee      	bmi.n	8015c24 <__smakebuf_r+0x18>
 8015c46:	f023 0303 	bic.w	r3, r3, #3
 8015c4a:	f043 0302 	orr.w	r3, r3, #2
 8015c4e:	81a3      	strh	r3, [r4, #12]
 8015c50:	e7e2      	b.n	8015c18 <__smakebuf_r+0xc>
 8015c52:	89a3      	ldrh	r3, [r4, #12]
 8015c54:	6020      	str	r0, [r4, #0]
 8015c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015c5a:	81a3      	strh	r3, [r4, #12]
 8015c5c:	9b01      	ldr	r3, [sp, #4]
 8015c5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015c62:	b15b      	cbz	r3, 8015c7c <__smakebuf_r+0x70>
 8015c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c68:	4630      	mov	r0, r6
 8015c6a:	f000 f81d 	bl	8015ca8 <_isatty_r>
 8015c6e:	b128      	cbz	r0, 8015c7c <__smakebuf_r+0x70>
 8015c70:	89a3      	ldrh	r3, [r4, #12]
 8015c72:	f023 0303 	bic.w	r3, r3, #3
 8015c76:	f043 0301 	orr.w	r3, r3, #1
 8015c7a:	81a3      	strh	r3, [r4, #12]
 8015c7c:	89a3      	ldrh	r3, [r4, #12]
 8015c7e:	431d      	orrs	r5, r3
 8015c80:	81a5      	strh	r5, [r4, #12]
 8015c82:	e7cf      	b.n	8015c24 <__smakebuf_r+0x18>

08015c84 <_fstat_r>:
 8015c84:	b538      	push	{r3, r4, r5, lr}
 8015c86:	4d07      	ldr	r5, [pc, #28]	@ (8015ca4 <_fstat_r+0x20>)
 8015c88:	2300      	movs	r3, #0
 8015c8a:	4604      	mov	r4, r0
 8015c8c:	4608      	mov	r0, r1
 8015c8e:	4611      	mov	r1, r2
 8015c90:	602b      	str	r3, [r5, #0]
 8015c92:	f7ed fe43 	bl	800391c <_fstat>
 8015c96:	1c43      	adds	r3, r0, #1
 8015c98:	d102      	bne.n	8015ca0 <_fstat_r+0x1c>
 8015c9a:	682b      	ldr	r3, [r5, #0]
 8015c9c:	b103      	cbz	r3, 8015ca0 <_fstat_r+0x1c>
 8015c9e:	6023      	str	r3, [r4, #0]
 8015ca0:	bd38      	pop	{r3, r4, r5, pc}
 8015ca2:	bf00      	nop
 8015ca4:	20001238 	.word	0x20001238

08015ca8 <_isatty_r>:
 8015ca8:	b538      	push	{r3, r4, r5, lr}
 8015caa:	4d06      	ldr	r5, [pc, #24]	@ (8015cc4 <_isatty_r+0x1c>)
 8015cac:	2300      	movs	r3, #0
 8015cae:	4604      	mov	r4, r0
 8015cb0:	4608      	mov	r0, r1
 8015cb2:	602b      	str	r3, [r5, #0]
 8015cb4:	f7ed fe42 	bl	800393c <_isatty>
 8015cb8:	1c43      	adds	r3, r0, #1
 8015cba:	d102      	bne.n	8015cc2 <_isatty_r+0x1a>
 8015cbc:	682b      	ldr	r3, [r5, #0]
 8015cbe:	b103      	cbz	r3, 8015cc2 <_isatty_r+0x1a>
 8015cc0:	6023      	str	r3, [r4, #0]
 8015cc2:	bd38      	pop	{r3, r4, r5, pc}
 8015cc4:	20001238 	.word	0x20001238

08015cc8 <_malloc_usable_size_r>:
 8015cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ccc:	1f18      	subs	r0, r3, #4
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	bfbc      	itt	lt
 8015cd2:	580b      	ldrlt	r3, [r1, r0]
 8015cd4:	18c0      	addlt	r0, r0, r3
 8015cd6:	4770      	bx	lr

08015cd8 <_init>:
 8015cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cda:	bf00      	nop
 8015cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cde:	bc08      	pop	{r3}
 8015ce0:	469e      	mov	lr, r3
 8015ce2:	4770      	bx	lr

08015ce4 <_fini>:
 8015ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ce6:	bf00      	nop
 8015ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cea:	bc08      	pop	{r3}
 8015cec:	469e      	mov	lr, r3
 8015cee:	4770      	bx	lr
