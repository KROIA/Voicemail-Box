
VoiceMailBoxApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000167f0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  080169b0  080169b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016f10  08016f10  00018088  2**0
                  CONTENTS
  4 .ARM          00000008  08016f10  08016f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016f18  08016f18  00018088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016f18  08016f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016f1c  08016f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08016f20  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018088  2**0
                  CONTENTS
 10 .bss          00001260  20000088  20000088  00018088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200012e8  200012e8  00018088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004f3ac  00000000  00000000  000180b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008db0  00000000  00000000  00067464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e68  00000000  00000000  00070218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000023ce  00000000  00000000  00073080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ad7a  00000000  00000000  0007544e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00041e44  00000000  00000000  000b01c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00130981  00000000  00000000  000f200c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0022298d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e58c  00000000  00000000  002229d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  00230f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08016998 	.word	0x08016998

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	08016998 	.word	0x08016998

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_ZNK3VMB9FAT32File6isOpenEv>:

		unsigned int write(const char* text) override;
		unsigned int read(char* buffer, unsigned int length) override;
		bool seek(unsigned int position) override;
		unsigned int getSize() const override;
		bool isOpen() const override { return m_isOpen; }
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <_ZN3VMB5IFileC1Ev>:

#include <string>

namespace VMB
{
	class IFile
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <_ZN3VMB5IFileC1Ev+0x1c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	08016d50 	.word	0x08016d50

080005f4 <_ZN3VMB5IFileD1Ev>:
			read,
			write,
			append,
		};

		virtual ~IFile() = default;
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <_ZN3VMB5IFileD1Ev+0x1c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	08016d50 	.word	0x08016d50

08000614 <_ZN3VMB5IFileD0Ev>:
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff ffe9 	bl	80005f4 <_ZN3VMB5IFileD1Ev>
 8000622:	2104      	movs	r1, #4
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f014 fe63 	bl	80152f0 <_ZdlPvj>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <_ZN3VMB9FAT32FileC1Ev>:
{
	bool FAT32File::s_isMounted = false;
	FATFS FAT32File::s_SDFatFS;
    uint8_t FAT32File::s_rtext[_MAX_SS];

	FAT32File::FAT32File()
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    	: m_fileHandle{ 0 }
		, m_isOpen(false)
		, m_currentMode(FA_READ)
		, m_path("")
		, m_lastError(FRESULT::FR_OK)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffc8 	bl	80005d4 <_ZN3VMB5IFileC1Ev>
 8000644:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <_ZN3VMB9FAT32FileC1Ev+0xa4>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
    	: m_fileHandle{ 0 }
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3304      	adds	r3, #4
 800064e:	f44f 720c 	mov.w	r2, #560	@ 0x230
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f015 fa3e 	bl	8015ad6 <memset>
		, m_isOpen(false)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		, m_currentMode(FA_READ)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2201      	movs	r2, #1
 8000666:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
		, m_path("")
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f503 740f 	add.w	r4, r3, #572	@ 0x23c
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4618      	mov	r0, r3
 8000676:	f014 fe4e 	bl	8015316 <_ZNSaIcEC1Ev>
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	461a      	mov	r2, r3
 8000680:	4916      	ldr	r1, [pc, #88]	@ (80006dc <_ZN3VMB9FAT32FileC1Ev+0xa8>)
 8000682:	4620      	mov	r0, r4
 8000684:	f014 ffda 	bl	801563c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4618      	mov	r0, r3
 800068e:	f014 fe43 	bl	8015318 <_ZNSaIcED1Ev>
		, m_lastError(FRESULT::FR_OK)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
	{
		if(!s_isMounted)
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <_ZN3VMB9FAT32FileC1Ev+0xac>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d011      	beq.n	80006cc <_ZN3VMB9FAT32FileC1Ev+0x98>
		{
			m_lastError =  f_mount(&s_SDFatFS, (TCHAR const*)SDPath, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	490e      	ldr	r1, [pc, #56]	@ (80006e4 <_ZN3VMB9FAT32FileC1Ev+0xb0>)
 80006ac:	480e      	ldr	r0, [pc, #56]	@ (80006e8 <_ZN3VMB9FAT32FileC1Ev+0xb4>)
 80006ae:	f013 f8a1 	bl	80137f4 <f_mount>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
			if(m_lastError == FRESULT::FR_OK)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d102      	bne.n	80006cc <_ZN3VMB9FAT32FileC1Ev+0x98>
				s_isMounted = true;
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <_ZN3VMB9FAT32FileC1Ev+0xac>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
			else
			{
				// Can't mount device
			}
		}
	}
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	08016d1c 	.word	0x08016d1c
 80006dc:	080169b0 	.word	0x080169b0
 80006e0:	200000a4 	.word	0x200000a4
 80006e4:	2000099c 	.word	0x2000099c
 80006e8:	200000a8 	.word	0x200000a8

080006ec <_ZN3VMB9FAT32FileD1Ev>:
	FAT32File::~FAT32File()
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	4a08      	ldr	r2, [pc, #32]	@ (8000718 <_ZN3VMB9FAT32FileD1Ev+0x2c>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]
	{

	}
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8000700:	4618      	mov	r0, r3
 8000702:	f014 fea2 	bl	801544a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff73 	bl	80005f4 <_ZN3VMB5IFileD1Ev>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	08016d1c 	.word	0x08016d1c

0800071c <_ZN3VMB9FAT32FileD0Ev>:
	FAT32File::~FAT32File()
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	}
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ffe1 	bl	80006ec <_ZN3VMB9FAT32FileD1Ev>
 800072a:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f014 fdde 	bl	80152f0 <_ZdlPvj>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE>:

	bool FAT32File::open(const char* path, AccessMode mode)
	{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
		if(m_isOpen)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x1a>
		{
			// Already open
			return false;
 8000754:	2300      	movs	r3, #0
 8000756:	e02b      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
		}
		switch(mode)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b02      	cmp	r3, #2
 800075c:	d01d      	beq.n	800079a <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x5c>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b02      	cmp	r3, #2
 8000762:	dc24      	bgt.n	80007ae <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x70>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x34>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d00a      	beq.n	8000786 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x48>
 8000770:	e01d      	b.n	80007ae <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x70>
		{
			case AccessMode::read:
			{
				return open(path, FA_READ);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	330c      	adds	r3, #12
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2201      	movs	r2, #1
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	4798      	blx	r3
 8000782:	4603      	mov	r3, r0
 8000784:	e014      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}
			case AccessMode::write:
			{
				return open(path, FA_WRITE | FA_CREATE_ALWAYS);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	330c      	adds	r3, #12
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	220a      	movs	r2, #10
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	4798      	blx	r3
 8000796:	4603      	mov	r3, r0
 8000798:	e00a      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}
			case AccessMode::append:
			{
				return open(path, FA_OPEN_APPEND | FA_WRITE);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	330c      	adds	r3, #12
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2232      	movs	r2, #50	@ 0x32
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	4798      	blx	r3
 80007aa:	4603      	mov	r3, r0
 80007ac:	e000      	b.n	80007b0 <_ZN3VMB9FAT32File4openEPKcNS_5IFile10AccessModeE+0x72>
			}

			default:
			{
				// Unknown mode
				return false;
 80007ae:	2300      	movs	r3, #0
			}
		}
		return false;
	}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_ZN3VMB9FAT32File4openEPKci>:
	bool FAT32File::open(const char* path, int fa_mode)
	{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
		if (m_isOpen)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <_ZN3VMB9FAT32File4openEPKci+0x1a>
		{
			// Already open
			return false;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e027      	b.n	8000822 <_ZN3VMB9FAT32File4openEPKci+0x6a>
		}
		m_lastError = f_open(&m_fileHandle, path, fa_mode);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3304      	adds	r3, #4
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	4618      	mov	r0, r3
 80007de:	f013 f84f 	bl	8013880 <f_open>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		if (m_lastError == FR_OK) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d110      	bne.n	8000818 <_ZN3VMB9FAT32File4openEPKci+0x60>
			m_isOpen = true;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2201      	movs	r2, #1
 80007fa:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
			m_path = path;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	4618      	mov	r0, r3
 8000808:	f014 fef7 	bl	80155fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			m_currentMode = fa_mode;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
			return true;
 8000814:	2301      	movs	r3, #1
 8000816:	e004      	b.n	8000822 <_ZN3VMB9FAT32File4openEPKci+0x6a>
		}
		m_isOpen = false;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		return false;
 8000820:	2300      	movs	r3, #0
	}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZN3VMB9FAT32File5closeEv>:

	bool FAT32File::close()
	{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
		if (!m_isOpen)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000838:	f083 0301 	eor.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <_ZN3VMB9FAT32File5closeEv+0x1c>
		{
			// File is not open
			return false;
 8000842:	2300      	movs	r3, #0
 8000844:	e01b      	b.n	800087e <_ZN3VMB9FAT32File5closeEv+0x54>
		}
		m_path.clear();
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
 800084c:	4618      	mov	r0, r3
 800084e:	f014 fe43 	bl	80154d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		m_isOpen = false;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2234 	strb.w	r2, [r3, #564]	@ 0x234
		m_lastError = f_close(&m_fileHandle);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3304      	adds	r3, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f013 fcfa 	bl	8014258 <f_close>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FRESULT::FR_OK;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
	}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_ZN3VMB9FAT32File5writeEPKc>:

	unsigned int FAT32File::write(const char* text) {
 8000886:	b590      	push	{r4, r7, lr}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
		if (!m_isOpen) return 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000896:	f083 0301 	eor.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <_ZN3VMB9FAT32File5writeEPKc+0x1e>
 80008a0:	2300      	movs	r3, #0
 80008a2:	e011      	b.n	80008c8 <_ZN3VMB9FAT32File5writeEPKc+0x42>
		UINT written;
		m_lastError = f_write(&m_fileHandle, text, strlen(text), &written);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1d1c      	adds	r4, r3, #4
 80008a8:	6838      	ldr	r0, [r7, #0]
 80008aa:	f7ff fcf9 	bl	80002a0 <strlen>
 80008ae:	4602      	mov	r2, r0
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	6839      	ldr	r1, [r7, #0]
 80008b6:	4620      	mov	r0, r4
 80008b8:	f013 fadb 	bl	8013e72 <f_write>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return written;
 80008c6:	68fb      	ldr	r3, [r7, #12]
	}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd90      	pop	{r4, r7, pc}

080008d0 <_ZN3VMB9FAT32File4readEPcj>:
	unsigned int FAT32File::read(char* buffer, unsigned int length) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
		if (!m_isOpen) return 0;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 80008e2:	f083 0301 	eor.w	r3, r3, #1
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <_ZN3VMB9FAT32File4readEPcj+0x20>
 80008ec:	2300      	movs	r3, #0
 80008ee:	e00d      	b.n	800090c <_ZN3VMB9FAT32File4readEPcj+0x3c>
		UINT bytesRead;
		m_lastError = f_read(&m_fileHandle, buffer, length, &bytesRead);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1d18      	adds	r0, r3, #4
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	f013 f97a 	bl	8013bf4 <f_read>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return bytesRead;
 800090a:	697b      	ldr	r3, [r7, #20]
	}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <_ZN3VMB9FAT32File4seekEj>:
	bool FAT32File::seek(unsigned int position) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
		if (!m_isOpen) return false;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 8000924:	f083 0301 	eor.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <_ZN3VMB9FAT32File4seekEj+0x1e>
 800092e:	2300      	movs	r3, #0
 8000930:	e012      	b.n	8000958 <_ZN3VMB9FAT32File4seekEj+0x44>
		m_lastError = f_lseek(&m_fileHandle, position);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	6839      	ldr	r1, [r7, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f013 fcb7 	bl	80142ac <f_lseek>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FR_OK;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 800094e:	2b00      	cmp	r3, #0
 8000950:	bf0c      	ite	eq
 8000952:	2301      	moveq	r3, #1
 8000954:	2300      	movne	r3, #0
 8000956:	b2db      	uxtb	r3, r3
	}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <_ZNK3VMB9FAT32File7getSizeEv>:

	unsigned int FAT32File::getSize() const {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
		if (!m_isOpen) return 0;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800096e:	f083 0301 	eor.w	r3, r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <_ZNK3VMB9FAT32File7getSizeEv+0x1c>
 8000978:	2300      	movs	r3, #0
 800097a:	e001      	b.n	8000980 <_ZNK3VMB9FAT32File7getSizeEv+0x20>
		return f_size(&m_fileHandle);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	691b      	ldr	r3, [r3, #16]
	}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZN3VMB9FAT32File5flushEv>:
	bool FAT32File::flush() {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
		if (!m_isOpen) return false;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f893 3234 	ldrb.w	r3, [r3, #564]	@ 0x234
 800099a:	f083 0301 	eor.w	r3, r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <_ZN3VMB9FAT32File5flushEv+0x1c>
 80009a4:	2300      	movs	r3, #0
 80009a6:	e011      	b.n	80009cc <_ZN3VMB9FAT32File5flushEv+0x40>
		m_lastError = f_sync(&m_fileHandle);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3304      	adds	r3, #4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f013 fbd5 	bl	801415c <f_sync>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
		return m_lastError == FR_OK;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf0c      	ite	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	2300      	movne	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
	}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_ZN3VMB9FAT32File6removeEPKc>:

	bool FAT32File::remove(const char* path) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
		return f_unlink(path) == FR_OK;
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f013 ff7d 	bl	80148dc <f_unlink>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
	}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_ZN3VMB9FAT32File6renameEPKcS2_>:

	bool FAT32File::rename(const char* oldPath, const char* newPath) {
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
		return f_rename(oldPath, newPath) == FR_OK;
 8000a00:	6839      	ldr	r1, [r7, #0]
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f014 f815 	bl	8014a32 <f_rename>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf0c      	ite	eq
 8000a0e:	2301      	moveq	r3, #1
 8000a10:	2300      	movne	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
	}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_ZN3VMB9FAT32File6existsEPKc>:

	bool FAT32File::exists(const char* path) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
		FILINFO fileInfo;
		return f_stat(path, &fileInfo) == FR_OK;
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f013 ff1d 	bl	801486a <f_stat>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf0c      	ite	eq
 8000a36:	2301      	moveq	r3, #1
 8000a38:	2300      	movne	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
	}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f84d 	bl	8000aee <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ffeb 	bl	8000a44 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc>:

	std::vector<std::string> FAT32File::listDirectory(const char* path) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	@ 0x50
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
		std::vector<std::string> files;
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffeb 	bl	8000a5e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
		DIR dir;
		FILINFO fileInfo;
		if (f_opendir(&dir, path) == FR_OK) {
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	6839      	ldr	r1, [r7, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f013 fe15 	bl	80146be <f_opendir>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	bf0c      	ite	eq
 8000a9a:	2301      	moveq	r3, #1
 8000a9c:	2300      	movne	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d01f      	beq.n	8000ae4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x6c>
			while (f_readdir(&dir, &fileInfo) == FR_OK && fileInfo.fname[0] != 0) {
 8000aa4:	e006      	b.n	8000ab4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x3c>
				files.emplace_back(fileInfo.fname);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	3309      	adds	r3, #9
 8000aac:	4619      	mov	r1, r3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 f82d 	bl	8000b0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_>
			while (f_readdir(&dir, &fileInfo) == FR_OK && fileInfo.fname[0] != 0) {
 8000ab4:	f107 0208 	add.w	r2, r7, #8
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f013 fe96 	bl	80147f0 <f_readdir>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d104      	bne.n	8000ad4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5c>
 8000aca:	7c7b      	ldrb	r3, [r7, #17]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5c>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x5e>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1e5      	bne.n	8000aa6 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc+0x2e>
			}
			f_closedir(&dir);
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f013 fe60 	bl	80147a4 <f_closedir>
		}
		return files;
 8000ae4:	bf00      	nop
	}
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	3750      	adds	r7, #80	@ 0x50
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f838 	bl	8000b6c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f840 	bl	8000b84 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000b0e:	b5b0      	push	{r4, r5, r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d012      	beq.n	8000b4a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000b24:	687c      	ldr	r4, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685d      	ldr	r5, [r3, #4]
 8000b2a:	6838      	ldr	r0, [r7, #0]
 8000b2c:	f000 f86a 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	4629      	mov	r1, r5
 8000b36:	4620      	mov	r0, r4
 8000b38:	f000 f86f 	bl	8000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f103 0218 	add.w	r2, r3, #24
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8000b48:	e00c      	b.n	8000b64 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJRA13_cEEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f878 	bl	8000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8000b50:	4604      	mov	r4, r0
 8000b52:	6838      	ldr	r0, [r7, #0]
 8000b54:	f000 f856 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f896 	bl	8000c90 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bdb0      	pop	{r4, r5, r7, pc}

08000b6c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f953 	bl	8000e20 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
	{ }
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
	if (__p)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f936 	bl	8000e36 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f000 f92c 	bl	8000e54 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffec 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f000 f91b 	bl	8000e6e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JRA13_cEEEvPT_DpOT0_>
	}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	1d1a      	adds	r2, r3, #4
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f930 	bl	8000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f805 	bl	8000c78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000c6e:	4603      	mov	r3, r0
      }
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000c80:	2301      	movs	r3, #1
      }
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000c9c:	4a5e      	ldr	r2, [pc, #376]	@ (8000e18 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x188>)
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f000 f919 	bl	8000ed8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8000ca6:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f000 f956 	bl	8000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	f107 0214 	add.w	r2, r7, #20
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f95d 	bl	8000f88 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f970 	bl	8000fbc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8000cdc:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000ce2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	189d      	adds	r5, r3, r2
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff85 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4629      	mov	r1, r5
 8000d00:	4620      	mov	r0, r4
 8000d02:	f7ff ff8a 	bl	8000c1a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRA13_cEEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000d0a:	f7ff ffaa 	bl	8000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d027      	beq.n	8000d64 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f977 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff54 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d2a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4621      	mov	r1, r4
 8000d30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d32:	f000 f957 	bl	8000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8000d36:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8000d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f962 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff3f 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d54:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d58:	6a39      	ldr	r1, [r7, #32]
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f000 f942 	bl	8000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8000d60:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8000d62:	e026      	b.n	8000db2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f94f 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff2c 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000d7a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4621      	mov	r1, r4
 8000d80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d82:	f000 f94e 	bl	8001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8000d86:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	3318      	adds	r3, #24
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f93a 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff17 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000da4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000da8:	6a39      	ldr	r1, [r7, #32]
 8000daa:	4620      	mov	r0, r4
 8000dac:	f000 f939 	bl	8001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8000db0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000db2:	f7ff ff56 	bl	8000c62 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_S_use_relocateEv>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f083 0301 	eor.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d009      	beq.n	8000dd6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff04 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	6a39      	ldr	r1, [r7, #32]
 8000dd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000dd2:	f7ff ff09 	bl	8000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000dd6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	10db      	asrs	r3, r3, #3
 8000de2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e1c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRA13_cEEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x18c>)
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8000de8:	461a      	mov	r2, r3
 8000dea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dec:	f7ff fede 	bl	8000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000dfa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	461a      	mov	r2, r3
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	441a      	add	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	609a      	str	r2, [r3, #8]
    }
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	@ 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bdb0      	pop	{r4, r5, r7, pc}
 8000e18:	080169b4 	.word	0x080169b4
 8000e1c:	aaaaaaab 	.word	0xaaaaaaab

08000e20 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f000 f911 	bl	800106e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_j>
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000e5e:	6839      	ldr	r1, [r7, #0]
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f917 	bl	8001094 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JRA13_cEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000e6e:	b5b0      	push	{r4, r5, r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	2018      	movs	r0, #24
 8000e80:	f7ff fb8e 	bl	80005a0 <_ZnwjPv>
 8000e84:	4604      	mov	r4, r0
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff febc 	bl	8000c04 <_ZSt7forwardIRA13_cEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e8c:	4605      	mov	r5, r0
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4618      	mov	r0, r3
 8000e94:	f014 fa3f 	bl	8015316 <_ZNSaIcEC1Ev>
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f014 fbcb 	bl	801563c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f014 fa34 	bl	8015318 <_ZNSaIcED1Ev>
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bdb0      	pop	{r4, r5, r7, pc}

08000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f000 f8ee 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000eea:	4604      	mov	r4, r0
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f8fb 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	1ae2      	subs	r2, r4, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	bf34      	ite	cc
 8000efc:	2301      	movcc	r3, #1
 8000efe:	2300      	movcs	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f014 fa10 	bl	801532c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f000 f8eb 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f12:	4604      	mov	r4, r0
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 f8e7 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	f107 0208 	add.w	r2, r7, #8
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f8f3 	bl	8001114 <_ZSt3maxIjERKT_S2_S2_>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4423      	add	r3, r4
 8000f34:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f000 f8d6 	bl	80010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d306      	bcc.n	8000f52 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7a>
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 f8be 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d904      	bls.n	8000f5c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x84>
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 f8b7 	bl	80010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	e000      	b.n	8000f5e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8000f5c:	697b      	ldr	r3, [r7, #20]
      }
 8000f5e:	4618      	mov	r0, r3
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}

08000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff9e 	bl	8000eb8 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f83a 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	681c      	ldr	r4, [r3, #0]
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f000 f835 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1ae3      	subs	r3, r4, r3
 8000fa8:	10db      	asrs	r3, r3, #3
 8000faa:	4a03      	ldr	r2, [pc, #12]	@ (8000fb8 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x30>)
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	aaaaaaab 	.word	0xaaaaaaab

08000fbc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6839      	ldr	r1, [r7, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f8b3 	bl	800113c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	e000      	b.n	8000fdc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8000fda:	2300      	movs	r3, #0
      }
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8000ff2:	f88d 4000 	strb.w	r4, [sp]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	68b9      	ldr	r1, [r7, #8]
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f000 f8ac 	bl	800115a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>
 8001002:	4603      	mov	r3, r0
      }
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f000 f8a4 	bl	800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8001036:	4604      	mov	r4, r0
 8001038:	68b8      	ldr	r0, [r7, #8]
 800103a:	f000 f8a0 	bl	800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800103e:	4601      	mov	r1, r0
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4620      	mov	r0, r4
 8001046:	f000 f8a9 	bl	800119c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800104a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}

08001054 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800105e:	6839      	ldr	r1, [r7, #0]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f8ac 	bl	80011be <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_>
	}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4619      	mov	r1, r3
 8001086:	68b8      	ldr	r0, [r7, #8]
 8001088:	f014 f932 	bl	80152f0 <_ZdlPvj>
      }
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800109e:	e009      	b.n	80010b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f898 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f89f 	bl	80011ec <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3318      	adds	r3, #24
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d1f1      	bne.n	80010a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xc>
	}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f8b3 	bl	800123c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f893 	bl	8001204 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 80010de:	4603      	mov	r3, r0
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	10db      	asrs	r3, r3, #3
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	aaaaaaab 	.word	0xaaaaaaab

08001114 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d201      	bcs.n	800112e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	e000      	b.n	8001130 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800112e:	687b      	ldr	r3, [r7, #4]
    }
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001146:	2200      	movs	r2, #0
 8001148:	6839      	ldr	r1, [r7, #0]
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f882 	bl	8001254 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8001150:	4603      	mov	r3, r0
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f89e 	bl	80012b0 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8001174:	4603      	mov	r3, r0
      }
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f8ac 	bl	80012ea <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f8ad 	bl	800130e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 80011b4:	4603      	mov	r3, r0
    }
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS5_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	f014 f93e 	bl	801544a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f014 f928 	bl	801544a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x34>)
 800120e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f890 	bl	8001336 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8001216:	4603      	mov	r3, r0
 8001218:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800121a:	f107 0208 	add.w	r2, r7, #8
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f892 	bl	800134e <_ZSt3minIjERKT_S2_S2_>
 800122a:	4603      	mov	r3, r0
 800122c:	681b      	ldr	r3, [r3, #0]
      }
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	05555555 	.word	0x05555555

0800123c <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f889 	bl	8001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8001266:	4602      	mov	r2, r0
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4293      	cmp	r3, r2
 800126c:	bf8c      	ite	hi
 800126e:	2301      	movhi	r3, #1
 8001270:	2300      	movls	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x58>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800128a:	f014 f849 	bl	8015320 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800128e:	f014 f844 	bl	801531a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4618      	mov	r0, r3
 800129e:	f014 f829 	bl	80152f4 <_Znwj>
 80012a2:	4603      	mov	r3, r0
      }
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0aaaaaaa 	.word	0x0aaaaaaa

080012b0 <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f868 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012c4:	4604      	mov	r4, r0
 80012c6:	68b8      	ldr	r0, [r7, #8]
 80012c8:	f000 f864 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f860 	bl	8001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80012d4:	4602      	mov	r2, r0
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	4629      	mov	r1, r5
 80012da:	4620      	mov	r0, r4
 80012dc:	f000 f865 	bl	80013aa <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80012e0:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bdb0      	pop	{r4, r5, r7, pc}

080012ea <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80012f4:	463b      	mov	r3, r7
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f87d 	bl	80013f6 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>
 80012fc:	4603      	mov	r3, r0
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800131e:	2300      	movs	r3, #0
 8001320:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f870 	bl	800140c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800132c:	4603      	mov	r3, r0
    }
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f874 	bl	800142c <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8001344:	4603      	mov	r3, r0
      }
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d201      	bcs.n	8001368 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	e000      	b.n	800136a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001368:	687b      	ldr	r3, [r7, #4]
    }
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	05555555 	.word	0x05555555

08001394 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80013aa:	b590      	push	{r4, r7, lr}
 80013ac:	b087      	sub	sp, #28
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80013bc:	e012      	b.n	80013e4 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff09 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80013c4:	4604      	mov	r4, r0
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f7ff ff05 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 80013cc:	4603      	mov	r3, r0
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4620      	mov	r0, r4
 80013d4:	f000 f836 	bl	8001444 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3318      	adds	r3, #24
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3318      	adds	r3, #24
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1e8      	bne.n	80013be <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x14>
      return __cur;
 80013ec:	697b      	ldr	r3, [r7, #20]
    }
 80013ee:	4618      	mov	r0, r3
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}

080013f6 <_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 f82c 	bl	800147a <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 8001422:	4603      	mov	r3, r0
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff9f 	bl	8001378 <_ZNKSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 800143a:	4603      	mov	r3, r0
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f000 f841 	bl	80014d8 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	68f9      	ldr	r1, [r7, #12]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f846 	bl	80014ee <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7ff feb7 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8001468:	4603      	mov	r3, r0
 800146a:	4619      	mov	r1, r3
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fdf1 	bl	8001054 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
    }
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 800147a:	b590      	push	{r4, r7, lr}
 800147c:	b087      	sub	sp, #28
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800148a:	e015      	b.n	80014b8 <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 800148c:	6978      	ldr	r0, [r7, #20]
 800148e:	f7ff fea2 	bl	80011d6 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8001492:	4604      	mov	r4, r0
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f85d 	bl	8001558 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800149e:	4603      	mov	r3, r0
 80014a0:	4619      	mov	r1, r3
 80014a2:	4620      	mov	r0, r4
 80014a4:	f000 f864 	bl	8001570 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f842 	bl	8001536 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3318      	adds	r3, #24
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	f107 0208 	add.w	r2, r7, #8
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f826 	bl	8001514 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1de      	bne.n	800148c <_ZSt16__do_uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_+0x12>
	  return __cur;
 80014ce:	697b      	ldr	r3, [r7, #20]
    }
 80014d0:	4618      	mov	r0, r3
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f84f 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f854 	bl	80015b4 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_>
	}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f85f 	bl	80015e4 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8001526:	4603      	mov	r3, r0
 8001528:	f083 0301 	eor.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f103 0218 	add.w	r2, r3, #24
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
	return *this;
 800154a:	687b      	ldr	r3, [r7, #4]
      }
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4619      	mov	r1, r3
 800157e:	2018      	movs	r0, #24
 8001580:	f7ff f80e 	bl	80005a0 <_ZnwjPv>
 8001584:	4604      	mov	r4, r0
 8001586:	6838      	ldr	r0, [r7, #0]
 8001588:	f000 f809 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800158c:	4603      	mov	r3, r0
 800158e:	4619      	mov	r1, r3
 8001590:	4620      	mov	r0, r4
 8001592:	f013 ff3b 	bl	801540c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}

0800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS5_JS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4619      	mov	r1, r3
 80015c4:	2018      	movs	r0, #24
 80015c6:	f7fe ffeb 	bl	80005a0 <_ZnwjPv>
 80015ca:	4604      	mov	r4, r0
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffe6 	bl	800159e <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4619      	mov	r1, r3
 80015d6:	4620      	mov	r0, r4
 80015d8:	f013 ff18 	bl	801540c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}

080015e4 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f80e 	bl	8001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80015f4:	4604      	mov	r4, r0
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f000 f80a 	bl	8001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80015fc:	4603      	mov	r3, r0
 80015fe:	429c      	cmp	r4, r3
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}

08001610 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_ZNK3VMB16WiFiServerClient11isConnectedEv>:

		bool connect() override;
		bool disconnect() override;
		bool send(const char* data, unsigned int length) override;
		unsigned int receive(char* buffer, unsigned int length) override;
		bool isConnected() const override { return m_isConnected; }
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_ZN3VMB13IServerClientC1Ev>:

#include <string>

namespace VMB
{
	class IServerClient
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	4a04      	ldr	r2, [pc, #16]	@ (800165c <_ZN3VMB13IServerClientC1Ev+0x1c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	08016da8 	.word	0x08016da8

08001660 <_ZN3VMB13IServerClientD1Ev>:
	{
	public:
		virtual ~IServerClient() = default;
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <_ZN3VMB13IServerClientD1Ev+0x1c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	08016da8 	.word	0x08016da8

08001680 <_ZN3VMB13IServerClientD0Ev>:
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ffe9 	bl	8001660 <_ZN3VMB13IServerClientD1Ev>
 800168e:	2104      	movs	r1, #4
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f013 fe2d 	bl	80152f0 <_ZdlPvj>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZNKSt5arrayIPN3VMB16WiFiServerClientELj10EE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // Capacity.
      [[__gnu__::__const__, __nodiscard__]]
      constexpr size_type
      size() const noexcept { return _Nm; }
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	230a      	movs	r3, #10
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef>:
	#define ESP_TIMEOUT 2000         // Timeout in milliseconds
	#define ESP_RESPONSE_SIZE 128    // Buffer size for response

	std::array<WiFiServerClient*, 10> WiFiServerClient::s_instances;

	WiFiServerClient::WiFiServerClient(UART_HandleTypeDef& huartInterface)
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
		: IServerClient()
		, m_huartInterface(huartInterface)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ffbb 	bl	8001640 <_ZN3VMB13IServerClientC1Ev>
 80016ca:	4a5c      	ldr	r2, [pc, #368]	@ (800183c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x184>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	731a      	strb	r2, [r3, #12]
	{
		for (size_t i = 0; i < s_instances.size(); ++i)
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e023      	b.n	800172a <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x72>
		{
			if (s_instances[i] == nullptr)
 80016e2:	68f9      	ldr	r1, [r7, #12]
 80016e4:	4856      	ldr	r0, [pc, #344]	@ (8001840 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x188>)
 80016e6:	f000 fa23 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 80016ea:	4603      	mov	r3, r0
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf0c      	ite	eq
 80016f2:	2301      	moveq	r3, #1
 80016f4:	2300      	movne	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d007      	beq.n	800170c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x54>
			{
				s_instances[i] = this;
 80016fc:	68f9      	ldr	r1, [r7, #12]
 80016fe:	4850      	ldr	r0, [pc, #320]	@ (8001840 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x188>)
 8001700:	f000 fa16 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 8001704:	4602      	mov	r2, r0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
				break;
 800170a:	e015      	b.n	8001738 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x80>
			}
			if (i == s_instances.size() - 1)
 800170c:	484c      	ldr	r0, [pc, #304]	@ (8001840 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x188>)
 800170e:	f7ff ffc7 	bl	80016a0 <_ZNKSt5arrayIPN3VMB16WiFiServerClientELj10EE4sizeEv>
 8001712:	4603      	mov	r3, r0
 8001714:	3b01      	subs	r3, #1
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d103      	bne.n	8001724 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x6c>
			{
				printf("All instances are used!\n\r");
 800171c:	4849      	ldr	r0, [pc, #292]	@ (8001844 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x18c>)
 800171e:	f014 f937 	bl	8015990 <iprintf>
				return;
 8001722:	e086      	b.n	8001832 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x17a>
		for (size_t i = 0; i < s_instances.size(); ++i)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3301      	adds	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4845      	ldr	r0, [pc, #276]	@ (8001840 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x188>)
 800172c:	f7ff ffb8 	bl	80016a0 <_ZNKSt5arrayIPN3VMB16WiFiServerClientELj10EE4sizeEv>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4293      	cmp	r3, r2
 8001736:	d3d4      	bcc.n	80016e2 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x2a>
			}
		}

		HAL_UARTEx_ReceiveToIdle_DMA(&m_huartInterface, m_rxBuff[0], sizeof(m_rxBuff[0]));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6898      	ldr	r0, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	330d      	adds	r3, #13
 8001740:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001744:	4619      	mov	r1, r3
 8001746:	f00a fe67 	bl	800c418 <HAL_UARTEx_ReceiveToIdle_DMA>
		m_rx_data.buff = NULL;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
		m_rx_data.dataReceived = false;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2814 	strb.w	r2, [r3, #2068]	@ 0x814
		m_rx_data.size = 0;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f8a3 2816 	strh.w	r2, [r3, #2070]	@ 0x816

		if (sendATCommand("ATE0")) {
 8001762:	4939      	ldr	r1, [pc, #228]	@ (8001848 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x190>)
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f96d 	bl	8001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d012      	beq.n	80017a0 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0xe8>
			printf("ESP32 is responsive.\n\r");
 800177a:	4834      	ldr	r0, [pc, #208]	@ (800184c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x194>)
 800177c:	f014 f908 	bl	8015990 <iprintf>
		}
		else {
			printf("ESP32 is not responding!\n\r");
			return;
		}
		HAL_Delay(10);
 8001780:	200a      	movs	r0, #10
 8001782:	f002 faeb 	bl	8003d5c <HAL_Delay>
		if (sendATCommand("AT+CWMODE=2")) {
 8001786:	4932      	ldr	r1, [pc, #200]	@ (8001850 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x198>)
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f95b 	bl	8001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf14      	ite	ne
 8001794:	2301      	movne	r3, #1
 8001796:	2300      	moveq	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d008      	beq.n	80017b0 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0xf8>
 800179e:	e003      	b.n	80017a8 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0xf0>
			printf("ESP32 is not responding!\n\r");
 80017a0:	482c      	ldr	r0, [pc, #176]	@ (8001854 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x19c>)
 80017a2:	f014 f8f5 	bl	8015990 <iprintf>
			return;
 80017a6:	e044      	b.n	8001832 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x17a>
			printf("WiFi mode set to AP.\n\r");
 80017a8:	482b      	ldr	r0, [pc, #172]	@ (8001858 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1a0>)
 80017aa:	f014 f8f1 	bl	8015990 <iprintf>
 80017ae:	e002      	b.n	80017b6 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0xfe>
		}
		else {
			printf("Failed to set WiFi mode.\n\r");
 80017b0:	482a      	ldr	r0, [pc, #168]	@ (800185c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1a4>)
 80017b2:	f014 f8ed 	bl	8015990 <iprintf>
		}
		HAL_Delay(10);
 80017b6:	200a      	movs	r0, #10
 80017b8:	f002 fad0 	bl	8003d5c <HAL_Delay>
		if (sendATCommand("AT+CWSAP=\"MyHotspot\",\"MyPassword\",5,3")) {
 80017bc:	4928      	ldr	r1, [pc, #160]	@ (8001860 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1a8>)
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f940 	bl	8001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf14      	ite	ne
 80017ca:	2301      	movne	r3, #1
 80017cc:	2300      	moveq	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x124>
			printf("Hotspot created successfully.\n\r");
 80017d4:	4823      	ldr	r0, [pc, #140]	@ (8001864 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1ac>)
 80017d6:	f014 f8db 	bl	8015990 <iprintf>
 80017da:	e002      	b.n	80017e2 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x12a>
		}
		else {
			printf("Failed to create hotspot.\n\r");
 80017dc:	4822      	ldr	r0, [pc, #136]	@ (8001868 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1b0>)
 80017de:	f014 f8d7 	bl	8015990 <iprintf>
		}
		HAL_Delay(10);
 80017e2:	200a      	movs	r0, #10
 80017e4:	f002 faba 	bl	8003d5c <HAL_Delay>
		if (sendATCommand("AT+CWDHCP=1,1")) {
 80017e8:	4920      	ldr	r1, [pc, #128]	@ (800186c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1b4>)
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f92a 	bl	8001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x150>
			printf("DHCP server enabled.\n\r");
 8001800:	481b      	ldr	r0, [pc, #108]	@ (8001870 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1b8>)
 8001802:	f014 f8c5 	bl	8015990 <iprintf>
 8001806:	e002      	b.n	800180e <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x156>
		}
		else {
			printf("Failed to enable DHCP.\n\r");
 8001808:	481a      	ldr	r0, [pc, #104]	@ (8001874 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1bc>)
 800180a:	f014 f8c1 	bl	8015990 <iprintf>
		}
		HAL_Delay(10);
 800180e:	200a      	movs	r0, #10
 8001810:	f002 faa4 	bl	8003d5c <HAL_Delay>
		if (sendATCommand("AT+CWLIF")) {
 8001814:	4918      	ldr	r1, [pc, #96]	@ (8001878 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1c0>)
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f914 	bl	8001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x17a>
			printf("Checking connected clients...\n\r");
 800182c:	4813      	ldr	r0, [pc, #76]	@ (800187c <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef+0x1c4>)
 800182e:	f014 f8af 	bl	8015990 <iprintf>
		}
	}
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	08016d84 	.word	0x08016d84
 8001840:	200002d8 	.word	0x200002d8
 8001844:	080169d0 	.word	0x080169d0
 8001848:	080169ec 	.word	0x080169ec
 800184c:	080169f4 	.word	0x080169f4
 8001850:	08016a28 	.word	0x08016a28
 8001854:	08016a0c 	.word	0x08016a0c
 8001858:	08016a34 	.word	0x08016a34
 800185c:	08016a4c 	.word	0x08016a4c
 8001860:	08016a68 	.word	0x08016a68
 8001864:	08016a90 	.word	0x08016a90
 8001868:	08016ab0 	.word	0x08016ab0
 800186c:	08016acc 	.word	0x08016acc
 8001870:	08016adc 	.word	0x08016adc
 8001874:	08016af4 	.word	0x08016af4
 8001878:	08016b10 	.word	0x08016b10
 800187c:	08016b1c 	.word	0x08016b1c

08001880 <_ZN3VMB16WiFiServerClientD1Ev>:
	WiFiServerClient::~WiFiServerClient()
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <_ZN3VMB16WiFiServerClientD1Ev+0x68>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
	{
		for (size_t i = 0; i < s_instances.size(); ++i)
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e018      	b.n	80018c6 <_ZN3VMB16WiFiServerClientD1Ev+0x46>
		{
			if (s_instances[i] == this)
 8001894:	68f9      	ldr	r1, [r7, #12]
 8001896:	4815      	ldr	r0, [pc, #84]	@ (80018ec <_ZN3VMB16WiFiServerClientD1Ev+0x6c>)
 8001898:	f000 f94a 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 800189c:	4603      	mov	r3, r0
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	bf0c      	ite	eq
 80018a6:	2301      	moveq	r3, #1
 80018a8:	2300      	movne	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <_ZN3VMB16WiFiServerClientD1Ev+0x40>
			{
				s_instances[i] = nullptr;
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	480e      	ldr	r0, [pc, #56]	@ (80018ec <_ZN3VMB16WiFiServerClientD1Ev+0x6c>)
 80018b4:	f000 f93c 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
				break;
 80018be:	e009      	b.n	80018d4 <_ZN3VMB16WiFiServerClientD1Ev+0x54>
		for (size_t i = 0; i < s_instances.size(); ++i)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4809      	ldr	r0, [pc, #36]	@ (80018ec <_ZN3VMB16WiFiServerClientD1Ev+0x6c>)
 80018c8:	f7ff feea 	bl	80016a0 <_ZNKSt5arrayIPN3VMB16WiFiServerClientELj10EE4sizeEv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d3df      	bcc.n	8001894 <_ZN3VMB16WiFiServerClientD1Ev+0x14>
			}
		}
	}
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fec2 	bl	8001660 <_ZN3VMB13IServerClientD1Ev>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	08016d84 	.word	0x08016d84
 80018ec:	200002d8 	.word	0x200002d8

080018f0 <_ZN3VMB16WiFiServerClientD0Ev>:
	WiFiServerClient::~WiFiServerClient()
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	}
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffc1 	bl	8001880 <_ZN3VMB16WiFiServerClientD1Ev>
 80018fe:	f640 0118 	movw	r1, #2072	@ 0x818
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f013 fcf4 	bl	80152f0 <_ZdlPvj>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_ZN3VMB16WiFiServerClient7connectEv>:

	bool WiFiServerClient::connect()
	{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
		return false;
 800191a:	2300      	movs	r3, #0
	}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_ZN3VMB16WiFiServerClient10disconnectEv>:
	bool WiFiServerClient::disconnect()
	{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
		return false;
 8001930:	2300      	movs	r3, #0
	}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_ZN3VMB16WiFiServerClient4sendEPKcj>:
	bool WiFiServerClient::send(const char* data, unsigned int length)
	{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
		return false;
 800194a:	2300      	movs	r3, #0
	}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_ZN3VMB16WiFiServerClient7receiveEPcj>:
	unsigned int WiFiServerClient::receive(char* buffer, unsigned int length)
	{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
		return 0;
 8001964:	2300      	movs	r3, #0
	}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft>:

	void WiFiServerClient::on_HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t size)
	{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
		WiFiServerClient* instance = nullptr;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
		for (size_t i = 0; i < s_instances.size(); ++i)
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	e021      	b.n	80019ce <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x5a>
		{
			if (s_instances[i] != nullptr && &s_instances[i]->m_huartInterface == huart)
 800198a:	6939      	ldr	r1, [r7, #16]
 800198c:	482c      	ldr	r0, [pc, #176]	@ (8001a40 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xcc>)
 800198e:	f000 f8cf 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 8001992:	4603      	mov	r3, r0
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x3e>
 800199a:	6939      	ldr	r1, [r7, #16]
 800199c:	4828      	ldr	r0, [pc, #160]	@ (8001a40 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xcc>)
 800199e:	f000 f8c7 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 80019a2:	4603      	mov	r3, r0
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d101      	bne.n	80019b2 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x3e>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x40>
 80019b2:	2300      	movs	r3, #0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x54>
			{
				instance = s_instances[i];
 80019b8:	6939      	ldr	r1, [r7, #16]
 80019ba:	4821      	ldr	r0, [pc, #132]	@ (8001a40 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xcc>)
 80019bc:	f000 f8b8 	bl	8001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>
 80019c0:	4603      	mov	r3, r0
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	617b      	str	r3, [r7, #20]
				break;
 80019c6:	e009      	b.n	80019dc <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x68>
		for (size_t i = 0; i < s_instances.size(); ++i)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	3301      	adds	r3, #1
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	481c      	ldr	r0, [pc, #112]	@ (8001a40 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xcc>)
 80019d0:	f7ff fe66 	bl	80016a0 <_ZNKSt5arrayIPN3VMB16WiFiServerClientELj10EE4sizeEv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4293      	cmp	r3, r2
 80019da:	d3d6      	bcc.n	800198a <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0x16>
			}
		}
		if (!instance)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d029      	beq.n	8001a36 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xc2>
			return;
		uint8_t* nextBuff = instance->m_rxBuff[instance->buffSwitcher];
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	7b1b      	ldrb	r3, [r3, #12]
 80019e6:	029b      	lsls	r3, r3, #10
 80019e8:	3308      	adds	r3, #8
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4413      	add	r3, r2
 80019ee:	3305      	adds	r3, #5
 80019f0:	60fb      	str	r3, [r7, #12]
		instance->buffSwitcher = !instance->buffSwitcher;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	7b1b      	ldrb	r3, [r3, #12]
 80019f6:	f083 0301 	eor.w	r3, r3, #1
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	731a      	strb	r2, [r3, #12]

		HAL_UARTEx_ReceiveToIdle_DMA(&instance->m_huartInterface, nextBuff, sizeof(instance->m_rxBuff[0]));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f00a fd04 	bl	800c418 <HAL_UARTEx_ReceiveToIdle_DMA>
		instance->m_rx_data.buff = instance->m_rxBuff[instance->buffSwitcher];
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	7b1b      	ldrb	r3, [r3, #12]
 8001a14:	029b      	lsls	r3, r3, #10
 8001a16:	3308      	adds	r3, #8
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	1d5a      	adds	r2, r3, #5
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
		instance->m_rx_data.size = size;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	f8a3 2816 	strh.w	r2, [r3, #2070]	@ 0x816
		instance->m_rx_data.dataReceived = true;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2814 	strb.w	r2, [r3, #2068]	@ 0x814
 8001a34:	e000      	b.n	8001a38 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft+0xc4>
			return;
 8001a36:	bf00      	nop
	}
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200002d8 	.word	0x200002d8

08001a44 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc>:

	int WiFiServerClient::sendATCommand(const char* command)
	{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b0a7      	sub	sp, #156	@ 0x9c
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
		//char response[ESP_RESPONSE_SIZE] = {0}; // Buffer for ESP32 response
		uint8_t txBuffer[ESP_RESPONSE_SIZE] = { 0 };
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	227c      	movs	r2, #124	@ 0x7c
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f014 f83b 	bl	8015ad6 <memset>
		int index = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		uint32_t startTime = HAL_GetTick(); // Start timer
 8001a66:	f002 f96d 	bl	8003d44 <HAL_GetTick>
 8001a6a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

		// Copy the AT command into the buffer and append "\r\n"
		snprintf((char*)txBuffer, ESP_RESPONSE_SIZE, "%s\r\n", command);
 8001a6e:	f107 000c 	add.w	r0, r7, #12
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	4a2a      	ldr	r2, [pc, #168]	@ (8001b20 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xdc>)
 8001a76:	2180      	movs	r1, #128	@ 0x80
 8001a78:	f013 ff9c 	bl	80159b4 <sniprintf>

		HAL_StatusTypeDef result = HAL_UART_Transmit_DMA(&m_huartInterface, txBuffer, strlen((char*)txBuffer));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689c      	ldr	r4, [r3, #8]
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fc0b 	bl	80002a0 <strlen>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	4619      	mov	r1, r3
 8001a94:	4620      	mov	r0, r4
 8001a96:	f00a fc4f 	bl	800c338 <HAL_UART_Transmit_DMA>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

		while ((HAL_GetTick() - startTime) < 1000 * 60 * 5)
 8001aa0:	e02b      	b.n	8001afa <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xb6>
		{
			if (m_rx_data.dataReceived)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3814 	ldrb.w	r3, [r3, #2068]	@ 0x814
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d025      	beq.n	8001afa <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xb6>
			{
				m_rx_data.dataReceived = false;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2814 	strb.w	r2, [r3, #2068]	@ 0x814
				// Check if response contains "OK" or "ERROR"
				if (strstr((const char*)m_rx_data.buff, "OK"))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 8001abc:	4919      	ldr	r1, [pc, #100]	@ (8001b24 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xe0>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f014 f811 	bl	8015ae6 <strstr>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0x94>
				{
					return 1; // Success
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e01f      	b.n	8001b18 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xd4>
				}
				else if (strstr((const char*)m_rx_data.buff, "ERROR"))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 8001ade:	4912      	ldr	r1, [pc, #72]	@ (8001b28 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xe4>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f014 f800 	bl	8015ae6 <strstr>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf14      	ite	ne
 8001aec:	2301      	movne	r3, #1
 8001aee:	2300      	moveq	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xb6>
				{
					return 0; // Failure
 8001af6:	2300      	movs	r3, #0
 8001af8:	e00e      	b.n	8001b18 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xd4>
		while ((HAL_GetTick() - startTime) < 1000 * 60 * 5)
 8001afa:	f002 f923 	bl	8003d44 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0xe8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	bf94      	ite	ls
 8001b0c:	2301      	movls	r3, #1
 8001b0e:	2300      	movhi	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1c5      	bne.n	8001aa2 <_ZN3VMB16WiFiServerClient13sendATCommandEPKc+0x5e>
				}
			}
		}
		return 0;
 8001b16:	2300      	movs	r3, #0
	}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	379c      	adds	r7, #156	@ 0x9c
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd90      	pop	{r4, r7, pc}
 8001b20:	08016b3c 	.word	0x08016b3c
 8001b24:	08016b44 	.word	0x08016b44
 8001b28:	08016b48 	.word	0x08016b48
 8001b2c:	000493df 	.word	0x000493df

08001b30 <_ZNSt5arrayIPN3VMB16WiFiServerClientELj10EEixEj>:
      empty() const noexcept { return size() == 0; }

      // Element access.
      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f805 	bl	8001b4e <_ZNSt14__array_traitsIPN3VMB16WiFiServerClientELj10EE6_S_refERA10_KS2_j>
 8001b44:	4603      	mov	r3, r0
      }
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_ZNSt14__array_traitsIPN3VMB16WiFiServerClientELj10EE6_S_refERA10_KS2_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f92f 	bl	8001dd8 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_ZN3VMB13testFat32FileEv>:


namespace VMB
{
    bool testFat32File()
    {
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8001b8a:	af00      	add	r7, sp, #0
        FAT32File file;
 8001b8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fd4f 	bl	8000634 <_ZN3VMB9FAT32FileC1Ev>

        // Open a file for writing
        if (file.open("test.txt", FA_WRITE | FA_CREATE_ALWAYS)) {
 8001b96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b9a:	220a      	movs	r2, #10
 8001b9c:	4965      	ldr	r1, [pc, #404]	@ (8001d34 <_ZN3VMB13testFat32FileEv+0x1b0>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fe0a 	bl	80007b8 <_ZN3VMB9FAT32File4openEPKci>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d013      	beq.n	8001bd2 <_ZN3VMB13testFat32FileEv+0x4e>
            printf("File opened for writing\n\r");
 8001baa:	4863      	ldr	r0, [pc, #396]	@ (8001d38 <_ZN3VMB13testFat32FileEv+0x1b4>)
 8001bac:	f013 fef0 	bl	8015990 <iprintf>
            file.write("Hello, FATFS!");
 8001bb0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bb4:	4961      	ldr	r1, [pc, #388]	@ (8001d3c <_ZN3VMB13testFat32FileEv+0x1b8>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fe65 	bl	8000886 <_ZN3VMB9FAT32File5writeEPKc>
            file.flush();
 8001bbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fee3 	bl	800098c <_ZN3VMB9FAT32File5flushEv>
            file.close();
 8001bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fe2d 	bl	800082a <_ZN3VMB9FAT32File5closeEv>
 8001bd0:	e002      	b.n	8001bd8 <_ZN3VMB13testFat32FileEv+0x54>
        }
        else {
            printf("Failed to open file for writing\n\r");
 8001bd2:	485b      	ldr	r0, [pc, #364]	@ (8001d40 <_ZN3VMB13testFat32FileEv+0x1bc>)
 8001bd4:	f013 fedc 	bl	8015990 <iprintf>
        }

        // Open the same file for reading
        if (file.open("test.txt", FA_READ)) {
 8001bd8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4955      	ldr	r1, [pc, #340]	@ (8001d34 <_ZN3VMB13testFat32FileEv+0x1b0>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fde9 	bl	80007b8 <_ZN3VMB9FAT32File4openEPKci>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d025      	beq.n	8001c38 <_ZN3VMB13testFat32FileEv+0xb4>
            char buffer[20] = { 0 };
 8001bec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001bf0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
            file.read(buffer, sizeof(buffer) - 1);
 8001c04:	f107 0108 	add.w	r1, r7, #8
 8001c08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c0c:	2213      	movs	r2, #19
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fe5e 	bl	80008d0 <_ZN3VMB9FAT32File4readEPcj>
            printf("Read from file: %s\n\r", buffer);
 8001c14:	f107 0308 	add.w	r3, r7, #8
 8001c18:	4619      	mov	r1, r3
 8001c1a:	484a      	ldr	r0, [pc, #296]	@ (8001d44 <_ZN3VMB13testFat32FileEv+0x1c0>)
 8001c1c:	f013 feb8 	bl	8015990 <iprintf>
            file.close();
 8001c20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fe00 	bl	800082a <_ZN3VMB9FAT32File5closeEv>
            printf("Failed to open file for reading\n\r");
            return false;
        }

        // Check if file exists
        if (FAT32File::exists("test.txt")) {
 8001c2a:	4842      	ldr	r0, [pc, #264]	@ (8001d34 <_ZN3VMB13testFat32FileEv+0x1b0>)
 8001c2c:	f7fe fef6 	bl	8000a1c <_ZN3VMB9FAT32File6existsEPKc>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d010      	beq.n	8001c58 <_ZN3VMB13testFat32FileEv+0xd4>
 8001c36:	e004      	b.n	8001c42 <_ZN3VMB13testFat32FileEv+0xbe>
            printf("Failed to open file for reading\n\r");
 8001c38:	4843      	ldr	r0, [pc, #268]	@ (8001d48 <_ZN3VMB13testFat32FileEv+0x1c4>)
 8001c3a:	f013 fea9 	bl	8015990 <iprintf>
            return false;
 8001c3e:	2400      	movs	r4, #0
 8001c40:	e06c      	b.n	8001d1c <_ZN3VMB13testFat32FileEv+0x198>
            printf("File exists!\n\r");
 8001c42:	4842      	ldr	r0, [pc, #264]	@ (8001d4c <_ZN3VMB13testFat32FileEv+0x1c8>)
 8001c44:	f013 fea4 	bl	8015990 <iprintf>
            printf("File does not exist\n\r");
            return false;
        }

        // Rename the file
        if (FAT32File::rename("test.txt", "renamed.txt")) {
 8001c48:	4941      	ldr	r1, [pc, #260]	@ (8001d50 <_ZN3VMB13testFat32FileEv+0x1cc>)
 8001c4a:	483a      	ldr	r0, [pc, #232]	@ (8001d34 <_ZN3VMB13testFat32FileEv+0x1b0>)
 8001c4c:	f7fe fed3 	bl	80009f6 <_ZN3VMB9FAT32File6renameEPKcS2_>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00f      	beq.n	8001c76 <_ZN3VMB13testFat32FileEv+0xf2>
 8001c56:	e004      	b.n	8001c62 <_ZN3VMB13testFat32FileEv+0xde>
            printf("File does not exist\n\r");
 8001c58:	483e      	ldr	r0, [pc, #248]	@ (8001d54 <_ZN3VMB13testFat32FileEv+0x1d0>)
 8001c5a:	f013 fe99 	bl	8015990 <iprintf>
            return false;
 8001c5e:	2400      	movs	r4, #0
 8001c60:	e05c      	b.n	8001d1c <_ZN3VMB13testFat32FileEv+0x198>
            printf("File renamed successfully\n\r");
 8001c62:	483d      	ldr	r0, [pc, #244]	@ (8001d58 <_ZN3VMB13testFat32FileEv+0x1d4>)
 8001c64:	f013 fe94 	bl	8015990 <iprintf>
            printf("Failed to rename file\n\r");
            return false;
        }

        // Delete the file
        if (FAT32File::remove("renamed.txt")) {
 8001c68:	4839      	ldr	r0, [pc, #228]	@ (8001d50 <_ZN3VMB13testFat32FileEv+0x1cc>)
 8001c6a:	f7fe feb3 	bl	80009d4 <_ZN3VMB9FAT32File6removeEPKc>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d02c      	beq.n	8001cce <_ZN3VMB13testFat32FileEv+0x14a>
 8001c74:	e004      	b.n	8001c80 <_ZN3VMB13testFat32FileEv+0xfc>
            printf("Failed to rename file\n\r");
 8001c76:	4839      	ldr	r0, [pc, #228]	@ (8001d5c <_ZN3VMB13testFat32FileEv+0x1d8>)
 8001c78:	f013 fe8a 	bl	8015990 <iprintf>
            return false;
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	e04d      	b.n	8001d1c <_ZN3VMB13testFat32FileEv+0x198>
            printf("File deleted successfully\n\r");
 8001c80:	4837      	ldr	r0, [pc, #220]	@ (8001d60 <_ZN3VMB13testFat32FileEv+0x1dc>)
 8001c82:	f013 fe85 	bl	8015990 <iprintf>
            printf("Failed to delete file\n\r");
            return false;
        }

        // List files in root directory
        printf("Listing root directory:\n\r");
 8001c86:	4837      	ldr	r0, [pc, #220]	@ (8001d64 <_ZN3VMB13testFat32FileEv+0x1e0>)
 8001c88:	f013 fe82 	bl	8015990 <iprintf>
        std::vector<std::string> files = FAT32File::listDirectory("/");
 8001c8c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001c90:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001c94:	4934      	ldr	r1, [pc, #208]	@ (8001d68 <_ZN3VMB13testFat32FileEv+0x1e4>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe feee 	bl	8000a78 <_ZN3VMB9FAT32File13listDirectoryB5cxx11EPKc>
        for (const auto& name : files) {
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8001ca4:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8001ca8:	f7ff f95d 	bl	8000f66 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cb2:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	f8d7 0284 	ldr.w	r0, [r7, #644]	@ 0x284
 8001cbc:	f7fe ffc0 	bl	8000c40 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8001cc6:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e017      	b.n	8001cfe <_ZN3VMB13testFat32FileEv+0x17a>
            printf("Failed to delete file\n\r");
 8001cce:	4827      	ldr	r0, [pc, #156]	@ (8001d6c <_ZN3VMB13testFat32FileEv+0x1e8>)
 8001cd0:	f013 fe5e 	bl	8015990 <iprintf>
            return false;
 8001cd4:	2400      	movs	r4, #0
 8001cd6:	e021      	b.n	8001d1c <_ZN3VMB13testFat32FileEv+0x198>
        for (const auto& name : files) {
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f8cf 	bl	8001e7e <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>
 8001ce0:	f8c7 0280 	str.w	r0, [r7, #640]	@ 0x280
            printf(" - %s\n\r", name.c_str());
 8001ce4:	f8d7 0280 	ldr.w	r0, [r7, #640]	@ 0x280
 8001ce8:	f013 fc8b 	bl	8015602 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481f      	ldr	r0, [pc, #124]	@ (8001d70 <_ZN3VMB13testFat32FileEv+0x1ec>)
 8001cf2:	f013 fe4d 	bl	8015990 <iprintf>
        for (const auto& name : files) {
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 f8af 	bl	8001e5c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>
 8001cfe:	463a      	mov	r2, r7
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f891 	bl	8001e2c <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1e3      	bne.n	8001cd8 <_ZN3VMB13testFat32FileEv+0x154>
        }
        return true;
 8001d10:	2401      	movs	r4, #1
    }
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f843 	bl	8001da2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8001d1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fce3 	bl	80006ec <_ZN3VMB9FAT32FileD1Ev>
 8001d26:	4623      	mov	r3, r4
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f507 7723 	add.w	r7, r7, #652	@ 0x28c
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	08016b50 	.word	0x08016b50
 8001d38:	08016b5c 	.word	0x08016b5c
 8001d3c:	08016b78 	.word	0x08016b78
 8001d40:	08016b88 	.word	0x08016b88
 8001d44:	08016bac 	.word	0x08016bac
 8001d48:	08016bc4 	.word	0x08016bc4
 8001d4c:	08016be8 	.word	0x08016be8
 8001d50:	08016c10 	.word	0x08016c10
 8001d54:	08016bf8 	.word	0x08016bf8
 8001d58:	08016c1c 	.word	0x08016c1c
 8001d5c:	08016c38 	.word	0x08016c38
 8001d60:	08016c50 	.word	0x08016c50
 8001d64:	08016c84 	.word	0x08016c84
 8001d68:	08016ca0 	.word	0x08016ca0
 8001d6c:	08016c6c 	.word	0x08016c6c
 8001d70:	08016ca4 	.word	0x08016ca4

08001d74 <_ZN3VMB8testWIFIEv>:

    bool testWIFI()
    {
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	f6ad 0d1c 	subw	sp, sp, #2076	@ 0x81c
 8001d7a:	af00      	add	r7, sp, #0
    	VMB::WiFiServerClient client(*getHuart6());
 8001d7c:	f000 f8f8 	bl	8001f70 <getHuart6>
 8001d80:	4602      	mov	r2, r0
 8001d82:	463b      	mov	r3, r7
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fc96 	bl	80016b8 <_ZN3VMB16WiFiServerClientC1ER20__UART_HandleTypeDef>

    	return true;
 8001d8c:	2401      	movs	r4, #1
    }
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fd75 	bl	8001880 <_ZN3VMB16WiFiServerClientD1Ev>
    	return true;
 8001d96:	4623      	mov	r3, r4
    }
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f607 071c 	addw	r7, r7, #2076	@ 0x81c
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}

08001da2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001da2:	b5b0      	push	{r4, r5, r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681c      	ldr	r4, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe ff0c 	bl	8000bd2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001dba:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7fe ff11 	bl	8000be8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f811 	bl	8001df0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bdb0      	pop	{r4, r5, r7, pc}

08001dd8 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f858 	bl	8001e96 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	10db      	asrs	r3, r3, #3
 8001e08:	4a07      	ldr	r2, [pc, #28]	@ (8001e28 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x38>)
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001e0e:	461a      	mov	r2, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7fe fecb 	bl	8000bac <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      }
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fea7 	bl	8001b6c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	aaaaaaab 	.word	0xaaaaaaab

08001e2c <_ZN9__gnu_cxxneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEEbRKNS_17__normal_iteratorIT_T0_EESG_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff f8e8 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	681c      	ldr	r4, [r3, #0]
 8001e40:	6838      	ldr	r0, [r7, #0]
 8001e42:	f7ff f8e3 	bl	800100c <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8001e46:	4603      	mov	r3, r0
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	429c      	cmp	r4, r3
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd90      	pop	{r4, r7, pc}

08001e5c <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f103 0218 	add.w	r2, r3, #24
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	601a      	str	r2, [r3, #0]
	return *this;
 8001e70:	687b      	ldr	r3, [r7, #4]
      }
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_Z9execTestsv>:
#include "application.h"
#include "LibVoiceMailBox.hpp"
#include "tests.hpp"

bool execTests()
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
	bool success = true;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	71fb      	strb	r3, [r7, #7]
	success &= VMB::testFat32File();
 8001eb6:	f7ff fe65 	bl	8001b84 <_ZN3VMB13testFat32FileEv>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf14      	ite	ne
 8001ec6:	2301      	movne	r3, #1
 8001ec8:	2300      	moveq	r3, #0
 8001eca:	71fb      	strb	r3, [r7, #7]
	success &= VMB::testWIFI();
 8001ecc:	f7ff ff52 	bl	8001d74 <_ZN3VMB8testWIFIEv>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf14      	ite	ne
 8001edc:	2301      	movne	r3, #1
 8001ede:	2300      	moveq	r3, #0
 8001ee0:	71fb      	strb	r3, [r7, #7]
	return success;
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <setup>:

void setup()
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	if (!execTests())
 8001ef0:	f7ff ffdc 	bl	8001eac <_Z9execTestsv>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f083 0301 	eor.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d007      	beq.n	8001f10 <setup+0x24>
	{
		printf("Tests failed\n\r");
 8001f00:	4806      	ldr	r0, [pc, #24]	@ (8001f1c <setup+0x30>)
 8001f02:	f013 fd45 	bl	8015990 <iprintf>
		while (1) 
		{
			HAL_Delay(1000);
 8001f06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f0a:	f001 ff27 	bl	8003d5c <HAL_Delay>
 8001f0e:	e7fa      	b.n	8001f06 <setup+0x1a>
		}
	}
	else
	{
		printf("Tests passed\n\r");
 8001f10:	4803      	ldr	r0, [pc, #12]	@ (8001f20 <setup+0x34>)
 8001f12:	f013 fd3d 	bl	8015990 <iprintf>
	}
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	08016cac 	.word	0x08016cac
 8001f20:	08016cbc 	.word	0x08016cbc

08001f24 <HAL_UARTEx_RxEventCallback>:




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
	VMB::WiFiServerClient::on_HAL_UARTEx_RxEventCallback(huart, Size);
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fd1d 	bl	8001974 <_ZN3VMB16WiFiServerClient29on_HAL_UARTEx_RxEventCallbackEP20__UART_HandleTypeDeft>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


// Redirect stdout to UART
int _write(int file, char *ptr, int len) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <_write+0x28>)
 8001f5c:	f00a f960 	bl	800c220 <HAL_UART_Transmit>
    return len;
 8001f60:	687b      	ldr	r3, [r7, #4]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200007bc 	.word	0x200007bc

08001f70 <getHuart6>:

UART_HandleTypeDef* getHuart6()
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	return &huart6;
 8001f74:	4b02      	ldr	r3, [pc, #8]	@ (8001f80 <getHuart6+0x10>)
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	20000804 	.word	0x20000804

08001f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f88:	f001 fea6 	bl	8003cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f8c:	f000 f82c 	bl	8001fe8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f90:	f000 f89c 	bl	80020cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f94:	f000 fd00 	bl	8002998 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f98:	f000 fc60 	bl	800285c <MX_DMA_Init>
  MX_CRC_Init();
 8001f9c:	f000 f8c2 	bl	8002124 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001fa0:	f000 f8d4 	bl	800214c <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8001fa4:	f000 f904 	bl	80021b0 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8001fa8:	f000 fca6 	bl	80028f8 <MX_FMC_Init>
  MX_I2C1_Init();
 8001fac:	f000 fa00 	bl	80023b0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001fb0:	f000 fa2c 	bl	800240c <MX_I2C2_Init>
  MX_LTDC_Init();
 8001fb4:	f000 fa86 	bl	80024c4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001fb8:	f000 fb02 	bl	80025c0 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001fbc:	f000 fb2c 	bl	8002618 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8001fc0:	f000 fb88 	bl	80026d4 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8001fc4:	f000 fba6 	bl	8002714 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001fc8:	f000 fbf4 	bl	80027b4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001fcc:	f000 fc1c 	bl	8002808 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001fd0:	f00d fb24 	bl	800f61c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001fd4:	f012 fe82 	bl	8014cdc <MX_USB_HOST_Init>
  MX_I2S2_Init();
 8001fd8:	f000 fa46 	bl	8002468 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001fdc:	f7ff ff86 	bl	8001eec <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001fe0:	f012 fea2 	bl	8014d28 <MX_USB_HOST_Process>
 8001fe4:	e7fc      	b.n	8001fe0 <main+0x5c>
	...

08001fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b094      	sub	sp, #80	@ 0x50
 8001fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	2234      	movs	r2, #52	@ 0x34
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f013 fd6d 	bl	8015ad6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	4b2c      	ldr	r3, [pc, #176]	@ (80020c4 <SystemClock_Config+0xdc>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	4a2b      	ldr	r2, [pc, #172]	@ (80020c4 <SystemClock_Config+0xdc>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800201a:	6413      	str	r3, [r2, #64]	@ 0x40
 800201c:	4b29      	ldr	r3, [pc, #164]	@ (80020c4 <SystemClock_Config+0xdc>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002028:	2300      	movs	r3, #0
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	4b26      	ldr	r3, [pc, #152]	@ (80020c8 <SystemClock_Config+0xe0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a25      	ldr	r2, [pc, #148]	@ (80020c8 <SystemClock_Config+0xe0>)
 8002032:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b23      	ldr	r3, [pc, #140]	@ (80020c8 <SystemClock_Config+0xe0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002044:	2301      	movs	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002048:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800204c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204e:	2302      	movs	r3, #2
 8002050:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002052:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002056:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002058:	2304      	movs	r3, #4
 800205a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800205c:	23b4      	movs	r3, #180	@ 0xb4
 800205e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002060:	2302      	movs	r3, #2
 8002062:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002064:	2306      	movs	r3, #6
 8002066:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8002068:	2306      	movs	r3, #6
 800206a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4618      	mov	r0, r3
 8002072:	f007 fe13 	bl	8009c9c <HAL_RCC_OscConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800207c:	f000 fe2a 	bl	8002cd4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002080:	f007 f80a 	bl	8009098 <HAL_PWREx_EnableOverDrive>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800208a:	f000 fe23 	bl	8002cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208e:	230f      	movs	r3, #15
 8002090:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002092:	2302      	movs	r3, #2
 8002094:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800209a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800209e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	2105      	movs	r1, #5
 80020ac:	4618      	mov	r0, r3
 80020ae:	f007 f905 	bl	80092bc <HAL_RCC_ClockConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80020b8:	f000 fe0c 	bl	8002cd4 <Error_Handler>
  }
}
 80020bc:	bf00      	nop
 80020be:	3750      	adds	r7, #80	@ 0x50
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40007000 	.word	0x40007000

080020cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b090      	sub	sp, #64	@ 0x40
 80020d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	223c      	movs	r2, #60	@ 0x3c
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f013 fcfc 	bl	8015ad6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 80020de:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 80020e2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 80020e4:	2390      	movs	r3, #144	@ 0x90
 80020e6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80020e8:	2302      	movs	r3, #2
 80020ea:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80020ec:	2302      	movs	r3, #2
 80020ee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 80020f0:	2306      	movs	r3, #6
 80020f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80020f4:	2301      	movs	r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80020f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80020fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002102:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8002104:	2300      	movs	r3, #0
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	4618      	mov	r0, r3
 800210c:	f007 fb28 	bl	8009760 <HAL_RCCEx_PeriphCLKConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8002116:	f000 fddd 	bl	8002cd4 <Error_Handler>
  }
}
 800211a:	bf00      	nop
 800211c:	3740      	adds	r7, #64	@ 0x40
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <MX_CRC_Init+0x20>)
 800212a:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <MX_CRC_Init+0x24>)
 800212c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800212e:	4805      	ldr	r0, [pc, #20]	@ (8002144 <MX_CRC_Init+0x20>)
 8002130:	f001 ff1a 	bl	8003f68 <HAL_CRC_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800213a:	f000 fdcb 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000300 	.word	0x20000300
 8002148:	40023000 	.word	0x40023000

0800214c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002150:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <MX_DMA2D_Init+0x5c>)
 8002152:	4a16      	ldr	r2, [pc, #88]	@ (80021ac <MX_DMA2D_Init+0x60>)
 8002154:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002156:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <MX_DMA2D_Init+0x5c>)
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <MX_DMA2D_Init+0x5c>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002162:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <MX_DMA2D_Init+0x5c>)
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002168:	4b0f      	ldr	r3, [pc, #60]	@ (80021a8 <MX_DMA2D_Init+0x5c>)
 800216a:	2200      	movs	r2, #0
 800216c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <MX_DMA2D_Init+0x5c>)
 8002170:	2200      	movs	r2, #0
 8002172:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <MX_DMA2D_Init+0x5c>)
 8002176:	2200      	movs	r2, #0
 8002178:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800217a:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <MX_DMA2D_Init+0x5c>)
 800217c:	2200      	movs	r2, #0
 800217e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002180:	4809      	ldr	r0, [pc, #36]	@ (80021a8 <MX_DMA2D_Init+0x5c>)
 8002182:	f002 fb1b 	bl	80047bc <HAL_DMA2D_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800218c:	f000 fda2 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002190:	2101      	movs	r1, #1
 8002192:	4805      	ldr	r0, [pc, #20]	@ (80021a8 <MX_DMA2D_Init+0x5c>)
 8002194:	f002 fc6c 	bl	8004a70 <HAL_DMA2D_ConfigLayer>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800219e:	f000 fd99 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000308 	.word	0x20000308
 80021ac:	4002b000 	.word	0x4002b000

080021b0 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0aa      	sub	sp, #168	@ 0xa8
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80021b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80021c2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80021c6:	2224      	movs	r2, #36	@ 0x24
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f013 fc83 	bl	8015ad6 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80021d0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
 80021e0:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80021e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021e6:	2234      	movs	r2, #52	@ 0x34
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f013 fc73 	bl	8015ad6 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80021f0:	463b      	mov	r3, r7
 80021f2:	222c      	movs	r2, #44	@ 0x2c
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f013 fc6d 	bl	8015ad6 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80021fc:	4b6a      	ldr	r3, [pc, #424]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80021fe:	4a6b      	ldr	r2, [pc, #428]	@ (80023ac <MX_DSIHOST_DSI_Init+0x1fc>)
 8002200:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8002202:	4b69      	ldr	r3, [pc, #420]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8002208:	4b67      	ldr	r3, [pc, #412]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800220a:	2204      	movs	r2, #4
 800220c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800220e:	4b66      	ldr	r3, [pc, #408]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8002210:	2201      	movs	r2, #1
 8002212:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8002214:	237d      	movs	r3, #125	@ 0x7d
 8002216:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 800221a:	2302      	movs	r3, #2
 800221c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8002226:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800222a:	4619      	mov	r1, r3
 800222c:	485e      	ldr	r0, [pc, #376]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800222e:	f002 fcb1 	bl	8004b94 <HAL_DSI_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8002238:	f000 fd4c 	bl	8002cd4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800223c:	2301      	movs	r3, #1
 800223e:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800226e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002272:	4619      	mov	r1, r3
 8002274:	484c      	ldr	r0, [pc, #304]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8002276:	f003 f9a1 	bl	80055bc <HAL_DSI_ConfigHostTimeouts>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8002280:	f000 fd28 	bl	8002cd4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8002284:	231c      	movs	r3, #28
 8002286:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8002288:	2321      	movs	r3, #33	@ 0x21
 800228a:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800228c:	230f      	movs	r3, #15
 800228e:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8002290:	2319      	movs	r3, #25
 8002292:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8002298:	230a      	movs	r3, #10
 800229a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800229c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80022a0:	4619      	mov	r1, r3
 80022a2:	4841      	ldr	r0, [pc, #260]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80022a4:	f003 f920 	bl	80054e8 <HAL_DSI_ConfigPhyTimer>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 80022ae:	f000 fd11 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80022b2:	2104      	movs	r1, #4
 80022b4:	483c      	ldr	r0, [pc, #240]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80022b6:	f003 f8ef 	bl	8005498 <HAL_DSI_ConfigFlowControl>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80022c0:	f000 fd08 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80022c4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80022c8:	4837      	ldr	r0, [pc, #220]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80022ca:	f003 fa3d 	bl	8005748 <HAL_DSI_SetLowPowerRXFilter>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80022d4:	f000 fcfe 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80022d8:	2100      	movs	r1, #0
 80022da:	4833      	ldr	r0, [pc, #204]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 80022dc:	f002 fdda 	bl	8004e94 <HAL_DSI_ConfigErrorMonitor>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80022e6:	f000 fcf5 	bl	8002cd4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 80022ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80022f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022f4:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 80022f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022fa:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80022fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002300:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8002302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8002308:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800230c:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800230e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002312:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8002314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002318:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800231a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800231e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8002320:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002324:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8002326:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800232a:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800232c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002330:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8002336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800233a:	4619      	mov	r1, r3
 800233c:	481a      	ldr	r0, [pc, #104]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800233e:	f003 f84d 	bl	80053dc <HAL_DSI_ConfigCommand>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8002348:	f000 fcc4 	bl	8002cd4 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8002350:	2305      	movs	r3, #5
 8002352:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8002354:	23c8      	movs	r3, #200	@ 0xc8
 8002356:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8002358:	2310      	movs	r3, #16
 800235a:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8002360:	2304      	movs	r3, #4
 8002362:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8002370:	2340      	movs	r3, #64	@ 0x40
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8002374:	2301      	movs	r3, #1
 8002376:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8002378:	463b      	mov	r3, r7
 800237a:	4619      	mov	r1, r3
 800237c:	480a      	ldr	r0, [pc, #40]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 800237e:	f002 ff55 	bl	800522c <HAL_DSI_ConfigAdaptedCommandMode>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8002388:	f000 fca4 	bl	8002cd4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800238c:	2100      	movs	r1, #0
 800238e:	4806      	ldr	r0, [pc, #24]	@ (80023a8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8002390:	f002 ff24 	bl	80051dc <HAL_DSI_SetGenericVCID>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 800239a:	f000 fc9b 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	37a8      	adds	r7, #168	@ 0xa8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000348 	.word	0x20000348
 80023ac:	40016c00 	.word	0x40016c00

080023b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023b4:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <MX_I2C1_Init+0x50>)
 80023b6:	4a13      	ldr	r2, [pc, #76]	@ (8002404 <MX_I2C1_Init+0x54>)
 80023b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <MX_I2C1_Init+0x50>)
 80023bc:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <MX_I2C1_Init+0x58>)
 80023be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002400 <MX_I2C1_Init+0x50>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <MX_I2C1_Init+0x50>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002400 <MX_I2C1_Init+0x50>)
 80023ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <MX_I2C1_Init+0x50>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023da:	4b09      	ldr	r3, [pc, #36]	@ (8002400 <MX_I2C1_Init+0x50>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023e0:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <MX_I2C1_Init+0x50>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <MX_I2C1_Init+0x50>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023ec:	4804      	ldr	r0, [pc, #16]	@ (8002400 <MX_I2C1_Init+0x50>)
 80023ee:	f005 fceb 	bl	8007dc8 <HAL_I2C_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023f8:	f000 fc6c 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000364 	.word	0x20000364
 8002404:	40005400 	.word	0x40005400
 8002408:	000186a0 	.word	0x000186a0

0800240c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002410:	4b12      	ldr	r3, [pc, #72]	@ (800245c <MX_I2C2_Init+0x50>)
 8002412:	4a13      	ldr	r2, [pc, #76]	@ (8002460 <MX_I2C2_Init+0x54>)
 8002414:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002416:	4b11      	ldr	r3, [pc, #68]	@ (800245c <MX_I2C2_Init+0x50>)
 8002418:	4a12      	ldr	r2, [pc, #72]	@ (8002464 <MX_I2C2_Init+0x58>)
 800241a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800241c:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <MX_I2C2_Init+0x50>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002422:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <MX_I2C2_Init+0x50>)
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <MX_I2C2_Init+0x50>)
 800242a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800242e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002430:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <MX_I2C2_Init+0x50>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <MX_I2C2_Init+0x50>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800243c:	4b07      	ldr	r3, [pc, #28]	@ (800245c <MX_I2C2_Init+0x50>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <MX_I2C2_Init+0x50>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002448:	4804      	ldr	r0, [pc, #16]	@ (800245c <MX_I2C2_Init+0x50>)
 800244a:	f005 fcbd 	bl	8007dc8 <HAL_I2C_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002454:	f000 fc3e 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200003b8 	.word	0x200003b8
 8002460:	40005800 	.word	0x40005800
 8002464:	000186a0 	.word	0x000186a0

08002468 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800246c:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <MX_I2S2_Init+0x54>)
 800246e:	4a14      	ldr	r2, [pc, #80]	@ (80024c0 <MX_I2S2_Init+0x58>)
 8002470:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8002472:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <MX_I2S2_Init+0x54>)
 8002474:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002478:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800247a:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <MX_I2S2_Init+0x54>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <MX_I2S2_Init+0x54>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <MX_I2S2_Init+0x54>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <MX_I2S2_Init+0x54>)
 800248e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002492:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002494:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <MX_I2S2_Init+0x54>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800249a:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <MX_I2S2_Init+0x54>)
 800249c:	2200      	movs	r2, #0
 800249e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <MX_I2S2_Init+0x54>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80024a6:	4805      	ldr	r0, [pc, #20]	@ (80024bc <MX_I2S2_Init+0x54>)
 80024a8:	f005 fdd2 	bl	8008050 <HAL_I2S_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80024b2:	f000 fc0f 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000040c 	.word	0x2000040c
 80024c0:	40003800 	.word	0x40003800

080024c4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08e      	sub	sp, #56	@ 0x38
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	2234      	movs	r2, #52	@ 0x34
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f013 fb00 	bl	8015ad6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80024d6:	4b38      	ldr	r3, [pc, #224]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 80024d8:	4a38      	ldr	r2, [pc, #224]	@ (80025bc <MX_LTDC_Init+0xf8>)
 80024da:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80024dc:	4b36      	ldr	r3, [pc, #216]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 80024de:	2200      	movs	r2, #0
 80024e0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80024e2:	4b35      	ldr	r3, [pc, #212]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80024e8:	4b33      	ldr	r3, [pc, #204]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80024ee:	4b32      	ldr	r3, [pc, #200]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80024f4:	4b30      	ldr	r3, [pc, #192]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80024fa:	4b2f      	ldr	r3, [pc, #188]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8002500:	4b2d      	ldr	r3, [pc, #180]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 8002502:	2201      	movs	r2, #1
 8002504:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8002506:	4b2c      	ldr	r3, [pc, #176]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 8002508:	2201      	movs	r2, #1
 800250a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 800250c:	4b2a      	ldr	r3, [pc, #168]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 800250e:	22c9      	movs	r2, #201	@ 0xc9
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8002512:	4b29      	ldr	r3, [pc, #164]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 8002514:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8002518:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 800251a:	4b27      	ldr	r3, [pc, #156]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 800251c:	22ca      	movs	r2, #202	@ 0xca
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8002520:	4b25      	ldr	r3, [pc, #148]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 8002522:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002528:	4b23      	ldr	r3, [pc, #140]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002530:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002538:	4b1f      	ldr	r3, [pc, #124]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002540:	481d      	ldr	r0, [pc, #116]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 8002542:	f006 fa41 	bl	80089c8 <HAL_LTDC_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 800254c:	f000 fbc2 	bl	8002cd4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8002554:	23c8      	movs	r3, #200	@ 0xc8
 8002556:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800255c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002560:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002562:	2302      	movs	r3, #2
 8002564:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002566:	23ff      	movs	r3, #255	@ 0xff
 8002568:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800256e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002572:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002574:	2307      	movs	r3, #7
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002578:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 800257e:	23c8      	movs	r3, #200	@ 0xc8
 8002580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8002582:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002586:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	2200      	movs	r2, #0
 800259e:	4619      	mov	r1, r3
 80025a0:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <MX_LTDC_Init+0xf4>)
 80025a2:	f006 fba3 	bl	8008cec <HAL_LTDC_ConfigLayer>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 80025ac:	f000 fb92 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80025b0:	bf00      	nop
 80025b2:	3738      	adds	r7, #56	@ 0x38
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200004b4 	.word	0x200004b4
 80025bc:	40016800 	.word	0x40016800

080025c0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <MX_QUADSPI_Init+0x50>)
 80025c6:	4a13      	ldr	r2, [pc, #76]	@ (8002614 <MX_QUADSPI_Init+0x54>)
 80025c8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80025ca:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <MX_QUADSPI_Init+0x50>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <MX_QUADSPI_Init+0x50>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <MX_QUADSPI_Init+0x50>)
 80025d8:	2210      	movs	r2, #16
 80025da:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <MX_QUADSPI_Init+0x50>)
 80025de:	2218      	movs	r2, #24
 80025e0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <MX_QUADSPI_Init+0x50>)
 80025e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025e8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80025ea:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <MX_QUADSPI_Init+0x50>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80025f0:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <MX_QUADSPI_Init+0x50>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80025f6:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <MX_QUADSPI_Init+0x50>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80025fc:	4804      	ldr	r0, [pc, #16]	@ (8002610 <MX_QUADSPI_Init+0x50>)
 80025fe:	f006 fd9b 	bl	8009138 <HAL_QSPI_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002608:	f000 fb64 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	2000055c 	.word	0x2000055c
 8002614:	a0001000 	.word	0xa0001000

08002618 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800261c:	4b2a      	ldr	r3, [pc, #168]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 800261e:	4a2b      	ldr	r2, [pc, #172]	@ (80026cc <MX_SAI1_Init+0xb4>)
 8002620:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002622:	4b29      	ldr	r3, [pc, #164]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002624:	2200      	movs	r2, #0
 8002626:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002628:	4b27      	ldr	r3, [pc, #156]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 800262a:	2200      	movs	r2, #0
 800262c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800262e:	4b26      	ldr	r3, [pc, #152]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002630:	2240      	movs	r2, #64	@ 0x40
 8002632:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002634:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002636:	2200      	movs	r2, #0
 8002638:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800263a:	4b23      	ldr	r3, [pc, #140]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002640:	4b21      	ldr	r3, [pc, #132]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002646:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800264c:	4b1e      	ldr	r3, [pc, #120]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002652:	4b1d      	ldr	r3, [pc, #116]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8002658:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800265e:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002660:	4a1b      	ldr	r2, [pc, #108]	@ (80026d0 <MX_SAI1_Init+0xb8>)
 8002662:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002664:	4b18      	ldr	r3, [pc, #96]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800266a:	4b17      	ldr	r3, [pc, #92]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 800266c:	2200      	movs	r2, #0
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002670:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002672:	2200      	movs	r2, #0
 8002674:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002676:	4b14      	ldr	r3, [pc, #80]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800267c:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 800267e:	2208      	movs	r2, #8
 8002680:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002682:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002684:	2201      	movs	r2, #1
 8002686:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002688:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 800268a:	2200      	movs	r2, #0
 800268c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800268e:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002690:	2200      	movs	r2, #0
 8002692:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002694:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 8002696:	2200      	movs	r2, #0
 8002698:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800269a:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 800269c:	2200      	movs	r2, #0
 800269e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80026a0:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80026a6:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80026b2:	4805      	ldr	r0, [pc, #20]	@ (80026c8 <MX_SAI1_Init+0xb0>)
 80026b4:	f007 fd76 	bl	800a1a4 <HAL_SAI_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 80026be:	f000 fb09 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200005a8 	.word	0x200005a8
 80026cc:	40015804 	.word	0x40015804
 80026d0:	0002ee00 	.word	0x0002ee00

080026d4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <MX_SDIO_SD_Init+0x38>)
 80026da:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <MX_SDIO_SD_Init+0x3c>)
 80026dc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80026de:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <MX_SDIO_SD_Init+0x38>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80026e4:	4b09      	ldr	r3, [pc, #36]	@ (800270c <MX_SDIO_SD_Init+0x38>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80026ea:	4b08      	ldr	r3, [pc, #32]	@ (800270c <MX_SDIO_SD_Init+0x38>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80026f0:	4b06      	ldr	r3, [pc, #24]	@ (800270c <MX_SDIO_SD_Init+0x38>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <MX_SDIO_SD_Init+0x38>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80026fc:	4b03      	ldr	r3, [pc, #12]	@ (800270c <MX_SDIO_SD_Init+0x38>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	20000630 	.word	0x20000630
 8002710:	40012c00 	.word	0x40012c00

08002714 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271a:	f107 0308 	add.w	r3, r7, #8
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002728:	463b      	mov	r3, r7
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002730:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <MX_TIM1_Init+0x98>)
 8002732:	4a1f      	ldr	r2, [pc, #124]	@ (80027b0 <MX_TIM1_Init+0x9c>)
 8002734:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <MX_TIM1_Init+0x98>)
 8002738:	2200      	movs	r2, #0
 800273a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273c:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <MX_TIM1_Init+0x98>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002742:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <MX_TIM1_Init+0x98>)
 8002744:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002748:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274a:	4b18      	ldr	r3, [pc, #96]	@ (80027ac <MX_TIM1_Init+0x98>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002750:	4b16      	ldr	r3, [pc, #88]	@ (80027ac <MX_TIM1_Init+0x98>)
 8002752:	2200      	movs	r2, #0
 8002754:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002756:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <MX_TIM1_Init+0x98>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800275c:	4813      	ldr	r0, [pc, #76]	@ (80027ac <MX_TIM1_Init+0x98>)
 800275e:	f009 f899 	bl	800b894 <HAL_TIM_Base_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002768:	f000 fab4 	bl	8002cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800276c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002772:	f107 0308 	add.w	r3, r7, #8
 8002776:	4619      	mov	r1, r3
 8002778:	480c      	ldr	r0, [pc, #48]	@ (80027ac <MX_TIM1_Init+0x98>)
 800277a:	f009 fa3b 	bl	800bbf4 <HAL_TIM_ConfigClockSource>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002784:	f000 faa6 	bl	8002cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002788:	2300      	movs	r3, #0
 800278a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002790:	463b      	mov	r3, r7
 8002792:	4619      	mov	r1, r3
 8002794:	4805      	ldr	r0, [pc, #20]	@ (80027ac <MX_TIM1_Init+0x98>)
 8002796:	f009 fc63 	bl	800c060 <HAL_TIMEx_MasterConfigSynchronization>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80027a0:	f000 fa98 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000774 	.word	0x20000774
 80027b0:	40010000 	.word	0x40010000

080027b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027b8:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <MX_USART3_UART_Init+0x4c>)
 80027ba:	4a12      	ldr	r2, [pc, #72]	@ (8002804 <MX_USART3_UART_Init+0x50>)
 80027bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027be:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <MX_USART3_UART_Init+0x4c>)
 80027c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <MX_USART3_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <MX_USART3_UART_Init+0x4c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <MX_USART3_UART_Init+0x4c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027d8:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <MX_USART3_UART_Init+0x4c>)
 80027da:	220c      	movs	r2, #12
 80027dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <MX_USART3_UART_Init+0x4c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <MX_USART3_UART_Init+0x4c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027ea:	4805      	ldr	r0, [pc, #20]	@ (8002800 <MX_USART3_UART_Init+0x4c>)
 80027ec:	f009 fcc8 	bl	800c180 <HAL_UART_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80027f6:	f000 fa6d 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200007bc 	.word	0x200007bc
 8002804:	40004800 	.word	0x40004800

08002808 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800280c:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <MX_USART6_UART_Init+0x4c>)
 800280e:	4a12      	ldr	r2, [pc, #72]	@ (8002858 <MX_USART6_UART_Init+0x50>)
 8002810:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002812:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <MX_USART6_UART_Init+0x4c>)
 8002814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002818:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800281a:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <MX_USART6_UART_Init+0x4c>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002820:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <MX_USART6_UART_Init+0x4c>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002826:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <MX_USART6_UART_Init+0x4c>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800282c:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <MX_USART6_UART_Init+0x4c>)
 800282e:	220c      	movs	r2, #12
 8002830:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002832:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <MX_USART6_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002838:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <MX_USART6_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800283e:	4805      	ldr	r0, [pc, #20]	@ (8002854 <MX_USART6_UART_Init+0x4c>)
 8002840:	f009 fc9e 	bl	800c180 <HAL_UART_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800284a:	f000 fa43 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000804 	.word	0x20000804
 8002858:	40011400 	.word	0x40011400

0800285c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	4b23      	ldr	r3, [pc, #140]	@ (80028f4 <MX_DMA_Init+0x98>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	4a22      	ldr	r2, [pc, #136]	@ (80028f4 <MX_DMA_Init+0x98>)
 800286c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002870:	6313      	str	r3, [r2, #48]	@ 0x30
 8002872:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <MX_DMA_Init+0x98>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	4b1c      	ldr	r3, [pc, #112]	@ (80028f4 <MX_DMA_Init+0x98>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4a1b      	ldr	r2, [pc, #108]	@ (80028f4 <MX_DMA_Init+0x98>)
 8002888:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <MX_DMA_Init+0x98>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	200e      	movs	r0, #14
 80028a0:	f001 fb38 	bl	8003f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80028a4:	200e      	movs	r0, #14
 80028a6:	f001 fb51 	bl	8003f4c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2100      	movs	r1, #0
 80028ae:	2039      	movs	r0, #57	@ 0x39
 80028b0:	f001 fb30 	bl	8003f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80028b4:	2039      	movs	r0, #57	@ 0x39
 80028b6:	f001 fb49 	bl	8003f4c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2100      	movs	r1, #0
 80028be:	203b      	movs	r0, #59	@ 0x3b
 80028c0:	f001 fb28 	bl	8003f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80028c4:	203b      	movs	r0, #59	@ 0x3b
 80028c6:	f001 fb41 	bl	8003f4c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	2045      	movs	r0, #69	@ 0x45
 80028d0:	f001 fb20 	bl	8003f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80028d4:	2045      	movs	r0, #69	@ 0x45
 80028d6:	f001 fb39 	bl	8003f4c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	2046      	movs	r0, #70	@ 0x46
 80028e0:	f001 fb18 	bl	8003f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80028e4:	2046      	movs	r0, #70	@ 0x46
 80028e6:	f001 fb31 	bl	8003f4c <HAL_NVIC_EnableIRQ>

}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800

080028f8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
 800290c:	615a      	str	r2, [r3, #20]
 800290e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002910:	4b1f      	ldr	r3, [pc, #124]	@ (8002990 <MX_FMC_Init+0x98>)
 8002912:	4a20      	ldr	r2, [pc, #128]	@ (8002994 <MX_FMC_Init+0x9c>)
 8002914:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002916:	4b1e      	ldr	r3, [pc, #120]	@ (8002990 <MX_FMC_Init+0x98>)
 8002918:	2200      	movs	r2, #0
 800291a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800291c:	4b1c      	ldr	r3, [pc, #112]	@ (8002990 <MX_FMC_Init+0x98>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002922:	4b1b      	ldr	r3, [pc, #108]	@ (8002990 <MX_FMC_Init+0x98>)
 8002924:	2204      	movs	r2, #4
 8002926:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8002928:	4b19      	ldr	r3, [pc, #100]	@ (8002990 <MX_FMC_Init+0x98>)
 800292a:	2220      	movs	r2, #32
 800292c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800292e:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <MX_FMC_Init+0x98>)
 8002930:	2240      	movs	r2, #64	@ 0x40
 8002932:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002934:	4b16      	ldr	r3, [pc, #88]	@ (8002990 <MX_FMC_Init+0x98>)
 8002936:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800293a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800293c:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <MX_FMC_Init+0x98>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002942:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <MX_FMC_Init+0x98>)
 8002944:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002948:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800294a:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <MX_FMC_Init+0x98>)
 800294c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002950:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002952:	4b0f      	ldr	r3, [pc, #60]	@ (8002990 <MX_FMC_Init+0x98>)
 8002954:	2200      	movs	r2, #0
 8002956:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002958:	2302      	movs	r3, #2
 800295a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800295c:	2307      	movs	r3, #7
 800295e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002960:	2304      	movs	r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002964:	2307      	movs	r3, #7
 8002966:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002968:	2303      	movs	r3, #3
 800296a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800296c:	2302      	movs	r3, #2
 800296e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002970:	2302      	movs	r3, #2
 8002972:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	4619      	mov	r1, r3
 8002978:	4805      	ldr	r0, [pc, #20]	@ (8002990 <MX_FMC_Init+0x98>)
 800297a:	f008 ff57 	bl	800b82c <HAL_SDRAM_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002984:	f000 f9a6 	bl	8002cd4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002988:	bf00      	nop
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	2000090c 	.word	0x2000090c
 8002994:	a0000140 	.word	0xa0000140

08002998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b090      	sub	sp, #64	@ 0x40
 800299c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
 80029ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b2:	4bae      	ldr	r3, [pc, #696]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	4aad      	ldr	r2, [pc, #692]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 80029b8:	f043 0310 	orr.w	r3, r3, #16
 80029bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029be:	4bab      	ldr	r3, [pc, #684]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ce:	4ba7      	ldr	r3, [pc, #668]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	4aa6      	ldr	r2, [pc, #664]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029da:	4ba4      	ldr	r3, [pc, #656]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
 80029ea:	4ba0      	ldr	r3, [pc, #640]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a9f      	ldr	r2, [pc, #636]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b9d      	ldr	r3, [pc, #628]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	4b99      	ldr	r3, [pc, #612]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	4a98      	ldr	r2, [pc, #608]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a12:	4b96      	ldr	r3, [pc, #600]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	4b92      	ldr	r3, [pc, #584]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a91      	ldr	r2, [pc, #580]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	4a8a      	ldr	r2, [pc, #552]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a44:	f043 0308 	orr.w	r3, r3, #8
 8002a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4a:	4b88      	ldr	r3, [pc, #544]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	4b84      	ldr	r3, [pc, #528]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a83      	ldr	r2, [pc, #524]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b81      	ldr	r3, [pc, #516]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b7d      	ldr	r3, [pc, #500]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a7c:	f043 0320 	orr.w	r3, r3, #32
 8002a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a82:	4b7a      	ldr	r3, [pc, #488]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	4b76      	ldr	r3, [pc, #472]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	4a75      	ldr	r2, [pc, #468]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002a98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9e:	4b73      	ldr	r3, [pc, #460]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	4b6f      	ldr	r3, [pc, #444]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4a6e      	ldr	r2, [pc, #440]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aba:	4b6c      	ldr	r3, [pc, #432]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4b68      	ldr	r3, [pc, #416]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	4a67      	ldr	r2, [pc, #412]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002ad0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad6:	4b65      	ldr	r3, [pc, #404]	@ (8002c6c <MX_GPIO_Init+0x2d4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	210c      	movs	r1, #12
 8002ae6:	4862      	ldr	r0, [pc, #392]	@ (8002c70 <MX_GPIO_Init+0x2d8>)
 8002ae8:	f003 f820 	bl	8005b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2130      	movs	r1, #48	@ 0x30
 8002af0:	4860      	ldr	r0, [pc, #384]	@ (8002c74 <MX_GPIO_Init+0x2dc>)
 8002af2:	f003 f81b 	bl	8005b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2108      	movs	r1, #8
 8002afa:	485f      	ldr	r0, [pc, #380]	@ (8002c78 <MX_GPIO_Init+0x2e0>)
 8002afc:	f003 f816 	bl	8005b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002b00:	2200      	movs	r2, #0
 8002b02:	2140      	movs	r1, #64	@ 0x40
 8002b04:	485d      	ldr	r0, [pc, #372]	@ (8002c7c <MX_GPIO_Init+0x2e4>)
 8002b06:	f003 f811 	bl	8005b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	485c      	ldr	r0, [pc, #368]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002b10:	f003 f80c 	bl	8005b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8002b14:	2200      	movs	r2, #0
 8002b16:	2180      	movs	r1, #128	@ 0x80
 8002b18:	485a      	ldr	r0, [pc, #360]	@ (8002c84 <MX_GPIO_Init+0x2ec>)
 8002b1a:	f003 f807 	bl	8005b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2108      	movs	r1, #8
 8002b22:	4859      	ldr	r0, [pc, #356]	@ (8002c88 <MX_GPIO_Init+0x2f0>)
 8002b24:	f003 f802 	bl	8005b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8002b28:	230c      	movs	r3, #12
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	484c      	ldr	r0, [pc, #304]	@ (8002c70 <MX_GPIO_Init+0x2d8>)
 8002b40:	f002 fe30 	bl	80057a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8002b44:	2308      	movs	r3, #8
 8002b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b54:	2306      	movs	r3, #6
 8002b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8002b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4848      	ldr	r0, [pc, #288]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002b60:	f002 fe20 	bl	80057a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b76:	4619      	mov	r1, r3
 8002b78:	4841      	ldr	r0, [pc, #260]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002b7a:	f002 fe13 	bl	80057a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8002b7e:	2330      	movs	r3, #48	@ 0x30
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b82:	2311      	movs	r3, #17
 8002b84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b92:	4619      	mov	r1, r3
 8002b94:	4837      	ldr	r0, [pc, #220]	@ (8002c74 <MX_GPIO_Init+0x2dc>)
 8002b96:	f002 fe05 	bl	80057a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b9e:	2311      	movs	r3, #17
 8002ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8002baa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4831      	ldr	r0, [pc, #196]	@ (8002c78 <MX_GPIO_Init+0x2e0>)
 8002bb2:	f002 fdf7 	bl	80057a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002bb6:	2340      	movs	r3, #64	@ 0x40
 8002bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002bba:	2311      	movs	r3, #17
 8002bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bca:	4619      	mov	r1, r3
 8002bcc:	482b      	ldr	r0, [pc, #172]	@ (8002c7c <MX_GPIO_Init+0x2e4>)
 8002bce:	f002 fde9 	bl	80057a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8002bd2:	2305      	movs	r3, #5
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002be6:	4619      	mov	r1, r3
 8002be8:	4825      	ldr	r0, [pc, #148]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002bea:	f002 fddb 	bl	80057a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8002bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c00:	2302      	movs	r3, #2
 8002c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8002c04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c08:	4619      	mov	r1, r3
 8002c0a:	481a      	ldr	r0, [pc, #104]	@ (8002c74 <MX_GPIO_Init+0x2dc>)
 8002c0c:	f002 fdca 	bl	80057a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002c10:	2304      	movs	r3, #4
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c14:	2300      	movs	r3, #0
 8002c16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c20:	4619      	mov	r1, r3
 8002c22:	4816      	ldr	r0, [pc, #88]	@ (8002c7c <MX_GPIO_Init+0x2e4>)
 8002c24:	f002 fdbe 	bl	80057a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c2c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4813      	ldr	r0, [pc, #76]	@ (8002c8c <MX_GPIO_Init+0x2f4>)
 8002c3e:	f002 fdb1 	bl	80057a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c42:	2380      	movs	r3, #128	@ 0x80
 8002c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	2301      	movs	r3, #1
 8002c48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c56:	4619      	mov	r1, r3
 8002c58:	480a      	ldr	r0, [pc, #40]	@ (8002c84 <MX_GPIO_Init+0x2ec>)
 8002c5a:	f002 fda3 	bl	80057a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002c5e:	2308      	movs	r3, #8
 8002c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c62:	2301      	movs	r3, #1
 8002c64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e012      	b.n	8002c90 <MX_GPIO_Init+0x2f8>
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40020c00 	.word	0x40020c00
 8002c78:	40022800 	.word	0x40022800
 8002c7c:	40021800 	.word	0x40021800
 8002c80:	40020400 	.word	0x40020400
 8002c84:	40021c00 	.word	0x40021c00
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40022400 	.word	0x40022400
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4803      	ldr	r0, [pc, #12]	@ (8002cac <MX_GPIO_Init+0x314>)
 8002c9e:	f002 fd81 	bl	80057a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ca2:	bf00      	nop
 8002ca4:	3740      	adds	r7, #64	@ 0x40
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40020000 	.word	0x40020000

08002cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cc2:	f001 f82b 	bl	8003d1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40001000 	.word	0x40001000

08002cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd8:	b672      	cpsid	i
}
 8002cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <Error_Handler+0x8>

08002ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <HAL_MspInit+0x58>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <HAL_MspInit+0x58>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cf6:	4b10      	ldr	r3, [pc, #64]	@ (8002d38 <HAL_MspInit+0x58>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4b0c      	ldr	r3, [pc, #48]	@ (8002d38 <HAL_MspInit+0x58>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d38 <HAL_MspInit+0x58>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d12:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <HAL_MspInit+0x58>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	2005      	movs	r0, #5
 8002d24:	f001 f8f6 	bl	8003f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002d28:	2005      	movs	r0, #5
 8002d2a:	f001 f90f 	bl	8003f4c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800

08002d3c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0b      	ldr	r2, [pc, #44]	@ (8002d78 <HAL_CRC_MspInit+0x3c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d10d      	bne.n	8002d6a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <HAL_CRC_MspInit+0x40>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	4a09      	ldr	r2, [pc, #36]	@ (8002d7c <HAL_CRC_MspInit+0x40>)
 8002d58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5e:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <HAL_CRC_MspInit+0x40>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023000 	.word	0x40023000
 8002d7c:	40023800 	.word	0x40023800

08002d80 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc8 <HAL_DMA2D_MspInit+0x48>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d115      	bne.n	8002dbe <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <HAL_DMA2D_MspInit+0x4c>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002dcc <HAL_DMA2D_MspInit+0x4c>)
 8002d9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <HAL_DMA2D_MspInit+0x4c>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	205a      	movs	r0, #90	@ 0x5a
 8002db4:	f001 f8ae 	bl	8003f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002db8:	205a      	movs	r0, #90	@ 0x5a
 8002dba:	f001 f8c7 	bl	8003f4c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	4002b000 	.word	0x4002b000
 8002dcc:	40023800 	.word	0x40023800

08002dd0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	@ 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	@ (8002e64 <HAL_DSI_MspInit+0x94>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d133      	bne.n	8002e5a <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <HAL_DSI_MspInit+0x98>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8002e68 <HAL_DSI_MspInit+0x98>)
 8002dfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e02:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_DSI_MspInit+0x98>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <HAL_DSI_MspInit+0x98>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <HAL_DSI_MspInit+0x98>)
 8002e18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_DSI_MspInit+0x98>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e36:	2303      	movs	r3, #3
 8002e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8002e3a:	230d      	movs	r3, #13
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8002e3e:	f107 0314 	add.w	r3, r7, #20
 8002e42:	4619      	mov	r1, r3
 8002e44:	4809      	ldr	r0, [pc, #36]	@ (8002e6c <HAL_DSI_MspInit+0x9c>)
 8002e46:	f002 fcad 	bl	80057a4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	205c      	movs	r0, #92	@ 0x5c
 8002e50:	f001 f860 	bl	8003f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002e54:	205c      	movs	r0, #92	@ 0x5c
 8002e56:	f001 f879 	bl	8003f4c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8002e5a:	bf00      	nop
 8002e5c:	3728      	adds	r7, #40	@ 0x28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40016c00 	.word	0x40016c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40022400 	.word	0x40022400

08002e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	@ 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a32      	ldr	r2, [pc, #200]	@ (8002f58 <HAL_I2C_MspInit+0xe8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d12d      	bne.n	8002eee <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	4b31      	ldr	r3, [pc, #196]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a30      	ldr	r2, [pc, #192]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002eae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eb4:	2312      	movs	r3, #18
 8002eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec4:	f107 031c 	add.w	r3, r7, #28
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4825      	ldr	r0, [pc, #148]	@ (8002f60 <HAL_I2C_MspInit+0xf0>)
 8002ecc:	f002 fc6a 	bl	80057a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	4b21      	ldr	r3, [pc, #132]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed8:	4a20      	ldr	r2, [pc, #128]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002eda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ede:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002eec:	e030      	b.n	8002f50 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f64 <HAL_I2C_MspInit+0xf4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d12b      	bne.n	8002f50 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ef8:	2300      	movs	r3, #0
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	4b17      	ldr	r3, [pc, #92]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	4a16      	ldr	r2, [pc, #88]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f08:	4b14      	ldr	r3, [pc, #80]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8002f14:	2330      	movs	r3, #48	@ 0x30
 8002f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f18:	2312      	movs	r3, #18
 8002f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f20:	2303      	movs	r3, #3
 8002f22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f24:	2304      	movs	r3, #4
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	480e      	ldr	r0, [pc, #56]	@ (8002f68 <HAL_I2C_MspInit+0xf8>)
 8002f30:	f002 fc38 	bl	80057a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	4b08      	ldr	r3, [pc, #32]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	4a07      	ldr	r2, [pc, #28]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002f3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f44:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <HAL_I2C_MspInit+0xec>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3730      	adds	r7, #48	@ 0x30
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40005400 	.word	0x40005400
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020400 	.word	0x40020400
 8002f64:	40005800 	.word	0x40005800
 8002f68:	40021c00 	.word	0x40021c00

08002f6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b09a      	sub	sp, #104	@ 0x68
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f84:	f107 0318 	add.w	r3, r7, #24
 8002f88:	223c      	movs	r2, #60	@ 0x3c
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f012 fda2 	bl	8015ad6 <memset>
  if(hi2s->Instance==SPI2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a63      	ldr	r2, [pc, #396]	@ (8003124 <HAL_I2S_MspInit+0x1b8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	f040 80be 	bne.w	800311a <HAL_I2S_MspInit+0x1ae>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002fa2:	23c0      	movs	r3, #192	@ 0xc0
 8002fa4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002faa:	f107 0318 	add.w	r3, r7, #24
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f006 fbd6 	bl	8009760 <HAL_RCCEx_PeriphCLKConfig>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8002fba:	f7ff fe8b 	bl	8002cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	4b59      	ldr	r3, [pc, #356]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	4a58      	ldr	r2, [pc, #352]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fce:	4b56      	ldr	r3, [pc, #344]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	4b52      	ldr	r3, [pc, #328]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	4a51      	ldr	r2, [pc, #324]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 8002fe4:	f043 0308 	orr.w	r3, r3, #8
 8002fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fea:	4b4f      	ldr	r3, [pc, #316]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6313      	str	r3, [r2, #48]	@ 0x30
 8003006:	4b48      	ldr	r3, [pc, #288]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	4b44      	ldr	r3, [pc, #272]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	4a43      	ldr	r2, [pc, #268]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	6313      	str	r3, [r2, #48]	@ 0x30
 8003022:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_I2S_MspInit+0x1bc>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> I2S2_CK
    PC3     ------> I2S2_SD
    PB12     ------> I2S2_WS
    PC2     ------> I2S2_ext_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800302e:	2308      	movs	r3, #8
 8003030:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800303e:	2305      	movs	r3, #5
 8003040:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003042:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003046:	4619      	mov	r1, r3
 8003048:	4838      	ldr	r0, [pc, #224]	@ (800312c <HAL_I2S_MspInit+0x1c0>)
 800304a:	f002 fbab 	bl	80057a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800304e:	2308      	movs	r3, #8
 8003050:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800305e:	2305      	movs	r3, #5
 8003060:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003062:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003066:	4619      	mov	r1, r3
 8003068:	4831      	ldr	r0, [pc, #196]	@ (8003130 <HAL_I2S_MspInit+0x1c4>)
 800306a:	f002 fb9b 	bl	80057a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800306e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003072:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307c:	2300      	movs	r3, #0
 800307e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003080:	2305      	movs	r3, #5
 8003082:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003084:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003088:	4619      	mov	r1, r3
 800308a:	482a      	ldr	r0, [pc, #168]	@ (8003134 <HAL_I2S_MspInit+0x1c8>)
 800308c:	f002 fb8a 	bl	80057a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003090:	2304      	movs	r3, #4
 8003092:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80030a0:	2306      	movs	r3, #6
 80030a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80030a8:	4619      	mov	r1, r3
 80030aa:	4821      	ldr	r0, [pc, #132]	@ (8003130 <HAL_I2S_MspInit+0x1c4>)
 80030ac:	f002 fb7a 	bl	80057a4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80030b0:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 80030b2:	4a22      	ldr	r2, [pc, #136]	@ (800313c <HAL_I2S_MspInit+0x1d0>)
 80030b4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80030b6:	4b20      	ldr	r3, [pc, #128]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 80030ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030ce:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030d0:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030d6:	4b18      	ldr	r3, [pc, #96]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 80030d8:	2200      	movs	r2, #0
 80030da:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80030dc:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 80030de:	2200      	movs	r2, #0
 80030e0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030e2:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030e8:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80030ee:	4812      	ldr	r0, [pc, #72]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 80030f0:	f000 ff56 	bl	8003fa0 <HAL_DMA_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2S_MspInit+0x192>
    {
      Error_Handler();
 80030fa:	f7ff fdeb 	bl	8002cd4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a0d      	ldr	r2, [pc, #52]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 8003102:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003104:	4a0c      	ldr	r2, [pc, #48]	@ (8003138 <HAL_I2S_MspInit+0x1cc>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	2024      	movs	r0, #36	@ 0x24
 8003110:	f000 ff00 	bl	8003f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003114:	2024      	movs	r0, #36	@ 0x24
 8003116:	f000 ff19 	bl	8003f4c <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800311a:	bf00      	nop
 800311c:	3768      	adds	r7, #104	@ 0x68
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40003800 	.word	0x40003800
 8003128:	40023800 	.word	0x40023800
 800312c:	40020c00 	.word	0x40020c00
 8003130:	40020800 	.word	0x40020800
 8003134:	40020400 	.word	0x40020400
 8003138:	20000454 	.word	0x20000454
 800313c:	40026058 	.word	0x40026058

08003140 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0e      	ldr	r2, [pc, #56]	@ (8003188 <HAL_LTDC_MspInit+0x48>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d115      	bne.n	800317e <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4b0d      	ldr	r3, [pc, #52]	@ (800318c <HAL_LTDC_MspInit+0x4c>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	4a0c      	ldr	r2, [pc, #48]	@ (800318c <HAL_LTDC_MspInit+0x4c>)
 800315c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003160:	6453      	str	r3, [r2, #68]	@ 0x44
 8003162:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <HAL_LTDC_MspInit+0x4c>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	2058      	movs	r0, #88	@ 0x58
 8003174:	f000 fece 	bl	8003f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003178:	2058      	movs	r0, #88	@ 0x58
 800317a:	f000 fee7 	bl	8003f4c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40016800 	.word	0x40016800
 800318c:	40023800 	.word	0x40023800

08003190 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	@ 0x28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a31      	ldr	r2, [pc, #196]	@ (8003274 <HAL_QSPI_MspInit+0xe4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d15b      	bne.n	800326a <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	4b30      	ldr	r3, [pc, #192]	@ (8003278 <HAL_QSPI_MspInit+0xe8>)
 80031b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003278 <HAL_QSPI_MspInit+0xe8>)
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80031c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003278 <HAL_QSPI_MspInit+0xe8>)
 80031c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	4b29      	ldr	r3, [pc, #164]	@ (8003278 <HAL_QSPI_MspInit+0xe8>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	4a28      	ldr	r2, [pc, #160]	@ (8003278 <HAL_QSPI_MspInit+0xe8>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031de:	4b26      	ldr	r3, [pc, #152]	@ (8003278 <HAL_QSPI_MspInit+0xe8>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	4b22      	ldr	r3, [pc, #136]	@ (8003278 <HAL_QSPI_MspInit+0xe8>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	4a21      	ldr	r2, [pc, #132]	@ (8003278 <HAL_QSPI_MspInit+0xe8>)
 80031f4:	f043 0320 	orr.w	r3, r3, #32
 80031f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003278 <HAL_QSPI_MspInit+0xe8>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8003206:	2340      	movs	r3, #64	@ 0x40
 8003208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320a:	2302      	movs	r3, #2
 800320c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003212:	2303      	movs	r3, #3
 8003214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8003216:	230a      	movs	r3, #10
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800321a:	f107 0314 	add.w	r3, r7, #20
 800321e:	4619      	mov	r1, r3
 8003220:	4816      	ldr	r0, [pc, #88]	@ (800327c <HAL_QSPI_MspInit+0xec>)
 8003222:	f002 fabf 	bl	80057a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8003226:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800322a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	2302      	movs	r3, #2
 800322e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003234:	2303      	movs	r3, #3
 8003236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8003238:	2309      	movs	r3, #9
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	4619      	mov	r1, r3
 8003242:	480f      	ldr	r0, [pc, #60]	@ (8003280 <HAL_QSPI_MspInit+0xf0>)
 8003244:	f002 faae 	bl	80057a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8003248:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800324c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003256:	2303      	movs	r3, #3
 8003258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800325a:	230a      	movs	r3, #10
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800325e:	f107 0314 	add.w	r3, r7, #20
 8003262:	4619      	mov	r1, r3
 8003264:	4806      	ldr	r0, [pc, #24]	@ (8003280 <HAL_QSPI_MspInit+0xf0>)
 8003266:	f002 fa9d 	bl	80057a4 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800326a:	bf00      	nop
 800326c:	3728      	adds	r7, #40	@ 0x28
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	a0001000 	.word	0xa0001000
 8003278:	40023800 	.word	0x40023800
 800327c:	40020400 	.word	0x40020400
 8003280:	40021400 	.word	0x40021400

08003284 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	@ 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a68      	ldr	r2, [pc, #416]	@ (8003444 <HAL_SD_MspInit+0x1c0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	f040 80c9 	bne.w	800343a <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	4b66      	ldr	r3, [pc, #408]	@ (8003448 <HAL_SD_MspInit+0x1c4>)
 80032ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b0:	4a65      	ldr	r2, [pc, #404]	@ (8003448 <HAL_SD_MspInit+0x1c4>)
 80032b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80032b8:	4b63      	ldr	r3, [pc, #396]	@ (8003448 <HAL_SD_MspInit+0x1c4>)
 80032ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003448 <HAL_SD_MspInit+0x1c4>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003448 <HAL_SD_MspInit+0x1c4>)
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d4:	4b5c      	ldr	r3, [pc, #368]	@ (8003448 <HAL_SD_MspInit+0x1c4>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	4b58      	ldr	r3, [pc, #352]	@ (8003448 <HAL_SD_MspInit+0x1c4>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	4a57      	ldr	r2, [pc, #348]	@ (8003448 <HAL_SD_MspInit+0x1c4>)
 80032ea:	f043 0308 	orr.w	r3, r3, #8
 80032ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f0:	4b55      	ldr	r3, [pc, #340]	@ (8003448 <HAL_SD_MspInit+0x1c4>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 80032fc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003300:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800330e:	230c      	movs	r3, #12
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4619      	mov	r1, r3
 8003318:	484c      	ldr	r0, [pc, #304]	@ (800344c <HAL_SD_MspInit+0x1c8>)
 800331a:	f002 fa43 	bl	80057a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800331e:	2304      	movs	r3, #4
 8003320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	2302      	movs	r3, #2
 8003324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332a:	2303      	movs	r3, #3
 800332c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800332e:	230c      	movs	r3, #12
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8003332:	f107 0314 	add.w	r3, r7, #20
 8003336:	4619      	mov	r1, r3
 8003338:	4845      	ldr	r0, [pc, #276]	@ (8003450 <HAL_SD_MspInit+0x1cc>)
 800333a:	f002 fa33 	bl	80057a4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800333e:	4b45      	ldr	r3, [pc, #276]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 8003340:	4a45      	ldr	r2, [pc, #276]	@ (8003458 <HAL_SD_MspInit+0x1d4>)
 8003342:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003344:	4b43      	ldr	r3, [pc, #268]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 8003346:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800334a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800334c:	4b41      	ldr	r3, [pc, #260]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003352:	4b40      	ldr	r3, [pc, #256]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 8003354:	2200      	movs	r2, #0
 8003356:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003358:	4b3e      	ldr	r3, [pc, #248]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 800335a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800335e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003360:	4b3c      	ldr	r3, [pc, #240]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 8003362:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003366:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003368:	4b3a      	ldr	r3, [pc, #232]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 800336a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800336e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003370:	4b38      	ldr	r3, [pc, #224]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 8003372:	2220      	movs	r2, #32
 8003374:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003376:	4b37      	ldr	r3, [pc, #220]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 8003378:	2200      	movs	r2, #0
 800337a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800337c:	4b35      	ldr	r3, [pc, #212]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 800337e:	2204      	movs	r2, #4
 8003380:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003382:	4b34      	ldr	r3, [pc, #208]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 8003384:	2203      	movs	r2, #3
 8003386:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003388:	4b32      	ldr	r3, [pc, #200]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 800338a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800338e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003390:	4b30      	ldr	r3, [pc, #192]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 8003392:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003396:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003398:	482e      	ldr	r0, [pc, #184]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 800339a:	f000 fe01 	bl	8003fa0 <HAL_DMA_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80033a4:	f7ff fc96 	bl	8002cd4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 80033ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80033ae:	4a29      	ldr	r2, [pc, #164]	@ (8003454 <HAL_SD_MspInit+0x1d0>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80033b4:	4b29      	ldr	r3, [pc, #164]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 80033b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003460 <HAL_SD_MspInit+0x1dc>)
 80033b8:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80033ba:	4b28      	ldr	r3, [pc, #160]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 80033bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80033c0:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033c2:	4b26      	ldr	r3, [pc, #152]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 80033c4:	2240      	movs	r2, #64	@ 0x40
 80033c6:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033c8:	4b24      	ldr	r3, [pc, #144]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033ce:	4b23      	ldr	r3, [pc, #140]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 80033d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033d4:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033d6:	4b21      	ldr	r3, [pc, #132]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 80033d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033dc:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033de:	4b1f      	ldr	r3, [pc, #124]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 80033e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033e4:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80033e6:	4b1d      	ldr	r3, [pc, #116]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 80033e8:	2220      	movs	r2, #32
 80033ea:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033ec:	4b1b      	ldr	r3, [pc, #108]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80033f2:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 80033f4:	2204      	movs	r2, #4
 80033f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80033f8:	4b18      	ldr	r3, [pc, #96]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 80033fa:	2203      	movs	r2, #3
 80033fc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80033fe:	4b17      	ldr	r3, [pc, #92]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 8003400:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003404:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003406:	4b15      	ldr	r3, [pc, #84]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 8003408:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800340c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800340e:	4813      	ldr	r0, [pc, #76]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 8003410:	f000 fdc6 	bl	8003fa0 <HAL_DMA_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800341a:	f7ff fc5b 	bl	8002cd4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a0e      	ldr	r2, [pc, #56]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 8003422:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003424:	4a0d      	ldr	r2, [pc, #52]	@ (800345c <HAL_SD_MspInit+0x1d8>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	2031      	movs	r0, #49	@ 0x31
 8003430:	f000 fd70 	bl	8003f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003434:	2031      	movs	r0, #49	@ 0x31
 8003436:	f000 fd89 	bl	8003f4c <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 800343a:	bf00      	nop
 800343c:	3728      	adds	r7, #40	@ 0x28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40012c00 	.word	0x40012c00
 8003448:	40023800 	.word	0x40023800
 800344c:	40020800 	.word	0x40020800
 8003450:	40020c00 	.word	0x40020c00
 8003454:	200006b4 	.word	0x200006b4
 8003458:	40026458 	.word	0x40026458
 800345c:	20000714 	.word	0x20000714
 8003460:	400264a0 	.word	0x400264a0

08003464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0b      	ldr	r2, [pc, #44]	@ (80034a0 <HAL_TIM_Base_MspInit+0x3c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10d      	bne.n	8003492 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <HAL_TIM_Base_MspInit+0x40>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	4a09      	ldr	r2, [pc, #36]	@ (80034a4 <HAL_TIM_Base_MspInit+0x40>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6453      	str	r3, [r2, #68]	@ 0x44
 8003486:	4b07      	ldr	r3, [pc, #28]	@ (80034a4 <HAL_TIM_Base_MspInit+0x40>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40023800 	.word	0x40023800

080034a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08c      	sub	sp, #48	@ 0x30
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a65      	ldr	r2, [pc, #404]	@ (800365c <HAL_UART_MspInit+0x1b4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d12d      	bne.n	8003526 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	4b64      	ldr	r3, [pc, #400]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	4a63      	ldr	r2, [pc, #396]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034da:	4b61      	ldr	r3, [pc, #388]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 80034f0:	f043 0302 	orr.w	r3, r3, #2
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003502:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800350c:	2301      	movs	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003510:	2303      	movs	r3, #3
 8003512:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003514:	2307      	movs	r3, #7
 8003516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003518:	f107 031c 	add.w	r3, r7, #28
 800351c:	4619      	mov	r1, r3
 800351e:	4851      	ldr	r0, [pc, #324]	@ (8003664 <HAL_UART_MspInit+0x1bc>)
 8003520:	f002 f940 	bl	80057a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003524:	e095      	b.n	8003652 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a4f      	ldr	r2, [pc, #316]	@ (8003668 <HAL_UART_MspInit+0x1c0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	f040 8090 	bne.w	8003652 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	4b4a      	ldr	r3, [pc, #296]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	4a49      	ldr	r2, [pc, #292]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 800353c:	f043 0320 	orr.w	r3, r3, #32
 8003540:	6453      	str	r3, [r2, #68]	@ 0x44
 8003542:	4b47      	ldr	r3, [pc, #284]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	4b43      	ldr	r3, [pc, #268]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	4a42      	ldr	r2, [pc, #264]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 8003558:	f043 0304 	orr.w	r3, r3, #4
 800355c:	6313      	str	r3, [r2, #48]	@ 0x30
 800355e:	4b40      	ldr	r3, [pc, #256]	@ (8003660 <HAL_UART_MspInit+0x1b8>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_RX_Pin|ARDUINO_USART6_TX_Pin;
 800356a:	23c0      	movs	r3, #192	@ 0xc0
 800356c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356e:	2302      	movs	r3, #2
 8003570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	2300      	movs	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003576:	2303      	movs	r3, #3
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800357a:	2308      	movs	r3, #8
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	4619      	mov	r1, r3
 8003584:	4839      	ldr	r0, [pc, #228]	@ (800366c <HAL_UART_MspInit+0x1c4>)
 8003586:	f002 f90d 	bl	80057a4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800358a:	4b39      	ldr	r3, [pc, #228]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 800358c:	4a39      	ldr	r2, [pc, #228]	@ (8003674 <HAL_UART_MspInit+0x1cc>)
 800358e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003590:	4b37      	ldr	r3, [pc, #220]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 8003592:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003596:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003598:	4b35      	ldr	r3, [pc, #212]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800359e:	4b34      	ldr	r3, [pc, #208]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035a4:	4b32      	ldr	r3, [pc, #200]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 80035a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035aa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035ac:	4b30      	ldr	r3, [pc, #192]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80035b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035be:	4b2c      	ldr	r3, [pc, #176]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80035ca:	4829      	ldr	r0, [pc, #164]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 80035cc:	f000 fce8 	bl	8003fa0 <HAL_DMA_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_UART_MspInit+0x132>
      Error_Handler();
 80035d6:	f7ff fb7d 	bl	8002cd4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a24      	ldr	r2, [pc, #144]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 80035de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035e0:	4a23      	ldr	r2, [pc, #140]	@ (8003670 <HAL_UART_MspInit+0x1c8>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 80035e6:	4b24      	ldr	r3, [pc, #144]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 80035e8:	4a24      	ldr	r2, [pc, #144]	@ (800367c <HAL_UART_MspInit+0x1d4>)
 80035ea:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80035ec:	4b22      	ldr	r3, [pc, #136]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 80035ee:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80035f2:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035f4:	4b20      	ldr	r3, [pc, #128]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 80035f6:	2240      	movs	r2, #64	@ 0x40
 80035f8:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003600:	4b1d      	ldr	r3, [pc, #116]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 8003602:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003606:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003608:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 800360a:	2200      	movs	r2, #0
 800360c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800360e:	4b1a      	ldr	r3, [pc, #104]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 8003610:	2200      	movs	r2, #0
 8003612:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003614:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 8003616:	2200      	movs	r2, #0
 8003618:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800361a:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 800361c:	2200      	movs	r2, #0
 800361e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003620:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 8003622:	2200      	movs	r2, #0
 8003624:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003626:	4814      	ldr	r0, [pc, #80]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 8003628:	f000 fcba 	bl	8003fa0 <HAL_DMA_Init>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8003632:	f7ff fb4f 	bl	8002cd4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a0f      	ldr	r2, [pc, #60]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 800363a:	639a      	str	r2, [r3, #56]	@ 0x38
 800363c:	4a0e      	ldr	r2, [pc, #56]	@ (8003678 <HAL_UART_MspInit+0x1d0>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003642:	2200      	movs	r2, #0
 8003644:	2100      	movs	r1, #0
 8003646:	2047      	movs	r0, #71	@ 0x47
 8003648:	f000 fc64 	bl	8003f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800364c:	2047      	movs	r0, #71	@ 0x47
 800364e:	f000 fc7d 	bl	8003f4c <HAL_NVIC_EnableIRQ>
}
 8003652:	bf00      	nop
 8003654:	3730      	adds	r7, #48	@ 0x30
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40004800 	.word	0x40004800
 8003660:	40023800 	.word	0x40023800
 8003664:	40020400 	.word	0x40020400
 8003668:	40011400 	.word	0x40011400
 800366c:	40020800 	.word	0x40020800
 8003670:	2000084c 	.word	0x2000084c
 8003674:	40026428 	.word	0x40026428
 8003678:	200008ac 	.word	0x200008ac
 800367c:	400264b8 	.word	0x400264b8

08003680 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003694:	4b44      	ldr	r3, [pc, #272]	@ (80037a8 <HAL_FMC_MspInit+0x128>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f040 8081 	bne.w	80037a0 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 800369e:	4b42      	ldr	r3, [pc, #264]	@ (80037a8 <HAL_FMC_MspInit+0x128>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036a4:	2300      	movs	r3, #0
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	4b40      	ldr	r3, [pc, #256]	@ (80037ac <HAL_FMC_MspInit+0x12c>)
 80036aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ac:	4a3f      	ldr	r2, [pc, #252]	@ (80037ac <HAL_FMC_MspInit+0x12c>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6393      	str	r3, [r2, #56]	@ 0x38
 80036b4:	4b3d      	ldr	r3, [pc, #244]	@ (80037ac <HAL_FMC_MspInit+0x12c>)
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80036c0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80036c4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036d2:	230c      	movs	r3, #12
 80036d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4835      	ldr	r0, [pc, #212]	@ (80037b0 <HAL_FMC_MspInit+0x130>)
 80036dc:	f002 f862 	bl	80057a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 80036e0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80036e4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036f2:	230c      	movs	r3, #12
 80036f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	482e      	ldr	r0, [pc, #184]	@ (80037b4 <HAL_FMC_MspInit+0x134>)
 80036fc:	f002 f852 	bl	80057a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8003700:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003704:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2303      	movs	r3, #3
 8003710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003712:	230c      	movs	r3, #12
 8003714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4827      	ldr	r0, [pc, #156]	@ (80037b8 <HAL_FMC_MspInit+0x138>)
 800371c:	f002 f842 	bl	80057a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8003720:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8003724:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372e:	2303      	movs	r3, #3
 8003730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003732:	230c      	movs	r3, #12
 8003734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4820      	ldr	r0, [pc, #128]	@ (80037bc <HAL_FMC_MspInit+0x13c>)
 800373c:	f002 f832 	bl	80057a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003740:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003744:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374e:	2303      	movs	r3, #3
 8003750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003752:	230c      	movs	r3, #12
 8003754:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003756:	1d3b      	adds	r3, r7, #4
 8003758:	4619      	mov	r1, r3
 800375a:	4819      	ldr	r0, [pc, #100]	@ (80037c0 <HAL_FMC_MspInit+0x140>)
 800375c:	f002 f822 	bl	80057a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8003760:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8003764:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	2302      	movs	r3, #2
 8003768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376e:	2303      	movs	r3, #3
 8003770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003772:	230c      	movs	r3, #12
 8003774:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4812      	ldr	r0, [pc, #72]	@ (80037c4 <HAL_FMC_MspInit+0x144>)
 800377c:	f002 f812 	bl	80057a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003780:	2301      	movs	r3, #1
 8003782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003784:	2302      	movs	r3, #2
 8003786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378c:	2303      	movs	r3, #3
 800378e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003790:	230c      	movs	r3, #12
 8003792:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003794:	1d3b      	adds	r3, r7, #4
 8003796:	4619      	mov	r1, r3
 8003798:	480b      	ldr	r0, [pc, #44]	@ (80037c8 <HAL_FMC_MspInit+0x148>)
 800379a:	f002 f803 	bl	80057a4 <HAL_GPIO_Init>
 800379e:	e000      	b.n	80037a2 <HAL_FMC_MspInit+0x122>
    return;
 80037a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000940 	.word	0x20000940
 80037ac:	40023800 	.word	0x40023800
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40021800 	.word	0x40021800
 80037b8:	40020c00 	.word	0x40020c00
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40021400 	.word	0x40021400
 80037c4:	40021c00 	.word	0x40021c00
 80037c8:	40020800 	.word	0x40020800

080037cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80037d4:	f7ff ff54 	bl	8003680 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a26      	ldr	r2, [pc, #152]	@ (8003888 <HAL_SAI_MspInit+0xa8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d146      	bne.n	8003880 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80037f2:	4b26      	ldr	r3, [pc, #152]	@ (800388c <HAL_SAI_MspInit+0xac>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10d      	bne.n	8003816 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	4b24      	ldr	r3, [pc, #144]	@ (8003890 <HAL_SAI_MspInit+0xb0>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	4a23      	ldr	r2, [pc, #140]	@ (8003890 <HAL_SAI_MspInit+0xb0>)
 8003804:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003808:	6453      	str	r3, [r2, #68]	@ 0x44
 800380a:	4b21      	ldr	r3, [pc, #132]	@ (8003890 <HAL_SAI_MspInit+0xb0>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8003816:	4b1d      	ldr	r3, [pc, #116]	@ (800388c <HAL_SAI_MspInit+0xac>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	4a1b      	ldr	r2, [pc, #108]	@ (800388c <HAL_SAI_MspInit+0xac>)
 800381e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8003820:	2330      	movs	r3, #48	@ 0x30
 8003822:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003830:	2306      	movs	r3, #6
 8003832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	4619      	mov	r1, r3
 800383a:	4816      	ldr	r0, [pc, #88]	@ (8003894 <HAL_SAI_MspInit+0xb4>)
 800383c:	f001 ffb2 	bl	80057a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8003840:	2340      	movs	r3, #64	@ 0x40
 8003842:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003844:	2302      	movs	r3, #2
 8003846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003850:	2306      	movs	r3, #6
 8003852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	4619      	mov	r1, r3
 800385a:	480f      	ldr	r0, [pc, #60]	@ (8003898 <HAL_SAI_MspInit+0xb8>)
 800385c:	f001 ffa2 	bl	80057a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8003860:	2380      	movs	r3, #128	@ 0x80
 8003862:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003864:	2302      	movs	r3, #2
 8003866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003870:	2306      	movs	r3, #6
 8003872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	4619      	mov	r1, r3
 800387a:	4808      	ldr	r0, [pc, #32]	@ (800389c <HAL_SAI_MspInit+0xbc>)
 800387c:	f001 ff92 	bl	80057a4 <HAL_GPIO_Init>

    }
}
 8003880:	bf00      	nop
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40015804 	.word	0x40015804
 800388c:	20000944 	.word	0x20000944
 8003890:	40023800 	.word	0x40023800
 8003894:	40021000 	.word	0x40021000
 8003898:	40020c00 	.word	0x40020c00
 800389c:	40021800 	.word	0x40021800

080038a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08e      	sub	sp, #56	@ 0x38
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	4b33      	ldr	r3, [pc, #204]	@ (8003984 <HAL_InitTick+0xe4>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	4a32      	ldr	r2, [pc, #200]	@ (8003984 <HAL_InitTick+0xe4>)
 80038ba:	f043 0310 	orr.w	r3, r3, #16
 80038be:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c0:	4b30      	ldr	r3, [pc, #192]	@ (8003984 <HAL_InitTick+0xe4>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038cc:	f107 0210 	add.w	r2, r7, #16
 80038d0:	f107 0314 	add.w	r3, r7, #20
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f005 ff10 	bl	80096fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80038e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038e6:	f005 fee1 	bl	80096ac <HAL_RCC_GetPCLK1Freq>
 80038ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80038ec:	e004      	b.n	80038f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80038ee:	f005 fedd 	bl	80096ac <HAL_RCC_GetPCLK1Freq>
 80038f2:	4603      	mov	r3, r0
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fa:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_InitTick+0xe8>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	0c9b      	lsrs	r3, r3, #18
 8003902:	3b01      	subs	r3, #1
 8003904:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003906:	4b21      	ldr	r3, [pc, #132]	@ (800398c <HAL_InitTick+0xec>)
 8003908:	4a21      	ldr	r2, [pc, #132]	@ (8003990 <HAL_InitTick+0xf0>)
 800390a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800390c:	4b1f      	ldr	r3, [pc, #124]	@ (800398c <HAL_InitTick+0xec>)
 800390e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003912:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003914:	4a1d      	ldr	r2, [pc, #116]	@ (800398c <HAL_InitTick+0xec>)
 8003916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003918:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800391a:	4b1c      	ldr	r3, [pc, #112]	@ (800398c <HAL_InitTick+0xec>)
 800391c:	2200      	movs	r2, #0
 800391e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003920:	4b1a      	ldr	r3, [pc, #104]	@ (800398c <HAL_InitTick+0xec>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003926:	4b19      	ldr	r3, [pc, #100]	@ (800398c <HAL_InitTick+0xec>)
 8003928:	2200      	movs	r2, #0
 800392a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800392c:	4817      	ldr	r0, [pc, #92]	@ (800398c <HAL_InitTick+0xec>)
 800392e:	f007 ffb1 	bl	800b894 <HAL_TIM_Base_Init>
 8003932:	4603      	mov	r3, r0
 8003934:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003938:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11b      	bne.n	8003978 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003940:	4812      	ldr	r0, [pc, #72]	@ (800398c <HAL_InitTick+0xec>)
 8003942:	f007 fff7 	bl	800b934 <HAL_TIM_Base_Start_IT>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800394c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003950:	2b00      	cmp	r3, #0
 8003952:	d111      	bne.n	8003978 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003954:	2036      	movs	r0, #54	@ 0x36
 8003956:	f000 faf9 	bl	8003f4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b0f      	cmp	r3, #15
 800395e:	d808      	bhi.n	8003972 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003960:	2200      	movs	r2, #0
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	2036      	movs	r0, #54	@ 0x36
 8003966:	f000 fad5 	bl	8003f14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800396a:	4a0a      	ldr	r2, [pc, #40]	@ (8003994 <HAL_InitTick+0xf4>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	e002      	b.n	8003978 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003978:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800397c:	4618      	mov	r0, r3
 800397e:	3738      	adds	r7, #56	@ 0x38
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	431bde83 	.word	0x431bde83
 800398c:	20000948 	.word	0x20000948
 8003990:	40001000 	.word	0x40001000
 8003994:	20000004 	.word	0x20000004

08003998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800399c:	bf00      	nop
 800399e:	e7fd      	b.n	800399c <NMI_Handler+0x4>

080039a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039a4:	bf00      	nop
 80039a6:	e7fd      	b.n	80039a4 <HardFault_Handler+0x4>

080039a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039ac:	bf00      	nop
 80039ae:	e7fd      	b.n	80039ac <MemManage_Handler+0x4>

080039b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <BusFault_Handler+0x4>

080039b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039bc:	bf00      	nop
 80039be:	e7fd      	b.n	80039bc <UsageFault_Handler+0x4>

080039c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003a0c:	4802      	ldr	r0, [pc, #8]	@ (8003a18 <DMA1_Stream3_IRQHandler+0x10>)
 8003a0e:	f000 fc5f 	bl	80042d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000454 	.word	0x20000454

08003a1c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8003a20:	4802      	ldr	r0, [pc, #8]	@ (8003a2c <SPI2_IRQHandler+0x10>)
 8003a22:	f004 fc65 	bl	80082f0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	2000040c 	.word	0x2000040c

08003a30 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003a34:	4802      	ldr	r0, [pc, #8]	@ (8003a40 <SDIO_IRQHandler+0x10>)
 8003a36:	f007 f851 	bl	800aadc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000630 	.word	0x20000630

08003a44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a48:	4802      	ldr	r0, [pc, #8]	@ (8003a54 <TIM6_DAC_IRQHandler+0x10>)
 8003a4a:	f007 ffe3 	bl	800ba14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000948 	.word	0x20000948

08003a58 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003a5c:	4802      	ldr	r0, [pc, #8]	@ (8003a68 <DMA2_Stream1_IRQHandler+0x10>)
 8003a5e:	f000 fc37 	bl	80042d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	2000084c 	.word	0x2000084c

08003a6c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003a70:	4802      	ldr	r0, [pc, #8]	@ (8003a7c <DMA2_Stream3_IRQHandler+0x10>)
 8003a72:	f000 fc2d 	bl	80042d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	200006b4 	.word	0x200006b4

08003a80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003a84:	4802      	ldr	r0, [pc, #8]	@ (8003a90 <OTG_FS_IRQHandler+0x10>)
 8003a86:	f002 fb4b 	bl	8006120 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000db8 	.word	0x20000db8

08003a94 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003a98:	4802      	ldr	r0, [pc, #8]	@ (8003aa4 <DMA2_Stream6_IRQHandler+0x10>)
 8003a9a:	f000 fc19 	bl	80042d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000714 	.word	0x20000714

08003aa8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003aac:	4802      	ldr	r0, [pc, #8]	@ (8003ab8 <DMA2_Stream7_IRQHandler+0x10>)
 8003aae:	f000 fc0f 	bl	80042d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200008ac 	.word	0x200008ac

08003abc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003ac0:	4802      	ldr	r0, [pc, #8]	@ (8003acc <USART6_IRQHandler+0x10>)
 8003ac2:	f008 fd07 	bl	800c4d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000804 	.word	0x20000804

08003ad0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003ad4:	4802      	ldr	r0, [pc, #8]	@ (8003ae0 <LTDC_IRQHandler+0x10>)
 8003ad6:	f005 f847 	bl	8008b68 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200004b4 	.word	0x200004b4

08003ae4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003ae8:	4802      	ldr	r0, [pc, #8]	@ (8003af4 <DMA2D_IRQHandler+0x10>)
 8003aea:	f000 feb0 	bl	800484e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000308 	.word	0x20000308

08003af8 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8003afc:	4802      	ldr	r0, [pc, #8]	@ (8003b08 <DSI_IRQHandler+0x10>)
 8003afe:	f001 fa86 	bl	800500e <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000348 	.word	0x20000348

08003b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return 1;
 8003b10:	2301      	movs	r3, #1
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <_kill>:

int _kill(int pid, int sig)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b26:	f012 f88f 	bl	8015c48 <__errno>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2216      	movs	r2, #22
 8003b2e:	601a      	str	r2, [r3, #0]
  return -1;
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_exit>:

void _exit (int status)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b44:	f04f 31ff 	mov.w	r1, #4294967295
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ffe7 	bl	8003b1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b4e:	bf00      	nop
 8003b50:	e7fd      	b.n	8003b4e <_exit+0x12>

08003b52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e00a      	b.n	8003b7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b64:	f3af 8000 	nop.w
 8003b68:	4601      	mov	r1, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	60ba      	str	r2, [r7, #8]
 8003b70:	b2ca      	uxtb	r2, r1
 8003b72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3301      	adds	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	dbf0      	blt.n	8003b64 <_read+0x12>
  }

  return len;
 8003b82:	687b      	ldr	r3, [r7, #4]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <_close>:
  }
  return len;
}

int _close(int file)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bb4:	605a      	str	r2, [r3, #4]
  return 0;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_isatty>:

int _isatty(int file)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bcc:	2301      	movs	r3, #1
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bfc:	4a14      	ldr	r2, [pc, #80]	@ (8003c50 <_sbrk+0x5c>)
 8003bfe:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <_sbrk+0x60>)
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c08:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <_sbrk+0x64>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d102      	bne.n	8003c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c10:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <_sbrk+0x64>)
 8003c12:	4a12      	ldr	r2, [pc, #72]	@ (8003c5c <_sbrk+0x68>)
 8003c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c16:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <_sbrk+0x64>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d207      	bcs.n	8003c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c24:	f012 f810 	bl	8015c48 <__errno>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	220c      	movs	r2, #12
 8003c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	e009      	b.n	8003c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c34:	4b08      	ldr	r3, [pc, #32]	@ (8003c58 <_sbrk+0x64>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c3a:	4b07      	ldr	r3, [pc, #28]	@ (8003c58 <_sbrk+0x64>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	4a05      	ldr	r2, [pc, #20]	@ (8003c58 <_sbrk+0x64>)
 8003c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c46:	68fb      	ldr	r3, [r7, #12]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20050000 	.word	0x20050000
 8003c54:	00000400 	.word	0x00000400
 8003c58:	20000990 	.word	0x20000990
 8003c5c:	200012e8 	.word	0x200012e8

08003c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c64:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <SystemInit+0x20>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6a:	4a05      	ldr	r2, [pc, #20]	@ (8003c80 <SystemInit+0x20>)
 8003c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003cbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003c88:	f7ff ffea 	bl	8003c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c8c:	480c      	ldr	r0, [pc, #48]	@ (8003cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c8e:	490d      	ldr	r1, [pc, #52]	@ (8003cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c90:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c94:	e002      	b.n	8003c9c <LoopCopyDataInit>

08003c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c9a:	3304      	adds	r3, #4

08003c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ca0:	d3f9      	bcc.n	8003c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8003cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ca8:	e001      	b.n	8003cae <LoopFillZerobss>

08003caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cac:	3204      	adds	r2, #4

08003cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cb0:	d3fb      	bcc.n	8003caa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003cb2:	f011 ffcf 	bl	8015c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cb6:	f7fe f965 	bl	8001f84 <main>
  bx  lr    
 8003cba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003cbc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cc4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003cc8:	08016f20 	.word	0x08016f20
  ldr r2, =_sbss
 8003ccc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003cd0:	200012e8 	.word	0x200012e8

08003cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cd4:	e7fe      	b.n	8003cd4 <ADC_IRQHandler>
	...

08003cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <HAL_Init+0x40>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8003d18 <HAL_Init+0x40>)
 8003ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <HAL_Init+0x40>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0a      	ldr	r2, [pc, #40]	@ (8003d18 <HAL_Init+0x40>)
 8003cee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cf4:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <HAL_Init+0x40>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a07      	ldr	r2, [pc, #28]	@ (8003d18 <HAL_Init+0x40>)
 8003cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d00:	2003      	movs	r0, #3
 8003d02:	f000 f8fc 	bl	8003efe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d06:	200f      	movs	r0, #15
 8003d08:	f7ff fdca 	bl	80038a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d0c:	f7fe ffe8 	bl	8002ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023c00 	.word	0x40023c00

08003d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d20:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_IncTick+0x20>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_IncTick+0x24>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	4a04      	ldr	r2, [pc, #16]	@ (8003d40 <HAL_IncTick+0x24>)
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20000008 	.word	0x20000008
 8003d40:	20000994 	.word	0x20000994

08003d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return uwTick;
 8003d48:	4b03      	ldr	r3, [pc, #12]	@ (8003d58 <HAL_GetTick+0x14>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000994 	.word	0x20000994

08003d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d64:	f7ff ffee 	bl	8003d44 <HAL_GetTick>
 8003d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d005      	beq.n	8003d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d76:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <HAL_Delay+0x44>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d82:	bf00      	nop
 8003d84:	f7ff ffde 	bl	8003d44 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d8f7      	bhi.n	8003d84 <HAL_Delay+0x28>
  {
  }
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000008 	.word	0x20000008

08003da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db4:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <__NVIC_SetPriorityGrouping+0x44>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd6:	4a04      	ldr	r2, [pc, #16]	@ (8003de8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	60d3      	str	r3, [r2, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df0:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <__NVIC_GetPriorityGrouping+0x18>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f003 0307 	and.w	r3, r3, #7
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	db0b      	blt.n	8003e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	4907      	ldr	r1, [pc, #28]	@ (8003e40 <__NVIC_EnableIRQ+0x38>)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2001      	movs	r0, #1
 8003e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	e000e100 	.word	0xe000e100

08003e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	db0a      	blt.n	8003e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	490c      	ldr	r1, [pc, #48]	@ (8003e90 <__NVIC_SetPriority+0x4c>)
 8003e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e62:	0112      	lsls	r2, r2, #4
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	440b      	add	r3, r1
 8003e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e6c:	e00a      	b.n	8003e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4908      	ldr	r1, [pc, #32]	@ (8003e94 <__NVIC_SetPriority+0x50>)
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	3b04      	subs	r3, #4
 8003e7c:	0112      	lsls	r2, r2, #4
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	440b      	add	r3, r1
 8003e82:	761a      	strb	r2, [r3, #24]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	e000e100 	.word	0xe000e100
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	@ 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f1c3 0307 	rsb	r3, r3, #7
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	bf28      	it	cs
 8003eb6:	2304      	movcs	r3, #4
 8003eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d902      	bls.n	8003ec8 <NVIC_EncodePriority+0x30>
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3b03      	subs	r3, #3
 8003ec6:	e000      	b.n	8003eca <NVIC_EncodePriority+0x32>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	401a      	ands	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	43d9      	mvns	r1, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef0:	4313      	orrs	r3, r2
         );
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3724      	adds	r7, #36	@ 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ff4c 	bl	8003da4 <__NVIC_SetPriorityGrouping>
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f26:	f7ff ff61 	bl	8003dec <__NVIC_GetPriorityGrouping>
 8003f2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	6978      	ldr	r0, [r7, #20]
 8003f32:	f7ff ffb1 	bl	8003e98 <NVIC_EncodePriority>
 8003f36:	4602      	mov	r2, r0
 8003f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff80 	bl	8003e44 <__NVIC_SetPriority>
}
 8003f44:	bf00      	nop
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff ff54 	bl	8003e08 <__NVIC_EnableIRQ>
}
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e00e      	b.n	8003f98 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	795b      	ldrb	r3, [r3, #5]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d105      	bne.n	8003f90 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fe fed6 	bl	8002d3c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fac:	f7ff feca 	bl	8003d44 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e099      	b.n	80040f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fdc:	e00f      	b.n	8003ffe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fde:	f7ff feb1 	bl	8003d44 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b05      	cmp	r3, #5
 8003fea:	d908      	bls.n	8003ffe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e078      	b.n	80040f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e8      	bne.n	8003fde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4b38      	ldr	r3, [pc, #224]	@ (80040f8 <HAL_DMA_Init+0x158>)
 8004018:	4013      	ands	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800402a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004036:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004042:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	2b04      	cmp	r3, #4
 8004056:	d107      	bne.n	8004068 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004060:	4313      	orrs	r3, r2
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f023 0307 	bic.w	r3, r3, #7
 800407e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	2b04      	cmp	r3, #4
 8004090:	d117      	bne.n	80040c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00e      	beq.n	80040c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fb0d 	bl	80046c4 <DMA_CheckFifoParam>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2240      	movs	r2, #64	@ 0x40
 80040b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80040be:	2301      	movs	r3, #1
 80040c0:	e016      	b.n	80040f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fac4 	bl	8004658 <DMA_CalcBaseAndBitshift>
 80040d0:	4603      	mov	r3, r0
 80040d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d8:	223f      	movs	r2, #63	@ 0x3f
 80040da:	409a      	lsls	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	f010803f 	.word	0xf010803f

080040fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004112:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_DMA_Start_IT+0x26>
 800411e:	2302      	movs	r3, #2
 8004120:	e040      	b.n	80041a4 <HAL_DMA_Start_IT+0xa8>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d12f      	bne.n	8004196 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 fa56 	bl	80045fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004154:	223f      	movs	r2, #63	@ 0x3f
 8004156:	409a      	lsls	r2, r3
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0216 	orr.w	r2, r2, #22
 800416a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0208 	orr.w	r2, r2, #8
 8004182:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	e005      	b.n	80041a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800419e:	2302      	movs	r3, #2
 80041a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041ba:	f7ff fdc3 	bl	8003d44 <HAL_GetTick>
 80041be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d008      	beq.n	80041de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2280      	movs	r2, #128	@ 0x80
 80041d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e052      	b.n	8004284 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0216 	bic.w	r2, r2, #22
 80041ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_DMA_Abort+0x62>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0208 	bic.w	r2, r2, #8
 800421c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800422e:	e013      	b.n	8004258 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004230:	f7ff fd88 	bl	8003d44 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b05      	cmp	r3, #5
 800423c:	d90c      	bls.n	8004258 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2203      	movs	r2, #3
 8004248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e015      	b.n	8004284 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e4      	bne.n	8004230 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426a:	223f      	movs	r2, #63	@ 0x3f
 800426c:	409a      	lsls	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d004      	beq.n	80042aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2280      	movs	r2, #128	@ 0x80
 80042a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e00c      	b.n	80042c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2205      	movs	r2, #5
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042dc:	4b8e      	ldr	r3, [pc, #568]	@ (8004518 <HAL_DMA_IRQHandler+0x248>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a8e      	ldr	r2, [pc, #568]	@ (800451c <HAL_DMA_IRQHandler+0x24c>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	0a9b      	lsrs	r3, r3, #10
 80042e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fa:	2208      	movs	r2, #8
 80042fc:	409a      	lsls	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01a      	beq.n	800433c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0204 	bic.w	r2, r2, #4
 8004322:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004328:	2208      	movs	r2, #8
 800432a:	409a      	lsls	r2, r3
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004334:	f043 0201 	orr.w	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d012      	beq.n	8004372 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435e:	2201      	movs	r2, #1
 8004360:	409a      	lsls	r2, r3
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436a:	f043 0202 	orr.w	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004376:	2204      	movs	r2, #4
 8004378:	409a      	lsls	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4013      	ands	r3, r2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d012      	beq.n	80043a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004394:	2204      	movs	r2, #4
 8004396:	409a      	lsls	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a0:	f043 0204 	orr.w	r2, r3, #4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ac:	2210      	movs	r2, #16
 80043ae:	409a      	lsls	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d043      	beq.n	8004440 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d03c      	beq.n	8004440 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	2210      	movs	r2, #16
 80043cc:	409a      	lsls	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d018      	beq.n	8004412 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d024      	beq.n	8004440 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
 80043fe:	e01f      	b.n	8004440 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01b      	beq.n	8004440 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
 8004410:	e016      	b.n	8004440 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d107      	bne.n	8004430 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0208 	bic.w	r2, r2, #8
 800442e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004444:	2220      	movs	r2, #32
 8004446:	409a      	lsls	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 808f 	beq.w	8004570 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8087 	beq.w	8004570 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004466:	2220      	movs	r2, #32
 8004468:	409a      	lsls	r2, r3
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b05      	cmp	r3, #5
 8004478:	d136      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0216 	bic.w	r2, r2, #22
 8004488:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004498:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <HAL_DMA_IRQHandler+0x1da>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0208 	bic.w	r2, r2, #8
 80044b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044be:	223f      	movs	r2, #63	@ 0x3f
 80044c0:	409a      	lsls	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d07e      	beq.n	80045dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
        }
        return;
 80044e6:	e079      	b.n	80045dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01d      	beq.n	8004532 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10d      	bne.n	8004520 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004508:	2b00      	cmp	r3, #0
 800450a:	d031      	beq.n	8004570 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
 8004514:	e02c      	b.n	8004570 <HAL_DMA_IRQHandler+0x2a0>
 8004516:	bf00      	nop
 8004518:	20000000 	.word	0x20000000
 800451c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d023      	beq.n	8004570 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
 8004530:	e01e      	b.n	8004570 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10f      	bne.n	8004560 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0210 	bic.w	r2, r2, #16
 800454e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004574:	2b00      	cmp	r3, #0
 8004576:	d032      	beq.n	80045de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d022      	beq.n	80045ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2205      	movs	r2, #5
 8004588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	3301      	adds	r3, #1
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d307      	bcc.n	80045b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f2      	bne.n	800459c <HAL_DMA_IRQHandler+0x2cc>
 80045b6:	e000      	b.n	80045ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
 80045da:	e000      	b.n	80045de <HAL_DMA_IRQHandler+0x30e>
        return;
 80045dc:	bf00      	nop
    }
  }
}
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004618:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b40      	cmp	r3, #64	@ 0x40
 8004628:	d108      	bne.n	800463c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800463a:	e007      	b.n	800464c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	60da      	str	r2, [r3, #12]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	3b10      	subs	r3, #16
 8004668:	4a14      	ldr	r2, [pc, #80]	@ (80046bc <DMA_CalcBaseAndBitshift+0x64>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004672:	4a13      	ldr	r2, [pc, #76]	@ (80046c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b03      	cmp	r3, #3
 8004684:	d909      	bls.n	800469a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	1d1a      	adds	r2, r3, #4
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	659a      	str	r2, [r3, #88]	@ 0x58
 8004698:	e007      	b.n	80046aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	aaaaaaab 	.word	0xaaaaaaab
 80046c0:	08016ddc 	.word	0x08016ddc

080046c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d11f      	bne.n	800471e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d856      	bhi.n	8004792 <DMA_CheckFifoParam+0xce>
 80046e4:	a201      	add	r2, pc, #4	@ (adr r2, 80046ec <DMA_CheckFifoParam+0x28>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	0800470f 	.word	0x0800470f
 80046f4:	080046fd 	.word	0x080046fd
 80046f8:	08004793 	.word	0x08004793
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d046      	beq.n	8004796 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470c:	e043      	b.n	8004796 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004716:	d140      	bne.n	800479a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471c:	e03d      	b.n	800479a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004726:	d121      	bne.n	800476c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b03      	cmp	r3, #3
 800472c:	d837      	bhi.n	800479e <DMA_CheckFifoParam+0xda>
 800472e:	a201      	add	r2, pc, #4	@ (adr r2, 8004734 <DMA_CheckFifoParam+0x70>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004745 	.word	0x08004745
 8004738:	0800474b 	.word	0x0800474b
 800473c:	08004745 	.word	0x08004745
 8004740:	0800475d 	.word	0x0800475d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      break;
 8004748:	e030      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d025      	beq.n	80047a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475a:	e022      	b.n	80047a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004764:	d11f      	bne.n	80047a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800476a:	e01c      	b.n	80047a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d903      	bls.n	800477a <DMA_CheckFifoParam+0xb6>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b03      	cmp	r3, #3
 8004776:	d003      	beq.n	8004780 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004778:	e018      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
      break;
 800477e:	e015      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
      break;
 8004790:	e00b      	b.n	80047aa <DMA_CheckFifoParam+0xe6>
      break;
 8004792:	bf00      	nop
 8004794:	e00a      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;
 8004796:	bf00      	nop
 8004798:	e008      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;
 800479a:	bf00      	nop
 800479c:	e006      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;
 800479e:	bf00      	nop
 80047a0:	e004      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;
 80047a2:	bf00      	nop
 80047a4:	e002      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;   
 80047a6:	bf00      	nop
 80047a8:	e000      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
      break;
 80047aa:	bf00      	nop
    }
  } 
  
  return status; 
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop

080047bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e03b      	b.n	8004846 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fe facc 	bl	8002d80 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480c:	f023 0107 	bic.w	r1, r3, #7
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004826:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68d1      	ldr	r1, [r2, #12]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	430b      	orrs	r3, r1
 8004834:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d026      	beq.n	80048be <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d021      	beq.n	80048be <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004888:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488e:	f043 0201 	orr.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2201      	movs	r2, #1
 800489c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2204      	movs	r2, #4
 80048a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d026      	beq.n	8004916 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d021      	beq.n	8004916 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048e0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2220      	movs	r2, #32
 80048e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	f043 0202 	orr.w	r2, r3, #2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2204      	movs	r2, #4
 80048fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d026      	beq.n	800496e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004926:	2b00      	cmp	r3, #0
 8004928:	d021      	beq.n	800496e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004938:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2208      	movs	r2, #8
 8004940:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004946:	f043 0204 	orr.w	r2, r3, #4
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2204      	movs	r2, #4
 8004952:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00e      	beq.n	80049a0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004990:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2204      	movs	r2, #4
 8004998:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f853 	bl	8004a46 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d024      	beq.n	80049f4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01f      	beq.n	80049f4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80049c2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2202      	movs	r2, #2
 80049ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01f      	beq.n	8004a3e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a16:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f80e 	bl	8004a5a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_DMA2D_ConfigLayer+0x20>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e079      	b.n	8004b84 <HAL_DMA2D_ConfigLayer+0x114>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	3318      	adds	r3, #24
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	041b      	lsls	r3, r3, #16
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004aba:	4b35      	ldr	r3, [pc, #212]	@ (8004b90 <HAL_DMA2D_ConfigLayer+0x120>)
 8004abc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b0a      	cmp	r3, #10
 8004ac4:	d003      	beq.n	8004ace <HAL_DMA2D_ConfigLayer+0x5e>
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b09      	cmp	r3, #9
 8004acc:	d107      	bne.n	8004ade <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e005      	b.n	8004aea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	061b      	lsls	r3, r3, #24
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d120      	bne.n	8004b32 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	43db      	mvns	r3, r3
 8004afa:	ea02 0103 	and.w	r1, r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b0a      	cmp	r3, #10
 8004b18:	d003      	beq.n	8004b22 <HAL_DMA2D_ConfigLayer+0xb2>
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b09      	cmp	r3, #9
 8004b20:	d127      	bne.n	8004b72 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004b2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b30:	e01f      	b.n	8004b72 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	ea02 0103 	and.w	r1, r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b0a      	cmp	r3, #10
 8004b5a:	d003      	beq.n	8004b64 <HAL_DMA2D_ConfigLayer+0xf4>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b09      	cmp	r3, #9
 8004b62:	d106      	bne.n	8004b72 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004b70:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	ff03000f 	.word	0xff03000f

08004b94 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	@ 0x28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e16e      	b.n	8004e86 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	7c5b      	ldrb	r3, [r3, #17]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fe f90c 	bl	8002dd0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2203      	movs	r2, #3
 8004bbc:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004bd2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8004bde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004be6:	f7ff f8ad 	bl	8003d44 <HAL_GetTick>
 8004bea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004bec:	e009      	b.n	8004c02 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004bee:	f7ff f8a9 	bl	8003d44 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bfc:	d901      	bls.n	8004c02 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e141      	b.n	8004e86 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004c0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0ed      	beq.n	8004bee <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8004c22:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8004c26:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004c3e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004c46:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8004c7a:	2001      	movs	r0, #1
 8004c7c:	f7ff f86e 	bl	8003d5c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c80:	f7ff f860 	bl	8003d44 <HAL_GetTick>
 8004c84:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004c86:	e009      	b.n	8004c9c <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004c88:	f7ff f85c 	bl	8003d44 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c96:	d901      	bls.n	8004c9c <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e0f4      	b.n	8004e86 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8004ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ed      	beq.n	8004c88 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	605a      	str	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004cdc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6899      	ldr	r1, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0202 	orr.w	r2, r2, #2
 8004d00:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0204 	orr.w	r2, r2, #4
 8004d14:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0203 	bic.w	r2, r2, #3
 8004d28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d42:	f7fe ffff 	bl	8003d44 <HAL_GetTick>
 8004d46:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d123      	bne.n	8004da0 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8004d58:	e00c      	b.n	8004d74 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004d5a:	f7fe fff3 	bl	8003d44 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d68:	d904      	bls.n	8004d74 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e088      	b.n	8004e86 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d7c:	f003 0314 	and.w	r3, r3, #20
 8004d80:	2b14      	cmp	r3, #20
 8004d82:	d1ea      	bne.n	8004d5a <HAL_DSI_Init+0x1c6>
 8004d84:	e014      	b.n	8004db0 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004d86:	f7fe ffdd 	bl	8003d44 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d94:	d904      	bls.n	8004da0 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e072      	b.n	8004e86 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004da8:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8004dac:	2b94      	cmp	r3, #148	@ 0x94
 8004dae:	d1ea      	bne.n	8004d86 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_DSI_Init+0x22a>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	e000      	b.n	8004dc0 <HAL_DSI_Init+0x22c>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	4a32      	ldr	r2, [pc, #200]	@ (8004e90 <HAL_DSI_Init+0x2fc>)
 8004dc6:	fb03 f202 	mul.w	r2, r3, r2
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004df6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0201 	bic.w	r2, r2, #1
 8004e3a:	605a      	str	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0203 	bic.w	r2, r2, #3
 8004e5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3728      	adds	r7, #40	@ 0x28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	003d0900 	.word	0x003d0900

08004e94 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	7c1b      	ldrb	r3, [r3, #16]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_DSI_ConfigErrorMonitor+0x16>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e0ab      	b.n	8005002 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004ee4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004ee8:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8004f06:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0202 	orr.w	r2, r2, #2
 8004f42:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 020c 	orr.w	r2, r2, #12
 8004f60:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0210 	orr.w	r2, r2, #16
 8004f7e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d009      	beq.n	8004fa0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0220 	orr.w	r2, r2, #32
 8004f9c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fba:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d009      	beq.n	8004fdc <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fd8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8004ff6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00f      	beq.n	8005046 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2201      	movs	r2, #1
 800503c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f8ad 	bl	80051a0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00f      	beq.n	8005076 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2202      	movs	r2, #2
 800506c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f89f 	bl	80051b4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 808c 	beq.w	8005198 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005088:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4013      	ands	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80050a0:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f043 0201 	orr.w	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f043 0202 	orr.w	r2, r3, #2
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f043 0204 	orr.w	r2, r3, #4
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f043 0208 	orr.w	r2, r3, #8
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f043 0210 	orr.w	r2, r3, #16
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f818 	bl	80051c8 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	7c1b      	ldrb	r3, [r3, #16]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_DSI_SetGenericVCID+0x16>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e016      	b.n	8005220 <HAL_DSI_SetGenericVCID+0x44>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0203 	bic.w	r2, r2, #3
 8005206:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	7c1b      	ldrb	r3, [r3, #16]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800523e:	2302      	movs	r3, #2
 8005240:	e0c5      	b.n	80053ce <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0201 	orr.w	r2, r2, #1
 800527c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0203 	bic.w	r2, r2, #3
 800528e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68d9      	ldr	r1, [r3, #12]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0207 	bic.w	r2, r2, #7
 80052b0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6959      	ldr	r1, [r3, #20]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 020f 	bic.w	r2, r2, #15
 80052de:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6919      	ldr	r1, [r3, #16]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 020e 	bic.w	r2, r2, #14
 8005302:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	005a      	lsls	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	041b      	lsls	r3, r3, #16
 800532c:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005350:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	431a      	orrs	r2, r3
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0201 	bic.w	r2, r2, #1
 800538a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0202 	orr.w	r2, r2, #2
 80053c2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	7c1b      	ldrb	r3, [r3, #16]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_DSI_ConfigCommand+0x16>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e049      	b.n	8005486 <HAL_DSI_ConfigCommand+0xaa>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b24      	ldr	r3, [pc, #144]	@ (8005494 <HAL_DSI_ConfigCommand+0xb8>)
 8005404:	400b      	ands	r3, r1
 8005406:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005416:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800541c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8005422:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8005428:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800542e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8005434:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800543a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8005440:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8005446:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800544c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8005452:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0202 	bic.w	r2, r2, #2
 800546a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	fef080ff 	.word	0xfef080ff

08005498 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	7c1b      	ldrb	r3, [r3, #16]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_DSI_ConfigFlowControl+0x16>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e016      	b.n	80054dc <HAL_DSI_ConfigFlowControl+0x44>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 021f 	bic.w	r2, r2, #31
 80054c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	7c1b      	ldrb	r3, [r3, #16]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_DSI_ConfigPhyTimer+0x16>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e058      	b.n	80055b0 <HAL_DSI_ConfigPhyTimer+0xc8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4293      	cmp	r3, r2
 800550e:	bf38      	it	cc
 8005510:	4613      	movcc	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8005524:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	041a      	lsls	r2, r3, #16
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8005552:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	041b      	lsls	r3, r3, #16
 8005568:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800558c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	021a      	lsls	r2, r3, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	7c1b      	ldrb	r3, [r3, #16]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_DSI_ConfigHostTimeouts+0x16>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e0b4      	b.n	800573c <HAL_DSI_ConfigHostTimeouts+0x180>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80055e6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6899      	ldr	r1, [r3, #8]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	021a      	lsls	r2, r3, #8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	b292      	uxth	r2, r2
 8005608:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	041a      	lsls	r2, r3, #16
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6812      	ldr	r2, [r2, #0]
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	0c1b      	lsrs	r3, r3, #16
 8005670:	041b      	lsls	r3, r3, #16
 8005672:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80056c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	0c1b      	lsrs	r3, r3, #16
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6a1a      	ldr	r2, [r3, #32]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	7c1b      	ldrb	r3, [r3, #16]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_DSI_SetLowPowerRXFilter+0x16>
 800575a:	2302      	movs	r3, #2
 800575c:	e01b      	b.n	8005796 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8005774:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	065a      	lsls	r2, r3, #25
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b089      	sub	sp, #36	@ 0x24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
 80057be:	e177      	b.n	8005ab0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057c0:	2201      	movs	r2, #1
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4013      	ands	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	429a      	cmp	r2, r3
 80057da:	f040 8166 	bne.w	8005aaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d005      	beq.n	80057f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d130      	bne.n	8005858 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	2203      	movs	r2, #3
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43db      	mvns	r3, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4013      	ands	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4313      	orrs	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800582c:	2201      	movs	r2, #1
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 0201 	and.w	r2, r3, #1
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4313      	orrs	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	2b03      	cmp	r3, #3
 8005862:	d017      	beq.n	8005894 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	2203      	movs	r2, #3
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	43db      	mvns	r3, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4013      	ands	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d123      	bne.n	80058e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	08da      	lsrs	r2, r3, #3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3208      	adds	r2, #8
 80058a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	220f      	movs	r2, #15
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	43db      	mvns	r3, r3
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	4013      	ands	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	08da      	lsrs	r2, r3, #3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3208      	adds	r2, #8
 80058e2:	69b9      	ldr	r1, [r7, #24]
 80058e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	2203      	movs	r2, #3
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	43db      	mvns	r3, r3
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	4013      	ands	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 0203 	and.w	r2, r3, #3
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	4313      	orrs	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 80c0 	beq.w	8005aaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	4b66      	ldr	r3, [pc, #408]	@ (8005ac8 <HAL_GPIO_Init+0x324>)
 8005930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005932:	4a65      	ldr	r2, [pc, #404]	@ (8005ac8 <HAL_GPIO_Init+0x324>)
 8005934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005938:	6453      	str	r3, [r2, #68]	@ 0x44
 800593a:	4b63      	ldr	r3, [pc, #396]	@ (8005ac8 <HAL_GPIO_Init+0x324>)
 800593c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005946:	4a61      	ldr	r2, [pc, #388]	@ (8005acc <HAL_GPIO_Init+0x328>)
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	089b      	lsrs	r3, r3, #2
 800594c:	3302      	adds	r3, #2
 800594e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	220f      	movs	r2, #15
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43db      	mvns	r3, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4013      	ands	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a58      	ldr	r2, [pc, #352]	@ (8005ad0 <HAL_GPIO_Init+0x32c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d037      	beq.n	80059e2 <HAL_GPIO_Init+0x23e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a57      	ldr	r2, [pc, #348]	@ (8005ad4 <HAL_GPIO_Init+0x330>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d031      	beq.n	80059de <HAL_GPIO_Init+0x23a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a56      	ldr	r2, [pc, #344]	@ (8005ad8 <HAL_GPIO_Init+0x334>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d02b      	beq.n	80059da <HAL_GPIO_Init+0x236>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a55      	ldr	r2, [pc, #340]	@ (8005adc <HAL_GPIO_Init+0x338>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d025      	beq.n	80059d6 <HAL_GPIO_Init+0x232>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a54      	ldr	r2, [pc, #336]	@ (8005ae0 <HAL_GPIO_Init+0x33c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01f      	beq.n	80059d2 <HAL_GPIO_Init+0x22e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a53      	ldr	r2, [pc, #332]	@ (8005ae4 <HAL_GPIO_Init+0x340>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d019      	beq.n	80059ce <HAL_GPIO_Init+0x22a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a52      	ldr	r2, [pc, #328]	@ (8005ae8 <HAL_GPIO_Init+0x344>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <HAL_GPIO_Init+0x226>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a51      	ldr	r2, [pc, #324]	@ (8005aec <HAL_GPIO_Init+0x348>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00d      	beq.n	80059c6 <HAL_GPIO_Init+0x222>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a50      	ldr	r2, [pc, #320]	@ (8005af0 <HAL_GPIO_Init+0x34c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <HAL_GPIO_Init+0x21e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a4f      	ldr	r2, [pc, #316]	@ (8005af4 <HAL_GPIO_Init+0x350>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d101      	bne.n	80059be <HAL_GPIO_Init+0x21a>
 80059ba:	2309      	movs	r3, #9
 80059bc:	e012      	b.n	80059e4 <HAL_GPIO_Init+0x240>
 80059be:	230a      	movs	r3, #10
 80059c0:	e010      	b.n	80059e4 <HAL_GPIO_Init+0x240>
 80059c2:	2308      	movs	r3, #8
 80059c4:	e00e      	b.n	80059e4 <HAL_GPIO_Init+0x240>
 80059c6:	2307      	movs	r3, #7
 80059c8:	e00c      	b.n	80059e4 <HAL_GPIO_Init+0x240>
 80059ca:	2306      	movs	r3, #6
 80059cc:	e00a      	b.n	80059e4 <HAL_GPIO_Init+0x240>
 80059ce:	2305      	movs	r3, #5
 80059d0:	e008      	b.n	80059e4 <HAL_GPIO_Init+0x240>
 80059d2:	2304      	movs	r3, #4
 80059d4:	e006      	b.n	80059e4 <HAL_GPIO_Init+0x240>
 80059d6:	2303      	movs	r3, #3
 80059d8:	e004      	b.n	80059e4 <HAL_GPIO_Init+0x240>
 80059da:	2302      	movs	r3, #2
 80059dc:	e002      	b.n	80059e4 <HAL_GPIO_Init+0x240>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <HAL_GPIO_Init+0x240>
 80059e2:	2300      	movs	r3, #0
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	f002 0203 	and.w	r2, r2, #3
 80059ea:	0092      	lsls	r2, r2, #2
 80059ec:	4093      	lsls	r3, r2
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059f4:	4935      	ldr	r1, [pc, #212]	@ (8005acc <HAL_GPIO_Init+0x328>)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	089b      	lsrs	r3, r3, #2
 80059fa:	3302      	adds	r3, #2
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a02:	4b3d      	ldr	r3, [pc, #244]	@ (8005af8 <HAL_GPIO_Init+0x354>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	43db      	mvns	r3, r3
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a26:	4a34      	ldr	r2, [pc, #208]	@ (8005af8 <HAL_GPIO_Init+0x354>)
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a2c:	4b32      	ldr	r3, [pc, #200]	@ (8005af8 <HAL_GPIO_Init+0x354>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a50:	4a29      	ldr	r2, [pc, #164]	@ (8005af8 <HAL_GPIO_Init+0x354>)
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a56:	4b28      	ldr	r3, [pc, #160]	@ (8005af8 <HAL_GPIO_Init+0x354>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	4013      	ands	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8005af8 <HAL_GPIO_Init+0x354>)
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a80:	4b1d      	ldr	r3, [pc, #116]	@ (8005af8 <HAL_GPIO_Init+0x354>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005aa4:	4a14      	ldr	r2, [pc, #80]	@ (8005af8 <HAL_GPIO_Init+0x354>)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3301      	adds	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	2b0f      	cmp	r3, #15
 8005ab4:	f67f ae84 	bls.w	80057c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ab8:	bf00      	nop
 8005aba:	bf00      	nop
 8005abc:	3724      	adds	r7, #36	@ 0x24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	40013800 	.word	0x40013800
 8005ad0:	40020000 	.word	0x40020000
 8005ad4:	40020400 	.word	0x40020400
 8005ad8:	40020800 	.word	0x40020800
 8005adc:	40020c00 	.word	0x40020c00
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	40021400 	.word	0x40021400
 8005ae8:	40021800 	.word	0x40021800
 8005aec:	40021c00 	.word	0x40021c00
 8005af0:	40022000 	.word	0x40022000
 8005af4:	40022400 	.word	0x40022400
 8005af8:	40013c00 	.word	0x40013c00

08005afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	887b      	ldrh	r3, [r7, #2]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
 8005b18:	e001      	b.n	8005b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	807b      	strh	r3, [r7, #2]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b3c:	787b      	ldrb	r3, [r7, #1]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b42:	887a      	ldrh	r2, [r7, #2]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b48:	e003      	b.n	8005b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b4a:	887b      	ldrh	r3, [r7, #2]
 8005b4c:	041a      	lsls	r2, r3, #16
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	619a      	str	r2, [r3, #24]
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b086      	sub	sp, #24
 8005b62:	af02      	add	r7, sp, #8
 8005b64:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e059      	b.n	8005c24 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f00f f904 	bl	8014d98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2203      	movs	r2, #3
 8005b94:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b9e:	d102      	bne.n	8005ba6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f008 fc49 	bl	800e442 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	7c1a      	ldrb	r2, [r3, #16]
 8005bb8:	f88d 2000 	strb.w	r2, [sp]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bc0:	f008 fbca 	bl	800e358 <USB_CoreInit>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e026      	b.n	8005c24 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2101      	movs	r1, #1
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f008 fc41 	bl	800e464 <USB_SetCurrentMode>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e017      	b.n	8005c24 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	7c1a      	ldrb	r2, [r3, #16]
 8005bfc:	f88d 2000 	strb.w	r2, [sp]
 8005c00:	3304      	adds	r3, #4
 8005c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c04:	f008 fde4 	bl	800e7d0 <USB_HostInit>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e004      	b.n	8005c24 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005c2c:	b590      	push	{r4, r7, lr}
 8005c2e:	b08b      	sub	sp, #44	@ 0x2c
 8005c30:	af04      	add	r7, sp, #16
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	4608      	mov	r0, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	461a      	mov	r2, r3
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	70fb      	strb	r3, [r7, #3]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	70bb      	strb	r3, [r7, #2]
 8005c42:	4613      	mov	r3, r2
 8005c44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8005c46:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005c48:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_HCD_HC_Init+0x2c>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e09d      	b.n	8005d94 <HAL_HCD_HC_Init+0x168>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005c60:	78fa      	ldrb	r2, [r7, #3]
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	3319      	adds	r3, #25
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005c74:	78fa      	ldrb	r2, [r7, #3]
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	3314      	adds	r3, #20
 8005c84:	787a      	ldrb	r2, [r7, #1]
 8005c86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005c88:	78fa      	ldrb	r2, [r7, #3]
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	1a9b      	subs	r3, r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	3315      	adds	r3, #21
 8005c98:	78fa      	ldrb	r2, [r7, #3]
 8005c9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005c9c:	78fa      	ldrb	r2, [r7, #3]
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	3326      	adds	r3, #38	@ 0x26
 8005cac:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005cb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	78bb      	ldrb	r3, [r7, #2]
 8005cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cba:	b2d8      	uxtb	r0, r3
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	3316      	adds	r3, #22
 8005cca:	4602      	mov	r2, r0
 8005ccc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fbc8 	bl	8006468 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005cd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	da0a      	bge.n	8005cf6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005ce0:	78fa      	ldrb	r2, [r7, #3]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	3317      	adds	r3, #23
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	e009      	b.n	8005d0a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	3317      	adds	r3, #23
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f008 feb6 	bl	800ea80 <USB_GetHostSpeed>
 8005d14:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005d16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d10b      	bne.n	8005d36 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8005d1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d107      	bne.n	8005d36 <HAL_HCD_HC_Init+0x10a>
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d104      	bne.n	8005d36 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005d30:	d901      	bls.n	8005d36 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005d32:	23bc      	movs	r3, #188	@ 0xbc
 8005d34:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005d36:	78fa      	ldrb	r2, [r7, #3]
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	3318      	adds	r3, #24
 8005d46:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005d4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	b298      	uxth	r0, r3
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	1a9b      	subs	r3, r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	3328      	adds	r3, #40	@ 0x28
 8005d60:	4602      	mov	r2, r0
 8005d62:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	787c      	ldrb	r4, [r7, #1]
 8005d6e:	78ba      	ldrb	r2, [r7, #2]
 8005d70:	78f9      	ldrb	r1, [r7, #3]
 8005d72:	9302      	str	r3, [sp, #8]
 8005d74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4623      	mov	r3, r4
 8005d82:	f008 fea5 	bl	800ead0 <USB_HC_Init>
 8005d86:	4603      	mov	r3, r0
 8005d88:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd90      	pop	{r4, r7, pc}

08005d9c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_HCD_HC_Halt+0x1e>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e00f      	b.n	8005dda <HAL_HCD_HC_Halt+0x3e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	78fa      	ldrb	r2, [r7, #3]
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f009 fa37 	bl	800f23e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	4608      	mov	r0, r1
 8005dee:	4611      	mov	r1, r2
 8005df0:	461a      	mov	r2, r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	70fb      	strb	r3, [r7, #3]
 8005df6:	460b      	mov	r3, r1
 8005df8:	70bb      	strb	r3, [r7, #2]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005dfe:	78fa      	ldrb	r2, [r7, #3]
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	4613      	mov	r3, r2
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	3317      	adds	r3, #23
 8005e0e:	78ba      	ldrb	r2, [r7, #2]
 8005e10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005e12:	78fa      	ldrb	r2, [r7, #3]
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	3326      	adds	r3, #38	@ 0x26
 8005e22:	787a      	ldrb	r2, [r7, #1]
 8005e24:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005e26:	7c3b      	ldrb	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d114      	bne.n	8005e56 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005e2c:	78fa      	ldrb	r2, [r7, #3]
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	332a      	adds	r3, #42	@ 0x2a
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005e40:	78fa      	ldrb	r2, [r7, #3]
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	4613      	mov	r3, r2
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	1a9b      	subs	r3, r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	440b      	add	r3, r1
 8005e4e:	3319      	adds	r3, #25
 8005e50:	7f3a      	ldrb	r2, [r7, #28]
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	e009      	b.n	8005e6a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005e56:	78fa      	ldrb	r2, [r7, #3]
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	332a      	adds	r3, #42	@ 0x2a
 8005e66:	2202      	movs	r2, #2
 8005e68:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005e6a:	787b      	ldrb	r3, [r7, #1]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	f200 8102 	bhi.w	8006076 <HAL_HCD_HC_SubmitRequest+0x292>
 8005e72:	a201      	add	r2, pc, #4	@ (adr r2, 8005e78 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e89 	.word	0x08005e89
 8005e7c:	08006061 	.word	0x08006061
 8005e80:	08005f4d 	.word	0x08005f4d
 8005e84:	08005fd7 	.word	0x08005fd7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8005e88:	7c3b      	ldrb	r3, [r7, #16]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	f040 80f5 	bne.w	800607a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8005e90:	78bb      	ldrb	r3, [r7, #2]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d12d      	bne.n	8005ef2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8005e96:	8b3b      	ldrh	r3, [r7, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8005e9c:	78fa      	ldrb	r2, [r7, #3]
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	333d      	adds	r3, #61	@ 0x3d
 8005eac:	2201      	movs	r2, #1
 8005eae:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	333d      	adds	r3, #61	@ 0x3d
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	332a      	adds	r3, #42	@ 0x2a
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8005eda:	e0ce      	b.n	800607a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	332a      	adds	r3, #42	@ 0x2a
 8005eec:	2202      	movs	r2, #2
 8005eee:	701a      	strb	r2, [r3, #0]
      break;
 8005ef0:	e0c3      	b.n	800607a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	331a      	adds	r3, #26
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	f040 80b8 	bne.w	800607a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8005f0a:	78fa      	ldrb	r2, [r7, #3]
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	1a9b      	subs	r3, r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	333c      	adds	r3, #60	@ 0x3c
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f20:	78fa      	ldrb	r2, [r7, #3]
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4613      	mov	r3, r2
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	332a      	adds	r3, #42	@ 0x2a
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
      break;
 8005f34:	e0a1      	b.n	800607a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f36:	78fa      	ldrb	r2, [r7, #3]
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	332a      	adds	r3, #42	@ 0x2a
 8005f46:	2202      	movs	r2, #2
 8005f48:	701a      	strb	r2, [r3, #0]
      break;
 8005f4a:	e096      	b.n	800607a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005f4c:	78bb      	ldrb	r3, [r7, #2]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d120      	bne.n	8005f94 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	1a9b      	subs	r3, r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	333d      	adds	r3, #61	@ 0x3d
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	332a      	adds	r3, #42	@ 0x2a
 8005f78:	2200      	movs	r2, #0
 8005f7a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005f7c:	e07e      	b.n	800607c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	011b      	lsls	r3, r3, #4
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	332a      	adds	r3, #42	@ 0x2a
 8005f8e:	2202      	movs	r2, #2
 8005f90:	701a      	strb	r2, [r3, #0]
      break;
 8005f92:	e073      	b.n	800607c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	333c      	adds	r3, #60	@ 0x3c
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	332a      	adds	r3, #42	@ 0x2a
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
      break;
 8005fbe:	e05d      	b.n	800607c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005fc0:	78fa      	ldrb	r2, [r7, #3]
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	1a9b      	subs	r3, r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	332a      	adds	r3, #42	@ 0x2a
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	701a      	strb	r2, [r3, #0]
      break;
 8005fd4:	e052      	b.n	800607c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005fd6:	78bb      	ldrb	r3, [r7, #2]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d120      	bne.n	800601e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005fdc:	78fa      	ldrb	r2, [r7, #3]
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	333d      	adds	r3, #61	@ 0x3d
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005ff2:	78fa      	ldrb	r2, [r7, #3]
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	440b      	add	r3, r1
 8006000:	332a      	adds	r3, #42	@ 0x2a
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006006:	e039      	b.n	800607c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	4613      	mov	r3, r2
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	332a      	adds	r3, #42	@ 0x2a
 8006018:	2202      	movs	r2, #2
 800601a:	701a      	strb	r2, [r3, #0]
      break;
 800601c:	e02e      	b.n	800607c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800601e:	78fa      	ldrb	r2, [r7, #3]
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	4613      	mov	r3, r2
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	333c      	adds	r3, #60	@ 0x3c
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	332a      	adds	r3, #42	@ 0x2a
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
      break;
 8006048:	e018      	b.n	800607c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	332a      	adds	r3, #42	@ 0x2a
 800605a:	2202      	movs	r2, #2
 800605c:	701a      	strb	r2, [r3, #0]
      break;
 800605e:	e00d      	b.n	800607c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	332a      	adds	r3, #42	@ 0x2a
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
      break;
 8006074:	e002      	b.n	800607c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8006076:	bf00      	nop
 8006078:	e000      	b.n	800607c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800607a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800607c:	78fa      	ldrb	r2, [r7, #3]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	332c      	adds	r3, #44	@ 0x2c
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006090:	78fa      	ldrb	r2, [r7, #3]
 8006092:	8b39      	ldrh	r1, [r7, #24]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4403      	add	r3, r0
 80060a0:	3334      	adds	r3, #52	@ 0x34
 80060a2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4613      	mov	r3, r2
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	334c      	adds	r3, #76	@ 0x4c
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	3338      	adds	r3, #56	@ 0x38
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80060cc:	78fa      	ldrb	r2, [r7, #3]
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	4613      	mov	r3, r2
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	3315      	adds	r3, #21
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	4613      	mov	r3, r2
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	1a9b      	subs	r3, r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	334d      	adds	r3, #77	@ 0x4d
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	4613      	mov	r3, r2
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	3310      	adds	r3, #16
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	4413      	add	r3, r2
 8006108:	1d19      	adds	r1, r3, #4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	799b      	ldrb	r3, [r3, #6]
 800610e:	461a      	mov	r2, r3
 8006110:	f008 fe0a 	bl	800ed28 <USB_HC_StartXfer>
 8006114:	4603      	mov	r3, r0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop

08006120 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f008 fb0a 	bl	800e750 <USB_GetMode>
 800613c:	4603      	mov	r3, r0
 800613e:	2b01      	cmp	r3, #1
 8006140:	f040 80fb 	bne.w	800633a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f008 facd 	bl	800e6e8 <USB_ReadInterrupts>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80f1 	beq.w	8006338 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f008 fac4 	bl	800e6e8 <USB_ReadInterrupts>
 8006160:	4603      	mov	r3, r0
 8006162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006166:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800616a:	d104      	bne.n	8006176 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8006174:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f008 fab4 	bl	800e6e8 <USB_ReadInterrupts>
 8006180:	4603      	mov	r3, r0
 8006182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800618a:	d104      	bne.n	8006196 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006194:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f008 faa4 	bl	800e6e8 <USB_ReadInterrupts>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061aa:	d104      	bne.n	80061b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80061b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f008 fa94 	bl	800e6e8 <USB_ReadInterrupts>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d103      	bne.n	80061d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2202      	movs	r2, #2
 80061d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f008 fa86 	bl	800e6e8 <USB_ReadInterrupts>
 80061dc:	4603      	mov	r3, r0
 80061de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061e6:	d120      	bne.n	800622a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80061f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d113      	bne.n	800622a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006202:	2110      	movs	r1, #16
 8006204:	6938      	ldr	r0, [r7, #16]
 8006206:	f008 f979 	bl	800e4fc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800620a:	6938      	ldr	r0, [r7, #16]
 800620c:	f008 f9a8 	bl	800e560 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7a5b      	ldrb	r3, [r3, #9]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d105      	bne.n	8006224 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2101      	movs	r1, #1
 800621e:	4618      	mov	r0, r3
 8006220:	f008 fb8e 	bl	800e940 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f00e fe35 	bl	8014e94 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f008 fa5a 	bl	800e6e8 <USB_ReadInterrupts>
 8006234:	4603      	mov	r3, r0
 8006236:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800623a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800623e:	d102      	bne.n	8006246 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f001 fd4d 	bl	8007ce0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f008 fa4c 	bl	800e6e8 <USB_ReadInterrupts>
 8006250:	4603      	mov	r3, r0
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b08      	cmp	r3, #8
 8006258:	d106      	bne.n	8006268 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f00e fdfe 	bl	8014e5c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2208      	movs	r2, #8
 8006266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f008 fa3b 	bl	800e6e8 <USB_ReadInterrupts>
 8006272:	4603      	mov	r3, r0
 8006274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800627c:	d139      	bne.n	80062f2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f008 ffca 	bl	800f21c <USB_HC_ReadInterrupt>
 8006288:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	e025      	b.n	80062dc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	fa22 f303 	lsr.w	r3, r2, r3
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d018      	beq.n	80062d6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ba:	d106      	bne.n	80062ca <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f905 	bl	80064d2 <HCD_HC_IN_IRQHandler>
 80062c8:	e005      	b.n	80062d6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 ff67 	bl	80071a4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	3301      	adds	r3, #1
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	795b      	ldrb	r3, [r3, #5]
 80062e0:	461a      	mov	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d3d3      	bcc.n	8006290 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80062f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f008 f9f6 	bl	800e6e8 <USB_ReadInterrupts>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b10      	cmp	r3, #16
 8006304:	d101      	bne.n	800630a <HAL_HCD_IRQHandler+0x1ea>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <HAL_HCD_IRQHandler+0x1ec>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d014      	beq.n	800633a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0210 	bic.w	r2, r2, #16
 800631e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 fbfe 	bl	8007b22 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699a      	ldr	r2, [r3, #24]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0210 	orr.w	r2, r2, #16
 8006334:	619a      	str	r2, [r3, #24]
 8006336:	e000      	b.n	800633a <HAL_HCD_IRQHandler+0x21a>
      return;
 8006338:	bf00      	nop
    }
  }
}
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_HCD_Start+0x16>
 8006352:	2302      	movs	r3, #2
 8006354:	e013      	b.n	800637e <HAL_HCD_Start+0x3e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2101      	movs	r1, #1
 8006364:	4618      	mov	r0, r3
 8006366:	f008 fb52 	bl	800ea0e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f008 f856 	bl	800e420 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_HCD_Stop+0x16>
 8006398:	2302      	movs	r3, #2
 800639a:	e00d      	b.n	80063b8 <HAL_HCD_Stop+0x32>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f009 f8a5 	bl	800f4f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f008 faf4 	bl	800e9ba <USB_ResetPort>
 80063d2:	4603      	mov	r3, r0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4613      	mov	r3, r2
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	334c      	adds	r3, #76	@ 0x4c
 80063f8:	781b      	ldrb	r3, [r3, #0]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006412:	78fa      	ldrb	r2, [r7, #3]
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	4613      	mov	r3, r2
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	1a9b      	subs	r3, r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	3338      	adds	r3, #56	@ 0x38
 8006422:	681b      	ldr	r3, [r3, #0]
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4618      	mov	r0, r3
 800643e:	f008 fb36 	bl	800eaae <USB_GetCurrentFrame>
 8006442:	4603      	mov	r3, r0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4618      	mov	r0, r3
 800645a:	f008 fb11 	bl	800ea80 <USB_GetHostSpeed>
 800645e:	4603      	mov	r3, r0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8006474:	78fa      	ldrb	r2, [r7, #3]
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	4613      	mov	r3, r2
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	440b      	add	r3, r1
 8006482:	331a      	adds	r3, #26
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8006488:	78fa      	ldrb	r2, [r7, #3]
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	4613      	mov	r3, r2
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	1a9b      	subs	r3, r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	331b      	adds	r3, #27
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800649c:	78fa      	ldrb	r2, [r7, #3]
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	4613      	mov	r3, r2
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	1a9b      	subs	r3, r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	3325      	adds	r3, #37	@ 0x25
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80064b0:	78fa      	ldrb	r2, [r7, #3]
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	4613      	mov	r3, r2
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	1a9b      	subs	r3, r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	440b      	add	r3, r1
 80064be:	3324      	adds	r3, #36	@ 0x24
 80064c0:	2200      	movs	r2, #0
 80064c2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	460b      	mov	r3, r1
 80064dc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f008 f90c 	bl	800e70e <USB_ReadChInterrupts>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d11a      	bne.n	8006536 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	4413      	add	r3, r2
 8006508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800650c:	461a      	mov	r2, r3
 800650e:	2304      	movs	r3, #4
 8006510:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006512:	78fa      	ldrb	r2, [r7, #3]
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	4613      	mov	r3, r2
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	440b      	add	r3, r1
 8006520:	334d      	adds	r3, #77	@ 0x4d
 8006522:	2207      	movs	r2, #7
 8006524:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	78fa      	ldrb	r2, [r7, #3]
 800652c:	4611      	mov	r1, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f008 fe85 	bl	800f23e <USB_HC_Halt>
 8006534:	e09e      	b.n	8006674 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	78fa      	ldrb	r2, [r7, #3]
 800653c:	4611      	mov	r1, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f008 f8e5 	bl	800e70e <USB_ReadChInterrupts>
 8006544:	4603      	mov	r3, r0
 8006546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654e:	d11b      	bne.n	8006588 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4413      	add	r3, r2
 8006558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800655c:	461a      	mov	r2, r3
 800655e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006562:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8006564:	78fa      	ldrb	r2, [r7, #3]
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	334d      	adds	r3, #77	@ 0x4d
 8006574:	2208      	movs	r2, #8
 8006576:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	78fa      	ldrb	r2, [r7, #3]
 800657e:	4611      	mov	r1, r2
 8006580:	4618      	mov	r0, r3
 8006582:	f008 fe5c 	bl	800f23e <USB_HC_Halt>
 8006586:	e075      	b.n	8006674 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	78fa      	ldrb	r2, [r7, #3]
 800658e:	4611      	mov	r1, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f008 f8bc 	bl	800e70e <USB_ReadChInterrupts>
 8006596:	4603      	mov	r3, r0
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b08      	cmp	r3, #8
 800659e:	d11a      	bne.n	80065d6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ac:	461a      	mov	r2, r3
 80065ae:	2308      	movs	r3, #8
 80065b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80065b2:	78fa      	ldrb	r2, [r7, #3]
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	1a9b      	subs	r3, r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	334d      	adds	r3, #77	@ 0x4d
 80065c2:	2206      	movs	r2, #6
 80065c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	78fa      	ldrb	r2, [r7, #3]
 80065cc:	4611      	mov	r1, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f008 fe35 	bl	800f23e <USB_HC_Halt>
 80065d4:	e04e      	b.n	8006674 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f008 f895 	bl	800e70e <USB_ReadChInterrupts>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ee:	d11b      	bne.n	8006628 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065fc:	461a      	mov	r2, r3
 80065fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006602:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006604:	78fa      	ldrb	r2, [r7, #3]
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	4613      	mov	r3, r2
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	334d      	adds	r3, #77	@ 0x4d
 8006614:	2209      	movs	r2, #9
 8006616:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	78fa      	ldrb	r2, [r7, #3]
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f008 fe0c 	bl	800f23e <USB_HC_Halt>
 8006626:	e025      	b.n	8006674 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	78fa      	ldrb	r2, [r7, #3]
 800662e:	4611      	mov	r1, r2
 8006630:	4618      	mov	r0, r3
 8006632:	f008 f86c 	bl	800e70e <USB_ReadChInterrupts>
 8006636:	4603      	mov	r3, r0
 8006638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800663c:	2b80      	cmp	r3, #128	@ 0x80
 800663e:	d119      	bne.n	8006674 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664c:	461a      	mov	r2, r3
 800664e:	2380      	movs	r3, #128	@ 0x80
 8006650:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006652:	78fa      	ldrb	r2, [r7, #3]
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	334d      	adds	r3, #77	@ 0x4d
 8006662:	2207      	movs	r2, #7
 8006664:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	78fa      	ldrb	r2, [r7, #3]
 800666c:	4611      	mov	r1, r2
 800666e:	4618      	mov	r0, r3
 8006670:	f008 fde5 	bl	800f23e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	78fa      	ldrb	r2, [r7, #3]
 800667a:	4611      	mov	r1, r2
 800667c:	4618      	mov	r0, r3
 800667e:	f008 f846 	bl	800e70e <USB_ReadChInterrupts>
 8006682:	4603      	mov	r3, r0
 8006684:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800668c:	d112      	bne.n	80066b4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	78fa      	ldrb	r2, [r7, #3]
 8006694:	4611      	mov	r1, r2
 8006696:	4618      	mov	r0, r3
 8006698:	f008 fdd1 	bl	800f23e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066a8:	461a      	mov	r2, r3
 80066aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066ae:	6093      	str	r3, [r2, #8]
 80066b0:	f000 bd75 	b.w	800719e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	78fa      	ldrb	r2, [r7, #3]
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f008 f826 	bl	800e70e <USB_ReadChInterrupts>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	f040 8128 	bne.w	800691e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066da:	461a      	mov	r2, r3
 80066dc:	2320      	movs	r3, #32
 80066de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80066e0:	78fa      	ldrb	r2, [r7, #3]
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	331b      	adds	r3, #27
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d119      	bne.n	800672a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80066f6:	78fa      	ldrb	r2, [r7, #3]
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	331b      	adds	r3, #27
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	4413      	add	r3, r2
 8006712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	78fa      	ldrb	r2, [r7, #3]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	440a      	add	r2, r1
 8006720:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006728:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	799b      	ldrb	r3, [r3, #6]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01b      	beq.n	800676a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	1a9b      	subs	r3, r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	3330      	adds	r3, #48	@ 0x30
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	4413      	add	r3, r2
 800674c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006756:	78fa      	ldrb	r2, [r7, #3]
 8006758:	1ac9      	subs	r1, r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	4613      	mov	r3, r2
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	1a9b      	subs	r3, r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4403      	add	r3, r0
 8006766:	3338      	adds	r3, #56	@ 0x38
 8006768:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800676a:	78fa      	ldrb	r2, [r7, #3]
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	334d      	adds	r3, #77	@ 0x4d
 800677a:	2201      	movs	r2, #1
 800677c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800677e:	78fa      	ldrb	r2, [r7, #3]
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	1a9b      	subs	r3, r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	3344      	adds	r3, #68	@ 0x44
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800679e:	461a      	mov	r2, r3
 80067a0:	2301      	movs	r3, #1
 80067a2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80067a4:	78fa      	ldrb	r2, [r7, #3]
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	4613      	mov	r3, r2
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	1a9b      	subs	r3, r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	440b      	add	r3, r1
 80067b2:	3326      	adds	r3, #38	@ 0x26
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80067ba:	78fa      	ldrb	r2, [r7, #3]
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	3326      	adds	r3, #38	@ 0x26
 80067ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d110      	bne.n	80067f2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f008 fd30 	bl	800f23e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80067de:	78fb      	ldrb	r3, [r7, #3]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ea:	461a      	mov	r2, r3
 80067ec:	2310      	movs	r3, #16
 80067ee:	6093      	str	r3, [r2, #8]
 80067f0:	e03d      	b.n	800686e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80067f2:	78fa      	ldrb	r2, [r7, #3]
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4613      	mov	r3, r2
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	3326      	adds	r3, #38	@ 0x26
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b03      	cmp	r3, #3
 8006806:	d00a      	beq.n	800681e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	4613      	mov	r3, r2
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	3326      	adds	r3, #38	@ 0x26
 8006818:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800681a:	2b01      	cmp	r3, #1
 800681c:	d127      	bne.n	800686e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	4413      	add	r3, r2
 8006826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	78fa      	ldrb	r2, [r7, #3]
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	440a      	add	r2, r1
 8006834:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006838:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800683c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800683e:	78fa      	ldrb	r2, [r7, #3]
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	334c      	adds	r3, #76	@ 0x4c
 800684e:	2201      	movs	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	334c      	adds	r3, #76	@ 0x4c
 8006862:	781a      	ldrb	r2, [r3, #0]
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f00e fb21 	bl	8014eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	799b      	ldrb	r3, [r3, #6]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d13b      	bne.n	80068ee <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	4613      	mov	r3, r2
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	3338      	adds	r3, #56	@ 0x38
 8006886:	6819      	ldr	r1, [r3, #0]
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	4613      	mov	r3, r2
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	1a9b      	subs	r3, r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4403      	add	r3, r0
 8006896:	3328      	adds	r3, #40	@ 0x28
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	440b      	add	r3, r1
 800689c:	1e59      	subs	r1, r3, #1
 800689e:	78fa      	ldrb	r2, [r7, #3]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4403      	add	r3, r0
 80068ac:	3328      	adds	r3, #40	@ 0x28
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8470 	beq.w	800719e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	333c      	adds	r3, #60	@ 0x3c
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	78fa      	ldrb	r2, [r7, #3]
 80068d2:	f083 0301 	eor.w	r3, r3, #1
 80068d6:	b2d8      	uxtb	r0, r3
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	333c      	adds	r3, #60	@ 0x3c
 80068e6:	4602      	mov	r2, r0
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	f000 bc58 	b.w	800719e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	333c      	adds	r3, #60	@ 0x3c
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	78fa      	ldrb	r2, [r7, #3]
 8006902:	f083 0301 	eor.w	r3, r3, #1
 8006906:	b2d8      	uxtb	r0, r3
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	1a9b      	subs	r3, r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	333c      	adds	r3, #60	@ 0x3c
 8006916:	4602      	mov	r2, r0
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	f000 bc40 	b.w	800719e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	4611      	mov	r1, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f007 fef1 	bl	800e70e <USB_ReadChInterrupts>
 800692c:	4603      	mov	r3, r0
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b20      	cmp	r3, #32
 8006934:	d131      	bne.n	800699a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006936:	78fb      	ldrb	r3, [r7, #3]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006942:	461a      	mov	r2, r3
 8006944:	2320      	movs	r3, #32
 8006946:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8006948:	78fa      	ldrb	r2, [r7, #3]
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	4613      	mov	r3, r2
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	1a9b      	subs	r3, r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	440b      	add	r3, r1
 8006956:	331a      	adds	r3, #26
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	2b01      	cmp	r3, #1
 800695c:	f040 841f 	bne.w	800719e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8006960:	78fa      	ldrb	r2, [r7, #3]
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	4613      	mov	r3, r2
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	1a9b      	subs	r3, r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	440b      	add	r3, r1
 800696e:	331b      	adds	r3, #27
 8006970:	2201      	movs	r2, #1
 8006972:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006974:	78fa      	ldrb	r2, [r7, #3]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	1a9b      	subs	r3, r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	334d      	adds	r3, #77	@ 0x4d
 8006984:	2203      	movs	r2, #3
 8006986:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	78fa      	ldrb	r2, [r7, #3]
 800698e:	4611      	mov	r1, r2
 8006990:	4618      	mov	r0, r3
 8006992:	f008 fc54 	bl	800f23e <USB_HC_Halt>
 8006996:	f000 bc02 	b.w	800719e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	78fa      	ldrb	r2, [r7, #3]
 80069a0:	4611      	mov	r1, r2
 80069a2:	4618      	mov	r0, r3
 80069a4:	f007 feb3 	bl	800e70e <USB_ReadChInterrupts>
 80069a8:	4603      	mov	r3, r0
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	f040 8305 	bne.w	8006fbe <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c0:	461a      	mov	r2, r3
 80069c2:	2302      	movs	r3, #2
 80069c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	334d      	adds	r3, #77	@ 0x4d
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d114      	bne.n	8006a06 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	334d      	adds	r3, #77	@ 0x4d
 80069ec:	2202      	movs	r2, #2
 80069ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80069f0:	78fa      	ldrb	r2, [r7, #3]
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4613      	mov	r3, r2
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	1a9b      	subs	r3, r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	334c      	adds	r3, #76	@ 0x4c
 8006a00:	2201      	movs	r2, #1
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	e2cc      	b.n	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006a06:	78fa      	ldrb	r2, [r7, #3]
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	1a9b      	subs	r3, r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	440b      	add	r3, r1
 8006a14:	334d      	adds	r3, #77	@ 0x4d
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b06      	cmp	r3, #6
 8006a1a:	d114      	bne.n	8006a46 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	334d      	adds	r3, #77	@ 0x4d
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8006a30:	78fa      	ldrb	r2, [r7, #3]
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	4613      	mov	r3, r2
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	1a9b      	subs	r3, r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	440b      	add	r3, r1
 8006a3e:	334c      	adds	r3, #76	@ 0x4c
 8006a40:	2205      	movs	r2, #5
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e2ac      	b.n	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	1a9b      	subs	r3, r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	334d      	adds	r3, #77	@ 0x4d
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b07      	cmp	r3, #7
 8006a5a:	d00b      	beq.n	8006a74 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	6879      	ldr	r1, [r7, #4]
 8006a60:	4613      	mov	r3, r2
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	1a9b      	subs	r3, r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	440b      	add	r3, r1
 8006a6a:	334d      	adds	r3, #77	@ 0x4d
 8006a6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006a6e:	2b09      	cmp	r3, #9
 8006a70:	f040 80a6 	bne.w	8006bc0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	334d      	adds	r3, #77	@ 0x4d
 8006a84:	2202      	movs	r2, #2
 8006a86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006a88:	78fa      	ldrb	r2, [r7, #3]
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	1a9b      	subs	r3, r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	3344      	adds	r3, #68	@ 0x44
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1c59      	adds	r1, r3, #1
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	1a9b      	subs	r3, r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4403      	add	r3, r0
 8006aa8:	3344      	adds	r3, #68	@ 0x44
 8006aaa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006aac:	78fa      	ldrb	r2, [r7, #3]
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	1a9b      	subs	r3, r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	3344      	adds	r3, #68	@ 0x44
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d943      	bls.n	8006b4a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006ac2:	78fa      	ldrb	r2, [r7, #3]
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	1a9b      	subs	r3, r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	440b      	add	r3, r1
 8006ad0:	3344      	adds	r3, #68	@ 0x44
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006ad6:	78fa      	ldrb	r2, [r7, #3]
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	1a9b      	subs	r3, r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	331a      	adds	r3, #26
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d123      	bne.n	8006b34 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006aec:	78fa      	ldrb	r2, [r7, #3]
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4613      	mov	r3, r2
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	1a9b      	subs	r3, r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	331b      	adds	r3, #27
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006b00:	78fa      	ldrb	r2, [r7, #3]
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	331c      	adds	r3, #28
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	78fa      	ldrb	r2, [r7, #3]
 8006b24:	0151      	lsls	r1, r2, #5
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	440a      	add	r2, r1
 8006b2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b32:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006b34:	78fa      	ldrb	r2, [r7, #3]
 8006b36:	6879      	ldr	r1, [r7, #4]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	440b      	add	r3, r1
 8006b42:	334c      	adds	r3, #76	@ 0x4c
 8006b44:	2204      	movs	r2, #4
 8006b46:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006b48:	e229      	b.n	8006f9e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006b4a:	78fa      	ldrb	r2, [r7, #3]
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	011b      	lsls	r3, r3, #4
 8006b52:	1a9b      	subs	r3, r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	334c      	adds	r3, #76	@ 0x4c
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006b5e:	78fa      	ldrb	r2, [r7, #3]
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	4613      	mov	r3, r2
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	3326      	adds	r3, #38	@ 0x26
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006b74:	78fa      	ldrb	r2, [r7, #3]
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	1a9b      	subs	r3, r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	3326      	adds	r3, #38	@ 0x26
 8006b84:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	f040 8209 	bne.w	8006f9e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ba2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006baa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006bbe:	e1ee      	b.n	8006f9e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006bc0:	78fa      	ldrb	r2, [r7, #3]
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	334d      	adds	r3, #77	@ 0x4d
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b05      	cmp	r3, #5
 8006bd4:	f040 80c8 	bne.w	8006d68 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	1a9b      	subs	r3, r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	334d      	adds	r3, #77	@ 0x4d
 8006be8:	2202      	movs	r2, #2
 8006bea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	331b      	adds	r3, #27
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	f040 81ce 	bne.w	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006c04:	78fa      	ldrb	r2, [r7, #3]
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	440b      	add	r3, r1
 8006c12:	3326      	adds	r3, #38	@ 0x26
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d16b      	bne.n	8006cf2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8006c1a:	78fa      	ldrb	r2, [r7, #3]
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	440b      	add	r3, r1
 8006c28:	3348      	adds	r3, #72	@ 0x48
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	1c59      	adds	r1, r3, #1
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	4613      	mov	r3, r2
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4403      	add	r3, r0
 8006c3a:	3348      	adds	r3, #72	@ 0x48
 8006c3c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8006c3e:	78fa      	ldrb	r2, [r7, #3]
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	1a9b      	subs	r3, r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3348      	adds	r3, #72	@ 0x48
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d943      	bls.n	8006cdc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006c54:	78fa      	ldrb	r2, [r7, #3]
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	1a9b      	subs	r3, r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	3348      	adds	r3, #72	@ 0x48
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	1a9b      	subs	r3, r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	331b      	adds	r3, #27
 8006c78:	2200      	movs	r2, #0
 8006c7a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8006c7c:	78fa      	ldrb	r2, [r7, #3]
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4613      	mov	r3, r2
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	1a9b      	subs	r3, r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	3344      	adds	r3, #68	@ 0x44
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d809      	bhi.n	8006ca6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8006c92:	78fa      	ldrb	r2, [r7, #3]
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	1a9b      	subs	r3, r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	331c      	adds	r3, #28
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	0151      	lsls	r1, r2, #5
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	440a      	add	r2, r1
 8006cbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cc4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006cc6:	78fa      	ldrb	r2, [r7, #3]
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	334c      	adds	r3, #76	@ 0x4c
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	e014      	b.n	8006d06 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006cdc:	78fa      	ldrb	r2, [r7, #3]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	334c      	adds	r3, #76	@ 0x4c
 8006cec:	2202      	movs	r2, #2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	e009      	b.n	8006d06 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006cf2:	78fa      	ldrb	r2, [r7, #3]
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	334c      	adds	r3, #76	@ 0x4c
 8006d02:	2202      	movs	r2, #2
 8006d04:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006d06:	78fa      	ldrb	r2, [r7, #3]
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	1a9b      	subs	r3, r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	3326      	adds	r3, #38	@ 0x26
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00b      	beq.n	8006d34 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006d1c:	78fa      	ldrb	r2, [r7, #3]
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	4613      	mov	r3, r2
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	3326      	adds	r3, #38	@ 0x26
 8006d2c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	f040 8136 	bne.w	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d4a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d52:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d60:	461a      	mov	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e11b      	b.n	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006d68:	78fa      	ldrb	r2, [r7, #3]
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	1a9b      	subs	r3, r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	440b      	add	r3, r1
 8006d76:	334d      	adds	r3, #77	@ 0x4d
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	f040 8081 	bne.w	8006e82 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006d80:	78fa      	ldrb	r2, [r7, #3]
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	1a9b      	subs	r3, r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	334d      	adds	r3, #77	@ 0x4d
 8006d90:	2202      	movs	r2, #2
 8006d92:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006d94:	78fa      	ldrb	r2, [r7, #3]
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	1a9b      	subs	r3, r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	440b      	add	r3, r1
 8006da2:	331b      	adds	r3, #27
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	f040 80fa 	bne.w	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006dac:	78fa      	ldrb	r2, [r7, #3]
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4613      	mov	r3, r2
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	440b      	add	r3, r1
 8006dba:	334c      	adds	r3, #76	@ 0x4c
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	78fa      	ldrb	r2, [r7, #3]
 8006dd0:	0151      	lsls	r1, r2, #5
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dde:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	78fa      	ldrb	r2, [r7, #3]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dfe:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e1a:	f023 0320 	bic.w	r3, r3, #32
 8006e1e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	3326      	adds	r3, #38	@ 0x26
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	1a9b      	subs	r3, r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	440b      	add	r3, r1
 8006e44:	3326      	adds	r3, #38	@ 0x26
 8006e46:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	f040 80a9 	bne.w	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e64:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e6c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	e08e      	b.n	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006e82:	78fa      	ldrb	r2, [r7, #3]
 8006e84:	6879      	ldr	r1, [r7, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	011b      	lsls	r3, r3, #4
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	440b      	add	r3, r1
 8006e90:	334d      	adds	r3, #77	@ 0x4d
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d143      	bne.n	8006f20 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e98:	78fa      	ldrb	r2, [r7, #3]
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	1a9b      	subs	r3, r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	334d      	adds	r3, #77	@ 0x4d
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006eac:	78fa      	ldrb	r2, [r7, #3]
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	1a9b      	subs	r3, r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	334c      	adds	r3, #76	@ 0x4c
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006ec0:	78fa      	ldrb	r2, [r7, #3]
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	1a9b      	subs	r3, r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	440b      	add	r3, r1
 8006ece:	3326      	adds	r3, #38	@ 0x26
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006ed6:	78fa      	ldrb	r2, [r7, #3]
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	4613      	mov	r3, r2
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	1a9b      	subs	r3, r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	3326      	adds	r3, #38	@ 0x26
 8006ee6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d159      	bne.n	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006eec:	78fb      	ldrb	r3, [r7, #3]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f02:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f0a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f18:	461a      	mov	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	e03f      	b.n	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006f20:	78fa      	ldrb	r2, [r7, #3]
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	334d      	adds	r3, #77	@ 0x4d
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b08      	cmp	r3, #8
 8006f34:	d126      	bne.n	8006f84 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	1a9b      	subs	r3, r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	334d      	adds	r3, #77	@ 0x4d
 8006f46:	2202      	movs	r2, #2
 8006f48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	1a9b      	subs	r3, r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	3344      	adds	r3, #68	@ 0x44
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	1c59      	adds	r1, r3, #1
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	1a9b      	subs	r3, r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4403      	add	r3, r0
 8006f6a:	3344      	adds	r3, #68	@ 0x44
 8006f6c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8006f6e:	78fa      	ldrb	r2, [r7, #3]
 8006f70:	6879      	ldr	r1, [r7, #4]
 8006f72:	4613      	mov	r3, r2
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	440b      	add	r3, r1
 8006f7c:	334c      	adds	r3, #76	@ 0x4c
 8006f7e:	2204      	movs	r2, #4
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	e00d      	b.n	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006f84:	78fa      	ldrb	r2, [r7, #3]
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	1a9b      	subs	r3, r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	334d      	adds	r3, #77	@ 0x4d
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	f000 8100 	beq.w	800719c <HCD_HC_IN_IRQHandler+0xcca>
 8006f9c:	e000      	b.n	8006fa0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006f9e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006fa0:	78fa      	ldrb	r2, [r7, #3]
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	1a9b      	subs	r3, r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	440b      	add	r3, r1
 8006fae:	334c      	adds	r3, #76	@ 0x4c
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	78fb      	ldrb	r3, [r7, #3]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f00d ff7a 	bl	8014eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006fbc:	e0ef      	b.n	800719e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f007 fba1 	bl	800e70e <USB_ReadChInterrupts>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd2:	2b40      	cmp	r3, #64	@ 0x40
 8006fd4:	d12f      	bne.n	8007036 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006fd6:	78fb      	ldrb	r3, [r7, #3]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	2340      	movs	r3, #64	@ 0x40
 8006fe6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006fe8:	78fa      	ldrb	r2, [r7, #3]
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	4613      	mov	r3, r2
 8006fee:	011b      	lsls	r3, r3, #4
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	334d      	adds	r3, #77	@ 0x4d
 8006ff8:	2205      	movs	r2, #5
 8006ffa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006ffc:	78fa      	ldrb	r2, [r7, #3]
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	4613      	mov	r3, r2
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	440b      	add	r3, r1
 800700a:	331a      	adds	r3, #26
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007012:	78fa      	ldrb	r2, [r7, #3]
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	4613      	mov	r3, r2
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	3344      	adds	r3, #68	@ 0x44
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	78fa      	ldrb	r2, [r7, #3]
 800702c:	4611      	mov	r1, r2
 800702e:	4618      	mov	r0, r3
 8007030:	f008 f905 	bl	800f23e <USB_HC_Halt>
 8007034:	e0b3      	b.n	800719e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f007 fb65 	bl	800e70e <USB_ReadChInterrupts>
 8007044:	4603      	mov	r3, r0
 8007046:	f003 0310 	and.w	r3, r3, #16
 800704a:	2b10      	cmp	r3, #16
 800704c:	f040 80a7 	bne.w	800719e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	4613      	mov	r3, r2
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	1a9b      	subs	r3, r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	440b      	add	r3, r1
 800705e:	3326      	adds	r3, #38	@ 0x26
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b03      	cmp	r3, #3
 8007064:	d11b      	bne.n	800709e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4613      	mov	r3, r2
 800706c:	011b      	lsls	r3, r3, #4
 800706e:	1a9b      	subs	r3, r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	440b      	add	r3, r1
 8007074:	3344      	adds	r3, #68	@ 0x44
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800707a:	78fa      	ldrb	r2, [r7, #3]
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	1a9b      	subs	r3, r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	440b      	add	r3, r1
 8007088:	334d      	adds	r3, #77	@ 0x4d
 800708a:	2204      	movs	r2, #4
 800708c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	78fa      	ldrb	r2, [r7, #3]
 8007094:	4611      	mov	r1, r2
 8007096:	4618      	mov	r0, r3
 8007098:	f008 f8d1 	bl	800f23e <USB_HC_Halt>
 800709c:	e03f      	b.n	800711e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800709e:	78fa      	ldrb	r2, [r7, #3]
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	1a9b      	subs	r3, r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	440b      	add	r3, r1
 80070ac:	3326      	adds	r3, #38	@ 0x26
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00a      	beq.n	80070ca <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80070b4:	78fa      	ldrb	r2, [r7, #3]
 80070b6:	6879      	ldr	r1, [r7, #4]
 80070b8:	4613      	mov	r3, r2
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	1a9b      	subs	r3, r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	440b      	add	r3, r1
 80070c2:	3326      	adds	r3, #38	@ 0x26
 80070c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d129      	bne.n	800711e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	1a9b      	subs	r3, r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	3344      	adds	r3, #68	@ 0x44
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	799b      	ldrb	r3, [r3, #6]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <HCD_HC_IN_IRQHandler+0xc2a>
 80070e6:	78fa      	ldrb	r2, [r7, #3]
 80070e8:	6879      	ldr	r1, [r7, #4]
 80070ea:	4613      	mov	r3, r2
 80070ec:	011b      	lsls	r3, r3, #4
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	331b      	adds	r3, #27
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d110      	bne.n	800711e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80070fc:	78fa      	ldrb	r2, [r7, #3]
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4613      	mov	r3, r2
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	1a9b      	subs	r3, r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	334d      	adds	r3, #77	@ 0x4d
 800710c:	2204      	movs	r2, #4
 800710e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	4611      	mov	r1, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f008 f890 	bl	800f23e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	011b      	lsls	r3, r3, #4
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	331b      	adds	r3, #27
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d129      	bne.n	8007188 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007134:	78fa      	ldrb	r2, [r7, #3]
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	4613      	mov	r3, r2
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	1a9b      	subs	r3, r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	331b      	adds	r3, #27
 8007144:	2200      	movs	r2, #0
 8007146:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	4413      	add	r3, r2
 8007150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	78fa      	ldrb	r2, [r7, #3]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	440a      	add	r2, r1
 800715e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007166:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	4413      	add	r3, r2
 8007170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	78fa      	ldrb	r2, [r7, #3]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	440a      	add	r2, r1
 800717e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007182:	f043 0320 	orr.w	r3, r3, #32
 8007186:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	4413      	add	r3, r2
 8007190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007194:	461a      	mov	r2, r3
 8007196:	2310      	movs	r3, #16
 8007198:	6093      	str	r3, [r2, #8]
 800719a:	e000      	b.n	800719e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800719c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	78fa      	ldrb	r2, [r7, #3]
 80071c0:	4611      	mov	r1, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f007 faa3 	bl	800e70e <USB_ReadChInterrupts>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d11b      	bne.n	800720a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80071d2:	78fb      	ldrb	r3, [r7, #3]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071de:	461a      	mov	r2, r3
 80071e0:	2304      	movs	r3, #4
 80071e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80071e4:	78fa      	ldrb	r2, [r7, #3]
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	4613      	mov	r3, r2
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	440b      	add	r3, r1
 80071f2:	334d      	adds	r3, #77	@ 0x4d
 80071f4:	2207      	movs	r2, #7
 80071f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	4611      	mov	r1, r2
 8007200:	4618      	mov	r0, r3
 8007202:	f008 f81c 	bl	800f23e <USB_HC_Halt>
 8007206:	f000 bc89 	b.w	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	78fa      	ldrb	r2, [r7, #3]
 8007210:	4611      	mov	r1, r2
 8007212:	4618      	mov	r0, r3
 8007214:	f007 fa7b 	bl	800e70e <USB_ReadChInterrupts>
 8007218:	4603      	mov	r3, r0
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b20      	cmp	r3, #32
 8007220:	f040 8082 	bne.w	8007328 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	4413      	add	r3, r2
 800722c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007230:	461a      	mov	r2, r3
 8007232:	2320      	movs	r3, #32
 8007234:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	3319      	adds	r3, #25
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d124      	bne.n	8007296 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800724c:	78fa      	ldrb	r2, [r7, #3]
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	4613      	mov	r3, r2
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	1a9b      	subs	r3, r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	440b      	add	r3, r1
 800725a:	3319      	adds	r3, #25
 800725c:	2200      	movs	r2, #0
 800725e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007260:	78fa      	ldrb	r2, [r7, #3]
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	4613      	mov	r3, r2
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	440b      	add	r3, r1
 800726e:	334c      	adds	r3, #76	@ 0x4c
 8007270:	2202      	movs	r2, #2
 8007272:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007274:	78fa      	ldrb	r2, [r7, #3]
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	4613      	mov	r3, r2
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	334d      	adds	r3, #77	@ 0x4d
 8007284:	2203      	movs	r2, #3
 8007286:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	78fa      	ldrb	r2, [r7, #3]
 800728e:	4611      	mov	r1, r2
 8007290:	4618      	mov	r0, r3
 8007292:	f007 ffd4 	bl	800f23e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8007296:	78fa      	ldrb	r2, [r7, #3]
 8007298:	6879      	ldr	r1, [r7, #4]
 800729a:	4613      	mov	r3, r2
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	1a9b      	subs	r3, r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	440b      	add	r3, r1
 80072a4:	331a      	adds	r3, #26
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	f040 8437 	bne.w	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	331b      	adds	r3, #27
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 842b 	bne.w	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80072c6:	78fa      	ldrb	r2, [r7, #3]
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	4613      	mov	r3, r2
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	1a9b      	subs	r3, r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	3326      	adds	r3, #38	@ 0x26
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d009      	beq.n	80072f0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80072dc:	78fa      	ldrb	r2, [r7, #3]
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	4613      	mov	r3, r2
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	1a9b      	subs	r3, r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	331b      	adds	r3, #27
 80072ec:	2201      	movs	r2, #1
 80072ee:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80072f0:	78fa      	ldrb	r2, [r7, #3]
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4613      	mov	r3, r2
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	1a9b      	subs	r3, r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	440b      	add	r3, r1
 80072fe:	334d      	adds	r3, #77	@ 0x4d
 8007300:	2203      	movs	r2, #3
 8007302:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	4611      	mov	r1, r2
 800730c:	4618      	mov	r0, r3
 800730e:	f007 ff96 	bl	800f23e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8007312:	78fa      	ldrb	r2, [r7, #3]
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	3344      	adds	r3, #68	@ 0x44
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	e3f9      	b.n	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	4611      	mov	r1, r2
 8007330:	4618      	mov	r0, r3
 8007332:	f007 f9ec 	bl	800e70e <USB_ReadChInterrupts>
 8007336:	4603      	mov	r3, r0
 8007338:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800733c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007340:	d111      	bne.n	8007366 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4413      	add	r3, r2
 800734a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800734e:	461a      	mov	r2, r3
 8007350:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007354:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	78fa      	ldrb	r2, [r7, #3]
 800735c:	4611      	mov	r1, r2
 800735e:	4618      	mov	r0, r3
 8007360:	f007 ff6d 	bl	800f23e <USB_HC_Halt>
 8007364:	e3da      	b.n	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	78fa      	ldrb	r2, [r7, #3]
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f007 f9cd 	bl	800e70e <USB_ReadChInterrupts>
 8007374:	4603      	mov	r3, r0
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b01      	cmp	r3, #1
 800737c:	d168      	bne.n	8007450 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	3344      	adds	r3, #68	@ 0x44
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	78fa      	ldrb	r2, [r7, #3]
 8007398:	4611      	mov	r1, r2
 800739a:	4618      	mov	r0, r3
 800739c:	f007 f9b7 	bl	800e70e <USB_ReadChInterrupts>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a6:	2b40      	cmp	r3, #64	@ 0x40
 80073a8:	d112      	bne.n	80073d0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80073aa:	78fa      	ldrb	r2, [r7, #3]
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	011b      	lsls	r3, r3, #4
 80073b2:	1a9b      	subs	r3, r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	440b      	add	r3, r1
 80073b8:	3319      	adds	r3, #25
 80073ba:	2201      	movs	r2, #1
 80073bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ca:	461a      	mov	r2, r3
 80073cc:	2340      	movs	r3, #64	@ 0x40
 80073ce:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80073d0:	78fa      	ldrb	r2, [r7, #3]
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	1a9b      	subs	r3, r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	331b      	adds	r3, #27
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d019      	beq.n	800741a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80073e6:	78fa      	ldrb	r2, [r7, #3]
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	4613      	mov	r3, r2
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	331b      	adds	r3, #27
 80073f6:	2200      	movs	r2, #0
 80073f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	4413      	add	r3, r2
 8007402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	78fa      	ldrb	r2, [r7, #3]
 800740a:	0151      	lsls	r1, r2, #5
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	440a      	add	r2, r1
 8007410:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007418:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4413      	add	r3, r2
 8007422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007426:	461a      	mov	r2, r3
 8007428:	2301      	movs	r3, #1
 800742a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800742c:	78fa      	ldrb	r2, [r7, #3]
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	4613      	mov	r3, r2
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	334d      	adds	r3, #77	@ 0x4d
 800743c:	2201      	movs	r2, #1
 800743e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	4611      	mov	r1, r2
 8007448:	4618      	mov	r0, r3
 800744a:	f007 fef8 	bl	800f23e <USB_HC_Halt>
 800744e:	e365      	b.n	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	78fa      	ldrb	r2, [r7, #3]
 8007456:	4611      	mov	r1, r2
 8007458:	4618      	mov	r0, r3
 800745a:	f007 f958 	bl	800e70e <USB_ReadChInterrupts>
 800745e:	4603      	mov	r3, r0
 8007460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007464:	2b40      	cmp	r3, #64	@ 0x40
 8007466:	d139      	bne.n	80074dc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	6879      	ldr	r1, [r7, #4]
 800746c:	4613      	mov	r3, r2
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	1a9b      	subs	r3, r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	440b      	add	r3, r1
 8007476:	334d      	adds	r3, #77	@ 0x4d
 8007478:	2205      	movs	r2, #5
 800747a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800747c:	78fa      	ldrb	r2, [r7, #3]
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	331a      	adds	r3, #26
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d109      	bne.n	80074a6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007492:	78fa      	ldrb	r2, [r7, #3]
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	4613      	mov	r3, r2
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	3319      	adds	r3, #25
 80074a2:	2201      	movs	r2, #1
 80074a4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	3344      	adds	r3, #68	@ 0x44
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	78fa      	ldrb	r2, [r7, #3]
 80074c0:	4611      	mov	r1, r2
 80074c2:	4618      	mov	r0, r3
 80074c4:	f007 febb 	bl	800f23e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074d4:	461a      	mov	r2, r3
 80074d6:	2340      	movs	r3, #64	@ 0x40
 80074d8:	6093      	str	r3, [r2, #8]
 80074da:	e31f      	b.n	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	78fa      	ldrb	r2, [r7, #3]
 80074e2:	4611      	mov	r1, r2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f007 f912 	bl	800e70e <USB_ReadChInterrupts>
 80074ea:	4603      	mov	r3, r0
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d11a      	bne.n	800752a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007500:	461a      	mov	r2, r3
 8007502:	2308      	movs	r3, #8
 8007504:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007506:	78fa      	ldrb	r2, [r7, #3]
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	1a9b      	subs	r3, r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	334d      	adds	r3, #77	@ 0x4d
 8007516:	2206      	movs	r2, #6
 8007518:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f007 fe8b 	bl	800f23e <USB_HC_Halt>
 8007528:	e2f8      	b.n	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	78fa      	ldrb	r2, [r7, #3]
 8007530:	4611      	mov	r1, r2
 8007532:	4618      	mov	r0, r3
 8007534:	f007 f8eb 	bl	800e70e <USB_ReadChInterrupts>
 8007538:	4603      	mov	r3, r0
 800753a:	f003 0310 	and.w	r3, r3, #16
 800753e:	2b10      	cmp	r3, #16
 8007540:	d144      	bne.n	80075cc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007542:	78fa      	ldrb	r2, [r7, #3]
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	4613      	mov	r3, r2
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	3344      	adds	r3, #68	@ 0x44
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8007556:	78fa      	ldrb	r2, [r7, #3]
 8007558:	6879      	ldr	r1, [r7, #4]
 800755a:	4613      	mov	r3, r2
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	440b      	add	r3, r1
 8007564:	334d      	adds	r3, #77	@ 0x4d
 8007566:	2204      	movs	r2, #4
 8007568:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800756a:	78fa      	ldrb	r2, [r7, #3]
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	1a9b      	subs	r3, r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	440b      	add	r3, r1
 8007578:	3319      	adds	r3, #25
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d114      	bne.n	80075aa <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	4613      	mov	r3, r2
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	1a9b      	subs	r3, r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	440b      	add	r3, r1
 800758e:	3318      	adds	r3, #24
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d109      	bne.n	80075aa <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8007596:	78fa      	ldrb	r2, [r7, #3]
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4613      	mov	r3, r2
 800759c:	011b      	lsls	r3, r3, #4
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	3319      	adds	r3, #25
 80075a6:	2201      	movs	r2, #1
 80075a8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	78fa      	ldrb	r2, [r7, #3]
 80075b0:	4611      	mov	r1, r2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f007 fe43 	bl	800f23e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075c4:	461a      	mov	r2, r3
 80075c6:	2310      	movs	r3, #16
 80075c8:	6093      	str	r3, [r2, #8]
 80075ca:	e2a7      	b.n	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	78fa      	ldrb	r2, [r7, #3]
 80075d2:	4611      	mov	r1, r2
 80075d4:	4618      	mov	r0, r3
 80075d6:	f007 f89a 	bl	800e70e <USB_ReadChInterrupts>
 80075da:	4603      	mov	r3, r0
 80075dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e0:	2b80      	cmp	r3, #128	@ 0x80
 80075e2:	f040 8083 	bne.w	80076ec <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	799b      	ldrb	r3, [r3, #6]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d111      	bne.n	8007612 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80075ee:	78fa      	ldrb	r2, [r7, #3]
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	4613      	mov	r3, r2
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	1a9b      	subs	r3, r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	440b      	add	r3, r1
 80075fc:	334d      	adds	r3, #77	@ 0x4d
 80075fe:	2207      	movs	r2, #7
 8007600:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	78fa      	ldrb	r2, [r7, #3]
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f007 fe17 	bl	800f23e <USB_HC_Halt>
 8007610:	e062      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8007612:	78fa      	ldrb	r2, [r7, #3]
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	440b      	add	r3, r1
 8007620:	3344      	adds	r3, #68	@ 0x44
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	1c59      	adds	r1, r3, #1
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4613      	mov	r3, r2
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	1a9b      	subs	r3, r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4403      	add	r3, r0
 8007632:	3344      	adds	r3, #68	@ 0x44
 8007634:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007636:	78fa      	ldrb	r2, [r7, #3]
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	4613      	mov	r3, r2
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	1a9b      	subs	r3, r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	440b      	add	r3, r1
 8007644:	3344      	adds	r3, #68	@ 0x44
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d922      	bls.n	8007692 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800764c:	78fa      	ldrb	r2, [r7, #3]
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4613      	mov	r3, r2
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	1a9b      	subs	r3, r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	440b      	add	r3, r1
 800765a:	3344      	adds	r3, #68	@ 0x44
 800765c:	2200      	movs	r2, #0
 800765e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	4613      	mov	r3, r2
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	440b      	add	r3, r1
 800766e:	334c      	adds	r3, #76	@ 0x4c
 8007670:	2204      	movs	r2, #4
 8007672:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007674:	78fa      	ldrb	r2, [r7, #3]
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	4613      	mov	r3, r2
 800767a:	011b      	lsls	r3, r3, #4
 800767c:	1a9b      	subs	r3, r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	440b      	add	r3, r1
 8007682:	334c      	adds	r3, #76	@ 0x4c
 8007684:	781a      	ldrb	r2, [r3, #0]
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f00d fc10 	bl	8014eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007690:	e022      	b.n	80076d8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007692:	78fa      	ldrb	r2, [r7, #3]
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	4613      	mov	r3, r2
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	440b      	add	r3, r1
 80076a0:	334c      	adds	r3, #76	@ 0x4c
 80076a2:	2202      	movs	r2, #2
 80076a4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80076bc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076c4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076d2:	461a      	mov	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e4:	461a      	mov	r2, r3
 80076e6:	2380      	movs	r3, #128	@ 0x80
 80076e8:	6093      	str	r3, [r2, #8]
 80076ea:	e217      	b.n	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f007 f80a 	bl	800e70e <USB_ReadChInterrupts>
 80076fa:	4603      	mov	r3, r0
 80076fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007704:	d11b      	bne.n	800773e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007706:	78fa      	ldrb	r2, [r7, #3]
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	1a9b      	subs	r3, r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	334d      	adds	r3, #77	@ 0x4d
 8007716:	2209      	movs	r2, #9
 8007718:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	4611      	mov	r1, r2
 8007722:	4618      	mov	r0, r3
 8007724:	f007 fd8b 	bl	800f23e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	4413      	add	r3, r2
 8007730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007734:	461a      	mov	r2, r3
 8007736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800773a:	6093      	str	r3, [r2, #8]
 800773c:	e1ee      	b.n	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f006 ffe1 	bl	800e70e <USB_ReadChInterrupts>
 800774c:	4603      	mov	r3, r0
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b02      	cmp	r3, #2
 8007754:	f040 81df 	bne.w	8007b16 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4413      	add	r3, r2
 8007760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007764:	461a      	mov	r2, r3
 8007766:	2302      	movs	r3, #2
 8007768:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800776a:	78fa      	ldrb	r2, [r7, #3]
 800776c:	6879      	ldr	r1, [r7, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	334d      	adds	r3, #77	@ 0x4d
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	f040 8093 	bne.w	80078a8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007782:	78fa      	ldrb	r2, [r7, #3]
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	4613      	mov	r3, r2
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	1a9b      	subs	r3, r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	440b      	add	r3, r1
 8007790:	334d      	adds	r3, #77	@ 0x4d
 8007792:	2202      	movs	r2, #2
 8007794:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007796:	78fa      	ldrb	r2, [r7, #3]
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	4613      	mov	r3, r2
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	1a9b      	subs	r3, r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	440b      	add	r3, r1
 80077a4:	334c      	adds	r3, #76	@ 0x4c
 80077a6:	2201      	movs	r2, #1
 80077a8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80077aa:	78fa      	ldrb	r2, [r7, #3]
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	4613      	mov	r3, r2
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	440b      	add	r3, r1
 80077b8:	3326      	adds	r3, #38	@ 0x26
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d00b      	beq.n	80077d8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80077c0:	78fa      	ldrb	r2, [r7, #3]
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	1a9b      	subs	r3, r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	440b      	add	r3, r1
 80077ce:	3326      	adds	r3, #38	@ 0x26
 80077d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	f040 8190 	bne.w	8007af8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	799b      	ldrb	r3, [r3, #6]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d115      	bne.n	800780c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80077e0:	78fa      	ldrb	r2, [r7, #3]
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	4613      	mov	r3, r2
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	1a9b      	subs	r3, r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	440b      	add	r3, r1
 80077ee:	333d      	adds	r3, #61	@ 0x3d
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	f083 0301 	eor.w	r3, r3, #1
 80077f8:	b2d8      	uxtb	r0, r3
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	4613      	mov	r3, r2
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	333d      	adds	r3, #61	@ 0x3d
 8007808:	4602      	mov	r2, r0
 800780a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	799b      	ldrb	r3, [r3, #6]
 8007810:	2b01      	cmp	r3, #1
 8007812:	f040 8171 	bne.w	8007af8 <HCD_HC_OUT_IRQHandler+0x954>
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	011b      	lsls	r3, r3, #4
 800781e:	1a9b      	subs	r3, r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	3334      	adds	r3, #52	@ 0x34
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 8165 	beq.w	8007af8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	4613      	mov	r3, r2
 8007834:	011b      	lsls	r3, r3, #4
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	3334      	adds	r3, #52	@ 0x34
 800783e:	6819      	ldr	r1, [r3, #0]
 8007840:	78fa      	ldrb	r2, [r7, #3]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	4613      	mov	r3, r2
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4403      	add	r3, r0
 800784e:	3328      	adds	r3, #40	@ 0x28
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	440b      	add	r3, r1
 8007854:	1e59      	subs	r1, r3, #1
 8007856:	78fa      	ldrb	r2, [r7, #3]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	4613      	mov	r3, r2
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	1a9b      	subs	r3, r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4403      	add	r3, r0
 8007864:	3328      	adds	r3, #40	@ 0x28
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	fbb1 f3f3 	udiv	r3, r1, r3
 800786c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 813f 	beq.w	8007af8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800787a:	78fa      	ldrb	r2, [r7, #3]
 800787c:	6879      	ldr	r1, [r7, #4]
 800787e:	4613      	mov	r3, r2
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	333d      	adds	r3, #61	@ 0x3d
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	78fa      	ldrb	r2, [r7, #3]
 800788e:	f083 0301 	eor.w	r3, r3, #1
 8007892:	b2d8      	uxtb	r0, r3
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	1a9b      	subs	r3, r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	440b      	add	r3, r1
 80078a0:	333d      	adds	r3, #61	@ 0x3d
 80078a2:	4602      	mov	r2, r0
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	e127      	b.n	8007af8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80078a8:	78fa      	ldrb	r2, [r7, #3]
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	4613      	mov	r3, r2
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	1a9b      	subs	r3, r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	440b      	add	r3, r1
 80078b6:	334d      	adds	r3, #77	@ 0x4d
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d120      	bne.n	8007900 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80078be:	78fa      	ldrb	r2, [r7, #3]
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	4613      	mov	r3, r2
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	334d      	adds	r3, #77	@ 0x4d
 80078ce:	2202      	movs	r2, #2
 80078d0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80078d2:	78fa      	ldrb	r2, [r7, #3]
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	4613      	mov	r3, r2
 80078d8:	011b      	lsls	r3, r3, #4
 80078da:	1a9b      	subs	r3, r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	440b      	add	r3, r1
 80078e0:	331b      	adds	r3, #27
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	f040 8107 	bne.w	8007af8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	1a9b      	subs	r3, r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	334c      	adds	r3, #76	@ 0x4c
 80078fa:	2202      	movs	r2, #2
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	e0fb      	b.n	8007af8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007900:	78fa      	ldrb	r2, [r7, #3]
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	4613      	mov	r3, r2
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	1a9b      	subs	r3, r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	334d      	adds	r3, #77	@ 0x4d
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b04      	cmp	r3, #4
 8007914:	d13a      	bne.n	800798c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007916:	78fa      	ldrb	r2, [r7, #3]
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	440b      	add	r3, r1
 8007924:	334d      	adds	r3, #77	@ 0x4d
 8007926:	2202      	movs	r2, #2
 8007928:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800792a:	78fa      	ldrb	r2, [r7, #3]
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	4613      	mov	r3, r2
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	1a9b      	subs	r3, r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	440b      	add	r3, r1
 8007938:	334c      	adds	r3, #76	@ 0x4c
 800793a:	2202      	movs	r2, #2
 800793c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	1a9b      	subs	r3, r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	331b      	adds	r3, #27
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b01      	cmp	r3, #1
 8007952:	f040 80d1 	bne.w	8007af8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	4613      	mov	r3, r2
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	1a9b      	subs	r3, r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	331b      	adds	r3, #27
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	4413      	add	r3, r2
 8007972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	78fa      	ldrb	r2, [r7, #3]
 800797a:	0151      	lsls	r1, r2, #5
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	440a      	add	r2, r1
 8007980:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007988:	6053      	str	r3, [r2, #4]
 800798a:	e0b5      	b.n	8007af8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800798c:	78fa      	ldrb	r2, [r7, #3]
 800798e:	6879      	ldr	r1, [r7, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	1a9b      	subs	r3, r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	334d      	adds	r3, #77	@ 0x4d
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b05      	cmp	r3, #5
 80079a0:	d114      	bne.n	80079cc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80079a2:	78fa      	ldrb	r2, [r7, #3]
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	4613      	mov	r3, r2
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	440b      	add	r3, r1
 80079b0:	334d      	adds	r3, #77	@ 0x4d
 80079b2:	2202      	movs	r2, #2
 80079b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	1a9b      	subs	r3, r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	334c      	adds	r3, #76	@ 0x4c
 80079c6:	2202      	movs	r2, #2
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	e095      	b.n	8007af8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80079cc:	78fa      	ldrb	r2, [r7, #3]
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	4613      	mov	r3, r2
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	1a9b      	subs	r3, r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	440b      	add	r3, r1
 80079da:	334d      	adds	r3, #77	@ 0x4d
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b06      	cmp	r3, #6
 80079e0:	d114      	bne.n	8007a0c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80079e2:	78fa      	ldrb	r2, [r7, #3]
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	4613      	mov	r3, r2
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	1a9b      	subs	r3, r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	440b      	add	r3, r1
 80079f0:	334d      	adds	r3, #77	@ 0x4d
 80079f2:	2202      	movs	r2, #2
 80079f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	011b      	lsls	r3, r3, #4
 80079fe:	1a9b      	subs	r3, r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	334c      	adds	r3, #76	@ 0x4c
 8007a06:	2205      	movs	r2, #5
 8007a08:	701a      	strb	r2, [r3, #0]
 8007a0a:	e075      	b.n	8007af8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007a0c:	78fa      	ldrb	r2, [r7, #3]
 8007a0e:	6879      	ldr	r1, [r7, #4]
 8007a10:	4613      	mov	r3, r2
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	1a9b      	subs	r3, r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	334d      	adds	r3, #77	@ 0x4d
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b07      	cmp	r3, #7
 8007a20:	d00a      	beq.n	8007a38 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007a22:	78fa      	ldrb	r2, [r7, #3]
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	011b      	lsls	r3, r3, #4
 8007a2a:	1a9b      	subs	r3, r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	334d      	adds	r3, #77	@ 0x4d
 8007a32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d170      	bne.n	8007b1a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007a38:	78fa      	ldrb	r2, [r7, #3]
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	1a9b      	subs	r3, r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	334d      	adds	r3, #77	@ 0x4d
 8007a48:	2202      	movs	r2, #2
 8007a4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4613      	mov	r3, r2
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	1a9b      	subs	r3, r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	3344      	adds	r3, #68	@ 0x44
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	1c59      	adds	r1, r3, #1
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4613      	mov	r3, r2
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4403      	add	r3, r0
 8007a6c:	3344      	adds	r3, #68	@ 0x44
 8007a6e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007a70:	78fa      	ldrb	r2, [r7, #3]
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4613      	mov	r3, r2
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	1a9b      	subs	r3, r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3344      	adds	r3, #68	@ 0x44
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d914      	bls.n	8007ab0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007a86:	78fa      	ldrb	r2, [r7, #3]
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	1a9b      	subs	r3, r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	440b      	add	r3, r1
 8007a94:	3344      	adds	r3, #68	@ 0x44
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007a9a:	78fa      	ldrb	r2, [r7, #3]
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	1a9b      	subs	r3, r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	440b      	add	r3, r1
 8007aa8:	334c      	adds	r3, #76	@ 0x4c
 8007aaa:	2204      	movs	r2, #4
 8007aac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007aae:	e022      	b.n	8007af6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007ab0:	78fa      	ldrb	r2, [r7, #3]
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	1a9b      	subs	r3, r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	440b      	add	r3, r1
 8007abe:	334c      	adds	r3, #76	@ 0x4c
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ada:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ae2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af0:	461a      	mov	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007af6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007af8:	78fa      	ldrb	r2, [r7, #3]
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	4613      	mov	r3, r2
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	1a9b      	subs	r3, r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	440b      	add	r3, r1
 8007b06:	334c      	adds	r3, #76	@ 0x4c
 8007b08:	781a      	ldrb	r2, [r3, #0]
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f00d f9ce 	bl	8014eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007b14:	e002      	b.n	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8007b16:	bf00      	nop
 8007b18:	e000      	b.n	8007b1c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8007b1a:	bf00      	nop
  }
}
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b08a      	sub	sp, #40	@ 0x28
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f003 030f 	and.w	r3, r3, #15
 8007b42:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	0c5b      	lsrs	r3, r3, #17
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	091b      	lsrs	r3, r3, #4
 8007b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b56:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d004      	beq.n	8007b68 <HCD_RXQLVL_IRQHandler+0x46>
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b05      	cmp	r3, #5
 8007b62:	f000 80b6 	beq.w	8007cd2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007b66:	e0b7      	b.n	8007cd8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 80b3 	beq.w	8007cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	4613      	mov	r3, r2
 8007b76:	011b      	lsls	r3, r3, #4
 8007b78:	1a9b      	subs	r3, r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	440b      	add	r3, r1
 8007b7e:	332c      	adds	r3, #44	@ 0x2c
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80a7 	beq.w	8007cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	1a9b      	subs	r3, r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	3338      	adds	r3, #56	@ 0x38
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	18d1      	adds	r1, r2, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	011b      	lsls	r3, r3, #4
 8007ba6:	1a9b      	subs	r3, r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4403      	add	r3, r0
 8007bac:	3334      	adds	r3, #52	@ 0x34
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4299      	cmp	r1, r3
 8007bb2:	f200 8083 	bhi.w	8007cbc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	332c      	adds	r3, #44	@ 0x2c
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	b292      	uxth	r2, r2
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	f006 fd31 	bl	800e638 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	011b      	lsls	r3, r3, #4
 8007bde:	1a9b      	subs	r3, r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	440b      	add	r3, r1
 8007be4:	332c      	adds	r3, #44	@ 0x2c
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	18d1      	adds	r1, r2, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	1a9b      	subs	r3, r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4403      	add	r3, r0
 8007bfa:	332c      	adds	r3, #44	@ 0x2c
 8007bfc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	4613      	mov	r3, r2
 8007c04:	011b      	lsls	r3, r3, #4
 8007c06:	1a9b      	subs	r3, r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	440b      	add	r3, r1
 8007c0c:	3338      	adds	r3, #56	@ 0x38
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	18d1      	adds	r1, r2, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	1a9b      	subs	r3, r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4403      	add	r3, r0
 8007c22:	3338      	adds	r3, #56	@ 0x38
 8007c24:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	0cdb      	lsrs	r3, r3, #19
 8007c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c3a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	4613      	mov	r3, r2
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	1a9b      	subs	r3, r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	440b      	add	r3, r1
 8007c4a:	3328      	adds	r3, #40	@ 0x28
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d13f      	bne.n	8007cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d03c      	beq.n	8007cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c72:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c7a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c88:	461a      	mov	r2, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	4613      	mov	r3, r2
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	1a9b      	subs	r3, r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	333c      	adds	r3, #60	@ 0x3c
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	f083 0301 	eor.w	r3, r3, #1
 8007ca4:	b2d8      	uxtb	r0, r3
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	4613      	mov	r3, r2
 8007cac:	011b      	lsls	r3, r3, #4
 8007cae:	1a9b      	subs	r3, r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	333c      	adds	r3, #60	@ 0x3c
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	701a      	strb	r2, [r3, #0]
      break;
 8007cba:	e00c      	b.n	8007cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	1a9b      	subs	r3, r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	334c      	adds	r3, #76	@ 0x4c
 8007ccc:	2204      	movs	r2, #4
 8007cce:	701a      	strb	r2, [r3, #0]
      break;
 8007cd0:	e001      	b.n	8007cd6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007cd2:	bf00      	nop
 8007cd4:	e000      	b.n	8007cd8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007cd6:	bf00      	nop
  }
}
 8007cd8:	bf00      	nop
 8007cda:	3728      	adds	r7, #40	@ 0x28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007d0c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d10b      	bne.n	8007d30 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d102      	bne.n	8007d28 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f00d f8a8 	bl	8014e78 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f043 0302 	orr.w	r3, r3, #2
 8007d2e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f003 0308 	and.w	r3, r3, #8
 8007d36:	2b08      	cmp	r3, #8
 8007d38:	d132      	bne.n	8007da0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	f043 0308 	orr.w	r3, r3, #8
 8007d40:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d126      	bne.n	8007d9a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	7a5b      	ldrb	r3, [r3, #9]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d113      	bne.n	8007d7c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8007d5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d5e:	d106      	bne.n	8007d6e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2102      	movs	r1, #2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f006 fdea 	bl	800e940 <USB_InitFSLSPClkSel>
 8007d6c:	e011      	b.n	8007d92 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2101      	movs	r1, #1
 8007d74:	4618      	mov	r0, r3
 8007d76:	f006 fde3 	bl	800e940 <USB_InitFSLSPClkSel>
 8007d7a:	e00a      	b.n	8007d92 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	79db      	ldrb	r3, [r3, #7]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d106      	bne.n	8007d92 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8007d90:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f00d f89a 	bl	8014ecc <HAL_HCD_PortEnabled_Callback>
 8007d98:	e002      	b.n	8007da0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f00d f8a4 	bl	8014ee8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d103      	bne.n	8007db2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f043 0320 	orr.w	r3, r3, #32
 8007db0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007db8:	461a      	mov	r2, r3
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	6013      	str	r3, [r2, #0]
}
 8007dbe:	bf00      	nop
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
	...

08007dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e12b      	b.n	8008032 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fb f83e 	bl	8002e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2224      	movs	r2, #36	@ 0x24
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0201 	bic.w	r2, r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007e2c:	f001 fc3e 	bl	80096ac <HAL_RCC_GetPCLK1Freq>
 8007e30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	4a81      	ldr	r2, [pc, #516]	@ (800803c <HAL_I2C_Init+0x274>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d807      	bhi.n	8007e4c <HAL_I2C_Init+0x84>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4a80      	ldr	r2, [pc, #512]	@ (8008040 <HAL_I2C_Init+0x278>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	bf94      	ite	ls
 8007e44:	2301      	movls	r3, #1
 8007e46:	2300      	movhi	r3, #0
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	e006      	b.n	8007e5a <HAL_I2C_Init+0x92>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4a7d      	ldr	r2, [pc, #500]	@ (8008044 <HAL_I2C_Init+0x27c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	bf94      	ite	ls
 8007e54:	2301      	movls	r3, #1
 8007e56:	2300      	movhi	r3, #0
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e0e7      	b.n	8008032 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4a78      	ldr	r2, [pc, #480]	@ (8008048 <HAL_I2C_Init+0x280>)
 8007e66:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6a:	0c9b      	lsrs	r3, r3, #18
 8007e6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	4a6a      	ldr	r2, [pc, #424]	@ (800803c <HAL_I2C_Init+0x274>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d802      	bhi.n	8007e9c <HAL_I2C_Init+0xd4>
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	e009      	b.n	8007eb0 <HAL_I2C_Init+0xe8>
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007ea2:	fb02 f303 	mul.w	r3, r2, r3
 8007ea6:	4a69      	ldr	r2, [pc, #420]	@ (800804c <HAL_I2C_Init+0x284>)
 8007ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eac:	099b      	lsrs	r3, r3, #6
 8007eae:	3301      	adds	r3, #1
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6812      	ldr	r2, [r2, #0]
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007ec2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	495c      	ldr	r1, [pc, #368]	@ (800803c <HAL_I2C_Init+0x274>)
 8007ecc:	428b      	cmp	r3, r1
 8007ece:	d819      	bhi.n	8007f04 <HAL_I2C_Init+0x13c>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	1e59      	subs	r1, r3, #1
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ede:	1c59      	adds	r1, r3, #1
 8007ee0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007ee4:	400b      	ands	r3, r1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <HAL_I2C_Init+0x138>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	1e59      	subs	r1, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ef8:	3301      	adds	r3, #1
 8007efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007efe:	e051      	b.n	8007fa4 <HAL_I2C_Init+0x1dc>
 8007f00:	2304      	movs	r3, #4
 8007f02:	e04f      	b.n	8007fa4 <HAL_I2C_Init+0x1dc>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d111      	bne.n	8007f30 <HAL_I2C_Init+0x168>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	1e58      	subs	r0, r3, #1
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6859      	ldr	r1, [r3, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	005b      	lsls	r3, r3, #1
 8007f18:	440b      	add	r3, r1
 8007f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f1e:	3301      	adds	r3, #1
 8007f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	bf0c      	ite	eq
 8007f28:	2301      	moveq	r3, #1
 8007f2a:	2300      	movne	r3, #0
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	e012      	b.n	8007f56 <HAL_I2C_Init+0x18e>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	1e58      	subs	r0, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6859      	ldr	r1, [r3, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	0099      	lsls	r1, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f46:	3301      	adds	r3, #1
 8007f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bf0c      	ite	eq
 8007f50:	2301      	moveq	r3, #1
 8007f52:	2300      	movne	r3, #0
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <HAL_I2C_Init+0x196>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e022      	b.n	8007fa4 <HAL_I2C_Init+0x1dc>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10e      	bne.n	8007f84 <HAL_I2C_Init+0x1bc>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	1e58      	subs	r0, r3, #1
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6859      	ldr	r1, [r3, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	005b      	lsls	r3, r3, #1
 8007f72:	440b      	add	r3, r1
 8007f74:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f78:	3301      	adds	r3, #1
 8007f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f82:	e00f      	b.n	8007fa4 <HAL_I2C_Init+0x1dc>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	1e58      	subs	r0, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6859      	ldr	r1, [r3, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	0099      	lsls	r1, r3, #2
 8007f94:	440b      	add	r3, r1
 8007f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	6809      	ldr	r1, [r1, #0]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	69da      	ldr	r2, [r3, #28]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007fd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	6911      	ldr	r1, [r2, #16]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	68d2      	ldr	r2, [r2, #12]
 8007fde:	4311      	orrs	r1, r2
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6812      	ldr	r2, [r2, #0]
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	695a      	ldr	r2, [r3, #20]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2220      	movs	r2, #32
 800801e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	000186a0 	.word	0x000186a0
 8008040:	001e847f 	.word	0x001e847f
 8008044:	003d08ff 	.word	0x003d08ff
 8008048:	431bde83 	.word	0x431bde83
 800804c:	10624dd3 	.word	0x10624dd3

08008050 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e138      	b.n	80082d4 <HAL_I2S_Init+0x284>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a98      	ldr	r2, [pc, #608]	@ (80082dc <HAL_I2S_Init+0x28c>)
 800807a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7fa ff75 	bl	8002f6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2202      	movs	r2, #2
 8008086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6812      	ldr	r2, [r2, #0]
 8008094:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8008098:	f023 030f 	bic.w	r3, r3, #15
 800809c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2202      	movs	r2, #2
 80080a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d060      	beq.n	8008170 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80080b6:	2310      	movs	r3, #16
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e001      	b.n	80080c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80080bc:	2320      	movs	r3, #32
 80080be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	d802      	bhi.n	80080ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80080ce:	2001      	movs	r0, #1
 80080d0:	f001 fd84 	bl	8009bdc <HAL_RCCEx_GetPeriphCLKFreq>
 80080d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080de:	d125      	bne.n	800812c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d010      	beq.n	800810a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80080f2:	4613      	mov	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	461a      	mov	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	fbb2 f3f3 	udiv	r3, r2, r3
 8008104:	3305      	adds	r3, #5
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	e01f      	b.n	800814a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	fbb2 f2f3 	udiv	r2, r2, r3
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	461a      	mov	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	fbb2 f3f3 	udiv	r3, r2, r3
 8008126:	3305      	adds	r3, #5
 8008128:	613b      	str	r3, [r7, #16]
 800812a:	e00e      	b.n	800814a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	fbb2 f2f3 	udiv	r2, r2, r3
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	461a      	mov	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	fbb2 f3f3 	udiv	r3, r2, r3
 8008146:	3305      	adds	r3, #5
 8008148:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	4a64      	ldr	r2, [pc, #400]	@ (80082e0 <HAL_I2S_Init+0x290>)
 800814e:	fba2 2303 	umull	r2, r3, r2, r3
 8008152:	08db      	lsrs	r3, r3, #3
 8008154:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	085b      	lsrs	r3, r3, #1
 8008166:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	021b      	lsls	r3, r3, #8
 800816c:	61bb      	str	r3, [r7, #24]
 800816e:	e003      	b.n	8008178 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008170:	2302      	movs	r3, #2
 8008172:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d902      	bls.n	8008184 <HAL_I2S_Init+0x134>
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	2bff      	cmp	r3, #255	@ 0xff
 8008182:	d907      	bls.n	8008194 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008188:	f043 0210 	orr.w	r2, r3, #16
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e09f      	b.n	80082d4 <HAL_I2S_Init+0x284>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691a      	ldr	r2, [r3, #16]
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	ea42 0103 	orr.w	r1, r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80081b2:	f023 030f 	bic.w	r3, r3, #15
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6851      	ldr	r1, [r2, #4]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6892      	ldr	r2, [r2, #8]
 80081be:	4311      	orrs	r1, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	68d2      	ldr	r2, [r2, #12]
 80081c4:	4311      	orrs	r1, r2
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	6992      	ldr	r2, [r2, #24]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	431a      	orrs	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081d6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	2b30      	cmp	r3, #48	@ 0x30
 80081de:	d003      	beq.n	80081e8 <HAL_I2S_Init+0x198>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	2bb0      	cmp	r3, #176	@ 0xb0
 80081e6:	d107      	bne.n	80081f8 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	69da      	ldr	r2, [r3, #28]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80081f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d161      	bne.n	80082c4 <HAL_I2S_Init+0x274>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a38      	ldr	r2, [pc, #224]	@ (80082e4 <HAL_I2S_Init+0x294>)
 8008204:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a37      	ldr	r2, [pc, #220]	@ (80082e8 <HAL_I2S_Init+0x298>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d101      	bne.n	8008214 <HAL_I2S_Init+0x1c4>
 8008210:	4b36      	ldr	r3, [pc, #216]	@ (80082ec <HAL_I2S_Init+0x29c>)
 8008212:	e001      	b.n	8008218 <HAL_I2S_Init+0x1c8>
 8008214:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6812      	ldr	r2, [r2, #0]
 800821e:	4932      	ldr	r1, [pc, #200]	@ (80082e8 <HAL_I2S_Init+0x298>)
 8008220:	428a      	cmp	r2, r1
 8008222:	d101      	bne.n	8008228 <HAL_I2S_Init+0x1d8>
 8008224:	4a31      	ldr	r2, [pc, #196]	@ (80082ec <HAL_I2S_Init+0x29c>)
 8008226:	e001      	b.n	800822c <HAL_I2S_Init+0x1dc>
 8008228:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800822c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8008230:	f023 030f 	bic.w	r3, r3, #15
 8008234:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a2b      	ldr	r2, [pc, #172]	@ (80082e8 <HAL_I2S_Init+0x298>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d101      	bne.n	8008244 <HAL_I2S_Init+0x1f4>
 8008240:	4b2a      	ldr	r3, [pc, #168]	@ (80082ec <HAL_I2S_Init+0x29c>)
 8008242:	e001      	b.n	8008248 <HAL_I2S_Init+0x1f8>
 8008244:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008248:	2202      	movs	r2, #2
 800824a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a25      	ldr	r2, [pc, #148]	@ (80082e8 <HAL_I2S_Init+0x298>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d101      	bne.n	800825a <HAL_I2S_Init+0x20a>
 8008256:	4b25      	ldr	r3, [pc, #148]	@ (80082ec <HAL_I2S_Init+0x29c>)
 8008258:	e001      	b.n	800825e <HAL_I2S_Init+0x20e>
 800825a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800826a:	d003      	beq.n	8008274 <HAL_I2S_Init+0x224>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d103      	bne.n	800827c <HAL_I2S_Init+0x22c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	e001      	b.n	8008280 <HAL_I2S_Init+0x230>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800827c:	2300      	movs	r3, #0
 800827e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800828a:	4313      	orrs	r3, r2
 800828c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008294:	4313      	orrs	r3, r2
 8008296:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800829e:	4313      	orrs	r3, r2
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	897b      	ldrh	r3, [r7, #10]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80082ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a0d      	ldr	r2, [pc, #52]	@ (80082e8 <HAL_I2S_Init+0x298>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d101      	bne.n	80082bc <HAL_I2S_Init+0x26c>
 80082b8:	4b0c      	ldr	r3, [pc, #48]	@ (80082ec <HAL_I2S_Init+0x29c>)
 80082ba:	e001      	b.n	80082c0 <HAL_I2S_Init+0x270>
 80082bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80082c0:	897a      	ldrh	r2, [r7, #10]
 80082c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	080083ff 	.word	0x080083ff
 80082e0:	cccccccd 	.word	0xcccccccd
 80082e4:	08008515 	.word	0x08008515
 80082e8:	40003800 	.word	0x40003800
 80082ec:	40003400 	.word	0x40003400

080082f0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	4798      	blx	r3
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008350:	881a      	ldrh	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835c:	1c9a      	adds	r2, r3, #2
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008366:	b29b      	uxth	r3, r3
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008374:	b29b      	uxth	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10e      	bne.n	8008398 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008388:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff ffb8 	bl	8008308 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b2:	b292      	uxth	r2, r2
 80083b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ba:	1c9a      	adds	r2, r3, #2
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3b01      	subs	r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10e      	bne.n	80083f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80083e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f7ff ff93 	bl	800831c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80083f6:	bf00      	nop
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b086      	sub	sp, #24
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b04      	cmp	r3, #4
 8008418:	d13a      	bne.n	8008490 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b01      	cmp	r3, #1
 8008422:	d109      	bne.n	8008438 <I2S_IRQHandler+0x3a>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800842e:	2b40      	cmp	r3, #64	@ 0x40
 8008430:	d102      	bne.n	8008438 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7ff ffb4 	bl	80083a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843e:	2b40      	cmp	r3, #64	@ 0x40
 8008440:	d126      	bne.n	8008490 <I2S_IRQHandler+0x92>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b20      	cmp	r3, #32
 800844e:	d11f      	bne.n	8008490 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800845e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008460:	2300      	movs	r3, #0
 8008462:	613b      	str	r3, [r7, #16]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	613b      	str	r3, [r7, #16]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	613b      	str	r3, [r7, #16]
 8008474:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008482:	f043 0202 	orr.w	r2, r3, #2
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff ff50 	bl	8008330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b03      	cmp	r3, #3
 800849a:	d136      	bne.n	800850a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d109      	bne.n	80084ba <I2S_IRQHandler+0xbc>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084b0:	2b80      	cmp	r3, #128	@ 0x80
 80084b2:	d102      	bne.n	80084ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff ff45 	bl	8008344 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d122      	bne.n	800850a <I2S_IRQHandler+0x10c>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b20      	cmp	r3, #32
 80084d0:	d11b      	bne.n	800850a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80084e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80084e2:	2300      	movs	r3, #0
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084fc:	f043 0204 	orr.w	r2, r3, #4
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff ff13 	bl	8008330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800850a:	bf00      	nop
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b088      	sub	sp, #32
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a92      	ldr	r2, [pc, #584]	@ (8008774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d101      	bne.n	8008532 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800852e:	4b92      	ldr	r3, [pc, #584]	@ (8008778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008530:	e001      	b.n	8008536 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8008532:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a8b      	ldr	r2, [pc, #556]	@ (8008774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d101      	bne.n	8008550 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800854c:	4b8a      	ldr	r3, [pc, #552]	@ (8008778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800854e:	e001      	b.n	8008554 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8008550:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008560:	d004      	beq.n	800856c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f040 8099 	bne.w	800869e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	2b02      	cmp	r3, #2
 8008574:	d107      	bne.n	8008586 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f925 	bl	80087d0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b01      	cmp	r3, #1
 800858e:	d107      	bne.n	80085a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008596:	2b00      	cmp	r3, #0
 8008598:	d002      	beq.n	80085a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f9c8 	bl	8008930 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a6:	2b40      	cmp	r3, #64	@ 0x40
 80085a8:	d13a      	bne.n	8008620 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f003 0320 	and.w	r3, r3, #32
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d035      	beq.n	8008620 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a6e      	ldr	r2, [pc, #440]	@ (8008774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d101      	bne.n	80085c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80085be:	4b6e      	ldr	r3, [pc, #440]	@ (8008778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80085c0:	e001      	b.n	80085c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80085c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4969      	ldr	r1, [pc, #420]	@ (8008774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80085ce:	428b      	cmp	r3, r1
 80085d0:	d101      	bne.n	80085d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80085d2:	4b69      	ldr	r3, [pc, #420]	@ (8008778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80085d4:	e001      	b.n	80085da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80085d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80085da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80085de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80085ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008612:	f043 0202 	orr.w	r2, r3, #2
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7ff fe88 	bl	8008330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	f003 0308 	and.w	r3, r3, #8
 8008626:	2b08      	cmp	r3, #8
 8008628:	f040 80c3 	bne.w	80087b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 80bd 	beq.w	80087b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008646:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a49      	ldr	r2, [pc, #292]	@ (8008774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d101      	bne.n	8008656 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8008652:	4b49      	ldr	r3, [pc, #292]	@ (8008778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008654:	e001      	b.n	800865a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8008656:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4944      	ldr	r1, [pc, #272]	@ (8008774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008662:	428b      	cmp	r3, r1
 8008664:	d101      	bne.n	800866a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8008666:	4b44      	ldr	r3, [pc, #272]	@ (8008778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008668:	e001      	b.n	800866e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800866a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800866e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008672:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008674:	2300      	movs	r3, #0
 8008676:	60bb      	str	r3, [r7, #8]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	60bb      	str	r3, [r7, #8]
 8008680:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800868e:	f043 0204 	orr.w	r2, r3, #4
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff fe4a 	bl	8008330 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800869c:	e089      	b.n	80087b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d107      	bne.n	80086b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f8be 	bl	8008834 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d107      	bne.n	80086d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f8fd 	bl	80088cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d8:	2b40      	cmp	r3, #64	@ 0x40
 80086da:	d12f      	bne.n	800873c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f003 0320 	and.w	r3, r3, #32
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d02a      	beq.n	800873c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80086f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d101      	bne.n	8008704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008700:	4b1d      	ldr	r3, [pc, #116]	@ (8008778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008702:	e001      	b.n	8008708 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008704:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4919      	ldr	r1, [pc, #100]	@ (8008774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008710:	428b      	cmp	r3, r1
 8008712:	d101      	bne.n	8008718 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008714:	4b18      	ldr	r3, [pc, #96]	@ (8008778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008716:	e001      	b.n	800871c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008718:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800871c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008720:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800872e:	f043 0202 	orr.w	r2, r3, #2
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff fdfa 	bl	8008330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	f003 0308 	and.w	r3, r3, #8
 8008742:	2b08      	cmp	r3, #8
 8008744:	d136      	bne.n	80087b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f003 0320 	and.w	r3, r3, #32
 800874c:	2b00      	cmp	r3, #0
 800874e:	d031      	beq.n	80087b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a07      	ldr	r2, [pc, #28]	@ (8008774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d101      	bne.n	800875e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800875a:	4b07      	ldr	r3, [pc, #28]	@ (8008778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800875c:	e001      	b.n	8008762 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800875e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4902      	ldr	r1, [pc, #8]	@ (8008774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800876a:	428b      	cmp	r3, r1
 800876c:	d106      	bne.n	800877c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800876e:	4b02      	ldr	r3, [pc, #8]	@ (8008778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008770:	e006      	b.n	8008780 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8008772:	bf00      	nop
 8008774:	40003800 	.word	0x40003800
 8008778:	40003400 	.word	0x40003400
 800877c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008780:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008784:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008794:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a2:	f043 0204 	orr.w	r2, r3, #4
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff fdc0 	bl	8008330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80087b0:	e000      	b.n	80087b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80087b2:	bf00      	nop
}
 80087b4:	bf00      	nop
 80087b6:	3720      	adds	r7, #32
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087dc:	1c99      	adds	r1, r3, #2
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6251      	str	r1, [r2, #36]	@ 0x24
 80087e2:	881a      	ldrh	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d113      	bne.n	800882a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008810:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008816:	b29b      	uxth	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff ffc9 	bl	80087bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008840:	1c99      	adds	r1, r3, #2
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	6251      	str	r1, [r2, #36]	@ 0x24
 8008846:	8819      	ldrh	r1, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a1d      	ldr	r2, [pc, #116]	@ (80088c4 <I2SEx_TxISR_I2SExt+0x90>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d101      	bne.n	8008856 <I2SEx_TxISR_I2SExt+0x22>
 8008852:	4b1d      	ldr	r3, [pc, #116]	@ (80088c8 <I2SEx_TxISR_I2SExt+0x94>)
 8008854:	e001      	b.n	800885a <I2SEx_TxISR_I2SExt+0x26>
 8008856:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800885a:	460a      	mov	r2, r1
 800885c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008862:	b29b      	uxth	r3, r3
 8008864:	3b01      	subs	r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008870:	b29b      	uxth	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d121      	bne.n	80088ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a12      	ldr	r2, [pc, #72]	@ (80088c4 <I2SEx_TxISR_I2SExt+0x90>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d101      	bne.n	8008884 <I2SEx_TxISR_I2SExt+0x50>
 8008880:	4b11      	ldr	r3, [pc, #68]	@ (80088c8 <I2SEx_TxISR_I2SExt+0x94>)
 8008882:	e001      	b.n	8008888 <I2SEx_TxISR_I2SExt+0x54>
 8008884:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	490d      	ldr	r1, [pc, #52]	@ (80088c4 <I2SEx_TxISR_I2SExt+0x90>)
 8008890:	428b      	cmp	r3, r1
 8008892:	d101      	bne.n	8008898 <I2SEx_TxISR_I2SExt+0x64>
 8008894:	4b0c      	ldr	r3, [pc, #48]	@ (80088c8 <I2SEx_TxISR_I2SExt+0x94>)
 8008896:	e001      	b.n	800889c <I2SEx_TxISR_I2SExt+0x68>
 8008898:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800889c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80088a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d106      	bne.n	80088ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff ff81 	bl	80087bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80088ba:	bf00      	nop
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	40003800 	.word	0x40003800
 80088c8:	40003400 	.word	0x40003400

080088cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68d8      	ldr	r0, [r3, #12]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088de:	1c99      	adds	r1, r3, #2
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80088e4:	b282      	uxth	r2, r0
 80088e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	3b01      	subs	r3, #1
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d113      	bne.n	8008928 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800890e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008914:	b29b      	uxth	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d106      	bne.n	8008928 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff ff4a 	bl	80087bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a20      	ldr	r2, [pc, #128]	@ (80089c0 <I2SEx_RxISR_I2SExt+0x90>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d101      	bne.n	8008946 <I2SEx_RxISR_I2SExt+0x16>
 8008942:	4b20      	ldr	r3, [pc, #128]	@ (80089c4 <I2SEx_RxISR_I2SExt+0x94>)
 8008944:	e001      	b.n	800894a <I2SEx_RxISR_I2SExt+0x1a>
 8008946:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800894a:	68d8      	ldr	r0, [r3, #12]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008950:	1c99      	adds	r1, r3, #2
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8008956:	b282      	uxth	r2, r0
 8008958:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800895e:	b29b      	uxth	r3, r3
 8008960:	3b01      	subs	r3, #1
 8008962:	b29a      	uxth	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d121      	bne.n	80089b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a12      	ldr	r2, [pc, #72]	@ (80089c0 <I2SEx_RxISR_I2SExt+0x90>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d101      	bne.n	8008980 <I2SEx_RxISR_I2SExt+0x50>
 800897c:	4b11      	ldr	r3, [pc, #68]	@ (80089c4 <I2SEx_RxISR_I2SExt+0x94>)
 800897e:	e001      	b.n	8008984 <I2SEx_RxISR_I2SExt+0x54>
 8008980:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	490d      	ldr	r1, [pc, #52]	@ (80089c0 <I2SEx_RxISR_I2SExt+0x90>)
 800898c:	428b      	cmp	r3, r1
 800898e:	d101      	bne.n	8008994 <I2SEx_RxISR_I2SExt+0x64>
 8008990:	4b0c      	ldr	r3, [pc, #48]	@ (80089c4 <I2SEx_RxISR_I2SExt+0x94>)
 8008992:	e001      	b.n	8008998 <I2SEx_RxISR_I2SExt+0x68>
 8008994:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008998:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800899c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d106      	bne.n	80089b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff ff03 	bl	80087bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	40003800 	.word	0x40003800
 80089c4:	40003400 	.word	0x40003400

080089c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e0bf      	b.n	8008b5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d106      	bne.n	80089f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7fa fba6 	bl	8003140 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	699a      	ldr	r2, [r3, #24]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008a0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6999      	ldr	r1, [r3, #24]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008a20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6899      	ldr	r1, [r3, #8]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8008b64 <HAL_LTDC_Init+0x19c>)
 8008a3c:	400b      	ands	r3, r1
 8008a3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	041b      	lsls	r3, r3, #16
 8008a46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6899      	ldr	r1, [r3, #8]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	431a      	orrs	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68d9      	ldr	r1, [r3, #12]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	4b3e      	ldr	r3, [pc, #248]	@ (8008b64 <HAL_LTDC_Init+0x19c>)
 8008a6a:	400b      	ands	r3, r1
 8008a6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	041b      	lsls	r3, r3, #16
 8008a74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68d9      	ldr	r1, [r3, #12]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a1a      	ldr	r2, [r3, #32]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	431a      	orrs	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6919      	ldr	r1, [r3, #16]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	4b33      	ldr	r3, [pc, #204]	@ (8008b64 <HAL_LTDC_Init+0x19c>)
 8008a98:	400b      	ands	r3, r1
 8008a9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa0:	041b      	lsls	r3, r3, #16
 8008aa2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6919      	ldr	r1, [r3, #16]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6959      	ldr	r1, [r3, #20]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	4b27      	ldr	r3, [pc, #156]	@ (8008b64 <HAL_LTDC_Init+0x19c>)
 8008ac6:	400b      	ands	r3, r1
 8008ac8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ace:	041b      	lsls	r3, r3, #16
 8008ad0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6959      	ldr	r1, [r3, #20]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008aee:	021b      	lsls	r3, r3, #8
 8008af0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008af8:	041b      	lsls	r3, r3, #16
 8008afa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0206 	orr.w	r2, r2, #6
 8008b36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699a      	ldr	r2, [r3, #24]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0201 	orr.w	r2, r2, #1
 8008b46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	f000f800 	.word	0xf000f800

08008b68 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f003 0304 	and.w	r3, r3, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d023      	beq.n	8008bd2 <HAL_LTDC_IRQHandler+0x6a>
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d01e      	beq.n	8008bd2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 0204 	bic.w	r2, r2, #4
 8008ba2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2204      	movs	r2, #4
 8008baa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008bb2:	f043 0201 	orr.w	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2204      	movs	r2, #4
 8008bc0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f86f 	bl	8008cb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d023      	beq.n	8008c24 <HAL_LTDC_IRQHandler+0xbc>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d01e      	beq.n	8008c24 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 0202 	bic.w	r2, r2, #2
 8008bf4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c04:	f043 0202 	orr.w	r2, r3, #2
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2204      	movs	r2, #4
 8008c12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f846 	bl	8008cb0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d01b      	beq.n	8008c66 <HAL_LTDC_IRQHandler+0xfe>
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d016      	beq.n	8008c66 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 0201 	bic.w	r2, r2, #1
 8008c46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f82f 	bl	8008cc4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f003 0308 	and.w	r3, r3, #8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d01b      	beq.n	8008ca8 <HAL_LTDC_IRQHandler+0x140>
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d016      	beq.n	8008ca8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0208 	bic.w	r2, r2, #8
 8008c88:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2208      	movs	r2, #8
 8008c90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f818 	bl	8008cd8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008ca8:	bf00      	nop
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008cec:	b5b0      	push	{r4, r5, r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d101      	bne.n	8008d06 <HAL_LTDC_ConfigLayer+0x1a>
 8008d02:	2302      	movs	r3, #2
 8008d04:	e02c      	b.n	8008d60 <HAL_LTDC_ConfigLayer+0x74>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2202      	movs	r2, #2
 8008d12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2134      	movs	r1, #52	@ 0x34
 8008d1c:	fb01 f303 	mul.w	r3, r1, r3
 8008d20:	4413      	add	r3, r2
 8008d22:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	4614      	mov	r4, r2
 8008d2a:	461d      	mov	r5, r3
 8008d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f811 	bl	8008d68 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bdb0      	pop	{r4, r5, r7, pc}

08008d68 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b089      	sub	sp, #36	@ 0x24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	0c1b      	lsrs	r3, r3, #16
 8008d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d84:	4413      	add	r3, r2
 8008d86:	041b      	lsls	r3, r3, #16
 8008d88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	01db      	lsls	r3, r3, #7
 8008d94:	4413      	add	r3, r2
 8008d96:	3384      	adds	r3, #132	@ 0x84
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	6812      	ldr	r2, [r2, #0]
 8008d9e:	4611      	mov	r1, r2
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	01d2      	lsls	r2, r2, #7
 8008da4:	440a      	add	r2, r1
 8008da6:	3284      	adds	r2, #132	@ 0x84
 8008da8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008dac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	0c1b      	lsrs	r3, r3, #16
 8008dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008dbe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008dc0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	01db      	lsls	r3, r3, #7
 8008dcc:	440b      	add	r3, r1
 8008dce:	3384      	adds	r3, #132	@ 0x84
 8008dd0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008dd6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	68da      	ldr	r2, [r3, #12]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008de6:	4413      	add	r3, r2
 8008de8:	041b      	lsls	r3, r3, #16
 8008dea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	01db      	lsls	r3, r3, #7
 8008df6:	4413      	add	r3, r2
 8008df8:	3384      	adds	r3, #132	@ 0x84
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	6812      	ldr	r2, [r2, #0]
 8008e00:	4611      	mov	r1, r2
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	01d2      	lsls	r2, r2, #7
 8008e06:	440a      	add	r2, r1
 8008e08:	3284      	adds	r2, #132	@ 0x84
 8008e0a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008e0e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	689a      	ldr	r2, [r3, #8]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e1e:	4413      	add	r3, r2
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4619      	mov	r1, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	01db      	lsls	r3, r3, #7
 8008e2c:	440b      	add	r3, r1
 8008e2e:	3384      	adds	r3, #132	@ 0x84
 8008e30:	4619      	mov	r1, r3
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	01db      	lsls	r3, r3, #7
 8008e42:	4413      	add	r3, r2
 8008e44:	3384      	adds	r3, #132	@ 0x84
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	6812      	ldr	r2, [r2, #0]
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	01d2      	lsls	r2, r2, #7
 8008e52:	440a      	add	r2, r1
 8008e54:	3284      	adds	r2, #132	@ 0x84
 8008e56:	f023 0307 	bic.w	r3, r3, #7
 8008e5a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	461a      	mov	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	01db      	lsls	r3, r3, #7
 8008e66:	4413      	add	r3, r2
 8008e68:	3384      	adds	r3, #132	@ 0x84
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008e78:	021b      	lsls	r3, r3, #8
 8008e7a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008e82:	041b      	lsls	r3, r3, #16
 8008e84:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	061b      	lsls	r3, r3, #24
 8008e8c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	01db      	lsls	r3, r3, #7
 8008e98:	4413      	add	r3, r2
 8008e9a:	3384      	adds	r3, #132	@ 0x84
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	01db      	lsls	r3, r3, #7
 8008ea8:	4413      	add	r3, r2
 8008eaa:	3384      	adds	r3, #132	@ 0x84
 8008eac:	461a      	mov	r2, r3
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008eb8:	461a      	mov	r2, r3
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	431a      	orrs	r2, r3
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	01db      	lsls	r3, r3, #7
 8008ecc:	440b      	add	r3, r1
 8008ece:	3384      	adds	r3, #132	@ 0x84
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	461a      	mov	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	01db      	lsls	r3, r3, #7
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3384      	adds	r3, #132	@ 0x84
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	6812      	ldr	r2, [r2, #0]
 8008eec:	4611      	mov	r1, r2
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	01d2      	lsls	r2, r2, #7
 8008ef2:	440a      	add	r2, r1
 8008ef4:	3284      	adds	r2, #132	@ 0x84
 8008ef6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008efa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	01db      	lsls	r3, r3, #7
 8008f06:	4413      	add	r3, r2
 8008f08:	3384      	adds	r3, #132	@ 0x84
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	461a      	mov	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	01db      	lsls	r3, r3, #7
 8008f1c:	4413      	add	r3, r2
 8008f1e:	3384      	adds	r3, #132	@ 0x84
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	6812      	ldr	r2, [r2, #0]
 8008f26:	4611      	mov	r1, r2
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	01d2      	lsls	r2, r2, #7
 8008f2c:	440a      	add	r2, r1
 8008f2e:	3284      	adds	r2, #132	@ 0x84
 8008f30:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008f34:	f023 0307 	bic.w	r3, r3, #7
 8008f38:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	69da      	ldr	r2, [r3, #28]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	68f9      	ldr	r1, [r7, #12]
 8008f44:	6809      	ldr	r1, [r1, #0]
 8008f46:	4608      	mov	r0, r1
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	01c9      	lsls	r1, r1, #7
 8008f4c:	4401      	add	r1, r0
 8008f4e:	3184      	adds	r1, #132	@ 0x84
 8008f50:	4313      	orrs	r3, r2
 8008f52:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	01db      	lsls	r3, r3, #7
 8008f5e:	4413      	add	r3, r2
 8008f60:	3384      	adds	r3, #132	@ 0x84
 8008f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	01db      	lsls	r3, r3, #7
 8008f6e:	4413      	add	r3, r2
 8008f70:	3384      	adds	r3, #132	@ 0x84
 8008f72:	461a      	mov	r2, r3
 8008f74:	2300      	movs	r3, #0
 8008f76:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	01db      	lsls	r3, r3, #7
 8008f82:	4413      	add	r3, r2
 8008f84:	3384      	adds	r3, #132	@ 0x84
 8008f86:	461a      	mov	r2, r3
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d102      	bne.n	8008f9c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008f96:	2304      	movs	r3, #4
 8008f98:	61fb      	str	r3, [r7, #28]
 8008f9a:	e01b      	b.n	8008fd4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d102      	bne.n	8008faa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	61fb      	str	r3, [r7, #28]
 8008fa8:	e014      	b.n	8008fd4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d00b      	beq.n	8008fca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d007      	beq.n	8008fca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d003      	beq.n	8008fca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008fc6:	2b07      	cmp	r3, #7
 8008fc8:	d102      	bne.n	8008fd0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8008fca:	2302      	movs	r3, #2
 8008fcc:	61fb      	str	r3, [r7, #28]
 8008fce:	e001      	b.n	8008fd4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	01db      	lsls	r3, r3, #7
 8008fde:	4413      	add	r3, r2
 8008fe0:	3384      	adds	r3, #132	@ 0x84
 8008fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	6812      	ldr	r2, [r2, #0]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	01d2      	lsls	r2, r2, #7
 8008fee:	440a      	add	r2, r1
 8008ff0:	3284      	adds	r2, #132	@ 0x84
 8008ff2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffc:	69fa      	ldr	r2, [r7, #28]
 8008ffe:	fb02 f303 	mul.w	r3, r2, r3
 8009002:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	6859      	ldr	r1, [r3, #4]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	1acb      	subs	r3, r1, r3
 800900e:	69f9      	ldr	r1, [r7, #28]
 8009010:	fb01 f303 	mul.w	r3, r1, r3
 8009014:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009016:	68f9      	ldr	r1, [r7, #12]
 8009018:	6809      	ldr	r1, [r1, #0]
 800901a:	4608      	mov	r0, r1
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	01c9      	lsls	r1, r1, #7
 8009020:	4401      	add	r1, r0
 8009022:	3184      	adds	r1, #132	@ 0x84
 8009024:	4313      	orrs	r3, r2
 8009026:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	461a      	mov	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	01db      	lsls	r3, r3, #7
 8009032:	4413      	add	r3, r2
 8009034:	3384      	adds	r3, #132	@ 0x84
 8009036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	6812      	ldr	r2, [r2, #0]
 800903c:	4611      	mov	r1, r2
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	01d2      	lsls	r2, r2, #7
 8009042:	440a      	add	r2, r1
 8009044:	3284      	adds	r2, #132	@ 0x84
 8009046:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800904a:	f023 0307 	bic.w	r3, r3, #7
 800904e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	01db      	lsls	r3, r3, #7
 800905a:	4413      	add	r3, r2
 800905c:	3384      	adds	r3, #132	@ 0x84
 800905e:	461a      	mov	r2, r3
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009064:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	461a      	mov	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	01db      	lsls	r3, r3, #7
 8009070:	4413      	add	r3, r2
 8009072:	3384      	adds	r3, #132	@ 0x84
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	6812      	ldr	r2, [r2, #0]
 800907a:	4611      	mov	r1, r2
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	01d2      	lsls	r2, r2, #7
 8009080:	440a      	add	r2, r1
 8009082:	3284      	adds	r2, #132	@ 0x84
 8009084:	f043 0301 	orr.w	r3, r3, #1
 8009088:	6013      	str	r3, [r2, #0]
}
 800908a:	bf00      	nop
 800908c:	3724      	adds	r7, #36	@ 0x24
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
	...

08009098 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800909e:	2300      	movs	r3, #0
 80090a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80090a2:	2300      	movs	r3, #0
 80090a4:	603b      	str	r3, [r7, #0]
 80090a6:	4b20      	ldr	r3, [pc, #128]	@ (8009128 <HAL_PWREx_EnableOverDrive+0x90>)
 80090a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009128 <HAL_PWREx_EnableOverDrive+0x90>)
 80090ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80090b2:	4b1d      	ldr	r3, [pc, #116]	@ (8009128 <HAL_PWREx_EnableOverDrive+0x90>)
 80090b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80090be:	4b1b      	ldr	r3, [pc, #108]	@ (800912c <HAL_PWREx_EnableOverDrive+0x94>)
 80090c0:	2201      	movs	r2, #1
 80090c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80090c4:	f7fa fe3e 	bl	8003d44 <HAL_GetTick>
 80090c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80090ca:	e009      	b.n	80090e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80090cc:	f7fa fe3a 	bl	8003d44 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090da:	d901      	bls.n	80090e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e01f      	b.n	8009120 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80090e0:	4b13      	ldr	r3, [pc, #76]	@ (8009130 <HAL_PWREx_EnableOverDrive+0x98>)
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ec:	d1ee      	bne.n	80090cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80090ee:	4b11      	ldr	r3, [pc, #68]	@ (8009134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80090f0:	2201      	movs	r2, #1
 80090f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80090f4:	f7fa fe26 	bl	8003d44 <HAL_GetTick>
 80090f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80090fa:	e009      	b.n	8009110 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80090fc:	f7fa fe22 	bl	8003d44 <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800910a:	d901      	bls.n	8009110 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e007      	b.n	8009120 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009110:	4b07      	ldr	r3, [pc, #28]	@ (8009130 <HAL_PWREx_EnableOverDrive+0x98>)
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800911c:	d1ee      	bne.n	80090fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	40023800 	.word	0x40023800
 800912c:	420e0040 	.word	0x420e0040
 8009130:	40007000 	.word	0x40007000
 8009134:	420e0044 	.word	0x420e0044

08009138 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af02      	add	r7, sp, #8
 800913e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009140:	f7fa fe00 	bl	8003d44 <HAL_GetTick>
 8009144:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e069      	b.n	8009224 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10b      	bne.n	8009174 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7fa f813 	bl	8003190 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800916a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f85e 	bl	8009230 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	3b01      	subs	r3, #1
 8009184:	021a      	lsls	r2, r3, #8
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	2120      	movs	r1, #32
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f856 	bl	800924c <QSPI_WaitFlagStateUntilTimeout>
 80091a0:	4603      	mov	r3, r0
 80091a2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80091a4:	7afb      	ldrb	r3, [r7, #11]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d137      	bne.n	800921a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80091b4:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	6852      	ldr	r2, [r2, #4]
 80091bc:	0611      	lsls	r1, r2, #24
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	68d2      	ldr	r2, [r2, #12]
 80091c2:	4311      	orrs	r1, r2
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	69d2      	ldr	r2, [r2, #28]
 80091c8:	4311      	orrs	r1, r2
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	6a12      	ldr	r2, [r2, #32]
 80091ce:	4311      	orrs	r1, r2
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	6812      	ldr	r2, [r2, #0]
 80091d4:	430b      	orrs	r3, r1
 80091d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	4b13      	ldr	r3, [pc, #76]	@ (800922c <HAL_QSPI_Init+0xf4>)
 80091e0:	4013      	ands	r3, r2
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6912      	ldr	r2, [r2, #16]
 80091e6:	0411      	lsls	r1, r2, #16
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	6952      	ldr	r2, [r2, #20]
 80091ec:	4311      	orrs	r1, r2
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	6992      	ldr	r2, [r2, #24]
 80091f2:	4311      	orrs	r1, r2
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6812      	ldr	r2, [r2, #0]
 80091f8:	430b      	orrs	r3, r1
 80091fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8009222:	7afb      	ldrb	r3, [r7, #11]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	ffe0f8fe 	.word	0xffe0f8fe

08009230 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	603b      	str	r3, [r7, #0]
 8009258:	4613      	mov	r3, r2
 800925a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800925c:	e01a      	b.n	8009294 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009264:	d016      	beq.n	8009294 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009266:	f7fa fd6d 	bl	8003d44 <HAL_GetTick>
 800926a:	4602      	mov	r2, r0
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	429a      	cmp	r2, r3
 8009274:	d302      	bcc.n	800927c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10b      	bne.n	8009294 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2204      	movs	r2, #4
 8009280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009288:	f043 0201 	orr.w	r2, r3, #1
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e00e      	b.n	80092b2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	689a      	ldr	r2, [r3, #8]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	4013      	ands	r3, r2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	bf14      	ite	ne
 80092a2:	2301      	movne	r3, #1
 80092a4:	2300      	moveq	r3, #0
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d1d6      	bne.n	800925e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e0cc      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80092d0:	4b68      	ldr	r3, [pc, #416]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d90c      	bls.n	80092f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092de:	4b65      	ldr	r3, [pc, #404]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	b2d2      	uxtb	r2, r2
 80092e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092e6:	4b63      	ldr	r3, [pc, #396]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d001      	beq.n	80092f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e0b8      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d020      	beq.n	8009346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009310:	4b59      	ldr	r3, [pc, #356]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	4a58      	ldr	r2, [pc, #352]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009316:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800931a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0308 	and.w	r3, r3, #8
 8009324:	2b00      	cmp	r3, #0
 8009326:	d005      	beq.n	8009334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009328:	4b53      	ldr	r3, [pc, #332]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	4a52      	ldr	r2, [pc, #328]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800932e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009334:	4b50      	ldr	r3, [pc, #320]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	494d      	ldr	r1, [pc, #308]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009342:	4313      	orrs	r3, r2
 8009344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	d044      	beq.n	80093dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d107      	bne.n	800936a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800935a:	4b47      	ldr	r3, [pc, #284]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d119      	bne.n	800939a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e07f      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	2b02      	cmp	r3, #2
 8009370:	d003      	beq.n	800937a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009376:	2b03      	cmp	r3, #3
 8009378:	d107      	bne.n	800938a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800937a:	4b3f      	ldr	r3, [pc, #252]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d109      	bne.n	800939a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e06f      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800938a:	4b3b      	ldr	r3, [pc, #236]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e067      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800939a:	4b37      	ldr	r3, [pc, #220]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f023 0203 	bic.w	r2, r3, #3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	4934      	ldr	r1, [pc, #208]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093ac:	f7fa fcca 	bl	8003d44 <HAL_GetTick>
 80093b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093b2:	e00a      	b.n	80093ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093b4:	f7fa fcc6 	bl	8003d44 <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d901      	bls.n	80093ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e04f      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ca:	4b2b      	ldr	r3, [pc, #172]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f003 020c 	and.w	r2, r3, #12
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	429a      	cmp	r2, r3
 80093da:	d1eb      	bne.n	80093b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80093dc:	4b25      	ldr	r3, [pc, #148]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 030f 	and.w	r3, r3, #15
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d20c      	bcs.n	8009404 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ea:	4b22      	ldr	r3, [pc, #136]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	b2d2      	uxtb	r2, r2
 80093f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093f2:	4b20      	ldr	r3, [pc, #128]	@ (8009474 <HAL_RCC_ClockConfig+0x1b8>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 030f 	and.w	r3, r3, #15
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d001      	beq.n	8009404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e032      	b.n	800946a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	2b00      	cmp	r3, #0
 800940e:	d008      	beq.n	8009422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009410:	4b19      	ldr	r3, [pc, #100]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	4916      	ldr	r1, [pc, #88]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800941e:	4313      	orrs	r3, r2
 8009420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0308 	and.w	r3, r3, #8
 800942a:	2b00      	cmp	r3, #0
 800942c:	d009      	beq.n	8009442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800942e:	4b12      	ldr	r3, [pc, #72]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	490e      	ldr	r1, [pc, #56]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800943e:	4313      	orrs	r3, r2
 8009440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009442:	f000 f821 	bl	8009488 <HAL_RCC_GetSysClockFreq>
 8009446:	4602      	mov	r2, r0
 8009448:	4b0b      	ldr	r3, [pc, #44]	@ (8009478 <HAL_RCC_ClockConfig+0x1bc>)
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	091b      	lsrs	r3, r3, #4
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	490a      	ldr	r1, [pc, #40]	@ (800947c <HAL_RCC_ClockConfig+0x1c0>)
 8009454:	5ccb      	ldrb	r3, [r1, r3]
 8009456:	fa22 f303 	lsr.w	r3, r2, r3
 800945a:	4a09      	ldr	r2, [pc, #36]	@ (8009480 <HAL_RCC_ClockConfig+0x1c4>)
 800945c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800945e:	4b09      	ldr	r3, [pc, #36]	@ (8009484 <HAL_RCC_ClockConfig+0x1c8>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4618      	mov	r0, r3
 8009464:	f7fa fa1c 	bl	80038a0 <HAL_InitTick>

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	40023c00 	.word	0x40023c00
 8009478:	40023800 	.word	0x40023800
 800947c:	08016dc4 	.word	0x08016dc4
 8009480:	20000000 	.word	0x20000000
 8009484:	20000004 	.word	0x20000004

08009488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800948c:	b094      	sub	sp, #80	@ 0x50
 800948e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009490:	2300      	movs	r3, #0
 8009492:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8009498:	2300      	movs	r3, #0
 800949a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094a0:	4b79      	ldr	r3, [pc, #484]	@ (8009688 <HAL_RCC_GetSysClockFreq+0x200>)
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f003 030c 	and.w	r3, r3, #12
 80094a8:	2b08      	cmp	r3, #8
 80094aa:	d00d      	beq.n	80094c8 <HAL_RCC_GetSysClockFreq+0x40>
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	f200 80e1 	bhi.w	8009674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <HAL_RCC_GetSysClockFreq+0x34>
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d003      	beq.n	80094c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80094ba:	e0db      	b.n	8009674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094bc:	4b73      	ldr	r3, [pc, #460]	@ (800968c <HAL_RCC_GetSysClockFreq+0x204>)
 80094be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80094c0:	e0db      	b.n	800967a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80094c2:	4b73      	ldr	r3, [pc, #460]	@ (8009690 <HAL_RCC_GetSysClockFreq+0x208>)
 80094c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80094c6:	e0d8      	b.n	800967a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094c8:	4b6f      	ldr	r3, [pc, #444]	@ (8009688 <HAL_RCC_GetSysClockFreq+0x200>)
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094d2:	4b6d      	ldr	r3, [pc, #436]	@ (8009688 <HAL_RCC_GetSysClockFreq+0x200>)
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d063      	beq.n	80095a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094de:	4b6a      	ldr	r3, [pc, #424]	@ (8009688 <HAL_RCC_GetSysClockFreq+0x200>)
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	099b      	lsrs	r3, r3, #6
 80094e4:	2200      	movs	r2, #0
 80094e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80094ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80094f2:	2300      	movs	r3, #0
 80094f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80094fa:	4622      	mov	r2, r4
 80094fc:	462b      	mov	r3, r5
 80094fe:	f04f 0000 	mov.w	r0, #0
 8009502:	f04f 0100 	mov.w	r1, #0
 8009506:	0159      	lsls	r1, r3, #5
 8009508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800950c:	0150      	lsls	r0, r2, #5
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4621      	mov	r1, r4
 8009514:	1a51      	subs	r1, r2, r1
 8009516:	6139      	str	r1, [r7, #16]
 8009518:	4629      	mov	r1, r5
 800951a:	eb63 0301 	sbc.w	r3, r3, r1
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	f04f 0200 	mov.w	r2, #0
 8009524:	f04f 0300 	mov.w	r3, #0
 8009528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800952c:	4659      	mov	r1, fp
 800952e:	018b      	lsls	r3, r1, #6
 8009530:	4651      	mov	r1, sl
 8009532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009536:	4651      	mov	r1, sl
 8009538:	018a      	lsls	r2, r1, #6
 800953a:	4651      	mov	r1, sl
 800953c:	ebb2 0801 	subs.w	r8, r2, r1
 8009540:	4659      	mov	r1, fp
 8009542:	eb63 0901 	sbc.w	r9, r3, r1
 8009546:	f04f 0200 	mov.w	r2, #0
 800954a:	f04f 0300 	mov.w	r3, #0
 800954e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800955a:	4690      	mov	r8, r2
 800955c:	4699      	mov	r9, r3
 800955e:	4623      	mov	r3, r4
 8009560:	eb18 0303 	adds.w	r3, r8, r3
 8009564:	60bb      	str	r3, [r7, #8]
 8009566:	462b      	mov	r3, r5
 8009568:	eb49 0303 	adc.w	r3, r9, r3
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	f04f 0200 	mov.w	r2, #0
 8009572:	f04f 0300 	mov.w	r3, #0
 8009576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800957a:	4629      	mov	r1, r5
 800957c:	024b      	lsls	r3, r1, #9
 800957e:	4621      	mov	r1, r4
 8009580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009584:	4621      	mov	r1, r4
 8009586:	024a      	lsls	r2, r1, #9
 8009588:	4610      	mov	r0, r2
 800958a:	4619      	mov	r1, r3
 800958c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800958e:	2200      	movs	r2, #0
 8009590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009598:	f7f6 fe8a 	bl	80002b0 <__aeabi_uldivmod>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4613      	mov	r3, r2
 80095a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095a4:	e058      	b.n	8009658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095a6:	4b38      	ldr	r3, [pc, #224]	@ (8009688 <HAL_RCC_GetSysClockFreq+0x200>)
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	099b      	lsrs	r3, r3, #6
 80095ac:	2200      	movs	r2, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	4611      	mov	r1, r2
 80095b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80095b6:	623b      	str	r3, [r7, #32]
 80095b8:	2300      	movs	r3, #0
 80095ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80095bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80095c0:	4642      	mov	r2, r8
 80095c2:	464b      	mov	r3, r9
 80095c4:	f04f 0000 	mov.w	r0, #0
 80095c8:	f04f 0100 	mov.w	r1, #0
 80095cc:	0159      	lsls	r1, r3, #5
 80095ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80095d2:	0150      	lsls	r0, r2, #5
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	4641      	mov	r1, r8
 80095da:	ebb2 0a01 	subs.w	sl, r2, r1
 80095de:	4649      	mov	r1, r9
 80095e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80095e4:	f04f 0200 	mov.w	r2, #0
 80095e8:	f04f 0300 	mov.w	r3, #0
 80095ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80095f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80095f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80095f8:	ebb2 040a 	subs.w	r4, r2, sl
 80095fc:	eb63 050b 	sbc.w	r5, r3, fp
 8009600:	f04f 0200 	mov.w	r2, #0
 8009604:	f04f 0300 	mov.w	r3, #0
 8009608:	00eb      	lsls	r3, r5, #3
 800960a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800960e:	00e2      	lsls	r2, r4, #3
 8009610:	4614      	mov	r4, r2
 8009612:	461d      	mov	r5, r3
 8009614:	4643      	mov	r3, r8
 8009616:	18e3      	adds	r3, r4, r3
 8009618:	603b      	str	r3, [r7, #0]
 800961a:	464b      	mov	r3, r9
 800961c:	eb45 0303 	adc.w	r3, r5, r3
 8009620:	607b      	str	r3, [r7, #4]
 8009622:	f04f 0200 	mov.w	r2, #0
 8009626:	f04f 0300 	mov.w	r3, #0
 800962a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800962e:	4629      	mov	r1, r5
 8009630:	028b      	lsls	r3, r1, #10
 8009632:	4621      	mov	r1, r4
 8009634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009638:	4621      	mov	r1, r4
 800963a:	028a      	lsls	r2, r1, #10
 800963c:	4610      	mov	r0, r2
 800963e:	4619      	mov	r1, r3
 8009640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009642:	2200      	movs	r2, #0
 8009644:	61bb      	str	r3, [r7, #24]
 8009646:	61fa      	str	r2, [r7, #28]
 8009648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800964c:	f7f6 fe30 	bl	80002b0 <__aeabi_uldivmod>
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	4613      	mov	r3, r2
 8009656:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009658:	4b0b      	ldr	r3, [pc, #44]	@ (8009688 <HAL_RCC_GetSysClockFreq+0x200>)
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	0c1b      	lsrs	r3, r3, #16
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	3301      	adds	r3, #1
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009668:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800966a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800966c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009670:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009672:	e002      	b.n	800967a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009674:	4b05      	ldr	r3, [pc, #20]	@ (800968c <HAL_RCC_GetSysClockFreq+0x204>)
 8009676:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800967a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800967c:	4618      	mov	r0, r3
 800967e:	3750      	adds	r7, #80	@ 0x50
 8009680:	46bd      	mov	sp, r7
 8009682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009686:	bf00      	nop
 8009688:	40023800 	.word	0x40023800
 800968c:	00f42400 	.word	0x00f42400
 8009690:	007a1200 	.word	0x007a1200

08009694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009694:	b480      	push	{r7}
 8009696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009698:	4b03      	ldr	r3, [pc, #12]	@ (80096a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800969a:	681b      	ldr	r3, [r3, #0]
}
 800969c:	4618      	mov	r0, r3
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	20000000 	.word	0x20000000

080096ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80096b0:	f7ff fff0 	bl	8009694 <HAL_RCC_GetHCLKFreq>
 80096b4:	4602      	mov	r2, r0
 80096b6:	4b05      	ldr	r3, [pc, #20]	@ (80096cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	0a9b      	lsrs	r3, r3, #10
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	4903      	ldr	r1, [pc, #12]	@ (80096d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096c2:	5ccb      	ldrb	r3, [r1, r3]
 80096c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	40023800 	.word	0x40023800
 80096d0:	08016dd4 	.word	0x08016dd4

080096d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80096d8:	f7ff ffdc 	bl	8009694 <HAL_RCC_GetHCLKFreq>
 80096dc:	4602      	mov	r2, r0
 80096de:	4b05      	ldr	r3, [pc, #20]	@ (80096f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	0b5b      	lsrs	r3, r3, #13
 80096e4:	f003 0307 	and.w	r3, r3, #7
 80096e8:	4903      	ldr	r1, [pc, #12]	@ (80096f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096ea:	5ccb      	ldrb	r3, [r1, r3]
 80096ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	40023800 	.word	0x40023800
 80096f8:	08016dd4 	.word	0x08016dd4

080096fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	220f      	movs	r2, #15
 800970a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800970c:	4b12      	ldr	r3, [pc, #72]	@ (8009758 <HAL_RCC_GetClockConfig+0x5c>)
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f003 0203 	and.w	r2, r3, #3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009718:	4b0f      	ldr	r3, [pc, #60]	@ (8009758 <HAL_RCC_GetClockConfig+0x5c>)
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009724:	4b0c      	ldr	r3, [pc, #48]	@ (8009758 <HAL_RCC_GetClockConfig+0x5c>)
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009730:	4b09      	ldr	r3, [pc, #36]	@ (8009758 <HAL_RCC_GetClockConfig+0x5c>)
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	08db      	lsrs	r3, r3, #3
 8009736:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800973e:	4b07      	ldr	r3, [pc, #28]	@ (800975c <HAL_RCC_GetClockConfig+0x60>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 020f 	and.w	r2, r3, #15
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	601a      	str	r2, [r3, #0]
}
 800974a:	bf00      	nop
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	40023800 	.word	0x40023800
 800975c:	40023c00 	.word	0x40023c00

08009760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009768:	2300      	movs	r3, #0
 800976a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00a      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009788:	4b66      	ldr	r3, [pc, #408]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800978a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800978e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009796:	4963      	ldr	r1, [pc, #396]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009798:	4313      	orrs	r3, r2
 800979a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80097aa:	4b5e      	ldr	r3, [pc, #376]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80097ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b8:	495a      	ldr	r1, [pc, #360]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10b      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d105      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d075      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80097e4:	4b50      	ldr	r3, [pc, #320]	@ (8009928 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80097ea:	f7fa faab 	bl	8003d44 <HAL_GetTick>
 80097ee:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80097f0:	e008      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80097f2:	f7fa faa7 	bl	8003d44 <HAL_GetTick>
 80097f6:	4602      	mov	r2, r0
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d901      	bls.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	e1dc      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009804:	4b47      	ldr	r3, [pc, #284]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1f0      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	2b00      	cmp	r3, #0
 800981a:	d009      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	019a      	lsls	r2, r3, #6
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	071b      	lsls	r3, r3, #28
 8009828:	493e      	ldr	r1, [pc, #248]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800982a:	4313      	orrs	r3, r2
 800982c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0302 	and.w	r3, r3, #2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d01f      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800983c:	4b39      	ldr	r3, [pc, #228]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800983e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009842:	0f1b      	lsrs	r3, r3, #28
 8009844:	f003 0307 	and.w	r3, r3, #7
 8009848:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	019a      	lsls	r2, r3, #6
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	061b      	lsls	r3, r3, #24
 8009856:	431a      	orrs	r2, r3
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	071b      	lsls	r3, r3, #28
 800985c:	4931      	ldr	r1, [pc, #196]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800985e:	4313      	orrs	r3, r2
 8009860:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009864:	4b2f      	ldr	r3, [pc, #188]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800986a:	f023 021f 	bic.w	r2, r3, #31
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	3b01      	subs	r3, #1
 8009874:	492b      	ldr	r1, [pc, #172]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009876:	4313      	orrs	r3, r2
 8009878:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00d      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	019a      	lsls	r2, r3, #6
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	061b      	lsls	r3, r3, #24
 8009894:	431a      	orrs	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	071b      	lsls	r3, r3, #28
 800989c:	4921      	ldr	r1, [pc, #132]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800989e:	4313      	orrs	r3, r2
 80098a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80098a4:	4b20      	ldr	r3, [pc, #128]	@ (8009928 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80098a6:	2201      	movs	r2, #1
 80098a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80098aa:	f7fa fa4b 	bl	8003d44 <HAL_GetTick>
 80098ae:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80098b0:	e008      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80098b2:	f7fa fa47 	bl	8003d44 <HAL_GetTick>
 80098b6:	4602      	mov	r2, r0
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d901      	bls.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e17c      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80098c4:	4b17      	ldr	r3, [pc, #92]	@ (8009924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0f0      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d112      	bne.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10c      	bne.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 80ce 	beq.w	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80098fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098fe:	f040 80c8 	bne.w	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009902:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009904:	2200      	movs	r2, #0
 8009906:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009908:	f7fa fa1c 	bl	8003d44 <HAL_GetTick>
 800990c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800990e:	e00f      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009910:	f7fa fa18 	bl	8003d44 <HAL_GetTick>
 8009914:	4602      	mov	r2, r0
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	2b02      	cmp	r3, #2
 800991c:	d908      	bls.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e14d      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8009922:	bf00      	nop
 8009924:	40023800 	.word	0x40023800
 8009928:	42470068 	.word	0x42470068
 800992c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009930:	4ba5      	ldr	r3, [pc, #660]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800993c:	d0e8      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 0304 	and.w	r3, r3, #4
 8009946:	2b00      	cmp	r3, #0
 8009948:	d02e      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800994a:	4b9f      	ldr	r3, [pc, #636]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800994c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009950:	0c1b      	lsrs	r3, r3, #16
 8009952:	f003 0303 	and.w	r3, r3, #3
 8009956:	3301      	adds	r3, #1
 8009958:	005b      	lsls	r3, r3, #1
 800995a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800995c:	4b9a      	ldr	r3, [pc, #616]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800995e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009962:	0f1b      	lsrs	r3, r3, #28
 8009964:	f003 0307 	and.w	r3, r3, #7
 8009968:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	019a      	lsls	r2, r3, #6
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	085b      	lsrs	r3, r3, #1
 8009974:	3b01      	subs	r3, #1
 8009976:	041b      	lsls	r3, r3, #16
 8009978:	431a      	orrs	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	699b      	ldr	r3, [r3, #24]
 800997e:	061b      	lsls	r3, r3, #24
 8009980:	431a      	orrs	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	071b      	lsls	r3, r3, #28
 8009986:	4990      	ldr	r1, [pc, #576]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009988:	4313      	orrs	r3, r2
 800998a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800998e:	4b8e      	ldr	r3, [pc, #568]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009994:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999c:	3b01      	subs	r3, #1
 800999e:	021b      	lsls	r3, r3, #8
 80099a0:	4989      	ldr	r1, [pc, #548]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0308 	and.w	r3, r3, #8
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d02c      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80099b4:	4b84      	ldr	r3, [pc, #528]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ba:	0c1b      	lsrs	r3, r3, #16
 80099bc:	f003 0303 	and.w	r3, r3, #3
 80099c0:	3301      	adds	r3, #1
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80099c6:	4b80      	ldr	r3, [pc, #512]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099cc:	0e1b      	lsrs	r3, r3, #24
 80099ce:	f003 030f 	and.w	r3, r3, #15
 80099d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	019a      	lsls	r2, r3, #6
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	085b      	lsrs	r3, r3, #1
 80099de:	3b01      	subs	r3, #1
 80099e0:	041b      	lsls	r3, r3, #16
 80099e2:	431a      	orrs	r2, r3
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	061b      	lsls	r3, r3, #24
 80099e8:	431a      	orrs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	071b      	lsls	r3, r3, #28
 80099f0:	4975      	ldr	r1, [pc, #468]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80099f8:	4b73      	ldr	r3, [pc, #460]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80099fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a06:	4970      	ldr	r1, [pc, #448]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d024      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a22:	d11f      	bne.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009a24:	4b68      	ldr	r3, [pc, #416]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a2a:	0e1b      	lsrs	r3, r3, #24
 8009a2c:	f003 030f 	and.w	r3, r3, #15
 8009a30:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009a32:	4b65      	ldr	r3, [pc, #404]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a38:	0f1b      	lsrs	r3, r3, #28
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	019a      	lsls	r2, r3, #6
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	085b      	lsrs	r3, r3, #1
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	041b      	lsls	r3, r3, #16
 8009a50:	431a      	orrs	r2, r3
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	061b      	lsls	r3, r3, #24
 8009a56:	431a      	orrs	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	071b      	lsls	r3, r3, #28
 8009a5c:	495a      	ldr	r1, [pc, #360]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009a64:	4b59      	ldr	r3, [pc, #356]	@ (8009bcc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009a66:	2201      	movs	r2, #1
 8009a68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a6a:	f7fa f96b 	bl	8003d44 <HAL_GetTick>
 8009a6e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a70:	e008      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a72:	f7fa f967 	bl	8003d44 <HAL_GetTick>
 8009a76:	4602      	mov	r2, r0
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d901      	bls.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e09c      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a84:	4b50      	ldr	r3, [pc, #320]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a90:	d1ef      	bne.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0320 	and.w	r3, r3, #32
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8083 	beq.w	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60bb      	str	r3, [r7, #8]
 8009aa4:	4b48      	ldr	r3, [pc, #288]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa8:	4a47      	ldr	r2, [pc, #284]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8009ab0:	4b45      	ldr	r3, [pc, #276]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ab8:	60bb      	str	r3, [r7, #8]
 8009aba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009abc:	4b44      	ldr	r3, [pc, #272]	@ (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a43      	ldr	r2, [pc, #268]	@ (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ac6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ac8:	f7fa f93c 	bl	8003d44 <HAL_GetTick>
 8009acc:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009ace:	e008      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ad0:	f7fa f938 	bl	8003d44 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d901      	bls.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e06d      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0f0      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009aee:	4b36      	ldr	r3, [pc, #216]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009af6:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d02f      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b06:	69ba      	ldr	r2, [r7, #24]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d028      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b14:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009b16:	4b2f      	ldr	r3, [pc, #188]	@ (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009b18:	2201      	movs	r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009b22:	4a29      	ldr	r2, [pc, #164]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009b28:	4b27      	ldr	r3, [pc, #156]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d114      	bne.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009b34:	f7fa f906 	bl	8003d44 <HAL_GetTick>
 8009b38:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b3a:	e00a      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b3c:	f7fa f902 	bl	8003d44 <HAL_GetTick>
 8009b40:	4602      	mov	r2, r0
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d901      	bls.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e035      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b52:	4b1d      	ldr	r3, [pc, #116]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b56:	f003 0302 	and.w	r3, r3, #2
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d0ee      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b6a:	d10d      	bne.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009b6c:	4b16      	ldr	r3, [pc, #88]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b78:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b80:	4911      	ldr	r1, [pc, #68]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	608b      	str	r3, [r1, #8]
 8009b86:	e005      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009b88:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b8e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009b92:	6093      	str	r3, [r2, #8]
 8009b94:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009b96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ba0:	4909      	ldr	r1, [pc, #36]	@ (8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 0310 	and.w	r3, r3, #16
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d004      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8009bb8:	4b07      	ldr	r3, [pc, #28]	@ (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8009bba:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3720      	adds	r7, #32
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	40023800 	.word	0x40023800
 8009bcc:	42470070 	.word	0x42470070
 8009bd0:	40007000 	.word	0x40007000
 8009bd4:	42470e40 	.word	0x42470e40
 8009bd8:	424711e0 	.word	0x424711e0

08009bdc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d13f      	bne.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8009bfa:	4b24      	ldr	r3, [pc, #144]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d006      	beq.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c10:	d12f      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c12:	4b1f      	ldr	r3, [pc, #124]	@ (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009c14:	617b      	str	r3, [r7, #20]
          break;
 8009c16:	e02f      	b.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009c18:	4b1c      	ldr	r3, [pc, #112]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c24:	d108      	bne.n	8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009c26:	4b19      	ldr	r3, [pc, #100]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c2e:	4a19      	ldr	r2, [pc, #100]	@ (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8009c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c34:	613b      	str	r3, [r7, #16]
 8009c36:	e007      	b.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009c38:	4b14      	ldr	r3, [pc, #80]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c40:	4a15      	ldr	r2, [pc, #84]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8009c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c46:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8009c48:	4b10      	ldr	r3, [pc, #64]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c4e:	099b      	lsrs	r3, r3, #6
 8009c50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	fb02 f303 	mul.w	r3, r2, r3
 8009c5a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c62:	0f1b      	lsrs	r3, r3, #28
 8009c64:	f003 0307 	and.w	r3, r3, #7
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6e:	617b      	str	r3, [r7, #20]
          break;
 8009c70:	e002      	b.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	617b      	str	r3, [r7, #20]
          break;
 8009c76:	bf00      	nop
        }
      }
      break;
 8009c78:	e000      	b.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8009c7a:	bf00      	nop
    }
  }
  return frequency;
 8009c7c:	697b      	ldr	r3, [r7, #20]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	40023800 	.word	0x40023800
 8009c90:	00bb8000 	.word	0x00bb8000
 8009c94:	007a1200 	.word	0x007a1200
 8009c98:	00f42400 	.word	0x00f42400

08009c9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e273      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d075      	beq.n	8009da6 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009cba:	4b88      	ldr	r3, [pc, #544]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	f003 030c 	and.w	r3, r3, #12
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	d00c      	beq.n	8009ce0 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009cc6:	4b85      	ldr	r3, [pc, #532]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	f003 030c 	and.w	r3, r3, #12
        || \
 8009cce:	2b08      	cmp	r3, #8
 8009cd0:	d112      	bne.n	8009cf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009cd2:	4b82      	ldr	r3, [pc, #520]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009cde:	d10b      	bne.n	8009cf8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d05b      	beq.n	8009da4 <HAL_RCC_OscConfig+0x108>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d157      	bne.n	8009da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e24e      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d00:	d106      	bne.n	8009d10 <HAL_RCC_OscConfig+0x74>
 8009d02:	4b76      	ldr	r3, [pc, #472]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a75      	ldr	r2, [pc, #468]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	e01d      	b.n	8009d4c <HAL_RCC_OscConfig+0xb0>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d18:	d10c      	bne.n	8009d34 <HAL_RCC_OscConfig+0x98>
 8009d1a:	4b70      	ldr	r3, [pc, #448]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	4b6d      	ldr	r3, [pc, #436]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	e00b      	b.n	8009d4c <HAL_RCC_OscConfig+0xb0>
 8009d34:	4b69      	ldr	r3, [pc, #420]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a68      	ldr	r2, [pc, #416]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	4b66      	ldr	r3, [pc, #408]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a65      	ldr	r2, [pc, #404]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d013      	beq.n	8009d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d54:	f7f9 fff6 	bl	8003d44 <HAL_GetTick>
 8009d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d5a:	e008      	b.n	8009d6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d5c:	f7f9 fff2 	bl	8003d44 <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	2b64      	cmp	r3, #100	@ 0x64
 8009d68:	d901      	bls.n	8009d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e213      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0f0      	beq.n	8009d5c <HAL_RCC_OscConfig+0xc0>
 8009d7a:	e014      	b.n	8009da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d7c:	f7f9 ffe2 	bl	8003d44 <HAL_GetTick>
 8009d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d82:	e008      	b.n	8009d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d84:	f7f9 ffde 	bl	8003d44 <HAL_GetTick>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	2b64      	cmp	r3, #100	@ 0x64
 8009d90:	d901      	bls.n	8009d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009d92:	2303      	movs	r3, #3
 8009d94:	e1ff      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d96:	4b51      	ldr	r3, [pc, #324]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1f0      	bne.n	8009d84 <HAL_RCC_OscConfig+0xe8>
 8009da2:	e000      	b.n	8009da6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0302 	and.w	r3, r3, #2
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d063      	beq.n	8009e7a <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009db2:	4b4a      	ldr	r3, [pc, #296]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	f003 030c 	and.w	r3, r3, #12
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00b      	beq.n	8009dd6 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009dbe:	4b47      	ldr	r3, [pc, #284]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f003 030c 	and.w	r3, r3, #12
        || \
 8009dc6:	2b08      	cmp	r3, #8
 8009dc8:	d11c      	bne.n	8009e04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009dca:	4b44      	ldr	r3, [pc, #272]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d116      	bne.n	8009e04 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dd6:	4b41      	ldr	r3, [pc, #260]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d005      	beq.n	8009dee <HAL_RCC_OscConfig+0x152>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d001      	beq.n	8009dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e1d3      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dee:	4b3b      	ldr	r3, [pc, #236]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	4937      	ldr	r1, [pc, #220]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e02:	e03a      	b.n	8009e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d020      	beq.n	8009e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e0c:	4b34      	ldr	r3, [pc, #208]	@ (8009ee0 <HAL_RCC_OscConfig+0x244>)
 8009e0e:	2201      	movs	r2, #1
 8009e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e12:	f7f9 ff97 	bl	8003d44 <HAL_GetTick>
 8009e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e18:	e008      	b.n	8009e2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e1a:	f7f9 ff93 	bl	8003d44 <HAL_GetTick>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d901      	bls.n	8009e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e1b4      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0302 	and.w	r3, r3, #2
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d0f0      	beq.n	8009e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e38:	4b28      	ldr	r3, [pc, #160]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	00db      	lsls	r3, r3, #3
 8009e46:	4925      	ldr	r1, [pc, #148]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	600b      	str	r3, [r1, #0]
 8009e4c:	e015      	b.n	8009e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e4e:	4b24      	ldr	r3, [pc, #144]	@ (8009ee0 <HAL_RCC_OscConfig+0x244>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e54:	f7f9 ff76 	bl	8003d44 <HAL_GetTick>
 8009e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e5a:	e008      	b.n	8009e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e5c:	f7f9 ff72 	bl	8003d44 <HAL_GetTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d901      	bls.n	8009e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	e193      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 0302 	and.w	r3, r3, #2
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1f0      	bne.n	8009e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0308 	and.w	r3, r3, #8
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d036      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d016      	beq.n	8009ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e8e:	4b15      	ldr	r3, [pc, #84]	@ (8009ee4 <HAL_RCC_OscConfig+0x248>)
 8009e90:	2201      	movs	r2, #1
 8009e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e94:	f7f9 ff56 	bl	8003d44 <HAL_GetTick>
 8009e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e9a:	e008      	b.n	8009eae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e9c:	f7f9 ff52 	bl	8003d44 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d901      	bls.n	8009eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e173      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009eae:	4b0b      	ldr	r3, [pc, #44]	@ (8009edc <HAL_RCC_OscConfig+0x240>)
 8009eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009eb2:	f003 0302 	and.w	r3, r3, #2
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d0f0      	beq.n	8009e9c <HAL_RCC_OscConfig+0x200>
 8009eba:	e01b      	b.n	8009ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ebc:	4b09      	ldr	r3, [pc, #36]	@ (8009ee4 <HAL_RCC_OscConfig+0x248>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ec2:	f7f9 ff3f 	bl	8003d44 <HAL_GetTick>
 8009ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ec8:	e00e      	b.n	8009ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009eca:	f7f9 ff3b 	bl	8003d44 <HAL_GetTick>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d907      	bls.n	8009ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e15c      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
 8009edc:	40023800 	.word	0x40023800
 8009ee0:	42470000 	.word	0x42470000
 8009ee4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ee8:	4b8a      	ldr	r3, [pc, #552]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009eec:	f003 0302 	and.w	r3, r3, #2
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1ea      	bne.n	8009eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 0304 	and.w	r3, r3, #4
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 8097 	beq.w	800a030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f02:	2300      	movs	r3, #0
 8009f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f06:	4b83      	ldr	r3, [pc, #524]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10f      	bne.n	8009f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f12:	2300      	movs	r3, #0
 8009f14:	60bb      	str	r3, [r7, #8]
 8009f16:	4b7f      	ldr	r3, [pc, #508]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f1a:	4a7e      	ldr	r2, [pc, #504]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8009f22:	4b7c      	ldr	r3, [pc, #496]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f2a:	60bb      	str	r3, [r7, #8]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f32:	4b79      	ldr	r3, [pc, #484]	@ (800a118 <HAL_RCC_OscConfig+0x47c>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d118      	bne.n	8009f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f3e:	4b76      	ldr	r3, [pc, #472]	@ (800a118 <HAL_RCC_OscConfig+0x47c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a75      	ldr	r2, [pc, #468]	@ (800a118 <HAL_RCC_OscConfig+0x47c>)
 8009f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f4a:	f7f9 fefb 	bl	8003d44 <HAL_GetTick>
 8009f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f50:	e008      	b.n	8009f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f52:	f7f9 fef7 	bl	8003d44 <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d901      	bls.n	8009f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e118      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f64:	4b6c      	ldr	r3, [pc, #432]	@ (800a118 <HAL_RCC_OscConfig+0x47c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d0f0      	beq.n	8009f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d106      	bne.n	8009f86 <HAL_RCC_OscConfig+0x2ea>
 8009f78:	4b66      	ldr	r3, [pc, #408]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f7c:	4a65      	ldr	r2, [pc, #404]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009f7e:	f043 0301 	orr.w	r3, r3, #1
 8009f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f84:	e01c      	b.n	8009fc0 <HAL_RCC_OscConfig+0x324>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	d10c      	bne.n	8009fa8 <HAL_RCC_OscConfig+0x30c>
 8009f8e:	4b61      	ldr	r3, [pc, #388]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f92:	4a60      	ldr	r2, [pc, #384]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009f94:	f043 0304 	orr.w	r3, r3, #4
 8009f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f9a:	4b5e      	ldr	r3, [pc, #376]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f9e:	4a5d      	ldr	r2, [pc, #372]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009fa0:	f043 0301 	orr.w	r3, r3, #1
 8009fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fa6:	e00b      	b.n	8009fc0 <HAL_RCC_OscConfig+0x324>
 8009fa8:	4b5a      	ldr	r3, [pc, #360]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fac:	4a59      	ldr	r2, [pc, #356]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009fae:	f023 0301 	bic.w	r3, r3, #1
 8009fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fb4:	4b57      	ldr	r3, [pc, #348]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fb8:	4a56      	ldr	r2, [pc, #344]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009fba:	f023 0304 	bic.w	r3, r3, #4
 8009fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d015      	beq.n	8009ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fc8:	f7f9 febc 	bl	8003d44 <HAL_GetTick>
 8009fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fce:	e00a      	b.n	8009fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fd0:	f7f9 feb8 	bl	8003d44 <HAL_GetTick>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d901      	bls.n	8009fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e0d7      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fe6:	4b4b      	ldr	r3, [pc, #300]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 8009fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d0ee      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x334>
 8009ff2:	e014      	b.n	800a01e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ff4:	f7f9 fea6 	bl	8003d44 <HAL_GetTick>
 8009ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ffa:	e00a      	b.n	800a012 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ffc:	f7f9 fea2 	bl	8003d44 <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d901      	bls.n	800a012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e0c1      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a012:	4b40      	ldr	r3, [pc, #256]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 800a014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1ee      	bne.n	8009ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d105      	bne.n	800a030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a024:	4b3b      	ldr	r3, [pc, #236]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 800a026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a028:	4a3a      	ldr	r2, [pc, #232]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 800a02a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a02e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 80ad 	beq.w	800a194 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a03a:	4b36      	ldr	r3, [pc, #216]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f003 030c 	and.w	r3, r3, #12
 800a042:	2b08      	cmp	r3, #8
 800a044:	d060      	beq.n	800a108 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d145      	bne.n	800a0da <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a04e:	4b33      	ldr	r3, [pc, #204]	@ (800a11c <HAL_RCC_OscConfig+0x480>)
 800a050:	2200      	movs	r2, #0
 800a052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a054:	f7f9 fe76 	bl	8003d44 <HAL_GetTick>
 800a058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a05a:	e008      	b.n	800a06e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a05c:	f7f9 fe72 	bl	8003d44 <HAL_GetTick>
 800a060:	4602      	mov	r2, r0
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	2b02      	cmp	r3, #2
 800a068:	d901      	bls.n	800a06e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e093      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a06e:	4b29      	ldr	r3, [pc, #164]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1f0      	bne.n	800a05c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	69da      	ldr	r2, [r3, #28]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	431a      	orrs	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a088:	019b      	lsls	r3, r3, #6
 800a08a:	431a      	orrs	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a090:	085b      	lsrs	r3, r3, #1
 800a092:	3b01      	subs	r3, #1
 800a094:	041b      	lsls	r3, r3, #16
 800a096:	431a      	orrs	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a09c:	061b      	lsls	r3, r3, #24
 800a09e:	431a      	orrs	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0a4:	071b      	lsls	r3, r3, #28
 800a0a6:	491b      	ldr	r1, [pc, #108]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a0ac:	4b1b      	ldr	r3, [pc, #108]	@ (800a11c <HAL_RCC_OscConfig+0x480>)
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b2:	f7f9 fe47 	bl	8003d44 <HAL_GetTick>
 800a0b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0b8:	e008      	b.n	800a0cc <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0ba:	f7f9 fe43 	bl	8003d44 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d901      	bls.n	800a0cc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e064      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0cc:	4b11      	ldr	r3, [pc, #68]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d0f0      	beq.n	800a0ba <HAL_RCC_OscConfig+0x41e>
 800a0d8:	e05c      	b.n	800a194 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0da:	4b10      	ldr	r3, [pc, #64]	@ (800a11c <HAL_RCC_OscConfig+0x480>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e0:	f7f9 fe30 	bl	8003d44 <HAL_GetTick>
 800a0e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0e6:	e008      	b.n	800a0fa <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0e8:	f7f9 fe2c 	bl	8003d44 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e04d      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0fa:	4b06      	ldr	r3, [pc, #24]	@ (800a114 <HAL_RCC_OscConfig+0x478>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f0      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x44c>
 800a106:	e045      	b.n	800a194 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d107      	bne.n	800a120 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e040      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
 800a114:	40023800 	.word	0x40023800
 800a118:	40007000 	.word	0x40007000
 800a11c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a120:	4b1f      	ldr	r3, [pc, #124]	@ (800a1a0 <HAL_RCC_OscConfig+0x504>)
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d030      	beq.n	800a190 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a138:	429a      	cmp	r2, r3
 800a13a:	d129      	bne.n	800a190 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a146:	429a      	cmp	r2, r3
 800a148:	d122      	bne.n	800a190 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a150:	4013      	ands	r3, r2
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a158:	4293      	cmp	r3, r2
 800a15a:	d119      	bne.n	800a190 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a166:	085b      	lsrs	r3, r3, #1
 800a168:	3b01      	subs	r3, #1
 800a16a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d10f      	bne.n	800a190 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a17a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d107      	bne.n	800a190 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a18a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d001      	beq.n	800a194 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e000      	b.n	800a196 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	40023800 	.word	0x40023800

0800a1a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e10c      	b.n	800a3e0 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d106      	bne.n	800a1e0 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7f9 fb00 	bl	80037e0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f903 	bl	800a3f4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f938 	bl	800a464 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d030      	beq.n	800a25e <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f957 	bl	800a4b0 <SAI_GetInputClock>
 800a202:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	4613      	mov	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	461a      	mov	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	025b      	lsls	r3, r3, #9
 800a216:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21a:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4a72      	ldr	r2, [pc, #456]	@ (800a3e8 <HAL_SAI_Init+0x244>)
 800a220:	fba2 2303 	umull	r2, r3, r2, r3
 800a224:	08da      	lsrs	r2, r3, #3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800a22a:	68f9      	ldr	r1, [r7, #12]
 800a22c:	4b6e      	ldr	r3, [pc, #440]	@ (800a3e8 <HAL_SAI_Init+0x244>)
 800a22e:	fba3 2301 	umull	r2, r3, r3, r1
 800a232:	08da      	lsrs	r2, r3, #3
 800a234:	4613      	mov	r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4413      	add	r3, r2
 800a23a:	005b      	lsls	r3, r3, #1
 800a23c:	1aca      	subs	r2, r1, r3
 800a23e:	2a08      	cmp	r2, #8
 800a240:	d904      	bls.n	800a24c <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a250:	2b04      	cmp	r3, #4
 800a252:	d104      	bne.n	800a25e <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a258:	085a      	lsrs	r2, r3, #1
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <HAL_SAI_Init+0xca>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d109      	bne.n	800a282 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a272:	2b01      	cmp	r3, #1
 800a274:	d101      	bne.n	800a27a <HAL_SAI_Init+0xd6>
 800a276:	2300      	movs	r3, #0
 800a278:	e001      	b.n	800a27e <HAL_SAI_Init+0xda>
 800a27a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a27e:	617b      	str	r3, [r7, #20]
 800a280:	e008      	b.n	800a294 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a286:	2b01      	cmp	r3, #1
 800a288:	d102      	bne.n	800a290 <HAL_SAI_Init+0xec>
 800a28a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a28e:	e000      	b.n	800a292 <HAL_SAI_Init+0xee>
 800a290:	2300      	movs	r3, #0
 800a292:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d811      	bhi.n	800a2c0 <HAL_SAI_Init+0x11c>
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d20b      	bcs.n	800a2b8 <HAL_SAI_Init+0x114>
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <HAL_SAI_Init+0x106>
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d003      	beq.n	800a2b0 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 800a2a8:	e00a      	b.n	800a2c0 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	613b      	str	r3, [r7, #16]
    break;
 800a2ae:	e008      	b.n	800a2c2 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a2b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2b4:	613b      	str	r3, [r7, #16]
    break;
 800a2b6:	e004      	b.n	800a2c2 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a2b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a2bc:	613b      	str	r3, [r7, #16]
    break;
 800a2be:	e000      	b.n	800a2c2 <HAL_SAI_Init+0x11e>
      break;
 800a2c0:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6819      	ldr	r1, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	4b47      	ldr	r3, [pc, #284]	@ (800a3ec <HAL_SAI_Init+0x248>)
 800a2ce:	400b      	ands	r3, r1
 800a2d0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6819      	ldr	r1, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2e0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a2e6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2ec:	431a      	orrs	r2, r3
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800a2fa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a306:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a30c:	051b      	lsls	r3, r3, #20
 800a30e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	430a      	orrs	r2, r1
 800a316:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	6812      	ldr	r2, [r2, #0]
 800a322:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800a326:	f023 030f 	bic.w	r3, r3, #15
 800a32a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6859      	ldr	r1, [r3, #4]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	699a      	ldr	r2, [r3, #24]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a340:	431a      	orrs	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	6899      	ldr	r1, [r3, #8]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	4b26      	ldr	r3, [pc, #152]	@ (800a3f0 <HAL_SAI_Init+0x24c>)
 800a356:	400b      	ands	r3, r1
 800a358:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6899      	ldr	r1, [r3, #8]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a364:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a36a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 800a370:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 800a376:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a37c:	3b01      	subs	r3, #1
 800a37e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a380:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	430a      	orrs	r2, r1
 800a388:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68d9      	ldr	r1, [r3, #12]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800a398:	400b      	ands	r3, r1
 800a39a:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68d9      	ldr	r1, [r3, #12]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3aa:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3b0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800a3b2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	021b      	lsls	r3, r3, #8
 800a3bc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	cccccccd 	.word	0xcccccccd
 800a3ec:	ff05c010 	.word	0xff05c010
 800a3f0:	fff88000 	.word	0xfff88000

0800a3f4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a3fc:	4b17      	ldr	r3, [pc, #92]	@ (800a45c <SAI_Disable+0x68>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a17      	ldr	r2, [pc, #92]	@ (800a460 <SAI_Disable+0x6c>)
 800a402:	fba2 2303 	umull	r2, r3, r2, r3
 800a406:	0b1b      	lsrs	r3, r3, #12
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a41e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	1e5a      	subs	r2, r3, #1
 800a424:	60fa      	str	r2, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10a      	bne.n	800a440 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a430:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 800a43a:	2303      	movs	r3, #3
 800a43c:	72fb      	strb	r3, [r7, #11]
      break;
 800a43e:	e006      	b.n	800a44e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e8      	bne.n	800a420 <SAI_Disable+0x2c>

  return status;
 800a44e:	7afb      	ldrb	r3, [r7, #11]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	20000000 	.word	0x20000000
 800a460:	95cbec1b 	.word	0x95cbec1b

0800a464 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	2b02      	cmp	r3, #2
 800a472:	d00c      	beq.n	800a48e <SAI_BlockSynchroConfig+0x2a>
 800a474:	2b02      	cmp	r3, #2
 800a476:	d80d      	bhi.n	800a494 <SAI_BlockSynchroConfig+0x30>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <SAI_BlockSynchroConfig+0x1e>
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d003      	beq.n	800a488 <SAI_BlockSynchroConfig+0x24>
 800a480:	e008      	b.n	800a494 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	60fb      	str	r3, [r7, #12]
      break;
 800a486:	e008      	b.n	800a49a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a488:	2310      	movs	r3, #16
 800a48a:	60fb      	str	r3, [r7, #12]
      break;
 800a48c:	e005      	b.n	800a49a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a48e:	2320      	movs	r3, #32
 800a490:	60fb      	str	r3, [r7, #12]
      break;
 800a492:	e002      	b.n	800a49a <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 800a494:	2300      	movs	r3, #0
 800a496:	60fb      	str	r3, [r7, #12]
      break;
 800a498:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 800a49a:	4a04      	ldr	r2, [pc, #16]	@ (800a4ac <SAI_BlockSynchroConfig+0x48>)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800a4a0:	bf00      	nop
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	40015800 	.word	0x40015800

0800a4b0 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	613b      	str	r3, [r7, #16]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a46      	ldr	r2, [pc, #280]	@ (800a5e4 <SAI_GetInputClock+0x134>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d10b      	bne.n	800a4e6 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800a4ce:	4b46      	ldr	r3, [pc, #280]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a4d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	69db      	ldr	r3, [r3, #28]
 800a4dc:	4942      	ldr	r1, [pc, #264]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 800a4e4:	e00b      	b.n	800a4fe <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 800a4e6:	4b40      	ldr	r3, [pc, #256]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a4e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	69db      	ldr	r3, [r3, #28]
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	493c      	ldr	r1, [pc, #240]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a4fe:	4b3a      	ldr	r3, [pc, #232]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a506:	2b00      	cmp	r3, #0
 800a508:	d108      	bne.n	800a51c <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a50a:	4b37      	ldr	r3, [pc, #220]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a512:	4a36      	ldr	r2, [pc, #216]	@ (800a5ec <SAI_GetInputClock+0x13c>)
 800a514:	fbb2 f3f3 	udiv	r3, r2, r3
 800a518:	613b      	str	r3, [r7, #16]
 800a51a:	e007      	b.n	800a52c <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a51c:	4b32      	ldr	r3, [pc, #200]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a524:	4a32      	ldr	r2, [pc, #200]	@ (800a5f0 <SAI_GetInputClock+0x140>)
 800a526:	fbb2 f3f3 	udiv	r3, r2, r3
 800a52a:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d121      	bne.n	800a578 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800a534:	4b2c      	ldr	r3, [pc, #176]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a53a:	0e1b      	lsrs	r3, r3, #24
 800a53c:	f003 030f 	and.w	r3, r3, #15
 800a540:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 800a542:	4b29      	ldr	r3, [pc, #164]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a548:	099b      	lsrs	r3, r3, #6
 800a54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	fb03 f202 	mul.w	r2, r3, r2
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	fbb2 f3f3 	udiv	r3, r2, r3
 800a55a:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800a55c:	4b22      	ldr	r3, [pc, #136]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a55e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a562:	0a1b      	lsrs	r3, r3, #8
 800a564:	f003 031f 	and.w	r3, r3, #31
 800a568:	3301      	adds	r3, #1
 800a56a:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	fbb2 f3f3 	udiv	r3, r2, r3
 800a574:	617b      	str	r3, [r7, #20]
 800a576:	e02d      	b.n	800a5d4 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a580:	d120      	bne.n	800a5c4 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800a582:	4b19      	ldr	r3, [pc, #100]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a588:	0e1b      	lsrs	r3, r3, #24
 800a58a:	f003 030f 	and.w	r3, r3, #15
 800a58e:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800a590:	4b15      	ldr	r3, [pc, #84]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a596:	099b      	lsrs	r3, r3, #6
 800a598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	fb03 f202 	mul.w	r2, r3, r2
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a8:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800a5aa:	4b0f      	ldr	r3, [pc, #60]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a5ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5b0:	f003 031f 	and.w	r3, r3, #31
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c0:	617b      	str	r3, [r7, #20]
 800a5c2:	e007      	b.n	800a5d4 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 800a5c4:	4b08      	ldr	r3, [pc, #32]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	4a07      	ldr	r2, [pc, #28]	@ (800a5e8 <SAI_GetInputClock+0x138>)
 800a5ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a5ce:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 800a5d0:	4b08      	ldr	r3, [pc, #32]	@ (800a5f4 <SAI_GetInputClock+0x144>)
 800a5d2:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800a5d4:	697b      	ldr	r3, [r7, #20]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	371c      	adds	r7, #28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	40015804 	.word	0x40015804
 800a5e8:	40023800 	.word	0x40023800
 800a5ec:	00f42400 	.word	0x00f42400
 800a5f0:	007a1200 	.word	0x007a1200
 800a5f4:	00bb8000 	.word	0x00bb8000

0800a5f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e022      	b.n	800a650 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a610:	b2db      	uxtb	r3, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	d105      	bne.n	800a622 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7f8 fe31 	bl	8003284 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2203      	movs	r2, #3
 800a626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f814 	bl	800a658 <HAL_SD_InitCard>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e00a      	b.n	800a650 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a658:	b5b0      	push	{r4, r5, r7, lr}
 800a65a:	b08e      	sub	sp, #56	@ 0x38
 800a65c:	af04      	add	r7, sp, #16
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a660:	2300      	movs	r3, #0
 800a662:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a664:	2300      	movs	r3, #0
 800a666:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a668:	2300      	movs	r3, #0
 800a66a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a66c:	2300      	movs	r3, #0
 800a66e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a670:	2300      	movs	r3, #0
 800a672:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a674:	2376      	movs	r3, #118	@ 0x76
 800a676:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681d      	ldr	r5, [r3, #0]
 800a67c:	466c      	mov	r4, sp
 800a67e:	f107 0314 	add.w	r3, r7, #20
 800a682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a68a:	f107 0308 	add.w	r3, r7, #8
 800a68e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a690:	4628      	mov	r0, r5
 800a692:	f003 f92f 	bl	800d8f4 <SDIO_Init>
 800a696:	4603      	mov	r3, r0
 800a698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a69c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e04f      	b.n	800a748 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a6a8:	4b29      	ldr	r3, [pc, #164]	@ (800a750 <HAL_SD_InitCard+0xf8>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f003 f967 	bl	800d986 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a6b8:	4b25      	ldr	r3, [pc, #148]	@ (800a750 <HAL_SD_InitCard+0xf8>)
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a6be:	2002      	movs	r0, #2
 800a6c0:	f7f9 fb4c 	bl	8003d5c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 ff55 	bl	800b574 <SD_PowerON>
 800a6ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00b      	beq.n	800a6ea <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6de:	6a3b      	ldr	r3, [r7, #32]
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e02e      	b.n	800a748 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fe74 	bl	800b3d8 <SD_InitCard>
 800a6f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	431a      	orrs	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e01b      	b.n	800a748 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a718:	4618      	mov	r0, r3
 800a71a:	f003 f9c6 	bl	800daaa <SDMMC_CmdBlockLength>
 800a71e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a720:	6a3b      	ldr	r3, [r7, #32]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00f      	beq.n	800a746 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a0a      	ldr	r2, [pc, #40]	@ (800a754 <HAL_SD_InitCard+0xfc>)
 800a72c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	431a      	orrs	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e000      	b.n	800a748 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3728      	adds	r7, #40	@ 0x28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bdb0      	pop	{r4, r5, r7, pc}
 800a750:	422580a0 	.word	0x422580a0
 800a754:	004005ff 	.word	0x004005ff

0800a758 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b08c      	sub	sp, #48	@ 0x30
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d107      	bne.n	800a780 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a774:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e0be      	b.n	800a8fe <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b01      	cmp	r3, #1
 800a78a:	f040 80b7 	bne.w	800a8fc <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a794:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	441a      	add	r2, r3
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d907      	bls.n	800a7b2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e0a5      	b.n	800a8fe <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2203      	movs	r2, #3
 800a7b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a7d0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7d6:	4a4c      	ldr	r2, [pc, #304]	@ (800a908 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800a7d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7de:	4a4b      	ldr	r2, [pc, #300]	@ (800a90c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800a7e0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3380      	adds	r3, #128	@ 0x80
 800a818:	4619      	mov	r1, r3
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	025b      	lsls	r3, r3, #9
 800a820:	089b      	lsrs	r3, r3, #2
 800a822:	f7f9 fc6b 	bl	80040fc <HAL_DMA_Start_IT>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d017      	beq.n	800a85c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800a83a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a33      	ldr	r2, [pc, #204]	@ (800a910 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a842:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a848:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e050      	b.n	800a8fe <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a85c:	4b2d      	ldr	r3, [pc, #180]	@ (800a914 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a85e:	2201      	movs	r2, #1
 800a860:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a866:	2b01      	cmp	r3, #1
 800a868:	d002      	beq.n	800a870 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800a86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86c:	025b      	lsls	r3, r3, #9
 800a86e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a870:	f04f 33ff 	mov.w	r3, #4294967295
 800a874:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	025b      	lsls	r3, r3, #9
 800a87a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a87c:	2390      	movs	r3, #144	@ 0x90
 800a87e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a880:	2302      	movs	r3, #2
 800a882:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a884:	2300      	movs	r3, #0
 800a886:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a888:	2301      	movs	r3, #1
 800a88a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f107 0210 	add.w	r2, r7, #16
 800a894:	4611      	mov	r1, r2
 800a896:	4618      	mov	r0, r3
 800a898:	f003 f8db 	bl	800da52 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d90a      	bls.n	800a8b8 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2282      	movs	r2, #130	@ 0x82
 800a8a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f003 f93f 	bl	800db32 <SDMMC_CmdReadMultiBlock>
 800a8b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a8b6:	e009      	b.n	800a8cc <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2281      	movs	r2, #129	@ 0x81
 800a8bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f003 f912 	bl	800daee <SDMMC_CmdReadSingleBlock>
 800a8ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d012      	beq.n	800a8f8 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a0e      	ldr	r2, [pc, #56]	@ (800a910 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a8d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e0:	431a      	orrs	r2, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e002      	b.n	800a8fe <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e000      	b.n	800a8fe <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a8fc:	2302      	movs	r3, #2
  }
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3730      	adds	r7, #48	@ 0x30
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	0800b1e7 	.word	0x0800b1e7
 800a90c:	0800b259 	.word	0x0800b259
 800a910:	004005ff 	.word	0x004005ff
 800a914:	4225858c 	.word	0x4225858c

0800a918 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08c      	sub	sp, #48	@ 0x30
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
 800a924:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d107      	bne.n	800a940 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a934:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e0c1      	b.n	800aac4 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b01      	cmp	r3, #1
 800a94a:	f040 80ba 	bne.w	800aac2 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	441a      	add	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a95e:	429a      	cmp	r2, r3
 800a960:	d907      	bls.n	800a972 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a966:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e0a8      	b.n	800aac4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2203      	movs	r2, #3
 800a976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2200      	movs	r2, #0
 800a980:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f042 021a 	orr.w	r2, r2, #26
 800a990:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a996:	4a4d      	ldr	r2, [pc, #308]	@ (800aacc <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800a998:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a99e:	4a4c      	ldr	r2, [pc, #304]	@ (800aad0 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800a9a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d002      	beq.n	800a9b8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b4:	025b      	lsls	r3, r3, #9
 800a9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d90a      	bls.n	800a9d4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	22a0      	movs	r2, #160	@ 0xa0
 800a9c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f003 f8f5 	bl	800dbba <SDMMC_CmdWriteMultiBlock>
 800a9d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a9d2:	e009      	b.n	800a9e8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2290      	movs	r2, #144	@ 0x90
 800a9d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f003 f8c8 	bl	800db76 <SDMMC_CmdWriteSingleBlock>
 800a9e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d012      	beq.n	800aa14 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a38      	ldr	r2, [pc, #224]	@ (800aad4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800a9f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fc:	431a      	orrs	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e057      	b.n	800aac4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800aa14:	4b30      	ldr	r3, [pc, #192]	@ (800aad8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800aa16:	2201      	movs	r2, #1
 800aa18:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa1e:	2240      	movs	r2, #64	@ 0x40
 800aa20:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa32:	689a      	ldr	r2, [r3, #8]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3380      	adds	r3, #128	@ 0x80
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	025b      	lsls	r3, r3, #9
 800aa50:	089b      	lsrs	r3, r3, #2
 800aa52:	f7f9 fb53 	bl	80040fc <HAL_DMA_Start_IT>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01a      	beq.n	800aa92 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f022 021a 	bic.w	r2, r2, #26
 800aa6a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a18      	ldr	r2, [pc, #96]	@ (800aad4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800aa72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa78:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e018      	b.n	800aac4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa92:	f04f 33ff 	mov.w	r3, #4294967295
 800aa96:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	025b      	lsls	r3, r3, #9
 800aa9c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800aa9e:	2390      	movs	r3, #144	@ 0x90
 800aaa0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f107 0210 	add.w	r2, r7, #16
 800aab6:	4611      	mov	r1, r2
 800aab8:	4618      	mov	r0, r3
 800aaba:	f002 ffca 	bl	800da52 <SDIO_ConfigData>

      return HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	e000      	b.n	800aac4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800aac2:	2302      	movs	r3, #2
  }
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3730      	adds	r7, #48	@ 0x30
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	0800b1bd 	.word	0x0800b1bd
 800aad0:	0800b259 	.word	0x0800b259
 800aad4:	004005ff 	.word	0x004005ff
 800aad8:	4225858c 	.word	0x4225858c

0800aadc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aae8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d008      	beq.n	800ab0a <HAL_SD_IRQHandler+0x2e>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f003 0308 	and.w	r3, r3, #8
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fdec 	bl	800b6e0 <SD_Read_IT>
 800ab08:	e155      	b.n	800adb6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f000 808f 	beq.w	800ac38 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ab22:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	6812      	ldr	r2, [r2, #0]
 800ab2e:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800ab32:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800ab36:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f022 0201 	bic.w	r2, r2, #1
 800ab46:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f003 0308 	and.w	r3, r3, #8
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d039      	beq.n	800abc6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f003 0302 	and.w	r3, r3, #2
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d104      	bne.n	800ab66 <HAL_SD_IRQHandler+0x8a>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f003 0320 	and.w	r3, r3, #32
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d011      	beq.n	800ab8a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f003 f848 	bl	800dc00 <SDMMC_CmdStopTransfer>
 800ab70:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d008      	beq.n	800ab8a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f91f 	bl	800adc8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800ab92:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d104      	bne.n	800abb6 <HAL_SD_IRQHandler+0xda>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f003 0302 	and.w	r3, r3, #2
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f004 fdc8 	bl	800f74c <HAL_SD_RxCpltCallback>
 800abbc:	e0fb      	b.n	800adb6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f004 fdba 	bl	800f738 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800abc4:	e0f7      	b.n	800adb6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 80f2 	beq.w	800adb6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f003 0320 	and.w	r3, r3, #32
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d011      	beq.n	800ac00 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f003 f80d 	bl	800dc00 <SDMMC_CmdStopTransfer>
 800abe6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d008      	beq.n	800ac00 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	431a      	orrs	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f8e4 	bl	800adc8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f040 80d5 	bne.w	800adb6 <HAL_SD_IRQHandler+0x2da>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f040 80cf 	bne.w	800adb6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f022 0208 	bic.w	r2, r2, #8
 800ac26:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f004 fd81 	bl	800f738 <HAL_SD_TxCpltCallback>
}
 800ac36:	e0be      	b.n	800adb6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d008      	beq.n	800ac58 <HAL_SD_IRQHandler+0x17c>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f003 0308 	and.w	r3, r3, #8
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d003      	beq.n	800ac58 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fd96 	bl	800b782 <SD_Write_IT>
 800ac56:	e0ae      	b.n	800adb6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac5e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 80a7 	beq.w	800adb6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac6e:	f003 0302 	and.w	r3, r3, #2
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d005      	beq.n	800ac82 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac7a:	f043 0202 	orr.w	r2, r3, #2
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac88:	f003 0308 	and.w	r3, r3, #8
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d005      	beq.n	800ac9c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac94:	f043 0208 	orr.w	r2, r3, #8
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aca2:	f003 0320 	and.w	r3, r3, #32
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d005      	beq.n	800acb6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acae:	f043 0220 	orr.w	r2, r3, #32
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acbc:	f003 0310 	and.w	r3, r3, #16
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d005      	beq.n	800acd0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acc8:	f043 0210 	orr.w	r2, r3, #16
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f240 523a 	movw	r2, #1338	@ 0x53a
 800acd8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800ace8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4618      	mov	r0, r3
 800acf0:	f002 ff86 	bl	800dc00 <SDMMC_CmdStopTransfer>
 800acf4:	4602      	mov	r2, r0
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acfa:	431a      	orrs	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f003 0308 	and.w	r3, r3, #8
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00a      	beq.n	800ad20 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f855 	bl	800adc8 <HAL_SD_ErrorCallback>
}
 800ad1e:	e04a      	b.n	800adb6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d045      	beq.n	800adb6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f003 0310 	and.w	r3, r3, #16
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d104      	bne.n	800ad3e <HAL_SD_IRQHandler+0x262>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f003 0320 	and.w	r3, r3, #32
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d011      	beq.n	800ad62 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad42:	4a1f      	ldr	r2, [pc, #124]	@ (800adc0 <HAL_SD_IRQHandler+0x2e4>)
 800ad44:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7f9 fa9e 	bl	800428c <HAL_DMA_Abort_IT>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d02f      	beq.n	800adb6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 face 	bl	800b2fc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ad60:	e029      	b.n	800adb6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f003 0301 	and.w	r3, r3, #1
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d104      	bne.n	800ad76 <HAL_SD_IRQHandler+0x29a>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f003 0302 	and.w	r3, r3, #2
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d011      	beq.n	800ad9a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad7a:	4a12      	ldr	r2, [pc, #72]	@ (800adc4 <HAL_SD_IRQHandler+0x2e8>)
 800ad7c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7f9 fa82 	bl	800428c <HAL_DMA_Abort_IT>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d013      	beq.n	800adb6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 fae9 	bl	800b36a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ad98:	e00d      	b.n	800adb6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f004 fcb8 	bl	800f724 <HAL_SD_AbortCallback>
}
 800adb4:	e7ff      	b.n	800adb6 <HAL_SD_IRQHandler+0x2da>
 800adb6:	bf00      	nop
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	0800b2fd 	.word	0x0800b2fd
 800adc4:	0800b36b 	.word	0x0800b36b

0800adc8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adea:	0f9b      	lsrs	r3, r3, #30
 800adec:	b2da      	uxtb	r2, r3
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adf6:	0e9b      	lsrs	r3, r3, #26
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	f003 030f 	and.w	r3, r3, #15
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae08:	0e1b      	lsrs	r3, r3, #24
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	f003 0303 	and.w	r3, r3, #3
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae1a:	0c1b      	lsrs	r3, r3, #16
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae26:	0a1b      	lsrs	r3, r3, #8
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae3c:	0d1b      	lsrs	r3, r3, #20
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae48:	0c1b      	lsrs	r3, r3, #16
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	f003 030f 	and.w	r3, r3, #15
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae5a:	0bdb      	lsrs	r3, r3, #15
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae6c:	0b9b      	lsrs	r3, r3, #14
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	f003 0301 	and.w	r3, r3, #1
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae7e:	0b5b      	lsrs	r3, r3, #13
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae90:	0b1b      	lsrs	r3, r3, #12
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	2200      	movs	r2, #0
 800aea2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d163      	bne.n	800af74 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aeb0:	009a      	lsls	r2, r3, #2
 800aeb2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800aebc:	0f92      	lsrs	r2, r2, #30
 800aebe:	431a      	orrs	r2, r3
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aec8:	0edb      	lsrs	r3, r3, #27
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f003 0307 	and.w	r3, r3, #7
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aeda:	0e1b      	lsrs	r3, r3, #24
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	f003 0307 	and.w	r3, r3, #7
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aeec:	0d5b      	lsrs	r3, r3, #21
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	f003 0307 	and.w	r3, r3, #7
 800aef4:	b2da      	uxtb	r2, r3
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aefe:	0c9b      	lsrs	r3, r3, #18
 800af00:	b2db      	uxtb	r3, r3
 800af02:	f003 0307 	and.w	r3, r3, #7
 800af06:	b2da      	uxtb	r2, r3
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af10:	0bdb      	lsrs	r3, r3, #15
 800af12:	b2db      	uxtb	r3, r3
 800af14:	f003 0307 	and.w	r3, r3, #7
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	7e1b      	ldrb	r3, [r3, #24]
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	f003 0307 	and.w	r3, r3, #7
 800af32:	3302      	adds	r3, #2
 800af34:	2201      	movs	r2, #1
 800af36:	fa02 f303 	lsl.w	r3, r2, r3
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800af3e:	fb03 f202 	mul.w	r2, r3, r2
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	7a1b      	ldrb	r3, [r3, #8]
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	f003 030f 	and.w	r3, r3, #15
 800af50:	2201      	movs	r2, #1
 800af52:	409a      	lsls	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800af60:	0a52      	lsrs	r2, r2, #9
 800af62:	fb03 f202 	mul.w	r2, r3, r2
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af70:	661a      	str	r2, [r3, #96]	@ 0x60
 800af72:	e031      	b.n	800afd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d11d      	bne.n	800afb8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af80:	041b      	lsls	r3, r3, #16
 800af82:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af8a:	0c1b      	lsrs	r3, r3, #16
 800af8c:	431a      	orrs	r2, r3
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	3301      	adds	r3, #1
 800af98:	029a      	lsls	r2, r3, #10
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	661a      	str	r2, [r3, #96]	@ 0x60
 800afb6:	e00f      	b.n	800afd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a58      	ldr	r2, [pc, #352]	@ (800b120 <HAL_SD_GetCardCSD+0x344>)
 800afbe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	e09d      	b.n	800b114 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afdc:	0b9b      	lsrs	r3, r3, #14
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afee:	09db      	lsrs	r3, r3, #7
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b006:	b2da      	uxtb	r2, r3
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b010:	0fdb      	lsrs	r3, r3, #31
 800b012:	b2da      	uxtb	r2, r3
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b01c:	0f5b      	lsrs	r3, r3, #29
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	f003 0303 	and.w	r3, r3, #3
 800b024:	b2da      	uxtb	r2, r3
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b02e:	0e9b      	lsrs	r3, r3, #26
 800b030:	b2db      	uxtb	r3, r3
 800b032:	f003 0307 	and.w	r3, r3, #7
 800b036:	b2da      	uxtb	r2, r3
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b040:	0d9b      	lsrs	r3, r3, #22
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 030f 	and.w	r3, r3, #15
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b052:	0d5b      	lsrs	r3, r3, #21
 800b054:	b2db      	uxtb	r3, r3
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	b2da      	uxtb	r2, r3
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b06e:	0c1b      	lsrs	r3, r3, #16
 800b070:	b2db      	uxtb	r3, r3
 800b072:	f003 0301 	and.w	r3, r3, #1
 800b076:	b2da      	uxtb	r2, r3
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b082:	0bdb      	lsrs	r3, r3, #15
 800b084:	b2db      	uxtb	r3, r3
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b096:	0b9b      	lsrs	r3, r3, #14
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	f003 0301 	and.w	r3, r3, #1
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0aa:	0b5b      	lsrs	r3, r3, #13
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	b2da      	uxtb	r2, r3
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0be:	0b1b      	lsrs	r3, r3, #12
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	b2da      	uxtb	r2, r3
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0d2:	0a9b      	lsrs	r3, r3, #10
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	f003 0303 	and.w	r3, r3, #3
 800b0da:	b2da      	uxtb	r2, r3
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0e6:	0a1b      	lsrs	r3, r3, #8
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	f003 0303 	and.w	r3, r3, #3
 800b0ee:	b2da      	uxtb	r2, r3
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0fa:	085b      	lsrs	r3, r3, #1
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b102:	b2da      	uxtb	r2, r3
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	004005ff 	.word	0x004005ff

0800b124 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b184:	2300      	movs	r3, #0
 800b186:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b188:	f107 030c 	add.w	r3, r7, #12
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fa7e 	bl	800b690 <SD_SendStatus>
 800b194:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	0a5b      	lsrs	r3, r3, #9
 800b1ac:	f003 030f 	and.w	r3, r3, #15
 800b1b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b1b2:	693b      	ldr	r3, [r7, #16]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3718      	adds	r7, #24
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b1d8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b1da:	bf00      	nop
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1f2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1f8:	2b82      	cmp	r3, #130	@ 0x82
 800b1fa:	d111      	bne.n	800b220 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4618      	mov	r0, r3
 800b202:	f002 fcfd 	bl	800dc00 <SDMMC_CmdStopTransfer>
 800b206:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d008      	beq.n	800b220 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	431a      	orrs	r2, r3
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f7ff fdd4 	bl	800adc8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f022 0208 	bic.w	r2, r2, #8
 800b22e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b238:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f004 fa7f 	bl	800f74c <HAL_SD_RxCpltCallback>
#endif
}
 800b24e:	bf00      	nop
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
	...

0800b258 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b264:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f7f9 f9bc 	bl	80045e4 <HAL_DMA_GetError>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b02      	cmp	r3, #2
 800b270:	d03e      	beq.n	800b2f0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b278:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b27e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b280:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d002      	beq.n	800b28e <SD_DMAError+0x36>
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d12d      	bne.n	800b2ea <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a19      	ldr	r2, [pc, #100]	@ (800b2f8 <SD_DMAError+0xa0>)
 800b294:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800b2a4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b2b2:	6978      	ldr	r0, [r7, #20]
 800b2b4:	f7ff ff62 	bl	800b17c <HAL_SD_GetCardState>
 800b2b8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b06      	cmp	r3, #6
 800b2be:	d002      	beq.n	800b2c6 <SD_DMAError+0x6e>
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2b05      	cmp	r3, #5
 800b2c4:	d10a      	bne.n	800b2dc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f002 fc98 	bl	800dc00 <SDMMC_CmdStopTransfer>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d6:	431a      	orrs	r2, r3
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b2ea:	6978      	ldr	r0, [r7, #20]
 800b2ec:	f7ff fd6c 	bl	800adc8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b2f0:	bf00      	nop
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	004005ff 	.word	0x004005ff

0800b2fc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b308:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b312:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f7ff ff31 	bl	800b17c <HAL_SD_GetCardState>
 800b31a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	2b06      	cmp	r3, #6
 800b32e:	d002      	beq.n	800b336 <SD_DMATxAbort+0x3a>
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2b05      	cmp	r3, #5
 800b334:	d10a      	bne.n	800b34c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f002 fc60 	bl	800dc00 <SDMMC_CmdStopTransfer>
 800b340:	4602      	mov	r2, r0
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b346:	431a      	orrs	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b350:	2b00      	cmp	r3, #0
 800b352:	d103      	bne.n	800b35c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f004 f9e5 	bl	800f724 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b35a:	e002      	b.n	800b362 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f7ff fd33 	bl	800adc8 <HAL_SD_ErrorCallback>
}
 800b362:	bf00      	nop
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b376:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b380:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f7ff fefa 	bl	800b17c <HAL_SD_GetCardState>
 800b388:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2b06      	cmp	r3, #6
 800b39c:	d002      	beq.n	800b3a4 <SD_DMARxAbort+0x3a>
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	2b05      	cmp	r3, #5
 800b3a2:	d10a      	bne.n	800b3ba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f002 fc29 	bl	800dc00 <SDMMC_CmdStopTransfer>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d103      	bne.n	800b3ca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f004 f9ae 	bl	800f724 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b3c8:	e002      	b.n	800b3d0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f7ff fcfc 	bl	800adc8 <HAL_SD_ErrorCallback>
}
 800b3d0:	bf00      	nop
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b3d8:	b5b0      	push	{r4, r5, r7, lr}
 800b3da:	b094      	sub	sp, #80	@ 0x50
 800b3dc:	af04      	add	r7, sp, #16
 800b3de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f002 fada 	bl	800d9a2 <SDIO_GetPowerState>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b3f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b3f8:	e0b8      	b.n	800b56c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	d02f      	beq.n	800b462 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4618      	mov	r0, r3
 800b408:	f002 fcc1 	bl	800dd8e <SDMMC_CmdSendCID>
 800b40c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b40e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <SD_InitCard+0x40>
    {
      return errorstate;
 800b414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b416:	e0a9      	b.n	800b56c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2100      	movs	r1, #0
 800b41e:	4618      	mov	r0, r3
 800b420:	f002 fb04 	bl	800da2c <SDIO_GetResponse>
 800b424:	4602      	mov	r2, r0
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2104      	movs	r1, #4
 800b430:	4618      	mov	r0, r3
 800b432:	f002 fafb 	bl	800da2c <SDIO_GetResponse>
 800b436:	4602      	mov	r2, r0
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2108      	movs	r1, #8
 800b442:	4618      	mov	r0, r3
 800b444:	f002 faf2 	bl	800da2c <SDIO_GetResponse>
 800b448:	4602      	mov	r2, r0
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	210c      	movs	r1, #12
 800b454:	4618      	mov	r0, r3
 800b456:	f002 fae9 	bl	800da2c <SDIO_GetResponse>
 800b45a:	4602      	mov	r2, r0
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b466:	2b03      	cmp	r3, #3
 800b468:	d00d      	beq.n	800b486 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f107 020e 	add.w	r2, r7, #14
 800b472:	4611      	mov	r1, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f002 fcc7 	bl	800de08 <SDMMC_CmdSetRelAdd>
 800b47a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b47c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <SD_InitCard+0xae>
    {
      return errorstate;
 800b482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b484:	e072      	b.n	800b56c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b48a:	2b03      	cmp	r3, #3
 800b48c:	d036      	beq.n	800b4fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b48e:	89fb      	ldrh	r3, [r7, #14]
 800b490:	461a      	mov	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b49e:	041b      	lsls	r3, r3, #16
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	f002 fc91 	bl	800ddca <SDMMC_CmdSendCSD>
 800b4a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d001      	beq.n	800b4b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b4b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4b2:	e05b      	b.n	800b56c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f002 fab6 	bl	800da2c <SDIO_GetResponse>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2104      	movs	r1, #4
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f002 faad 	bl	800da2c <SDIO_GetResponse>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2108      	movs	r1, #8
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f002 faa4 	bl	800da2c <SDIO_GetResponse>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	210c      	movs	r1, #12
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f002 fa9b 	bl	800da2c <SDIO_GetResponse>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2104      	movs	r1, #4
 800b502:	4618      	mov	r0, r3
 800b504:	f002 fa92 	bl	800da2c <SDIO_GetResponse>
 800b508:	4603      	mov	r3, r0
 800b50a:	0d1a      	lsrs	r2, r3, #20
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b510:	f107 0310 	add.w	r3, r7, #16
 800b514:	4619      	mov	r1, r3
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7ff fc60 	bl	800addc <HAL_SD_GetCardCSD>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d002      	beq.n	800b528 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b522:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b526:	e021      	b.n	800b56c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6819      	ldr	r1, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b530:	041b      	lsls	r3, r3, #16
 800b532:	2200      	movs	r2, #0
 800b534:	461c      	mov	r4, r3
 800b536:	4615      	mov	r5, r2
 800b538:	4622      	mov	r2, r4
 800b53a:	462b      	mov	r3, r5
 800b53c:	4608      	mov	r0, r1
 800b53e:	f002 fb81 	bl	800dc44 <SDMMC_CmdSelDesel>
 800b542:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <SD_InitCard+0x176>
  {
    return errorstate;
 800b54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b54c:	e00e      	b.n	800b56c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681d      	ldr	r5, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	466c      	mov	r4, sp
 800b556:	f103 0210 	add.w	r2, r3, #16
 800b55a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b55c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b560:	3304      	adds	r3, #4
 800b562:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b564:	4628      	mov	r0, r5
 800b566:	f002 f9c5 	bl	800d8f4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3740      	adds	r7, #64	@ 0x40
 800b570:	46bd      	mov	sp, r7
 800b572:	bdb0      	pop	{r4, r5, r7, pc}

0800b574 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b57c:	2300      	movs	r3, #0
 800b57e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b580:	2300      	movs	r3, #0
 800b582:	617b      	str	r3, [r7, #20]
 800b584:	2300      	movs	r3, #0
 800b586:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f002 fb7c 	bl	800dc8a <SDMMC_CmdGoIdleState>
 800b592:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <SD_PowerON+0x2a>
  {
    return errorstate;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	e072      	b.n	800b684 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f002 fb8f 	bl	800dcc6 <SDMMC_CmdOperCond>
 800b5a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00d      	beq.n	800b5cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f002 fb65 	bl	800dc8a <SDMMC_CmdGoIdleState>
 800b5c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d004      	beq.n	800b5d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	e05b      	b.n	800b684 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d137      	bne.n	800b64a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2100      	movs	r1, #0
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f002 fb8f 	bl	800dd04 <SDMMC_CmdAppCommand>
 800b5e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d02d      	beq.n	800b64a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b5ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b5f2:	e047      	b.n	800b684 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f002 fb82 	bl	800dd04 <SDMMC_CmdAppCommand>
 800b600:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <SD_PowerON+0x98>
    {
      return errorstate;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	e03b      	b.n	800b684 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	491e      	ldr	r1, [pc, #120]	@ (800b68c <SD_PowerON+0x118>)
 800b612:	4618      	mov	r0, r3
 800b614:	f002 fb98 	bl	800dd48 <SDMMC_CmdAppOperCommand>
 800b618:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b620:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b624:	e02e      	b.n	800b684 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2100      	movs	r1, #0
 800b62c:	4618      	mov	r0, r3
 800b62e:	f002 f9fd 	bl	800da2c <SDIO_GetResponse>
 800b632:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	0fdb      	lsrs	r3, r3, #31
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d101      	bne.n	800b640 <SD_PowerON+0xcc>
 800b63c:	2301      	movs	r3, #1
 800b63e:	e000      	b.n	800b642 <SD_PowerON+0xce>
 800b640:	2300      	movs	r3, #0
 800b642:	613b      	str	r3, [r7, #16]

    count++;
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	3301      	adds	r3, #1
 800b648:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b650:	4293      	cmp	r3, r2
 800b652:	d802      	bhi.n	800b65a <SD_PowerON+0xe6>
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d0cc      	beq.n	800b5f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b660:	4293      	cmp	r3, r2
 800b662:	d902      	bls.n	800b66a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b664:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b668:	e00c      	b.n	800b684 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b670:	2b00      	cmp	r3, #0
 800b672:	d003      	beq.n	800b67c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	645a      	str	r2, [r3, #68]	@ 0x44
 800b67a:	e002      	b.n	800b682 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	c1100000 	.word	0xc1100000

0800b690 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d102      	bne.n	800b6a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b6a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b6a4:	e018      	b.n	800b6d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6ae:	041b      	lsls	r3, r3, #16
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	f002 fbc9 	bl	800de4a <SDMMC_CmdSendStatus>
 800b6b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d001      	beq.n	800b6c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	e009      	b.n	800b6d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f002 f9ae 	bl	800da2c <SDIO_GetResponse>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b086      	sub	sp, #24
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d03f      	beq.n	800b77a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	617b      	str	r3, [r7, #20]
 800b6fe:	e033      	b.n	800b768 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4618      	mov	r0, r3
 800b706:	f002 f920 	bl	800d94a <SDIO_ReadFIFO>
 800b70a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	3301      	adds	r3, #1
 800b718:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	3b01      	subs	r3, #1
 800b71e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	0a1b      	lsrs	r3, r3, #8
 800b724:	b2da      	uxtb	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	3301      	adds	r3, #1
 800b72e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	3b01      	subs	r3, #1
 800b734:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	0c1b      	lsrs	r3, r3, #16
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	3301      	adds	r3, #1
 800b744:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	3b01      	subs	r3, #1
 800b74a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	0e1b      	lsrs	r3, r3, #24
 800b750:	b2da      	uxtb	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3301      	adds	r3, #1
 800b75a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	3b01      	subs	r3, #1
 800b760:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	3301      	adds	r3, #1
 800b766:	617b      	str	r3, [r7, #20]
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	2b07      	cmp	r3, #7
 800b76c:	d9c8      	bls.n	800b700 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	693a      	ldr	r2, [r7, #16]
 800b778:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800b77a:	bf00      	nop
 800b77c:	3718      	adds	r7, #24
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b086      	sub	sp, #24
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b794:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d043      	beq.n	800b824 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b79c:	2300      	movs	r3, #0
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	e037      	b.n	800b812 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	021a      	lsls	r2, r3, #8
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	041a      	lsls	r2, r3, #16
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	061a      	lsls	r2, r3, #24
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f107 0208 	add.w	r2, r7, #8
 800b804:	4611      	mov	r1, r2
 800b806:	4618      	mov	r0, r3
 800b808:	f002 f8ac 	bl	800d964 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	3301      	adds	r3, #1
 800b810:	617b      	str	r3, [r7, #20]
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	2b07      	cmp	r3, #7
 800b816:	d9c4      	bls.n	800b7a2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800b824:	bf00      	nop
 800b826:	3718      	adds	r7, #24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e025      	b.n	800b88c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d106      	bne.n	800b85a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7f7 ffb9 	bl	80037cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2202      	movs	r2, #2
 800b85e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	3304      	adds	r3, #4
 800b86a:	4619      	mov	r1, r3
 800b86c:	4610      	mov	r0, r2
 800b86e:	f001 ff7b 	bl	800d768 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6818      	ldr	r0, [r3, #0]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	461a      	mov	r2, r3
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	f001 ffd0 	bl	800d822 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d101      	bne.n	800b8a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e041      	b.n	800b92a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7f7 fdd2 	bl	8003464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	f000 fa7e 	bl	800bdd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
	...

0800b934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b942:	b2db      	uxtb	r3, r3
 800b944:	2b01      	cmp	r3, #1
 800b946:	d001      	beq.n	800b94c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	e04e      	b.n	800b9ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68da      	ldr	r2, [r3, #12]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f042 0201 	orr.w	r2, r2, #1
 800b962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a23      	ldr	r2, [pc, #140]	@ (800b9f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d022      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b976:	d01d      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a1f      	ldr	r2, [pc, #124]	@ (800b9fc <HAL_TIM_Base_Start_IT+0xc8>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d018      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a1e      	ldr	r2, [pc, #120]	@ (800ba00 <HAL_TIM_Base_Start_IT+0xcc>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d013      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a1c      	ldr	r2, [pc, #112]	@ (800ba04 <HAL_TIM_Base_Start_IT+0xd0>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d00e      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a1b      	ldr	r2, [pc, #108]	@ (800ba08 <HAL_TIM_Base_Start_IT+0xd4>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d009      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a19      	ldr	r2, [pc, #100]	@ (800ba0c <HAL_TIM_Base_Start_IT+0xd8>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d004      	beq.n	800b9b4 <HAL_TIM_Base_Start_IT+0x80>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a18      	ldr	r2, [pc, #96]	@ (800ba10 <HAL_TIM_Base_Start_IT+0xdc>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d111      	bne.n	800b9d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	f003 0307 	and.w	r3, r3, #7
 800b9be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b06      	cmp	r3, #6
 800b9c4:	d010      	beq.n	800b9e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f042 0201 	orr.w	r2, r2, #1
 800b9d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9d6:	e007      	b.n	800b9e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f042 0201 	orr.w	r2, r2, #1
 800b9e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3714      	adds	r7, #20
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	40010000 	.word	0x40010000
 800b9fc:	40000400 	.word	0x40000400
 800ba00:	40000800 	.word	0x40000800
 800ba04:	40000c00 	.word	0x40000c00
 800ba08:	40010400 	.word	0x40010400
 800ba0c:	40014000 	.word	0x40014000
 800ba10:	40001800 	.word	0x40001800

0800ba14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f003 0302 	and.w	r3, r3, #2
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d020      	beq.n	800ba78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f003 0302 	and.w	r3, r3, #2
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01b      	beq.n	800ba78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f06f 0202 	mvn.w	r2, #2
 800ba48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	699b      	ldr	r3, [r3, #24]
 800ba56:	f003 0303 	and.w	r3, r3, #3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 f999 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800ba64:	e005      	b.n	800ba72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f98b 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f99c 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	f003 0304 	and.w	r3, r3, #4
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d020      	beq.n	800bac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f003 0304 	and.w	r3, r3, #4
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d01b      	beq.n	800bac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f06f 0204 	mvn.w	r2, #4
 800ba94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2202      	movs	r2, #2
 800ba9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	699b      	ldr	r3, [r3, #24]
 800baa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 f973 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800bab0:	e005      	b.n	800babe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f965 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 f976 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	f003 0308 	and.w	r3, r3, #8
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d020      	beq.n	800bb10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f003 0308 	and.w	r3, r3, #8
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d01b      	beq.n	800bb10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f06f 0208 	mvn.w	r2, #8
 800bae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2204      	movs	r2, #4
 800bae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	f003 0303 	and.w	r3, r3, #3
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d003      	beq.n	800bafe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f94d 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800bafc:	e005      	b.n	800bb0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f93f 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 f950 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	f003 0310 	and.w	r3, r3, #16
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d020      	beq.n	800bb5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f003 0310 	and.w	r3, r3, #16
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d01b      	beq.n	800bb5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f06f 0210 	mvn.w	r2, #16
 800bb2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2208      	movs	r2, #8
 800bb32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d003      	beq.n	800bb4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f927 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800bb48:	e005      	b.n	800bb56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f919 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f92a 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00c      	beq.n	800bb80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d007      	beq.n	800bb80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f06f 0201 	mvn.w	r2, #1
 800bb78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7f7 f898 	bl	8002cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00c      	beq.n	800bba4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d007      	beq.n	800bba4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bb9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fae4 	bl	800c16c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00c      	beq.n	800bbc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d007      	beq.n	800bbc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bbc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f8fb 	bl	800bdbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	f003 0320 	and.w	r3, r3, #32
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00c      	beq.n	800bbec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f003 0320 	and.w	r3, r3, #32
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d007      	beq.n	800bbec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f06f 0220 	mvn.w	r2, #32
 800bbe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fab6 	bl	800c158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbec:	bf00      	nop
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d101      	bne.n	800bc10 <HAL_TIM_ConfigClockSource+0x1c>
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	e0b4      	b.n	800bd7a <HAL_TIM_ConfigClockSource+0x186>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bc2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc48:	d03e      	beq.n	800bcc8 <HAL_TIM_ConfigClockSource+0xd4>
 800bc4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc4e:	f200 8087 	bhi.w	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc56:	f000 8086 	beq.w	800bd66 <HAL_TIM_ConfigClockSource+0x172>
 800bc5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc5e:	d87f      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc60:	2b70      	cmp	r3, #112	@ 0x70
 800bc62:	d01a      	beq.n	800bc9a <HAL_TIM_ConfigClockSource+0xa6>
 800bc64:	2b70      	cmp	r3, #112	@ 0x70
 800bc66:	d87b      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc68:	2b60      	cmp	r3, #96	@ 0x60
 800bc6a:	d050      	beq.n	800bd0e <HAL_TIM_ConfigClockSource+0x11a>
 800bc6c:	2b60      	cmp	r3, #96	@ 0x60
 800bc6e:	d877      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc70:	2b50      	cmp	r3, #80	@ 0x50
 800bc72:	d03c      	beq.n	800bcee <HAL_TIM_ConfigClockSource+0xfa>
 800bc74:	2b50      	cmp	r3, #80	@ 0x50
 800bc76:	d873      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc78:	2b40      	cmp	r3, #64	@ 0x40
 800bc7a:	d058      	beq.n	800bd2e <HAL_TIM_ConfigClockSource+0x13a>
 800bc7c:	2b40      	cmp	r3, #64	@ 0x40
 800bc7e:	d86f      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc80:	2b30      	cmp	r3, #48	@ 0x30
 800bc82:	d064      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc84:	2b30      	cmp	r3, #48	@ 0x30
 800bc86:	d86b      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc88:	2b20      	cmp	r3, #32
 800bc8a:	d060      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc8c:	2b20      	cmp	r3, #32
 800bc8e:	d867      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d05c      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc94:	2b10      	cmp	r3, #16
 800bc96:	d05a      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc98:	e062      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcaa:	f000 f9b9 	bl	800c020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bcbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	609a      	str	r2, [r3, #8]
      break;
 800bcc6:	e04f      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcd8:	f000 f9a2 	bl	800c020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	689a      	ldr	r2, [r3, #8]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bcea:	609a      	str	r2, [r3, #8]
      break;
 800bcec:	e03c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	f000 f916 	bl	800bf2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2150      	movs	r1, #80	@ 0x50
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 f96f 	bl	800bfea <TIM_ITRx_SetConfig>
      break;
 800bd0c:	e02c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f000 f935 	bl	800bf8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2160      	movs	r1, #96	@ 0x60
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 f95f 	bl	800bfea <TIM_ITRx_SetConfig>
      break;
 800bd2c:	e01c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f000 f8f6 	bl	800bf2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2140      	movs	r1, #64	@ 0x40
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 f94f 	bl	800bfea <TIM_ITRx_SetConfig>
      break;
 800bd4c:	e00c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f000 f946 	bl	800bfea <TIM_ITRx_SetConfig>
      break;
 800bd5e:	e003      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	73fb      	strb	r3, [r7, #15]
      break;
 800bd64:	e000      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bd66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b083      	sub	sp, #12
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd8a:	bf00      	nop
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b083      	sub	sp, #12
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd9e:	bf00      	nop
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b083      	sub	sp, #12
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdb2:	bf00      	nop
 800bdb4:	370c      	adds	r7, #12
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b083      	sub	sp, #12
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
	...

0800bdd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a46      	ldr	r2, [pc, #280]	@ (800bf00 <TIM_Base_SetConfig+0x12c>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d013      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdf2:	d00f      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a43      	ldr	r2, [pc, #268]	@ (800bf04 <TIM_Base_SetConfig+0x130>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d00b      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a42      	ldr	r2, [pc, #264]	@ (800bf08 <TIM_Base_SetConfig+0x134>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d007      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a41      	ldr	r2, [pc, #260]	@ (800bf0c <TIM_Base_SetConfig+0x138>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d003      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a40      	ldr	r2, [pc, #256]	@ (800bf10 <TIM_Base_SetConfig+0x13c>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d108      	bne.n	800be26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	4313      	orrs	r3, r2
 800be24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a35      	ldr	r2, [pc, #212]	@ (800bf00 <TIM_Base_SetConfig+0x12c>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d02b      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be34:	d027      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a32      	ldr	r2, [pc, #200]	@ (800bf04 <TIM_Base_SetConfig+0x130>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d023      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a31      	ldr	r2, [pc, #196]	@ (800bf08 <TIM_Base_SetConfig+0x134>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d01f      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a30      	ldr	r2, [pc, #192]	@ (800bf0c <TIM_Base_SetConfig+0x138>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d01b      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a2f      	ldr	r2, [pc, #188]	@ (800bf10 <TIM_Base_SetConfig+0x13c>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d017      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a2e      	ldr	r2, [pc, #184]	@ (800bf14 <TIM_Base_SetConfig+0x140>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d013      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a2d      	ldr	r2, [pc, #180]	@ (800bf18 <TIM_Base_SetConfig+0x144>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d00f      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a2c      	ldr	r2, [pc, #176]	@ (800bf1c <TIM_Base_SetConfig+0x148>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d00b      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a2b      	ldr	r2, [pc, #172]	@ (800bf20 <TIM_Base_SetConfig+0x14c>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d007      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a2a      	ldr	r2, [pc, #168]	@ (800bf24 <TIM_Base_SetConfig+0x150>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d003      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a29      	ldr	r2, [pc, #164]	@ (800bf28 <TIM_Base_SetConfig+0x154>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d108      	bne.n	800be98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	4313      	orrs	r3, r2
 800be96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	689a      	ldr	r2, [r3, #8]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a10      	ldr	r2, [pc, #64]	@ (800bf00 <TIM_Base_SetConfig+0x12c>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d003      	beq.n	800becc <TIM_Base_SetConfig+0xf8>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a12      	ldr	r2, [pc, #72]	@ (800bf10 <TIM_Base_SetConfig+0x13c>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d103      	bne.n	800bed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	691a      	ldr	r2, [r3, #16]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d105      	bne.n	800bef2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	f023 0201 	bic.w	r2, r3, #1
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	611a      	str	r2, [r3, #16]
  }
}
 800bef2:	bf00      	nop
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	40010000 	.word	0x40010000
 800bf04:	40000400 	.word	0x40000400
 800bf08:	40000800 	.word	0x40000800
 800bf0c:	40000c00 	.word	0x40000c00
 800bf10:	40010400 	.word	0x40010400
 800bf14:	40014000 	.word	0x40014000
 800bf18:	40014400 	.word	0x40014400
 800bf1c:	40014800 	.word	0x40014800
 800bf20:	40001800 	.word	0x40001800
 800bf24:	40001c00 	.word	0x40001c00
 800bf28:	40002000 	.word	0x40002000

0800bf2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b087      	sub	sp, #28
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6a1b      	ldr	r3, [r3, #32]
 800bf3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	f023 0201 	bic.w	r2, r3, #1
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bf56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	011b      	lsls	r3, r3, #4
 800bf5c:	693a      	ldr	r2, [r7, #16]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	f023 030a 	bic.w	r3, r3, #10
 800bf68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	697a      	ldr	r2, [r7, #20]
 800bf7c:	621a      	str	r2, [r3, #32]
}
 800bf7e:	bf00      	nop
 800bf80:	371c      	adds	r7, #28
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b087      	sub	sp, #28
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	60f8      	str	r0, [r7, #12]
 800bf92:	60b9      	str	r1, [r7, #8]
 800bf94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6a1b      	ldr	r3, [r3, #32]
 800bfa0:	f023 0210 	bic.w	r2, r3, #16
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	699b      	ldr	r3, [r3, #24]
 800bfac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bfb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	031b      	lsls	r3, r3, #12
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bfc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	011b      	lsls	r3, r3, #4
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	621a      	str	r2, [r3, #32]
}
 800bfde:	bf00      	nop
 800bfe0:	371c      	adds	r7, #28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr

0800bfea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bfea:	b480      	push	{r7}
 800bfec:	b085      	sub	sp, #20
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c000:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	4313      	orrs	r3, r2
 800c008:	f043 0307 	orr.w	r3, r3, #7
 800c00c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	609a      	str	r2, [r3, #8]
}
 800c014:	bf00      	nop
 800c016:	3714      	adds	r7, #20
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c020:	b480      	push	{r7}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
 800c02c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c03a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	021a      	lsls	r2, r3, #8
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	431a      	orrs	r2, r3
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	4313      	orrs	r3, r2
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	697a      	ldr	r2, [r7, #20]
 800c052:	609a      	str	r2, [r3, #8]
}
 800c054:	bf00      	nop
 800c056:	371c      	adds	r7, #28
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c070:	2b01      	cmp	r3, #1
 800c072:	d101      	bne.n	800c078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c074:	2302      	movs	r3, #2
 800c076:	e05a      	b.n	800c12e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2202      	movs	r2, #2
 800c084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c09e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a21      	ldr	r2, [pc, #132]	@ (800c13c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d022      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0c4:	d01d      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a1d      	ldr	r2, [pc, #116]	@ (800c140 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d018      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a1b      	ldr	r2, [pc, #108]	@ (800c144 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d013      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a1a      	ldr	r2, [pc, #104]	@ (800c148 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d00e      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a18      	ldr	r2, [pc, #96]	@ (800c14c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d009      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a17      	ldr	r2, [pc, #92]	@ (800c150 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d004      	beq.n	800c102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a15      	ldr	r2, [pc, #84]	@ (800c154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d10c      	bne.n	800c11c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	68ba      	ldr	r2, [r7, #8]
 800c110:	4313      	orrs	r3, r2
 800c112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	40010000 	.word	0x40010000
 800c140:	40000400 	.word	0x40000400
 800c144:	40000800 	.word	0x40000800
 800c148:	40000c00 	.word	0x40000c00
 800c14c:	40010400 	.word	0x40010400
 800c150:	40014000 	.word	0x40014000
 800c154:	40001800 	.word	0x40001800

0800c158 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c160:	bf00      	nop
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c174:	bf00      	nop
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	e042      	b.n	800c218 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d106      	bne.n	800c1ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7f7 f97e 	bl	80034a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2224      	movs	r2, #36	@ 0x24
 800c1b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68da      	ldr	r2, [r3, #12]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c1c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f001 f85b 	bl	800d280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	691a      	ldr	r2, [r3, #16]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c1d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	695a      	ldr	r2, [r3, #20]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	68da      	ldr	r2, [r3, #12]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c1f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2220      	movs	r2, #32
 800c204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2220      	movs	r2, #32
 800c20c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b08a      	sub	sp, #40	@ 0x28
 800c224:	af02      	add	r7, sp, #8
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	603b      	str	r3, [r7, #0]
 800c22c:	4613      	mov	r3, r2
 800c22e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c230:	2300      	movs	r3, #0
 800c232:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	2b20      	cmp	r3, #32
 800c23e:	d175      	bne.n	800c32c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d002      	beq.n	800c24c <HAL_UART_Transmit+0x2c>
 800c246:	88fb      	ldrh	r3, [r7, #6]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	e06e      	b.n	800c32e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2221      	movs	r2, #33	@ 0x21
 800c25a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c25e:	f7f7 fd71 	bl	8003d44 <HAL_GetTick>
 800c262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	88fa      	ldrh	r2, [r7, #6]
 800c268:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	88fa      	ldrh	r2, [r7, #6]
 800c26e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c278:	d108      	bne.n	800c28c <HAL_UART_Transmit+0x6c>
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d104      	bne.n	800c28c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c282:	2300      	movs	r3, #0
 800c284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	61bb      	str	r3, [r7, #24]
 800c28a:	e003      	b.n	800c294 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c290:	2300      	movs	r3, #0
 800c292:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c294:	e02e      	b.n	800c2f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2200      	movs	r2, #0
 800c29e:	2180      	movs	r1, #128	@ 0x80
 800c2a0:	68f8      	ldr	r0, [r7, #12]
 800c2a2:	f000 fd34 	bl	800cd0e <UART_WaitOnFlagUntilTimeout>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d005      	beq.n	800c2b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2220      	movs	r2, #32
 800c2b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	e03a      	b.n	800c32e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10b      	bne.n	800c2d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	3302      	adds	r3, #2
 800c2d2:	61bb      	str	r3, [r7, #24]
 800c2d4:	e007      	b.n	800c2e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	781a      	ldrb	r2, [r3, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1cb      	bne.n	800c296 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2200      	movs	r2, #0
 800c306:	2140      	movs	r1, #64	@ 0x40
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f000 fd00 	bl	800cd0e <UART_WaitOnFlagUntilTimeout>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d005      	beq.n	800c320 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2220      	movs	r2, #32
 800c318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c31c:	2303      	movs	r3, #3
 800c31e:	e006      	b.n	800c32e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2220      	movs	r2, #32
 800c324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c328:	2300      	movs	r3, #0
 800c32a:	e000      	b.n	800c32e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c32c:	2302      	movs	r3, #2
  }
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3720      	adds	r7, #32
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
	...

0800c338 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08c      	sub	sp, #48	@ 0x30
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	4613      	mov	r3, r2
 800c344:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b20      	cmp	r3, #32
 800c350:	d156      	bne.n	800c400 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <HAL_UART_Transmit_DMA+0x26>
 800c358:	88fb      	ldrh	r3, [r7, #6]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e04f      	b.n	800c402 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	88fa      	ldrh	r2, [r7, #6]
 800c36c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	88fa      	ldrh	r2, [r7, #6]
 800c372:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2200      	movs	r2, #0
 800c378:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2221      	movs	r2, #33	@ 0x21
 800c37e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c386:	4a21      	ldr	r2, [pc, #132]	@ (800c40c <HAL_UART_Transmit_DMA+0xd4>)
 800c388:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c38e:	4a20      	ldr	r2, [pc, #128]	@ (800c410 <HAL_UART_Transmit_DMA+0xd8>)
 800c390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c396:	4a1f      	ldr	r2, [pc, #124]	@ (800c414 <HAL_UART_Transmit_DMA+0xdc>)
 800c398:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c39e:	2200      	movs	r2, #0
 800c3a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c3a2:	f107 0308 	add.w	r3, r7, #8
 800c3a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ae:	6819      	ldr	r1, [r3, #0]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	88fb      	ldrh	r3, [r7, #6]
 800c3ba:	f7f7 fe9f 	bl	80040fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c3c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	3314      	adds	r3, #20
 800c3ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	e853 3f00 	ldrex	r3, [r3]
 800c3d6:	617b      	str	r3, [r7, #20]
   return(result);
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3314      	adds	r3, #20
 800c3e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3e8:	627a      	str	r2, [r7, #36]	@ 0x24
 800c3ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ec:	6a39      	ldr	r1, [r7, #32]
 800c3ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3f0:	e841 2300 	strex	r3, r2, [r1]
 800c3f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1e5      	bne.n	800c3c8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	e000      	b.n	800c402 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800c400:	2302      	movs	r3, #2
  }
}
 800c402:	4618      	mov	r0, r3
 800c404:	3730      	adds	r7, #48	@ 0x30
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	0800ca5d 	.word	0x0800ca5d
 800c410:	0800caf7 	.word	0x0800caf7
 800c414:	0800cc7b 	.word	0x0800cc7b

0800c418 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08c      	sub	sp, #48	@ 0x30
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	4613      	mov	r3, r2
 800c424:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	2b20      	cmp	r3, #32
 800c430:	d14a      	bne.n	800c4c8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800c438:	88fb      	ldrh	r3, [r7, #6]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	e043      	b.n	800c4ca <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2201      	movs	r2, #1
 800c446:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c44e:	88fb      	ldrh	r3, [r7, #6]
 800c450:	461a      	mov	r2, r3
 800c452:	68b9      	ldr	r1, [r7, #8]
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f000 fcb3 	bl	800cdc0 <UART_Start_Receive_DMA>
 800c45a:	4603      	mov	r3, r0
 800c45c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c460:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c464:	2b00      	cmp	r3, #0
 800c466:	d12c      	bne.n	800c4c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d125      	bne.n	800c4bc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c470:	2300      	movs	r3, #0
 800c472:	613b      	str	r3, [r7, #16]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	613b      	str	r3, [r7, #16]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	613b      	str	r3, [r7, #16]
 800c484:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	330c      	adds	r3, #12
 800c48c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	e853 3f00 	ldrex	r3, [r3]
 800c494:	617b      	str	r3, [r7, #20]
   return(result);
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f043 0310 	orr.w	r3, r3, #16
 800c49c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	330c      	adds	r3, #12
 800c4a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4a6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c4a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4aa:	6a39      	ldr	r1, [r7, #32]
 800c4ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4ae:	e841 2300 	strex	r3, r2, [r1]
 800c4b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d1e5      	bne.n	800c486 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800c4ba:	e002      	b.n	800c4c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c4c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4c6:	e000      	b.n	800c4ca <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800c4c8:	2302      	movs	r3, #2
  }
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3730      	adds	r7, #48	@ 0x30
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
	...

0800c4d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b0ba      	sub	sp, #232	@ 0xe8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	695b      	ldr	r3, [r3, #20]
 800c4f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c500:	2300      	movs	r3, #0
 800c502:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c50a:	f003 030f 	and.w	r3, r3, #15
 800c50e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10f      	bne.n	800c53a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c51e:	f003 0320 	and.w	r3, r3, #32
 800c522:	2b00      	cmp	r3, #0
 800c524:	d009      	beq.n	800c53a <HAL_UART_IRQHandler+0x66>
 800c526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c52a:	f003 0320 	and.w	r3, r3, #32
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d003      	beq.n	800c53a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 fde5 	bl	800d102 <UART_Receive_IT>
      return;
 800c538:	e25b      	b.n	800c9f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c53a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f000 80de 	beq.w	800c700 <HAL_UART_IRQHandler+0x22c>
 800c544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d106      	bne.n	800c55e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c554:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 80d1 	beq.w	800c700 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00b      	beq.n	800c582 <HAL_UART_IRQHandler+0xae>
 800c56a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c56e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c572:	2b00      	cmp	r3, #0
 800c574:	d005      	beq.n	800c582 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c57a:	f043 0201 	orr.w	r2, r3, #1
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c586:	f003 0304 	and.w	r3, r3, #4
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00b      	beq.n	800c5a6 <HAL_UART_IRQHandler+0xd2>
 800c58e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	2b00      	cmp	r3, #0
 800c598:	d005      	beq.n	800c5a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c59e:	f043 0202 	orr.w	r2, r3, #2
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5aa:	f003 0302 	and.w	r3, r3, #2
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00b      	beq.n	800c5ca <HAL_UART_IRQHandler+0xf6>
 800c5b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5b6:	f003 0301 	and.w	r3, r3, #1
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d005      	beq.n	800c5ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5c2:	f043 0204 	orr.w	r2, r3, #4
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5ce:	f003 0308 	and.w	r3, r3, #8
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d011      	beq.n	800c5fa <HAL_UART_IRQHandler+0x126>
 800c5d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5da:	f003 0320 	and.w	r3, r3, #32
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d105      	bne.n	800c5ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c5e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d005      	beq.n	800c5fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5f2:	f043 0208 	orr.w	r2, r3, #8
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f000 81f2 	beq.w	800c9e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c608:	f003 0320 	and.w	r3, r3, #32
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d008      	beq.n	800c622 <HAL_UART_IRQHandler+0x14e>
 800c610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c614:	f003 0320 	and.w	r3, r3, #32
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d002      	beq.n	800c622 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 fd70 	bl	800d102 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	695b      	ldr	r3, [r3, #20]
 800c628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c62c:	2b40      	cmp	r3, #64	@ 0x40
 800c62e:	bf0c      	ite	eq
 800c630:	2301      	moveq	r3, #1
 800c632:	2300      	movne	r3, #0
 800c634:	b2db      	uxtb	r3, r3
 800c636:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c63e:	f003 0308 	and.w	r3, r3, #8
 800c642:	2b00      	cmp	r3, #0
 800c644:	d103      	bne.n	800c64e <HAL_UART_IRQHandler+0x17a>
 800c646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d04f      	beq.n	800c6ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fc78 	bl	800cf44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	695b      	ldr	r3, [r3, #20]
 800c65a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c65e:	2b40      	cmp	r3, #64	@ 0x40
 800c660:	d141      	bne.n	800c6e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	3314      	adds	r3, #20
 800c668:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c670:	e853 3f00 	ldrex	r3, [r3]
 800c674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c678:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c67c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c680:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	3314      	adds	r3, #20
 800c68a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c68e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c692:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c696:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c69a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c69e:	e841 2300 	strex	r3, r2, [r1]
 800c6a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c6a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1d9      	bne.n	800c662 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d013      	beq.n	800c6de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6ba:	4a7e      	ldr	r2, [pc, #504]	@ (800c8b4 <HAL_UART_IRQHandler+0x3e0>)
 800c6bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7f7 fde2 	bl	800428c <HAL_DMA_Abort_IT>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d016      	beq.n	800c6fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c6d8:	4610      	mov	r0, r2
 800c6da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6dc:	e00e      	b.n	800c6fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 f9b2 	bl	800ca48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6e4:	e00a      	b.n	800c6fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f9ae 	bl	800ca48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6ec:	e006      	b.n	800c6fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 f9aa 	bl	800ca48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c6fa:	e175      	b.n	800c9e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6fc:	bf00      	nop
    return;
 800c6fe:	e173      	b.n	800c9e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c704:	2b01      	cmp	r3, #1
 800c706:	f040 814f 	bne.w	800c9a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c70a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c70e:	f003 0310 	and.w	r3, r3, #16
 800c712:	2b00      	cmp	r3, #0
 800c714:	f000 8148 	beq.w	800c9a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c71c:	f003 0310 	and.w	r3, r3, #16
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 8141 	beq.w	800c9a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c726:	2300      	movs	r3, #0
 800c728:	60bb      	str	r3, [r7, #8]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	60bb      	str	r3, [r7, #8]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	60bb      	str	r3, [r7, #8]
 800c73a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	695b      	ldr	r3, [r3, #20]
 800c742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c746:	2b40      	cmp	r3, #64	@ 0x40
 800c748:	f040 80b6 	bne.w	800c8b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c758:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 8145 	beq.w	800c9ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c76a:	429a      	cmp	r2, r3
 800c76c:	f080 813e 	bcs.w	800c9ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c776:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c782:	f000 8088 	beq.w	800c896 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	330c      	adds	r3, #12
 800c78c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c790:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c794:	e853 3f00 	ldrex	r3, [r3]
 800c798:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c79c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c7a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	330c      	adds	r3, #12
 800c7ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c7b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c7b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c7be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c7c2:	e841 2300 	strex	r3, r2, [r1]
 800c7c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c7ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1d9      	bne.n	800c786 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	3314      	adds	r3, #20
 800c7d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7dc:	e853 3f00 	ldrex	r3, [r3]
 800c7e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c7e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c7e4:	f023 0301 	bic.w	r3, r3, #1
 800c7e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	3314      	adds	r3, #20
 800c7f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c7f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c7fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c7fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c802:	e841 2300 	strex	r3, r2, [r1]
 800c806:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1e1      	bne.n	800c7d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	3314      	adds	r3, #20
 800c814:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c816:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c818:	e853 3f00 	ldrex	r3, [r3]
 800c81c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c81e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	3314      	adds	r3, #20
 800c82e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c832:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c834:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c836:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c838:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c83a:	e841 2300 	strex	r3, r2, [r1]
 800c83e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c840:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1e3      	bne.n	800c80e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2220      	movs	r2, #32
 800c84a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	330c      	adds	r3, #12
 800c85a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c85c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c85e:	e853 3f00 	ldrex	r3, [r3]
 800c862:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c866:	f023 0310 	bic.w	r3, r3, #16
 800c86a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	330c      	adds	r3, #12
 800c874:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c878:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c87a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c87c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c87e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c880:	e841 2300 	strex	r3, r2, [r1]
 800c884:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1e3      	bne.n	800c854 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c890:	4618      	mov	r0, r3
 800c892:	f7f7 fc8b 	bl	80041ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2202      	movs	r2, #2
 800c89a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f7f5 fb39 	bl	8001f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c8b2:	e09b      	b.n	800c9ec <HAL_UART_IRQHandler+0x518>
 800c8b4:	0800d00b 	.word	0x0800d00b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	1ad3      	subs	r3, r2, r3
 800c8c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f000 808e 	beq.w	800c9f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c8d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f000 8089 	beq.w	800c9f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	330c      	adds	r3, #12
 800c8e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e8:	e853 3f00 	ldrex	r3, [r3]
 800c8ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	330c      	adds	r3, #12
 800c8fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c902:	647a      	str	r2, [r7, #68]	@ 0x44
 800c904:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c906:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c90a:	e841 2300 	strex	r3, r2, [r1]
 800c90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1e3      	bne.n	800c8de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	3314      	adds	r3, #20
 800c91c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c920:	e853 3f00 	ldrex	r3, [r3]
 800c924:	623b      	str	r3, [r7, #32]
   return(result);
 800c926:	6a3b      	ldr	r3, [r7, #32]
 800c928:	f023 0301 	bic.w	r3, r3, #1
 800c92c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	3314      	adds	r3, #20
 800c936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c93a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c93c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c942:	e841 2300 	strex	r3, r2, [r1]
 800c946:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1e3      	bne.n	800c916 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2220      	movs	r2, #32
 800c952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	330c      	adds	r3, #12
 800c962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	e853 3f00 	ldrex	r3, [r3]
 800c96a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f023 0310 	bic.w	r3, r3, #16
 800c972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	330c      	adds	r3, #12
 800c97c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c980:	61fa      	str	r2, [r7, #28]
 800c982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c984:	69b9      	ldr	r1, [r7, #24]
 800c986:	69fa      	ldr	r2, [r7, #28]
 800c988:	e841 2300 	strex	r3, r2, [r1]
 800c98c:	617b      	str	r3, [r7, #20]
   return(result);
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1e3      	bne.n	800c95c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2202      	movs	r2, #2
 800c998:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c99a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c99e:	4619      	mov	r1, r3
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7f5 fabf 	bl	8001f24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c9a6:	e023      	b.n	800c9f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d009      	beq.n	800c9c8 <HAL_UART_IRQHandler+0x4f4>
 800c9b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d003      	beq.n	800c9c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fb36 	bl	800d032 <UART_Transmit_IT>
    return;
 800c9c6:	e014      	b.n	800c9f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00e      	beq.n	800c9f2 <HAL_UART_IRQHandler+0x51e>
 800c9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d008      	beq.n	800c9f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fb76 	bl	800d0d2 <UART_EndTransmit_IT>
    return;
 800c9e6:	e004      	b.n	800c9f2 <HAL_UART_IRQHandler+0x51e>
    return;
 800c9e8:	bf00      	nop
 800c9ea:	e002      	b.n	800c9f2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c9ec:	bf00      	nop
 800c9ee:	e000      	b.n	800c9f2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c9f0:	bf00      	nop
  }
}
 800c9f2:	37e8      	adds	r7, #232	@ 0xe8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ca14:	bf00      	nop
 800ca16:	370c      	adds	r7, #12
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ca28:	bf00      	nop
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ca50:	bf00      	nop
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b090      	sub	sp, #64	@ 0x40
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d137      	bne.n	800cae8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ca78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	3314      	adds	r3, #20
 800ca84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca88:	e853 3f00 	ldrex	r3, [r3]
 800ca8c:	623b      	str	r3, [r7, #32]
   return(result);
 800ca8e:	6a3b      	ldr	r3, [r7, #32]
 800ca90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca94:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	3314      	adds	r3, #20
 800ca9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca9e:	633a      	str	r2, [r7, #48]	@ 0x30
 800caa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800caa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caa6:	e841 2300 	strex	r3, r2, [r1]
 800caaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800caac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1e5      	bne.n	800ca7e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	330c      	adds	r3, #12
 800cab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	e853 3f00 	ldrex	r3, [r3]
 800cac0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cac8:	637b      	str	r3, [r7, #52]	@ 0x34
 800caca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	330c      	adds	r3, #12
 800cad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cad2:	61fa      	str	r2, [r7, #28]
 800cad4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad6:	69b9      	ldr	r1, [r7, #24]
 800cad8:	69fa      	ldr	r2, [r7, #28]
 800cada:	e841 2300 	strex	r3, r2, [r1]
 800cade:	617b      	str	r3, [r7, #20]
   return(result);
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1e5      	bne.n	800cab2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cae6:	e002      	b.n	800caee <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cae8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800caea:	f7ff ff85 	bl	800c9f8 <HAL_UART_TxCpltCallback>
}
 800caee:	bf00      	nop
 800caf0:	3740      	adds	r7, #64	@ 0x40
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b084      	sub	sp, #16
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb02:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f7ff ff81 	bl	800ca0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb0a:	bf00      	nop
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b09c      	sub	sp, #112	@ 0x70
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb1e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d172      	bne.n	800cc14 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cb2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb30:	2200      	movs	r2, #0
 800cb32:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	330c      	adds	r3, #12
 800cb3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb3e:	e853 3f00 	ldrex	r3, [r3]
 800cb42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cb44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	330c      	adds	r3, #12
 800cb52:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb54:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cb56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb5c:	e841 2300 	strex	r3, r2, [r1]
 800cb60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cb62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1e5      	bne.n	800cb34 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	3314      	adds	r3, #20
 800cb6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb72:	e853 3f00 	ldrex	r3, [r3]
 800cb76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7a:	f023 0301 	bic.w	r3, r3, #1
 800cb7e:	667b      	str	r3, [r7, #100]	@ 0x64
 800cb80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3314      	adds	r3, #20
 800cb86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cb88:	647a      	str	r2, [r7, #68]	@ 0x44
 800cb8a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb90:	e841 2300 	strex	r3, r2, [r1]
 800cb94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1e5      	bne.n	800cb68 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	3314      	adds	r3, #20
 800cba2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba6:	e853 3f00 	ldrex	r3, [r3]
 800cbaa:	623b      	str	r3, [r7, #32]
   return(result);
 800cbac:	6a3b      	ldr	r3, [r7, #32]
 800cbae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbb2:	663b      	str	r3, [r7, #96]	@ 0x60
 800cbb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	3314      	adds	r3, #20
 800cbba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cbbc:	633a      	str	r2, [r7, #48]	@ 0x30
 800cbbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbc4:	e841 2300 	strex	r3, r2, [r1]
 800cbc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1e5      	bne.n	800cb9c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cbd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbd2:	2220      	movs	r2, #32
 800cbd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d119      	bne.n	800cc14 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	330c      	adds	r3, #12
 800cbe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	e853 3f00 	ldrex	r3, [r3]
 800cbee:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f023 0310 	bic.w	r3, r3, #16
 800cbf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cbf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cc00:	61fa      	str	r2, [r7, #28]
 800cc02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc04:	69b9      	ldr	r1, [r7, #24]
 800cc06:	69fa      	ldr	r2, [r7, #28]
 800cc08:	e841 2300 	strex	r3, r2, [r1]
 800cc0c:	617b      	str	r3, [r7, #20]
   return(result);
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1e5      	bne.n	800cbe0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc16:	2200      	movs	r2, #0
 800cc18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d106      	bne.n	800cc30 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cc26:	4619      	mov	r1, r3
 800cc28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cc2a:	f7f5 f97b 	bl	8001f24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc2e:	e002      	b.n	800cc36 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800cc30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cc32:	f7ff fef5 	bl	800ca20 <HAL_UART_RxCpltCallback>
}
 800cc36:	bf00      	nop
 800cc38:	3770      	adds	r7, #112	@ 0x70
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b084      	sub	sp, #16
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc4a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d108      	bne.n	800cc6c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cc5e:	085b      	lsrs	r3, r3, #1
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	4619      	mov	r1, r3
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f7f5 f95d 	bl	8001f24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc6a:	e002      	b.n	800cc72 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800cc6c:	68f8      	ldr	r0, [r7, #12]
 800cc6e:	f7ff fee1 	bl	800ca34 <HAL_UART_RxHalfCpltCallback>
}
 800cc72:	bf00      	nop
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b084      	sub	sp, #16
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cc82:	2300      	movs	r3, #0
 800cc84:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc8a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	695b      	ldr	r3, [r3, #20]
 800cc92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc96:	2b80      	cmp	r3, #128	@ 0x80
 800cc98:	bf0c      	ite	eq
 800cc9a:	2301      	moveq	r3, #1
 800cc9c:	2300      	movne	r3, #0
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	2b21      	cmp	r3, #33	@ 0x21
 800ccac:	d108      	bne.n	800ccc0 <UART_DMAError+0x46>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ccba:	68b8      	ldr	r0, [r7, #8]
 800ccbc:	f000 f91a 	bl	800cef4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccca:	2b40      	cmp	r3, #64	@ 0x40
 800cccc:	bf0c      	ite	eq
 800ccce:	2301      	moveq	r3, #1
 800ccd0:	2300      	movne	r3, #0
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	2b22      	cmp	r3, #34	@ 0x22
 800cce0:	d108      	bne.n	800ccf4 <UART_DMAError+0x7a>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d005      	beq.n	800ccf4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	2200      	movs	r2, #0
 800ccec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ccee:	68b8      	ldr	r0, [r7, #8]
 800ccf0:	f000 f928 	bl	800cf44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccf8:	f043 0210 	orr.w	r2, r3, #16
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd00:	68b8      	ldr	r0, [r7, #8]
 800cd02:	f7ff fea1 	bl	800ca48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd06:	bf00      	nop
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b086      	sub	sp, #24
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	60f8      	str	r0, [r7, #12]
 800cd16:	60b9      	str	r1, [r7, #8]
 800cd18:	603b      	str	r3, [r7, #0]
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd1e:	e03b      	b.n	800cd98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd26:	d037      	beq.n	800cd98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd28:	f7f7 f80c 	bl	8003d44 <HAL_GetTick>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	1ad3      	subs	r3, r2, r3
 800cd32:	6a3a      	ldr	r2, [r7, #32]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d302      	bcc.n	800cd3e <UART_WaitOnFlagUntilTimeout+0x30>
 800cd38:	6a3b      	ldr	r3, [r7, #32]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cd3e:	2303      	movs	r3, #3
 800cd40:	e03a      	b.n	800cdb8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	f003 0304 	and.w	r3, r3, #4
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d023      	beq.n	800cd98 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	2b80      	cmp	r3, #128	@ 0x80
 800cd54:	d020      	beq.n	800cd98 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2b40      	cmp	r3, #64	@ 0x40
 800cd5a:	d01d      	beq.n	800cd98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f003 0308 	and.w	r3, r3, #8
 800cd66:	2b08      	cmp	r3, #8
 800cd68:	d116      	bne.n	800cd98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	617b      	str	r3, [r7, #20]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	617b      	str	r3, [r7, #20]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	617b      	str	r3, [r7, #20]
 800cd7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f000 f8df 	bl	800cf44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2208      	movs	r2, #8
 800cd8a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	e00f      	b.n	800cdb8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	4013      	ands	r3, r2
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	bf0c      	ite	eq
 800cda8:	2301      	moveq	r3, #1
 800cdaa:	2300      	movne	r3, #0
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	461a      	mov	r2, r3
 800cdb0:	79fb      	ldrb	r3, [r7, #7]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d0b4      	beq.n	800cd20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3718      	adds	r7, #24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b098      	sub	sp, #96	@ 0x60
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	88fa      	ldrh	r2, [r7, #6]
 800cdd8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2200      	movs	r2, #0
 800cdde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2222      	movs	r2, #34	@ 0x22
 800cde4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdec:	4a3e      	ldr	r2, [pc, #248]	@ (800cee8 <UART_Start_Receive_DMA+0x128>)
 800cdee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdf4:	4a3d      	ldr	r2, [pc, #244]	@ (800ceec <UART_Start_Receive_DMA+0x12c>)
 800cdf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdfc:	4a3c      	ldr	r2, [pc, #240]	@ (800cef0 <UART_Start_Receive_DMA+0x130>)
 800cdfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce04:	2200      	movs	r2, #0
 800ce06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ce08:	f107 0308 	add.w	r3, r7, #8
 800ce0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	3304      	adds	r3, #4
 800ce18:	4619      	mov	r1, r3
 800ce1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	88fb      	ldrh	r3, [r7, #6]
 800ce20:	f7f7 f96c 	bl	80040fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ce24:	2300      	movs	r3, #0
 800ce26:	613b      	str	r3, [r7, #16]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	613b      	str	r3, [r7, #16]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	613b      	str	r3, [r7, #16]
 800ce38:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d019      	beq.n	800ce76 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	330c      	adds	r3, #12
 800ce48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce4c:	e853 3f00 	ldrex	r3, [r3]
 800ce50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce58:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	330c      	adds	r3, #12
 800ce60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce62:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ce64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce66:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ce68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ce6a:	e841 2300 	strex	r3, r2, [r1]
 800ce6e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ce70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1e5      	bne.n	800ce42 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3314      	adds	r3, #20
 800ce7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce80:	e853 3f00 	ldrex	r3, [r3]
 800ce84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce88:	f043 0301 	orr.w	r3, r3, #1
 800ce8c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	3314      	adds	r3, #20
 800ce94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce96:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ce98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ce9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce9e:	e841 2300 	strex	r3, r2, [r1]
 800cea2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1e5      	bne.n	800ce76 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	3314      	adds	r3, #20
 800ceb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	e853 3f00 	ldrex	r3, [r3]
 800ceb8:	617b      	str	r3, [r7, #20]
   return(result);
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cec0:	653b      	str	r3, [r7, #80]	@ 0x50
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	3314      	adds	r3, #20
 800cec8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ceca:	627a      	str	r2, [r7, #36]	@ 0x24
 800cecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cece:	6a39      	ldr	r1, [r7, #32]
 800ced0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ced2:	e841 2300 	strex	r3, r2, [r1]
 800ced6:	61fb      	str	r3, [r7, #28]
   return(result);
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1e5      	bne.n	800ceaa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3760      	adds	r7, #96	@ 0x60
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	0800cb13 	.word	0x0800cb13
 800ceec:	0800cc3f 	.word	0x0800cc3f
 800cef0:	0800cc7b 	.word	0x0800cc7b

0800cef4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b089      	sub	sp, #36	@ 0x24
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	330c      	adds	r3, #12
 800cf02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	e853 3f00 	ldrex	r3, [r3]
 800cf0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cf12:	61fb      	str	r3, [r7, #28]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	330c      	adds	r3, #12
 800cf1a:	69fa      	ldr	r2, [r7, #28]
 800cf1c:	61ba      	str	r2, [r7, #24]
 800cf1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf20:	6979      	ldr	r1, [r7, #20]
 800cf22:	69ba      	ldr	r2, [r7, #24]
 800cf24:	e841 2300 	strex	r3, r2, [r1]
 800cf28:	613b      	str	r3, [r7, #16]
   return(result);
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d1e5      	bne.n	800cefc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2220      	movs	r2, #32
 800cf34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800cf38:	bf00      	nop
 800cf3a:	3724      	adds	r7, #36	@ 0x24
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b095      	sub	sp, #84	@ 0x54
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	330c      	adds	r3, #12
 800cf52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf56:	e853 3f00 	ldrex	r3, [r3]
 800cf5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cf5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	330c      	adds	r3, #12
 800cf6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cf6c:	643a      	str	r2, [r7, #64]	@ 0x40
 800cf6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf74:	e841 2300 	strex	r3, r2, [r1]
 800cf78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cf7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1e5      	bne.n	800cf4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	3314      	adds	r3, #20
 800cf86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf88:	6a3b      	ldr	r3, [r7, #32]
 800cf8a:	e853 3f00 	ldrex	r3, [r3]
 800cf8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	f023 0301 	bic.w	r3, r3, #1
 800cf96:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3314      	adds	r3, #20
 800cf9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cfa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cfa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cfa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfa8:	e841 2300 	strex	r3, r2, [r1]
 800cfac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d1e5      	bne.n	800cf80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d119      	bne.n	800cff0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	330c      	adds	r3, #12
 800cfc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	e853 3f00 	ldrex	r3, [r3]
 800cfca:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	f023 0310 	bic.w	r3, r3, #16
 800cfd2:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	330c      	adds	r3, #12
 800cfda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfdc:	61ba      	str	r2, [r7, #24]
 800cfde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe0:	6979      	ldr	r1, [r7, #20]
 800cfe2:	69ba      	ldr	r2, [r7, #24]
 800cfe4:	e841 2300 	strex	r3, r2, [r1]
 800cfe8:	613b      	str	r3, [r7, #16]
   return(result);
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1e5      	bne.n	800cfbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2220      	movs	r2, #32
 800cff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cffe:	bf00      	nop
 800d000:	3754      	adds	r7, #84	@ 0x54
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b084      	sub	sp, #16
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d016:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f7ff fd0f 	bl	800ca48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d02a:	bf00      	nop
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d032:	b480      	push	{r7}
 800d034:	b085      	sub	sp, #20
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d040:	b2db      	uxtb	r3, r3
 800d042:	2b21      	cmp	r3, #33	@ 0x21
 800d044:	d13e      	bne.n	800d0c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d04e:	d114      	bne.n	800d07a <UART_Transmit_IT+0x48>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	691b      	ldr	r3, [r3, #16]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d110      	bne.n	800d07a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6a1b      	ldr	r3, [r3, #32]
 800d05c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	881b      	ldrh	r3, [r3, #0]
 800d062:	461a      	mov	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d06c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a1b      	ldr	r3, [r3, #32]
 800d072:	1c9a      	adds	r2, r3, #2
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	621a      	str	r2, [r3, #32]
 800d078:	e008      	b.n	800d08c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a1b      	ldr	r3, [r3, #32]
 800d07e:	1c59      	adds	r1, r3, #1
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	6211      	str	r1, [r2, #32]
 800d084:	781a      	ldrb	r2, [r3, #0]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d090:	b29b      	uxth	r3, r3
 800d092:	3b01      	subs	r3, #1
 800d094:	b29b      	uxth	r3, r3
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	4619      	mov	r1, r3
 800d09a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d10f      	bne.n	800d0c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	68da      	ldr	r2, [r3, #12]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d0ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68da      	ldr	r2, [r3, #12]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	e000      	b.n	800d0c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d0c4:	2302      	movs	r3, #2
  }
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b082      	sub	sp, #8
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	68da      	ldr	r2, [r3, #12]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d0e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2220      	movs	r2, #32
 800d0ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fc80 	bl	800c9f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b08c      	sub	sp, #48	@ 0x30
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d110:	b2db      	uxtb	r3, r3
 800d112:	2b22      	cmp	r3, #34	@ 0x22
 800d114:	f040 80ae 	bne.w	800d274 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d120:	d117      	bne.n	800d152 <UART_Receive_IT+0x50>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d113      	bne.n	800d152 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d12a:	2300      	movs	r3, #0
 800d12c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d132:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d140:	b29a      	uxth	r2, r3
 800d142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d144:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d14a:	1c9a      	adds	r2, r3, #2
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	629a      	str	r2, [r3, #40]	@ 0x28
 800d150:	e026      	b.n	800d1a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d156:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d158:	2300      	movs	r3, #0
 800d15a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d164:	d007      	beq.n	800d176 <UART_Receive_IT+0x74>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d10a      	bne.n	800d184 <UART_Receive_IT+0x82>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d106      	bne.n	800d184 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d180:	701a      	strb	r2, [r3, #0]
 800d182:	e008      	b.n	800d196 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d190:	b2da      	uxtb	r2, r3
 800d192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d194:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d19a:	1c5a      	adds	r2, r3, #1
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d15d      	bne.n	800d270 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	68da      	ldr	r2, [r3, #12]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f022 0220 	bic.w	r2, r2, #32
 800d1c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	68da      	ldr	r2, [r3, #12]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d1d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	695a      	ldr	r2, [r3, #20]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f022 0201 	bic.w	r2, r2, #1
 800d1e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2220      	movs	r2, #32
 800d1e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d135      	bne.n	800d266 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	330c      	adds	r3, #12
 800d206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	e853 3f00 	ldrex	r3, [r3]
 800d20e:	613b      	str	r3, [r7, #16]
   return(result);
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	f023 0310 	bic.w	r3, r3, #16
 800d216:	627b      	str	r3, [r7, #36]	@ 0x24
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	330c      	adds	r3, #12
 800d21e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d220:	623a      	str	r2, [r7, #32]
 800d222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d224:	69f9      	ldr	r1, [r7, #28]
 800d226:	6a3a      	ldr	r2, [r7, #32]
 800d228:	e841 2300 	strex	r3, r2, [r1]
 800d22c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1e5      	bne.n	800d200 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f003 0310 	and.w	r3, r3, #16
 800d23e:	2b10      	cmp	r3, #16
 800d240:	d10a      	bne.n	800d258 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d242:	2300      	movs	r3, #0
 800d244:	60fb      	str	r3, [r7, #12]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	60fb      	str	r3, [r7, #12]
 800d256:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d25c:	4619      	mov	r1, r3
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f7f4 fe60 	bl	8001f24 <HAL_UARTEx_RxEventCallback>
 800d264:	e002      	b.n	800d26c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff fbda 	bl	800ca20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d26c:	2300      	movs	r3, #0
 800d26e:	e002      	b.n	800d276 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d270:	2300      	movs	r3, #0
 800d272:	e000      	b.n	800d276 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d274:	2302      	movs	r3, #2
  }
}
 800d276:	4618      	mov	r0, r3
 800d278:	3730      	adds	r7, #48	@ 0x30
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
	...

0800d280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d284:	b0c0      	sub	sp, #256	@ 0x100
 800d286:	af00      	add	r7, sp, #0
 800d288:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d28c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	691b      	ldr	r3, [r3, #16]
 800d294:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d29c:	68d9      	ldr	r1, [r3, #12]
 800d29e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	ea40 0301 	orr.w	r3, r0, r1
 800d2a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d2aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2ae:	689a      	ldr	r2, [r3, #8]
 800d2b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2bc:	695b      	ldr	r3, [r3, #20]
 800d2be:	431a      	orrs	r2, r3
 800d2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2c4:	69db      	ldr	r3, [r3, #28]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d2d8:	f021 010c 	bic.w	r1, r1, #12
 800d2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d2e6:	430b      	orrs	r3, r1
 800d2e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d2ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d2f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2fa:	6999      	ldr	r1, [r3, #24]
 800d2fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	ea40 0301 	orr.w	r3, r0, r1
 800d306:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	4b8f      	ldr	r3, [pc, #572]	@ (800d54c <UART_SetConfig+0x2cc>)
 800d310:	429a      	cmp	r2, r3
 800d312:	d005      	beq.n	800d320 <UART_SetConfig+0xa0>
 800d314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	4b8d      	ldr	r3, [pc, #564]	@ (800d550 <UART_SetConfig+0x2d0>)
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d104      	bne.n	800d32a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d320:	f7fc f9d8 	bl	80096d4 <HAL_RCC_GetPCLK2Freq>
 800d324:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d328:	e003      	b.n	800d332 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d32a:	f7fc f9bf 	bl	80096ac <HAL_RCC_GetPCLK1Freq>
 800d32e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d336:	69db      	ldr	r3, [r3, #28]
 800d338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d33c:	f040 810c 	bne.w	800d558 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d344:	2200      	movs	r2, #0
 800d346:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d34a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d34e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d352:	4622      	mov	r2, r4
 800d354:	462b      	mov	r3, r5
 800d356:	1891      	adds	r1, r2, r2
 800d358:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d35a:	415b      	adcs	r3, r3
 800d35c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d35e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d362:	4621      	mov	r1, r4
 800d364:	eb12 0801 	adds.w	r8, r2, r1
 800d368:	4629      	mov	r1, r5
 800d36a:	eb43 0901 	adc.w	r9, r3, r1
 800d36e:	f04f 0200 	mov.w	r2, #0
 800d372:	f04f 0300 	mov.w	r3, #0
 800d376:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d37a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d37e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d382:	4690      	mov	r8, r2
 800d384:	4699      	mov	r9, r3
 800d386:	4623      	mov	r3, r4
 800d388:	eb18 0303 	adds.w	r3, r8, r3
 800d38c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d390:	462b      	mov	r3, r5
 800d392:	eb49 0303 	adc.w	r3, r9, r3
 800d396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d39a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d3a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d3aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	18db      	adds	r3, r3, r3
 800d3b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3b4:	4613      	mov	r3, r2
 800d3b6:	eb42 0303 	adc.w	r3, r2, r3
 800d3ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800d3bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d3c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d3c4:	f7f2 ff74 	bl	80002b0 <__aeabi_uldivmod>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4b61      	ldr	r3, [pc, #388]	@ (800d554 <UART_SetConfig+0x2d4>)
 800d3ce:	fba3 2302 	umull	r2, r3, r3, r2
 800d3d2:	095b      	lsrs	r3, r3, #5
 800d3d4:	011c      	lsls	r4, r3, #4
 800d3d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d3e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d3e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d3e8:	4642      	mov	r2, r8
 800d3ea:	464b      	mov	r3, r9
 800d3ec:	1891      	adds	r1, r2, r2
 800d3ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d3f0:	415b      	adcs	r3, r3
 800d3f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d3f8:	4641      	mov	r1, r8
 800d3fa:	eb12 0a01 	adds.w	sl, r2, r1
 800d3fe:	4649      	mov	r1, r9
 800d400:	eb43 0b01 	adc.w	fp, r3, r1
 800d404:	f04f 0200 	mov.w	r2, #0
 800d408:	f04f 0300 	mov.w	r3, #0
 800d40c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d410:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d414:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d418:	4692      	mov	sl, r2
 800d41a:	469b      	mov	fp, r3
 800d41c:	4643      	mov	r3, r8
 800d41e:	eb1a 0303 	adds.w	r3, sl, r3
 800d422:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d426:	464b      	mov	r3, r9
 800d428:	eb4b 0303 	adc.w	r3, fp, r3
 800d42c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d43c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d440:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d444:	460b      	mov	r3, r1
 800d446:	18db      	adds	r3, r3, r3
 800d448:	643b      	str	r3, [r7, #64]	@ 0x40
 800d44a:	4613      	mov	r3, r2
 800d44c:	eb42 0303 	adc.w	r3, r2, r3
 800d450:	647b      	str	r3, [r7, #68]	@ 0x44
 800d452:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d456:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d45a:	f7f2 ff29 	bl	80002b0 <__aeabi_uldivmod>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	4611      	mov	r1, r2
 800d464:	4b3b      	ldr	r3, [pc, #236]	@ (800d554 <UART_SetConfig+0x2d4>)
 800d466:	fba3 2301 	umull	r2, r3, r3, r1
 800d46a:	095b      	lsrs	r3, r3, #5
 800d46c:	2264      	movs	r2, #100	@ 0x64
 800d46e:	fb02 f303 	mul.w	r3, r2, r3
 800d472:	1acb      	subs	r3, r1, r3
 800d474:	00db      	lsls	r3, r3, #3
 800d476:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d47a:	4b36      	ldr	r3, [pc, #216]	@ (800d554 <UART_SetConfig+0x2d4>)
 800d47c:	fba3 2302 	umull	r2, r3, r3, r2
 800d480:	095b      	lsrs	r3, r3, #5
 800d482:	005b      	lsls	r3, r3, #1
 800d484:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d488:	441c      	add	r4, r3
 800d48a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d48e:	2200      	movs	r2, #0
 800d490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d494:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d498:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d49c:	4642      	mov	r2, r8
 800d49e:	464b      	mov	r3, r9
 800d4a0:	1891      	adds	r1, r2, r2
 800d4a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d4a4:	415b      	adcs	r3, r3
 800d4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d4ac:	4641      	mov	r1, r8
 800d4ae:	1851      	adds	r1, r2, r1
 800d4b0:	6339      	str	r1, [r7, #48]	@ 0x30
 800d4b2:	4649      	mov	r1, r9
 800d4b4:	414b      	adcs	r3, r1
 800d4b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4b8:	f04f 0200 	mov.w	r2, #0
 800d4bc:	f04f 0300 	mov.w	r3, #0
 800d4c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d4c4:	4659      	mov	r1, fp
 800d4c6:	00cb      	lsls	r3, r1, #3
 800d4c8:	4651      	mov	r1, sl
 800d4ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d4ce:	4651      	mov	r1, sl
 800d4d0:	00ca      	lsls	r2, r1, #3
 800d4d2:	4610      	mov	r0, r2
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	4642      	mov	r2, r8
 800d4da:	189b      	adds	r3, r3, r2
 800d4dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d4e0:	464b      	mov	r3, r9
 800d4e2:	460a      	mov	r2, r1
 800d4e4:	eb42 0303 	adc.w	r3, r2, r3
 800d4e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d4ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d4f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d4fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d500:	460b      	mov	r3, r1
 800d502:	18db      	adds	r3, r3, r3
 800d504:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d506:	4613      	mov	r3, r2
 800d508:	eb42 0303 	adc.w	r3, r2, r3
 800d50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d50e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d512:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d516:	f7f2 fecb 	bl	80002b0 <__aeabi_uldivmod>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4b0d      	ldr	r3, [pc, #52]	@ (800d554 <UART_SetConfig+0x2d4>)
 800d520:	fba3 1302 	umull	r1, r3, r3, r2
 800d524:	095b      	lsrs	r3, r3, #5
 800d526:	2164      	movs	r1, #100	@ 0x64
 800d528:	fb01 f303 	mul.w	r3, r1, r3
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	00db      	lsls	r3, r3, #3
 800d530:	3332      	adds	r3, #50	@ 0x32
 800d532:	4a08      	ldr	r2, [pc, #32]	@ (800d554 <UART_SetConfig+0x2d4>)
 800d534:	fba2 2303 	umull	r2, r3, r2, r3
 800d538:	095b      	lsrs	r3, r3, #5
 800d53a:	f003 0207 	and.w	r2, r3, #7
 800d53e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4422      	add	r2, r4
 800d546:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d548:	e106      	b.n	800d758 <UART_SetConfig+0x4d8>
 800d54a:	bf00      	nop
 800d54c:	40011000 	.word	0x40011000
 800d550:	40011400 	.word	0x40011400
 800d554:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d55c:	2200      	movs	r2, #0
 800d55e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d562:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d566:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d56a:	4642      	mov	r2, r8
 800d56c:	464b      	mov	r3, r9
 800d56e:	1891      	adds	r1, r2, r2
 800d570:	6239      	str	r1, [r7, #32]
 800d572:	415b      	adcs	r3, r3
 800d574:	627b      	str	r3, [r7, #36]	@ 0x24
 800d576:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d57a:	4641      	mov	r1, r8
 800d57c:	1854      	adds	r4, r2, r1
 800d57e:	4649      	mov	r1, r9
 800d580:	eb43 0501 	adc.w	r5, r3, r1
 800d584:	f04f 0200 	mov.w	r2, #0
 800d588:	f04f 0300 	mov.w	r3, #0
 800d58c:	00eb      	lsls	r3, r5, #3
 800d58e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d592:	00e2      	lsls	r2, r4, #3
 800d594:	4614      	mov	r4, r2
 800d596:	461d      	mov	r5, r3
 800d598:	4643      	mov	r3, r8
 800d59a:	18e3      	adds	r3, r4, r3
 800d59c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d5a0:	464b      	mov	r3, r9
 800d5a2:	eb45 0303 	adc.w	r3, r5, r3
 800d5a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d5b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d5ba:	f04f 0200 	mov.w	r2, #0
 800d5be:	f04f 0300 	mov.w	r3, #0
 800d5c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	008b      	lsls	r3, r1, #2
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	008a      	lsls	r2, r1, #2
 800d5d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d5d8:	f7f2 fe6a 	bl	80002b0 <__aeabi_uldivmod>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	460b      	mov	r3, r1
 800d5e0:	4b60      	ldr	r3, [pc, #384]	@ (800d764 <UART_SetConfig+0x4e4>)
 800d5e2:	fba3 2302 	umull	r2, r3, r3, r2
 800d5e6:	095b      	lsrs	r3, r3, #5
 800d5e8:	011c      	lsls	r4, r3, #4
 800d5ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d5f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d5f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d5fc:	4642      	mov	r2, r8
 800d5fe:	464b      	mov	r3, r9
 800d600:	1891      	adds	r1, r2, r2
 800d602:	61b9      	str	r1, [r7, #24]
 800d604:	415b      	adcs	r3, r3
 800d606:	61fb      	str	r3, [r7, #28]
 800d608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d60c:	4641      	mov	r1, r8
 800d60e:	1851      	adds	r1, r2, r1
 800d610:	6139      	str	r1, [r7, #16]
 800d612:	4649      	mov	r1, r9
 800d614:	414b      	adcs	r3, r1
 800d616:	617b      	str	r3, [r7, #20]
 800d618:	f04f 0200 	mov.w	r2, #0
 800d61c:	f04f 0300 	mov.w	r3, #0
 800d620:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d624:	4659      	mov	r1, fp
 800d626:	00cb      	lsls	r3, r1, #3
 800d628:	4651      	mov	r1, sl
 800d62a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d62e:	4651      	mov	r1, sl
 800d630:	00ca      	lsls	r2, r1, #3
 800d632:	4610      	mov	r0, r2
 800d634:	4619      	mov	r1, r3
 800d636:	4603      	mov	r3, r0
 800d638:	4642      	mov	r2, r8
 800d63a:	189b      	adds	r3, r3, r2
 800d63c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d640:	464b      	mov	r3, r9
 800d642:	460a      	mov	r2, r1
 800d644:	eb42 0303 	adc.w	r3, r2, r3
 800d648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d656:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d658:	f04f 0200 	mov.w	r2, #0
 800d65c:	f04f 0300 	mov.w	r3, #0
 800d660:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d664:	4649      	mov	r1, r9
 800d666:	008b      	lsls	r3, r1, #2
 800d668:	4641      	mov	r1, r8
 800d66a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d66e:	4641      	mov	r1, r8
 800d670:	008a      	lsls	r2, r1, #2
 800d672:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d676:	f7f2 fe1b 	bl	80002b0 <__aeabi_uldivmod>
 800d67a:	4602      	mov	r2, r0
 800d67c:	460b      	mov	r3, r1
 800d67e:	4611      	mov	r1, r2
 800d680:	4b38      	ldr	r3, [pc, #224]	@ (800d764 <UART_SetConfig+0x4e4>)
 800d682:	fba3 2301 	umull	r2, r3, r3, r1
 800d686:	095b      	lsrs	r3, r3, #5
 800d688:	2264      	movs	r2, #100	@ 0x64
 800d68a:	fb02 f303 	mul.w	r3, r2, r3
 800d68e:	1acb      	subs	r3, r1, r3
 800d690:	011b      	lsls	r3, r3, #4
 800d692:	3332      	adds	r3, #50	@ 0x32
 800d694:	4a33      	ldr	r2, [pc, #204]	@ (800d764 <UART_SetConfig+0x4e4>)
 800d696:	fba2 2303 	umull	r2, r3, r2, r3
 800d69a:	095b      	lsrs	r3, r3, #5
 800d69c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d6a0:	441c      	add	r4, r3
 800d6a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d6aa:	677a      	str	r2, [r7, #116]	@ 0x74
 800d6ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d6b0:	4642      	mov	r2, r8
 800d6b2:	464b      	mov	r3, r9
 800d6b4:	1891      	adds	r1, r2, r2
 800d6b6:	60b9      	str	r1, [r7, #8]
 800d6b8:	415b      	adcs	r3, r3
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d6c0:	4641      	mov	r1, r8
 800d6c2:	1851      	adds	r1, r2, r1
 800d6c4:	6039      	str	r1, [r7, #0]
 800d6c6:	4649      	mov	r1, r9
 800d6c8:	414b      	adcs	r3, r1
 800d6ca:	607b      	str	r3, [r7, #4]
 800d6cc:	f04f 0200 	mov.w	r2, #0
 800d6d0:	f04f 0300 	mov.w	r3, #0
 800d6d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d6d8:	4659      	mov	r1, fp
 800d6da:	00cb      	lsls	r3, r1, #3
 800d6dc:	4651      	mov	r1, sl
 800d6de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d6e2:	4651      	mov	r1, sl
 800d6e4:	00ca      	lsls	r2, r1, #3
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	4642      	mov	r2, r8
 800d6ee:	189b      	adds	r3, r3, r2
 800d6f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d6f2:	464b      	mov	r3, r9
 800d6f4:	460a      	mov	r2, r1
 800d6f6:	eb42 0303 	adc.w	r3, r2, r3
 800d6fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d6fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	663b      	str	r3, [r7, #96]	@ 0x60
 800d706:	667a      	str	r2, [r7, #100]	@ 0x64
 800d708:	f04f 0200 	mov.w	r2, #0
 800d70c:	f04f 0300 	mov.w	r3, #0
 800d710:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d714:	4649      	mov	r1, r9
 800d716:	008b      	lsls	r3, r1, #2
 800d718:	4641      	mov	r1, r8
 800d71a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d71e:	4641      	mov	r1, r8
 800d720:	008a      	lsls	r2, r1, #2
 800d722:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d726:	f7f2 fdc3 	bl	80002b0 <__aeabi_uldivmod>
 800d72a:	4602      	mov	r2, r0
 800d72c:	460b      	mov	r3, r1
 800d72e:	4b0d      	ldr	r3, [pc, #52]	@ (800d764 <UART_SetConfig+0x4e4>)
 800d730:	fba3 1302 	umull	r1, r3, r3, r2
 800d734:	095b      	lsrs	r3, r3, #5
 800d736:	2164      	movs	r1, #100	@ 0x64
 800d738:	fb01 f303 	mul.w	r3, r1, r3
 800d73c:	1ad3      	subs	r3, r2, r3
 800d73e:	011b      	lsls	r3, r3, #4
 800d740:	3332      	adds	r3, #50	@ 0x32
 800d742:	4a08      	ldr	r2, [pc, #32]	@ (800d764 <UART_SetConfig+0x4e4>)
 800d744:	fba2 2303 	umull	r2, r3, r2, r3
 800d748:	095b      	lsrs	r3, r3, #5
 800d74a:	f003 020f 	and.w	r2, r3, #15
 800d74e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4422      	add	r2, r4
 800d756:	609a      	str	r2, [r3, #8]
}
 800d758:	bf00      	nop
 800d75a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d75e:	46bd      	mov	sp, r7
 800d760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d764:	51eb851f 	.word	0x51eb851f

0800d768 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d123      	bne.n	800d7c2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800d782:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d786:	683a      	ldr	r2, [r7, #0]
 800d788:	6851      	ldr	r1, [r2, #4]
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	6892      	ldr	r2, [r2, #8]
 800d78e:	4311      	orrs	r1, r2
 800d790:	683a      	ldr	r2, [r7, #0]
 800d792:	68d2      	ldr	r2, [r2, #12]
 800d794:	4311      	orrs	r1, r2
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	6912      	ldr	r2, [r2, #16]
 800d79a:	4311      	orrs	r1, r2
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	6952      	ldr	r2, [r2, #20]
 800d7a0:	4311      	orrs	r1, r2
 800d7a2:	683a      	ldr	r2, [r7, #0]
 800d7a4:	6992      	ldr	r2, [r2, #24]
 800d7a6:	4311      	orrs	r1, r2
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	69d2      	ldr	r2, [r2, #28]
 800d7ac:	4311      	orrs	r1, r2
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	6a12      	ldr	r2, [r2, #32]
 800d7b2:	4311      	orrs	r1, r2
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d7b8:	430a      	orrs	r2, r1
 800d7ba:	431a      	orrs	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	601a      	str	r2, [r3, #0]
 800d7c0:	e028      	b.n	800d814 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	69d9      	ldr	r1, [r3, #28]
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	6a1b      	ldr	r3, [r3, #32]
 800d7d2:	4319      	orrs	r1, r3
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d8:	430b      	orrs	r3, r1
 800d7da:	431a      	orrs	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800d7e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d7ec:	683a      	ldr	r2, [r7, #0]
 800d7ee:	6851      	ldr	r1, [r2, #4]
 800d7f0:	683a      	ldr	r2, [r7, #0]
 800d7f2:	6892      	ldr	r2, [r2, #8]
 800d7f4:	4311      	orrs	r1, r2
 800d7f6:	683a      	ldr	r2, [r7, #0]
 800d7f8:	68d2      	ldr	r2, [r2, #12]
 800d7fa:	4311      	orrs	r1, r2
 800d7fc:	683a      	ldr	r2, [r7, #0]
 800d7fe:	6912      	ldr	r2, [r2, #16]
 800d800:	4311      	orrs	r1, r2
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	6952      	ldr	r2, [r2, #20]
 800d806:	4311      	orrs	r1, r2
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	6992      	ldr	r2, [r2, #24]
 800d80c:	430a      	orrs	r2, r1
 800d80e:	431a      	orrs	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	370c      	adds	r7, #12
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d822:	b480      	push	{r7}
 800d824:	b085      	sub	sp, #20
 800d826:	af00      	add	r7, sp, #0
 800d828:	60f8      	str	r0, [r7, #12]
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d128      	bne.n	800d886 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	1e59      	subs	r1, r3, #1
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	3b01      	subs	r3, #1
 800d848:	011b      	lsls	r3, r3, #4
 800d84a:	4319      	orrs	r1, r3
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	3b01      	subs	r3, #1
 800d852:	021b      	lsls	r3, r3, #8
 800d854:	4319      	orrs	r1, r3
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	3b01      	subs	r3, #1
 800d85c:	031b      	lsls	r3, r3, #12
 800d85e:	4319      	orrs	r1, r3
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	691b      	ldr	r3, [r3, #16]
 800d864:	3b01      	subs	r3, #1
 800d866:	041b      	lsls	r3, r3, #16
 800d868:	4319      	orrs	r1, r3
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	695b      	ldr	r3, [r3, #20]
 800d86e:	3b01      	subs	r3, #1
 800d870:	051b      	lsls	r3, r3, #20
 800d872:	4319      	orrs	r1, r3
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	699b      	ldr	r3, [r3, #24]
 800d878:	3b01      	subs	r3, #1
 800d87a:	061b      	lsls	r3, r3, #24
 800d87c:	430b      	orrs	r3, r1
 800d87e:	431a      	orrs	r2, r3
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	609a      	str	r2, [r3, #8]
 800d884:	e02f      	b.n	800d8e6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d88e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	68d2      	ldr	r2, [r2, #12]
 800d896:	3a01      	subs	r2, #1
 800d898:	0311      	lsls	r1, r2, #12
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	6952      	ldr	r2, [r2, #20]
 800d89e:	3a01      	subs	r2, #1
 800d8a0:	0512      	lsls	r2, r2, #20
 800d8a2:	430a      	orrs	r2, r1
 800d8a4:	431a      	orrs	r2, r3
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	1e59      	subs	r1, r3, #1
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	011b      	lsls	r3, r3, #4
 800d8c0:	4319      	orrs	r1, r3
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	021b      	lsls	r3, r3, #8
 800d8ca:	4319      	orrs	r1, r3
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	041b      	lsls	r3, r3, #16
 800d8d4:	4319      	orrs	r1, r3
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	061b      	lsls	r3, r3, #24
 800d8de:	430b      	orrs	r3, r1
 800d8e0:	431a      	orrs	r2, r3
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d8e6:	2300      	movs	r3, #0
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3714      	adds	r7, #20
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d8f4:	b084      	sub	sp, #16
 800d8f6:	b480      	push	{r7}
 800d8f8:	b085      	sub	sp, #20
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
 800d8fe:	f107 001c 	add.w	r0, r7, #28
 800d902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d90a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d90c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d90e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d912:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d916:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d91a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d91e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	4313      	orrs	r3, r2
 800d924:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800d92e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	431a      	orrs	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3714      	adds	r7, #20
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	b004      	add	sp, #16
 800d948:	4770      	bx	lr

0800d94a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b083      	sub	sp, #12
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d958:	4618      	mov	r0, r3
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d986:	b480      	push	{r7}
 800d988:	b083      	sub	sp, #12
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2203      	movs	r2, #3
 800d992:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d994:	2300      	movs	r3, #0
}
 800d996:	4618      	mov	r0, r3
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f003 0303 	and.w	r3, r3, #3
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	370c      	adds	r7, #12
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr

0800d9be <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d9be:	b480      	push	{r7}
 800d9c0:	b085      	sub	sp, #20
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
 800d9c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d9dc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d9e2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d9e8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d9f8:	f023 030f 	bic.w	r3, r3, #15
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	431a      	orrs	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800da12:	b480      	push	{r7}
 800da14:	b083      	sub	sp, #12
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	b2db      	uxtb	r3, r3
}
 800da20:	4618      	mov	r0, r3
 800da22:	370c      	adds	r7, #12
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	3314      	adds	r3, #20
 800da3a:	461a      	mov	r2, r3
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	4413      	add	r3, r2
 800da40:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
}  
 800da46:	4618      	mov	r0, r3
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800da52:	b480      	push	{r7}
 800da54:	b085      	sub	sp, #20
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da5c:	2300      	movs	r3, #0
 800da5e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da78:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800da7e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800da84:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	4313      	orrs	r3, r2
 800da8a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da90:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	431a      	orrs	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800da9c:	2300      	movs	r3, #0

}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3714      	adds	r7, #20
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr

0800daaa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b088      	sub	sp, #32
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
 800dab2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dab8:	2310      	movs	r3, #16
 800daba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dabc:	2340      	movs	r3, #64	@ 0x40
 800dabe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dac0:	2300      	movs	r3, #0
 800dac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dac8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800daca:	f107 0308 	add.w	r3, r7, #8
 800dace:	4619      	mov	r1, r3
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7ff ff74 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800dad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dada:	2110      	movs	r1, #16
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f000 f9d7 	bl	800de90 <SDMMC_GetCmdResp1>
 800dae2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dae4:	69fb      	ldr	r3, [r7, #28]
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3720      	adds	r7, #32
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b088      	sub	sp, #32
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dafc:	2311      	movs	r3, #17
 800dafe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db00:	2340      	movs	r3, #64	@ 0x40
 800db02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db04:	2300      	movs	r3, #0
 800db06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db0e:	f107 0308 	add.w	r3, r7, #8
 800db12:	4619      	mov	r1, r3
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f7ff ff52 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800db1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db1e:	2111      	movs	r1, #17
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f9b5 	bl	800de90 <SDMMC_GetCmdResp1>
 800db26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db28:	69fb      	ldr	r3, [r7, #28]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3720      	adds	r7, #32
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800db32:	b580      	push	{r7, lr}
 800db34:	b088      	sub	sp, #32
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800db40:	2312      	movs	r3, #18
 800db42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db44:	2340      	movs	r3, #64	@ 0x40
 800db46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db48:	2300      	movs	r3, #0
 800db4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db52:	f107 0308 	add.w	r3, r7, #8
 800db56:	4619      	mov	r1, r3
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7ff ff30 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800db5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db62:	2112      	movs	r1, #18
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 f993 	bl	800de90 <SDMMC_GetCmdResp1>
 800db6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db6c:	69fb      	ldr	r3, [r7, #28]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3720      	adds	r7, #32
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b088      	sub	sp, #32
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
 800db7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800db84:	2318      	movs	r3, #24
 800db86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db88:	2340      	movs	r3, #64	@ 0x40
 800db8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db8c:	2300      	movs	r3, #0
 800db8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db96:	f107 0308 	add.w	r3, r7, #8
 800db9a:	4619      	mov	r1, r3
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff ff0e 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dba6:	2118      	movs	r1, #24
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 f971 	bl	800de90 <SDMMC_GetCmdResp1>
 800dbae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbb0:	69fb      	ldr	r3, [r7, #28]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3720      	adds	r7, #32
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b088      	sub	sp, #32
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dbc8:	2319      	movs	r3, #25
 800dbca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dbcc:	2340      	movs	r3, #64	@ 0x40
 800dbce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbda:	f107 0308 	add.w	r3, r7, #8
 800dbde:	4619      	mov	r1, r3
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7ff feec 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dbe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbea:	2119      	movs	r1, #25
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 f94f 	bl	800de90 <SDMMC_GetCmdResp1>
 800dbf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbf4:	69fb      	ldr	r3, [r7, #28]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3720      	adds	r7, #32
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
	...

0800dc00 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b088      	sub	sp, #32
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dc0c:	230c      	movs	r3, #12
 800dc0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc10:	2340      	movs	r3, #64	@ 0x40
 800dc12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc14:	2300      	movs	r3, #0
 800dc16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc1e:	f107 0308 	add.w	r3, r7, #8
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f7ff feca 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800dc2a:	4a05      	ldr	r2, [pc, #20]	@ (800dc40 <SDMMC_CmdStopTransfer+0x40>)
 800dc2c:	210c      	movs	r1, #12
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f92e 	bl	800de90 <SDMMC_GetCmdResp1>
 800dc34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc36:	69fb      	ldr	r3, [r7, #28]
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3720      	adds	r7, #32
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	05f5e100 	.word	0x05f5e100

0800dc44 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b08a      	sub	sp, #40	@ 0x28
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dc54:	2307      	movs	r3, #7
 800dc56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc58:	2340      	movs	r3, #64	@ 0x40
 800dc5a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc64:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc66:	f107 0310 	add.w	r3, r7, #16
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f7ff fea6 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800dc72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc76:	2107      	movs	r1, #7
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f000 f909 	bl	800de90 <SDMMC_GetCmdResp1>
 800dc7e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800dc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3728      	adds	r7, #40	@ 0x28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b088      	sub	sp, #32
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dc92:	2300      	movs	r3, #0
 800dc94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dc96:	2300      	movs	r3, #0
 800dc98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dca6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dca8:	f107 0308 	add.w	r3, r7, #8
 800dcac:	4619      	mov	r1, r3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f7ff fe85 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fb23 	bl	800e300 <SDMMC_GetCmdError>
 800dcba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcbc:	69fb      	ldr	r3, [r7, #28]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3720      	adds	r7, #32
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b088      	sub	sp, #32
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dcce:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800dcd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dcd4:	2308      	movs	r3, #8
 800dcd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dcd8:	2340      	movs	r3, #64	@ 0x40
 800dcda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dce0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dce4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dce6:	f107 0308 	add.w	r3, r7, #8
 800dcea:	4619      	mov	r1, r3
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f7ff fe66 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 fab6 	bl	800e264 <SDMMC_GetCmdResp7>
 800dcf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcfa:	69fb      	ldr	r3, [r7, #28]
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3720      	adds	r7, #32
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b088      	sub	sp, #32
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dd12:	2337      	movs	r3, #55	@ 0x37
 800dd14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd16:	2340      	movs	r3, #64	@ 0x40
 800dd18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd24:	f107 0308 	add.w	r3, r7, #8
 800dd28:	4619      	mov	r1, r3
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7ff fe47 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800dd30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd34:	2137      	movs	r1, #55	@ 0x37
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f000 f8aa 	bl	800de90 <SDMMC_GetCmdResp1>
 800dd3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd3e:	69fb      	ldr	r3, [r7, #28]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3720      	adds	r7, #32
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b088      	sub	sp, #32
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dd58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dd5e:	2329      	movs	r3, #41	@ 0x29
 800dd60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd62:	2340      	movs	r3, #64	@ 0x40
 800dd64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd66:	2300      	movs	r3, #0
 800dd68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd70:	f107 0308 	add.w	r3, r7, #8
 800dd74:	4619      	mov	r1, r3
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff fe21 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 f9bd 	bl	800e0fc <SDMMC_GetCmdResp3>
 800dd82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd84:	69fb      	ldr	r3, [r7, #28]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3720      	adds	r7, #32
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b088      	sub	sp, #32
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dd96:	2300      	movs	r3, #0
 800dd98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dd9a:	2302      	movs	r3, #2
 800dd9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dd9e:	23c0      	movs	r3, #192	@ 0xc0
 800dda0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dda2:	2300      	movs	r3, #0
 800dda4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dda6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ddaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddac:	f107 0308 	add.w	r3, r7, #8
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7ff fe03 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f000 f957 	bl	800e06c <SDMMC_GetCmdResp2>
 800ddbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddc0:	69fb      	ldr	r3, [r7, #28]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3720      	adds	r7, #32
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b088      	sub	sp, #32
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
 800ddd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ddd8:	2309      	movs	r3, #9
 800ddda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dddc:	23c0      	movs	r3, #192	@ 0xc0
 800ddde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dde0:	2300      	movs	r3, #0
 800dde2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dde4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dde8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddea:	f107 0308 	add.w	r3, r7, #8
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7ff fde4 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 f938 	bl	800e06c <SDMMC_GetCmdResp2>
 800ddfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddfe:	69fb      	ldr	r3, [r7, #28]
}
 800de00:	4618      	mov	r0, r3
 800de02:	3720      	adds	r7, #32
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b088      	sub	sp, #32
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800de12:	2300      	movs	r3, #0
 800de14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800de16:	2303      	movs	r3, #3
 800de18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de1a:	2340      	movs	r3, #64	@ 0x40
 800de1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de1e:	2300      	movs	r3, #0
 800de20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de28:	f107 0308 	add.w	r3, r7, #8
 800de2c:	4619      	mov	r1, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7ff fdc5 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de34:	683a      	ldr	r2, [r7, #0]
 800de36:	2103      	movs	r1, #3
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f99d 	bl	800e178 <SDMMC_GetCmdResp6>
 800de3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de40:	69fb      	ldr	r3, [r7, #28]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3720      	adds	r7, #32
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b088      	sub	sp, #32
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
 800de52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800de58:	230d      	movs	r3, #13
 800de5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de5c:	2340      	movs	r3, #64	@ 0x40
 800de5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de60:	2300      	movs	r3, #0
 800de62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de6a:	f107 0308 	add.w	r3, r7, #8
 800de6e:	4619      	mov	r1, r3
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f7ff fda4 	bl	800d9be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800de76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de7a:	210d      	movs	r1, #13
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 f807 	bl	800de90 <SDMMC_GetCmdResp1>
 800de82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de84:	69fb      	ldr	r3, [r7, #28]
}
 800de86:	4618      	mov	r0, r3
 800de88:	3720      	adds	r7, #32
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
	...

0800de90 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b088      	sub	sp, #32
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	460b      	mov	r3, r1
 800de9a:	607a      	str	r2, [r7, #4]
 800de9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800de9e:	4b70      	ldr	r3, [pc, #448]	@ (800e060 <SDMMC_GetCmdResp1+0x1d0>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a70      	ldr	r2, [pc, #448]	@ (800e064 <SDMMC_GetCmdResp1+0x1d4>)
 800dea4:	fba2 2303 	umull	r2, r3, r2, r3
 800dea8:	0a5a      	lsrs	r2, r3, #9
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	fb02 f303 	mul.w	r3, r2, r3
 800deb0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	1e5a      	subs	r2, r3, #1
 800deb6:	61fa      	str	r2, [r7, #28]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d102      	bne.n	800dec2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800debc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dec0:	e0c9      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dec6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d0ef      	beq.n	800deb2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d1ea      	bne.n	800deb2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dee0:	f003 0304 	and.w	r3, r3, #4
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d004      	beq.n	800def2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2204      	movs	r2, #4
 800deec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800deee:	2304      	movs	r3, #4
 800def0:	e0b1      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800def6:	f003 0301 	and.w	r3, r3, #1
 800defa:	2b00      	cmp	r3, #0
 800defc:	d004      	beq.n	800df08 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2201      	movs	r2, #1
 800df02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df04:	2301      	movs	r3, #1
 800df06:	e0a6      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	22c5      	movs	r2, #197	@ 0xc5
 800df0c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f7ff fd7f 	bl	800da12 <SDIO_GetCommandResponse>
 800df14:	4603      	mov	r3, r0
 800df16:	461a      	mov	r2, r3
 800df18:	7afb      	ldrb	r3, [r7, #11]
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d001      	beq.n	800df22 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df1e:	2301      	movs	r3, #1
 800df20:	e099      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800df22:	2100      	movs	r1, #0
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f7ff fd81 	bl	800da2c <SDIO_GetResponse>
 800df2a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df2c:	697a      	ldr	r2, [r7, #20]
 800df2e:	4b4e      	ldr	r3, [pc, #312]	@ (800e068 <SDMMC_GetCmdResp1+0x1d8>)
 800df30:	4013      	ands	r3, r2
 800df32:	2b00      	cmp	r3, #0
 800df34:	d101      	bne.n	800df3a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800df36:	2300      	movs	r3, #0
 800df38:	e08d      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	da02      	bge.n	800df46 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800df40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800df44:	e087      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d001      	beq.n	800df54 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800df50:	2340      	movs	r3, #64	@ 0x40
 800df52:	e080      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d001      	beq.n	800df62 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800df5e:	2380      	movs	r3, #128	@ 0x80
 800df60:	e079      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800df6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800df70:	e071      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d002      	beq.n	800df82 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800df7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df80:	e069      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d002      	beq.n	800df92 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800df8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df90:	e061      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d002      	beq.n	800dfa2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800df9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dfa0:	e059      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d002      	beq.n	800dfb2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dfac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dfb0:	e051      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d002      	beq.n	800dfc2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dfbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dfc0:	e049      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dfcc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800dfd0:	e041      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d002      	beq.n	800dfe2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800dfdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dfe0:	e039      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d002      	beq.n	800dff2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dfec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800dff0:	e031      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dffc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e000:	e029      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e00c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e010:	e021      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d002      	beq.n	800e022 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e01c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e020:	e019      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d002      	beq.n	800e032 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e02c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e030:	e011      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d002      	beq.n	800e042 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e03c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e040:	e009      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	f003 0308 	and.w	r3, r3, #8
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d002      	beq.n	800e052 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e04c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e050:	e001      	b.n	800e056 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e052:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e056:	4618      	mov	r0, r3
 800e058:	3720      	adds	r7, #32
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	20000000 	.word	0x20000000
 800e064:	10624dd3 	.word	0x10624dd3
 800e068:	fdffe008 	.word	0xfdffe008

0800e06c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e074:	4b1f      	ldr	r3, [pc, #124]	@ (800e0f4 <SDMMC_GetCmdResp2+0x88>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a1f      	ldr	r2, [pc, #124]	@ (800e0f8 <SDMMC_GetCmdResp2+0x8c>)
 800e07a:	fba2 2303 	umull	r2, r3, r2, r3
 800e07e:	0a5b      	lsrs	r3, r3, #9
 800e080:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e084:	fb02 f303 	mul.w	r3, r2, r3
 800e088:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	1e5a      	subs	r2, r3, #1
 800e08e:	60fa      	str	r2, [r7, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d102      	bne.n	800e09a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e094:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e098:	e026      	b.n	800e0e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e09e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d0ef      	beq.n	800e08a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d1ea      	bne.n	800e08a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0b8:	f003 0304 	and.w	r3, r3, #4
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d004      	beq.n	800e0ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2204      	movs	r2, #4
 800e0c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0c6:	2304      	movs	r3, #4
 800e0c8:	e00e      	b.n	800e0e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d004      	beq.n	800e0e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	e003      	b.n	800e0e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	22c5      	movs	r2, #197	@ 0xc5
 800e0e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e0e6:	2300      	movs	r3, #0
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3714      	adds	r7, #20
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr
 800e0f4:	20000000 	.word	0x20000000
 800e0f8:	10624dd3 	.word	0x10624dd3

0800e0fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e104:	4b1a      	ldr	r3, [pc, #104]	@ (800e170 <SDMMC_GetCmdResp3+0x74>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a1a      	ldr	r2, [pc, #104]	@ (800e174 <SDMMC_GetCmdResp3+0x78>)
 800e10a:	fba2 2303 	umull	r2, r3, r2, r3
 800e10e:	0a5b      	lsrs	r3, r3, #9
 800e110:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e114:	fb02 f303 	mul.w	r3, r2, r3
 800e118:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	1e5a      	subs	r2, r3, #1
 800e11e:	60fa      	str	r2, [r7, #12]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d102      	bne.n	800e12a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e124:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e128:	e01b      	b.n	800e162 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e12e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e136:	2b00      	cmp	r3, #0
 800e138:	d0ef      	beq.n	800e11a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e140:	2b00      	cmp	r3, #0
 800e142:	d1ea      	bne.n	800e11a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e148:	f003 0304 	and.w	r3, r3, #4
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d004      	beq.n	800e15a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2204      	movs	r2, #4
 800e154:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e156:	2304      	movs	r3, #4
 800e158:	e003      	b.n	800e162 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	22c5      	movs	r2, #197	@ 0xc5
 800e15e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3714      	adds	r7, #20
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr
 800e16e:	bf00      	nop
 800e170:	20000000 	.word	0x20000000
 800e174:	10624dd3 	.word	0x10624dd3

0800e178 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	460b      	mov	r3, r1
 800e182:	607a      	str	r2, [r7, #4]
 800e184:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e186:	4b35      	ldr	r3, [pc, #212]	@ (800e25c <SDMMC_GetCmdResp6+0xe4>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a35      	ldr	r2, [pc, #212]	@ (800e260 <SDMMC_GetCmdResp6+0xe8>)
 800e18c:	fba2 2303 	umull	r2, r3, r2, r3
 800e190:	0a5b      	lsrs	r3, r3, #9
 800e192:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e196:	fb02 f303 	mul.w	r3, r2, r3
 800e19a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	1e5a      	subs	r2, r3, #1
 800e1a0:	61fa      	str	r2, [r7, #28]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d102      	bne.n	800e1ac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e1aa:	e052      	b.n	800e252 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1b0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d0ef      	beq.n	800e19c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d1ea      	bne.n	800e19c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1ca:	f003 0304 	and.w	r3, r3, #4
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d004      	beq.n	800e1dc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2204      	movs	r2, #4
 800e1d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1d8:	2304      	movs	r3, #4
 800e1da:	e03a      	b.n	800e252 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1e0:	f003 0301 	and.w	r3, r3, #1
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d004      	beq.n	800e1f2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e02f      	b.n	800e252 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f7ff fc0d 	bl	800da12 <SDIO_GetCommandResponse>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	7afb      	ldrb	r3, [r7, #11]
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d001      	beq.n	800e206 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e202:	2301      	movs	r3, #1
 800e204:	e025      	b.n	800e252 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	22c5      	movs	r2, #197	@ 0xc5
 800e20a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e20c:	2100      	movs	r1, #0
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f7ff fc0c 	bl	800da2c <SDIO_GetResponse>
 800e214:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d106      	bne.n	800e22e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	0c1b      	lsrs	r3, r3, #16
 800e224:	b29a      	uxth	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e22a:	2300      	movs	r3, #0
 800e22c:	e011      	b.n	800e252 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e238:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e23c:	e009      	b.n	800e252 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e244:	2b00      	cmp	r3, #0
 800e246:	d002      	beq.n	800e24e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e24c:	e001      	b.n	800e252 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e24e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e252:	4618      	mov	r0, r3
 800e254:	3720      	adds	r7, #32
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	20000000 	.word	0x20000000
 800e260:	10624dd3 	.word	0x10624dd3

0800e264 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e264:	b480      	push	{r7}
 800e266:	b085      	sub	sp, #20
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e26c:	4b22      	ldr	r3, [pc, #136]	@ (800e2f8 <SDMMC_GetCmdResp7+0x94>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a22      	ldr	r2, [pc, #136]	@ (800e2fc <SDMMC_GetCmdResp7+0x98>)
 800e272:	fba2 2303 	umull	r2, r3, r2, r3
 800e276:	0a5b      	lsrs	r3, r3, #9
 800e278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e27c:	fb02 f303 	mul.w	r3, r2, r3
 800e280:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	1e5a      	subs	r2, r3, #1
 800e286:	60fa      	str	r2, [r7, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d102      	bne.n	800e292 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e28c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e290:	e02c      	b.n	800e2ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e296:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d0ef      	beq.n	800e282 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d1ea      	bne.n	800e282 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2b0:	f003 0304 	and.w	r3, r3, #4
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d004      	beq.n	800e2c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2204      	movs	r2, #4
 800e2bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2be:	2304      	movs	r3, #4
 800e2c0:	e014      	b.n	800e2ec <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2c6:	f003 0301 	and.w	r3, r3, #1
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d004      	beq.n	800e2d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	e009      	b.n	800e2ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2240      	movs	r2, #64	@ 0x40
 800e2e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e2ea:	2300      	movs	r3, #0
  
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3714      	adds	r7, #20
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr
 800e2f8:	20000000 	.word	0x20000000
 800e2fc:	10624dd3 	.word	0x10624dd3

0800e300 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e308:	4b11      	ldr	r3, [pc, #68]	@ (800e350 <SDMMC_GetCmdError+0x50>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a11      	ldr	r2, [pc, #68]	@ (800e354 <SDMMC_GetCmdError+0x54>)
 800e30e:	fba2 2303 	umull	r2, r3, r2, r3
 800e312:	0a5b      	lsrs	r3, r3, #9
 800e314:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e318:	fb02 f303 	mul.w	r3, r2, r3
 800e31c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	1e5a      	subs	r2, r3, #1
 800e322:	60fa      	str	r2, [r7, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d102      	bne.n	800e32e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e328:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e32c:	e009      	b.n	800e342 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e336:	2b00      	cmp	r3, #0
 800e338:	d0f1      	beq.n	800e31e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	22c5      	movs	r2, #197	@ 0xc5
 800e33e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3714      	adds	r7, #20
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	20000000 	.word	0x20000000
 800e354:	10624dd3 	.word	0x10624dd3

0800e358 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e358:	b084      	sub	sp, #16
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b084      	sub	sp, #16
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
 800e362:	f107 001c 	add.w	r0, r7, #28
 800e366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e36a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d123      	bne.n	800e3ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e376:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800e386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e39a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d105      	bne.n	800e3ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 f9dc 	bl	800e76c <USB_CoreReset>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	73fb      	strb	r3, [r7, #15]
 800e3b8:	e01b      	b.n	800e3f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 f9d0 	bl	800e76c <USB_CoreReset>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e3d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d106      	bne.n	800e3e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	639a      	str	r2, [r3, #56]	@ 0x38
 800e3e4:	e005      	b.n	800e3f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e3f2:	7fbb      	ldrb	r3, [r7, #30]
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d10b      	bne.n	800e410 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	689b      	ldr	r3, [r3, #8]
 800e3fc:	f043 0206 	orr.w	r2, r3, #6
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	f043 0220 	orr.w	r2, r3, #32
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e410:	7bfb      	ldrb	r3, [r7, #15]
}
 800e412:	4618      	mov	r0, r3
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e41c:	b004      	add	sp, #16
 800e41e:	4770      	bx	lr

0800e420 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	f043 0201 	orr.w	r2, r3, #1
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	370c      	adds	r7, #12
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr

0800e442 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e442:	b480      	push	{r7}
 800e444:	b083      	sub	sp, #12
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	f023 0201 	bic.w	r2, r3, #1
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	370c      	adds	r7, #12
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	460b      	mov	r3, r1
 800e46e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e470:	2300      	movs	r3, #0
 800e472:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e480:	78fb      	ldrb	r3, [r7, #3]
 800e482:	2b01      	cmp	r3, #1
 800e484:	d115      	bne.n	800e4b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e492:	200a      	movs	r0, #10
 800e494:	f7f5 fc62 	bl	8003d5c <HAL_Delay>
      ms += 10U;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	330a      	adds	r3, #10
 800e49c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 f956 	bl	800e750 <USB_GetMode>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d01e      	beq.n	800e4e8 <USB_SetCurrentMode+0x84>
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2bc7      	cmp	r3, #199	@ 0xc7
 800e4ae:	d9f0      	bls.n	800e492 <USB_SetCurrentMode+0x2e>
 800e4b0:	e01a      	b.n	800e4e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e4b2:	78fb      	ldrb	r3, [r7, #3]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d115      	bne.n	800e4e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e4c4:	200a      	movs	r0, #10
 800e4c6:	f7f5 fc49 	bl	8003d5c <HAL_Delay>
      ms += 10U;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	330a      	adds	r3, #10
 800e4ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 f93d 	bl	800e750 <USB_GetMode>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d005      	beq.n	800e4e8 <USB_SetCurrentMode+0x84>
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2bc7      	cmp	r3, #199	@ 0xc7
 800e4e0:	d9f0      	bls.n	800e4c4 <USB_SetCurrentMode+0x60>
 800e4e2:	e001      	b.n	800e4e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e005      	b.n	800e4f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2bc8      	cmp	r3, #200	@ 0xc8
 800e4ec:	d101      	bne.n	800e4f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e000      	b.n	800e4f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e4f2:	2300      	movs	r3, #0
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b085      	sub	sp, #20
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e506:	2300      	movs	r3, #0
 800e508:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	3301      	adds	r3, #1
 800e50e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e516:	d901      	bls.n	800e51c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e518:	2303      	movs	r3, #3
 800e51a:	e01b      	b.n	800e554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	691b      	ldr	r3, [r3, #16]
 800e520:	2b00      	cmp	r3, #0
 800e522:	daf2      	bge.n	800e50a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e524:	2300      	movs	r3, #0
 800e526:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	019b      	lsls	r3, r3, #6
 800e52c:	f043 0220 	orr.w	r2, r3, #32
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3301      	adds	r3, #1
 800e538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e540:	d901      	bls.n	800e546 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e542:	2303      	movs	r3, #3
 800e544:	e006      	b.n	800e554 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	691b      	ldr	r3, [r3, #16]
 800e54a:	f003 0320 	and.w	r3, r3, #32
 800e54e:	2b20      	cmp	r3, #32
 800e550:	d0f0      	beq.n	800e534 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3714      	adds	r7, #20
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e560:	b480      	push	{r7}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e568:	2300      	movs	r3, #0
 800e56a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	3301      	adds	r3, #1
 800e570:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e578:	d901      	bls.n	800e57e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e57a:	2303      	movs	r3, #3
 800e57c:	e018      	b.n	800e5b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	691b      	ldr	r3, [r3, #16]
 800e582:	2b00      	cmp	r3, #0
 800e584:	daf2      	bge.n	800e56c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e586:	2300      	movs	r3, #0
 800e588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2210      	movs	r2, #16
 800e58e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	3301      	adds	r3, #1
 800e594:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e59c:	d901      	bls.n	800e5a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e59e:	2303      	movs	r3, #3
 800e5a0:	e006      	b.n	800e5b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	691b      	ldr	r3, [r3, #16]
 800e5a6:	f003 0310 	and.w	r3, r3, #16
 800e5aa:	2b10      	cmp	r3, #16
 800e5ac:	d0f0      	beq.n	800e590 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e5ae:	2300      	movs	r3, #0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3714      	adds	r7, #20
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr

0800e5bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b089      	sub	sp, #36	@ 0x24
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	4611      	mov	r1, r2
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	71fb      	strb	r3, [r7, #7]
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e5da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d123      	bne.n	800e62a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e5e2:	88bb      	ldrh	r3, [r7, #4]
 800e5e4:	3303      	adds	r3, #3
 800e5e6:	089b      	lsrs	r3, r3, #2
 800e5e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	61bb      	str	r3, [r7, #24]
 800e5ee:	e018      	b.n	800e622 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e5f0:	79fb      	ldrb	r3, [r7, #7]
 800e5f2:	031a      	lsls	r2, r3, #12
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	3301      	adds	r3, #1
 800e608:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e60a:	69fb      	ldr	r3, [r7, #28]
 800e60c:	3301      	adds	r3, #1
 800e60e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	3301      	adds	r3, #1
 800e614:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	3301      	adds	r3, #1
 800e61a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e61c:	69bb      	ldr	r3, [r7, #24]
 800e61e:	3301      	adds	r3, #1
 800e620:	61bb      	str	r3, [r7, #24]
 800e622:	69ba      	ldr	r2, [r7, #24]
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	429a      	cmp	r2, r3
 800e628:	d3e2      	bcc.n	800e5f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3724      	adds	r7, #36	@ 0x24
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e638:	b480      	push	{r7}
 800e63a:	b08b      	sub	sp, #44	@ 0x2c
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	4613      	mov	r3, r2
 800e644:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e64e:	88fb      	ldrh	r3, [r7, #6]
 800e650:	089b      	lsrs	r3, r3, #2
 800e652:	b29b      	uxth	r3, r3
 800e654:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e656:	88fb      	ldrh	r3, [r7, #6]
 800e658:	f003 0303 	and.w	r3, r3, #3
 800e65c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e65e:	2300      	movs	r3, #0
 800e660:	623b      	str	r3, [r7, #32]
 800e662:	e014      	b.n	800e68e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e664:	69bb      	ldr	r3, [r7, #24]
 800e666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e66e:	601a      	str	r2, [r3, #0]
    pDest++;
 800e670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e672:	3301      	adds	r3, #1
 800e674:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e678:	3301      	adds	r3, #1
 800e67a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67e:	3301      	adds	r3, #1
 800e680:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e684:	3301      	adds	r3, #1
 800e686:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e688:	6a3b      	ldr	r3, [r7, #32]
 800e68a:	3301      	adds	r3, #1
 800e68c:	623b      	str	r3, [r7, #32]
 800e68e:	6a3a      	ldr	r2, [r7, #32]
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	429a      	cmp	r2, r3
 800e694:	d3e6      	bcc.n	800e664 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e696:	8bfb      	ldrh	r3, [r7, #30]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d01e      	beq.n	800e6da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e69c:	2300      	movs	r3, #0
 800e69e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e6a0:	69bb      	ldr	r3, [r7, #24]
 800e6a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	f107 0310 	add.w	r3, r7, #16
 800e6ac:	6812      	ldr	r2, [r2, #0]
 800e6ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e6b0:	693a      	ldr	r2, [r7, #16]
 800e6b2:	6a3b      	ldr	r3, [r7, #32]
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	00db      	lsls	r3, r3, #3
 800e6b8:	fa22 f303 	lsr.w	r3, r2, r3
 800e6bc:	b2da      	uxtb	r2, r3
 800e6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c0:	701a      	strb	r2, [r3, #0]
      i++;
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	623b      	str	r3, [r7, #32]
      pDest++;
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e6ce:	8bfb      	ldrh	r3, [r7, #30]
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e6d4:	8bfb      	ldrh	r3, [r7, #30]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1ea      	bne.n	800e6b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	372c      	adds	r7, #44	@ 0x2c
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr

0800e6e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	695b      	ldr	r3, [r3, #20]
 800e6f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	699b      	ldr	r3, [r3, #24]
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	4013      	ands	r3, r2
 800e6fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e700:	68fb      	ldr	r3, [r7, #12]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3714      	adds	r7, #20
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr

0800e70e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800e70e:	b480      	push	{r7}
 800e710:	b085      	sub	sp, #20
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
 800e716:	460b      	mov	r3, r1
 800e718:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800e71e:	78fb      	ldrb	r3, [r7, #3]
 800e720:	015a      	lsls	r2, r3, #5
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	4413      	add	r3, r2
 800e726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800e72e:	78fb      	ldrb	r3, [r7, #3]
 800e730:	015a      	lsls	r2, r3, #5
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	4413      	add	r3, r2
 800e736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	4013      	ands	r3, r2
 800e740:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e742:	68bb      	ldr	r3, [r7, #8]
}
 800e744:	4618      	mov	r0, r3
 800e746:	3714      	adds	r7, #20
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	695b      	ldr	r3, [r3, #20]
 800e75c:	f003 0301 	and.w	r3, r3, #1
}
 800e760:	4618      	mov	r0, r3
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b085      	sub	sp, #20
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e774:	2300      	movs	r3, #0
 800e776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	3301      	adds	r3, #1
 800e77c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e784:	d901      	bls.n	800e78a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e786:	2303      	movs	r3, #3
 800e788:	e01b      	b.n	800e7c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	691b      	ldr	r3, [r3, #16]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	daf2      	bge.n	800e778 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e792:	2300      	movs	r3, #0
 800e794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	691b      	ldr	r3, [r3, #16]
 800e79a:	f043 0201 	orr.w	r2, r3, #1
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e7ae:	d901      	bls.n	800e7b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e7b0:	2303      	movs	r3, #3
 800e7b2:	e006      	b.n	800e7c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	f003 0301 	and.w	r3, r3, #1
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d0f0      	beq.n	800e7a2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3714      	adds	r7, #20
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr
	...

0800e7d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e7d0:	b084      	sub	sp, #16
 800e7d2:	b580      	push	{r7, lr}
 800e7d4:	b086      	sub	sp, #24
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
 800e7da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e7de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7fa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	68db      	ldr	r3, [r3, #12]
 800e806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d119      	bne.n	800e842 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e80e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e812:	2b01      	cmp	r3, #1
 800e814:	d10a      	bne.n	800e82c <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e824:	f043 0304 	orr.w	r3, r3, #4
 800e828:	6013      	str	r3, [r2, #0]
 800e82a:	e014      	b.n	800e856 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e83a:	f023 0304 	bic.w	r3, r3, #4
 800e83e:	6013      	str	r3, [r2, #0]
 800e840:	e009      	b.n	800e856 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e850:	f023 0304 	bic.w	r3, r3, #4
 800e854:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e856:	2110      	movs	r1, #16
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7ff fe4f 	bl	800e4fc <USB_FlushTxFifo>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d001      	beq.n	800e868 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800e864:	2301      	movs	r3, #1
 800e866:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f7ff fe79 	bl	800e560 <USB_FlushRxFifo>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d001      	beq.n	800e878 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e878:	2300      	movs	r3, #0
 800e87a:	613b      	str	r3, [r7, #16]
 800e87c:	e015      	b.n	800e8aa <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	015a      	lsls	r2, r3, #5
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	4413      	add	r3, r2
 800e886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e88a:	461a      	mov	r2, r3
 800e88c:	f04f 33ff 	mov.w	r3, #4294967295
 800e890:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	015a      	lsls	r2, r3, #5
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	4413      	add	r3, r2
 800e89a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e89e:	461a      	mov	r2, r3
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	613b      	str	r3, [r7, #16]
 800e8aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d3e3      	bcc.n	800e87e <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a18      	ldr	r2, [pc, #96]	@ (800e928 <USB_HostInit+0x158>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d10b      	bne.n	800e8e4 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8d2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	4a15      	ldr	r2, [pc, #84]	@ (800e92c <USB_HostInit+0x15c>)
 800e8d8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4a14      	ldr	r2, [pc, #80]	@ (800e930 <USB_HostInit+0x160>)
 800e8de:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800e8e2:	e009      	b.n	800e8f8 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2280      	movs	r2, #128	@ 0x80
 800e8e8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	4a11      	ldr	r2, [pc, #68]	@ (800e934 <USB_HostInit+0x164>)
 800e8ee:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4a11      	ldr	r2, [pc, #68]	@ (800e938 <USB_HostInit+0x168>)
 800e8f4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e8f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d105      	bne.n	800e90c <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	699b      	ldr	r3, [r3, #24]
 800e904:	f043 0210 	orr.w	r2, r3, #16
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	699a      	ldr	r2, [r3, #24]
 800e910:	4b0a      	ldr	r3, [pc, #40]	@ (800e93c <USB_HostInit+0x16c>)
 800e912:	4313      	orrs	r3, r2
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800e918:	7dfb      	ldrb	r3, [r7, #23]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3718      	adds	r7, #24
 800e91e:	46bd      	mov	sp, r7
 800e920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e924:	b004      	add	sp, #16
 800e926:	4770      	bx	lr
 800e928:	40040000 	.word	0x40040000
 800e92c:	01000200 	.word	0x01000200
 800e930:	00e00300 	.word	0x00e00300
 800e934:	00600080 	.word	0x00600080
 800e938:	004000e0 	.word	0x004000e0
 800e93c:	a3200008 	.word	0xa3200008

0800e940 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e940:	b480      	push	{r7}
 800e942:	b085      	sub	sp, #20
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	460b      	mov	r3, r1
 800e94a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e95e:	f023 0303 	bic.w	r3, r3, #3
 800e962:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	78fb      	ldrb	r3, [r7, #3]
 800e96e:	f003 0303 	and.w	r3, r3, #3
 800e972:	68f9      	ldr	r1, [r7, #12]
 800e974:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e978:	4313      	orrs	r3, r2
 800e97a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e97c:	78fb      	ldrb	r3, [r7, #3]
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d107      	bne.n	800e992 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e988:	461a      	mov	r2, r3
 800e98a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e98e:	6053      	str	r3, [r2, #4]
 800e990:	e00c      	b.n	800e9ac <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800e992:	78fb      	ldrb	r3, [r7, #3]
 800e994:	2b02      	cmp	r3, #2
 800e996:	d107      	bne.n	800e9a8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e99e:	461a      	mov	r2, r3
 800e9a0:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e9a4:	6053      	str	r3, [r2, #4]
 800e9a6:	e001      	b.n	800e9ac <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e000      	b.n	800e9ae <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800e9ac:	2300      	movs	r3, #0
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3714      	adds	r7, #20
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr

0800e9ba <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b084      	sub	sp, #16
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e9da:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e9e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e9e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800e9ea:	2064      	movs	r0, #100	@ 0x64
 800e9ec:	f7f5 f9b6 	bl	8003d5c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	68fa      	ldr	r2, [r7, #12]
 800e9f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e9f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e9fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800e9fe:	200a      	movs	r0, #10
 800ea00:	f7f5 f9ac 	bl	8003d5c <HAL_Delay>

  return HAL_OK;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b085      	sub	sp, #20
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	460b      	mov	r3, r1
 800ea18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ea32:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d109      	bne.n	800ea52 <USB_DriveVbus+0x44>
 800ea3e:	78fb      	ldrb	r3, [r7, #3]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d106      	bne.n	800ea52 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ea4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ea50:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ea58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea5c:	d109      	bne.n	800ea72 <USB_DriveVbus+0x64>
 800ea5e:	78fb      	ldrb	r3, [r7, #3]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d106      	bne.n	800ea72 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ea6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea70:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	0c5b      	lsrs	r3, r3, #17
 800ea9e:	f003 0303 	and.w	r3, r3, #3
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr

0800eaae <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800eaae:	b480      	push	{r7}
 800eab0:	b085      	sub	sp, #20
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	b29b      	uxth	r3, r3
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3714      	adds	r7, #20
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b088      	sub	sp, #32
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	4608      	mov	r0, r1
 800eada:	4611      	mov	r1, r2
 800eadc:	461a      	mov	r2, r3
 800eade:	4603      	mov	r3, r0
 800eae0:	70fb      	strb	r3, [r7, #3]
 800eae2:	460b      	mov	r3, r1
 800eae4:	70bb      	strb	r3, [r7, #2]
 800eae6:	4613      	mov	r3, r2
 800eae8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800eaea:	2300      	movs	r3, #0
 800eaec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800eaf2:	78fb      	ldrb	r3, [r7, #3]
 800eaf4:	015a      	lsls	r2, r3, #5
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	4413      	add	r3, r2
 800eafa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eafe:	461a      	mov	r2, r3
 800eb00:	f04f 33ff 	mov.w	r3, #4294967295
 800eb04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800eb06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800eb0a:	2b03      	cmp	r3, #3
 800eb0c:	d87c      	bhi.n	800ec08 <USB_HC_Init+0x138>
 800eb0e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb14 <USB_HC_Init+0x44>)
 800eb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb14:	0800eb25 	.word	0x0800eb25
 800eb18:	0800ebcb 	.word	0x0800ebcb
 800eb1c:	0800eb25 	.word	0x0800eb25
 800eb20:	0800eb8d 	.word	0x0800eb8d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800eb24:	78fb      	ldrb	r3, [r7, #3]
 800eb26:	015a      	lsls	r2, r3, #5
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb30:	461a      	mov	r2, r3
 800eb32:	f240 439d 	movw	r3, #1181	@ 0x49d
 800eb36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800eb38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	da10      	bge.n	800eb62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800eb40:	78fb      	ldrb	r3, [r7, #3]
 800eb42:	015a      	lsls	r2, r3, #5
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	4413      	add	r3, r2
 800eb48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	78fa      	ldrb	r2, [r7, #3]
 800eb50:	0151      	lsls	r1, r2, #5
 800eb52:	693a      	ldr	r2, [r7, #16]
 800eb54:	440a      	add	r2, r1
 800eb56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eb5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eb5e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800eb60:	e055      	b.n	800ec0e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4a6f      	ldr	r2, [pc, #444]	@ (800ed24 <USB_HC_Init+0x254>)
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d151      	bne.n	800ec0e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800eb6a:	78fb      	ldrb	r3, [r7, #3]
 800eb6c:	015a      	lsls	r2, r3, #5
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	4413      	add	r3, r2
 800eb72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	78fa      	ldrb	r2, [r7, #3]
 800eb7a:	0151      	lsls	r1, r2, #5
 800eb7c:	693a      	ldr	r2, [r7, #16]
 800eb7e:	440a      	add	r2, r1
 800eb80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eb84:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800eb88:	60d3      	str	r3, [r2, #12]
      break;
 800eb8a:	e040      	b.n	800ec0e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800eb8c:	78fb      	ldrb	r3, [r7, #3]
 800eb8e:	015a      	lsls	r2, r3, #5
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	4413      	add	r3, r2
 800eb94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb98:	461a      	mov	r2, r3
 800eb9a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800eb9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800eba0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	da34      	bge.n	800ec12 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800eba8:	78fb      	ldrb	r3, [r7, #3]
 800ebaa:	015a      	lsls	r2, r3, #5
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	4413      	add	r3, r2
 800ebb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	78fa      	ldrb	r2, [r7, #3]
 800ebb8:	0151      	lsls	r1, r2, #5
 800ebba:	693a      	ldr	r2, [r7, #16]
 800ebbc:	440a      	add	r2, r1
 800ebbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ebc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ebc6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ebc8:	e023      	b.n	800ec12 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ebca:	78fb      	ldrb	r3, [r7, #3]
 800ebcc:	015a      	lsls	r2, r3, #5
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	f240 2325 	movw	r3, #549	@ 0x225
 800ebdc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ebde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	da17      	bge.n	800ec16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ebe6:	78fb      	ldrb	r3, [r7, #3]
 800ebe8:	015a      	lsls	r2, r3, #5
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	4413      	add	r3, r2
 800ebee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	78fa      	ldrb	r2, [r7, #3]
 800ebf6:	0151      	lsls	r1, r2, #5
 800ebf8:	693a      	ldr	r2, [r7, #16]
 800ebfa:	440a      	add	r2, r1
 800ebfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec00:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800ec04:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ec06:	e006      	b.n	800ec16 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	77fb      	strb	r3, [r7, #31]
      break;
 800ec0c:	e004      	b.n	800ec18 <USB_HC_Init+0x148>
      break;
 800ec0e:	bf00      	nop
 800ec10:	e002      	b.n	800ec18 <USB_HC_Init+0x148>
      break;
 800ec12:	bf00      	nop
 800ec14:	e000      	b.n	800ec18 <USB_HC_Init+0x148>
      break;
 800ec16:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ec18:	78fb      	ldrb	r3, [r7, #3]
 800ec1a:	015a      	lsls	r2, r3, #5
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	4413      	add	r3, r2
 800ec20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec24:	461a      	mov	r2, r3
 800ec26:	2300      	movs	r3, #0
 800ec28:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ec2a:	78fb      	ldrb	r3, [r7, #3]
 800ec2c:	015a      	lsls	r2, r3, #5
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	4413      	add	r3, r2
 800ec32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	78fa      	ldrb	r2, [r7, #3]
 800ec3a:	0151      	lsls	r1, r2, #5
 800ec3c:	693a      	ldr	r2, [r7, #16]
 800ec3e:	440a      	add	r2, r1
 800ec40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec44:	f043 0302 	orr.w	r3, r3, #2
 800ec48:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ec50:	699a      	ldr	r2, [r3, #24]
 800ec52:	78fb      	ldrb	r3, [r7, #3]
 800ec54:	f003 030f 	and.w	r3, r3, #15
 800ec58:	2101      	movs	r1, #1
 800ec5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ec5e:	6939      	ldr	r1, [r7, #16]
 800ec60:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ec64:	4313      	orrs	r3, r2
 800ec66:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	699b      	ldr	r3, [r3, #24]
 800ec6c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ec74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	da03      	bge.n	800ec84 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ec7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ec80:	61bb      	str	r3, [r7, #24]
 800ec82:	e001      	b.n	800ec88 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800ec84:	2300      	movs	r3, #0
 800ec86:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f7ff fef9 	bl	800ea80 <USB_GetHostSpeed>
 800ec8e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ec90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ec94:	2b02      	cmp	r3, #2
 800ec96:	d106      	bne.n	800eca6 <USB_HC_Init+0x1d6>
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b02      	cmp	r3, #2
 800ec9c:	d003      	beq.n	800eca6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ec9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800eca2:	617b      	str	r3, [r7, #20]
 800eca4:	e001      	b.n	800ecaa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800eca6:	2300      	movs	r3, #0
 800eca8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ecaa:	787b      	ldrb	r3, [r7, #1]
 800ecac:	059b      	lsls	r3, r3, #22
 800ecae:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ecb2:	78bb      	ldrb	r3, [r7, #2]
 800ecb4:	02db      	lsls	r3, r3, #11
 800ecb6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ecba:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ecbc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ecc0:	049b      	lsls	r3, r3, #18
 800ecc2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ecc6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800ecc8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ecca:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ecce:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	431a      	orrs	r2, r3
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ecd8:	78fa      	ldrb	r2, [r7, #3]
 800ecda:	0151      	lsls	r1, r2, #5
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	440a      	add	r2, r1
 800ece0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ece4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ece8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ecea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	d003      	beq.n	800ecfa <USB_HC_Init+0x22a>
 800ecf2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ecf6:	2b01      	cmp	r3, #1
 800ecf8:	d10f      	bne.n	800ed1a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ecfa:	78fb      	ldrb	r3, [r7, #3]
 800ecfc:	015a      	lsls	r2, r3, #5
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	4413      	add	r3, r2
 800ed02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	78fa      	ldrb	r2, [r7, #3]
 800ed0a:	0151      	lsls	r1, r2, #5
 800ed0c:	693a      	ldr	r2, [r7, #16]
 800ed0e:	440a      	add	r2, r1
 800ed10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ed18:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ed1a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3720      	adds	r7, #32
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	40040000 	.word	0x40040000

0800ed28 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b08c      	sub	sp, #48	@ 0x30
 800ed2c:	af02      	add	r7, sp, #8
 800ed2e:	60f8      	str	r0, [r7, #12]
 800ed30:	60b9      	str	r1, [r7, #8]
 800ed32:	4613      	mov	r3, r2
 800ed34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	785b      	ldrb	r3, [r3, #1]
 800ed3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ed40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ed44:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	4a5d      	ldr	r2, [pc, #372]	@ (800eec0 <USB_HC_StartXfer+0x198>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d12f      	bne.n	800edae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800ed4e:	79fb      	ldrb	r3, [r7, #7]
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d11c      	bne.n	800ed8e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	7c9b      	ldrb	r3, [r3, #18]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d003      	beq.n	800ed64 <USB_HC_StartXfer+0x3c>
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	7c9b      	ldrb	r3, [r3, #18]
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d124      	bne.n	800edae <USB_HC_StartXfer+0x86>
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	799b      	ldrb	r3, [r3, #6]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d120      	bne.n	800edae <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	015a      	lsls	r2, r3, #5
 800ed70:	6a3b      	ldr	r3, [r7, #32]
 800ed72:	4413      	add	r3, r2
 800ed74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	69fa      	ldr	r2, [r7, #28]
 800ed7c:	0151      	lsls	r1, r2, #5
 800ed7e:	6a3a      	ldr	r2, [r7, #32]
 800ed80:	440a      	add	r2, r1
 800ed82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed8a:	60d3      	str	r3, [r2, #12]
 800ed8c:	e00f      	b.n	800edae <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	791b      	ldrb	r3, [r3, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d10b      	bne.n	800edae <USB_HC_StartXfer+0x86>
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	795b      	ldrb	r3, [r3, #5]
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d107      	bne.n	800edae <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	785b      	ldrb	r3, [r3, #1]
 800eda2:	4619      	mov	r1, r3
 800eda4:	68f8      	ldr	r0, [r7, #12]
 800eda6:	f000 fb6b 	bl	800f480 <USB_DoPing>
        return HAL_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	e232      	b.n	800f214 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	799b      	ldrb	r3, [r3, #6]
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d158      	bne.n	800ee68 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800edb6:	2301      	movs	r3, #1
 800edb8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	78db      	ldrb	r3, [r3, #3]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d007      	beq.n	800edd2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800edc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800edc4:	68ba      	ldr	r2, [r7, #8]
 800edc6:	8a92      	ldrh	r2, [r2, #20]
 800edc8:	fb03 f202 	mul.w	r2, r3, r2
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	61da      	str	r2, [r3, #28]
 800edd0:	e07c      	b.n	800eecc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	7c9b      	ldrb	r3, [r3, #18]
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d130      	bne.n	800ee3c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	6a1b      	ldr	r3, [r3, #32]
 800edde:	2bbc      	cmp	r3, #188	@ 0xbc
 800ede0:	d918      	bls.n	800ee14 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	8a9b      	ldrh	r3, [r3, #20]
 800ede6:	461a      	mov	r2, r3
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	69da      	ldr	r2, [r3, #28]
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d003      	beq.n	800ee04 <USB_HC_StartXfer+0xdc>
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	d103      	bne.n	800ee0c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	2202      	movs	r2, #2
 800ee08:	60da      	str	r2, [r3, #12]
 800ee0a:	e05f      	b.n	800eecc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	60da      	str	r2, [r3, #12]
 800ee12:	e05b      	b.n	800eecc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	6a1a      	ldr	r2, [r3, #32]
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d007      	beq.n	800ee34 <USB_HC_StartXfer+0x10c>
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	2b02      	cmp	r3, #2
 800ee2a:	d003      	beq.n	800ee34 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	2204      	movs	r2, #4
 800ee30:	60da      	str	r2, [r3, #12]
 800ee32:	e04b      	b.n	800eecc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	2203      	movs	r2, #3
 800ee38:	60da      	str	r2, [r3, #12]
 800ee3a:	e047      	b.n	800eecc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800ee3c:	79fb      	ldrb	r3, [r7, #7]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d10d      	bne.n	800ee5e <USB_HC_StartXfer+0x136>
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	6a1b      	ldr	r3, [r3, #32]
 800ee46:	68ba      	ldr	r2, [r7, #8]
 800ee48:	8a92      	ldrh	r2, [r2, #20]
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d907      	bls.n	800ee5e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ee4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee50:	68ba      	ldr	r2, [r7, #8]
 800ee52:	8a92      	ldrh	r2, [r2, #20]
 800ee54:	fb03 f202 	mul.w	r2, r3, r2
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	61da      	str	r2, [r3, #28]
 800ee5c:	e036      	b.n	800eecc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	6a1a      	ldr	r2, [r3, #32]
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	61da      	str	r2, [r3, #28]
 800ee66:	e031      	b.n	800eecc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	6a1b      	ldr	r3, [r3, #32]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d018      	beq.n	800eea2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	6a1b      	ldr	r3, [r3, #32]
 800ee74:	68ba      	ldr	r2, [r7, #8]
 800ee76:	8a92      	ldrh	r2, [r2, #20]
 800ee78:	4413      	add	r3, r2
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	8a92      	ldrh	r2, [r2, #20]
 800ee80:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee84:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800ee86:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ee88:	8b7b      	ldrh	r3, [r7, #26]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d90b      	bls.n	800eea6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800ee8e:	8b7b      	ldrh	r3, [r7, #26]
 800ee90:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ee92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	8a92      	ldrh	r2, [r2, #20]
 800ee98:	fb03 f202 	mul.w	r2, r3, r2
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	61da      	str	r2, [r3, #28]
 800eea0:	e001      	b.n	800eea6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800eea2:	2301      	movs	r3, #1
 800eea4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	78db      	ldrb	r3, [r3, #3]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00a      	beq.n	800eec4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800eeae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	8a92      	ldrh	r2, [r2, #20]
 800eeb4:	fb03 f202 	mul.w	r2, r3, r2
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	61da      	str	r2, [r3, #28]
 800eebc:	e006      	b.n	800eecc <USB_HC_StartXfer+0x1a4>
 800eebe:	bf00      	nop
 800eec0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	6a1a      	ldr	r2, [r3, #32]
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	69db      	ldr	r3, [r3, #28]
 800eed0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800eed4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eed6:	04d9      	lsls	r1, r3, #19
 800eed8:	4ba3      	ldr	r3, [pc, #652]	@ (800f168 <USB_HC_StartXfer+0x440>)
 800eeda:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800eedc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	7d9b      	ldrb	r3, [r3, #22]
 800eee2:	075b      	lsls	r3, r3, #29
 800eee4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800eee8:	69f9      	ldr	r1, [r7, #28]
 800eeea:	0148      	lsls	r0, r1, #5
 800eeec:	6a39      	ldr	r1, [r7, #32]
 800eeee:	4401      	add	r1, r0
 800eef0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800eef4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800eef6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800eef8:	79fb      	ldrb	r3, [r7, #7]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d009      	beq.n	800ef12 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	6999      	ldr	r1, [r3, #24]
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	015a      	lsls	r2, r3, #5
 800ef06:	6a3b      	ldr	r3, [r7, #32]
 800ef08:	4413      	add	r3, r2
 800ef0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef0e:	460a      	mov	r2, r1
 800ef10:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ef12:	6a3b      	ldr	r3, [r7, #32]
 800ef14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	f003 0301 	and.w	r3, r3, #1
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	bf0c      	ite	eq
 800ef22:	2301      	moveq	r3, #1
 800ef24:	2300      	movne	r3, #0
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	015a      	lsls	r2, r3, #5
 800ef2e:	6a3b      	ldr	r3, [r7, #32]
 800ef30:	4413      	add	r3, r2
 800ef32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	69fa      	ldr	r2, [r7, #28]
 800ef3a:	0151      	lsls	r1, r2, #5
 800ef3c:	6a3a      	ldr	r2, [r7, #32]
 800ef3e:	440a      	add	r2, r1
 800ef40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ef44:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ef48:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	015a      	lsls	r2, r3, #5
 800ef4e:	6a3b      	ldr	r3, [r7, #32]
 800ef50:	4413      	add	r3, r2
 800ef52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	7e7b      	ldrb	r3, [r7, #25]
 800ef5a:	075b      	lsls	r3, r3, #29
 800ef5c:	69f9      	ldr	r1, [r7, #28]
 800ef5e:	0148      	lsls	r0, r1, #5
 800ef60:	6a39      	ldr	r1, [r7, #32]
 800ef62:	4401      	add	r1, r0
 800ef64:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	799b      	ldrb	r3, [r3, #6]
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	f040 80c3 	bne.w	800f0fc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	7c5b      	ldrb	r3, [r3, #17]
 800ef7a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ef80:	4313      	orrs	r3, r2
 800ef82:	69fa      	ldr	r2, [r7, #28]
 800ef84:	0151      	lsls	r1, r2, #5
 800ef86:	6a3a      	ldr	r2, [r7, #32]
 800ef88:	440a      	add	r2, r1
 800ef8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ef8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ef92:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	015a      	lsls	r2, r3, #5
 800ef98:	6a3b      	ldr	r3, [r7, #32]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	69fa      	ldr	r2, [r7, #28]
 800efa4:	0151      	lsls	r1, r2, #5
 800efa6:	6a3a      	ldr	r2, [r7, #32]
 800efa8:	440a      	add	r2, r1
 800efaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800efae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800efb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	79db      	ldrb	r3, [r3, #7]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d123      	bne.n	800f004 <USB_HC_StartXfer+0x2dc>
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	78db      	ldrb	r3, [r3, #3]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d11f      	bne.n	800f004 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	015a      	lsls	r2, r3, #5
 800efc8:	6a3b      	ldr	r3, [r7, #32]
 800efca:	4413      	add	r3, r2
 800efcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	69fa      	ldr	r2, [r7, #28]
 800efd4:	0151      	lsls	r1, r2, #5
 800efd6:	6a3a      	ldr	r2, [r7, #32]
 800efd8:	440a      	add	r2, r1
 800efda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800efde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800efe2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	015a      	lsls	r2, r3, #5
 800efe8:	6a3b      	ldr	r3, [r7, #32]
 800efea:	4413      	add	r3, r2
 800efec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eff0:	68db      	ldr	r3, [r3, #12]
 800eff2:	69fa      	ldr	r2, [r7, #28]
 800eff4:	0151      	lsls	r1, r2, #5
 800eff6:	6a3a      	ldr	r2, [r7, #32]
 800eff8:	440a      	add	r2, r1
 800effa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800effe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f002:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	7c9b      	ldrb	r3, [r3, #18]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d003      	beq.n	800f014 <USB_HC_StartXfer+0x2ec>
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	7c9b      	ldrb	r3, [r3, #18]
 800f010:	2b03      	cmp	r3, #3
 800f012:	d117      	bne.n	800f044 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d113      	bne.n	800f044 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	78db      	ldrb	r3, [r3, #3]
 800f020:	2b01      	cmp	r3, #1
 800f022:	d10f      	bne.n	800f044 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800f024:	69fb      	ldr	r3, [r7, #28]
 800f026:	015a      	lsls	r2, r3, #5
 800f028:	6a3b      	ldr	r3, [r7, #32]
 800f02a:	4413      	add	r3, r2
 800f02c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	69fa      	ldr	r2, [r7, #28]
 800f034:	0151      	lsls	r1, r2, #5
 800f036:	6a3a      	ldr	r2, [r7, #32]
 800f038:	440a      	add	r2, r1
 800f03a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f03e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f042:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	7c9b      	ldrb	r3, [r3, #18]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d162      	bne.n	800f112 <USB_HC_StartXfer+0x3ea>
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	78db      	ldrb	r3, [r3, #3]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d15e      	bne.n	800f112 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	3b01      	subs	r3, #1
 800f05a:	2b03      	cmp	r3, #3
 800f05c:	d858      	bhi.n	800f110 <USB_HC_StartXfer+0x3e8>
 800f05e:	a201      	add	r2, pc, #4	@ (adr r2, 800f064 <USB_HC_StartXfer+0x33c>)
 800f060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f064:	0800f075 	.word	0x0800f075
 800f068:	0800f097 	.word	0x0800f097
 800f06c:	0800f0b9 	.word	0x0800f0b9
 800f070:	0800f0db 	.word	0x0800f0db
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	015a      	lsls	r2, r3, #5
 800f078:	6a3b      	ldr	r3, [r7, #32]
 800f07a:	4413      	add	r3, r2
 800f07c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	69fa      	ldr	r2, [r7, #28]
 800f084:	0151      	lsls	r1, r2, #5
 800f086:	6a3a      	ldr	r2, [r7, #32]
 800f088:	440a      	add	r2, r1
 800f08a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f08e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f092:	6053      	str	r3, [r2, #4]
          break;
 800f094:	e03d      	b.n	800f112 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	015a      	lsls	r2, r3, #5
 800f09a:	6a3b      	ldr	r3, [r7, #32]
 800f09c:	4413      	add	r3, r2
 800f09e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	69fa      	ldr	r2, [r7, #28]
 800f0a6:	0151      	lsls	r1, r2, #5
 800f0a8:	6a3a      	ldr	r2, [r7, #32]
 800f0aa:	440a      	add	r2, r1
 800f0ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f0b0:	f043 030e 	orr.w	r3, r3, #14
 800f0b4:	6053      	str	r3, [r2, #4]
          break;
 800f0b6:	e02c      	b.n	800f112 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	015a      	lsls	r2, r3, #5
 800f0bc:	6a3b      	ldr	r3, [r7, #32]
 800f0be:	4413      	add	r3, r2
 800f0c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	69fa      	ldr	r2, [r7, #28]
 800f0c8:	0151      	lsls	r1, r2, #5
 800f0ca:	6a3a      	ldr	r2, [r7, #32]
 800f0cc:	440a      	add	r2, r1
 800f0ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f0d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f0d6:	6053      	str	r3, [r2, #4]
          break;
 800f0d8:	e01b      	b.n	800f112 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800f0da:	69fb      	ldr	r3, [r7, #28]
 800f0dc:	015a      	lsls	r2, r3, #5
 800f0de:	6a3b      	ldr	r3, [r7, #32]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	69fa      	ldr	r2, [r7, #28]
 800f0ea:	0151      	lsls	r1, r2, #5
 800f0ec:	6a3a      	ldr	r2, [r7, #32]
 800f0ee:	440a      	add	r2, r1
 800f0f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f0f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f0f8:	6053      	str	r3, [r2, #4]
          break;
 800f0fa:	e00a      	b.n	800f112 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	015a      	lsls	r2, r3, #5
 800f100:	6a3b      	ldr	r3, [r7, #32]
 800f102:	4413      	add	r3, r2
 800f104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f108:	461a      	mov	r2, r3
 800f10a:	2300      	movs	r3, #0
 800f10c:	6053      	str	r3, [r2, #4]
 800f10e:	e000      	b.n	800f112 <USB_HC_StartXfer+0x3ea>
          break;
 800f110:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	015a      	lsls	r2, r3, #5
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	4413      	add	r3, r2
 800f11a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f128:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	78db      	ldrb	r3, [r3, #3]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d004      	beq.n	800f13c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f138:	613b      	str	r3, [r7, #16]
 800f13a:	e003      	b.n	800f144 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f142:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f14a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	015a      	lsls	r2, r3, #5
 800f150:	6a3b      	ldr	r3, [r7, #32]
 800f152:	4413      	add	r3, r2
 800f154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f158:	461a      	mov	r2, r3
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800f15e:	79fb      	ldrb	r3, [r7, #7]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d003      	beq.n	800f16c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800f164:	2300      	movs	r3, #0
 800f166:	e055      	b.n	800f214 <USB_HC_StartXfer+0x4ec>
 800f168:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	78db      	ldrb	r3, [r3, #3]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d14e      	bne.n	800f212 <USB_HC_StartXfer+0x4ea>
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	6a1b      	ldr	r3, [r3, #32]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d04a      	beq.n	800f212 <USB_HC_StartXfer+0x4ea>
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	79db      	ldrb	r3, [r3, #7]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d146      	bne.n	800f212 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	7c9b      	ldrb	r3, [r3, #18]
 800f188:	2b03      	cmp	r3, #3
 800f18a:	d831      	bhi.n	800f1f0 <USB_HC_StartXfer+0x4c8>
 800f18c:	a201      	add	r2, pc, #4	@ (adr r2, 800f194 <USB_HC_StartXfer+0x46c>)
 800f18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f192:	bf00      	nop
 800f194:	0800f1a5 	.word	0x0800f1a5
 800f198:	0800f1c9 	.word	0x0800f1c9
 800f19c:	0800f1a5 	.word	0x0800f1a5
 800f1a0:	0800f1c9 	.word	0x0800f1c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	6a1b      	ldr	r3, [r3, #32]
 800f1a8:	3303      	adds	r3, #3
 800f1aa:	089b      	lsrs	r3, r3, #2
 800f1ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800f1ae:	8afa      	ldrh	r2, [r7, #22]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d91c      	bls.n	800f1f4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	699b      	ldr	r3, [r3, #24]
 800f1be:	f043 0220 	orr.w	r2, r3, #32
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	619a      	str	r2, [r3, #24]
        }
        break;
 800f1c6:	e015      	b.n	800f1f4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	6a1b      	ldr	r3, [r3, #32]
 800f1cc:	3303      	adds	r3, #3
 800f1ce:	089b      	lsrs	r3, r3, #2
 800f1d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800f1d2:	8afa      	ldrh	r2, [r7, #22]
 800f1d4:	6a3b      	ldr	r3, [r7, #32]
 800f1d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f1da:	691b      	ldr	r3, [r3, #16]
 800f1dc:	b29b      	uxth	r3, r3
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d90a      	bls.n	800f1f8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	699b      	ldr	r3, [r3, #24]
 800f1e6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	619a      	str	r2, [r3, #24]
        }
        break;
 800f1ee:	e003      	b.n	800f1f8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800f1f0:	bf00      	nop
 800f1f2:	e002      	b.n	800f1fa <USB_HC_StartXfer+0x4d2>
        break;
 800f1f4:	bf00      	nop
 800f1f6:	e000      	b.n	800f1fa <USB_HC_StartXfer+0x4d2>
        break;
 800f1f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	6999      	ldr	r1, [r3, #24]
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	785a      	ldrb	r2, [r3, #1]
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	6a1b      	ldr	r3, [r3, #32]
 800f206:	b29b      	uxth	r3, r3
 800f208:	2000      	movs	r0, #0
 800f20a:	9000      	str	r0, [sp, #0]
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f7ff f9d5 	bl	800e5bc <USB_WritePacket>
  }

  return HAL_OK;
 800f212:	2300      	movs	r3, #0
}
 800f214:	4618      	mov	r0, r3
 800f216:	3728      	adds	r7, #40	@ 0x28
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b085      	sub	sp, #20
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f22e:	695b      	ldr	r3, [r3, #20]
 800f230:	b29b      	uxth	r3, r3
}
 800f232:	4618      	mov	r0, r3
 800f234:	3714      	adds	r7, #20
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr

0800f23e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800f23e:	b480      	push	{r7}
 800f240:	b089      	sub	sp, #36	@ 0x24
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
 800f246:	460b      	mov	r3, r1
 800f248:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800f24e:	78fb      	ldrb	r3, [r7, #3]
 800f250:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800f252:	2300      	movs	r3, #0
 800f254:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	015a      	lsls	r2, r3, #5
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	4413      	add	r3, r2
 800f25e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	0c9b      	lsrs	r3, r3, #18
 800f266:	f003 0303 	and.w	r3, r3, #3
 800f26a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	015a      	lsls	r2, r3, #5
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	4413      	add	r3, r2
 800f274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	0fdb      	lsrs	r3, r3, #31
 800f27c:	f003 0301 	and.w	r3, r3, #1
 800f280:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	015a      	lsls	r2, r3, #5
 800f286:	69fb      	ldr	r3, [r7, #28]
 800f288:	4413      	add	r3, r2
 800f28a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	0fdb      	lsrs	r3, r3, #31
 800f292:	f003 0301 	and.w	r3, r3, #1
 800f296:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	f003 0320 	and.w	r3, r3, #32
 800f2a0:	2b20      	cmp	r3, #32
 800f2a2:	d10d      	bne.n	800f2c0 <USB_HC_Halt+0x82>
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10a      	bne.n	800f2c0 <USB_HC_Halt+0x82>
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d005      	beq.n	800f2bc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d002      	beq.n	800f2bc <USB_HC_Halt+0x7e>
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	2b03      	cmp	r3, #3
 800f2ba:	d101      	bne.n	800f2c0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	e0d8      	b.n	800f472 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d002      	beq.n	800f2cc <USB_HC_Halt+0x8e>
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	2b02      	cmp	r3, #2
 800f2ca:	d173      	bne.n	800f3b4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f2cc:	69bb      	ldr	r3, [r7, #24]
 800f2ce:	015a      	lsls	r2, r3, #5
 800f2d0:	69fb      	ldr	r3, [r7, #28]
 800f2d2:	4413      	add	r3, r2
 800f2d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	69ba      	ldr	r2, [r7, #24]
 800f2dc:	0151      	lsls	r1, r2, #5
 800f2de:	69fa      	ldr	r2, [r7, #28]
 800f2e0:	440a      	add	r2, r1
 800f2e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f2e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f2ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	689b      	ldr	r3, [r3, #8]
 800f2f0:	f003 0320 	and.w	r3, r3, #32
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d14a      	bne.n	800f38e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f300:	2b00      	cmp	r3, #0
 800f302:	d133      	bne.n	800f36c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	015a      	lsls	r2, r3, #5
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	4413      	add	r3, r2
 800f30c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	69ba      	ldr	r2, [r7, #24]
 800f314:	0151      	lsls	r1, r2, #5
 800f316:	69fa      	ldr	r2, [r7, #28]
 800f318:	440a      	add	r2, r1
 800f31a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f31e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f322:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	015a      	lsls	r2, r3, #5
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	4413      	add	r3, r2
 800f32c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	69ba      	ldr	r2, [r7, #24]
 800f334:	0151      	lsls	r1, r2, #5
 800f336:	69fa      	ldr	r2, [r7, #28]
 800f338:	440a      	add	r2, r1
 800f33a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f33e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f342:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	3301      	adds	r3, #1
 800f348:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f350:	d82e      	bhi.n	800f3b0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	015a      	lsls	r2, r3, #5
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	4413      	add	r3, r2
 800f35a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f364:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f368:	d0ec      	beq.n	800f344 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f36a:	e081      	b.n	800f470 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	015a      	lsls	r2, r3, #5
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	4413      	add	r3, r2
 800f374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	69ba      	ldr	r2, [r7, #24]
 800f37c:	0151      	lsls	r1, r2, #5
 800f37e:	69fa      	ldr	r2, [r7, #28]
 800f380:	440a      	add	r2, r1
 800f382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f386:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f38a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f38c:	e070      	b.n	800f470 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	015a      	lsls	r2, r3, #5
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	4413      	add	r3, r2
 800f396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	69ba      	ldr	r2, [r7, #24]
 800f39e:	0151      	lsls	r1, r2, #5
 800f3a0:	69fa      	ldr	r2, [r7, #28]
 800f3a2:	440a      	add	r2, r1
 800f3a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f3a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f3ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f3ae:	e05f      	b.n	800f470 <USB_HC_Halt+0x232>
            break;
 800f3b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f3b2:	e05d      	b.n	800f470 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	015a      	lsls	r2, r3, #5
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	69ba      	ldr	r2, [r7, #24]
 800f3c4:	0151      	lsls	r1, r2, #5
 800f3c6:	69fa      	ldr	r2, [r7, #28]
 800f3c8:	440a      	add	r2, r1
 800f3ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f3ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f3d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f3da:	691b      	ldr	r3, [r3, #16]
 800f3dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d133      	bne.n	800f44c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	015a      	lsls	r2, r3, #5
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	69ba      	ldr	r2, [r7, #24]
 800f3f4:	0151      	lsls	r1, r2, #5
 800f3f6:	69fa      	ldr	r2, [r7, #28]
 800f3f8:	440a      	add	r2, r1
 800f3fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f3fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f402:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f404:	69bb      	ldr	r3, [r7, #24]
 800f406:	015a      	lsls	r2, r3, #5
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	4413      	add	r3, r2
 800f40c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	69ba      	ldr	r2, [r7, #24]
 800f414:	0151      	lsls	r1, r2, #5
 800f416:	69fa      	ldr	r2, [r7, #28]
 800f418:	440a      	add	r2, r1
 800f41a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f41e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f422:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	3301      	adds	r3, #1
 800f428:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f430:	d81d      	bhi.n	800f46e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	015a      	lsls	r2, r3, #5
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	4413      	add	r3, r2
 800f43a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f444:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f448:	d0ec      	beq.n	800f424 <USB_HC_Halt+0x1e6>
 800f44a:	e011      	b.n	800f470 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f44c:	69bb      	ldr	r3, [r7, #24]
 800f44e:	015a      	lsls	r2, r3, #5
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	4413      	add	r3, r2
 800f454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	69ba      	ldr	r2, [r7, #24]
 800f45c:	0151      	lsls	r1, r2, #5
 800f45e:	69fa      	ldr	r2, [r7, #28]
 800f460:	440a      	add	r2, r1
 800f462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f46a:	6013      	str	r3, [r2, #0]
 800f46c:	e000      	b.n	800f470 <USB_HC_Halt+0x232>
          break;
 800f46e:	bf00      	nop
    }
  }

  return HAL_OK;
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3724      	adds	r7, #36	@ 0x24
 800f476:	46bd      	mov	sp, r7
 800f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47c:	4770      	bx	lr
	...

0800f480 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800f480:	b480      	push	{r7}
 800f482:	b087      	sub	sp, #28
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	460b      	mov	r3, r1
 800f48a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800f490:	78fb      	ldrb	r3, [r7, #3]
 800f492:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800f494:	2301      	movs	r3, #1
 800f496:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	04da      	lsls	r2, r3, #19
 800f49c:	4b15      	ldr	r3, [pc, #84]	@ (800f4f4 <USB_DoPing+0x74>)
 800f49e:	4013      	ands	r3, r2
 800f4a0:	693a      	ldr	r2, [r7, #16]
 800f4a2:	0151      	lsls	r1, r2, #5
 800f4a4:	697a      	ldr	r2, [r7, #20]
 800f4a6:	440a      	add	r2, r1
 800f4a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f4ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f4b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	015a      	lsls	r2, r3, #5
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f4c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f4d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	015a      	lsls	r2, r3, #5
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	4413      	add	r3, r2
 800f4da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f4de:	461a      	mov	r2, r3
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	371c      	adds	r7, #28
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop
 800f4f4:	1ff80000 	.word	0x1ff80000

0800f4f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b088      	sub	sp, #32
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800f500:	2300      	movs	r3, #0
 800f502:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800f508:	2300      	movs	r3, #0
 800f50a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f7fe ff98 	bl	800e442 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f512:	2110      	movs	r1, #16
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f7fe fff1 	bl	800e4fc <USB_FlushTxFifo>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d001      	beq.n	800f524 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800f520:	2301      	movs	r3, #1
 800f522:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7ff f81b 	bl	800e560 <USB_FlushRxFifo>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d001      	beq.n	800f534 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800f530:	2301      	movs	r3, #1
 800f532:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800f534:	2300      	movs	r3, #0
 800f536:	61bb      	str	r3, [r7, #24]
 800f538:	e01f      	b.n	800f57a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800f53a:	69bb      	ldr	r3, [r7, #24]
 800f53c:	015a      	lsls	r2, r3, #5
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	4413      	add	r3, r2
 800f542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f550:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f558:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f560:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800f562:	69bb      	ldr	r3, [r7, #24]
 800f564:	015a      	lsls	r2, r3, #5
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	4413      	add	r3, r2
 800f56a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f56e:	461a      	mov	r2, r3
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800f574:	69bb      	ldr	r3, [r7, #24]
 800f576:	3301      	adds	r3, #1
 800f578:	61bb      	str	r3, [r7, #24]
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	2b0f      	cmp	r3, #15
 800f57e:	d9dc      	bls.n	800f53a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800f580:	2300      	movs	r3, #0
 800f582:	61bb      	str	r3, [r7, #24]
 800f584:	e034      	b.n	800f5f0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	015a      	lsls	r2, r3, #5
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	4413      	add	r3, r2
 800f58e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f59c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f5a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f5ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	015a      	lsls	r2, r3, #5
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f5cc:	d80c      	bhi.n	800f5e8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	015a      	lsls	r2, r3, #5
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f5e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f5e4:	d0ec      	beq.n	800f5c0 <USB_StopHost+0xc8>
 800f5e6:	e000      	b.n	800f5ea <USB_StopHost+0xf2>
        break;
 800f5e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	61bb      	str	r3, [r7, #24]
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	2b0f      	cmp	r3, #15
 800f5f4:	d9c7      	bls.n	800f586 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f602:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f04f 32ff 	mov.w	r2, #4294967295
 800f60a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7fe ff07 	bl	800e420 <USB_EnableGlobalInt>

  return ret;
 800f612:	7ffb      	ldrb	r3, [r7, #31]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3720      	adds	r7, #32
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f620:	4904      	ldr	r1, [pc, #16]	@ (800f634 <MX_FATFS_Init+0x18>)
 800f622:	4805      	ldr	r0, [pc, #20]	@ (800f638 <MX_FATFS_Init+0x1c>)
 800f624:	f005 fb4a 	bl	8014cbc <FATFS_LinkDriver>
 800f628:	4603      	mov	r3, r0
 800f62a:	461a      	mov	r2, r3
 800f62c:	4b03      	ldr	r3, [pc, #12]	@ (800f63c <MX_FATFS_Init+0x20>)
 800f62e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f630:	bf00      	nop
 800f632:	bd80      	pop	{r7, pc}
 800f634:	2000099c 	.word	0x2000099c
 800f638:	08016de4 	.word	0x08016de4
 800f63c:	20000998 	.word	0x20000998

0800f640 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f640:	b480      	push	{r7}
 800f642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f644:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f646:	4618      	mov	r0, r3
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f656:	2300      	movs	r3, #0
 800f658:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f65a:	f000 f888 	bl	800f76e <BSP_SD_IsDetected>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b01      	cmp	r3, #1
 800f662:	d001      	beq.n	800f668 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f664:	2301      	movs	r3, #1
 800f666:	e005      	b.n	800f674 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f668:	4804      	ldr	r0, [pc, #16]	@ (800f67c <BSP_SD_Init+0x2c>)
 800f66a:	f7fa ffc5 	bl	800a5f8 <HAL_SD_Init>
 800f66e:	4603      	mov	r3, r0
 800f670:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800f672:	79fb      	ldrb	r3, [r7, #7]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	20000630 	.word	0x20000630

0800f680 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	60b9      	str	r1, [r7, #8]
 800f68a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f68c:	2300      	movs	r3, #0
 800f68e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	68ba      	ldr	r2, [r7, #8]
 800f694:	68f9      	ldr	r1, [r7, #12]
 800f696:	4806      	ldr	r0, [pc, #24]	@ (800f6b0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f698:	f7fb f85e 	bl	800a758 <HAL_SD_ReadBlocks_DMA>
 800f69c:	4603      	mov	r3, r0
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d001      	beq.n	800f6a6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3718      	adds	r7, #24
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	20000630 	.word	0x20000630

0800f6b4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b086      	sub	sp, #24
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	68f9      	ldr	r1, [r7, #12]
 800f6ca:	4806      	ldr	r0, [pc, #24]	@ (800f6e4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f6cc:	f7fb f924 	bl	800a918 <HAL_SD_WriteBlocks_DMA>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f6da:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3718      	adds	r7, #24
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	20000630 	.word	0x20000630

0800f6e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f6ec:	4805      	ldr	r0, [pc, #20]	@ (800f704 <BSP_SD_GetCardState+0x1c>)
 800f6ee:	f7fb fd45 	bl	800b17c <HAL_SD_GetCardState>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b04      	cmp	r3, #4
 800f6f6:	bf14      	ite	ne
 800f6f8:	2301      	movne	r3, #1
 800f6fa:	2300      	moveq	r3, #0
 800f6fc:	b2db      	uxtb	r3, r3
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	bd80      	pop	{r7, pc}
 800f702:	bf00      	nop
 800f704:	20000630 	.word	0x20000630

0800f708 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f710:	6879      	ldr	r1, [r7, #4]
 800f712:	4803      	ldr	r0, [pc, #12]	@ (800f720 <BSP_SD_GetCardInfo+0x18>)
 800f714:	f7fb fd06 	bl	800b124 <HAL_SD_GetCardInfo>
}
 800f718:	bf00      	nop
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	20000630 	.word	0x20000630

0800f724 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800f72c:	f000 f818 	bl	800f760 <BSP_SD_AbortCallback>
}
 800f730:	bf00      	nop
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f740:	f000 f9a8 	bl	800fa94 <BSP_SD_WriteCpltCallback>
}
 800f744:	bf00      	nop
 800f746:	3708      	adds	r7, #8
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f754:	f000 f9aa 	bl	800faac <BSP_SD_ReadCpltCallback>
}
 800f758:	bf00      	nop
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800f760:	b480      	push	{r7}
 800f762:	af00      	add	r7, sp, #0

}
 800f764:	bf00      	nop
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr

0800f76e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f76e:	b580      	push	{r7, lr}
 800f770:	b082      	sub	sp, #8
 800f772:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f774:	2301      	movs	r3, #1
 800f776:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f778:	f000 f80c 	bl	800f794 <BSP_PlatformIsDetected>
 800f77c:	4603      	mov	r3, r0
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d101      	bne.n	800f786 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f782:	2300      	movs	r3, #0
 800f784:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f786:	79fb      	ldrb	r3, [r7, #7]
 800f788:	b2db      	uxtb	r3, r3
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3708      	adds	r7, #8
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
	...

0800f794 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f79a:	2301      	movs	r3, #1
 800f79c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f79e:	2104      	movs	r1, #4
 800f7a0:	4806      	ldr	r0, [pc, #24]	@ (800f7bc <BSP_PlatformIsDetected+0x28>)
 800f7a2:	f7f6 f9ab 	bl	8005afc <HAL_GPIO_ReadPin>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d001      	beq.n	800f7b0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f7b0:	79fb      	ldrb	r3, [r7, #7]
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	40021800 	.word	0x40021800

0800f7c0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800f7c8:	f7f4 fabc 	bl	8003d44 <HAL_GetTick>
 800f7cc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800f7ce:	e006      	b.n	800f7de <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f7d0:	f7ff ff8a 	bl	800f6e8 <BSP_SD_GetCardState>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d101      	bne.n	800f7de <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	e009      	b.n	800f7f2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800f7de:	f7f4 fab1 	bl	8003d44 <HAL_GetTick>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d8f0      	bhi.n	800f7d0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f7ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
	...

0800f7fc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	4603      	mov	r3, r0
 800f804:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f806:	4b0b      	ldr	r3, [pc, #44]	@ (800f834 <SD_CheckStatus+0x38>)
 800f808:	2201      	movs	r2, #1
 800f80a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f80c:	f7ff ff6c 	bl	800f6e8 <BSP_SD_GetCardState>
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	d107      	bne.n	800f826 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f816:	4b07      	ldr	r3, [pc, #28]	@ (800f834 <SD_CheckStatus+0x38>)
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	f023 0301 	bic.w	r3, r3, #1
 800f820:	b2da      	uxtb	r2, r3
 800f822:	4b04      	ldr	r3, [pc, #16]	@ (800f834 <SD_CheckStatus+0x38>)
 800f824:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f826:	4b03      	ldr	r3, [pc, #12]	@ (800f834 <SD_CheckStatus+0x38>)
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	b2db      	uxtb	r3, r3
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	20000009 	.word	0x20000009

0800f838 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f842:	f7ff ff05 	bl	800f650 <BSP_SD_Init>
 800f846:	4603      	mov	r3, r0
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d107      	bne.n	800f85c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800f84c:	79fb      	ldrb	r3, [r7, #7]
 800f84e:	4618      	mov	r0, r3
 800f850:	f7ff ffd4 	bl	800f7fc <SD_CheckStatus>
 800f854:	4603      	mov	r3, r0
 800f856:	461a      	mov	r2, r3
 800f858:	4b04      	ldr	r3, [pc, #16]	@ (800f86c <SD_initialize+0x34>)
 800f85a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f85c:	4b03      	ldr	r3, [pc, #12]	@ (800f86c <SD_initialize+0x34>)
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	b2db      	uxtb	r3, r3
}
 800f862:	4618      	mov	r0, r3
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	20000009 	.word	0x20000009

0800f870 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	4603      	mov	r3, r0
 800f878:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f87a:	79fb      	ldrb	r3, [r7, #7]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7ff ffbd 	bl	800f7fc <SD_CheckStatus>
 800f882:	4603      	mov	r3, r0
}
 800f884:	4618      	mov	r0, r3
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b086      	sub	sp, #24
 800f890:	af00      	add	r7, sp, #0
 800f892:	60b9      	str	r1, [r7, #8]
 800f894:	607a      	str	r2, [r7, #4]
 800f896:	603b      	str	r3, [r7, #0]
 800f898:	4603      	mov	r3, r0
 800f89a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f89c:	2301      	movs	r3, #1
 800f89e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f8a0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f8a4:	f7ff ff8c 	bl	800f7c0 <SD_CheckStatusWithTimeout>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	da01      	bge.n	800f8b2 <SD_read+0x26>
  {
    return res;
 800f8ae:	7dfb      	ldrb	r3, [r7, #23]
 800f8b0:	e03b      	b.n	800f92a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800f8b2:	683a      	ldr	r2, [r7, #0]
 800f8b4:	6879      	ldr	r1, [r7, #4]
 800f8b6:	68b8      	ldr	r0, [r7, #8]
 800f8b8:	f7ff fee2 	bl	800f680 <BSP_SD_ReadBlocks_DMA>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d132      	bne.n	800f928 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800f8c2:	4b1c      	ldr	r3, [pc, #112]	@ (800f934 <SD_read+0xa8>)
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800f8c8:	f7f4 fa3c 	bl	8003d44 <HAL_GetTick>
 800f8cc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f8ce:	bf00      	nop
 800f8d0:	4b18      	ldr	r3, [pc, #96]	@ (800f934 <SD_read+0xa8>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d108      	bne.n	800f8ea <SD_read+0x5e>
 800f8d8:	f7f4 fa34 	bl	8003d44 <HAL_GetTick>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d9f2      	bls.n	800f8d0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800f8ea:	4b12      	ldr	r3, [pc, #72]	@ (800f934 <SD_read+0xa8>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d102      	bne.n	800f8f8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	75fb      	strb	r3, [r7, #23]
 800f8f6:	e017      	b.n	800f928 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800f8f8:	4b0e      	ldr	r3, [pc, #56]	@ (800f934 <SD_read+0xa8>)
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f8fe:	f7f4 fa21 	bl	8003d44 <HAL_GetTick>
 800f902:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f904:	e007      	b.n	800f916 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f906:	f7ff feef 	bl	800f6e8 <BSP_SD_GetCardState>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d102      	bne.n	800f916 <SD_read+0x8a>
          {
            res = RES_OK;
 800f910:	2300      	movs	r3, #0
 800f912:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800f914:	e008      	b.n	800f928 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f916:	f7f4 fa15 	bl	8003d44 <HAL_GetTick>
 800f91a:	4602      	mov	r2, r0
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	1ad3      	subs	r3, r2, r3
 800f920:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f924:	4293      	cmp	r3, r2
 800f926:	d9ee      	bls.n	800f906 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800f928:	7dfb      	ldrb	r3, [r7, #23]
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3718      	adds	r7, #24
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
 800f932:	bf00      	nop
 800f934:	200009a4 	.word	0x200009a4

0800f938 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b086      	sub	sp, #24
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60b9      	str	r1, [r7, #8]
 800f940:	607a      	str	r2, [r7, #4]
 800f942:	603b      	str	r3, [r7, #0]
 800f944:	4603      	mov	r3, r0
 800f946:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f948:	2301      	movs	r3, #1
 800f94a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800f94c:	4b24      	ldr	r3, [pc, #144]	@ (800f9e0 <SD_write+0xa8>)
 800f94e:	2200      	movs	r2, #0
 800f950:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f952:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f956:	f7ff ff33 	bl	800f7c0 <SD_CheckStatusWithTimeout>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	da01      	bge.n	800f964 <SD_write+0x2c>
  {
    return res;
 800f960:	7dfb      	ldrb	r3, [r7, #23]
 800f962:	e038      	b.n	800f9d6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f964:	683a      	ldr	r2, [r7, #0]
 800f966:	6879      	ldr	r1, [r7, #4]
 800f968:	68b8      	ldr	r0, [r7, #8]
 800f96a:	f7ff fea3 	bl	800f6b4 <BSP_SD_WriteBlocks_DMA>
 800f96e:	4603      	mov	r3, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	d12f      	bne.n	800f9d4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800f974:	f7f4 f9e6 	bl	8003d44 <HAL_GetTick>
 800f978:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f97a:	bf00      	nop
 800f97c:	4b18      	ldr	r3, [pc, #96]	@ (800f9e0 <SD_write+0xa8>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d108      	bne.n	800f996 <SD_write+0x5e>
 800f984:	f7f4 f9de 	bl	8003d44 <HAL_GetTick>
 800f988:	4602      	mov	r2, r0
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f992:	4293      	cmp	r3, r2
 800f994:	d9f2      	bls.n	800f97c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800f996:	4b12      	ldr	r3, [pc, #72]	@ (800f9e0 <SD_write+0xa8>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d102      	bne.n	800f9a4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	75fb      	strb	r3, [r7, #23]
 800f9a2:	e017      	b.n	800f9d4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800f9a4:	4b0e      	ldr	r3, [pc, #56]	@ (800f9e0 <SD_write+0xa8>)
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f9aa:	f7f4 f9cb 	bl	8003d44 <HAL_GetTick>
 800f9ae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f9b0:	e007      	b.n	800f9c2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f9b2:	f7ff fe99 	bl	800f6e8 <BSP_SD_GetCardState>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d102      	bne.n	800f9c2 <SD_write+0x8a>
          {
            res = RES_OK;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	75fb      	strb	r3, [r7, #23]
            break;
 800f9c0:	e008      	b.n	800f9d4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f9c2:	f7f4 f9bf 	bl	8003d44 <HAL_GetTick>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	1ad3      	subs	r3, r2, r3
 800f9cc:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d9ee      	bls.n	800f9b2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f9d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3718      	adds	r7, #24
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	200009a0 	.word	0x200009a0

0800f9e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b08c      	sub	sp, #48	@ 0x30
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	603a      	str	r2, [r7, #0]
 800f9ee:	71fb      	strb	r3, [r7, #7]
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f9fa:	4b25      	ldr	r3, [pc, #148]	@ (800fa90 <SD_ioctl+0xac>)
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	f003 0301 	and.w	r3, r3, #1
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d001      	beq.n	800fa0c <SD_ioctl+0x28>
 800fa08:	2303      	movs	r3, #3
 800fa0a:	e03c      	b.n	800fa86 <SD_ioctl+0xa2>

  switch (cmd)
 800fa0c:	79bb      	ldrb	r3, [r7, #6]
 800fa0e:	2b03      	cmp	r3, #3
 800fa10:	d834      	bhi.n	800fa7c <SD_ioctl+0x98>
 800fa12:	a201      	add	r2, pc, #4	@ (adr r2, 800fa18 <SD_ioctl+0x34>)
 800fa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa18:	0800fa29 	.word	0x0800fa29
 800fa1c:	0800fa31 	.word	0x0800fa31
 800fa20:	0800fa49 	.word	0x0800fa49
 800fa24:	0800fa63 	.word	0x0800fa63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fa2e:	e028      	b.n	800fa82 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fa30:	f107 030c 	add.w	r3, r7, #12
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7ff fe67 	bl	800f708 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fa3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fa40:	2300      	movs	r3, #0
 800fa42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fa46:	e01c      	b.n	800fa82 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fa48:	f107 030c 	add.w	r3, r7, #12
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7ff fe5b 	bl	800f708 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fa52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa54:	b29a      	uxth	r2, r3
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fa60:	e00f      	b.n	800fa82 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fa62:	f107 030c 	add.w	r3, r7, #12
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7ff fe4e 	bl	800f708 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fa6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa6e:	0a5a      	lsrs	r2, r3, #9
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fa74:	2300      	movs	r3, #0
 800fa76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fa7a:	e002      	b.n	800fa82 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fa7c:	2304      	movs	r3, #4
 800fa7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800fa82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3730      	adds	r7, #48	@ 0x30
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	20000009 	.word	0x20000009

0800fa94 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800fa94:	b480      	push	{r7}
 800fa96:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800fa98:	4b03      	ldr	r3, [pc, #12]	@ (800faa8 <BSP_SD_WriteCpltCallback+0x14>)
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	601a      	str	r2, [r3, #0]
}
 800fa9e:	bf00      	nop
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr
 800faa8:	200009a0 	.word	0x200009a0

0800faac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800faac:	b480      	push	{r7}
 800faae:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800fab0:	4b03      	ldr	r3, [pc, #12]	@ (800fac0 <BSP_SD_ReadCpltCallback+0x14>)
 800fab2:	2201      	movs	r2, #1
 800fab4:	601a      	str	r2, [r3, #0]
}
 800fab6:	bf00      	nop
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr
 800fac0:	200009a4 	.word	0x200009a4

0800fac4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800fac4:	b590      	push	{r4, r7, lr}
 800fac6:	b089      	sub	sp, #36	@ 0x24
 800fac8:	af04      	add	r7, sp, #16
 800faca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800facc:	2301      	movs	r3, #1
 800face:	2202      	movs	r2, #2
 800fad0:	2102      	movs	r1, #2
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 fc85 	bl	80103e2 <USBH_FindInterface>
 800fad8:	4603      	mov	r3, r0
 800fada:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800fadc:	7bfb      	ldrb	r3, [r7, #15]
 800fade:	2bff      	cmp	r3, #255	@ 0xff
 800fae0:	d002      	beq.n	800fae8 <USBH_CDC_InterfaceInit+0x24>
 800fae2:	7bfb      	ldrb	r3, [r7, #15]
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d901      	bls.n	800faec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800fae8:	2302      	movs	r3, #2
 800faea:	e13d      	b.n	800fd68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800faec:	7bfb      	ldrb	r3, [r7, #15]
 800faee:	4619      	mov	r1, r3
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 fc5a 	bl	80103aa <USBH_SelectInterface>
 800faf6:	4603      	mov	r3, r0
 800faf8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800fafa:	7bbb      	ldrb	r3, [r7, #14]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d001      	beq.n	800fb04 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800fb00:	2302      	movs	r3, #2
 800fb02:	e131      	b.n	800fd68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800fb0a:	2050      	movs	r0, #80	@ 0x50
 800fb0c:	f005 fdc0 	bl	8015690 <malloc>
 800fb10:	4603      	mov	r3, r0
 800fb12:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fb1a:	69db      	ldr	r3, [r3, #28]
 800fb1c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d101      	bne.n	800fb28 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800fb24:	2302      	movs	r3, #2
 800fb26:	e11f      	b.n	800fd68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800fb28:	2250      	movs	r2, #80	@ 0x50
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	68b8      	ldr	r0, [r7, #8]
 800fb2e:	f005 ffd2 	bl	8015ad6 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800fb32:	7bfb      	ldrb	r3, [r7, #15]
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	211a      	movs	r1, #26
 800fb38:	fb01 f303 	mul.w	r3, r1, r3
 800fb3c:	4413      	add	r3, r2
 800fb3e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	b25b      	sxtb	r3, r3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	da15      	bge.n	800fb76 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fb4a:	7bfb      	ldrb	r3, [r7, #15]
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	211a      	movs	r1, #26
 800fb50:	fb01 f303 	mul.w	r3, r1, r3
 800fb54:	4413      	add	r3, r2
 800fb56:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800fb5a:	781a      	ldrb	r2, [r3, #0]
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fb60:	7bfb      	ldrb	r3, [r7, #15]
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	211a      	movs	r1, #26
 800fb66:	fb01 f303 	mul.w	r3, r1, r3
 800fb6a:	4413      	add	r3, r2
 800fb6c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800fb70:	881a      	ldrh	r2, [r3, #0]
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	785b      	ldrb	r3, [r3, #1]
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f001 ffbe 	bl	8011afe <USBH_AllocPipe>
 800fb82:	4603      	mov	r3, r0
 800fb84:	461a      	mov	r2, r3
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	7819      	ldrb	r1, [r3, #0]
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	7858      	ldrb	r0, [r3, #1]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fb9e:	68ba      	ldr	r2, [r7, #8]
 800fba0:	8952      	ldrh	r2, [r2, #10]
 800fba2:	9202      	str	r2, [sp, #8]
 800fba4:	2203      	movs	r2, #3
 800fba6:	9201      	str	r2, [sp, #4]
 800fba8:	9300      	str	r3, [sp, #0]
 800fbaa:	4623      	mov	r3, r4
 800fbac:	4602      	mov	r2, r0
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f001 ff76 	bl	8011aa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	4619      	mov	r1, r3
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f005 fb11 	bl	80151e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	210a      	movs	r1, #10
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f000 fc0a 	bl	80103e2 <USBH_FindInterface>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800fbd2:	7bfb      	ldrb	r3, [r7, #15]
 800fbd4:	2bff      	cmp	r3, #255	@ 0xff
 800fbd6:	d002      	beq.n	800fbde <USBH_CDC_InterfaceInit+0x11a>
 800fbd8:	7bfb      	ldrb	r3, [r7, #15]
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	d901      	bls.n	800fbe2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800fbde:	2302      	movs	r3, #2
 800fbe0:	e0c2      	b.n	800fd68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800fbe2:	7bfb      	ldrb	r3, [r7, #15]
 800fbe4:	687a      	ldr	r2, [r7, #4]
 800fbe6:	211a      	movs	r1, #26
 800fbe8:	fb01 f303 	mul.w	r3, r1, r3
 800fbec:	4413      	add	r3, r2
 800fbee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	b25b      	sxtb	r3, r3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	da16      	bge.n	800fc28 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fbfa:	7bfb      	ldrb	r3, [r7, #15]
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	211a      	movs	r1, #26
 800fc00:	fb01 f303 	mul.w	r3, r1, r3
 800fc04:	4413      	add	r3, r2
 800fc06:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800fc0a:	781a      	ldrb	r2, [r3, #0]
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fc10:	7bfb      	ldrb	r3, [r7, #15]
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	211a      	movs	r1, #26
 800fc16:	fb01 f303 	mul.w	r3, r1, r3
 800fc1a:	4413      	add	r3, r2
 800fc1c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800fc20:	881a      	ldrh	r2, [r3, #0]
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	835a      	strh	r2, [r3, #26]
 800fc26:	e015      	b.n	800fc54 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	211a      	movs	r1, #26
 800fc2e:	fb01 f303 	mul.w	r3, r1, r3
 800fc32:	4413      	add	r3, r2
 800fc34:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800fc38:	781a      	ldrb	r2, [r3, #0]
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fc3e:	7bfb      	ldrb	r3, [r7, #15]
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	211a      	movs	r1, #26
 800fc44:	fb01 f303 	mul.w	r3, r1, r3
 800fc48:	4413      	add	r3, r2
 800fc4a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800fc4e:	881a      	ldrh	r2, [r3, #0]
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800fc54:	7bfb      	ldrb	r3, [r7, #15]
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	211a      	movs	r1, #26
 800fc5a:	fb01 f303 	mul.w	r3, r1, r3
 800fc5e:	4413      	add	r3, r2
 800fc60:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	b25b      	sxtb	r3, r3
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	da16      	bge.n	800fc9a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800fc6c:	7bfb      	ldrb	r3, [r7, #15]
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	211a      	movs	r1, #26
 800fc72:	fb01 f303 	mul.w	r3, r1, r3
 800fc76:	4413      	add	r3, r2
 800fc78:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800fc7c:	781a      	ldrb	r2, [r3, #0]
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800fc82:	7bfb      	ldrb	r3, [r7, #15]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	211a      	movs	r1, #26
 800fc88:	fb01 f303 	mul.w	r3, r1, r3
 800fc8c:	4413      	add	r3, r2
 800fc8e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800fc92:	881a      	ldrh	r2, [r3, #0]
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	835a      	strh	r2, [r3, #26]
 800fc98:	e015      	b.n	800fcc6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800fc9a:	7bfb      	ldrb	r3, [r7, #15]
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	211a      	movs	r1, #26
 800fca0:	fb01 f303 	mul.w	r3, r1, r3
 800fca4:	4413      	add	r3, r2
 800fca6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800fcaa:	781a      	ldrb	r2, [r3, #0]
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800fcb0:	7bfb      	ldrb	r3, [r7, #15]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	211a      	movs	r1, #26
 800fcb6:	fb01 f303 	mul.w	r3, r1, r3
 800fcba:	4413      	add	r3, r2
 800fcbc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800fcc0:	881a      	ldrh	r2, [r3, #0]
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	7b9b      	ldrb	r3, [r3, #14]
 800fcca:	4619      	mov	r1, r3
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f001 ff16 	bl	8011afe <USBH_AllocPipe>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	7bdb      	ldrb	r3, [r3, #15]
 800fcde:	4619      	mov	r1, r3
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f001 ff0c 	bl	8011afe <USBH_AllocPipe>
 800fce6:	4603      	mov	r3, r0
 800fce8:	461a      	mov	r2, r3
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	7b59      	ldrb	r1, [r3, #13]
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	7b98      	ldrb	r0, [r3, #14]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fd02:	68ba      	ldr	r2, [r7, #8]
 800fd04:	8b12      	ldrh	r2, [r2, #24]
 800fd06:	9202      	str	r2, [sp, #8]
 800fd08:	2202      	movs	r2, #2
 800fd0a:	9201      	str	r2, [sp, #4]
 800fd0c:	9300      	str	r3, [sp, #0]
 800fd0e:	4623      	mov	r3, r4
 800fd10:	4602      	mov	r2, r0
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f001 fec4 	bl	8011aa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	7b19      	ldrb	r1, [r3, #12]
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	7bd8      	ldrb	r0, [r3, #15]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fd2c:	68ba      	ldr	r2, [r7, #8]
 800fd2e:	8b52      	ldrh	r2, [r2, #26]
 800fd30:	9202      	str	r2, [sp, #8]
 800fd32:	2202      	movs	r2, #2
 800fd34:	9201      	str	r2, [sp, #4]
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	4623      	mov	r3, r4
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f001 feaf 	bl	8011aa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	2200      	movs	r2, #0
 800fd46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	7b5b      	ldrb	r3, [r3, #13]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	4619      	mov	r1, r3
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f005 fa46 	bl	80151e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	7b1b      	ldrb	r3, [r3, #12]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	4619      	mov	r1, r3
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f005 fa3f 	bl	80151e4 <USBH_LL_SetToggle>

  return USBH_OK;
 800fd66:	2300      	movs	r3, #0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3714      	adds	r7, #20
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd90      	pop	{r4, r7, pc}

0800fd70 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fd7e:	69db      	ldr	r3, [r3, #28]
 800fd80:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d00e      	beq.n	800fda8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	4619      	mov	r1, r3
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f001 fea4 	bl	8011ade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f001 fecf 	bl	8011b40 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2200      	movs	r2, #0
 800fda6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	7b1b      	ldrb	r3, [r3, #12]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d00e      	beq.n	800fdce <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	7b1b      	ldrb	r3, [r3, #12]
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f001 fe91 	bl	8011ade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	7b1b      	ldrb	r3, [r3, #12]
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f001 febc 	bl	8011b40 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	7b5b      	ldrb	r3, [r3, #13]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d00e      	beq.n	800fdf4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	7b5b      	ldrb	r3, [r3, #13]
 800fdda:	4619      	mov	r1, r3
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f001 fe7e 	bl	8011ade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	7b5b      	ldrb	r3, [r3, #13]
 800fde6:	4619      	mov	r1, r3
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f001 fea9 	bl	8011b40 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fdfa:	69db      	ldr	r3, [r3, #28]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d00b      	beq.n	800fe18 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe06:	69db      	ldr	r3, [r3, #28]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f005 fc49 	bl	80156a0 <free>
    phost->pActiveClass->pData = 0U;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe14:	2200      	movs	r2, #0
 800fe16:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800fe18:	2300      	movs	r3, #0
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}

0800fe22 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b084      	sub	sp, #16
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe30:	69db      	ldr	r3, [r3, #28]
 800fe32:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	3340      	adds	r3, #64	@ 0x40
 800fe38:	4619      	mov	r1, r3
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f000 f8b1 	bl	800ffa2 <GetLineCoding>
 800fe40:	4603      	mov	r3, r0
 800fe42:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800fe44:	7afb      	ldrb	r3, [r7, #11]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d105      	bne.n	800fe56 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fe50:	2102      	movs	r1, #2
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800fe56:	7afb      	ldrb	r3, [r7, #11]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3710      	adds	r7, #16
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fe76:	69db      	ldr	r3, [r3, #28]
 800fe78:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800fe80:	2b04      	cmp	r3, #4
 800fe82:	d877      	bhi.n	800ff74 <USBH_CDC_Process+0x114>
 800fe84:	a201      	add	r2, pc, #4	@ (adr r2, 800fe8c <USBH_CDC_Process+0x2c>)
 800fe86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe8a:	bf00      	nop
 800fe8c:	0800fea1 	.word	0x0800fea1
 800fe90:	0800fea7 	.word	0x0800fea7
 800fe94:	0800fed7 	.word	0x0800fed7
 800fe98:	0800ff4b 	.word	0x0800ff4b
 800fe9c:	0800ff59 	.word	0x0800ff59
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800fea0:	2300      	movs	r3, #0
 800fea2:	73fb      	strb	r3, [r7, #15]
      break;
 800fea4:	e06d      	b.n	800ff82 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800feaa:	4619      	mov	r1, r3
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 f897 	bl	800ffe0 <SetLineCoding>
 800feb2:	4603      	mov	r3, r0
 800feb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800feb6:	7bbb      	ldrb	r3, [r7, #14]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d104      	bne.n	800fec6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	2202      	movs	r2, #2
 800fec0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800fec4:	e058      	b.n	800ff78 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800fec6:	7bbb      	ldrb	r3, [r7, #14]
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d055      	beq.n	800ff78 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	2204      	movs	r2, #4
 800fed0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800fed4:	e050      	b.n	800ff78 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	3340      	adds	r3, #64	@ 0x40
 800feda:	4619      	mov	r1, r3
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 f860 	bl	800ffa2 <GetLineCoding>
 800fee2:	4603      	mov	r3, r0
 800fee4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fee6:	7bbb      	ldrb	r3, [r7, #14]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d126      	bne.n	800ff3a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	2200      	movs	r2, #0
 800fef0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fefe:	791b      	ldrb	r3, [r3, #4]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d13b      	bne.n	800ff7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff0e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d133      	bne.n	800ff7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff1e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d12b      	bne.n	800ff7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff2c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d124      	bne.n	800ff7c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 f958 	bl	80101e8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ff38:	e020      	b.n	800ff7c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ff3a:	7bbb      	ldrb	r3, [r7, #14]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d01d      	beq.n	800ff7c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	2204      	movs	r2, #4
 800ff44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ff48:	e018      	b.n	800ff7c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 f867 	bl	801001e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 f8da 	bl	801010a <CDC_ProcessReception>
      break;
 800ff56:	e014      	b.n	800ff82 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ff58:	2100      	movs	r1, #0
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f001 f81a 	bl	8010f94 <USBH_ClrFeature>
 800ff60:	4603      	mov	r3, r0
 800ff62:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ff64:	7bbb      	ldrb	r3, [r7, #14]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10a      	bne.n	800ff80 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800ff72:	e005      	b.n	800ff80 <USBH_CDC_Process+0x120>

    default:
      break;
 800ff74:	bf00      	nop
 800ff76:	e004      	b.n	800ff82 <USBH_CDC_Process+0x122>
      break;
 800ff78:	bf00      	nop
 800ff7a:	e002      	b.n	800ff82 <USBH_CDC_Process+0x122>
      break;
 800ff7c:	bf00      	nop
 800ff7e:	e000      	b.n	800ff82 <USBH_CDC_Process+0x122>
      break;
 800ff80:	bf00      	nop

  }

  return status;
 800ff82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3710      	adds	r7, #16
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ff94:	2300      	movs	r3, #0
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	370c      	adds	r7, #12
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr

0800ffa2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ffa2:	b580      	push	{r7, lr}
 800ffa4:	b082      	sub	sp, #8
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
 800ffaa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	22a1      	movs	r2, #161	@ 0xa1
 800ffb0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2221      	movs	r2, #33	@ 0x21
 800ffb6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2207      	movs	r2, #7
 800ffc8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	2207      	movs	r2, #7
 800ffce:	4619      	mov	r1, r3
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f001 fb14 	bl	80115fe <USBH_CtlReq>
 800ffd6:	4603      	mov	r3, r0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3708      	adds	r7, #8
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2221      	movs	r2, #33	@ 0x21
 800ffee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2220      	movs	r2, #32
 800fff4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2200      	movs	r2, #0
 800fffa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2200      	movs	r2, #0
 8010000:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2207      	movs	r2, #7
 8010006:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	2207      	movs	r2, #7
 801000c:	4619      	mov	r1, r3
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f001 faf5 	bl	80115fe <USBH_CtlReq>
 8010014:	4603      	mov	r3, r0
}
 8010016:	4618      	mov	r0, r3
 8010018:	3708      	adds	r7, #8
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b086      	sub	sp, #24
 8010022:	af02      	add	r7, sp, #8
 8010024:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801002c:	69db      	ldr	r3, [r3, #28]
 801002e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010030:	2300      	movs	r3, #0
 8010032:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 801003a:	2b01      	cmp	r3, #1
 801003c:	d002      	beq.n	8010044 <CDC_ProcessTransmission+0x26>
 801003e:	2b02      	cmp	r3, #2
 8010040:	d023      	beq.n	801008a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8010042:	e05e      	b.n	8010102 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010048:	68fa      	ldr	r2, [r7, #12]
 801004a:	8b12      	ldrh	r2, [r2, #24]
 801004c:	4293      	cmp	r3, r2
 801004e:	d90b      	bls.n	8010068 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	69d9      	ldr	r1, [r3, #28]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	8b1a      	ldrh	r2, [r3, #24]
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	7b5b      	ldrb	r3, [r3, #13]
 801005c:	2001      	movs	r0, #1
 801005e:	9000      	str	r0, [sp, #0]
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f001 fcda 	bl	8011a1a <USBH_BulkSendData>
 8010066:	e00b      	b.n	8010080 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8010070:	b29a      	uxth	r2, r3
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	7b5b      	ldrb	r3, [r3, #13]
 8010076:	2001      	movs	r0, #1
 8010078:	9000      	str	r0, [sp, #0]
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f001 fccd 	bl	8011a1a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2202      	movs	r2, #2
 8010084:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8010088:	e03b      	b.n	8010102 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	7b5b      	ldrb	r3, [r3, #13]
 801008e:	4619      	mov	r1, r3
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f005 f87d 	bl	8015190 <USBH_LL_GetURBState>
 8010096:	4603      	mov	r3, r0
 8010098:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801009a:	7afb      	ldrb	r3, [r7, #11]
 801009c:	2b01      	cmp	r3, #1
 801009e:	d128      	bne.n	80100f2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100a4:	68fa      	ldr	r2, [r7, #12]
 80100a6:	8b12      	ldrh	r2, [r2, #24]
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d90e      	bls.n	80100ca <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	8b12      	ldrh	r2, [r2, #24]
 80100b4:	1a9a      	subs	r2, r3, r2
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	69db      	ldr	r3, [r3, #28]
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	8b12      	ldrh	r2, [r2, #24]
 80100c2:	441a      	add	r2, r3
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	61da      	str	r2, [r3, #28]
 80100c8:	e002      	b.n	80100d0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	2200      	movs	r2, #0
 80100ce:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d004      	beq.n	80100e2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2201      	movs	r2, #1
 80100dc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80100e0:	e00e      	b.n	8010100 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2200      	movs	r2, #0
 80100e6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 f868 	bl	80101c0 <USBH_CDC_TransmitCallback>
      break;
 80100f0:	e006      	b.n	8010100 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80100f2:	7afb      	ldrb	r3, [r7, #11]
 80100f4:	2b02      	cmp	r3, #2
 80100f6:	d103      	bne.n	8010100 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2201      	movs	r2, #1
 80100fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8010100:	bf00      	nop
  }
}
 8010102:	bf00      	nop
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b086      	sub	sp, #24
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010118:	69db      	ldr	r3, [r3, #28]
 801011a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801011c:	2300      	movs	r3, #0
 801011e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8010126:	2b03      	cmp	r3, #3
 8010128:	d002      	beq.n	8010130 <CDC_ProcessReception+0x26>
 801012a:	2b04      	cmp	r3, #4
 801012c:	d00e      	beq.n	801014c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 801012e:	e043      	b.n	80101b8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	6a19      	ldr	r1, [r3, #32]
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	8b5a      	ldrh	r2, [r3, #26]
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	7b1b      	ldrb	r3, [r3, #12]
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f001 fc91 	bl	8011a64 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	2204      	movs	r2, #4
 8010146:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 801014a:	e035      	b.n	80101b8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	7b1b      	ldrb	r3, [r3, #12]
 8010150:	4619      	mov	r1, r3
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f005 f81c 	bl	8015190 <USBH_LL_GetURBState>
 8010158:	4603      	mov	r3, r0
 801015a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 801015c:	7cfb      	ldrb	r3, [r7, #19]
 801015e:	2b01      	cmp	r3, #1
 8010160:	d129      	bne.n	80101b6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	7b1b      	ldrb	r3, [r3, #12]
 8010166:	4619      	mov	r1, r3
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f004 ff7f 	bl	801506c <USBH_LL_GetLastXferSize>
 801016e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010174:	68fa      	ldr	r2, [r7, #12]
 8010176:	429a      	cmp	r2, r3
 8010178:	d016      	beq.n	80101a8 <CDC_ProcessReception+0x9e>
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	8b5b      	ldrh	r3, [r3, #26]
 801017e:	461a      	mov	r2, r3
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	4293      	cmp	r3, r2
 8010184:	d110      	bne.n	80101a8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	1ad2      	subs	r2, r2, r3
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	6a1a      	ldr	r2, [r3, #32]
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	441a      	add	r2, r3
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	2203      	movs	r2, #3
 80101a2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80101a6:	e006      	b.n	80101b6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	2200      	movs	r2, #0
 80101ac:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 f80f 	bl	80101d4 <USBH_CDC_ReceiveCallback>
      break;
 80101b6:	bf00      	nop
  }
}
 80101b8:	bf00      	nop
 80101ba:	3718      	adds	r7, #24
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80101c8:	bf00      	nop
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr

080101d4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80101dc:	bf00      	nop
 80101de:	370c      	adds	r7, #12
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr

080101e8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b083      	sub	sp, #12
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80101f0:	bf00      	nop
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	60f8      	str	r0, [r7, #12]
 8010204:	60b9      	str	r1, [r7, #8]
 8010206:	4613      	mov	r3, r2
 8010208:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d101      	bne.n	8010214 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010210:	2302      	movs	r3, #2
 8010212:	e029      	b.n	8010268 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	79fa      	ldrb	r2, [r7, #7]
 8010218:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2200      	movs	r2, #0
 8010220:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2200      	movs	r2, #0
 8010228:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 801022c:	68f8      	ldr	r0, [r7, #12]
 801022e:	f000 f81f 	bl	8010270 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2200      	movs	r2, #0
 8010236:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2200      	movs	r2, #0
 801023e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2200      	movs	r2, #0
 8010246:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2200      	movs	r2, #0
 801024e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d003      	beq.n	8010260 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	68ba      	ldr	r2, [r7, #8]
 801025c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8010260:	68f8      	ldr	r0, [r7, #12]
 8010262:	f004 fe4f 	bl	8014f04 <USBH_LL_Init>

  return USBH_OK;
 8010266:	2300      	movs	r3, #0
}
 8010268:	4618      	mov	r0, r3
 801026a:	3710      	adds	r7, #16
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b084      	sub	sp, #16
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010278:	2300      	movs	r3, #0
 801027a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801027c:	2300      	movs	r3, #0
 801027e:	60fb      	str	r3, [r7, #12]
 8010280:	e009      	b.n	8010296 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	33e0      	adds	r3, #224	@ 0xe0
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	4413      	add	r3, r2
 801028c:	2200      	movs	r2, #0
 801028e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	3301      	adds	r3, #1
 8010294:	60fb      	str	r3, [r7, #12]
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2b0f      	cmp	r3, #15
 801029a:	d9f2      	bls.n	8010282 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801029c:	2300      	movs	r3, #0
 801029e:	60fb      	str	r3, [r7, #12]
 80102a0:	e009      	b.n	80102b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	4413      	add	r3, r2
 80102a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80102ac:	2200      	movs	r2, #0
 80102ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	3301      	adds	r3, #1
 80102b4:	60fb      	str	r3, [r7, #12]
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80102bc:	d3f1      	bcc.n	80102a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2200      	movs	r2, #0
 80102c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2201      	movs	r2, #1
 80102ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2200      	movs	r2, #0
 80102d4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2201      	movs	r2, #1
 80102dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2240      	movs	r2, #64	@ 0x40
 80102e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2200      	movs	r2, #0
 80102ee:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2201      	movs	r2, #1
 80102f6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2200      	movs	r2, #0
 80102fe:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2200      	movs	r2, #0
 8010306:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	331c      	adds	r3, #28
 801030e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010312:	2100      	movs	r1, #0
 8010314:	4618      	mov	r0, r3
 8010316:	f005 fbde 	bl	8015ad6 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010324:	2100      	movs	r1, #0
 8010326:	4618      	mov	r0, r3
 8010328:	f005 fbd5 	bl	8015ad6 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010332:	2212      	movs	r2, #18
 8010334:	2100      	movs	r1, #0
 8010336:	4618      	mov	r0, r3
 8010338:	f005 fbcd 	bl	8015ad6 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010342:	223e      	movs	r2, #62	@ 0x3e
 8010344:	2100      	movs	r1, #0
 8010346:	4618      	mov	r0, r3
 8010348:	f005 fbc5 	bl	8015ad6 <memset>

  return USBH_OK;
 801034c:	2300      	movs	r3, #0
}
 801034e:	4618      	mov	r0, r3
 8010350:	3710      	adds	r7, #16
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}

08010356 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010356:	b480      	push	{r7}
 8010358:	b085      	sub	sp, #20
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
 801035e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010360:	2300      	movs	r3, #0
 8010362:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d016      	beq.n	8010398 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010370:	2b00      	cmp	r3, #0
 8010372:	d10e      	bne.n	8010392 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801037a:	1c59      	adds	r1, r3, #1
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	33de      	adds	r3, #222	@ 0xde
 8010386:	6839      	ldr	r1, [r7, #0]
 8010388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 801038c:	2300      	movs	r3, #0
 801038e:	73fb      	strb	r3, [r7, #15]
 8010390:	e004      	b.n	801039c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010392:	2302      	movs	r3, #2
 8010394:	73fb      	strb	r3, [r7, #15]
 8010396:	e001      	b.n	801039c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010398:	2302      	movs	r3, #2
 801039a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801039c:	7bfb      	ldrb	r3, [r7, #15]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3714      	adds	r7, #20
 80103a2:	46bd      	mov	sp, r7
 80103a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a8:	4770      	bx	lr

080103aa <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80103aa:	b480      	push	{r7}
 80103ac:	b085      	sub	sp, #20
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
 80103b2:	460b      	mov	r3, r1
 80103b4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80103b6:	2300      	movs	r3, #0
 80103b8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80103c0:	78fa      	ldrb	r2, [r7, #3]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d204      	bcs.n	80103d0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	78fa      	ldrb	r2, [r7, #3]
 80103ca:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80103ce:	e001      	b.n	80103d4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80103d0:	2302      	movs	r3, #2
 80103d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80103d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3714      	adds	r7, #20
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr

080103e2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80103e2:	b480      	push	{r7}
 80103e4:	b087      	sub	sp, #28
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	6078      	str	r0, [r7, #4]
 80103ea:	4608      	mov	r0, r1
 80103ec:	4611      	mov	r1, r2
 80103ee:	461a      	mov	r2, r3
 80103f0:	4603      	mov	r3, r0
 80103f2:	70fb      	strb	r3, [r7, #3]
 80103f4:	460b      	mov	r3, r1
 80103f6:	70bb      	strb	r3, [r7, #2]
 80103f8:	4613      	mov	r3, r2
 80103fa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80103fc:	2300      	movs	r3, #0
 80103fe:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010400:	2300      	movs	r3, #0
 8010402:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 801040a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801040c:	e025      	b.n	801045a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 801040e:	7dfb      	ldrb	r3, [r7, #23]
 8010410:	221a      	movs	r2, #26
 8010412:	fb02 f303 	mul.w	r3, r2, r3
 8010416:	3308      	adds	r3, #8
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	4413      	add	r3, r2
 801041c:	3302      	adds	r3, #2
 801041e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	795b      	ldrb	r3, [r3, #5]
 8010424:	78fa      	ldrb	r2, [r7, #3]
 8010426:	429a      	cmp	r2, r3
 8010428:	d002      	beq.n	8010430 <USBH_FindInterface+0x4e>
 801042a:	78fb      	ldrb	r3, [r7, #3]
 801042c:	2bff      	cmp	r3, #255	@ 0xff
 801042e:	d111      	bne.n	8010454 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010434:	78ba      	ldrb	r2, [r7, #2]
 8010436:	429a      	cmp	r2, r3
 8010438:	d002      	beq.n	8010440 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801043a:	78bb      	ldrb	r3, [r7, #2]
 801043c:	2bff      	cmp	r3, #255	@ 0xff
 801043e:	d109      	bne.n	8010454 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010444:	787a      	ldrb	r2, [r7, #1]
 8010446:	429a      	cmp	r2, r3
 8010448:	d002      	beq.n	8010450 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801044a:	787b      	ldrb	r3, [r7, #1]
 801044c:	2bff      	cmp	r3, #255	@ 0xff
 801044e:	d101      	bne.n	8010454 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010450:	7dfb      	ldrb	r3, [r7, #23]
 8010452:	e006      	b.n	8010462 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010454:	7dfb      	ldrb	r3, [r7, #23]
 8010456:	3301      	adds	r3, #1
 8010458:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801045a:	7dfb      	ldrb	r3, [r7, #23]
 801045c:	2b01      	cmp	r3, #1
 801045e:	d9d6      	bls.n	801040e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010460:	23ff      	movs	r3, #255	@ 0xff
}
 8010462:	4618      	mov	r0, r3
 8010464:	371c      	adds	r7, #28
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr

0801046e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 801046e:	b580      	push	{r7, lr}
 8010470:	b082      	sub	sp, #8
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f004 fd80 	bl	8014f7c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 801047c:	2101      	movs	r1, #1
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f004 fe99 	bl	80151b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010484:	2300      	movs	r3, #0
}
 8010486:	4618      	mov	r0, r3
 8010488:	3708      	adds	r7, #8
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
	...

08010490 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b088      	sub	sp, #32
 8010494:	af04      	add	r7, sp, #16
 8010496:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8010498:	2302      	movs	r3, #2
 801049a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 801049c:	2300      	movs	r3, #0
 801049e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80104a6:	b2db      	uxtb	r3, r3
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	d102      	bne.n	80104b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2203      	movs	r2, #3
 80104b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	b2db      	uxtb	r3, r3
 80104b8:	2b0b      	cmp	r3, #11
 80104ba:	f200 81bb 	bhi.w	8010834 <USBH_Process+0x3a4>
 80104be:	a201      	add	r2, pc, #4	@ (adr r2, 80104c4 <USBH_Process+0x34>)
 80104c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104c4:	080104f5 	.word	0x080104f5
 80104c8:	08010527 	.word	0x08010527
 80104cc:	0801058f 	.word	0x0801058f
 80104d0:	080107cf 	.word	0x080107cf
 80104d4:	08010835 	.word	0x08010835
 80104d8:	0801062f 	.word	0x0801062f
 80104dc:	08010775 	.word	0x08010775
 80104e0:	08010665 	.word	0x08010665
 80104e4:	08010685 	.word	0x08010685
 80104e8:	080106a3 	.word	0x080106a3
 80104ec:	080106e7 	.word	0x080106e7
 80104f0:	080107b7 	.word	0x080107b7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80104fa:	b2db      	uxtb	r3, r3
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f000 819b 	beq.w	8010838 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2201      	movs	r2, #1
 8010506:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8010508:	20c8      	movs	r0, #200	@ 0xc8
 801050a:	f004 fe9e 	bl	801524a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f004 fd91 	bl	8015036 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2200      	movs	r2, #0
 8010518:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010524:	e188      	b.n	8010838 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 801052c:	2b01      	cmp	r3, #1
 801052e:	d107      	bne.n	8010540 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2200      	movs	r2, #0
 8010534:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2202      	movs	r2, #2
 801053c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801053e:	e18a      	b.n	8010856 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8010546:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801054a:	d914      	bls.n	8010576 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010552:	3301      	adds	r3, #1
 8010554:	b2da      	uxtb	r2, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010562:	2b03      	cmp	r3, #3
 8010564:	d903      	bls.n	801056e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	220d      	movs	r2, #13
 801056a:	701a      	strb	r2, [r3, #0]
      break;
 801056c:	e173      	b.n	8010856 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	701a      	strb	r2, [r3, #0]
      break;
 8010574:	e16f      	b.n	8010856 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 801057c:	f103 020a 	add.w	r2, r3, #10
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8010586:	200a      	movs	r0, #10
 8010588:	f004 fe5f 	bl	801524a <USBH_Delay>
      break;
 801058c:	e163      	b.n	8010856 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010594:	2b00      	cmp	r3, #0
 8010596:	d005      	beq.n	80105a4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801059e:	2104      	movs	r1, #4
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80105a4:	2064      	movs	r0, #100	@ 0x64
 80105a6:	f004 fe50 	bl	801524a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f004 fd1c 	bl	8014fe8 <USBH_LL_GetSpeed>
 80105b0:	4603      	mov	r3, r0
 80105b2:	461a      	mov	r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2205      	movs	r2, #5
 80105be:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80105c0:	2100      	movs	r1, #0
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f001 fa9b 	bl	8011afe <USBH_AllocPipe>
 80105c8:	4603      	mov	r3, r0
 80105ca:	461a      	mov	r2, r3
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80105d0:	2180      	movs	r1, #128	@ 0x80
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f001 fa93 	bl	8011afe <USBH_AllocPipe>
 80105d8:	4603      	mov	r3, r0
 80105da:	461a      	mov	r2, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	7919      	ldrb	r1, [r3, #4]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80105f4:	9202      	str	r2, [sp, #8]
 80105f6:	2200      	movs	r2, #0
 80105f8:	9201      	str	r2, [sp, #4]
 80105fa:	9300      	str	r3, [sp, #0]
 80105fc:	4603      	mov	r3, r0
 80105fe:	2280      	movs	r2, #128	@ 0x80
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f001 fa4d 	bl	8011aa0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	7959      	ldrb	r1, [r3, #5]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801061a:	9202      	str	r2, [sp, #8]
 801061c:	2200      	movs	r2, #0
 801061e:	9201      	str	r2, [sp, #4]
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	4603      	mov	r3, r0
 8010624:	2200      	movs	r2, #0
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f001 fa3a 	bl	8011aa0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801062c:	e113      	b.n	8010856 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 f916 	bl	8010860 <USBH_HandleEnum>
 8010634:	4603      	mov	r3, r0
 8010636:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8010638:	7bbb      	ldrb	r3, [r7, #14]
 801063a:	b2db      	uxtb	r3, r3
 801063c:	2b00      	cmp	r3, #0
 801063e:	f040 80fd 	bne.w	801083c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2200      	movs	r2, #0
 8010646:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8010650:	2b01      	cmp	r3, #1
 8010652:	d103      	bne.n	801065c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2208      	movs	r2, #8
 8010658:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801065a:	e0ef      	b.n	801083c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2207      	movs	r2, #7
 8010660:	701a      	strb	r2, [r3, #0]
      break;
 8010662:	e0eb      	b.n	801083c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801066a:	2b00      	cmp	r3, #0
 801066c:	f000 80e8 	beq.w	8010840 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010676:	2101      	movs	r1, #1
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2208      	movs	r2, #8
 8010680:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8010682:	e0dd      	b.n	8010840 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 801068a:	4619      	mov	r1, r3
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f000 fc3a 	bl	8010f06 <USBH_SetCfg>
 8010692:	4603      	mov	r3, r0
 8010694:	2b00      	cmp	r3, #0
 8010696:	f040 80d5 	bne.w	8010844 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2209      	movs	r2, #9
 801069e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80106a0:	e0d0      	b.n	8010844 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80106a8:	f003 0320 	and.w	r3, r3, #32
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d016      	beq.n	80106de <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80106b0:	2101      	movs	r1, #1
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 fc4a 	bl	8010f4c <USBH_SetFeature>
 80106b8:	4603      	mov	r3, r0
 80106ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80106bc:	7bbb      	ldrb	r3, [r7, #14]
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d103      	bne.n	80106cc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	220a      	movs	r2, #10
 80106c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80106ca:	e0bd      	b.n	8010848 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80106cc:	7bbb      	ldrb	r3, [r7, #14]
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	2b03      	cmp	r3, #3
 80106d2:	f040 80b9 	bne.w	8010848 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	220a      	movs	r2, #10
 80106da:	701a      	strb	r2, [r3, #0]
      break;
 80106dc:	e0b4      	b.n	8010848 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	220a      	movs	r2, #10
 80106e2:	701a      	strb	r2, [r3, #0]
      break;
 80106e4:	e0b0      	b.n	8010848 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f000 80ad 	beq.w	801084c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80106fa:	2300      	movs	r3, #0
 80106fc:	73fb      	strb	r3, [r7, #15]
 80106fe:	e016      	b.n	801072e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8010700:	7bfa      	ldrb	r2, [r7, #15]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	32de      	adds	r2, #222	@ 0xde
 8010706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801070a:	791a      	ldrb	r2, [r3, #4]
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8010712:	429a      	cmp	r2, r3
 8010714:	d108      	bne.n	8010728 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8010716:	7bfa      	ldrb	r2, [r7, #15]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	32de      	adds	r2, #222	@ 0xde
 801071c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8010726:	e005      	b.n	8010734 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010728:	7bfb      	ldrb	r3, [r7, #15]
 801072a:	3301      	adds	r3, #1
 801072c:	73fb      	strb	r3, [r7, #15]
 801072e:	7bfb      	ldrb	r3, [r7, #15]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d0e5      	beq.n	8010700 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801073a:	2b00      	cmp	r3, #0
 801073c:	d016      	beq.n	801076c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010744:	689b      	ldr	r3, [r3, #8]
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	4798      	blx	r3
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d109      	bne.n	8010764 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2206      	movs	r2, #6
 8010754:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801075c:	2103      	movs	r1, #3
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010762:	e073      	b.n	801084c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	220d      	movs	r2, #13
 8010768:	701a      	strb	r2, [r3, #0]
      break;
 801076a:	e06f      	b.n	801084c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	220d      	movs	r2, #13
 8010770:	701a      	strb	r2, [r3, #0]
      break;
 8010772:	e06b      	b.n	801084c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801077a:	2b00      	cmp	r3, #0
 801077c:	d017      	beq.n	80107ae <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010784:	691b      	ldr	r3, [r3, #16]
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	4798      	blx	r3
 801078a:	4603      	mov	r3, r0
 801078c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801078e:	7bbb      	ldrb	r3, [r7, #14]
 8010790:	b2db      	uxtb	r3, r3
 8010792:	2b00      	cmp	r3, #0
 8010794:	d103      	bne.n	801079e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	220b      	movs	r2, #11
 801079a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801079c:	e058      	b.n	8010850 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 801079e:	7bbb      	ldrb	r3, [r7, #14]
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d154      	bne.n	8010850 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	220d      	movs	r2, #13
 80107aa:	701a      	strb	r2, [r3, #0]
      break;
 80107ac:	e050      	b.n	8010850 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	220d      	movs	r2, #13
 80107b2:	701a      	strb	r2, [r3, #0]
      break;
 80107b4:	e04c      	b.n	8010850 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d049      	beq.n	8010854 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80107c6:	695b      	ldr	r3, [r3, #20]
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	4798      	blx	r3
      }
      break;
 80107cc:	e042      	b.n	8010854 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2200      	movs	r2, #0
 80107d2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f7ff fd4a 	bl	8010270 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d009      	beq.n	80107fa <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80107ec:	68db      	ldr	r3, [r3, #12]
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010800:	2b00      	cmp	r3, #0
 8010802:	d005      	beq.n	8010810 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801080a:	2105      	movs	r1, #5
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8010816:	b2db      	uxtb	r3, r3
 8010818:	2b01      	cmp	r3, #1
 801081a:	d107      	bne.n	801082c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2200      	movs	r2, #0
 8010820:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f7ff fe22 	bl	801046e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801082a:	e014      	b.n	8010856 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f004 fba5 	bl	8014f7c <USBH_LL_Start>
      break;
 8010832:	e010      	b.n	8010856 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8010834:	bf00      	nop
 8010836:	e00e      	b.n	8010856 <USBH_Process+0x3c6>
      break;
 8010838:	bf00      	nop
 801083a:	e00c      	b.n	8010856 <USBH_Process+0x3c6>
      break;
 801083c:	bf00      	nop
 801083e:	e00a      	b.n	8010856 <USBH_Process+0x3c6>
    break;
 8010840:	bf00      	nop
 8010842:	e008      	b.n	8010856 <USBH_Process+0x3c6>
      break;
 8010844:	bf00      	nop
 8010846:	e006      	b.n	8010856 <USBH_Process+0x3c6>
      break;
 8010848:	bf00      	nop
 801084a:	e004      	b.n	8010856 <USBH_Process+0x3c6>
      break;
 801084c:	bf00      	nop
 801084e:	e002      	b.n	8010856 <USBH_Process+0x3c6>
      break;
 8010850:	bf00      	nop
 8010852:	e000      	b.n	8010856 <USBH_Process+0x3c6>
      break;
 8010854:	bf00      	nop
  }
  return USBH_OK;
 8010856:	2300      	movs	r3, #0
}
 8010858:	4618      	mov	r0, r3
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b088      	sub	sp, #32
 8010864:	af04      	add	r7, sp, #16
 8010866:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8010868:	2301      	movs	r3, #1
 801086a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 801086c:	2301      	movs	r3, #1
 801086e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	785b      	ldrb	r3, [r3, #1]
 8010874:	2b07      	cmp	r3, #7
 8010876:	f200 81bd 	bhi.w	8010bf4 <USBH_HandleEnum+0x394>
 801087a:	a201      	add	r2, pc, #4	@ (adr r2, 8010880 <USBH_HandleEnum+0x20>)
 801087c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010880:	080108a1 	.word	0x080108a1
 8010884:	0801095b 	.word	0x0801095b
 8010888:	080109c5 	.word	0x080109c5
 801088c:	08010a4f 	.word	0x08010a4f
 8010890:	08010ab9 	.word	0x08010ab9
 8010894:	08010b29 	.word	0x08010b29
 8010898:	08010b6f 	.word	0x08010b6f
 801089c:	08010bb5 	.word	0x08010bb5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80108a0:	2108      	movs	r1, #8
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f000 fa4c 	bl	8010d40 <USBH_Get_DevDesc>
 80108a8:	4603      	mov	r3, r0
 80108aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80108ac:	7bbb      	ldrb	r3, [r7, #14]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d12e      	bne.n	8010910 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2201      	movs	r2, #1
 80108c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	7919      	ldrb	r1, [r3, #4]
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80108d6:	9202      	str	r2, [sp, #8]
 80108d8:	2200      	movs	r2, #0
 80108da:	9201      	str	r2, [sp, #4]
 80108dc:	9300      	str	r3, [sp, #0]
 80108de:	4603      	mov	r3, r0
 80108e0:	2280      	movs	r2, #128	@ 0x80
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f001 f8dc 	bl	8011aa0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	7959      	ldrb	r1, [r3, #5]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80108f8:	687a      	ldr	r2, [r7, #4]
 80108fa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80108fc:	9202      	str	r2, [sp, #8]
 80108fe:	2200      	movs	r2, #0
 8010900:	9201      	str	r2, [sp, #4]
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	4603      	mov	r3, r0
 8010906:	2200      	movs	r2, #0
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f001 f8c9 	bl	8011aa0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801090e:	e173      	b.n	8010bf8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010910:	7bbb      	ldrb	r3, [r7, #14]
 8010912:	2b03      	cmp	r3, #3
 8010914:	f040 8170 	bne.w	8010bf8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801091e:	3301      	adds	r3, #1
 8010920:	b2da      	uxtb	r2, r3
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801092e:	2b03      	cmp	r3, #3
 8010930:	d903      	bls.n	801093a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	220d      	movs	r2, #13
 8010936:	701a      	strb	r2, [r3, #0]
      break;
 8010938:	e15e      	b.n	8010bf8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	795b      	ldrb	r3, [r3, #5]
 801093e:	4619      	mov	r1, r3
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f001 f8fd 	bl	8011b40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	791b      	ldrb	r3, [r3, #4]
 801094a:	4619      	mov	r1, r3
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f001 f8f7 	bl	8011b40 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2200      	movs	r2, #0
 8010956:	701a      	strb	r2, [r3, #0]
      break;
 8010958:	e14e      	b.n	8010bf8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801095a:	2112      	movs	r1, #18
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f000 f9ef 	bl	8010d40 <USBH_Get_DevDesc>
 8010962:	4603      	mov	r3, r0
 8010964:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010966:	7bbb      	ldrb	r3, [r7, #14]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d103      	bne.n	8010974 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2202      	movs	r2, #2
 8010970:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010972:	e143      	b.n	8010bfc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010974:	7bbb      	ldrb	r3, [r7, #14]
 8010976:	2b03      	cmp	r3, #3
 8010978:	f040 8140 	bne.w	8010bfc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010982:	3301      	adds	r3, #1
 8010984:	b2da      	uxtb	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010992:	2b03      	cmp	r3, #3
 8010994:	d903      	bls.n	801099e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	220d      	movs	r2, #13
 801099a:	701a      	strb	r2, [r3, #0]
      break;
 801099c:	e12e      	b.n	8010bfc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	795b      	ldrb	r3, [r3, #5]
 80109a2:	4619      	mov	r1, r3
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f001 f8cb 	bl	8011b40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	791b      	ldrb	r3, [r3, #4]
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f001 f8c5 	bl	8011b40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2200      	movs	r2, #0
 80109ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2200      	movs	r2, #0
 80109c0:	701a      	strb	r2, [r3, #0]
      break;
 80109c2:	e11b      	b.n	8010bfc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80109c4:	2101      	movs	r1, #1
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 fa79 	bl	8010ebe <USBH_SetAddress>
 80109cc:	4603      	mov	r3, r0
 80109ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80109d0:	7bbb      	ldrb	r3, [r7, #14]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d130      	bne.n	8010a38 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80109d6:	2002      	movs	r0, #2
 80109d8:	f004 fc37 	bl	801524a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2201      	movs	r2, #1
 80109e0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2203      	movs	r2, #3
 80109e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	7919      	ldrb	r1, [r3, #4]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80109fe:	9202      	str	r2, [sp, #8]
 8010a00:	2200      	movs	r2, #0
 8010a02:	9201      	str	r2, [sp, #4]
 8010a04:	9300      	str	r3, [sp, #0]
 8010a06:	4603      	mov	r3, r0
 8010a08:	2280      	movs	r2, #128	@ 0x80
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f001 f848 	bl	8011aa0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	7959      	ldrb	r1, [r3, #5]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010a20:	687a      	ldr	r2, [r7, #4]
 8010a22:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010a24:	9202      	str	r2, [sp, #8]
 8010a26:	2200      	movs	r2, #0
 8010a28:	9201      	str	r2, [sp, #4]
 8010a2a:	9300      	str	r3, [sp, #0]
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2200      	movs	r2, #0
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f001 f835 	bl	8011aa0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010a36:	e0e3      	b.n	8010c00 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010a38:	7bbb      	ldrb	r3, [r7, #14]
 8010a3a:	2b03      	cmp	r3, #3
 8010a3c:	f040 80e0 	bne.w	8010c00 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	220d      	movs	r2, #13
 8010a44:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	705a      	strb	r2, [r3, #1]
      break;
 8010a4c:	e0d8      	b.n	8010c00 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8010a4e:	2109      	movs	r1, #9
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f000 f9a1 	bl	8010d98 <USBH_Get_CfgDesc>
 8010a56:	4603      	mov	r3, r0
 8010a58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010a5a:	7bbb      	ldrb	r3, [r7, #14]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d103      	bne.n	8010a68 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2204      	movs	r2, #4
 8010a64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010a66:	e0cd      	b.n	8010c04 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010a68:	7bbb      	ldrb	r3, [r7, #14]
 8010a6a:	2b03      	cmp	r3, #3
 8010a6c:	f040 80ca 	bne.w	8010c04 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010a76:	3301      	adds	r3, #1
 8010a78:	b2da      	uxtb	r2, r3
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010a86:	2b03      	cmp	r3, #3
 8010a88:	d903      	bls.n	8010a92 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	220d      	movs	r2, #13
 8010a8e:	701a      	strb	r2, [r3, #0]
      break;
 8010a90:	e0b8      	b.n	8010c04 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	795b      	ldrb	r3, [r3, #5]
 8010a96:	4619      	mov	r1, r3
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f001 f851 	bl	8011b40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	791b      	ldrb	r3, [r3, #4]
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f001 f84b 	bl	8011b40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2200      	movs	r2, #0
 8010aae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	701a      	strb	r2, [r3, #0]
      break;
 8010ab6:	e0a5      	b.n	8010c04 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8010abe:	4619      	mov	r1, r3
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f000 f969 	bl	8010d98 <USBH_Get_CfgDesc>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010aca:	7bbb      	ldrb	r3, [r7, #14]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d103      	bne.n	8010ad8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2205      	movs	r2, #5
 8010ad4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010ad6:	e097      	b.n	8010c08 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010ad8:	7bbb      	ldrb	r3, [r7, #14]
 8010ada:	2b03      	cmp	r3, #3
 8010adc:	f040 8094 	bne.w	8010c08 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	b2da      	uxtb	r2, r3
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010af6:	2b03      	cmp	r3, #3
 8010af8:	d903      	bls.n	8010b02 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	220d      	movs	r2, #13
 8010afe:	701a      	strb	r2, [r3, #0]
      break;
 8010b00:	e082      	b.n	8010c08 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	795b      	ldrb	r3, [r3, #5]
 8010b06:	4619      	mov	r1, r3
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f001 f819 	bl	8011b40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	791b      	ldrb	r3, [r3, #4]
 8010b12:	4619      	mov	r1, r3
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f001 f813 	bl	8011b40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	701a      	strb	r2, [r3, #0]
      break;
 8010b26:	e06f      	b.n	8010c08 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d019      	beq.n	8010b66 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010b3e:	23ff      	movs	r3, #255	@ 0xff
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 f953 	bl	8010dec <USBH_Get_StringDesc>
 8010b46:	4603      	mov	r3, r0
 8010b48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010b4a:	7bbb      	ldrb	r3, [r7, #14]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d103      	bne.n	8010b58 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2206      	movs	r2, #6
 8010b54:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010b56:	e059      	b.n	8010c0c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010b58:	7bbb      	ldrb	r3, [r7, #14]
 8010b5a:	2b03      	cmp	r3, #3
 8010b5c:	d156      	bne.n	8010c0c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2206      	movs	r2, #6
 8010b62:	705a      	strb	r2, [r3, #1]
      break;
 8010b64:	e052      	b.n	8010c0c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2206      	movs	r2, #6
 8010b6a:	705a      	strb	r2, [r3, #1]
      break;
 8010b6c:	e04e      	b.n	8010c0c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d019      	beq.n	8010bac <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010b84:	23ff      	movs	r3, #255	@ 0xff
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 f930 	bl	8010dec <USBH_Get_StringDesc>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010b90:	7bbb      	ldrb	r3, [r7, #14]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d103      	bne.n	8010b9e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2207      	movs	r2, #7
 8010b9a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010b9c:	e038      	b.n	8010c10 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010b9e:	7bbb      	ldrb	r3, [r7, #14]
 8010ba0:	2b03      	cmp	r3, #3
 8010ba2:	d135      	bne.n	8010c10 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2207      	movs	r2, #7
 8010ba8:	705a      	strb	r2, [r3, #1]
      break;
 8010baa:	e031      	b.n	8010c10 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2207      	movs	r2, #7
 8010bb0:	705a      	strb	r2, [r3, #1]
      break;
 8010bb2:	e02d      	b.n	8010c10 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d017      	beq.n	8010bee <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010bca:	23ff      	movs	r3, #255	@ 0xff
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 f90d 	bl	8010dec <USBH_Get_StringDesc>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010bd6:	7bbb      	ldrb	r3, [r7, #14]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d102      	bne.n	8010be2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010be0:	e018      	b.n	8010c14 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010be2:	7bbb      	ldrb	r3, [r7, #14]
 8010be4:	2b03      	cmp	r3, #3
 8010be6:	d115      	bne.n	8010c14 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8010be8:	2300      	movs	r3, #0
 8010bea:	73fb      	strb	r3, [r7, #15]
      break;
 8010bec:	e012      	b.n	8010c14 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8010bf2:	e00f      	b.n	8010c14 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8010bf4:	bf00      	nop
 8010bf6:	e00e      	b.n	8010c16 <USBH_HandleEnum+0x3b6>
      break;
 8010bf8:	bf00      	nop
 8010bfa:	e00c      	b.n	8010c16 <USBH_HandleEnum+0x3b6>
      break;
 8010bfc:	bf00      	nop
 8010bfe:	e00a      	b.n	8010c16 <USBH_HandleEnum+0x3b6>
      break;
 8010c00:	bf00      	nop
 8010c02:	e008      	b.n	8010c16 <USBH_HandleEnum+0x3b6>
      break;
 8010c04:	bf00      	nop
 8010c06:	e006      	b.n	8010c16 <USBH_HandleEnum+0x3b6>
      break;
 8010c08:	bf00      	nop
 8010c0a:	e004      	b.n	8010c16 <USBH_HandleEnum+0x3b6>
      break;
 8010c0c:	bf00      	nop
 8010c0e:	e002      	b.n	8010c16 <USBH_HandleEnum+0x3b6>
      break;
 8010c10:	bf00      	nop
 8010c12:	e000      	b.n	8010c16 <USBH_HandleEnum+0x3b6>
      break;
 8010c14:	bf00      	nop
  }
  return Status;
 8010c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3710      	adds	r7, #16
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	683a      	ldr	r2, [r7, #0]
 8010c2e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8010c32:	bf00      	nop
 8010c34:	370c      	adds	r7, #12
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr

08010c3e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010c3e:	b580      	push	{r7, lr}
 8010c40:	b082      	sub	sp, #8
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010c4c:	1c5a      	adds	r2, r3, #1
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f000 f804 	bl	8010c62 <USBH_HandleSof>
}
 8010c5a:	bf00      	nop
 8010c5c:	3708      	adds	r7, #8
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b082      	sub	sp, #8
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	2b0b      	cmp	r3, #11
 8010c72:	d10a      	bne.n	8010c8a <USBH_HandleSof+0x28>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d005      	beq.n	8010c8a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010c84:	699b      	ldr	r3, [r3, #24]
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	4798      	blx	r3
  }
}
 8010c8a:	bf00      	nop
 8010c8c:	3708      	adds	r7, #8
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}

08010c92 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8010c92:	b480      	push	{r7}
 8010c94:	b083      	sub	sp, #12
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2201      	movs	r2, #1
 8010c9e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8010ca2:	bf00      	nop
}
 8010ca4:	370c      	adds	r7, #12
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cac:	4770      	bx	lr

08010cae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010cae:	b480      	push	{r7}
 8010cb0:	b083      	sub	sp, #12
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8010cbe:	bf00      	nop
}
 8010cc0:	370c      	adds	r7, #12
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr

08010cca <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010cca:	b480      	push	{r7}
 8010ccc:	b083      	sub	sp, #12
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010cea:	2300      	movs	r3, #0
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	370c      	adds	r7, #12
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr

08010cf8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2201      	movs	r2, #1
 8010d04:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2200      	movs	r2, #0
 8010d14:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f004 f94a 	bl	8014fb2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	791b      	ldrb	r3, [r3, #4]
 8010d22:	4619      	mov	r1, r3
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 ff0b 	bl	8011b40 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	795b      	ldrb	r3, [r3, #5]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f000 ff05 	bl	8011b40 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010d36:	2300      	movs	r3, #0
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3708      	adds	r7, #8
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b086      	sub	sp, #24
 8010d44:	af02      	add	r7, sp, #8
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	460b      	mov	r3, r1
 8010d4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8010d4c:	887b      	ldrh	r3, [r7, #2]
 8010d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d52:	d901      	bls.n	8010d58 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010d54:	2303      	movs	r3, #3
 8010d56:	e01b      	b.n	8010d90 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010d5e:	887b      	ldrh	r3, [r7, #2]
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	4613      	mov	r3, r2
 8010d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010d68:	2100      	movs	r1, #0
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 f872 	bl	8010e54 <USBH_GetDescriptor>
 8010d70:	4603      	mov	r3, r0
 8010d72:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8010d74:	7bfb      	ldrb	r3, [r7, #15]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d109      	bne.n	8010d8e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010d80:	887a      	ldrh	r2, [r7, #2]
 8010d82:	4619      	mov	r1, r3
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 f929 	bl	8010fdc <USBH_ParseDevDesc>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3710      	adds	r7, #16
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}

08010d98 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b086      	sub	sp, #24
 8010d9c:	af02      	add	r7, sp, #8
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	460b      	mov	r3, r1
 8010da2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	331c      	adds	r3, #28
 8010da8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8010daa:	887b      	ldrh	r3, [r7, #2]
 8010dac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010db0:	d901      	bls.n	8010db6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010db2:	2303      	movs	r3, #3
 8010db4:	e016      	b.n	8010de4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8010db6:	887b      	ldrh	r3, [r7, #2]
 8010db8:	9300      	str	r3, [sp, #0]
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 f846 	bl	8010e54 <USBH_GetDescriptor>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8010dcc:	7bfb      	ldrb	r3, [r7, #15]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d107      	bne.n	8010de2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8010dd2:	887b      	ldrh	r3, [r7, #2]
 8010dd4:	461a      	mov	r2, r3
 8010dd6:	68b9      	ldr	r1, [r7, #8]
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 f9af 	bl	801113c <USBH_ParseCfgDesc>
 8010dde:	4603      	mov	r3, r0
 8010de0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b088      	sub	sp, #32
 8010df0:	af02      	add	r7, sp, #8
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	607a      	str	r2, [r7, #4]
 8010df6:	461a      	mov	r2, r3
 8010df8:	460b      	mov	r3, r1
 8010dfa:	72fb      	strb	r3, [r7, #11]
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8010e00:	893b      	ldrh	r3, [r7, #8]
 8010e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e06:	d802      	bhi.n	8010e0e <USBH_Get_StringDesc+0x22>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d101      	bne.n	8010e12 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010e0e:	2303      	movs	r3, #3
 8010e10:	e01c      	b.n	8010e4c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8010e12:	7afb      	ldrb	r3, [r7, #11]
 8010e14:	b29b      	uxth	r3, r3
 8010e16:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8010e1a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010e22:	893b      	ldrh	r3, [r7, #8]
 8010e24:	9300      	str	r3, [sp, #0]
 8010e26:	460b      	mov	r3, r1
 8010e28:	2100      	movs	r1, #0
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	f000 f812 	bl	8010e54 <USBH_GetDescriptor>
 8010e30:	4603      	mov	r3, r0
 8010e32:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8010e34:	7dfb      	ldrb	r3, [r7, #23]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d107      	bne.n	8010e4a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010e40:	893a      	ldrh	r2, [r7, #8]
 8010e42:	6879      	ldr	r1, [r7, #4]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f000 fb8d 	bl	8011564 <USBH_ParseStringDesc>
  }

  return status;
 8010e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3718      	adds	r7, #24
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	607b      	str	r3, [r7, #4]
 8010e5e:	460b      	mov	r3, r1
 8010e60:	72fb      	strb	r3, [r7, #11]
 8010e62:	4613      	mov	r3, r2
 8010e64:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	789b      	ldrb	r3, [r3, #2]
 8010e6a:	2b01      	cmp	r3, #1
 8010e6c:	d11c      	bne.n	8010ea8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8010e6e:	7afb      	ldrb	r3, [r7, #11]
 8010e70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010e74:	b2da      	uxtb	r2, r3
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	2206      	movs	r2, #6
 8010e7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	893a      	ldrh	r2, [r7, #8]
 8010e84:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010e86:	893b      	ldrh	r3, [r7, #8]
 8010e88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010e8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010e90:	d104      	bne.n	8010e9c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f240 4209 	movw	r2, #1033	@ 0x409
 8010e98:	829a      	strh	r2, [r3, #20]
 8010e9a:	e002      	b.n	8010ea2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	8b3a      	ldrh	r2, [r7, #24]
 8010ea6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010ea8:	8b3b      	ldrh	r3, [r7, #24]
 8010eaa:	461a      	mov	r2, r3
 8010eac:	6879      	ldr	r1, [r7, #4]
 8010eae:	68f8      	ldr	r0, [r7, #12]
 8010eb0:	f000 fba5 	bl	80115fe <USBH_CtlReq>
 8010eb4:	4603      	mov	r3, r0
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3710      	adds	r7, #16
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}

08010ebe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8010ebe:	b580      	push	{r7, lr}
 8010ec0:	b082      	sub	sp, #8
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
 8010ec6:	460b      	mov	r3, r1
 8010ec8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	789b      	ldrb	r3, [r3, #2]
 8010ece:	2b01      	cmp	r3, #1
 8010ed0:	d10f      	bne.n	8010ef2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2205      	movs	r2, #5
 8010edc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010ede:	78fb      	ldrb	r3, [r7, #3]
 8010ee0:	b29a      	uxth	r2, r3
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 fb81 	bl	80115fe <USBH_CtlReq>
 8010efc:	4603      	mov	r3, r0
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3708      	adds	r7, #8
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}

08010f06 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010f06:	b580      	push	{r7, lr}
 8010f08:	b082      	sub	sp, #8
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]
 8010f0e:	460b      	mov	r3, r1
 8010f10:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	789b      	ldrb	r3, [r3, #2]
 8010f16:	2b01      	cmp	r3, #1
 8010f18:	d10e      	bne.n	8010f38 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2209      	movs	r2, #9
 8010f24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	887a      	ldrh	r2, [r7, #2]
 8010f2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010f38:	2200      	movs	r2, #0
 8010f3a:	2100      	movs	r1, #0
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f000 fb5e 	bl	80115fe <USBH_CtlReq>
 8010f42:	4603      	mov	r3, r0
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3708      	adds	r7, #8
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	460b      	mov	r3, r1
 8010f56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	789b      	ldrb	r3, [r3, #2]
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d10f      	bne.n	8010f80 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2200      	movs	r2, #0
 8010f64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2203      	movs	r2, #3
 8010f6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010f6c:	78fb      	ldrb	r3, [r7, #3]
 8010f6e:	b29a      	uxth	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2200      	movs	r2, #0
 8010f78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010f80:	2200      	movs	r2, #0
 8010f82:	2100      	movs	r1, #0
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 fb3a 	bl	80115fe <USBH_CtlReq>
 8010f8a:	4603      	mov	r3, r0
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}

08010f94 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	789b      	ldrb	r3, [r3, #2]
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d10f      	bne.n	8010fc8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2202      	movs	r2, #2
 8010fac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2201      	movs	r2, #1
 8010fb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8010fba:	78fb      	ldrb	r3, [r7, #3]
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010fc8:	2200      	movs	r2, #0
 8010fca:	2100      	movs	r1, #0
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f000 fb16 	bl	80115fe <USBH_CtlReq>
 8010fd2:	4603      	mov	r3, r0
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3708      	adds	r7, #8
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b087      	sub	sp, #28
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	60f8      	str	r0, [r7, #12]
 8010fe4:	60b9      	str	r1, [r7, #8]
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010ff0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d101      	bne.n	8011000 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8010ffc:	2302      	movs	r3, #2
 8010ffe:	e094      	b.n	801112a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	781a      	ldrb	r2, [r3, #0]
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	785a      	ldrb	r2, [r3, #1]
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	3302      	adds	r3, #2
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	461a      	mov	r2, r3
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	3303      	adds	r3, #3
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	021b      	lsls	r3, r3, #8
 8011020:	b29b      	uxth	r3, r3
 8011022:	4313      	orrs	r3, r2
 8011024:	b29a      	uxth	r2, r3
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	791a      	ldrb	r2, [r3, #4]
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	795a      	ldrb	r2, [r3, #5]
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	799a      	ldrb	r2, [r3, #6]
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	79da      	ldrb	r2, [r3, #7]
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011050:	2b00      	cmp	r3, #0
 8011052:	d004      	beq.n	801105e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801105a:	2b01      	cmp	r3, #1
 801105c:	d11b      	bne.n	8011096 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	79db      	ldrb	r3, [r3, #7]
 8011062:	2b20      	cmp	r3, #32
 8011064:	dc0f      	bgt.n	8011086 <USBH_ParseDevDesc+0xaa>
 8011066:	2b08      	cmp	r3, #8
 8011068:	db0f      	blt.n	801108a <USBH_ParseDevDesc+0xae>
 801106a:	3b08      	subs	r3, #8
 801106c:	4a32      	ldr	r2, [pc, #200]	@ (8011138 <USBH_ParseDevDesc+0x15c>)
 801106e:	fa22 f303 	lsr.w	r3, r2, r3
 8011072:	f003 0301 	and.w	r3, r3, #1
 8011076:	2b00      	cmp	r3, #0
 8011078:	bf14      	ite	ne
 801107a:	2301      	movne	r3, #1
 801107c:	2300      	moveq	r3, #0
 801107e:	b2db      	uxtb	r3, r3
 8011080:	2b00      	cmp	r3, #0
 8011082:	d106      	bne.n	8011092 <USBH_ParseDevDesc+0xb6>
 8011084:	e001      	b.n	801108a <USBH_ParseDevDesc+0xae>
 8011086:	2b40      	cmp	r3, #64	@ 0x40
 8011088:	d003      	beq.n	8011092 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	2208      	movs	r2, #8
 801108e:	71da      	strb	r2, [r3, #7]
        break;
 8011090:	e000      	b.n	8011094 <USBH_ParseDevDesc+0xb8>
        break;
 8011092:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8011094:	e00e      	b.n	80110b4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801109c:	2b02      	cmp	r3, #2
 801109e:	d107      	bne.n	80110b0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	79db      	ldrb	r3, [r3, #7]
 80110a4:	2b08      	cmp	r3, #8
 80110a6:	d005      	beq.n	80110b4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	2208      	movs	r2, #8
 80110ac:	71da      	strb	r2, [r3, #7]
 80110ae:	e001      	b.n	80110b4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80110b0:	2303      	movs	r3, #3
 80110b2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80110b4:	88fb      	ldrh	r3, [r7, #6]
 80110b6:	2b08      	cmp	r3, #8
 80110b8:	d936      	bls.n	8011128 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	3308      	adds	r3, #8
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	461a      	mov	r2, r3
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	3309      	adds	r3, #9
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	021b      	lsls	r3, r3, #8
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	4313      	orrs	r3, r2
 80110ce:	b29a      	uxth	r2, r3
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	330a      	adds	r3, #10
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	461a      	mov	r2, r3
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	330b      	adds	r3, #11
 80110e0:	781b      	ldrb	r3, [r3, #0]
 80110e2:	021b      	lsls	r3, r3, #8
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	4313      	orrs	r3, r2
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	330c      	adds	r3, #12
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	461a      	mov	r2, r3
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	330d      	adds	r3, #13
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	021b      	lsls	r3, r3, #8
 80110fe:	b29b      	uxth	r3, r3
 8011100:	4313      	orrs	r3, r2
 8011102:	b29a      	uxth	r2, r3
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	7b9a      	ldrb	r2, [r3, #14]
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	7bda      	ldrb	r2, [r3, #15]
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	7c1a      	ldrb	r2, [r3, #16]
 801111c:	693b      	ldr	r3, [r7, #16]
 801111e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	7c5a      	ldrb	r2, [r3, #17]
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8011128:	7dfb      	ldrb	r3, [r7, #23]
}
 801112a:	4618      	mov	r0, r3
 801112c:	371c      	adds	r7, #28
 801112e:	46bd      	mov	sp, r7
 8011130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop
 8011138:	01000101 	.word	0x01000101

0801113c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b08c      	sub	sp, #48	@ 0x30
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	4613      	mov	r3, r2
 8011148:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8011150:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011152:	2300      	movs	r3, #0
 8011154:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011158:	2300      	movs	r3, #0
 801115a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 801115e:	2300      	movs	r3, #0
 8011160:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d101      	bne.n	801116e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 801116a:	2302      	movs	r3, #2
 801116c:	e0da      	b.n	8011324 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8011172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	2b09      	cmp	r3, #9
 8011178:	d002      	beq.n	8011180 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 801117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801117c:	2209      	movs	r2, #9
 801117e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	781a      	ldrb	r2, [r3, #0]
 8011184:	6a3b      	ldr	r3, [r7, #32]
 8011186:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	785a      	ldrb	r2, [r3, #1]
 801118c:	6a3b      	ldr	r3, [r7, #32]
 801118e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	3302      	adds	r3, #2
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	461a      	mov	r2, r3
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	3303      	adds	r3, #3
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	021b      	lsls	r3, r3, #8
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	4313      	orrs	r3, r2
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80111aa:	bf28      	it	cs
 80111ac:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	6a3b      	ldr	r3, [r7, #32]
 80111b4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	791a      	ldrb	r2, [r3, #4]
 80111ba:	6a3b      	ldr	r3, [r7, #32]
 80111bc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	795a      	ldrb	r2, [r3, #5]
 80111c2:	6a3b      	ldr	r3, [r7, #32]
 80111c4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	799a      	ldrb	r2, [r3, #6]
 80111ca:	6a3b      	ldr	r3, [r7, #32]
 80111cc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	79da      	ldrb	r2, [r3, #7]
 80111d2:	6a3b      	ldr	r3, [r7, #32]
 80111d4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	7a1a      	ldrb	r2, [r3, #8]
 80111da:	6a3b      	ldr	r3, [r7, #32]
 80111dc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80111de:	88fb      	ldrh	r3, [r7, #6]
 80111e0:	2b09      	cmp	r3, #9
 80111e2:	f240 809d 	bls.w	8011320 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80111e6:	2309      	movs	r3, #9
 80111e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80111ea:	2300      	movs	r3, #0
 80111ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80111ee:	e081      	b.n	80112f4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80111f0:	f107 0316 	add.w	r3, r7, #22
 80111f4:	4619      	mov	r1, r3
 80111f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80111f8:	f000 f9e7 	bl	80115ca <USBH_GetNextDesc>
 80111fc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80111fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011200:	785b      	ldrb	r3, [r3, #1]
 8011202:	2b04      	cmp	r3, #4
 8011204:	d176      	bne.n	80112f4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	2b09      	cmp	r3, #9
 801120c:	d002      	beq.n	8011214 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 801120e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011210:	2209      	movs	r2, #9
 8011212:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011218:	221a      	movs	r2, #26
 801121a:	fb02 f303 	mul.w	r3, r2, r3
 801121e:	3308      	adds	r3, #8
 8011220:	6a3a      	ldr	r2, [r7, #32]
 8011222:	4413      	add	r3, r2
 8011224:	3302      	adds	r3, #2
 8011226:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801122a:	69f8      	ldr	r0, [r7, #28]
 801122c:	f000 f87e 	bl	801132c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011230:	2300      	movs	r3, #0
 8011232:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011236:	2300      	movs	r3, #0
 8011238:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801123a:	e043      	b.n	80112c4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801123c:	f107 0316 	add.w	r3, r7, #22
 8011240:	4619      	mov	r1, r3
 8011242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011244:	f000 f9c1 	bl	80115ca <USBH_GetNextDesc>
 8011248:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801124a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801124c:	785b      	ldrb	r3, [r3, #1]
 801124e:	2b05      	cmp	r3, #5
 8011250:	d138      	bne.n	80112c4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8011252:	69fb      	ldr	r3, [r7, #28]
 8011254:	795b      	ldrb	r3, [r3, #5]
 8011256:	2b01      	cmp	r3, #1
 8011258:	d113      	bne.n	8011282 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 801125e:	2b02      	cmp	r3, #2
 8011260:	d003      	beq.n	801126a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011262:	69fb      	ldr	r3, [r7, #28]
 8011264:	799b      	ldrb	r3, [r3, #6]
 8011266:	2b03      	cmp	r3, #3
 8011268:	d10b      	bne.n	8011282 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	79db      	ldrb	r3, [r3, #7]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d10b      	bne.n	801128a <USBH_ParseCfgDesc+0x14e>
 8011272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	2b09      	cmp	r3, #9
 8011278:	d007      	beq.n	801128a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 801127a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801127c:	2209      	movs	r2, #9
 801127e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011280:	e003      	b.n	801128a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8011282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011284:	2207      	movs	r2, #7
 8011286:	701a      	strb	r2, [r3, #0]
 8011288:	e000      	b.n	801128c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801128a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801128c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011290:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011294:	3201      	adds	r2, #1
 8011296:	00d2      	lsls	r2, r2, #3
 8011298:	211a      	movs	r1, #26
 801129a:	fb01 f303 	mul.w	r3, r1, r3
 801129e:	4413      	add	r3, r2
 80112a0:	3308      	adds	r3, #8
 80112a2:	6a3a      	ldr	r2, [r7, #32]
 80112a4:	4413      	add	r3, r2
 80112a6:	3304      	adds	r3, #4
 80112a8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80112aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112ac:	69b9      	ldr	r1, [r7, #24]
 80112ae:	68f8      	ldr	r0, [r7, #12]
 80112b0:	f000 f870 	bl	8011394 <USBH_ParseEPDesc>
 80112b4:	4603      	mov	r3, r0
 80112b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80112ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80112be:	3301      	adds	r3, #1
 80112c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80112c4:	69fb      	ldr	r3, [r7, #28]
 80112c6:	791b      	ldrb	r3, [r3, #4]
 80112c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d204      	bcs.n	80112da <USBH_ParseCfgDesc+0x19e>
 80112d0:	6a3b      	ldr	r3, [r7, #32]
 80112d2:	885a      	ldrh	r2, [r3, #2]
 80112d4:	8afb      	ldrh	r3, [r7, #22]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d8b0      	bhi.n	801123c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80112da:	69fb      	ldr	r3, [r7, #28]
 80112dc:	791b      	ldrb	r3, [r3, #4]
 80112de:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d201      	bcs.n	80112ea <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80112e6:	2303      	movs	r3, #3
 80112e8:	e01c      	b.n	8011324 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80112ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112ee:	3301      	adds	r3, #1
 80112f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80112f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d805      	bhi.n	8011308 <USBH_ParseCfgDesc+0x1cc>
 80112fc:	6a3b      	ldr	r3, [r7, #32]
 80112fe:	885a      	ldrh	r2, [r3, #2]
 8011300:	8afb      	ldrh	r3, [r7, #22]
 8011302:	429a      	cmp	r2, r3
 8011304:	f63f af74 	bhi.w	80111f0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8011308:	6a3b      	ldr	r3, [r7, #32]
 801130a:	791b      	ldrb	r3, [r3, #4]
 801130c:	2b02      	cmp	r3, #2
 801130e:	bf28      	it	cs
 8011310:	2302      	movcs	r3, #2
 8011312:	b2db      	uxtb	r3, r3
 8011314:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011318:	429a      	cmp	r2, r3
 801131a:	d201      	bcs.n	8011320 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 801131c:	2303      	movs	r3, #3
 801131e:	e001      	b.n	8011324 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8011320:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011324:	4618      	mov	r0, r3
 8011326:	3730      	adds	r7, #48	@ 0x30
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 801132c:	b480      	push	{r7}
 801132e:	b083      	sub	sp, #12
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	781a      	ldrb	r2, [r3, #0]
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	785a      	ldrb	r2, [r3, #1]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	789a      	ldrb	r2, [r3, #2]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	78da      	ldrb	r2, [r3, #3]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	3304      	adds	r3, #4
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	2b02      	cmp	r3, #2
 801135e:	bf28      	it	cs
 8011360:	2302      	movcs	r3, #2
 8011362:	b2da      	uxtb	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	795a      	ldrb	r2, [r3, #5]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	799a      	ldrb	r2, [r3, #6]
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	79da      	ldrb	r2, [r3, #7]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	7a1a      	ldrb	r2, [r3, #8]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	721a      	strb	r2, [r3, #8]
}
 8011388:	bf00      	nop
 801138a:	370c      	adds	r7, #12
 801138c:	46bd      	mov	sp, r7
 801138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011392:	4770      	bx	lr

08011394 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8011394:	b480      	push	{r7}
 8011396:	b087      	sub	sp, #28
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80113a0:	2300      	movs	r3, #0
 80113a2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	781a      	ldrb	r2, [r3, #0]
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	785a      	ldrb	r2, [r3, #1]
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	789a      	ldrb	r2, [r3, #2]
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	78da      	ldrb	r2, [r3, #3]
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	3304      	adds	r3, #4
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	461a      	mov	r2, r3
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	3305      	adds	r3, #5
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	021b      	lsls	r3, r3, #8
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	4313      	orrs	r3, r2
 80113d8:	b29a      	uxth	r2, r3
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	799a      	ldrb	r2, [r3, #6]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	889b      	ldrh	r3, [r3, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d009      	beq.n	8011402 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80113f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80113f6:	d804      	bhi.n	8011402 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80113fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011400:	d901      	bls.n	8011406 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8011402:	2303      	movs	r3, #3
 8011404:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801140c:	2b00      	cmp	r3, #0
 801140e:	d136      	bne.n	801147e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	78db      	ldrb	r3, [r3, #3]
 8011414:	f003 0303 	and.w	r3, r3, #3
 8011418:	2b02      	cmp	r3, #2
 801141a:	d108      	bne.n	801142e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	889b      	ldrh	r3, [r3, #4]
 8011420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011424:	f240 8097 	bls.w	8011556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011428:	2303      	movs	r3, #3
 801142a:	75fb      	strb	r3, [r7, #23]
 801142c:	e093      	b.n	8011556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	78db      	ldrb	r3, [r3, #3]
 8011432:	f003 0303 	and.w	r3, r3, #3
 8011436:	2b00      	cmp	r3, #0
 8011438:	d107      	bne.n	801144a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	889b      	ldrh	r3, [r3, #4]
 801143e:	2b40      	cmp	r3, #64	@ 0x40
 8011440:	f240 8089 	bls.w	8011556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011444:	2303      	movs	r3, #3
 8011446:	75fb      	strb	r3, [r7, #23]
 8011448:	e085      	b.n	8011556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	78db      	ldrb	r3, [r3, #3]
 801144e:	f003 0303 	and.w	r3, r3, #3
 8011452:	2b01      	cmp	r3, #1
 8011454:	d005      	beq.n	8011462 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	78db      	ldrb	r3, [r3, #3]
 801145a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801145e:	2b03      	cmp	r3, #3
 8011460:	d10a      	bne.n	8011478 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	799b      	ldrb	r3, [r3, #6]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d003      	beq.n	8011472 <USBH_ParseEPDesc+0xde>
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	799b      	ldrb	r3, [r3, #6]
 801146e:	2b10      	cmp	r3, #16
 8011470:	d970      	bls.n	8011554 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8011472:	2303      	movs	r3, #3
 8011474:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011476:	e06d      	b.n	8011554 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011478:	2303      	movs	r3, #3
 801147a:	75fb      	strb	r3, [r7, #23]
 801147c:	e06b      	b.n	8011556 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011484:	2b01      	cmp	r3, #1
 8011486:	d13c      	bne.n	8011502 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	78db      	ldrb	r3, [r3, #3]
 801148c:	f003 0303 	and.w	r3, r3, #3
 8011490:	2b02      	cmp	r3, #2
 8011492:	d005      	beq.n	80114a0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	78db      	ldrb	r3, [r3, #3]
 8011498:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 801149c:	2b00      	cmp	r3, #0
 801149e:	d106      	bne.n	80114ae <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	889b      	ldrh	r3, [r3, #4]
 80114a4:	2b40      	cmp	r3, #64	@ 0x40
 80114a6:	d956      	bls.n	8011556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80114a8:	2303      	movs	r3, #3
 80114aa:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80114ac:	e053      	b.n	8011556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	78db      	ldrb	r3, [r3, #3]
 80114b2:	f003 0303 	and.w	r3, r3, #3
 80114b6:	2b01      	cmp	r3, #1
 80114b8:	d10e      	bne.n	80114d8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	799b      	ldrb	r3, [r3, #6]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d007      	beq.n	80114d2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80114c6:	2b10      	cmp	r3, #16
 80114c8:	d803      	bhi.n	80114d2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80114ce:	2b40      	cmp	r3, #64	@ 0x40
 80114d0:	d941      	bls.n	8011556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80114d2:	2303      	movs	r3, #3
 80114d4:	75fb      	strb	r3, [r7, #23]
 80114d6:	e03e      	b.n	8011556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	78db      	ldrb	r3, [r3, #3]
 80114dc:	f003 0303 	and.w	r3, r3, #3
 80114e0:	2b03      	cmp	r3, #3
 80114e2:	d10b      	bne.n	80114fc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	799b      	ldrb	r3, [r3, #6]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d004      	beq.n	80114f6 <USBH_ParseEPDesc+0x162>
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	889b      	ldrh	r3, [r3, #4]
 80114f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80114f4:	d32f      	bcc.n	8011556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80114f6:	2303      	movs	r3, #3
 80114f8:	75fb      	strb	r3, [r7, #23]
 80114fa:	e02c      	b.n	8011556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80114fc:	2303      	movs	r3, #3
 80114fe:	75fb      	strb	r3, [r7, #23]
 8011500:	e029      	b.n	8011556 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011508:	2b02      	cmp	r3, #2
 801150a:	d120      	bne.n	801154e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	78db      	ldrb	r3, [r3, #3]
 8011510:	f003 0303 	and.w	r3, r3, #3
 8011514:	2b00      	cmp	r3, #0
 8011516:	d106      	bne.n	8011526 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	889b      	ldrh	r3, [r3, #4]
 801151c:	2b08      	cmp	r3, #8
 801151e:	d01a      	beq.n	8011556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011520:	2303      	movs	r3, #3
 8011522:	75fb      	strb	r3, [r7, #23]
 8011524:	e017      	b.n	8011556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	78db      	ldrb	r3, [r3, #3]
 801152a:	f003 0303 	and.w	r3, r3, #3
 801152e:	2b03      	cmp	r3, #3
 8011530:	d10a      	bne.n	8011548 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	799b      	ldrb	r3, [r3, #6]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d003      	beq.n	8011542 <USBH_ParseEPDesc+0x1ae>
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	889b      	ldrh	r3, [r3, #4]
 801153e:	2b08      	cmp	r3, #8
 8011540:	d909      	bls.n	8011556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011542:	2303      	movs	r3, #3
 8011544:	75fb      	strb	r3, [r7, #23]
 8011546:	e006      	b.n	8011556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011548:	2303      	movs	r3, #3
 801154a:	75fb      	strb	r3, [r7, #23]
 801154c:	e003      	b.n	8011556 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 801154e:	2303      	movs	r3, #3
 8011550:	75fb      	strb	r3, [r7, #23]
 8011552:	e000      	b.n	8011556 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011554:	bf00      	nop
  }

  return status;
 8011556:	7dfb      	ldrb	r3, [r7, #23]
}
 8011558:	4618      	mov	r0, r3
 801155a:	371c      	adds	r7, #28
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8011564:	b480      	push	{r7}
 8011566:	b087      	sub	sp, #28
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	4613      	mov	r3, r2
 8011570:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	3301      	adds	r3, #1
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	2b03      	cmp	r3, #3
 801157a:	d120      	bne.n	80115be <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	1e9a      	subs	r2, r3, #2
 8011582:	88fb      	ldrh	r3, [r7, #6]
 8011584:	4293      	cmp	r3, r2
 8011586:	bf28      	it	cs
 8011588:	4613      	movcs	r3, r2
 801158a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	3302      	adds	r3, #2
 8011590:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8011592:	2300      	movs	r3, #0
 8011594:	82fb      	strh	r3, [r7, #22]
 8011596:	e00b      	b.n	80115b0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8011598:	8afb      	ldrh	r3, [r7, #22]
 801159a:	68fa      	ldr	r2, [r7, #12]
 801159c:	4413      	add	r3, r2
 801159e:	781a      	ldrb	r2, [r3, #0]
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	3301      	adds	r3, #1
 80115a8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80115aa:	8afb      	ldrh	r3, [r7, #22]
 80115ac:	3302      	adds	r3, #2
 80115ae:	82fb      	strh	r3, [r7, #22]
 80115b0:	8afa      	ldrh	r2, [r7, #22]
 80115b2:	8abb      	ldrh	r3, [r7, #20]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d3ef      	bcc.n	8011598 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	2200      	movs	r2, #0
 80115bc:	701a      	strb	r2, [r3, #0]
  }
}
 80115be:	bf00      	nop
 80115c0:	371c      	adds	r7, #28
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr

080115ca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80115ca:	b480      	push	{r7}
 80115cc:	b085      	sub	sp, #20
 80115ce:	af00      	add	r7, sp, #0
 80115d0:	6078      	str	r0, [r7, #4]
 80115d2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	881b      	ldrh	r3, [r3, #0]
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	7812      	ldrb	r2, [r2, #0]
 80115dc:	4413      	add	r3, r2
 80115de:	b29a      	uxth	r2, r3
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	4413      	add	r3, r2
 80115ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80115f0:	68fb      	ldr	r3, [r7, #12]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3714      	adds	r7, #20
 80115f6:	46bd      	mov	sp, r7
 80115f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fc:	4770      	bx	lr

080115fe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80115fe:	b580      	push	{r7, lr}
 8011600:	b086      	sub	sp, #24
 8011602:	af00      	add	r7, sp, #0
 8011604:	60f8      	str	r0, [r7, #12]
 8011606:	60b9      	str	r1, [r7, #8]
 8011608:	4613      	mov	r3, r2
 801160a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801160c:	2301      	movs	r3, #1
 801160e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	789b      	ldrb	r3, [r3, #2]
 8011614:	2b01      	cmp	r3, #1
 8011616:	d002      	beq.n	801161e <USBH_CtlReq+0x20>
 8011618:	2b02      	cmp	r3, #2
 801161a:	d00f      	beq.n	801163c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801161c:	e027      	b.n	801166e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	68ba      	ldr	r2, [r7, #8]
 8011622:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	88fa      	ldrh	r2, [r7, #6]
 8011628:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	2201      	movs	r2, #1
 801162e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2202      	movs	r2, #2
 8011634:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8011636:	2301      	movs	r3, #1
 8011638:	75fb      	strb	r3, [r7, #23]
      break;
 801163a:	e018      	b.n	801166e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 801163c:	68f8      	ldr	r0, [r7, #12]
 801163e:	f000 f81b 	bl	8011678 <USBH_HandleControl>
 8011642:	4603      	mov	r3, r0
 8011644:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8011646:	7dfb      	ldrb	r3, [r7, #23]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d002      	beq.n	8011652 <USBH_CtlReq+0x54>
 801164c:	7dfb      	ldrb	r3, [r7, #23]
 801164e:	2b03      	cmp	r3, #3
 8011650:	d106      	bne.n	8011660 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2201      	movs	r2, #1
 8011656:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2200      	movs	r2, #0
 801165c:	761a      	strb	r2, [r3, #24]
      break;
 801165e:	e005      	b.n	801166c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8011660:	7dfb      	ldrb	r3, [r7, #23]
 8011662:	2b02      	cmp	r3, #2
 8011664:	d102      	bne.n	801166c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2201      	movs	r2, #1
 801166a:	709a      	strb	r2, [r3, #2]
      break;
 801166c:	bf00      	nop
  }
  return status;
 801166e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011670:	4618      	mov	r0, r3
 8011672:	3718      	adds	r7, #24
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b086      	sub	sp, #24
 801167c:	af02      	add	r7, sp, #8
 801167e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8011680:	2301      	movs	r3, #1
 8011682:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011684:	2300      	movs	r3, #0
 8011686:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	7e1b      	ldrb	r3, [r3, #24]
 801168c:	3b01      	subs	r3, #1
 801168e:	2b0a      	cmp	r3, #10
 8011690:	f200 8156 	bhi.w	8011940 <USBH_HandleControl+0x2c8>
 8011694:	a201      	add	r2, pc, #4	@ (adr r2, 801169c <USBH_HandleControl+0x24>)
 8011696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801169a:	bf00      	nop
 801169c:	080116c9 	.word	0x080116c9
 80116a0:	080116e3 	.word	0x080116e3
 80116a4:	0801174d 	.word	0x0801174d
 80116a8:	08011773 	.word	0x08011773
 80116ac:	080117ab 	.word	0x080117ab
 80116b0:	080117d5 	.word	0x080117d5
 80116b4:	08011827 	.word	0x08011827
 80116b8:	08011849 	.word	0x08011849
 80116bc:	08011885 	.word	0x08011885
 80116c0:	080118ab 	.word	0x080118ab
 80116c4:	080118e9 	.word	0x080118e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f103 0110 	add.w	r1, r3, #16
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	795b      	ldrb	r3, [r3, #5]
 80116d2:	461a      	mov	r2, r3
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 f943 	bl	8011960 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2202      	movs	r2, #2
 80116de:	761a      	strb	r2, [r3, #24]
      break;
 80116e0:	e139      	b.n	8011956 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	795b      	ldrb	r3, [r3, #5]
 80116e6:	4619      	mov	r1, r3
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f003 fd51 	bl	8015190 <USBH_LL_GetURBState>
 80116ee:	4603      	mov	r3, r0
 80116f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80116f2:	7bbb      	ldrb	r3, [r7, #14]
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	d11e      	bne.n	8011736 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	7c1b      	ldrb	r3, [r3, #16]
 80116fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011700:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	8adb      	ldrh	r3, [r3, #22]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d00a      	beq.n	8011720 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801170a:	7b7b      	ldrb	r3, [r7, #13]
 801170c:	2b80      	cmp	r3, #128	@ 0x80
 801170e:	d103      	bne.n	8011718 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2203      	movs	r2, #3
 8011714:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011716:	e115      	b.n	8011944 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2205      	movs	r2, #5
 801171c:	761a      	strb	r2, [r3, #24]
      break;
 801171e:	e111      	b.n	8011944 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8011720:	7b7b      	ldrb	r3, [r7, #13]
 8011722:	2b80      	cmp	r3, #128	@ 0x80
 8011724:	d103      	bne.n	801172e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2209      	movs	r2, #9
 801172a:	761a      	strb	r2, [r3, #24]
      break;
 801172c:	e10a      	b.n	8011944 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2207      	movs	r2, #7
 8011732:	761a      	strb	r2, [r3, #24]
      break;
 8011734:	e106      	b.n	8011944 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8011736:	7bbb      	ldrb	r3, [r7, #14]
 8011738:	2b04      	cmp	r3, #4
 801173a:	d003      	beq.n	8011744 <USBH_HandleControl+0xcc>
 801173c:	7bbb      	ldrb	r3, [r7, #14]
 801173e:	2b02      	cmp	r3, #2
 8011740:	f040 8100 	bne.w	8011944 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	220b      	movs	r2, #11
 8011748:	761a      	strb	r2, [r3, #24]
      break;
 801174a:	e0fb      	b.n	8011944 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011752:	b29a      	uxth	r2, r3
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6899      	ldr	r1, [r3, #8]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	899a      	ldrh	r2, [r3, #12]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	791b      	ldrb	r3, [r3, #4]
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f000 f93a 	bl	80119de <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2204      	movs	r2, #4
 801176e:	761a      	strb	r2, [r3, #24]
      break;
 8011770:	e0f1      	b.n	8011956 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	791b      	ldrb	r3, [r3, #4]
 8011776:	4619      	mov	r1, r3
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f003 fd09 	bl	8015190 <USBH_LL_GetURBState>
 801177e:	4603      	mov	r3, r0
 8011780:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8011782:	7bbb      	ldrb	r3, [r7, #14]
 8011784:	2b01      	cmp	r3, #1
 8011786:	d102      	bne.n	801178e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2209      	movs	r2, #9
 801178c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801178e:	7bbb      	ldrb	r3, [r7, #14]
 8011790:	2b05      	cmp	r3, #5
 8011792:	d102      	bne.n	801179a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8011794:	2303      	movs	r3, #3
 8011796:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011798:	e0d6      	b.n	8011948 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 801179a:	7bbb      	ldrb	r3, [r7, #14]
 801179c:	2b04      	cmp	r3, #4
 801179e:	f040 80d3 	bne.w	8011948 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	220b      	movs	r2, #11
 80117a6:	761a      	strb	r2, [r3, #24]
      break;
 80117a8:	e0ce      	b.n	8011948 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6899      	ldr	r1, [r3, #8]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	899a      	ldrh	r2, [r3, #12]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	795b      	ldrb	r3, [r3, #5]
 80117b6:	2001      	movs	r0, #1
 80117b8:	9000      	str	r0, [sp, #0]
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f000 f8ea 	bl	8011994 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80117c6:	b29a      	uxth	r2, r3
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2206      	movs	r2, #6
 80117d0:	761a      	strb	r2, [r3, #24]
      break;
 80117d2:	e0c0      	b.n	8011956 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	795b      	ldrb	r3, [r3, #5]
 80117d8:	4619      	mov	r1, r3
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f003 fcd8 	bl	8015190 <USBH_LL_GetURBState>
 80117e0:	4603      	mov	r3, r0
 80117e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80117e4:	7bbb      	ldrb	r3, [r7, #14]
 80117e6:	2b01      	cmp	r3, #1
 80117e8:	d103      	bne.n	80117f2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2207      	movs	r2, #7
 80117ee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80117f0:	e0ac      	b.n	801194c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80117f2:	7bbb      	ldrb	r3, [r7, #14]
 80117f4:	2b05      	cmp	r3, #5
 80117f6:	d105      	bne.n	8011804 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	220c      	movs	r2, #12
 80117fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80117fe:	2303      	movs	r3, #3
 8011800:	73fb      	strb	r3, [r7, #15]
      break;
 8011802:	e0a3      	b.n	801194c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011804:	7bbb      	ldrb	r3, [r7, #14]
 8011806:	2b02      	cmp	r3, #2
 8011808:	d103      	bne.n	8011812 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2205      	movs	r2, #5
 801180e:	761a      	strb	r2, [r3, #24]
      break;
 8011810:	e09c      	b.n	801194c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8011812:	7bbb      	ldrb	r3, [r7, #14]
 8011814:	2b04      	cmp	r3, #4
 8011816:	f040 8099 	bne.w	801194c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	220b      	movs	r2, #11
 801181e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8011820:	2302      	movs	r3, #2
 8011822:	73fb      	strb	r3, [r7, #15]
      break;
 8011824:	e092      	b.n	801194c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	791b      	ldrb	r3, [r3, #4]
 801182a:	2200      	movs	r2, #0
 801182c:	2100      	movs	r1, #0
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f000 f8d5 	bl	80119de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801183a:	b29a      	uxth	r2, r3
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2208      	movs	r2, #8
 8011844:	761a      	strb	r2, [r3, #24]

      break;
 8011846:	e086      	b.n	8011956 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	791b      	ldrb	r3, [r3, #4]
 801184c:	4619      	mov	r1, r3
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f003 fc9e 	bl	8015190 <USBH_LL_GetURBState>
 8011854:	4603      	mov	r3, r0
 8011856:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011858:	7bbb      	ldrb	r3, [r7, #14]
 801185a:	2b01      	cmp	r3, #1
 801185c:	d105      	bne.n	801186a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	220d      	movs	r2, #13
 8011862:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8011864:	2300      	movs	r3, #0
 8011866:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011868:	e072      	b.n	8011950 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 801186a:	7bbb      	ldrb	r3, [r7, #14]
 801186c:	2b04      	cmp	r3, #4
 801186e:	d103      	bne.n	8011878 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	220b      	movs	r2, #11
 8011874:	761a      	strb	r2, [r3, #24]
      break;
 8011876:	e06b      	b.n	8011950 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8011878:	7bbb      	ldrb	r3, [r7, #14]
 801187a:	2b05      	cmp	r3, #5
 801187c:	d168      	bne.n	8011950 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 801187e:	2303      	movs	r3, #3
 8011880:	73fb      	strb	r3, [r7, #15]
      break;
 8011882:	e065      	b.n	8011950 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	795b      	ldrb	r3, [r3, #5]
 8011888:	2201      	movs	r2, #1
 801188a:	9200      	str	r2, [sp, #0]
 801188c:	2200      	movs	r2, #0
 801188e:	2100      	movs	r1, #0
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f000 f87f 	bl	8011994 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801189c:	b29a      	uxth	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	220a      	movs	r2, #10
 80118a6:	761a      	strb	r2, [r3, #24]
      break;
 80118a8:	e055      	b.n	8011956 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	795b      	ldrb	r3, [r3, #5]
 80118ae:	4619      	mov	r1, r3
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f003 fc6d 	bl	8015190 <USBH_LL_GetURBState>
 80118b6:	4603      	mov	r3, r0
 80118b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80118ba:	7bbb      	ldrb	r3, [r7, #14]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d105      	bne.n	80118cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80118c0:	2300      	movs	r3, #0
 80118c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	220d      	movs	r2, #13
 80118c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80118ca:	e043      	b.n	8011954 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80118cc:	7bbb      	ldrb	r3, [r7, #14]
 80118ce:	2b02      	cmp	r3, #2
 80118d0:	d103      	bne.n	80118da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2209      	movs	r2, #9
 80118d6:	761a      	strb	r2, [r3, #24]
      break;
 80118d8:	e03c      	b.n	8011954 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80118da:	7bbb      	ldrb	r3, [r7, #14]
 80118dc:	2b04      	cmp	r3, #4
 80118de:	d139      	bne.n	8011954 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	220b      	movs	r2, #11
 80118e4:	761a      	strb	r2, [r3, #24]
      break;
 80118e6:	e035      	b.n	8011954 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	7e5b      	ldrb	r3, [r3, #25]
 80118ec:	3301      	adds	r3, #1
 80118ee:	b2da      	uxtb	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	765a      	strb	r2, [r3, #25]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	7e5b      	ldrb	r3, [r3, #25]
 80118f8:	2b02      	cmp	r3, #2
 80118fa:	d806      	bhi.n	801190a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2201      	movs	r2, #1
 8011900:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2201      	movs	r2, #1
 8011906:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8011908:	e025      	b.n	8011956 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011910:	2106      	movs	r1, #6
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2200      	movs	r2, #0
 801191a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	795b      	ldrb	r3, [r3, #5]
 8011920:	4619      	mov	r1, r3
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f000 f90c 	bl	8011b40 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	791b      	ldrb	r3, [r3, #4]
 801192c:	4619      	mov	r1, r3
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f000 f906 	bl	8011b40 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2200      	movs	r2, #0
 8011938:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801193a:	2302      	movs	r3, #2
 801193c:	73fb      	strb	r3, [r7, #15]
      break;
 801193e:	e00a      	b.n	8011956 <USBH_HandleControl+0x2de>

    default:
      break;
 8011940:	bf00      	nop
 8011942:	e008      	b.n	8011956 <USBH_HandleControl+0x2de>
      break;
 8011944:	bf00      	nop
 8011946:	e006      	b.n	8011956 <USBH_HandleControl+0x2de>
      break;
 8011948:	bf00      	nop
 801194a:	e004      	b.n	8011956 <USBH_HandleControl+0x2de>
      break;
 801194c:	bf00      	nop
 801194e:	e002      	b.n	8011956 <USBH_HandleControl+0x2de>
      break;
 8011950:	bf00      	nop
 8011952:	e000      	b.n	8011956 <USBH_HandleControl+0x2de>
      break;
 8011954:	bf00      	nop
  }

  return status;
 8011956:	7bfb      	ldrb	r3, [r7, #15]
}
 8011958:	4618      	mov	r0, r3
 801195a:	3710      	adds	r7, #16
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}

08011960 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b088      	sub	sp, #32
 8011964:	af04      	add	r7, sp, #16
 8011966:	60f8      	str	r0, [r7, #12]
 8011968:	60b9      	str	r1, [r7, #8]
 801196a:	4613      	mov	r3, r2
 801196c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801196e:	79f9      	ldrb	r1, [r7, #7]
 8011970:	2300      	movs	r3, #0
 8011972:	9303      	str	r3, [sp, #12]
 8011974:	2308      	movs	r3, #8
 8011976:	9302      	str	r3, [sp, #8]
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	9301      	str	r3, [sp, #4]
 801197c:	2300      	movs	r3, #0
 801197e:	9300      	str	r3, [sp, #0]
 8011980:	2300      	movs	r3, #0
 8011982:	2200      	movs	r2, #0
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f003 fbd2 	bl	801512e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801198a:	2300      	movs	r3, #0
}
 801198c:	4618      	mov	r0, r3
 801198e:	3710      	adds	r7, #16
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b088      	sub	sp, #32
 8011998:	af04      	add	r7, sp, #16
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	60b9      	str	r1, [r7, #8]
 801199e:	4611      	mov	r1, r2
 80119a0:	461a      	mov	r2, r3
 80119a2:	460b      	mov	r3, r1
 80119a4:	80fb      	strh	r3, [r7, #6]
 80119a6:	4613      	mov	r3, r2
 80119a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d001      	beq.n	80119b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80119b4:	2300      	movs	r3, #0
 80119b6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80119b8:	7979      	ldrb	r1, [r7, #5]
 80119ba:	7e3b      	ldrb	r3, [r7, #24]
 80119bc:	9303      	str	r3, [sp, #12]
 80119be:	88fb      	ldrh	r3, [r7, #6]
 80119c0:	9302      	str	r3, [sp, #8]
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	9301      	str	r3, [sp, #4]
 80119c6:	2301      	movs	r3, #1
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	2300      	movs	r3, #0
 80119cc:	2200      	movs	r2, #0
 80119ce:	68f8      	ldr	r0, [r7, #12]
 80119d0:	f003 fbad 	bl	801512e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80119d4:	2300      	movs	r3, #0
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3710      	adds	r7, #16
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}

080119de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80119de:	b580      	push	{r7, lr}
 80119e0:	b088      	sub	sp, #32
 80119e2:	af04      	add	r7, sp, #16
 80119e4:	60f8      	str	r0, [r7, #12]
 80119e6:	60b9      	str	r1, [r7, #8]
 80119e8:	4611      	mov	r1, r2
 80119ea:	461a      	mov	r2, r3
 80119ec:	460b      	mov	r3, r1
 80119ee:	80fb      	strh	r3, [r7, #6]
 80119f0:	4613      	mov	r3, r2
 80119f2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80119f4:	7979      	ldrb	r1, [r7, #5]
 80119f6:	2300      	movs	r3, #0
 80119f8:	9303      	str	r3, [sp, #12]
 80119fa:	88fb      	ldrh	r3, [r7, #6]
 80119fc:	9302      	str	r3, [sp, #8]
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	9301      	str	r3, [sp, #4]
 8011a02:	2301      	movs	r3, #1
 8011a04:	9300      	str	r3, [sp, #0]
 8011a06:	2300      	movs	r3, #0
 8011a08:	2201      	movs	r2, #1
 8011a0a:	68f8      	ldr	r0, [r7, #12]
 8011a0c:	f003 fb8f 	bl	801512e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011a10:	2300      	movs	r3, #0

}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3710      	adds	r7, #16
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	b088      	sub	sp, #32
 8011a1e:	af04      	add	r7, sp, #16
 8011a20:	60f8      	str	r0, [r7, #12]
 8011a22:	60b9      	str	r1, [r7, #8]
 8011a24:	4611      	mov	r1, r2
 8011a26:	461a      	mov	r2, r3
 8011a28:	460b      	mov	r3, r1
 8011a2a:	80fb      	strh	r3, [r7, #6]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d001      	beq.n	8011a3e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011a3e:	7979      	ldrb	r1, [r7, #5]
 8011a40:	7e3b      	ldrb	r3, [r7, #24]
 8011a42:	9303      	str	r3, [sp, #12]
 8011a44:	88fb      	ldrh	r3, [r7, #6]
 8011a46:	9302      	str	r3, [sp, #8]
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	9301      	str	r3, [sp, #4]
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	9300      	str	r3, [sp, #0]
 8011a50:	2302      	movs	r3, #2
 8011a52:	2200      	movs	r2, #0
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f003 fb6a 	bl	801512e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3710      	adds	r7, #16
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b088      	sub	sp, #32
 8011a68:	af04      	add	r7, sp, #16
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	4611      	mov	r1, r2
 8011a70:	461a      	mov	r2, r3
 8011a72:	460b      	mov	r3, r1
 8011a74:	80fb      	strh	r3, [r7, #6]
 8011a76:	4613      	mov	r3, r2
 8011a78:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011a7a:	7979      	ldrb	r1, [r7, #5]
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	9303      	str	r3, [sp, #12]
 8011a80:	88fb      	ldrh	r3, [r7, #6]
 8011a82:	9302      	str	r3, [sp, #8]
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	9301      	str	r3, [sp, #4]
 8011a88:	2301      	movs	r3, #1
 8011a8a:	9300      	str	r3, [sp, #0]
 8011a8c:	2302      	movs	r3, #2
 8011a8e:	2201      	movs	r2, #1
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f003 fb4c 	bl	801512e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011a96:	2300      	movs	r3, #0
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3710      	adds	r7, #16
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b086      	sub	sp, #24
 8011aa4:	af04      	add	r7, sp, #16
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	4608      	mov	r0, r1
 8011aaa:	4611      	mov	r1, r2
 8011aac:	461a      	mov	r2, r3
 8011aae:	4603      	mov	r3, r0
 8011ab0:	70fb      	strb	r3, [r7, #3]
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	70bb      	strb	r3, [r7, #2]
 8011ab6:	4613      	mov	r3, r2
 8011ab8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8011aba:	7878      	ldrb	r0, [r7, #1]
 8011abc:	78ba      	ldrb	r2, [r7, #2]
 8011abe:	78f9      	ldrb	r1, [r7, #3]
 8011ac0:	8b3b      	ldrh	r3, [r7, #24]
 8011ac2:	9302      	str	r3, [sp, #8]
 8011ac4:	7d3b      	ldrb	r3, [r7, #20]
 8011ac6:	9301      	str	r3, [sp, #4]
 8011ac8:	7c3b      	ldrb	r3, [r7, #16]
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	4603      	mov	r3, r0
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f003 fadf 	bl	8015092 <USBH_LL_OpenPipe>

  return USBH_OK;
 8011ad4:	2300      	movs	r3, #0
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8011ade:	b580      	push	{r7, lr}
 8011ae0:	b082      	sub	sp, #8
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	6078      	str	r0, [r7, #4]
 8011ae6:	460b      	mov	r3, r1
 8011ae8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8011aea:	78fb      	ldrb	r3, [r7, #3]
 8011aec:	4619      	mov	r1, r3
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f003 fafe 	bl	80150f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011af4:	2300      	movs	r3, #0
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}

08011afe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011afe:	b580      	push	{r7, lr}
 8011b00:	b084      	sub	sp, #16
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
 8011b06:	460b      	mov	r3, r1
 8011b08:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f000 f836 	bl	8011b7c <USBH_GetFreePipe>
 8011b10:	4603      	mov	r3, r0
 8011b12:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011b14:	89fb      	ldrh	r3, [r7, #14]
 8011b16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d00a      	beq.n	8011b34 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8011b1e:	78fa      	ldrb	r2, [r7, #3]
 8011b20:	89fb      	ldrh	r3, [r7, #14]
 8011b22:	f003 030f 	and.w	r3, r3, #15
 8011b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011b2a:	6879      	ldr	r1, [r7, #4]
 8011b2c:	33e0      	adds	r3, #224	@ 0xe0
 8011b2e:	009b      	lsls	r3, r3, #2
 8011b30:	440b      	add	r3, r1
 8011b32:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011b34:	89fb      	ldrh	r3, [r7, #14]
 8011b36:	b2db      	uxtb	r3, r3
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3710      	adds	r7, #16
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011b40:	b480      	push	{r7}
 8011b42:	b083      	sub	sp, #12
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	460b      	mov	r3, r1
 8011b4a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011b4c:	78fb      	ldrb	r3, [r7, #3]
 8011b4e:	2b0f      	cmp	r3, #15
 8011b50:	d80d      	bhi.n	8011b6e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011b52:	78fb      	ldrb	r3, [r7, #3]
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	33e0      	adds	r3, #224	@ 0xe0
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	4413      	add	r3, r2
 8011b5c:	685a      	ldr	r2, [r3, #4]
 8011b5e:	78fb      	ldrb	r3, [r7, #3]
 8011b60:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011b64:	6879      	ldr	r1, [r7, #4]
 8011b66:	33e0      	adds	r3, #224	@ 0xe0
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	440b      	add	r3, r1
 8011b6c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011b6e:	2300      	movs	r3, #0
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	370c      	adds	r7, #12
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr

08011b7c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	b085      	sub	sp, #20
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011b84:	2300      	movs	r3, #0
 8011b86:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011b88:	2300      	movs	r3, #0
 8011b8a:	73fb      	strb	r3, [r7, #15]
 8011b8c:	e00f      	b.n	8011bae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8011b8e:	7bfb      	ldrb	r3, [r7, #15]
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	33e0      	adds	r3, #224	@ 0xe0
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	4413      	add	r3, r2
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d102      	bne.n	8011ba8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8011ba2:	7bfb      	ldrb	r3, [r7, #15]
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	e007      	b.n	8011bb8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011ba8:	7bfb      	ldrb	r3, [r7, #15]
 8011baa:	3301      	adds	r3, #1
 8011bac:	73fb      	strb	r3, [r7, #15]
 8011bae:	7bfb      	ldrb	r3, [r7, #15]
 8011bb0:	2b0f      	cmp	r3, #15
 8011bb2:	d9ec      	bls.n	8011b8e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011bb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3714      	adds	r7, #20
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	4603      	mov	r3, r0
 8011bcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011bce:	79fb      	ldrb	r3, [r7, #7]
 8011bd0:	4a08      	ldr	r2, [pc, #32]	@ (8011bf4 <disk_status+0x30>)
 8011bd2:	009b      	lsls	r3, r3, #2
 8011bd4:	4413      	add	r3, r2
 8011bd6:	685b      	ldr	r3, [r3, #4]
 8011bd8:	685b      	ldr	r3, [r3, #4]
 8011bda:	79fa      	ldrb	r2, [r7, #7]
 8011bdc:	4905      	ldr	r1, [pc, #20]	@ (8011bf4 <disk_status+0x30>)
 8011bde:	440a      	add	r2, r1
 8011be0:	7a12      	ldrb	r2, [r2, #8]
 8011be2:	4610      	mov	r0, r2
 8011be4:	4798      	blx	r3
 8011be6:	4603      	mov	r3, r0
 8011be8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3710      	adds	r7, #16
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	200009d0 	.word	0x200009d0

08011bf8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	4603      	mov	r3, r0
 8011c00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011c02:	2300      	movs	r3, #0
 8011c04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011c06:	79fb      	ldrb	r3, [r7, #7]
 8011c08:	4a0e      	ldr	r2, [pc, #56]	@ (8011c44 <disk_initialize+0x4c>)
 8011c0a:	5cd3      	ldrb	r3, [r2, r3]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d114      	bne.n	8011c3a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011c10:	79fb      	ldrb	r3, [r7, #7]
 8011c12:	4a0c      	ldr	r2, [pc, #48]	@ (8011c44 <disk_initialize+0x4c>)
 8011c14:	009b      	lsls	r3, r3, #2
 8011c16:	4413      	add	r3, r2
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	79fa      	ldrb	r2, [r7, #7]
 8011c1e:	4909      	ldr	r1, [pc, #36]	@ (8011c44 <disk_initialize+0x4c>)
 8011c20:	440a      	add	r2, r1
 8011c22:	7a12      	ldrb	r2, [r2, #8]
 8011c24:	4610      	mov	r0, r2
 8011c26:	4798      	blx	r3
 8011c28:	4603      	mov	r3, r0
 8011c2a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8011c2c:	7bfb      	ldrb	r3, [r7, #15]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d103      	bne.n	8011c3a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8011c32:	79fb      	ldrb	r3, [r7, #7]
 8011c34:	4a03      	ldr	r2, [pc, #12]	@ (8011c44 <disk_initialize+0x4c>)
 8011c36:	2101      	movs	r1, #1
 8011c38:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8011c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3710      	adds	r7, #16
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}
 8011c44:	200009d0 	.word	0x200009d0

08011c48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011c48:	b590      	push	{r4, r7, lr}
 8011c4a:	b087      	sub	sp, #28
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	60b9      	str	r1, [r7, #8]
 8011c50:	607a      	str	r2, [r7, #4]
 8011c52:	603b      	str	r3, [r7, #0]
 8011c54:	4603      	mov	r3, r0
 8011c56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011c58:	7bfb      	ldrb	r3, [r7, #15]
 8011c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8011c84 <disk_read+0x3c>)
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	4413      	add	r3, r2
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	689c      	ldr	r4, [r3, #8]
 8011c64:	7bfb      	ldrb	r3, [r7, #15]
 8011c66:	4a07      	ldr	r2, [pc, #28]	@ (8011c84 <disk_read+0x3c>)
 8011c68:	4413      	add	r3, r2
 8011c6a:	7a18      	ldrb	r0, [r3, #8]
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	68b9      	ldr	r1, [r7, #8]
 8011c72:	47a0      	blx	r4
 8011c74:	4603      	mov	r3, r0
 8011c76:	75fb      	strb	r3, [r7, #23]
  return res;
 8011c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	371c      	adds	r7, #28
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd90      	pop	{r4, r7, pc}
 8011c82:	bf00      	nop
 8011c84:	200009d0 	.word	0x200009d0

08011c88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011c88:	b590      	push	{r4, r7, lr}
 8011c8a:	b087      	sub	sp, #28
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60b9      	str	r1, [r7, #8]
 8011c90:	607a      	str	r2, [r7, #4]
 8011c92:	603b      	str	r3, [r7, #0]
 8011c94:	4603      	mov	r3, r0
 8011c96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011c98:	7bfb      	ldrb	r3, [r7, #15]
 8011c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8011cc4 <disk_write+0x3c>)
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	4413      	add	r3, r2
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	68dc      	ldr	r4, [r3, #12]
 8011ca4:	7bfb      	ldrb	r3, [r7, #15]
 8011ca6:	4a07      	ldr	r2, [pc, #28]	@ (8011cc4 <disk_write+0x3c>)
 8011ca8:	4413      	add	r3, r2
 8011caa:	7a18      	ldrb	r0, [r3, #8]
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	687a      	ldr	r2, [r7, #4]
 8011cb0:	68b9      	ldr	r1, [r7, #8]
 8011cb2:	47a0      	blx	r4
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8011cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	371c      	adds	r7, #28
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd90      	pop	{r4, r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	200009d0 	.word	0x200009d0

08011cc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	4603      	mov	r3, r0
 8011cd0:	603a      	str	r2, [r7, #0]
 8011cd2:	71fb      	strb	r3, [r7, #7]
 8011cd4:	460b      	mov	r3, r1
 8011cd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011cd8:	79fb      	ldrb	r3, [r7, #7]
 8011cda:	4a09      	ldr	r2, [pc, #36]	@ (8011d00 <disk_ioctl+0x38>)
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	4413      	add	r3, r2
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	691b      	ldr	r3, [r3, #16]
 8011ce4:	79fa      	ldrb	r2, [r7, #7]
 8011ce6:	4906      	ldr	r1, [pc, #24]	@ (8011d00 <disk_ioctl+0x38>)
 8011ce8:	440a      	add	r2, r1
 8011cea:	7a10      	ldrb	r0, [r2, #8]
 8011cec:	79b9      	ldrb	r1, [r7, #6]
 8011cee:	683a      	ldr	r2, [r7, #0]
 8011cf0:	4798      	blx	r3
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	73fb      	strb	r3, [r7, #15]
  return res;
 8011cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3710      	adds	r7, #16
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	200009d0 	.word	0x200009d0

08011d04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011d04:	b480      	push	{r7}
 8011d06:	b085      	sub	sp, #20
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	3301      	adds	r3, #1
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011d14:	89fb      	ldrh	r3, [r7, #14]
 8011d16:	021b      	lsls	r3, r3, #8
 8011d18:	b21a      	sxth	r2, r3
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	b21b      	sxth	r3, r3
 8011d20:	4313      	orrs	r3, r2
 8011d22:	b21b      	sxth	r3, r3
 8011d24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011d26:	89fb      	ldrh	r3, [r7, #14]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3714      	adds	r7, #20
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr

08011d34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011d34:	b480      	push	{r7}
 8011d36:	b085      	sub	sp, #20
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	3303      	adds	r3, #3
 8011d40:	781b      	ldrb	r3, [r3, #0]
 8011d42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	021b      	lsls	r3, r3, #8
 8011d48:	687a      	ldr	r2, [r7, #4]
 8011d4a:	3202      	adds	r2, #2
 8011d4c:	7812      	ldrb	r2, [r2, #0]
 8011d4e:	4313      	orrs	r3, r2
 8011d50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	021b      	lsls	r3, r3, #8
 8011d56:	687a      	ldr	r2, [r7, #4]
 8011d58:	3201      	adds	r2, #1
 8011d5a:	7812      	ldrb	r2, [r2, #0]
 8011d5c:	4313      	orrs	r3, r2
 8011d5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	021b      	lsls	r3, r3, #8
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	7812      	ldrb	r2, [r2, #0]
 8011d68:	4313      	orrs	r3, r2
 8011d6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3714      	adds	r7, #20
 8011d72:	46bd      	mov	sp, r7
 8011d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d78:	4770      	bx	lr

08011d7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011d7a:	b480      	push	{r7}
 8011d7c:	b083      	sub	sp, #12
 8011d7e:	af00      	add	r7, sp, #0
 8011d80:	6078      	str	r0, [r7, #4]
 8011d82:	460b      	mov	r3, r1
 8011d84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	1c5a      	adds	r2, r3, #1
 8011d8a:	607a      	str	r2, [r7, #4]
 8011d8c:	887a      	ldrh	r2, [r7, #2]
 8011d8e:	b2d2      	uxtb	r2, r2
 8011d90:	701a      	strb	r2, [r3, #0]
 8011d92:	887b      	ldrh	r3, [r7, #2]
 8011d94:	0a1b      	lsrs	r3, r3, #8
 8011d96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	1c5a      	adds	r2, r3, #1
 8011d9c:	607a      	str	r2, [r7, #4]
 8011d9e:	887a      	ldrh	r2, [r7, #2]
 8011da0:	b2d2      	uxtb	r2, r2
 8011da2:	701a      	strb	r2, [r3, #0]
}
 8011da4:	bf00      	nop
 8011da6:	370c      	adds	r7, #12
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr

08011db0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011db0:	b480      	push	{r7}
 8011db2:	b083      	sub	sp, #12
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	1c5a      	adds	r2, r3, #1
 8011dbe:	607a      	str	r2, [r7, #4]
 8011dc0:	683a      	ldr	r2, [r7, #0]
 8011dc2:	b2d2      	uxtb	r2, r2
 8011dc4:	701a      	strb	r2, [r3, #0]
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	0a1b      	lsrs	r3, r3, #8
 8011dca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	1c5a      	adds	r2, r3, #1
 8011dd0:	607a      	str	r2, [r7, #4]
 8011dd2:	683a      	ldr	r2, [r7, #0]
 8011dd4:	b2d2      	uxtb	r2, r2
 8011dd6:	701a      	strb	r2, [r3, #0]
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	0a1b      	lsrs	r3, r3, #8
 8011ddc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	1c5a      	adds	r2, r3, #1
 8011de2:	607a      	str	r2, [r7, #4]
 8011de4:	683a      	ldr	r2, [r7, #0]
 8011de6:	b2d2      	uxtb	r2, r2
 8011de8:	701a      	strb	r2, [r3, #0]
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	0a1b      	lsrs	r3, r3, #8
 8011dee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	1c5a      	adds	r2, r3, #1
 8011df4:	607a      	str	r2, [r7, #4]
 8011df6:	683a      	ldr	r2, [r7, #0]
 8011df8:	b2d2      	uxtb	r2, r2
 8011dfa:	701a      	strb	r2, [r3, #0]
}
 8011dfc:	bf00      	nop
 8011dfe:	370c      	adds	r7, #12
 8011e00:	46bd      	mov	sp, r7
 8011e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e06:	4770      	bx	lr

08011e08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011e08:	b480      	push	{r7}
 8011e0a:	b087      	sub	sp, #28
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d00d      	beq.n	8011e3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011e22:	693a      	ldr	r2, [r7, #16]
 8011e24:	1c53      	adds	r3, r2, #1
 8011e26:	613b      	str	r3, [r7, #16]
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	1c59      	adds	r1, r3, #1
 8011e2c:	6179      	str	r1, [r7, #20]
 8011e2e:	7812      	ldrb	r2, [r2, #0]
 8011e30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	3b01      	subs	r3, #1
 8011e36:	607b      	str	r3, [r7, #4]
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d1f1      	bne.n	8011e22 <mem_cpy+0x1a>
	}
}
 8011e3e:	bf00      	nop
 8011e40:	371c      	adds	r7, #28
 8011e42:	46bd      	mov	sp, r7
 8011e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e48:	4770      	bx	lr

08011e4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011e4a:	b480      	push	{r7}
 8011e4c:	b087      	sub	sp, #28
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	60f8      	str	r0, [r7, #12]
 8011e52:	60b9      	str	r1, [r7, #8]
 8011e54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	1c5a      	adds	r2, r3, #1
 8011e5e:	617a      	str	r2, [r7, #20]
 8011e60:	68ba      	ldr	r2, [r7, #8]
 8011e62:	b2d2      	uxtb	r2, r2
 8011e64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	3b01      	subs	r3, #1
 8011e6a:	607b      	str	r3, [r7, #4]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d1f3      	bne.n	8011e5a <mem_set+0x10>
}
 8011e72:	bf00      	nop
 8011e74:	bf00      	nop
 8011e76:	371c      	adds	r7, #28
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7e:	4770      	bx	lr

08011e80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011e80:	b480      	push	{r7}
 8011e82:	b089      	sub	sp, #36	@ 0x24
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	60f8      	str	r0, [r7, #12]
 8011e88:	60b9      	str	r1, [r7, #8]
 8011e8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	61fb      	str	r3, [r7, #28]
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011e94:	2300      	movs	r3, #0
 8011e96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011e98:	69fb      	ldr	r3, [r7, #28]
 8011e9a:	1c5a      	adds	r2, r3, #1
 8011e9c:	61fa      	str	r2, [r7, #28]
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	69bb      	ldr	r3, [r7, #24]
 8011ea4:	1c5a      	adds	r2, r3, #1
 8011ea6:	61ba      	str	r2, [r7, #24]
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	1acb      	subs	r3, r1, r3
 8011eac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	3b01      	subs	r3, #1
 8011eb2:	607b      	str	r3, [r7, #4]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d002      	beq.n	8011ec0 <mem_cmp+0x40>
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d0eb      	beq.n	8011e98 <mem_cmp+0x18>

	return r;
 8011ec0:	697b      	ldr	r3, [r7, #20]
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3724      	adds	r7, #36	@ 0x24
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr

08011ece <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011ece:	b480      	push	{r7}
 8011ed0:	b083      	sub	sp, #12
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
 8011ed6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011ed8:	e002      	b.n	8011ee0 <chk_chr+0x12>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	3301      	adds	r3, #1
 8011ede:	607b      	str	r3, [r7, #4]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d005      	beq.n	8011ef4 <chk_chr+0x26>
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	461a      	mov	r2, r3
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	4293      	cmp	r3, r2
 8011ef2:	d1f2      	bne.n	8011eda <chk_chr+0xc>
	return *str;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	781b      	ldrb	r3, [r3, #0]
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	370c      	adds	r7, #12
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr

08011f04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b085      	sub	sp, #20
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011f0e:	2300      	movs	r3, #0
 8011f10:	60bb      	str	r3, [r7, #8]
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	60fb      	str	r3, [r7, #12]
 8011f16:	e029      	b.n	8011f6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011f18:	4a27      	ldr	r2, [pc, #156]	@ (8011fb8 <chk_lock+0xb4>)
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	011b      	lsls	r3, r3, #4
 8011f1e:	4413      	add	r3, r2
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d01d      	beq.n	8011f62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011f26:	4a24      	ldr	r2, [pc, #144]	@ (8011fb8 <chk_lock+0xb4>)
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	011b      	lsls	r3, r3, #4
 8011f2c:	4413      	add	r3, r2
 8011f2e:	681a      	ldr	r2, [r3, #0]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d116      	bne.n	8011f66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011f38:	4a1f      	ldr	r2, [pc, #124]	@ (8011fb8 <chk_lock+0xb4>)
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	011b      	lsls	r3, r3, #4
 8011f3e:	4413      	add	r3, r2
 8011f40:	3304      	adds	r3, #4
 8011f42:	681a      	ldr	r2, [r3, #0]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d10c      	bne.n	8011f66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8011fb8 <chk_lock+0xb4>)
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	011b      	lsls	r3, r3, #4
 8011f52:	4413      	add	r3, r2
 8011f54:	3308      	adds	r3, #8
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d102      	bne.n	8011f66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011f60:	e007      	b.n	8011f72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011f62:	2301      	movs	r3, #1
 8011f64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	3301      	adds	r3, #1
 8011f6a:	60fb      	str	r3, [r7, #12]
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d9d2      	bls.n	8011f18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2b02      	cmp	r3, #2
 8011f76:	d109      	bne.n	8011f8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d102      	bne.n	8011f84 <chk_lock+0x80>
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	2b02      	cmp	r3, #2
 8011f82:	d101      	bne.n	8011f88 <chk_lock+0x84>
 8011f84:	2300      	movs	r3, #0
 8011f86:	e010      	b.n	8011faa <chk_lock+0xa6>
 8011f88:	2312      	movs	r3, #18
 8011f8a:	e00e      	b.n	8011faa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d108      	bne.n	8011fa4 <chk_lock+0xa0>
 8011f92:	4a09      	ldr	r2, [pc, #36]	@ (8011fb8 <chk_lock+0xb4>)
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	011b      	lsls	r3, r3, #4
 8011f98:	4413      	add	r3, r2
 8011f9a:	330c      	adds	r3, #12
 8011f9c:	881b      	ldrh	r3, [r3, #0]
 8011f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011fa2:	d101      	bne.n	8011fa8 <chk_lock+0xa4>
 8011fa4:	2310      	movs	r3, #16
 8011fa6:	e000      	b.n	8011faa <chk_lock+0xa6>
 8011fa8:	2300      	movs	r3, #0
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3714      	adds	r7, #20
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop
 8011fb8:	200009b0 	.word	0x200009b0

08011fbc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	607b      	str	r3, [r7, #4]
 8011fc6:	e002      	b.n	8011fce <enq_lock+0x12>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	607b      	str	r3, [r7, #4]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	d806      	bhi.n	8011fe2 <enq_lock+0x26>
 8011fd4:	4a09      	ldr	r2, [pc, #36]	@ (8011ffc <enq_lock+0x40>)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	011b      	lsls	r3, r3, #4
 8011fda:	4413      	add	r3, r2
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d1f2      	bne.n	8011fc8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2b02      	cmp	r3, #2
 8011fe6:	bf14      	ite	ne
 8011fe8:	2301      	movne	r3, #1
 8011fea:	2300      	moveq	r3, #0
 8011fec:	b2db      	uxtb	r3, r3
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	370c      	adds	r7, #12
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff8:	4770      	bx	lr
 8011ffa:	bf00      	nop
 8011ffc:	200009b0 	.word	0x200009b0

08012000 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012000:	b480      	push	{r7}
 8012002:	b085      	sub	sp, #20
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801200a:	2300      	movs	r3, #0
 801200c:	60fb      	str	r3, [r7, #12]
 801200e:	e01f      	b.n	8012050 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012010:	4a41      	ldr	r2, [pc, #260]	@ (8012118 <inc_lock+0x118>)
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	011b      	lsls	r3, r3, #4
 8012016:	4413      	add	r3, r2
 8012018:	681a      	ldr	r2, [r3, #0]
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	429a      	cmp	r2, r3
 8012020:	d113      	bne.n	801204a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012022:	4a3d      	ldr	r2, [pc, #244]	@ (8012118 <inc_lock+0x118>)
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	011b      	lsls	r3, r3, #4
 8012028:	4413      	add	r3, r2
 801202a:	3304      	adds	r3, #4
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012032:	429a      	cmp	r2, r3
 8012034:	d109      	bne.n	801204a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012036:	4a38      	ldr	r2, [pc, #224]	@ (8012118 <inc_lock+0x118>)
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	011b      	lsls	r3, r3, #4
 801203c:	4413      	add	r3, r2
 801203e:	3308      	adds	r3, #8
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012046:	429a      	cmp	r2, r3
 8012048:	d006      	beq.n	8012058 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	3301      	adds	r3, #1
 801204e:	60fb      	str	r3, [r7, #12]
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	2b01      	cmp	r3, #1
 8012054:	d9dc      	bls.n	8012010 <inc_lock+0x10>
 8012056:	e000      	b.n	801205a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012058:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	2b02      	cmp	r3, #2
 801205e:	d132      	bne.n	80120c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012060:	2300      	movs	r3, #0
 8012062:	60fb      	str	r3, [r7, #12]
 8012064:	e002      	b.n	801206c <inc_lock+0x6c>
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	3301      	adds	r3, #1
 801206a:	60fb      	str	r3, [r7, #12]
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	2b01      	cmp	r3, #1
 8012070:	d806      	bhi.n	8012080 <inc_lock+0x80>
 8012072:	4a29      	ldr	r2, [pc, #164]	@ (8012118 <inc_lock+0x118>)
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	011b      	lsls	r3, r3, #4
 8012078:	4413      	add	r3, r2
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d1f2      	bne.n	8012066 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	2b02      	cmp	r3, #2
 8012084:	d101      	bne.n	801208a <inc_lock+0x8a>
 8012086:	2300      	movs	r3, #0
 8012088:	e040      	b.n	801210c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681a      	ldr	r2, [r3, #0]
 801208e:	4922      	ldr	r1, [pc, #136]	@ (8012118 <inc_lock+0x118>)
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	011b      	lsls	r3, r3, #4
 8012094:	440b      	add	r3, r1
 8012096:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	689a      	ldr	r2, [r3, #8]
 801209c:	491e      	ldr	r1, [pc, #120]	@ (8012118 <inc_lock+0x118>)
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	011b      	lsls	r3, r3, #4
 80120a2:	440b      	add	r3, r1
 80120a4:	3304      	adds	r3, #4
 80120a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	695a      	ldr	r2, [r3, #20]
 80120ac:	491a      	ldr	r1, [pc, #104]	@ (8012118 <inc_lock+0x118>)
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	011b      	lsls	r3, r3, #4
 80120b2:	440b      	add	r3, r1
 80120b4:	3308      	adds	r3, #8
 80120b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80120b8:	4a17      	ldr	r2, [pc, #92]	@ (8012118 <inc_lock+0x118>)
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	011b      	lsls	r3, r3, #4
 80120be:	4413      	add	r3, r2
 80120c0:	330c      	adds	r3, #12
 80120c2:	2200      	movs	r2, #0
 80120c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d009      	beq.n	80120e0 <inc_lock+0xe0>
 80120cc:	4a12      	ldr	r2, [pc, #72]	@ (8012118 <inc_lock+0x118>)
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	011b      	lsls	r3, r3, #4
 80120d2:	4413      	add	r3, r2
 80120d4:	330c      	adds	r3, #12
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d001      	beq.n	80120e0 <inc_lock+0xe0>
 80120dc:	2300      	movs	r3, #0
 80120de:	e015      	b.n	801210c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d108      	bne.n	80120f8 <inc_lock+0xf8>
 80120e6:	4a0c      	ldr	r2, [pc, #48]	@ (8012118 <inc_lock+0x118>)
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	011b      	lsls	r3, r3, #4
 80120ec:	4413      	add	r3, r2
 80120ee:	330c      	adds	r3, #12
 80120f0:	881b      	ldrh	r3, [r3, #0]
 80120f2:	3301      	adds	r3, #1
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	e001      	b.n	80120fc <inc_lock+0xfc>
 80120f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80120fc:	4906      	ldr	r1, [pc, #24]	@ (8012118 <inc_lock+0x118>)
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	011b      	lsls	r3, r3, #4
 8012102:	440b      	add	r3, r1
 8012104:	330c      	adds	r3, #12
 8012106:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	3301      	adds	r3, #1
}
 801210c:	4618      	mov	r0, r3
 801210e:	3714      	adds	r7, #20
 8012110:	46bd      	mov	sp, r7
 8012112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012116:	4770      	bx	lr
 8012118:	200009b0 	.word	0x200009b0

0801211c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801211c:	b480      	push	{r7}
 801211e:	b085      	sub	sp, #20
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	3b01      	subs	r3, #1
 8012128:	607b      	str	r3, [r7, #4]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d825      	bhi.n	801217c <dec_lock+0x60>
		n = Files[i].ctr;
 8012130:	4a17      	ldr	r2, [pc, #92]	@ (8012190 <dec_lock+0x74>)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	011b      	lsls	r3, r3, #4
 8012136:	4413      	add	r3, r2
 8012138:	330c      	adds	r3, #12
 801213a:	881b      	ldrh	r3, [r3, #0]
 801213c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801213e:	89fb      	ldrh	r3, [r7, #14]
 8012140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012144:	d101      	bne.n	801214a <dec_lock+0x2e>
 8012146:	2300      	movs	r3, #0
 8012148:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801214a:	89fb      	ldrh	r3, [r7, #14]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d002      	beq.n	8012156 <dec_lock+0x3a>
 8012150:	89fb      	ldrh	r3, [r7, #14]
 8012152:	3b01      	subs	r3, #1
 8012154:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012156:	4a0e      	ldr	r2, [pc, #56]	@ (8012190 <dec_lock+0x74>)
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	011b      	lsls	r3, r3, #4
 801215c:	4413      	add	r3, r2
 801215e:	330c      	adds	r3, #12
 8012160:	89fa      	ldrh	r2, [r7, #14]
 8012162:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012164:	89fb      	ldrh	r3, [r7, #14]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d105      	bne.n	8012176 <dec_lock+0x5a>
 801216a:	4a09      	ldr	r2, [pc, #36]	@ (8012190 <dec_lock+0x74>)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	011b      	lsls	r3, r3, #4
 8012170:	4413      	add	r3, r2
 8012172:	2200      	movs	r2, #0
 8012174:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012176:	2300      	movs	r3, #0
 8012178:	737b      	strb	r3, [r7, #13]
 801217a:	e001      	b.n	8012180 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801217c:	2302      	movs	r3, #2
 801217e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012180:	7b7b      	ldrb	r3, [r7, #13]
}
 8012182:	4618      	mov	r0, r3
 8012184:	3714      	adds	r7, #20
 8012186:	46bd      	mov	sp, r7
 8012188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218c:	4770      	bx	lr
 801218e:	bf00      	nop
 8012190:	200009b0 	.word	0x200009b0

08012194 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012194:	b480      	push	{r7}
 8012196:	b085      	sub	sp, #20
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801219c:	2300      	movs	r3, #0
 801219e:	60fb      	str	r3, [r7, #12]
 80121a0:	e010      	b.n	80121c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80121a2:	4a0d      	ldr	r2, [pc, #52]	@ (80121d8 <clear_lock+0x44>)
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	011b      	lsls	r3, r3, #4
 80121a8:	4413      	add	r3, r2
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	687a      	ldr	r2, [r7, #4]
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d105      	bne.n	80121be <clear_lock+0x2a>
 80121b2:	4a09      	ldr	r2, [pc, #36]	@ (80121d8 <clear_lock+0x44>)
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	011b      	lsls	r3, r3, #4
 80121b8:	4413      	add	r3, r2
 80121ba:	2200      	movs	r2, #0
 80121bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	3301      	adds	r3, #1
 80121c2:	60fb      	str	r3, [r7, #12]
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d9eb      	bls.n	80121a2 <clear_lock+0xe>
	}
}
 80121ca:	bf00      	nop
 80121cc:	bf00      	nop
 80121ce:	3714      	adds	r7, #20
 80121d0:	46bd      	mov	sp, r7
 80121d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d6:	4770      	bx	lr
 80121d8:	200009b0 	.word	0x200009b0

080121dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b086      	sub	sp, #24
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80121e4:	2300      	movs	r3, #0
 80121e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	78db      	ldrb	r3, [r3, #3]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d034      	beq.n	801225a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	7858      	ldrb	r0, [r3, #1]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012200:	2301      	movs	r3, #1
 8012202:	697a      	ldr	r2, [r7, #20]
 8012204:	f7ff fd40 	bl	8011c88 <disk_write>
 8012208:	4603      	mov	r3, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	d002      	beq.n	8012214 <sync_window+0x38>
			res = FR_DISK_ERR;
 801220e:	2301      	movs	r3, #1
 8012210:	73fb      	strb	r3, [r7, #15]
 8012212:	e022      	b.n	801225a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2200      	movs	r2, #0
 8012218:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6a1b      	ldr	r3, [r3, #32]
 801221e:	697a      	ldr	r2, [r7, #20]
 8012220:	1ad2      	subs	r2, r2, r3
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	699b      	ldr	r3, [r3, #24]
 8012226:	429a      	cmp	r2, r3
 8012228:	d217      	bcs.n	801225a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	789b      	ldrb	r3, [r3, #2]
 801222e:	613b      	str	r3, [r7, #16]
 8012230:	e010      	b.n	8012254 <sync_window+0x78>
					wsect += fs->fsize;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	699b      	ldr	r3, [r3, #24]
 8012236:	697a      	ldr	r2, [r7, #20]
 8012238:	4413      	add	r3, r2
 801223a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	7858      	ldrb	r0, [r3, #1]
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012246:	2301      	movs	r3, #1
 8012248:	697a      	ldr	r2, [r7, #20]
 801224a:	f7ff fd1d 	bl	8011c88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	3b01      	subs	r3, #1
 8012252:	613b      	str	r3, [r7, #16]
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	2b01      	cmp	r3, #1
 8012258:	d8eb      	bhi.n	8012232 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801225a:	7bfb      	ldrb	r3, [r7, #15]
}
 801225c:	4618      	mov	r0, r3
 801225e:	3718      	adds	r7, #24
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801226e:	2300      	movs	r3, #0
 8012270:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012276:	683a      	ldr	r2, [r7, #0]
 8012278:	429a      	cmp	r2, r3
 801227a:	d01b      	beq.n	80122b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7ff ffad 	bl	80121dc <sync_window>
 8012282:	4603      	mov	r3, r0
 8012284:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012286:	7bfb      	ldrb	r3, [r7, #15]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d113      	bne.n	80122b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	7858      	ldrb	r0, [r3, #1]
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012296:	2301      	movs	r3, #1
 8012298:	683a      	ldr	r2, [r7, #0]
 801229a:	f7ff fcd5 	bl	8011c48 <disk_read>
 801229e:	4603      	mov	r3, r0
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d004      	beq.n	80122ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80122a4:	f04f 33ff 	mov.w	r3, #4294967295
 80122a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80122aa:	2301      	movs	r3, #1
 80122ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	683a      	ldr	r2, [r7, #0]
 80122b2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80122b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3710      	adds	r7, #16
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
	...

080122c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b084      	sub	sp, #16
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f7ff ff87 	bl	80121dc <sync_window>
 80122ce:	4603      	mov	r3, r0
 80122d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80122d2:	7bfb      	ldrb	r3, [r7, #15]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d158      	bne.n	801238a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	2b03      	cmp	r3, #3
 80122de:	d148      	bne.n	8012372 <sync_fs+0xb2>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	791b      	ldrb	r3, [r3, #4]
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	d144      	bne.n	8012372 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	3330      	adds	r3, #48	@ 0x30
 80122ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80122f0:	2100      	movs	r1, #0
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7ff fda9 	bl	8011e4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	3330      	adds	r3, #48	@ 0x30
 80122fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012300:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012304:	4618      	mov	r0, r3
 8012306:	f7ff fd38 	bl	8011d7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	3330      	adds	r3, #48	@ 0x30
 801230e:	4921      	ldr	r1, [pc, #132]	@ (8012394 <sync_fs+0xd4>)
 8012310:	4618      	mov	r0, r3
 8012312:	f7ff fd4d 	bl	8011db0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	3330      	adds	r3, #48	@ 0x30
 801231a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801231e:	491e      	ldr	r1, [pc, #120]	@ (8012398 <sync_fs+0xd8>)
 8012320:	4618      	mov	r0, r3
 8012322:	f7ff fd45 	bl	8011db0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	3330      	adds	r3, #48	@ 0x30
 801232a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	691b      	ldr	r3, [r3, #16]
 8012332:	4619      	mov	r1, r3
 8012334:	4610      	mov	r0, r2
 8012336:	f7ff fd3b 	bl	8011db0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	3330      	adds	r3, #48	@ 0x30
 801233e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	68db      	ldr	r3, [r3, #12]
 8012346:	4619      	mov	r1, r3
 8012348:	4610      	mov	r0, r2
 801234a:	f7ff fd31 	bl	8011db0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	69db      	ldr	r3, [r3, #28]
 8012352:	1c5a      	adds	r2, r3, #1
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	7858      	ldrb	r0, [r3, #1]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012366:	2301      	movs	r3, #1
 8012368:	f7ff fc8e 	bl	8011c88 <disk_write>
			fs->fsi_flag = 0;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2200      	movs	r2, #0
 8012370:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	785b      	ldrb	r3, [r3, #1]
 8012376:	2200      	movs	r2, #0
 8012378:	2100      	movs	r1, #0
 801237a:	4618      	mov	r0, r3
 801237c:	f7ff fca4 	bl	8011cc8 <disk_ioctl>
 8012380:	4603      	mov	r3, r0
 8012382:	2b00      	cmp	r3, #0
 8012384:	d001      	beq.n	801238a <sync_fs+0xca>
 8012386:	2301      	movs	r3, #1
 8012388:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801238a:	7bfb      	ldrb	r3, [r7, #15]
}
 801238c:	4618      	mov	r0, r3
 801238e:	3710      	adds	r7, #16
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}
 8012394:	41615252 	.word	0x41615252
 8012398:	61417272 	.word	0x61417272

0801239c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801239c:	b480      	push	{r7}
 801239e:	b083      	sub	sp, #12
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	3b02      	subs	r3, #2
 80123aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	695b      	ldr	r3, [r3, #20]
 80123b0:	3b02      	subs	r3, #2
 80123b2:	683a      	ldr	r2, [r7, #0]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d301      	bcc.n	80123bc <clust2sect+0x20>
 80123b8:	2300      	movs	r3, #0
 80123ba:	e008      	b.n	80123ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	895b      	ldrh	r3, [r3, #10]
 80123c0:	461a      	mov	r2, r3
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	fb03 f202 	mul.w	r2, r3, r2
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123cc:	4413      	add	r3, r2
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	370c      	adds	r7, #12
 80123d2:	46bd      	mov	sp, r7
 80123d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d8:	4770      	bx	lr

080123da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80123da:	b580      	push	{r7, lr}
 80123dc:	b086      	sub	sp, #24
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
 80123e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d904      	bls.n	80123fa <get_fat+0x20>
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	695b      	ldr	r3, [r3, #20]
 80123f4:	683a      	ldr	r2, [r7, #0]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d302      	bcc.n	8012400 <get_fat+0x26>
		val = 1;	/* Internal error */
 80123fa:	2301      	movs	r3, #1
 80123fc:	617b      	str	r3, [r7, #20]
 80123fe:	e08e      	b.n	801251e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012400:	f04f 33ff 	mov.w	r3, #4294967295
 8012404:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	2b03      	cmp	r3, #3
 801240c:	d061      	beq.n	80124d2 <get_fat+0xf8>
 801240e:	2b03      	cmp	r3, #3
 8012410:	dc7b      	bgt.n	801250a <get_fat+0x130>
 8012412:	2b01      	cmp	r3, #1
 8012414:	d002      	beq.n	801241c <get_fat+0x42>
 8012416:	2b02      	cmp	r3, #2
 8012418:	d041      	beq.n	801249e <get_fat+0xc4>
 801241a:	e076      	b.n	801250a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	60fb      	str	r3, [r7, #12]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	085b      	lsrs	r3, r3, #1
 8012424:	68fa      	ldr	r2, [r7, #12]
 8012426:	4413      	add	r3, r2
 8012428:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	6a1a      	ldr	r2, [r3, #32]
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	0a5b      	lsrs	r3, r3, #9
 8012432:	4413      	add	r3, r2
 8012434:	4619      	mov	r1, r3
 8012436:	6938      	ldr	r0, [r7, #16]
 8012438:	f7ff ff14 	bl	8012264 <move_window>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d166      	bne.n	8012510 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	1c5a      	adds	r2, r3, #1
 8012446:	60fa      	str	r2, [r7, #12]
 8012448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801244c:	693a      	ldr	r2, [r7, #16]
 801244e:	4413      	add	r3, r2
 8012450:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012454:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	6a1a      	ldr	r2, [r3, #32]
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	0a5b      	lsrs	r3, r3, #9
 801245e:	4413      	add	r3, r2
 8012460:	4619      	mov	r1, r3
 8012462:	6938      	ldr	r0, [r7, #16]
 8012464:	f7ff fefe 	bl	8012264 <move_window>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d152      	bne.n	8012514 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012474:	693a      	ldr	r2, [r7, #16]
 8012476:	4413      	add	r3, r2
 8012478:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801247c:	021b      	lsls	r3, r3, #8
 801247e:	68ba      	ldr	r2, [r7, #8]
 8012480:	4313      	orrs	r3, r2
 8012482:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	f003 0301 	and.w	r3, r3, #1
 801248a:	2b00      	cmp	r3, #0
 801248c:	d002      	beq.n	8012494 <get_fat+0xba>
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	091b      	lsrs	r3, r3, #4
 8012492:	e002      	b.n	801249a <get_fat+0xc0>
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801249a:	617b      	str	r3, [r7, #20]
			break;
 801249c:	e03f      	b.n	801251e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	6a1a      	ldr	r2, [r3, #32]
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	0a1b      	lsrs	r3, r3, #8
 80124a6:	4413      	add	r3, r2
 80124a8:	4619      	mov	r1, r3
 80124aa:	6938      	ldr	r0, [r7, #16]
 80124ac:	f7ff feda 	bl	8012264 <move_window>
 80124b0:	4603      	mov	r3, r0
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d130      	bne.n	8012518 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	005b      	lsls	r3, r3, #1
 80124c0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80124c4:	4413      	add	r3, r2
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7ff fc1c 	bl	8011d04 <ld_word>
 80124cc:	4603      	mov	r3, r0
 80124ce:	617b      	str	r3, [r7, #20]
			break;
 80124d0:	e025      	b.n	801251e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	6a1a      	ldr	r2, [r3, #32]
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	09db      	lsrs	r3, r3, #7
 80124da:	4413      	add	r3, r2
 80124dc:	4619      	mov	r1, r3
 80124de:	6938      	ldr	r0, [r7, #16]
 80124e0:	f7ff fec0 	bl	8012264 <move_window>
 80124e4:	4603      	mov	r3, r0
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d118      	bne.n	801251c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	009b      	lsls	r3, r3, #2
 80124f4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80124f8:	4413      	add	r3, r2
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7ff fc1a 	bl	8011d34 <ld_dword>
 8012500:	4603      	mov	r3, r0
 8012502:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012506:	617b      	str	r3, [r7, #20]
			break;
 8012508:	e009      	b.n	801251e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801250a:	2301      	movs	r3, #1
 801250c:	617b      	str	r3, [r7, #20]
 801250e:	e006      	b.n	801251e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012510:	bf00      	nop
 8012512:	e004      	b.n	801251e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012514:	bf00      	nop
 8012516:	e002      	b.n	801251e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012518:	bf00      	nop
 801251a:	e000      	b.n	801251e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801251c:	bf00      	nop
		}
	}

	return val;
 801251e:	697b      	ldr	r3, [r7, #20]
}
 8012520:	4618      	mov	r0, r3
 8012522:	3718      	adds	r7, #24
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}

08012528 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012528:	b590      	push	{r4, r7, lr}
 801252a:	b089      	sub	sp, #36	@ 0x24
 801252c:	af00      	add	r7, sp, #0
 801252e:	60f8      	str	r0, [r7, #12]
 8012530:	60b9      	str	r1, [r7, #8]
 8012532:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012534:	2302      	movs	r3, #2
 8012536:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	2b01      	cmp	r3, #1
 801253c:	f240 80d9 	bls.w	80126f2 <put_fat+0x1ca>
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	695b      	ldr	r3, [r3, #20]
 8012544:	68ba      	ldr	r2, [r7, #8]
 8012546:	429a      	cmp	r2, r3
 8012548:	f080 80d3 	bcs.w	80126f2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	2b03      	cmp	r3, #3
 8012552:	f000 8096 	beq.w	8012682 <put_fat+0x15a>
 8012556:	2b03      	cmp	r3, #3
 8012558:	f300 80cb 	bgt.w	80126f2 <put_fat+0x1ca>
 801255c:	2b01      	cmp	r3, #1
 801255e:	d002      	beq.n	8012566 <put_fat+0x3e>
 8012560:	2b02      	cmp	r3, #2
 8012562:	d06e      	beq.n	8012642 <put_fat+0x11a>
 8012564:	e0c5      	b.n	80126f2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	61bb      	str	r3, [r7, #24]
 801256a:	69bb      	ldr	r3, [r7, #24]
 801256c:	085b      	lsrs	r3, r3, #1
 801256e:	69ba      	ldr	r2, [r7, #24]
 8012570:	4413      	add	r3, r2
 8012572:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	6a1a      	ldr	r2, [r3, #32]
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	0a5b      	lsrs	r3, r3, #9
 801257c:	4413      	add	r3, r2
 801257e:	4619      	mov	r1, r3
 8012580:	68f8      	ldr	r0, [r7, #12]
 8012582:	f7ff fe6f 	bl	8012264 <move_window>
 8012586:	4603      	mov	r3, r0
 8012588:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801258a:	7ffb      	ldrb	r3, [r7, #31]
 801258c:	2b00      	cmp	r3, #0
 801258e:	f040 80a9 	bne.w	80126e4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012598:	69bb      	ldr	r3, [r7, #24]
 801259a:	1c59      	adds	r1, r3, #1
 801259c:	61b9      	str	r1, [r7, #24]
 801259e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125a2:	4413      	add	r3, r2
 80125a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	f003 0301 	and.w	r3, r3, #1
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d00d      	beq.n	80125cc <put_fat+0xa4>
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	b25b      	sxtb	r3, r3
 80125b6:	f003 030f 	and.w	r3, r3, #15
 80125ba:	b25a      	sxtb	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	b2db      	uxtb	r3, r3
 80125c0:	011b      	lsls	r3, r3, #4
 80125c2:	b25b      	sxtb	r3, r3
 80125c4:	4313      	orrs	r3, r2
 80125c6:	b25b      	sxtb	r3, r3
 80125c8:	b2db      	uxtb	r3, r3
 80125ca:	e001      	b.n	80125d0 <put_fat+0xa8>
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	697a      	ldr	r2, [r7, #20]
 80125d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2201      	movs	r2, #1
 80125d8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	6a1a      	ldr	r2, [r3, #32]
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	0a5b      	lsrs	r3, r3, #9
 80125e2:	4413      	add	r3, r2
 80125e4:	4619      	mov	r1, r3
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	f7ff fe3c 	bl	8012264 <move_window>
 80125ec:	4603      	mov	r3, r0
 80125ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80125f0:	7ffb      	ldrb	r3, [r7, #31]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d178      	bne.n	80126e8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80125fc:	69bb      	ldr	r3, [r7, #24]
 80125fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012602:	4413      	add	r3, r2
 8012604:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	f003 0301 	and.w	r3, r3, #1
 801260c:	2b00      	cmp	r3, #0
 801260e:	d003      	beq.n	8012618 <put_fat+0xf0>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	091b      	lsrs	r3, r3, #4
 8012614:	b2db      	uxtb	r3, r3
 8012616:	e00e      	b.n	8012636 <put_fat+0x10e>
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	b25b      	sxtb	r3, r3
 801261e:	f023 030f 	bic.w	r3, r3, #15
 8012622:	b25a      	sxtb	r2, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	0a1b      	lsrs	r3, r3, #8
 8012628:	b25b      	sxtb	r3, r3
 801262a:	f003 030f 	and.w	r3, r3, #15
 801262e:	b25b      	sxtb	r3, r3
 8012630:	4313      	orrs	r3, r2
 8012632:	b25b      	sxtb	r3, r3
 8012634:	b2db      	uxtb	r3, r3
 8012636:	697a      	ldr	r2, [r7, #20]
 8012638:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	2201      	movs	r2, #1
 801263e:	70da      	strb	r2, [r3, #3]
			break;
 8012640:	e057      	b.n	80126f2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	6a1a      	ldr	r2, [r3, #32]
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	0a1b      	lsrs	r3, r3, #8
 801264a:	4413      	add	r3, r2
 801264c:	4619      	mov	r1, r3
 801264e:	68f8      	ldr	r0, [r7, #12]
 8012650:	f7ff fe08 	bl	8012264 <move_window>
 8012654:	4603      	mov	r3, r0
 8012656:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012658:	7ffb      	ldrb	r3, [r7, #31]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d146      	bne.n	80126ec <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	005b      	lsls	r3, r3, #1
 8012668:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801266c:	4413      	add	r3, r2
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	b292      	uxth	r2, r2
 8012672:	4611      	mov	r1, r2
 8012674:	4618      	mov	r0, r3
 8012676:	f7ff fb80 	bl	8011d7a <st_word>
			fs->wflag = 1;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	2201      	movs	r2, #1
 801267e:	70da      	strb	r2, [r3, #3]
			break;
 8012680:	e037      	b.n	80126f2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	6a1a      	ldr	r2, [r3, #32]
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	09db      	lsrs	r3, r3, #7
 801268a:	4413      	add	r3, r2
 801268c:	4619      	mov	r1, r3
 801268e:	68f8      	ldr	r0, [r7, #12]
 8012690:	f7ff fde8 	bl	8012264 <move_window>
 8012694:	4603      	mov	r3, r0
 8012696:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012698:	7ffb      	ldrb	r3, [r7, #31]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d128      	bne.n	80126f0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	009b      	lsls	r3, r3, #2
 80126ae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80126b2:	4413      	add	r3, r2
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7ff fb3d 	bl	8011d34 <ld_dword>
 80126ba:	4603      	mov	r3, r0
 80126bc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80126c0:	4323      	orrs	r3, r4
 80126c2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	009b      	lsls	r3, r3, #2
 80126ce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80126d2:	4413      	add	r3, r2
 80126d4:	6879      	ldr	r1, [r7, #4]
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7ff fb6a 	bl	8011db0 <st_dword>
			fs->wflag = 1;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	2201      	movs	r2, #1
 80126e0:	70da      	strb	r2, [r3, #3]
			break;
 80126e2:	e006      	b.n	80126f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80126e4:	bf00      	nop
 80126e6:	e004      	b.n	80126f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80126e8:	bf00      	nop
 80126ea:	e002      	b.n	80126f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80126ec:	bf00      	nop
 80126ee:	e000      	b.n	80126f2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80126f0:	bf00      	nop
		}
	}
	return res;
 80126f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3724      	adds	r7, #36	@ 0x24
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd90      	pop	{r4, r7, pc}

080126fc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b088      	sub	sp, #32
 8012700:	af00      	add	r7, sp, #0
 8012702:	60f8      	str	r0, [r7, #12]
 8012704:	60b9      	str	r1, [r7, #8]
 8012706:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012708:	2300      	movs	r3, #0
 801270a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	2b01      	cmp	r3, #1
 8012716:	d904      	bls.n	8012722 <remove_chain+0x26>
 8012718:	69bb      	ldr	r3, [r7, #24]
 801271a:	695b      	ldr	r3, [r3, #20]
 801271c:	68ba      	ldr	r2, [r7, #8]
 801271e:	429a      	cmp	r2, r3
 8012720:	d301      	bcc.n	8012726 <remove_chain+0x2a>
 8012722:	2302      	movs	r3, #2
 8012724:	e04b      	b.n	80127be <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d00c      	beq.n	8012746 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801272c:	f04f 32ff 	mov.w	r2, #4294967295
 8012730:	6879      	ldr	r1, [r7, #4]
 8012732:	69b8      	ldr	r0, [r7, #24]
 8012734:	f7ff fef8 	bl	8012528 <put_fat>
 8012738:	4603      	mov	r3, r0
 801273a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801273c:	7ffb      	ldrb	r3, [r7, #31]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d001      	beq.n	8012746 <remove_chain+0x4a>
 8012742:	7ffb      	ldrb	r3, [r7, #31]
 8012744:	e03b      	b.n	80127be <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012746:	68b9      	ldr	r1, [r7, #8]
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	f7ff fe46 	bl	80123da <get_fat>
 801274e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d031      	beq.n	80127ba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	2b01      	cmp	r3, #1
 801275a:	d101      	bne.n	8012760 <remove_chain+0x64>
 801275c:	2302      	movs	r3, #2
 801275e:	e02e      	b.n	80127be <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012766:	d101      	bne.n	801276c <remove_chain+0x70>
 8012768:	2301      	movs	r3, #1
 801276a:	e028      	b.n	80127be <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801276c:	2200      	movs	r2, #0
 801276e:	68b9      	ldr	r1, [r7, #8]
 8012770:	69b8      	ldr	r0, [r7, #24]
 8012772:	f7ff fed9 	bl	8012528 <put_fat>
 8012776:	4603      	mov	r3, r0
 8012778:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801277a:	7ffb      	ldrb	r3, [r7, #31]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d001      	beq.n	8012784 <remove_chain+0x88>
 8012780:	7ffb      	ldrb	r3, [r7, #31]
 8012782:	e01c      	b.n	80127be <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012784:	69bb      	ldr	r3, [r7, #24]
 8012786:	691a      	ldr	r2, [r3, #16]
 8012788:	69bb      	ldr	r3, [r7, #24]
 801278a:	695b      	ldr	r3, [r3, #20]
 801278c:	3b02      	subs	r3, #2
 801278e:	429a      	cmp	r2, r3
 8012790:	d20b      	bcs.n	80127aa <remove_chain+0xae>
			fs->free_clst++;
 8012792:	69bb      	ldr	r3, [r7, #24]
 8012794:	691b      	ldr	r3, [r3, #16]
 8012796:	1c5a      	adds	r2, r3, #1
 8012798:	69bb      	ldr	r3, [r7, #24]
 801279a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801279c:	69bb      	ldr	r3, [r7, #24]
 801279e:	791b      	ldrb	r3, [r3, #4]
 80127a0:	f043 0301 	orr.w	r3, r3, #1
 80127a4:	b2da      	uxtb	r2, r3
 80127a6:	69bb      	ldr	r3, [r7, #24]
 80127a8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	695b      	ldr	r3, [r3, #20]
 80127b2:	68ba      	ldr	r2, [r7, #8]
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d3c6      	bcc.n	8012746 <remove_chain+0x4a>
 80127b8:	e000      	b.n	80127bc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80127ba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80127bc:	2300      	movs	r3, #0
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3720      	adds	r7, #32
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}

080127c6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80127c6:	b580      	push	{r7, lr}
 80127c8:	b088      	sub	sp, #32
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	6078      	str	r0, [r7, #4]
 80127ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d10d      	bne.n	80127f8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80127e2:	69bb      	ldr	r3, [r7, #24]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d004      	beq.n	80127f2 <create_chain+0x2c>
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	695b      	ldr	r3, [r3, #20]
 80127ec:	69ba      	ldr	r2, [r7, #24]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d31b      	bcc.n	801282a <create_chain+0x64>
 80127f2:	2301      	movs	r3, #1
 80127f4:	61bb      	str	r3, [r7, #24]
 80127f6:	e018      	b.n	801282a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80127f8:	6839      	ldr	r1, [r7, #0]
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f7ff fded 	bl	80123da <get_fat>
 8012800:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2b01      	cmp	r3, #1
 8012806:	d801      	bhi.n	801280c <create_chain+0x46>
 8012808:	2301      	movs	r3, #1
 801280a:	e070      	b.n	80128ee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012812:	d101      	bne.n	8012818 <create_chain+0x52>
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	e06a      	b.n	80128ee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	695b      	ldr	r3, [r3, #20]
 801281c:	68fa      	ldr	r2, [r7, #12]
 801281e:	429a      	cmp	r2, r3
 8012820:	d201      	bcs.n	8012826 <create_chain+0x60>
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	e063      	b.n	80128ee <create_chain+0x128>
		scl = clst;
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801282a:	69bb      	ldr	r3, [r7, #24]
 801282c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801282e:	69fb      	ldr	r3, [r7, #28]
 8012830:	3301      	adds	r3, #1
 8012832:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	695b      	ldr	r3, [r3, #20]
 8012838:	69fa      	ldr	r2, [r7, #28]
 801283a:	429a      	cmp	r2, r3
 801283c:	d307      	bcc.n	801284e <create_chain+0x88>
				ncl = 2;
 801283e:	2302      	movs	r3, #2
 8012840:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012842:	69fa      	ldr	r2, [r7, #28]
 8012844:	69bb      	ldr	r3, [r7, #24]
 8012846:	429a      	cmp	r2, r3
 8012848:	d901      	bls.n	801284e <create_chain+0x88>
 801284a:	2300      	movs	r3, #0
 801284c:	e04f      	b.n	80128ee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801284e:	69f9      	ldr	r1, [r7, #28]
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f7ff fdc2 	bl	80123da <get_fat>
 8012856:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d00e      	beq.n	801287c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	2b01      	cmp	r3, #1
 8012862:	d003      	beq.n	801286c <create_chain+0xa6>
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801286a:	d101      	bne.n	8012870 <create_chain+0xaa>
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	e03e      	b.n	80128ee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012870:	69fa      	ldr	r2, [r7, #28]
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	429a      	cmp	r2, r3
 8012876:	d1da      	bne.n	801282e <create_chain+0x68>
 8012878:	2300      	movs	r3, #0
 801287a:	e038      	b.n	80128ee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801287c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801287e:	f04f 32ff 	mov.w	r2, #4294967295
 8012882:	69f9      	ldr	r1, [r7, #28]
 8012884:	6938      	ldr	r0, [r7, #16]
 8012886:	f7ff fe4f 	bl	8012528 <put_fat>
 801288a:	4603      	mov	r3, r0
 801288c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801288e:	7dfb      	ldrb	r3, [r7, #23]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d109      	bne.n	80128a8 <create_chain+0xe2>
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d006      	beq.n	80128a8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801289a:	69fa      	ldr	r2, [r7, #28]
 801289c:	6839      	ldr	r1, [r7, #0]
 801289e:	6938      	ldr	r0, [r7, #16]
 80128a0:	f7ff fe42 	bl	8012528 <put_fat>
 80128a4:	4603      	mov	r3, r0
 80128a6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80128a8:	7dfb      	ldrb	r3, [r7, #23]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d116      	bne.n	80128dc <create_chain+0x116>
		fs->last_clst = ncl;
 80128ae:	693b      	ldr	r3, [r7, #16]
 80128b0:	69fa      	ldr	r2, [r7, #28]
 80128b2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	691a      	ldr	r2, [r3, #16]
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	695b      	ldr	r3, [r3, #20]
 80128bc:	3b02      	subs	r3, #2
 80128be:	429a      	cmp	r2, r3
 80128c0:	d804      	bhi.n	80128cc <create_chain+0x106>
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	691b      	ldr	r3, [r3, #16]
 80128c6:	1e5a      	subs	r2, r3, #1
 80128c8:	693b      	ldr	r3, [r7, #16]
 80128ca:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	791b      	ldrb	r3, [r3, #4]
 80128d0:	f043 0301 	orr.w	r3, r3, #1
 80128d4:	b2da      	uxtb	r2, r3
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	711a      	strb	r2, [r3, #4]
 80128da:	e007      	b.n	80128ec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80128dc:	7dfb      	ldrb	r3, [r7, #23]
 80128de:	2b01      	cmp	r3, #1
 80128e0:	d102      	bne.n	80128e8 <create_chain+0x122>
 80128e2:	f04f 33ff 	mov.w	r3, #4294967295
 80128e6:	e000      	b.n	80128ea <create_chain+0x124>
 80128e8:	2301      	movs	r3, #1
 80128ea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80128ec:	69fb      	ldr	r3, [r7, #28]
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3720      	adds	r7, #32
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}

080128f6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80128f6:	b480      	push	{r7}
 80128f8:	b087      	sub	sp, #28
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	6078      	str	r0, [r7, #4]
 80128fe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801290a:	3304      	adds	r3, #4
 801290c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	0a5b      	lsrs	r3, r3, #9
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	8952      	ldrh	r2, [r2, #10]
 8012916:	fbb3 f3f2 	udiv	r3, r3, r2
 801291a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801291c:	693b      	ldr	r3, [r7, #16]
 801291e:	1d1a      	adds	r2, r3, #4
 8012920:	613a      	str	r2, [r7, #16]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d101      	bne.n	8012930 <clmt_clust+0x3a>
 801292c:	2300      	movs	r3, #0
 801292e:	e010      	b.n	8012952 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012930:	697a      	ldr	r2, [r7, #20]
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	429a      	cmp	r2, r3
 8012936:	d307      	bcc.n	8012948 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012938:	697a      	ldr	r2, [r7, #20]
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	1ad3      	subs	r3, r2, r3
 801293e:	617b      	str	r3, [r7, #20]
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	3304      	adds	r3, #4
 8012944:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012946:	e7e9      	b.n	801291c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012948:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801294a:	693b      	ldr	r3, [r7, #16]
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	4413      	add	r3, r2
}
 8012952:	4618      	mov	r0, r3
 8012954:	371c      	adds	r7, #28
 8012956:	46bd      	mov	sp, r7
 8012958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295c:	4770      	bx	lr

0801295e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801295e:	b580      	push	{r7, lr}
 8012960:	b086      	sub	sp, #24
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]
 8012966:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012974:	d204      	bcs.n	8012980 <dir_sdi+0x22>
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	f003 031f 	and.w	r3, r3, #31
 801297c:	2b00      	cmp	r3, #0
 801297e:	d001      	beq.n	8012984 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012980:	2302      	movs	r3, #2
 8012982:	e063      	b.n	8012a4c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	683a      	ldr	r2, [r7, #0]
 8012988:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d106      	bne.n	80129a4 <dir_sdi+0x46>
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	2b02      	cmp	r3, #2
 801299c:	d902      	bls.n	80129a4 <dir_sdi+0x46>
		clst = fs->dirbase;
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129a2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d10c      	bne.n	80129c4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	095b      	lsrs	r3, r3, #5
 80129ae:	693a      	ldr	r2, [r7, #16]
 80129b0:	8912      	ldrh	r2, [r2, #8]
 80129b2:	4293      	cmp	r3, r2
 80129b4:	d301      	bcc.n	80129ba <dir_sdi+0x5c>
 80129b6:	2302      	movs	r3, #2
 80129b8:	e048      	b.n	8012a4c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	61da      	str	r2, [r3, #28]
 80129c2:	e029      	b.n	8012a18 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	895b      	ldrh	r3, [r3, #10]
 80129c8:	025b      	lsls	r3, r3, #9
 80129ca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80129cc:	e019      	b.n	8012a02 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6979      	ldr	r1, [r7, #20]
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7ff fd01 	bl	80123da <get_fat>
 80129d8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129e0:	d101      	bne.n	80129e6 <dir_sdi+0x88>
 80129e2:	2301      	movs	r3, #1
 80129e4:	e032      	b.n	8012a4c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	2b01      	cmp	r3, #1
 80129ea:	d904      	bls.n	80129f6 <dir_sdi+0x98>
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	695b      	ldr	r3, [r3, #20]
 80129f0:	697a      	ldr	r2, [r7, #20]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d301      	bcc.n	80129fa <dir_sdi+0x9c>
 80129f6:	2302      	movs	r3, #2
 80129f8:	e028      	b.n	8012a4c <dir_sdi+0xee>
			ofs -= csz;
 80129fa:	683a      	ldr	r2, [r7, #0]
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	1ad3      	subs	r3, r2, r3
 8012a00:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012a02:	683a      	ldr	r2, [r7, #0]
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d2e1      	bcs.n	80129ce <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012a0a:	6979      	ldr	r1, [r7, #20]
 8012a0c:	6938      	ldr	r0, [r7, #16]
 8012a0e:	f7ff fcc5 	bl	801239c <clust2sect>
 8012a12:	4602      	mov	r2, r0
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	697a      	ldr	r2, [r7, #20]
 8012a1c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	69db      	ldr	r3, [r3, #28]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d101      	bne.n	8012a2a <dir_sdi+0xcc>
 8012a26:	2302      	movs	r3, #2
 8012a28:	e010      	b.n	8012a4c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	69da      	ldr	r2, [r3, #28]
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	0a5b      	lsrs	r3, r3, #9
 8012a32:	441a      	add	r2, r3
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012a38:	693b      	ldr	r3, [r7, #16]
 8012a3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a44:	441a      	add	r2, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012a4a:	2300      	movs	r3, #0
}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3718      	adds	r7, #24
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}

08012a54 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b086      	sub	sp, #24
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	695b      	ldr	r3, [r3, #20]
 8012a68:	3320      	adds	r3, #32
 8012a6a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	69db      	ldr	r3, [r3, #28]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d003      	beq.n	8012a7c <dir_next+0x28>
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012a7a:	d301      	bcc.n	8012a80 <dir_next+0x2c>
 8012a7c:	2304      	movs	r3, #4
 8012a7e:	e0aa      	b.n	8012bd6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	f040 8098 	bne.w	8012bbc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	69db      	ldr	r3, [r3, #28]
 8012a90:	1c5a      	adds	r2, r3, #1
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	699b      	ldr	r3, [r3, #24]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d10b      	bne.n	8012ab6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	095b      	lsrs	r3, r3, #5
 8012aa2:	68fa      	ldr	r2, [r7, #12]
 8012aa4:	8912      	ldrh	r2, [r2, #8]
 8012aa6:	4293      	cmp	r3, r2
 8012aa8:	f0c0 8088 	bcc.w	8012bbc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	61da      	str	r2, [r3, #28]
 8012ab2:	2304      	movs	r3, #4
 8012ab4:	e08f      	b.n	8012bd6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	0a5b      	lsrs	r3, r3, #9
 8012aba:	68fa      	ldr	r2, [r7, #12]
 8012abc:	8952      	ldrh	r2, [r2, #10]
 8012abe:	3a01      	subs	r2, #1
 8012ac0:	4013      	ands	r3, r2
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d17a      	bne.n	8012bbc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012ac6:	687a      	ldr	r2, [r7, #4]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	699b      	ldr	r3, [r3, #24]
 8012acc:	4619      	mov	r1, r3
 8012ace:	4610      	mov	r0, r2
 8012ad0:	f7ff fc83 	bl	80123da <get_fat>
 8012ad4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	d801      	bhi.n	8012ae0 <dir_next+0x8c>
 8012adc:	2302      	movs	r3, #2
 8012ade:	e07a      	b.n	8012bd6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ae6:	d101      	bne.n	8012aec <dir_next+0x98>
 8012ae8:	2301      	movs	r3, #1
 8012aea:	e074      	b.n	8012bd6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	695b      	ldr	r3, [r3, #20]
 8012af0:	697a      	ldr	r2, [r7, #20]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d358      	bcc.n	8012ba8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d104      	bne.n	8012b06 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2200      	movs	r2, #0
 8012b00:	61da      	str	r2, [r3, #28]
 8012b02:	2304      	movs	r3, #4
 8012b04:	e067      	b.n	8012bd6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012b06:	687a      	ldr	r2, [r7, #4]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	699b      	ldr	r3, [r3, #24]
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	4610      	mov	r0, r2
 8012b10:	f7ff fe59 	bl	80127c6 <create_chain>
 8012b14:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d101      	bne.n	8012b20 <dir_next+0xcc>
 8012b1c:	2307      	movs	r3, #7
 8012b1e:	e05a      	b.n	8012bd6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	2b01      	cmp	r3, #1
 8012b24:	d101      	bne.n	8012b2a <dir_next+0xd6>
 8012b26:	2302      	movs	r3, #2
 8012b28:	e055      	b.n	8012bd6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b30:	d101      	bne.n	8012b36 <dir_next+0xe2>
 8012b32:	2301      	movs	r3, #1
 8012b34:	e04f      	b.n	8012bd6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012b36:	68f8      	ldr	r0, [r7, #12]
 8012b38:	f7ff fb50 	bl	80121dc <sync_window>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d001      	beq.n	8012b46 <dir_next+0xf2>
 8012b42:	2301      	movs	r3, #1
 8012b44:	e047      	b.n	8012bd6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	3330      	adds	r3, #48	@ 0x30
 8012b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b4e:	2100      	movs	r1, #0
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7ff f97a 	bl	8011e4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012b56:	2300      	movs	r3, #0
 8012b58:	613b      	str	r3, [r7, #16]
 8012b5a:	6979      	ldr	r1, [r7, #20]
 8012b5c:	68f8      	ldr	r0, [r7, #12]
 8012b5e:	f7ff fc1d 	bl	801239c <clust2sect>
 8012b62:	4602      	mov	r2, r0
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012b68:	e012      	b.n	8012b90 <dir_next+0x13c>
						fs->wflag = 1;
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	2201      	movs	r2, #1
 8012b6e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012b70:	68f8      	ldr	r0, [r7, #12]
 8012b72:	f7ff fb33 	bl	80121dc <sync_window>
 8012b76:	4603      	mov	r3, r0
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d001      	beq.n	8012b80 <dir_next+0x12c>
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	e02a      	b.n	8012bd6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	3301      	adds	r3, #1
 8012b84:	613b      	str	r3, [r7, #16]
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b8a:	1c5a      	adds	r2, r3, #1
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	895b      	ldrh	r3, [r3, #10]
 8012b94:	461a      	mov	r2, r3
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d3e6      	bcc.n	8012b6a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	1ad2      	subs	r2, r2, r3
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	697a      	ldr	r2, [r7, #20]
 8012bac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012bae:	6979      	ldr	r1, [r7, #20]
 8012bb0:	68f8      	ldr	r0, [r7, #12]
 8012bb2:	f7ff fbf3 	bl	801239c <clust2sect>
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	68ba      	ldr	r2, [r7, #8]
 8012bc0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bce:	441a      	add	r2, r3
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012bd4:	2300      	movs	r3, #0
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3718      	adds	r7, #24
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b086      	sub	sp, #24
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
 8012be6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012bee:	2100      	movs	r1, #0
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f7ff feb4 	bl	801295e <dir_sdi>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012bfa:	7dfb      	ldrb	r3, [r7, #23]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d12b      	bne.n	8012c58 <dir_alloc+0x7a>
		n = 0;
 8012c00:	2300      	movs	r3, #0
 8012c02:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	69db      	ldr	r3, [r3, #28]
 8012c08:	4619      	mov	r1, r3
 8012c0a:	68f8      	ldr	r0, [r7, #12]
 8012c0c:	f7ff fb2a 	bl	8012264 <move_window>
 8012c10:	4603      	mov	r3, r0
 8012c12:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c14:	7dfb      	ldrb	r3, [r7, #23]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d11d      	bne.n	8012c56 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6a1b      	ldr	r3, [r3, #32]
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	2be5      	cmp	r3, #229	@ 0xe5
 8012c22:	d004      	beq.n	8012c2e <dir_alloc+0x50>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	6a1b      	ldr	r3, [r3, #32]
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d107      	bne.n	8012c3e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	3301      	adds	r3, #1
 8012c32:	613b      	str	r3, [r7, #16]
 8012c34:	693a      	ldr	r2, [r7, #16]
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d102      	bne.n	8012c42 <dir_alloc+0x64>
 8012c3c:	e00c      	b.n	8012c58 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012c3e:	2300      	movs	r3, #0
 8012c40:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012c42:	2101      	movs	r1, #1
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f7ff ff05 	bl	8012a54 <dir_next>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012c4e:	7dfb      	ldrb	r3, [r7, #23]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d0d7      	beq.n	8012c04 <dir_alloc+0x26>
 8012c54:	e000      	b.n	8012c58 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012c56:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012c58:	7dfb      	ldrb	r3, [r7, #23]
 8012c5a:	2b04      	cmp	r3, #4
 8012c5c:	d101      	bne.n	8012c62 <dir_alloc+0x84>
 8012c5e:	2307      	movs	r3, #7
 8012c60:	75fb      	strb	r3, [r7, #23]
	return res;
 8012c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	3718      	adds	r7, #24
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}

08012c6c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	331a      	adds	r3, #26
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7ff f842 	bl	8011d04 <ld_word>
 8012c80:	4603      	mov	r3, r0
 8012c82:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	781b      	ldrb	r3, [r3, #0]
 8012c88:	2b03      	cmp	r3, #3
 8012c8a:	d109      	bne.n	8012ca0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	3314      	adds	r3, #20
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7ff f837 	bl	8011d04 <ld_word>
 8012c96:	4603      	mov	r3, r0
 8012c98:	041b      	lsls	r3, r3, #16
 8012c9a:	68fa      	ldr	r2, [r7, #12]
 8012c9c:	4313      	orrs	r3, r2
 8012c9e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3710      	adds	r7, #16
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}

08012caa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012caa:	b580      	push	{r7, lr}
 8012cac:	b084      	sub	sp, #16
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	60f8      	str	r0, [r7, #12]
 8012cb2:	60b9      	str	r1, [r7, #8]
 8012cb4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012cb6:	68bb      	ldr	r3, [r7, #8]
 8012cb8:	331a      	adds	r3, #26
 8012cba:	687a      	ldr	r2, [r7, #4]
 8012cbc:	b292      	uxth	r2, r2
 8012cbe:	4611      	mov	r1, r2
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7ff f85a 	bl	8011d7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	2b03      	cmp	r3, #3
 8012ccc:	d109      	bne.n	8012ce2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	f103 0214 	add.w	r2, r3, #20
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	0c1b      	lsrs	r3, r3, #16
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	4619      	mov	r1, r3
 8012cdc:	4610      	mov	r0, r2
 8012cde:	f7ff f84c 	bl	8011d7a <st_word>
	}
}
 8012ce2:	bf00      	nop
 8012ce4:	3710      	adds	r7, #16
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}

08012cea <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012cea:	b580      	push	{r7, lr}
 8012cec:	b086      	sub	sp, #24
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
 8012cf2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012cf4:	2304      	movs	r3, #4
 8012cf6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012cfe:	e03c      	b.n	8012d7a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	69db      	ldr	r3, [r3, #28]
 8012d04:	4619      	mov	r1, r3
 8012d06:	6938      	ldr	r0, [r7, #16]
 8012d08:	f7ff faac 	bl	8012264 <move_window>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012d10:	7dfb      	ldrb	r3, [r7, #23]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d136      	bne.n	8012d84 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6a1b      	ldr	r3, [r3, #32]
 8012d1a:	781b      	ldrb	r3, [r3, #0]
 8012d1c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012d1e:	7bfb      	ldrb	r3, [r7, #15]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d102      	bne.n	8012d2a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012d24:	2304      	movs	r3, #4
 8012d26:	75fb      	strb	r3, [r7, #23]
 8012d28:	e031      	b.n	8012d8e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6a1b      	ldr	r3, [r3, #32]
 8012d2e:	330b      	adds	r3, #11
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012d36:	73bb      	strb	r3, [r7, #14]
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	7bba      	ldrb	r2, [r7, #14]
 8012d3c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012d3e:	7bfb      	ldrb	r3, [r7, #15]
 8012d40:	2be5      	cmp	r3, #229	@ 0xe5
 8012d42:	d011      	beq.n	8012d68 <dir_read+0x7e>
 8012d44:	7bfb      	ldrb	r3, [r7, #15]
 8012d46:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d48:	d00e      	beq.n	8012d68 <dir_read+0x7e>
 8012d4a:	7bbb      	ldrb	r3, [r7, #14]
 8012d4c:	2b0f      	cmp	r3, #15
 8012d4e:	d00b      	beq.n	8012d68 <dir_read+0x7e>
 8012d50:	7bbb      	ldrb	r3, [r7, #14]
 8012d52:	f023 0320 	bic.w	r3, r3, #32
 8012d56:	2b08      	cmp	r3, #8
 8012d58:	bf0c      	ite	eq
 8012d5a:	2301      	moveq	r3, #1
 8012d5c:	2300      	movne	r3, #0
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	461a      	mov	r2, r3
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	4293      	cmp	r3, r2
 8012d66:	d00f      	beq.n	8012d88 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012d68:	2100      	movs	r1, #0
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f7ff fe72 	bl	8012a54 <dir_next>
 8012d70:	4603      	mov	r3, r0
 8012d72:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d108      	bne.n	8012d8c <dir_read+0xa2>
	while (dp->sect) {
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	69db      	ldr	r3, [r3, #28]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d1be      	bne.n	8012d00 <dir_read+0x16>
 8012d82:	e004      	b.n	8012d8e <dir_read+0xa4>
		if (res != FR_OK) break;
 8012d84:	bf00      	nop
 8012d86:	e002      	b.n	8012d8e <dir_read+0xa4>
				break;
 8012d88:	bf00      	nop
 8012d8a:	e000      	b.n	8012d8e <dir_read+0xa4>
		if (res != FR_OK) break;
 8012d8c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012d8e:	7dfb      	ldrb	r3, [r7, #23]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d002      	beq.n	8012d9a <dir_read+0xb0>
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2200      	movs	r2, #0
 8012d98:	61da      	str	r2, [r3, #28]
	return res;
 8012d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3718      	adds	r7, #24
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b086      	sub	sp, #24
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012db2:	2100      	movs	r1, #0
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff fdd2 	bl	801295e <dir_sdi>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012dbe:	7dfb      	ldrb	r3, [r7, #23]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d001      	beq.n	8012dc8 <dir_find+0x24>
 8012dc4:	7dfb      	ldrb	r3, [r7, #23]
 8012dc6:	e03e      	b.n	8012e46 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	69db      	ldr	r3, [r3, #28]
 8012dcc:	4619      	mov	r1, r3
 8012dce:	6938      	ldr	r0, [r7, #16]
 8012dd0:	f7ff fa48 	bl	8012264 <move_window>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012dd8:	7dfb      	ldrb	r3, [r7, #23]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d12f      	bne.n	8012e3e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	6a1b      	ldr	r3, [r3, #32]
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012de6:	7bfb      	ldrb	r3, [r7, #15]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d102      	bne.n	8012df2 <dir_find+0x4e>
 8012dec:	2304      	movs	r3, #4
 8012dee:	75fb      	strb	r3, [r7, #23]
 8012df0:	e028      	b.n	8012e44 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6a1b      	ldr	r3, [r3, #32]
 8012df6:	330b      	adds	r3, #11
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012dfe:	b2da      	uxtb	r2, r3
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6a1b      	ldr	r3, [r3, #32]
 8012e08:	330b      	adds	r3, #11
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	f003 0308 	and.w	r3, r3, #8
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d10a      	bne.n	8012e2a <dir_find+0x86>
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6a18      	ldr	r0, [r3, #32]
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	3324      	adds	r3, #36	@ 0x24
 8012e1c:	220b      	movs	r2, #11
 8012e1e:	4619      	mov	r1, r3
 8012e20:	f7ff f82e 	bl	8011e80 <mem_cmp>
 8012e24:	4603      	mov	r3, r0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d00b      	beq.n	8012e42 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012e2a:	2100      	movs	r1, #0
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f7ff fe11 	bl	8012a54 <dir_next>
 8012e32:	4603      	mov	r3, r0
 8012e34:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012e36:	7dfb      	ldrb	r3, [r7, #23]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d0c5      	beq.n	8012dc8 <dir_find+0x24>
 8012e3c:	e002      	b.n	8012e44 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012e3e:	bf00      	nop
 8012e40:	e000      	b.n	8012e44 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012e42:	bf00      	nop

	return res;
 8012e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3718      	adds	r7, #24
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}

08012e4e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012e4e:	b580      	push	{r7, lr}
 8012e50:	b084      	sub	sp, #16
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012e5c:	2101      	movs	r1, #1
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f7ff febd 	bl	8012bde <dir_alloc>
 8012e64:	4603      	mov	r3, r0
 8012e66:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012e68:	7bfb      	ldrb	r3, [r7, #15]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d11c      	bne.n	8012ea8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	69db      	ldr	r3, [r3, #28]
 8012e72:	4619      	mov	r1, r3
 8012e74:	68b8      	ldr	r0, [r7, #8]
 8012e76:	f7ff f9f5 	bl	8012264 <move_window>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012e7e:	7bfb      	ldrb	r3, [r7, #15]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d111      	bne.n	8012ea8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6a1b      	ldr	r3, [r3, #32]
 8012e88:	2220      	movs	r2, #32
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7fe ffdc 	bl	8011e4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6a18      	ldr	r0, [r3, #32]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	3324      	adds	r3, #36	@ 0x24
 8012e9a:	220b      	movs	r2, #11
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	f7fe ffb3 	bl	8011e08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	2201      	movs	r2, #1
 8012ea6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3710      	adds	r7, #16
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}

08012eb2 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012eb2:	b580      	push	{r7, lr}
 8012eb4:	b084      	sub	sp, #16
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	69db      	ldr	r3, [r3, #28]
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	68f8      	ldr	r0, [r7, #12]
 8012ec8:	f7ff f9cc 	bl	8012264 <move_window>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012ed0:	7afb      	ldrb	r3, [r7, #11]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d106      	bne.n	8012ee4 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6a1b      	ldr	r3, [r3, #32]
 8012eda:	22e5      	movs	r2, #229	@ 0xe5
 8012edc:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012ee4:	7afb      	ldrb	r3, [r7, #11]
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3710      	adds	r7, #16
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}

08012eee <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012eee:	b580      	push	{r7, lr}
 8012ef0:	b086      	sub	sp, #24
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	6078      	str	r0, [r7, #4]
 8012ef6:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	2200      	movs	r2, #0
 8012efc:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	69db      	ldr	r3, [r3, #28]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d04f      	beq.n	8012fa6 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012f06:	2300      	movs	r3, #0
 8012f08:	613b      	str	r3, [r7, #16]
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012f0e:	e022      	b.n	8012f56 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6a1a      	ldr	r2, [r3, #32]
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	1c59      	adds	r1, r3, #1
 8012f18:	6179      	str	r1, [r7, #20]
 8012f1a:	4413      	add	r3, r2
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012f20:	7bfb      	ldrb	r3, [r7, #15]
 8012f22:	2b20      	cmp	r3, #32
 8012f24:	d016      	beq.n	8012f54 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012f26:	7bfb      	ldrb	r3, [r7, #15]
 8012f28:	2b05      	cmp	r3, #5
 8012f2a:	d101      	bne.n	8012f30 <get_fileinfo+0x42>
 8012f2c:	23e5      	movs	r3, #229	@ 0xe5
 8012f2e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	2b09      	cmp	r3, #9
 8012f34:	d106      	bne.n	8012f44 <get_fileinfo+0x56>
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	1c5a      	adds	r2, r3, #1
 8012f3a:	613a      	str	r2, [r7, #16]
 8012f3c:	683a      	ldr	r2, [r7, #0]
 8012f3e:	4413      	add	r3, r2
 8012f40:	222e      	movs	r2, #46	@ 0x2e
 8012f42:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	1c5a      	adds	r2, r3, #1
 8012f48:	613a      	str	r2, [r7, #16]
 8012f4a:	683a      	ldr	r2, [r7, #0]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	7bfa      	ldrb	r2, [r7, #15]
 8012f50:	725a      	strb	r2, [r3, #9]
 8012f52:	e000      	b.n	8012f56 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8012f54:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	2b0a      	cmp	r3, #10
 8012f5a:	d9d9      	bls.n	8012f10 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8012f5c:	683a      	ldr	r2, [r7, #0]
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	4413      	add	r3, r2
 8012f62:	3309      	adds	r3, #9
 8012f64:	2200      	movs	r2, #0
 8012f66:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	6a1b      	ldr	r3, [r3, #32]
 8012f6c:	7ada      	ldrb	r2, [r3, #11]
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6a1b      	ldr	r3, [r3, #32]
 8012f76:	331c      	adds	r3, #28
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fe fedb 	bl	8011d34 <ld_dword>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6a1b      	ldr	r3, [r3, #32]
 8012f88:	3316      	adds	r3, #22
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7fe fed2 	bl	8011d34 <ld_dword>
 8012f90:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	80da      	strh	r2, [r3, #6]
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	0c1b      	lsrs	r3, r3, #16
 8012f9e:	b29a      	uxth	r2, r3
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	809a      	strh	r2, [r3, #4]
 8012fa4:	e000      	b.n	8012fa8 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012fa6:	bf00      	nop
}
 8012fa8:	3718      	adds	r7, #24
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}
	...

08012fb0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b088      	sub	sp, #32
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	60fb      	str	r3, [r7, #12]
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	3324      	adds	r3, #36	@ 0x24
 8012fc4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012fc6:	220b      	movs	r2, #11
 8012fc8:	2120      	movs	r1, #32
 8012fca:	68b8      	ldr	r0, [r7, #8]
 8012fcc:	f7fe ff3d 	bl	8011e4a <mem_set>
	si = i = 0; ni = 8;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	613b      	str	r3, [r7, #16]
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	61fb      	str	r3, [r7, #28]
 8012fd8:	2308      	movs	r3, #8
 8012fda:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012fdc:	69fb      	ldr	r3, [r7, #28]
 8012fde:	1c5a      	adds	r2, r3, #1
 8012fe0:	61fa      	str	r2, [r7, #28]
 8012fe2:	68fa      	ldr	r2, [r7, #12]
 8012fe4:	4413      	add	r3, r2
 8012fe6:	781b      	ldrb	r3, [r3, #0]
 8012fe8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012fea:	7efb      	ldrb	r3, [r7, #27]
 8012fec:	2b20      	cmp	r3, #32
 8012fee:	d94e      	bls.n	801308e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012ff0:	7efb      	ldrb	r3, [r7, #27]
 8012ff2:	2b2f      	cmp	r3, #47	@ 0x2f
 8012ff4:	d006      	beq.n	8013004 <create_name+0x54>
 8012ff6:	7efb      	ldrb	r3, [r7, #27]
 8012ff8:	2b5c      	cmp	r3, #92	@ 0x5c
 8012ffa:	d110      	bne.n	801301e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012ffc:	e002      	b.n	8013004 <create_name+0x54>
 8012ffe:	69fb      	ldr	r3, [r7, #28]
 8013000:	3301      	adds	r3, #1
 8013002:	61fb      	str	r3, [r7, #28]
 8013004:	68fa      	ldr	r2, [r7, #12]
 8013006:	69fb      	ldr	r3, [r7, #28]
 8013008:	4413      	add	r3, r2
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	2b2f      	cmp	r3, #47	@ 0x2f
 801300e:	d0f6      	beq.n	8012ffe <create_name+0x4e>
 8013010:	68fa      	ldr	r2, [r7, #12]
 8013012:	69fb      	ldr	r3, [r7, #28]
 8013014:	4413      	add	r3, r2
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	2b5c      	cmp	r3, #92	@ 0x5c
 801301a:	d0f0      	beq.n	8012ffe <create_name+0x4e>
			break;
 801301c:	e038      	b.n	8013090 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801301e:	7efb      	ldrb	r3, [r7, #27]
 8013020:	2b2e      	cmp	r3, #46	@ 0x2e
 8013022:	d003      	beq.n	801302c <create_name+0x7c>
 8013024:	693a      	ldr	r2, [r7, #16]
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	429a      	cmp	r2, r3
 801302a:	d30c      	bcc.n	8013046 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	2b0b      	cmp	r3, #11
 8013030:	d002      	beq.n	8013038 <create_name+0x88>
 8013032:	7efb      	ldrb	r3, [r7, #27]
 8013034:	2b2e      	cmp	r3, #46	@ 0x2e
 8013036:	d001      	beq.n	801303c <create_name+0x8c>
 8013038:	2306      	movs	r3, #6
 801303a:	e044      	b.n	80130c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801303c:	2308      	movs	r3, #8
 801303e:	613b      	str	r3, [r7, #16]
 8013040:	230b      	movs	r3, #11
 8013042:	617b      	str	r3, [r7, #20]
			continue;
 8013044:	e022      	b.n	801308c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013046:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801304a:	2b00      	cmp	r3, #0
 801304c:	da04      	bge.n	8013058 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801304e:	7efb      	ldrb	r3, [r7, #27]
 8013050:	3b80      	subs	r3, #128	@ 0x80
 8013052:	4a1f      	ldr	r2, [pc, #124]	@ (80130d0 <create_name+0x120>)
 8013054:	5cd3      	ldrb	r3, [r2, r3]
 8013056:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013058:	7efb      	ldrb	r3, [r7, #27]
 801305a:	4619      	mov	r1, r3
 801305c:	481d      	ldr	r0, [pc, #116]	@ (80130d4 <create_name+0x124>)
 801305e:	f7fe ff36 	bl	8011ece <chk_chr>
 8013062:	4603      	mov	r3, r0
 8013064:	2b00      	cmp	r3, #0
 8013066:	d001      	beq.n	801306c <create_name+0xbc>
 8013068:	2306      	movs	r3, #6
 801306a:	e02c      	b.n	80130c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801306c:	7efb      	ldrb	r3, [r7, #27]
 801306e:	2b60      	cmp	r3, #96	@ 0x60
 8013070:	d905      	bls.n	801307e <create_name+0xce>
 8013072:	7efb      	ldrb	r3, [r7, #27]
 8013074:	2b7a      	cmp	r3, #122	@ 0x7a
 8013076:	d802      	bhi.n	801307e <create_name+0xce>
 8013078:	7efb      	ldrb	r3, [r7, #27]
 801307a:	3b20      	subs	r3, #32
 801307c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	1c5a      	adds	r2, r3, #1
 8013082:	613a      	str	r2, [r7, #16]
 8013084:	68ba      	ldr	r2, [r7, #8]
 8013086:	4413      	add	r3, r2
 8013088:	7efa      	ldrb	r2, [r7, #27]
 801308a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801308c:	e7a6      	b.n	8012fdc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801308e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013090:	68fa      	ldr	r2, [r7, #12]
 8013092:	69fb      	ldr	r3, [r7, #28]
 8013094:	441a      	add	r2, r3
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d101      	bne.n	80130a4 <create_name+0xf4>
 80130a0:	2306      	movs	r3, #6
 80130a2:	e010      	b.n	80130c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	2be5      	cmp	r3, #229	@ 0xe5
 80130aa:	d102      	bne.n	80130b2 <create_name+0x102>
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	2205      	movs	r2, #5
 80130b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80130b2:	7efb      	ldrb	r3, [r7, #27]
 80130b4:	2b20      	cmp	r3, #32
 80130b6:	d801      	bhi.n	80130bc <create_name+0x10c>
 80130b8:	2204      	movs	r2, #4
 80130ba:	e000      	b.n	80130be <create_name+0x10e>
 80130bc:	2200      	movs	r2, #0
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	330b      	adds	r3, #11
 80130c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80130c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3720      	adds	r7, #32
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	08016df8 	.word	0x08016df8
 80130d4:	08016cd0 	.word	0x08016cd0

080130d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b086      	sub	sp, #24
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80130ec:	e002      	b.n	80130f4 <follow_path+0x1c>
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	3301      	adds	r3, #1
 80130f2:	603b      	str	r3, [r7, #0]
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80130fa:	d0f8      	beq.n	80130ee <follow_path+0x16>
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	781b      	ldrb	r3, [r3, #0]
 8013100:	2b5c      	cmp	r3, #92	@ 0x5c
 8013102:	d0f4      	beq.n	80130ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013104:	693b      	ldr	r3, [r7, #16]
 8013106:	2200      	movs	r2, #0
 8013108:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	2b1f      	cmp	r3, #31
 8013110:	d80a      	bhi.n	8013128 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2280      	movs	r2, #128	@ 0x80
 8013116:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801311a:	2100      	movs	r1, #0
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f7ff fc1e 	bl	801295e <dir_sdi>
 8013122:	4603      	mov	r3, r0
 8013124:	75fb      	strb	r3, [r7, #23]
 8013126:	e043      	b.n	80131b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013128:	463b      	mov	r3, r7
 801312a:	4619      	mov	r1, r3
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f7ff ff3f 	bl	8012fb0 <create_name>
 8013132:	4603      	mov	r3, r0
 8013134:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013136:	7dfb      	ldrb	r3, [r7, #23]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d134      	bne.n	80131a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801313c:	6878      	ldr	r0, [r7, #4]
 801313e:	f7ff fe31 	bl	8012da4 <dir_find>
 8013142:	4603      	mov	r3, r0
 8013144:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801314c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801314e:	7dfb      	ldrb	r3, [r7, #23]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d00a      	beq.n	801316a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013154:	7dfb      	ldrb	r3, [r7, #23]
 8013156:	2b04      	cmp	r3, #4
 8013158:	d127      	bne.n	80131aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801315a:	7afb      	ldrb	r3, [r7, #11]
 801315c:	f003 0304 	and.w	r3, r3, #4
 8013160:	2b00      	cmp	r3, #0
 8013162:	d122      	bne.n	80131aa <follow_path+0xd2>
 8013164:	2305      	movs	r3, #5
 8013166:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013168:	e01f      	b.n	80131aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801316a:	7afb      	ldrb	r3, [r7, #11]
 801316c:	f003 0304 	and.w	r3, r3, #4
 8013170:	2b00      	cmp	r3, #0
 8013172:	d11c      	bne.n	80131ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	799b      	ldrb	r3, [r3, #6]
 8013178:	f003 0310 	and.w	r3, r3, #16
 801317c:	2b00      	cmp	r3, #0
 801317e:	d102      	bne.n	8013186 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013180:	2305      	movs	r3, #5
 8013182:	75fb      	strb	r3, [r7, #23]
 8013184:	e014      	b.n	80131b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	695b      	ldr	r3, [r3, #20]
 8013190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013194:	4413      	add	r3, r2
 8013196:	4619      	mov	r1, r3
 8013198:	68f8      	ldr	r0, [r7, #12]
 801319a:	f7ff fd67 	bl	8012c6c <ld_clust>
 801319e:	4602      	mov	r2, r0
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80131a4:	e7c0      	b.n	8013128 <follow_path+0x50>
			if (res != FR_OK) break;
 80131a6:	bf00      	nop
 80131a8:	e002      	b.n	80131b0 <follow_path+0xd8>
				break;
 80131aa:	bf00      	nop
 80131ac:	e000      	b.n	80131b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80131ae:	bf00      	nop
			}
		}
	}

	return res;
 80131b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3718      	adds	r7, #24
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}

080131ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80131ba:	b480      	push	{r7}
 80131bc:	b087      	sub	sp, #28
 80131be:	af00      	add	r7, sp, #0
 80131c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80131c2:	f04f 33ff 	mov.w	r3, #4294967295
 80131c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d031      	beq.n	8013234 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	617b      	str	r3, [r7, #20]
 80131d6:	e002      	b.n	80131de <get_ldnumber+0x24>
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	3301      	adds	r3, #1
 80131dc:	617b      	str	r3, [r7, #20]
 80131de:	697b      	ldr	r3, [r7, #20]
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	2b20      	cmp	r3, #32
 80131e4:	d903      	bls.n	80131ee <get_ldnumber+0x34>
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80131ec:	d1f4      	bne.n	80131d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80131f4:	d11c      	bne.n	8013230 <get_ldnumber+0x76>
			tp = *path;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	1c5a      	adds	r2, r3, #1
 8013200:	60fa      	str	r2, [r7, #12]
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	3b30      	subs	r3, #48	@ 0x30
 8013206:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	2b09      	cmp	r3, #9
 801320c:	d80e      	bhi.n	801322c <get_ldnumber+0x72>
 801320e:	68fa      	ldr	r2, [r7, #12]
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	429a      	cmp	r2, r3
 8013214:	d10a      	bne.n	801322c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d107      	bne.n	801322c <get_ldnumber+0x72>
					vol = (int)i;
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	3301      	adds	r3, #1
 8013224:	617b      	str	r3, [r7, #20]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	697a      	ldr	r2, [r7, #20]
 801322a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	e002      	b.n	8013236 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013230:	2300      	movs	r3, #0
 8013232:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013234:	693b      	ldr	r3, [r7, #16]
}
 8013236:	4618      	mov	r0, r3
 8013238:	371c      	adds	r7, #28
 801323a:	46bd      	mov	sp, r7
 801323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013240:	4770      	bx	lr
	...

08013244 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2200      	movs	r2, #0
 8013252:	70da      	strb	r2, [r3, #3]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f04f 32ff 	mov.w	r2, #4294967295
 801325a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801325c:	6839      	ldr	r1, [r7, #0]
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f7ff f800 	bl	8012264 <move_window>
 8013264:	4603      	mov	r3, r0
 8013266:	2b00      	cmp	r3, #0
 8013268:	d001      	beq.n	801326e <check_fs+0x2a>
 801326a:	2304      	movs	r3, #4
 801326c:	e038      	b.n	80132e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	3330      	adds	r3, #48	@ 0x30
 8013272:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013276:	4618      	mov	r0, r3
 8013278:	f7fe fd44 	bl	8011d04 <ld_word>
 801327c:	4603      	mov	r3, r0
 801327e:	461a      	mov	r2, r3
 8013280:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013284:	429a      	cmp	r2, r3
 8013286:	d001      	beq.n	801328c <check_fs+0x48>
 8013288:	2303      	movs	r3, #3
 801328a:	e029      	b.n	80132e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013292:	2be9      	cmp	r3, #233	@ 0xe9
 8013294:	d009      	beq.n	80132aa <check_fs+0x66>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801329c:	2beb      	cmp	r3, #235	@ 0xeb
 801329e:	d11e      	bne.n	80132de <check_fs+0x9a>
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80132a6:	2b90      	cmp	r3, #144	@ 0x90
 80132a8:	d119      	bne.n	80132de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	3330      	adds	r3, #48	@ 0x30
 80132ae:	3336      	adds	r3, #54	@ 0x36
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7fe fd3f 	bl	8011d34 <ld_dword>
 80132b6:	4603      	mov	r3, r0
 80132b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80132bc:	4a0a      	ldr	r2, [pc, #40]	@ (80132e8 <check_fs+0xa4>)
 80132be:	4293      	cmp	r3, r2
 80132c0:	d101      	bne.n	80132c6 <check_fs+0x82>
 80132c2:	2300      	movs	r3, #0
 80132c4:	e00c      	b.n	80132e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	3330      	adds	r3, #48	@ 0x30
 80132ca:	3352      	adds	r3, #82	@ 0x52
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7fe fd31 	bl	8011d34 <ld_dword>
 80132d2:	4603      	mov	r3, r0
 80132d4:	4a05      	ldr	r2, [pc, #20]	@ (80132ec <check_fs+0xa8>)
 80132d6:	4293      	cmp	r3, r2
 80132d8:	d101      	bne.n	80132de <check_fs+0x9a>
 80132da:	2300      	movs	r3, #0
 80132dc:	e000      	b.n	80132e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80132de:	2302      	movs	r3, #2
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	3708      	adds	r7, #8
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}
 80132e8:	00544146 	.word	0x00544146
 80132ec:	33544146 	.word	0x33544146

080132f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b096      	sub	sp, #88	@ 0x58
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	60f8      	str	r0, [r7, #12]
 80132f8:	60b9      	str	r1, [r7, #8]
 80132fa:	4613      	mov	r3, r2
 80132fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	2200      	movs	r2, #0
 8013302:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013304:	68f8      	ldr	r0, [r7, #12]
 8013306:	f7ff ff58 	bl	80131ba <get_ldnumber>
 801330a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801330c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801330e:	2b00      	cmp	r3, #0
 8013310:	da01      	bge.n	8013316 <find_volume+0x26>
 8013312:	230b      	movs	r3, #11
 8013314:	e22d      	b.n	8013772 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013316:	4aa1      	ldr	r2, [pc, #644]	@ (801359c <find_volume+0x2ac>)
 8013318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801331e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013322:	2b00      	cmp	r3, #0
 8013324:	d101      	bne.n	801332a <find_volume+0x3a>
 8013326:	230c      	movs	r3, #12
 8013328:	e223      	b.n	8013772 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801332e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013330:	79fb      	ldrb	r3, [r7, #7]
 8013332:	f023 0301 	bic.w	r3, r3, #1
 8013336:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d01a      	beq.n	8013376 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013342:	785b      	ldrb	r3, [r3, #1]
 8013344:	4618      	mov	r0, r3
 8013346:	f7fe fc3d 	bl	8011bc4 <disk_status>
 801334a:	4603      	mov	r3, r0
 801334c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013350:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013354:	f003 0301 	and.w	r3, r3, #1
 8013358:	2b00      	cmp	r3, #0
 801335a:	d10c      	bne.n	8013376 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801335c:	79fb      	ldrb	r3, [r7, #7]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d007      	beq.n	8013372 <find_volume+0x82>
 8013362:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013366:	f003 0304 	and.w	r3, r3, #4
 801336a:	2b00      	cmp	r3, #0
 801336c:	d001      	beq.n	8013372 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801336e:	230a      	movs	r3, #10
 8013370:	e1ff      	b.n	8013772 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8013372:	2300      	movs	r3, #0
 8013374:	e1fd      	b.n	8013772 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013378:	2200      	movs	r2, #0
 801337a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801337c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801337e:	b2da      	uxtb	r2, r3
 8013380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013382:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013386:	785b      	ldrb	r3, [r3, #1]
 8013388:	4618      	mov	r0, r3
 801338a:	f7fe fc35 	bl	8011bf8 <disk_initialize>
 801338e:	4603      	mov	r3, r0
 8013390:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013394:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013398:	f003 0301 	and.w	r3, r3, #1
 801339c:	2b00      	cmp	r3, #0
 801339e:	d001      	beq.n	80133a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80133a0:	2303      	movs	r3, #3
 80133a2:	e1e6      	b.n	8013772 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80133a4:	79fb      	ldrb	r3, [r7, #7]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d007      	beq.n	80133ba <find_volume+0xca>
 80133aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80133ae:	f003 0304 	and.w	r3, r3, #4
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d001      	beq.n	80133ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80133b6:	230a      	movs	r3, #10
 80133b8:	e1db      	b.n	8013772 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80133ba:	2300      	movs	r3, #0
 80133bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80133be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80133c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80133c2:	f7ff ff3f 	bl	8013244 <check_fs>
 80133c6:	4603      	mov	r3, r0
 80133c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80133cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80133d0:	2b02      	cmp	r3, #2
 80133d2:	d149      	bne.n	8013468 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80133d4:	2300      	movs	r3, #0
 80133d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80133d8:	e01e      	b.n	8013418 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80133da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80133e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80133e2:	011b      	lsls	r3, r3, #4
 80133e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80133e8:	4413      	add	r3, r2
 80133ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80133ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ee:	3304      	adds	r3, #4
 80133f0:	781b      	ldrb	r3, [r3, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d006      	beq.n	8013404 <find_volume+0x114>
 80133f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133f8:	3308      	adds	r3, #8
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7fe fc9a 	bl	8011d34 <ld_dword>
 8013400:	4602      	mov	r2, r0
 8013402:	e000      	b.n	8013406 <find_volume+0x116>
 8013404:	2200      	movs	r2, #0
 8013406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013408:	009b      	lsls	r3, r3, #2
 801340a:	3358      	adds	r3, #88	@ 0x58
 801340c:	443b      	add	r3, r7
 801340e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013414:	3301      	adds	r3, #1
 8013416:	643b      	str	r3, [r7, #64]	@ 0x40
 8013418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801341a:	2b03      	cmp	r3, #3
 801341c:	d9dd      	bls.n	80133da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801341e:	2300      	movs	r3, #0
 8013420:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8013422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013424:	2b00      	cmp	r3, #0
 8013426:	d002      	beq.n	801342e <find_volume+0x13e>
 8013428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801342a:	3b01      	subs	r3, #1
 801342c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801342e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013430:	009b      	lsls	r3, r3, #2
 8013432:	3358      	adds	r3, #88	@ 0x58
 8013434:	443b      	add	r3, r7
 8013436:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801343a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801343c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801343e:	2b00      	cmp	r3, #0
 8013440:	d005      	beq.n	801344e <find_volume+0x15e>
 8013442:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013444:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013446:	f7ff fefd 	bl	8013244 <check_fs>
 801344a:	4603      	mov	r3, r0
 801344c:	e000      	b.n	8013450 <find_volume+0x160>
 801344e:	2303      	movs	r3, #3
 8013450:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013454:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013458:	2b01      	cmp	r3, #1
 801345a:	d905      	bls.n	8013468 <find_volume+0x178>
 801345c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801345e:	3301      	adds	r3, #1
 8013460:	643b      	str	r3, [r7, #64]	@ 0x40
 8013462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013464:	2b03      	cmp	r3, #3
 8013466:	d9e2      	bls.n	801342e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013468:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801346c:	2b04      	cmp	r3, #4
 801346e:	d101      	bne.n	8013474 <find_volume+0x184>
 8013470:	2301      	movs	r3, #1
 8013472:	e17e      	b.n	8013772 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013474:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013478:	2b01      	cmp	r3, #1
 801347a:	d901      	bls.n	8013480 <find_volume+0x190>
 801347c:	230d      	movs	r3, #13
 801347e:	e178      	b.n	8013772 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013482:	3330      	adds	r3, #48	@ 0x30
 8013484:	330b      	adds	r3, #11
 8013486:	4618      	mov	r0, r3
 8013488:	f7fe fc3c 	bl	8011d04 <ld_word>
 801348c:	4603      	mov	r3, r0
 801348e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013492:	d001      	beq.n	8013498 <find_volume+0x1a8>
 8013494:	230d      	movs	r3, #13
 8013496:	e16c      	b.n	8013772 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801349a:	3330      	adds	r3, #48	@ 0x30
 801349c:	3316      	adds	r3, #22
 801349e:	4618      	mov	r0, r3
 80134a0:	f7fe fc30 	bl	8011d04 <ld_word>
 80134a4:	4603      	mov	r3, r0
 80134a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80134a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d106      	bne.n	80134bc <find_volume+0x1cc>
 80134ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134b0:	3330      	adds	r3, #48	@ 0x30
 80134b2:	3324      	adds	r3, #36	@ 0x24
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7fe fc3d 	bl	8011d34 <ld_dword>
 80134ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80134bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80134c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80134c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134c4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80134c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80134cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ce:	789b      	ldrb	r3, [r3, #2]
 80134d0:	2b01      	cmp	r3, #1
 80134d2:	d005      	beq.n	80134e0 <find_volume+0x1f0>
 80134d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134d6:	789b      	ldrb	r3, [r3, #2]
 80134d8:	2b02      	cmp	r3, #2
 80134da:	d001      	beq.n	80134e0 <find_volume+0x1f0>
 80134dc:	230d      	movs	r3, #13
 80134de:	e148      	b.n	8013772 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80134e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134e2:	789b      	ldrb	r3, [r3, #2]
 80134e4:	461a      	mov	r2, r3
 80134e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134e8:	fb02 f303 	mul.w	r3, r2, r3
 80134ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80134ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80134f4:	461a      	mov	r2, r3
 80134f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80134fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134fc:	895b      	ldrh	r3, [r3, #10]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d008      	beq.n	8013514 <find_volume+0x224>
 8013502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013504:	895b      	ldrh	r3, [r3, #10]
 8013506:	461a      	mov	r2, r3
 8013508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801350a:	895b      	ldrh	r3, [r3, #10]
 801350c:	3b01      	subs	r3, #1
 801350e:	4013      	ands	r3, r2
 8013510:	2b00      	cmp	r3, #0
 8013512:	d001      	beq.n	8013518 <find_volume+0x228>
 8013514:	230d      	movs	r3, #13
 8013516:	e12c      	b.n	8013772 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801351a:	3330      	adds	r3, #48	@ 0x30
 801351c:	3311      	adds	r3, #17
 801351e:	4618      	mov	r0, r3
 8013520:	f7fe fbf0 	bl	8011d04 <ld_word>
 8013524:	4603      	mov	r3, r0
 8013526:	461a      	mov	r2, r3
 8013528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801352a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801352e:	891b      	ldrh	r3, [r3, #8]
 8013530:	f003 030f 	and.w	r3, r3, #15
 8013534:	b29b      	uxth	r3, r3
 8013536:	2b00      	cmp	r3, #0
 8013538:	d001      	beq.n	801353e <find_volume+0x24e>
 801353a:	230d      	movs	r3, #13
 801353c:	e119      	b.n	8013772 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801353e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013540:	3330      	adds	r3, #48	@ 0x30
 8013542:	3313      	adds	r3, #19
 8013544:	4618      	mov	r0, r3
 8013546:	f7fe fbdd 	bl	8011d04 <ld_word>
 801354a:	4603      	mov	r3, r0
 801354c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801354e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013550:	2b00      	cmp	r3, #0
 8013552:	d106      	bne.n	8013562 <find_volume+0x272>
 8013554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013556:	3330      	adds	r3, #48	@ 0x30
 8013558:	3320      	adds	r3, #32
 801355a:	4618      	mov	r0, r3
 801355c:	f7fe fbea 	bl	8011d34 <ld_dword>
 8013560:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013564:	3330      	adds	r3, #48	@ 0x30
 8013566:	330e      	adds	r3, #14
 8013568:	4618      	mov	r0, r3
 801356a:	f7fe fbcb 	bl	8011d04 <ld_word>
 801356e:	4603      	mov	r3, r0
 8013570:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013572:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013574:	2b00      	cmp	r3, #0
 8013576:	d101      	bne.n	801357c <find_volume+0x28c>
 8013578:	230d      	movs	r3, #13
 801357a:	e0fa      	b.n	8013772 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801357c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801357e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013580:	4413      	add	r3, r2
 8013582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013584:	8912      	ldrh	r2, [r2, #8]
 8013586:	0912      	lsrs	r2, r2, #4
 8013588:	b292      	uxth	r2, r2
 801358a:	4413      	add	r3, r2
 801358c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801358e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013592:	429a      	cmp	r2, r3
 8013594:	d204      	bcs.n	80135a0 <find_volume+0x2b0>
 8013596:	230d      	movs	r3, #13
 8013598:	e0eb      	b.n	8013772 <find_volume+0x482>
 801359a:	bf00      	nop
 801359c:	200009a8 	.word	0x200009a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80135a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80135a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135a4:	1ad3      	subs	r3, r2, r3
 80135a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80135a8:	8952      	ldrh	r2, [r2, #10]
 80135aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80135ae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80135b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d101      	bne.n	80135ba <find_volume+0x2ca>
 80135b6:	230d      	movs	r3, #13
 80135b8:	e0db      	b.n	8013772 <find_volume+0x482>
		fmt = FS_FAT32;
 80135ba:	2303      	movs	r3, #3
 80135bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80135c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135c2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80135c6:	4293      	cmp	r3, r2
 80135c8:	d802      	bhi.n	80135d0 <find_volume+0x2e0>
 80135ca:	2302      	movs	r3, #2
 80135cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80135d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135d2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80135d6:	4293      	cmp	r3, r2
 80135d8:	d802      	bhi.n	80135e0 <find_volume+0x2f0>
 80135da:	2301      	movs	r3, #1
 80135dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80135e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135e2:	1c9a      	adds	r2, r3, #2
 80135e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80135e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80135ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80135ee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80135f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80135f2:	441a      	add	r2, r3
 80135f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80135f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80135fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135fc:	441a      	add	r2, r3
 80135fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013600:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8013602:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013606:	2b03      	cmp	r3, #3
 8013608:	d11e      	bne.n	8013648 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801360a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801360c:	3330      	adds	r3, #48	@ 0x30
 801360e:	332a      	adds	r3, #42	@ 0x2a
 8013610:	4618      	mov	r0, r3
 8013612:	f7fe fb77 	bl	8011d04 <ld_word>
 8013616:	4603      	mov	r3, r0
 8013618:	2b00      	cmp	r3, #0
 801361a:	d001      	beq.n	8013620 <find_volume+0x330>
 801361c:	230d      	movs	r3, #13
 801361e:	e0a8      	b.n	8013772 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013622:	891b      	ldrh	r3, [r3, #8]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d001      	beq.n	801362c <find_volume+0x33c>
 8013628:	230d      	movs	r3, #13
 801362a:	e0a2      	b.n	8013772 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801362c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801362e:	3330      	adds	r3, #48	@ 0x30
 8013630:	332c      	adds	r3, #44	@ 0x2c
 8013632:	4618      	mov	r0, r3
 8013634:	f7fe fb7e 	bl	8011d34 <ld_dword>
 8013638:	4602      	mov	r2, r0
 801363a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801363c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801363e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013640:	695b      	ldr	r3, [r3, #20]
 8013642:	009b      	lsls	r3, r3, #2
 8013644:	647b      	str	r3, [r7, #68]	@ 0x44
 8013646:	e01f      	b.n	8013688 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801364a:	891b      	ldrh	r3, [r3, #8]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d101      	bne.n	8013654 <find_volume+0x364>
 8013650:	230d      	movs	r3, #13
 8013652:	e08e      	b.n	8013772 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013656:	6a1a      	ldr	r2, [r3, #32]
 8013658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801365a:	441a      	add	r2, r3
 801365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801365e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013660:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013664:	2b02      	cmp	r3, #2
 8013666:	d103      	bne.n	8013670 <find_volume+0x380>
 8013668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801366a:	695b      	ldr	r3, [r3, #20]
 801366c:	005b      	lsls	r3, r3, #1
 801366e:	e00a      	b.n	8013686 <find_volume+0x396>
 8013670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013672:	695a      	ldr	r2, [r3, #20]
 8013674:	4613      	mov	r3, r2
 8013676:	005b      	lsls	r3, r3, #1
 8013678:	4413      	add	r3, r2
 801367a:	085a      	lsrs	r2, r3, #1
 801367c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801367e:	695b      	ldr	r3, [r3, #20]
 8013680:	f003 0301 	and.w	r3, r3, #1
 8013684:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013686:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801368a:	699a      	ldr	r2, [r3, #24]
 801368c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801368e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8013692:	0a5b      	lsrs	r3, r3, #9
 8013694:	429a      	cmp	r2, r3
 8013696:	d201      	bcs.n	801369c <find_volume+0x3ac>
 8013698:	230d      	movs	r3, #13
 801369a:	e06a      	b.n	8013772 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801369e:	f04f 32ff 	mov.w	r2, #4294967295
 80136a2:	611a      	str	r2, [r3, #16]
 80136a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136a6:	691a      	ldr	r2, [r3, #16]
 80136a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136aa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80136ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ae:	2280      	movs	r2, #128	@ 0x80
 80136b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80136b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80136b6:	2b03      	cmp	r3, #3
 80136b8:	d149      	bne.n	801374e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80136ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136bc:	3330      	adds	r3, #48	@ 0x30
 80136be:	3330      	adds	r3, #48	@ 0x30
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7fe fb1f 	bl	8011d04 <ld_word>
 80136c6:	4603      	mov	r3, r0
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	d140      	bne.n	801374e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80136cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136ce:	3301      	adds	r3, #1
 80136d0:	4619      	mov	r1, r3
 80136d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80136d4:	f7fe fdc6 	bl	8012264 <move_window>
 80136d8:	4603      	mov	r3, r0
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d137      	bne.n	801374e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80136de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136e0:	2200      	movs	r2, #0
 80136e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80136e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136e6:	3330      	adds	r3, #48	@ 0x30
 80136e8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7fe fb09 	bl	8011d04 <ld_word>
 80136f2:	4603      	mov	r3, r0
 80136f4:	461a      	mov	r2, r3
 80136f6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d127      	bne.n	801374e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80136fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013700:	3330      	adds	r3, #48	@ 0x30
 8013702:	4618      	mov	r0, r3
 8013704:	f7fe fb16 	bl	8011d34 <ld_dword>
 8013708:	4603      	mov	r3, r0
 801370a:	4a1c      	ldr	r2, [pc, #112]	@ (801377c <find_volume+0x48c>)
 801370c:	4293      	cmp	r3, r2
 801370e:	d11e      	bne.n	801374e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013712:	3330      	adds	r3, #48	@ 0x30
 8013714:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013718:	4618      	mov	r0, r3
 801371a:	f7fe fb0b 	bl	8011d34 <ld_dword>
 801371e:	4603      	mov	r3, r0
 8013720:	4a17      	ldr	r2, [pc, #92]	@ (8013780 <find_volume+0x490>)
 8013722:	4293      	cmp	r3, r2
 8013724:	d113      	bne.n	801374e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013728:	3330      	adds	r3, #48	@ 0x30
 801372a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801372e:	4618      	mov	r0, r3
 8013730:	f7fe fb00 	bl	8011d34 <ld_dword>
 8013734:	4602      	mov	r2, r0
 8013736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013738:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801373a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801373c:	3330      	adds	r3, #48	@ 0x30
 801373e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013742:	4618      	mov	r0, r3
 8013744:	f7fe faf6 	bl	8011d34 <ld_dword>
 8013748:	4602      	mov	r2, r0
 801374a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801374c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801374e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013750:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013754:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013756:	4b0b      	ldr	r3, [pc, #44]	@ (8013784 <find_volume+0x494>)
 8013758:	881b      	ldrh	r3, [r3, #0]
 801375a:	3301      	adds	r3, #1
 801375c:	b29a      	uxth	r2, r3
 801375e:	4b09      	ldr	r3, [pc, #36]	@ (8013784 <find_volume+0x494>)
 8013760:	801a      	strh	r2, [r3, #0]
 8013762:	4b08      	ldr	r3, [pc, #32]	@ (8013784 <find_volume+0x494>)
 8013764:	881a      	ldrh	r2, [r3, #0]
 8013766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013768:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801376a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801376c:	f7fe fd12 	bl	8012194 <clear_lock>
#endif
	return FR_OK;
 8013770:	2300      	movs	r3, #0
}
 8013772:	4618      	mov	r0, r3
 8013774:	3758      	adds	r7, #88	@ 0x58
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}
 801377a:	bf00      	nop
 801377c:	41615252 	.word	0x41615252
 8013780:	61417272 	.word	0x61417272
 8013784:	200009ac 	.word	0x200009ac

08013788 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013792:	2309      	movs	r3, #9
 8013794:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d01c      	beq.n	80137d6 <validate+0x4e>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d018      	beq.n	80137d6 <validate+0x4e>
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	781b      	ldrb	r3, [r3, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d013      	beq.n	80137d6 <validate+0x4e>
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	889a      	ldrh	r2, [r3, #4]
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	88db      	ldrh	r3, [r3, #6]
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d10c      	bne.n	80137d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	785b      	ldrb	r3, [r3, #1]
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fe f9fe 	bl	8011bc4 <disk_status>
 80137c8:	4603      	mov	r3, r0
 80137ca:	f003 0301 	and.w	r3, r3, #1
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d101      	bne.n	80137d6 <validate+0x4e>
			res = FR_OK;
 80137d2:	2300      	movs	r3, #0
 80137d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80137d6:	7bfb      	ldrb	r3, [r7, #15]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d102      	bne.n	80137e2 <validate+0x5a>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	e000      	b.n	80137e4 <validate+0x5c>
 80137e2:	2300      	movs	r3, #0
 80137e4:	683a      	ldr	r2, [r7, #0]
 80137e6:	6013      	str	r3, [r2, #0]
	return res;
 80137e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	3710      	adds	r7, #16
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
	...

080137f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b088      	sub	sp, #32
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	60f8      	str	r0, [r7, #12]
 80137fc:	60b9      	str	r1, [r7, #8]
 80137fe:	4613      	mov	r3, r2
 8013800:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013806:	f107 0310 	add.w	r3, r7, #16
 801380a:	4618      	mov	r0, r3
 801380c:	f7ff fcd5 	bl	80131ba <get_ldnumber>
 8013810:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013812:	69fb      	ldr	r3, [r7, #28]
 8013814:	2b00      	cmp	r3, #0
 8013816:	da01      	bge.n	801381c <f_mount+0x28>
 8013818:	230b      	movs	r3, #11
 801381a:	e02b      	b.n	8013874 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801381c:	4a17      	ldr	r2, [pc, #92]	@ (801387c <f_mount+0x88>)
 801381e:	69fb      	ldr	r3, [r7, #28]
 8013820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013824:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013826:	69bb      	ldr	r3, [r7, #24]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d005      	beq.n	8013838 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801382c:	69b8      	ldr	r0, [r7, #24]
 801382e:	f7fe fcb1 	bl	8012194 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013832:	69bb      	ldr	r3, [r7, #24]
 8013834:	2200      	movs	r2, #0
 8013836:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d002      	beq.n	8013844 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	2200      	movs	r2, #0
 8013842:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013844:	68fa      	ldr	r2, [r7, #12]
 8013846:	490d      	ldr	r1, [pc, #52]	@ (801387c <f_mount+0x88>)
 8013848:	69fb      	ldr	r3, [r7, #28]
 801384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d002      	beq.n	801385a <f_mount+0x66>
 8013854:	79fb      	ldrb	r3, [r7, #7]
 8013856:	2b01      	cmp	r3, #1
 8013858:	d001      	beq.n	801385e <f_mount+0x6a>
 801385a:	2300      	movs	r3, #0
 801385c:	e00a      	b.n	8013874 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801385e:	f107 010c 	add.w	r1, r7, #12
 8013862:	f107 0308 	add.w	r3, r7, #8
 8013866:	2200      	movs	r2, #0
 8013868:	4618      	mov	r0, r3
 801386a:	f7ff fd41 	bl	80132f0 <find_volume>
 801386e:	4603      	mov	r3, r0
 8013870:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013872:	7dfb      	ldrb	r3, [r7, #23]
}
 8013874:	4618      	mov	r0, r3
 8013876:	3720      	adds	r7, #32
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}
 801387c:	200009a8 	.word	0x200009a8

08013880 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b098      	sub	sp, #96	@ 0x60
 8013884:	af00      	add	r7, sp, #0
 8013886:	60f8      	str	r0, [r7, #12]
 8013888:	60b9      	str	r1, [r7, #8]
 801388a:	4613      	mov	r3, r2
 801388c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d101      	bne.n	8013898 <f_open+0x18>
 8013894:	2309      	movs	r3, #9
 8013896:	e1a9      	b.n	8013bec <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013898:	79fb      	ldrb	r3, [r7, #7]
 801389a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801389e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80138a0:	79fa      	ldrb	r2, [r7, #7]
 80138a2:	f107 0110 	add.w	r1, r7, #16
 80138a6:	f107 0308 	add.w	r3, r7, #8
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7ff fd20 	bl	80132f0 <find_volume>
 80138b0:	4603      	mov	r3, r0
 80138b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80138b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	f040 818d 	bne.w	8013bda <f_open+0x35a>
		dj.obj.fs = fs;
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80138c4:	68ba      	ldr	r2, [r7, #8]
 80138c6:	f107 0314 	add.w	r3, r7, #20
 80138ca:	4611      	mov	r1, r2
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7ff fc03 	bl	80130d8 <follow_path>
 80138d2:	4603      	mov	r3, r0
 80138d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80138d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d118      	bne.n	8013912 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80138e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80138e4:	b25b      	sxtb	r3, r3
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	da03      	bge.n	80138f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80138ea:	2306      	movs	r3, #6
 80138ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80138f0:	e00f      	b.n	8013912 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80138f2:	79fb      	ldrb	r3, [r7, #7]
 80138f4:	2b01      	cmp	r3, #1
 80138f6:	bf8c      	ite	hi
 80138f8:	2301      	movhi	r3, #1
 80138fa:	2300      	movls	r3, #0
 80138fc:	b2db      	uxtb	r3, r3
 80138fe:	461a      	mov	r2, r3
 8013900:	f107 0314 	add.w	r3, r7, #20
 8013904:	4611      	mov	r1, r2
 8013906:	4618      	mov	r0, r3
 8013908:	f7fe fafc 	bl	8011f04 <chk_lock>
 801390c:	4603      	mov	r3, r0
 801390e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013912:	79fb      	ldrb	r3, [r7, #7]
 8013914:	f003 031c 	and.w	r3, r3, #28
 8013918:	2b00      	cmp	r3, #0
 801391a:	d07f      	beq.n	8013a1c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801391c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013920:	2b00      	cmp	r3, #0
 8013922:	d017      	beq.n	8013954 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013924:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013928:	2b04      	cmp	r3, #4
 801392a:	d10e      	bne.n	801394a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801392c:	f7fe fb46 	bl	8011fbc <enq_lock>
 8013930:	4603      	mov	r3, r0
 8013932:	2b00      	cmp	r3, #0
 8013934:	d006      	beq.n	8013944 <f_open+0xc4>
 8013936:	f107 0314 	add.w	r3, r7, #20
 801393a:	4618      	mov	r0, r3
 801393c:	f7ff fa87 	bl	8012e4e <dir_register>
 8013940:	4603      	mov	r3, r0
 8013942:	e000      	b.n	8013946 <f_open+0xc6>
 8013944:	2312      	movs	r3, #18
 8013946:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801394a:	79fb      	ldrb	r3, [r7, #7]
 801394c:	f043 0308 	orr.w	r3, r3, #8
 8013950:	71fb      	strb	r3, [r7, #7]
 8013952:	e010      	b.n	8013976 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013954:	7ebb      	ldrb	r3, [r7, #26]
 8013956:	f003 0311 	and.w	r3, r3, #17
 801395a:	2b00      	cmp	r3, #0
 801395c:	d003      	beq.n	8013966 <f_open+0xe6>
					res = FR_DENIED;
 801395e:	2307      	movs	r3, #7
 8013960:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013964:	e007      	b.n	8013976 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013966:	79fb      	ldrb	r3, [r7, #7]
 8013968:	f003 0304 	and.w	r3, r3, #4
 801396c:	2b00      	cmp	r3, #0
 801396e:	d002      	beq.n	8013976 <f_open+0xf6>
 8013970:	2308      	movs	r3, #8
 8013972:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013976:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801397a:	2b00      	cmp	r3, #0
 801397c:	d168      	bne.n	8013a50 <f_open+0x1d0>
 801397e:	79fb      	ldrb	r3, [r7, #7]
 8013980:	f003 0308 	and.w	r3, r3, #8
 8013984:	2b00      	cmp	r3, #0
 8013986:	d063      	beq.n	8013a50 <f_open+0x1d0>
				dw = GET_FATTIME();
 8013988:	f7fb fe5a 	bl	800f640 <get_fattime>
 801398c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013990:	330e      	adds	r3, #14
 8013992:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013994:	4618      	mov	r0, r3
 8013996:	f7fe fa0b 	bl	8011db0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801399a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801399c:	3316      	adds	r3, #22
 801399e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7fe fa05 	bl	8011db0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80139a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139a8:	330b      	adds	r3, #11
 80139aa:	2220      	movs	r2, #32
 80139ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80139b2:	4611      	mov	r1, r2
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7ff f959 	bl	8012c6c <ld_clust>
 80139ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80139c0:	2200      	movs	r2, #0
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7ff f971 	bl	8012caa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80139c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139ca:	331c      	adds	r3, #28
 80139cc:	2100      	movs	r1, #0
 80139ce:	4618      	mov	r0, r3
 80139d0:	f7fe f9ee 	bl	8011db0 <st_dword>
					fs->wflag = 1;
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	2201      	movs	r2, #1
 80139d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80139da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d037      	beq.n	8013a50 <f_open+0x1d0>
						dw = fs->winsect;
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139e4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80139e6:	f107 0314 	add.w	r3, r7, #20
 80139ea:	2200      	movs	r2, #0
 80139ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7fe fe84 	bl	80126fc <remove_chain>
 80139f4:	4603      	mov	r3, r0
 80139f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80139fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d126      	bne.n	8013a50 <f_open+0x1d0>
							res = move_window(fs, dw);
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fe fc2c 	bl	8012264 <move_window>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a16:	3a01      	subs	r2, #1
 8013a18:	60da      	str	r2, [r3, #12]
 8013a1a:	e019      	b.n	8013a50 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d115      	bne.n	8013a50 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013a24:	7ebb      	ldrb	r3, [r7, #26]
 8013a26:	f003 0310 	and.w	r3, r3, #16
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d003      	beq.n	8013a36 <f_open+0x1b6>
					res = FR_NO_FILE;
 8013a2e:	2304      	movs	r3, #4
 8013a30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013a34:	e00c      	b.n	8013a50 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013a36:	79fb      	ldrb	r3, [r7, #7]
 8013a38:	f003 0302 	and.w	r3, r3, #2
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d007      	beq.n	8013a50 <f_open+0x1d0>
 8013a40:	7ebb      	ldrb	r3, [r7, #26]
 8013a42:	f003 0301 	and.w	r3, r3, #1
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d002      	beq.n	8013a50 <f_open+0x1d0>
						res = FR_DENIED;
 8013a4a:	2307      	movs	r3, #7
 8013a4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013a50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d126      	bne.n	8013aa6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013a58:	79fb      	ldrb	r3, [r7, #7]
 8013a5a:	f003 0308 	and.w	r3, r3, #8
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d003      	beq.n	8013a6a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8013a62:	79fb      	ldrb	r3, [r7, #7]
 8013a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8013a72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013a78:	79fb      	ldrb	r3, [r7, #7]
 8013a7a:	2b01      	cmp	r3, #1
 8013a7c:	bf8c      	ite	hi
 8013a7e:	2301      	movhi	r3, #1
 8013a80:	2300      	movls	r3, #0
 8013a82:	b2db      	uxtb	r3, r3
 8013a84:	461a      	mov	r2, r3
 8013a86:	f107 0314 	add.w	r3, r7, #20
 8013a8a:	4611      	mov	r1, r2
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7fe fab7 	bl	8012000 <inc_lock>
 8013a92:	4602      	mov	r2, r0
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	691b      	ldr	r3, [r3, #16]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d102      	bne.n	8013aa6 <f_open+0x226>
 8013aa0:	2302      	movs	r3, #2
 8013aa2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013aa6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	f040 8095 	bne.w	8013bda <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ab4:	4611      	mov	r1, r2
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7ff f8d8 	bl	8012c6c <ld_clust>
 8013abc:	4602      	mov	r2, r0
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ac4:	331c      	adds	r3, #28
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7fe f934 	bl	8011d34 <ld_dword>
 8013acc:	4602      	mov	r2, r0
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013ad8:	693a      	ldr	r2, [r7, #16]
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013ade:	693b      	ldr	r3, [r7, #16]
 8013ae0:	88da      	ldrh	r2, [r3, #6]
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	79fa      	ldrb	r2, [r7, #7]
 8013aea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	2200      	movs	r2, #0
 8013af0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	2200      	movs	r2, #0
 8013af6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	2200      	movs	r2, #0
 8013afc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	3330      	adds	r3, #48	@ 0x30
 8013b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b06:	2100      	movs	r1, #0
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7fe f99e 	bl	8011e4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013b0e:	79fb      	ldrb	r3, [r7, #7]
 8013b10:	f003 0320 	and.w	r3, r3, #32
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d060      	beq.n	8013bda <f_open+0x35a>
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	68db      	ldr	r3, [r3, #12]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d05c      	beq.n	8013bda <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	68da      	ldr	r2, [r3, #12]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013b28:	693b      	ldr	r3, [r7, #16]
 8013b2a:	895b      	ldrh	r3, [r3, #10]
 8013b2c:	025b      	lsls	r3, r3, #9
 8013b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	689b      	ldr	r3, [r3, #8]
 8013b34:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8013b3c:	e016      	b.n	8013b6c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7fe fc49 	bl	80123da <get_fat>
 8013b48:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d802      	bhi.n	8013b56 <f_open+0x2d6>
 8013b50:	2302      	movs	r3, #2
 8013b52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013b56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b5c:	d102      	bne.n	8013b64 <f_open+0x2e4>
 8013b5e:	2301      	movs	r3, #1
 8013b60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013b64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013b68:	1ad3      	subs	r3, r2, r3
 8013b6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8013b6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d103      	bne.n	8013b7c <f_open+0x2fc>
 8013b74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d8e0      	bhi.n	8013b3e <f_open+0x2be>
				}
				fp->clust = clst;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013b80:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013b82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d127      	bne.n	8013bda <f_open+0x35a>
 8013b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d022      	beq.n	8013bda <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7fe fbff 	bl	801239c <clust2sect>
 8013b9e:	6478      	str	r0, [r7, #68]	@ 0x44
 8013ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d103      	bne.n	8013bae <f_open+0x32e>
						res = FR_INT_ERR;
 8013ba6:	2302      	movs	r3, #2
 8013ba8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013bac:	e015      	b.n	8013bda <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bb0:	0a5a      	lsrs	r2, r3, #9
 8013bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013bb4:	441a      	add	r2, r3
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013bba:	693b      	ldr	r3, [r7, #16]
 8013bbc:	7858      	ldrb	r0, [r3, #1]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	6a1a      	ldr	r2, [r3, #32]
 8013bc8:	2301      	movs	r3, #1
 8013bca:	f7fe f83d 	bl	8011c48 <disk_read>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d002      	beq.n	8013bda <f_open+0x35a>
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013bda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d002      	beq.n	8013be8 <f_open+0x368>
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	2200      	movs	r2, #0
 8013be6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013be8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3760      	adds	r7, #96	@ 0x60
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b08e      	sub	sp, #56	@ 0x38
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	60f8      	str	r0, [r7, #12]
 8013bfc:	60b9      	str	r1, [r7, #8]
 8013bfe:	607a      	str	r2, [r7, #4]
 8013c00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	f107 0214 	add.w	r2, r7, #20
 8013c12:	4611      	mov	r1, r2
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7ff fdb7 	bl	8013788 <validate>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013c20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d107      	bne.n	8013c38 <f_read+0x44>
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	7d5b      	ldrb	r3, [r3, #21]
 8013c2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013c30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d002      	beq.n	8013c3e <f_read+0x4a>
 8013c38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013c3c:	e115      	b.n	8013e6a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	7d1b      	ldrb	r3, [r3, #20]
 8013c42:	f003 0301 	and.w	r3, r3, #1
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d101      	bne.n	8013c4e <f_read+0x5a>
 8013c4a:	2307      	movs	r3, #7
 8013c4c:	e10d      	b.n	8013e6a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	68da      	ldr	r2, [r3, #12]
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	699b      	ldr	r3, [r3, #24]
 8013c56:	1ad3      	subs	r3, r2, r3
 8013c58:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013c5a:	687a      	ldr	r2, [r7, #4]
 8013c5c:	6a3b      	ldr	r3, [r7, #32]
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	f240 80fe 	bls.w	8013e60 <f_read+0x26c>
 8013c64:	6a3b      	ldr	r3, [r7, #32]
 8013c66:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013c68:	e0fa      	b.n	8013e60 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	699b      	ldr	r3, [r3, #24]
 8013c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	f040 80c6 	bne.w	8013e04 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	699b      	ldr	r3, [r3, #24]
 8013c7c:	0a5b      	lsrs	r3, r3, #9
 8013c7e:	697a      	ldr	r2, [r7, #20]
 8013c80:	8952      	ldrh	r2, [r2, #10]
 8013c82:	3a01      	subs	r2, #1
 8013c84:	4013      	ands	r3, r2
 8013c86:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d12f      	bne.n	8013cee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	699b      	ldr	r3, [r3, #24]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d103      	bne.n	8013c9e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	689b      	ldr	r3, [r3, #8]
 8013c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8013c9c:	e013      	b.n	8013cc6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d007      	beq.n	8013cb6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	699b      	ldr	r3, [r3, #24]
 8013caa:	4619      	mov	r1, r3
 8013cac:	68f8      	ldr	r0, [r7, #12]
 8013cae:	f7fe fe22 	bl	80128f6 <clmt_clust>
 8013cb2:	6338      	str	r0, [r7, #48]	@ 0x30
 8013cb4:	e007      	b.n	8013cc6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	69db      	ldr	r3, [r3, #28]
 8013cbc:	4619      	mov	r1, r3
 8013cbe:	4610      	mov	r0, r2
 8013cc0:	f7fe fb8b 	bl	80123da <get_fat>
 8013cc4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cc8:	2b01      	cmp	r3, #1
 8013cca:	d804      	bhi.n	8013cd6 <f_read+0xe2>
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	2202      	movs	r2, #2
 8013cd0:	755a      	strb	r2, [r3, #21]
 8013cd2:	2302      	movs	r3, #2
 8013cd4:	e0c9      	b.n	8013e6a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cdc:	d104      	bne.n	8013ce8 <f_read+0xf4>
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	755a      	strb	r2, [r3, #21]
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	e0c0      	b.n	8013e6a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013cec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013cee:	697a      	ldr	r2, [r7, #20]
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	69db      	ldr	r3, [r3, #28]
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	4610      	mov	r0, r2
 8013cf8:	f7fe fb50 	bl	801239c <clust2sect>
 8013cfc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d104      	bne.n	8013d0e <f_read+0x11a>
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2202      	movs	r2, #2
 8013d08:	755a      	strb	r2, [r3, #21]
 8013d0a:	2302      	movs	r3, #2
 8013d0c:	e0ad      	b.n	8013e6a <f_read+0x276>
			sect += csect;
 8013d0e:	69ba      	ldr	r2, [r7, #24]
 8013d10:	69fb      	ldr	r3, [r7, #28]
 8013d12:	4413      	add	r3, r2
 8013d14:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	0a5b      	lsrs	r3, r3, #9
 8013d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d039      	beq.n	8013d96 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013d22:	69fa      	ldr	r2, [r7, #28]
 8013d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d26:	4413      	add	r3, r2
 8013d28:	697a      	ldr	r2, [r7, #20]
 8013d2a:	8952      	ldrh	r2, [r2, #10]
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	d905      	bls.n	8013d3c <f_read+0x148>
					cc = fs->csize - csect;
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	895b      	ldrh	r3, [r3, #10]
 8013d34:	461a      	mov	r2, r3
 8013d36:	69fb      	ldr	r3, [r7, #28]
 8013d38:	1ad3      	subs	r3, r2, r3
 8013d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	7858      	ldrb	r0, [r3, #1]
 8013d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d42:	69ba      	ldr	r2, [r7, #24]
 8013d44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013d46:	f7fd ff7f 	bl	8011c48 <disk_read>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d004      	beq.n	8013d5a <f_read+0x166>
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2201      	movs	r2, #1
 8013d54:	755a      	strb	r2, [r3, #21]
 8013d56:	2301      	movs	r3, #1
 8013d58:	e087      	b.n	8013e6a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	7d1b      	ldrb	r3, [r3, #20]
 8013d5e:	b25b      	sxtb	r3, r3
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	da14      	bge.n	8013d8e <f_read+0x19a>
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	6a1a      	ldr	r2, [r3, #32]
 8013d68:	69bb      	ldr	r3, [r7, #24]
 8013d6a:	1ad3      	subs	r3, r2, r3
 8013d6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	d90d      	bls.n	8013d8e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	6a1a      	ldr	r2, [r3, #32]
 8013d76:	69bb      	ldr	r3, [r7, #24]
 8013d78:	1ad3      	subs	r3, r2, r3
 8013d7a:	025b      	lsls	r3, r3, #9
 8013d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d7e:	18d0      	adds	r0, r2, r3
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	3330      	adds	r3, #48	@ 0x30
 8013d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013d88:	4619      	mov	r1, r3
 8013d8a:	f7fe f83d 	bl	8011e08 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d90:	025b      	lsls	r3, r3, #9
 8013d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8013d94:	e050      	b.n	8013e38 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	6a1b      	ldr	r3, [r3, #32]
 8013d9a:	69ba      	ldr	r2, [r7, #24]
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d02e      	beq.n	8013dfe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	7d1b      	ldrb	r3, [r3, #20]
 8013da4:	b25b      	sxtb	r3, r3
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	da18      	bge.n	8013ddc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	7858      	ldrb	r0, [r3, #1]
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	6a1a      	ldr	r2, [r3, #32]
 8013db8:	2301      	movs	r3, #1
 8013dba:	f7fd ff65 	bl	8011c88 <disk_write>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d004      	beq.n	8013dce <f_read+0x1da>
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	2201      	movs	r2, #1
 8013dc8:	755a      	strb	r2, [r3, #21]
 8013dca:	2301      	movs	r3, #1
 8013dcc:	e04d      	b.n	8013e6a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	7d1b      	ldrb	r3, [r3, #20]
 8013dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013dd6:	b2da      	uxtb	r2, r3
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	7858      	ldrb	r0, [r3, #1]
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013de6:	2301      	movs	r3, #1
 8013de8:	69ba      	ldr	r2, [r7, #24]
 8013dea:	f7fd ff2d 	bl	8011c48 <disk_read>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d004      	beq.n	8013dfe <f_read+0x20a>
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	2201      	movs	r2, #1
 8013df8:	755a      	strb	r2, [r3, #21]
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	e035      	b.n	8013e6a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	69ba      	ldr	r2, [r7, #24]
 8013e02:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	699b      	ldr	r3, [r3, #24]
 8013e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e0c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d901      	bls.n	8013e1e <f_read+0x22a>
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	699b      	ldr	r3, [r3, #24]
 8013e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e2c:	4413      	add	r3, r2
 8013e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013e30:	4619      	mov	r1, r3
 8013e32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013e34:	f7fd ffe8 	bl	8011e08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e3c:	4413      	add	r3, r2
 8013e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	699a      	ldr	r2, [r3, #24]
 8013e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e46:	441a      	add	r2, r3
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	619a      	str	r2, [r3, #24]
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e52:	441a      	add	r2, r3
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	601a      	str	r2, [r3, #0]
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e5c:	1ad3      	subs	r3, r2, r3
 8013e5e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	f47f af01 	bne.w	8013c6a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013e68:	2300      	movs	r3, #0
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3738      	adds	r7, #56	@ 0x38
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}

08013e72 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013e72:	b580      	push	{r7, lr}
 8013e74:	b08c      	sub	sp, #48	@ 0x30
 8013e76:	af00      	add	r7, sp, #0
 8013e78:	60f8      	str	r0, [r7, #12]
 8013e7a:	60b9      	str	r1, [r7, #8]
 8013e7c:	607a      	str	r2, [r7, #4]
 8013e7e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	2200      	movs	r2, #0
 8013e88:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	f107 0210 	add.w	r2, r7, #16
 8013e90:	4611      	mov	r1, r2
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7ff fc78 	bl	8013788 <validate>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d107      	bne.n	8013eb6 <f_write+0x44>
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	7d5b      	ldrb	r3, [r3, #21]
 8013eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013eae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d002      	beq.n	8013ebc <f_write+0x4a>
 8013eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013eba:	e14b      	b.n	8014154 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	7d1b      	ldrb	r3, [r3, #20]
 8013ec0:	f003 0302 	and.w	r3, r3, #2
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d101      	bne.n	8013ecc <f_write+0x5a>
 8013ec8:	2307      	movs	r3, #7
 8013eca:	e143      	b.n	8014154 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	699a      	ldr	r2, [r3, #24]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	441a      	add	r2, r3
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	699b      	ldr	r3, [r3, #24]
 8013ed8:	429a      	cmp	r2, r3
 8013eda:	f080 812d 	bcs.w	8014138 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	699b      	ldr	r3, [r3, #24]
 8013ee2:	43db      	mvns	r3, r3
 8013ee4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013ee6:	e127      	b.n	8014138 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	699b      	ldr	r3, [r3, #24]
 8013eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	f040 80e3 	bne.w	80140bc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	699b      	ldr	r3, [r3, #24]
 8013efa:	0a5b      	lsrs	r3, r3, #9
 8013efc:	693a      	ldr	r2, [r7, #16]
 8013efe:	8952      	ldrh	r2, [r2, #10]
 8013f00:	3a01      	subs	r2, #1
 8013f02:	4013      	ands	r3, r2
 8013f04:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013f06:	69bb      	ldr	r3, [r7, #24]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d143      	bne.n	8013f94 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	699b      	ldr	r3, [r3, #24]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d10c      	bne.n	8013f2e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	689b      	ldr	r3, [r3, #8]
 8013f18:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d11a      	bne.n	8013f56 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	2100      	movs	r1, #0
 8013f24:	4618      	mov	r0, r3
 8013f26:	f7fe fc4e 	bl	80127c6 <create_chain>
 8013f2a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013f2c:	e013      	b.n	8013f56 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d007      	beq.n	8013f46 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	699b      	ldr	r3, [r3, #24]
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	68f8      	ldr	r0, [r7, #12]
 8013f3e:	f7fe fcda 	bl	80128f6 <clmt_clust>
 8013f42:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013f44:	e007      	b.n	8013f56 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013f46:	68fa      	ldr	r2, [r7, #12]
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	69db      	ldr	r3, [r3, #28]
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	4610      	mov	r0, r2
 8013f50:	f7fe fc39 	bl	80127c6 <create_chain>
 8013f54:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	f000 80f2 	beq.w	8014142 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f60:	2b01      	cmp	r3, #1
 8013f62:	d104      	bne.n	8013f6e <f_write+0xfc>
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2202      	movs	r2, #2
 8013f68:	755a      	strb	r2, [r3, #21]
 8013f6a:	2302      	movs	r3, #2
 8013f6c:	e0f2      	b.n	8014154 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f74:	d104      	bne.n	8013f80 <f_write+0x10e>
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	2201      	movs	r2, #1
 8013f7a:	755a      	strb	r2, [r3, #21]
 8013f7c:	2301      	movs	r3, #1
 8013f7e:	e0e9      	b.n	8014154 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f84:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	689b      	ldr	r3, [r3, #8]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d102      	bne.n	8013f94 <f_write+0x122>
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f92:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	7d1b      	ldrb	r3, [r3, #20]
 8013f98:	b25b      	sxtb	r3, r3
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	da18      	bge.n	8013fd0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	7858      	ldrb	r0, [r3, #1]
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	6a1a      	ldr	r2, [r3, #32]
 8013fac:	2301      	movs	r3, #1
 8013fae:	f7fd fe6b 	bl	8011c88 <disk_write>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d004      	beq.n	8013fc2 <f_write+0x150>
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	2201      	movs	r2, #1
 8013fbc:	755a      	strb	r2, [r3, #21]
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	e0c8      	b.n	8014154 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	7d1b      	ldrb	r3, [r3, #20]
 8013fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fca:	b2da      	uxtb	r2, r3
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013fd0:	693a      	ldr	r2, [r7, #16]
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	69db      	ldr	r3, [r3, #28]
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	4610      	mov	r0, r2
 8013fda:	f7fe f9df 	bl	801239c <clust2sect>
 8013fde:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d104      	bne.n	8013ff0 <f_write+0x17e>
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	2202      	movs	r2, #2
 8013fea:	755a      	strb	r2, [r3, #21]
 8013fec:	2302      	movs	r3, #2
 8013fee:	e0b1      	b.n	8014154 <f_write+0x2e2>
			sect += csect;
 8013ff0:	697a      	ldr	r2, [r7, #20]
 8013ff2:	69bb      	ldr	r3, [r7, #24]
 8013ff4:	4413      	add	r3, r2
 8013ff6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	0a5b      	lsrs	r3, r3, #9
 8013ffc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013ffe:	6a3b      	ldr	r3, [r7, #32]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d03c      	beq.n	801407e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014004:	69ba      	ldr	r2, [r7, #24]
 8014006:	6a3b      	ldr	r3, [r7, #32]
 8014008:	4413      	add	r3, r2
 801400a:	693a      	ldr	r2, [r7, #16]
 801400c:	8952      	ldrh	r2, [r2, #10]
 801400e:	4293      	cmp	r3, r2
 8014010:	d905      	bls.n	801401e <f_write+0x1ac>
					cc = fs->csize - csect;
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	895b      	ldrh	r3, [r3, #10]
 8014016:	461a      	mov	r2, r3
 8014018:	69bb      	ldr	r3, [r7, #24]
 801401a:	1ad3      	subs	r3, r2, r3
 801401c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	7858      	ldrb	r0, [r3, #1]
 8014022:	6a3b      	ldr	r3, [r7, #32]
 8014024:	697a      	ldr	r2, [r7, #20]
 8014026:	69f9      	ldr	r1, [r7, #28]
 8014028:	f7fd fe2e 	bl	8011c88 <disk_write>
 801402c:	4603      	mov	r3, r0
 801402e:	2b00      	cmp	r3, #0
 8014030:	d004      	beq.n	801403c <f_write+0x1ca>
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	2201      	movs	r2, #1
 8014036:	755a      	strb	r2, [r3, #21]
 8014038:	2301      	movs	r3, #1
 801403a:	e08b      	b.n	8014154 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	6a1a      	ldr	r2, [r3, #32]
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	1ad3      	subs	r3, r2, r3
 8014044:	6a3a      	ldr	r2, [r7, #32]
 8014046:	429a      	cmp	r2, r3
 8014048:	d915      	bls.n	8014076 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	6a1a      	ldr	r2, [r3, #32]
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	1ad3      	subs	r3, r2, r3
 8014058:	025b      	lsls	r3, r3, #9
 801405a:	69fa      	ldr	r2, [r7, #28]
 801405c:	4413      	add	r3, r2
 801405e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014062:	4619      	mov	r1, r3
 8014064:	f7fd fed0 	bl	8011e08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	7d1b      	ldrb	r3, [r3, #20]
 801406c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014070:	b2da      	uxtb	r2, r3
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014076:	6a3b      	ldr	r3, [r7, #32]
 8014078:	025b      	lsls	r3, r3, #9
 801407a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801407c:	e03f      	b.n	80140fe <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	6a1b      	ldr	r3, [r3, #32]
 8014082:	697a      	ldr	r2, [r7, #20]
 8014084:	429a      	cmp	r2, r3
 8014086:	d016      	beq.n	80140b6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	699a      	ldr	r2, [r3, #24]
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014090:	429a      	cmp	r2, r3
 8014092:	d210      	bcs.n	80140b6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	7858      	ldrb	r0, [r3, #1]
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801409e:	2301      	movs	r3, #1
 80140a0:	697a      	ldr	r2, [r7, #20]
 80140a2:	f7fd fdd1 	bl	8011c48 <disk_read>
 80140a6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d004      	beq.n	80140b6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	2201      	movs	r2, #1
 80140b0:	755a      	strb	r2, [r3, #21]
 80140b2:	2301      	movs	r3, #1
 80140b4:	e04e      	b.n	8014154 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	697a      	ldr	r2, [r7, #20]
 80140ba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	699b      	ldr	r3, [r3, #24]
 80140c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140c4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80140c8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80140ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d901      	bls.n	80140d6 <f_write+0x264>
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	699b      	ldr	r3, [r3, #24]
 80140e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140e4:	4413      	add	r3, r2
 80140e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140e8:	69f9      	ldr	r1, [r7, #28]
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7fd fe8c 	bl	8011e08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	7d1b      	ldrb	r3, [r3, #20]
 80140f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80140f8:	b2da      	uxtb	r2, r3
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80140fe:	69fa      	ldr	r2, [r7, #28]
 8014100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014102:	4413      	add	r3, r2
 8014104:	61fb      	str	r3, [r7, #28]
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	699a      	ldr	r2, [r3, #24]
 801410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801410c:	441a      	add	r2, r3
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	619a      	str	r2, [r3, #24]
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	68da      	ldr	r2, [r3, #12]
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	699b      	ldr	r3, [r3, #24]
 801411a:	429a      	cmp	r2, r3
 801411c:	bf38      	it	cc
 801411e:	461a      	movcc	r2, r3
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	60da      	str	r2, [r3, #12]
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	681a      	ldr	r2, [r3, #0]
 8014128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801412a:	441a      	add	r2, r3
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	601a      	str	r2, [r3, #0]
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014134:	1ad3      	subs	r3, r2, r3
 8014136:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2b00      	cmp	r3, #0
 801413c:	f47f aed4 	bne.w	8013ee8 <f_write+0x76>
 8014140:	e000      	b.n	8014144 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014142:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	7d1b      	ldrb	r3, [r3, #20]
 8014148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801414c:	b2da      	uxtb	r2, r3
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014152:	2300      	movs	r3, #0
}
 8014154:	4618      	mov	r0, r3
 8014156:	3730      	adds	r7, #48	@ 0x30
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}

0801415c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b086      	sub	sp, #24
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	f107 0208 	add.w	r2, r7, #8
 801416a:	4611      	mov	r1, r2
 801416c:	4618      	mov	r0, r3
 801416e:	f7ff fb0b 	bl	8013788 <validate>
 8014172:	4603      	mov	r3, r0
 8014174:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014176:	7dfb      	ldrb	r3, [r7, #23]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d168      	bne.n	801424e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	7d1b      	ldrb	r3, [r3, #20]
 8014180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014184:	2b00      	cmp	r3, #0
 8014186:	d062      	beq.n	801424e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	7d1b      	ldrb	r3, [r3, #20]
 801418c:	b25b      	sxtb	r3, r3
 801418e:	2b00      	cmp	r3, #0
 8014190:	da15      	bge.n	80141be <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	7858      	ldrb	r0, [r3, #1]
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	6a1a      	ldr	r2, [r3, #32]
 80141a0:	2301      	movs	r3, #1
 80141a2:	f7fd fd71 	bl	8011c88 <disk_write>
 80141a6:	4603      	mov	r3, r0
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d001      	beq.n	80141b0 <f_sync+0x54>
 80141ac:	2301      	movs	r3, #1
 80141ae:	e04f      	b.n	8014250 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	7d1b      	ldrb	r3, [r3, #20]
 80141b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141b8:	b2da      	uxtb	r2, r3
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80141be:	f7fb fa3f 	bl	800f640 <get_fattime>
 80141c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80141c4:	68ba      	ldr	r2, [r7, #8]
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141ca:	4619      	mov	r1, r3
 80141cc:	4610      	mov	r0, r2
 80141ce:	f7fe f849 	bl	8012264 <move_window>
 80141d2:	4603      	mov	r3, r0
 80141d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80141d6:	7dfb      	ldrb	r3, [r7, #23]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d138      	bne.n	801424e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80141e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	330b      	adds	r3, #11
 80141e6:	781a      	ldrb	r2, [r3, #0]
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	330b      	adds	r3, #11
 80141ec:	f042 0220 	orr.w	r2, r2, #32
 80141f0:	b2d2      	uxtb	r2, r2
 80141f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	6818      	ldr	r0, [r3, #0]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	689b      	ldr	r3, [r3, #8]
 80141fc:	461a      	mov	r2, r3
 80141fe:	68f9      	ldr	r1, [r7, #12]
 8014200:	f7fe fd53 	bl	8012caa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	f103 021c 	add.w	r2, r3, #28
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	68db      	ldr	r3, [r3, #12]
 801420e:	4619      	mov	r1, r3
 8014210:	4610      	mov	r0, r2
 8014212:	f7fd fdcd 	bl	8011db0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	3316      	adds	r3, #22
 801421a:	6939      	ldr	r1, [r7, #16]
 801421c:	4618      	mov	r0, r3
 801421e:	f7fd fdc7 	bl	8011db0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	3312      	adds	r3, #18
 8014226:	2100      	movs	r1, #0
 8014228:	4618      	mov	r0, r3
 801422a:	f7fd fda6 	bl	8011d7a <st_word>
					fs->wflag = 1;
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	2201      	movs	r2, #1
 8014232:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014234:	68bb      	ldr	r3, [r7, #8]
 8014236:	4618      	mov	r0, r3
 8014238:	f7fe f842 	bl	80122c0 <sync_fs>
 801423c:	4603      	mov	r3, r0
 801423e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	7d1b      	ldrb	r3, [r3, #20]
 8014244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014248:	b2da      	uxtb	r2, r3
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801424e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014250:	4618      	mov	r0, r3
 8014252:	3718      	adds	r7, #24
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f7ff ff7b 	bl	801415c <f_sync>
 8014266:	4603      	mov	r3, r0
 8014268:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801426a:	7bfb      	ldrb	r3, [r7, #15]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d118      	bne.n	80142a2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f107 0208 	add.w	r2, r7, #8
 8014276:	4611      	mov	r1, r2
 8014278:	4618      	mov	r0, r3
 801427a:	f7ff fa85 	bl	8013788 <validate>
 801427e:	4603      	mov	r3, r0
 8014280:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014282:	7bfb      	ldrb	r3, [r7, #15]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d10c      	bne.n	80142a2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	691b      	ldr	r3, [r3, #16]
 801428c:	4618      	mov	r0, r3
 801428e:	f7fd ff45 	bl	801211c <dec_lock>
 8014292:	4603      	mov	r3, r0
 8014294:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014296:	7bfb      	ldrb	r3, [r7, #15]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d102      	bne.n	80142a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2200      	movs	r2, #0
 80142a0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80142a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3710      	adds	r7, #16
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b090      	sub	sp, #64	@ 0x40
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
 80142b4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f107 0208 	add.w	r2, r7, #8
 80142bc:	4611      	mov	r1, r2
 80142be:	4618      	mov	r0, r3
 80142c0:	f7ff fa62 	bl	8013788 <validate>
 80142c4:	4603      	mov	r3, r0
 80142c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80142ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d103      	bne.n	80142da <f_lseek+0x2e>
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	7d5b      	ldrb	r3, [r3, #21]
 80142d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80142da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d002      	beq.n	80142e8 <f_lseek+0x3c>
 80142e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80142e6:	e1e6      	b.n	80146b6 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	f000 80d1 	beq.w	8014494 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142f8:	d15a      	bne.n	80143b0 <f_lseek+0x104>
			tbl = fp->cltbl;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142fe:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014302:	1d1a      	adds	r2, r3, #4
 8014304:	627a      	str	r2, [r7, #36]	@ 0x24
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	617b      	str	r3, [r7, #20]
 801430a:	2302      	movs	r3, #2
 801430c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	689b      	ldr	r3, [r3, #8]
 8014312:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8014314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014316:	2b00      	cmp	r3, #0
 8014318:	d03a      	beq.n	8014390 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801431a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801431c:	613b      	str	r3, [r7, #16]
 801431e:	2300      	movs	r3, #0
 8014320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014324:	3302      	adds	r3, #2
 8014326:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8014328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801432a:	60fb      	str	r3, [r7, #12]
 801432c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801432e:	3301      	adds	r3, #1
 8014330:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014336:	4618      	mov	r0, r3
 8014338:	f7fe f84f 	bl	80123da <get_fat>
 801433c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014340:	2b01      	cmp	r3, #1
 8014342:	d804      	bhi.n	801434e <f_lseek+0xa2>
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2202      	movs	r2, #2
 8014348:	755a      	strb	r2, [r3, #21]
 801434a:	2302      	movs	r3, #2
 801434c:	e1b3      	b.n	80146b6 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014354:	d104      	bne.n	8014360 <f_lseek+0xb4>
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	2201      	movs	r2, #1
 801435a:	755a      	strb	r2, [r3, #21]
 801435c:	2301      	movs	r3, #1
 801435e:	e1aa      	b.n	80146b6 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	3301      	adds	r3, #1
 8014364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014366:	429a      	cmp	r2, r3
 8014368:	d0de      	beq.n	8014328 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801436a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	429a      	cmp	r2, r3
 8014370:	d809      	bhi.n	8014386 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014374:	1d1a      	adds	r2, r3, #4
 8014376:	627a      	str	r2, [r7, #36]	@ 0x24
 8014378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801437a:	601a      	str	r2, [r3, #0]
 801437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801437e:	1d1a      	adds	r2, r3, #4
 8014380:	627a      	str	r2, [r7, #36]	@ 0x24
 8014382:	693a      	ldr	r2, [r7, #16]
 8014384:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	695b      	ldr	r3, [r3, #20]
 801438a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801438c:	429a      	cmp	r2, r3
 801438e:	d3c4      	bcc.n	801431a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014396:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	429a      	cmp	r2, r3
 801439e:	d803      	bhi.n	80143a8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80143a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143a2:	2200      	movs	r2, #0
 80143a4:	601a      	str	r2, [r3, #0]
 80143a6:	e184      	b.n	80146b2 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80143a8:	2311      	movs	r3, #17
 80143aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80143ae:	e180      	b.n	80146b2 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	68db      	ldr	r3, [r3, #12]
 80143b4:	683a      	ldr	r2, [r7, #0]
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d902      	bls.n	80143c0 <f_lseek+0x114>
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	68db      	ldr	r3, [r3, #12]
 80143be:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	683a      	ldr	r2, [r7, #0]
 80143c4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	f000 8172 	beq.w	80146b2 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	3b01      	subs	r3, #1
 80143d2:	4619      	mov	r1, r3
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f7fe fa8e 	bl	80128f6 <clmt_clust>
 80143da:	4602      	mov	r2, r0
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80143e0:	68ba      	ldr	r2, [r7, #8]
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	69db      	ldr	r3, [r3, #28]
 80143e6:	4619      	mov	r1, r3
 80143e8:	4610      	mov	r0, r2
 80143ea:	f7fd ffd7 	bl	801239c <clust2sect>
 80143ee:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80143f0:	69bb      	ldr	r3, [r7, #24]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d104      	bne.n	8014400 <f_lseek+0x154>
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2202      	movs	r2, #2
 80143fa:	755a      	strb	r2, [r3, #21]
 80143fc:	2302      	movs	r3, #2
 80143fe:	e15a      	b.n	80146b6 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	3b01      	subs	r3, #1
 8014404:	0a5b      	lsrs	r3, r3, #9
 8014406:	68ba      	ldr	r2, [r7, #8]
 8014408:	8952      	ldrh	r2, [r2, #10]
 801440a:	3a01      	subs	r2, #1
 801440c:	4013      	ands	r3, r2
 801440e:	69ba      	ldr	r2, [r7, #24]
 8014410:	4413      	add	r3, r2
 8014412:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	699b      	ldr	r3, [r3, #24]
 8014418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801441c:	2b00      	cmp	r3, #0
 801441e:	f000 8148 	beq.w	80146b2 <f_lseek+0x406>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	6a1b      	ldr	r3, [r3, #32]
 8014426:	69ba      	ldr	r2, [r7, #24]
 8014428:	429a      	cmp	r2, r3
 801442a:	f000 8142 	beq.w	80146b2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	7d1b      	ldrb	r3, [r3, #20]
 8014432:	b25b      	sxtb	r3, r3
 8014434:	2b00      	cmp	r3, #0
 8014436:	da18      	bge.n	801446a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	7858      	ldrb	r0, [r3, #1]
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	6a1a      	ldr	r2, [r3, #32]
 8014446:	2301      	movs	r3, #1
 8014448:	f7fd fc1e 	bl	8011c88 <disk_write>
 801444c:	4603      	mov	r3, r0
 801444e:	2b00      	cmp	r3, #0
 8014450:	d004      	beq.n	801445c <f_lseek+0x1b0>
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2201      	movs	r2, #1
 8014456:	755a      	strb	r2, [r3, #21]
 8014458:	2301      	movs	r3, #1
 801445a:	e12c      	b.n	80146b6 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	7d1b      	ldrb	r3, [r3, #20]
 8014460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014464:	b2da      	uxtb	r2, r3
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801446a:	68bb      	ldr	r3, [r7, #8]
 801446c:	7858      	ldrb	r0, [r3, #1]
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014474:	2301      	movs	r3, #1
 8014476:	69ba      	ldr	r2, [r7, #24]
 8014478:	f7fd fbe6 	bl	8011c48 <disk_read>
 801447c:	4603      	mov	r3, r0
 801447e:	2b00      	cmp	r3, #0
 8014480:	d004      	beq.n	801448c <f_lseek+0x1e0>
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2201      	movs	r2, #1
 8014486:	755a      	strb	r2, [r3, #21]
 8014488:	2301      	movs	r3, #1
 801448a:	e114      	b.n	80146b6 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	69ba      	ldr	r2, [r7, #24]
 8014490:	621a      	str	r2, [r3, #32]
 8014492:	e10e      	b.n	80146b2 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	68db      	ldr	r3, [r3, #12]
 8014498:	683a      	ldr	r2, [r7, #0]
 801449a:	429a      	cmp	r2, r3
 801449c:	d908      	bls.n	80144b0 <f_lseek+0x204>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	7d1b      	ldrb	r3, [r3, #20]
 80144a2:	f003 0302 	and.w	r3, r3, #2
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d102      	bne.n	80144b0 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	68db      	ldr	r3, [r3, #12]
 80144ae:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	699b      	ldr	r3, [r3, #24]
 80144b4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80144b6:	2300      	movs	r3, #0
 80144b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80144be:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	f000 80a7 	beq.w	8014616 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	895b      	ldrh	r3, [r3, #10]
 80144cc:	025b      	lsls	r3, r3, #9
 80144ce:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80144d0:	6a3b      	ldr	r3, [r7, #32]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d01b      	beq.n	801450e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	1e5a      	subs	r2, r3, #1
 80144da:	69fb      	ldr	r3, [r7, #28]
 80144dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80144e0:	6a3b      	ldr	r3, [r7, #32]
 80144e2:	1e59      	subs	r1, r3, #1
 80144e4:	69fb      	ldr	r3, [r7, #28]
 80144e6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d30f      	bcc.n	801450e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80144ee:	6a3b      	ldr	r3, [r7, #32]
 80144f0:	1e5a      	subs	r2, r3, #1
 80144f2:	69fb      	ldr	r3, [r7, #28]
 80144f4:	425b      	negs	r3, r3
 80144f6:	401a      	ands	r2, r3
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	699b      	ldr	r3, [r3, #24]
 8014500:	683a      	ldr	r2, [r7, #0]
 8014502:	1ad3      	subs	r3, r2, r3
 8014504:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	69db      	ldr	r3, [r3, #28]
 801450a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801450c:	e022      	b.n	8014554 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	689b      	ldr	r3, [r3, #8]
 8014512:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014516:	2b00      	cmp	r3, #0
 8014518:	d119      	bne.n	801454e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2100      	movs	r1, #0
 801451e:	4618      	mov	r0, r3
 8014520:	f7fe f951 	bl	80127c6 <create_chain>
 8014524:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014528:	2b01      	cmp	r3, #1
 801452a:	d104      	bne.n	8014536 <f_lseek+0x28a>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2202      	movs	r2, #2
 8014530:	755a      	strb	r2, [r3, #21]
 8014532:	2302      	movs	r3, #2
 8014534:	e0bf      	b.n	80146b6 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801453c:	d104      	bne.n	8014548 <f_lseek+0x29c>
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2201      	movs	r2, #1
 8014542:	755a      	strb	r2, [r3, #21]
 8014544:	2301      	movs	r3, #1
 8014546:	e0b6      	b.n	80146b6 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801454c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014552:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014556:	2b00      	cmp	r3, #0
 8014558:	d05d      	beq.n	8014616 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801455a:	e03a      	b.n	80145d2 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801455c:	683a      	ldr	r2, [r7, #0]
 801455e:	69fb      	ldr	r3, [r7, #28]
 8014560:	1ad3      	subs	r3, r2, r3
 8014562:	603b      	str	r3, [r7, #0]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	699a      	ldr	r2, [r3, #24]
 8014568:	69fb      	ldr	r3, [r7, #28]
 801456a:	441a      	add	r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	7d1b      	ldrb	r3, [r3, #20]
 8014574:	f003 0302 	and.w	r3, r3, #2
 8014578:	2b00      	cmp	r3, #0
 801457a:	d00b      	beq.n	8014594 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014580:	4618      	mov	r0, r3
 8014582:	f7fe f920 	bl	80127c6 <create_chain>
 8014586:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801458a:	2b00      	cmp	r3, #0
 801458c:	d108      	bne.n	80145a0 <f_lseek+0x2f4>
							ofs = 0; break;
 801458e:	2300      	movs	r3, #0
 8014590:	603b      	str	r3, [r7, #0]
 8014592:	e022      	b.n	80145da <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014598:	4618      	mov	r0, r3
 801459a:	f7fd ff1e 	bl	80123da <get_fat>
 801459e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80145a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145a6:	d104      	bne.n	80145b2 <f_lseek+0x306>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2201      	movs	r2, #1
 80145ac:	755a      	strb	r2, [r3, #21]
 80145ae:	2301      	movs	r3, #1
 80145b0:	e081      	b.n	80146b6 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80145b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145b4:	2b01      	cmp	r3, #1
 80145b6:	d904      	bls.n	80145c2 <f_lseek+0x316>
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	695b      	ldr	r3, [r3, #20]
 80145bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80145be:	429a      	cmp	r2, r3
 80145c0:	d304      	bcc.n	80145cc <f_lseek+0x320>
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2202      	movs	r2, #2
 80145c6:	755a      	strb	r2, [r3, #21]
 80145c8:	2302      	movs	r3, #2
 80145ca:	e074      	b.n	80146b6 <f_lseek+0x40a>
					fp->clust = clst;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80145d0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80145d2:	683a      	ldr	r2, [r7, #0]
 80145d4:	69fb      	ldr	r3, [r7, #28]
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d8c0      	bhi.n	801455c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	699a      	ldr	r2, [r3, #24]
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	441a      	add	r2, r3
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d012      	beq.n	8014616 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7fd fed1 	bl	801239c <clust2sect>
 80145fa:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80145fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d104      	bne.n	801460c <f_lseek+0x360>
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	2202      	movs	r2, #2
 8014606:	755a      	strb	r2, [r3, #21]
 8014608:	2302      	movs	r3, #2
 801460a:	e054      	b.n	80146b6 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	0a5b      	lsrs	r3, r3, #9
 8014610:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014612:	4413      	add	r3, r2
 8014614:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	699a      	ldr	r2, [r3, #24]
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	429a      	cmp	r2, r3
 8014620:	d90a      	bls.n	8014638 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	699a      	ldr	r2, [r3, #24]
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	7d1b      	ldrb	r3, [r3, #20]
 801462e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014632:	b2da      	uxtb	r2, r3
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	699b      	ldr	r3, [r3, #24]
 801463c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014640:	2b00      	cmp	r3, #0
 8014642:	d036      	beq.n	80146b2 <f_lseek+0x406>
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	6a1b      	ldr	r3, [r3, #32]
 8014648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801464a:	429a      	cmp	r2, r3
 801464c:	d031      	beq.n	80146b2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	7d1b      	ldrb	r3, [r3, #20]
 8014652:	b25b      	sxtb	r3, r3
 8014654:	2b00      	cmp	r3, #0
 8014656:	da18      	bge.n	801468a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	7858      	ldrb	r0, [r3, #1]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6a1a      	ldr	r2, [r3, #32]
 8014666:	2301      	movs	r3, #1
 8014668:	f7fd fb0e 	bl	8011c88 <disk_write>
 801466c:	4603      	mov	r3, r0
 801466e:	2b00      	cmp	r3, #0
 8014670:	d004      	beq.n	801467c <f_lseek+0x3d0>
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	2201      	movs	r2, #1
 8014676:	755a      	strb	r2, [r3, #21]
 8014678:	2301      	movs	r3, #1
 801467a:	e01c      	b.n	80146b6 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	7d1b      	ldrb	r3, [r3, #20]
 8014680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014684:	b2da      	uxtb	r2, r3
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	7858      	ldrb	r0, [r3, #1]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014694:	2301      	movs	r3, #1
 8014696:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014698:	f7fd fad6 	bl	8011c48 <disk_read>
 801469c:	4603      	mov	r3, r0
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d004      	beq.n	80146ac <f_lseek+0x400>
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	2201      	movs	r2, #1
 80146a6:	755a      	strb	r2, [r3, #21]
 80146a8:	2301      	movs	r3, #1
 80146aa:	e004      	b.n	80146b6 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80146b0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80146b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80146b6:	4618      	mov	r0, r3
 80146b8:	3740      	adds	r7, #64	@ 0x40
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}

080146be <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80146be:	b580      	push	{r7, lr}
 80146c0:	b086      	sub	sp, #24
 80146c2:	af00      	add	r7, sp, #0
 80146c4:	6078      	str	r0, [r7, #4]
 80146c6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d101      	bne.n	80146d2 <f_opendir+0x14>
 80146ce:	2309      	movs	r3, #9
 80146d0:	e064      	b.n	801479c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80146d6:	f107 010c 	add.w	r1, r7, #12
 80146da:	463b      	mov	r3, r7
 80146dc:	2200      	movs	r2, #0
 80146de:	4618      	mov	r0, r3
 80146e0:	f7fe fe06 	bl	80132f0 <find_volume>
 80146e4:	4603      	mov	r3, r0
 80146e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80146e8:	7dfb      	ldrb	r3, [r7, #23]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d14f      	bne.n	801478e <f_opendir+0xd0>
		obj->fs = fs;
 80146ee:	68fa      	ldr	r2, [r7, #12]
 80146f0:	693b      	ldr	r3, [r7, #16]
 80146f2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	4619      	mov	r1, r3
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f7fe fced 	bl	80130d8 <follow_path>
 80146fe:	4603      	mov	r3, r0
 8014700:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8014702:	7dfb      	ldrb	r3, [r7, #23]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d13d      	bne.n	8014784 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801470e:	b25b      	sxtb	r3, r3
 8014710:	2b00      	cmp	r3, #0
 8014712:	db12      	blt.n	801473a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	799b      	ldrb	r3, [r3, #6]
 8014718:	f003 0310 	and.w	r3, r3, #16
 801471c:	2b00      	cmp	r3, #0
 801471e:	d00a      	beq.n	8014736 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014720:	68fa      	ldr	r2, [r7, #12]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	6a1b      	ldr	r3, [r3, #32]
 8014726:	4619      	mov	r1, r3
 8014728:	4610      	mov	r0, r2
 801472a:	f7fe fa9f 	bl	8012c6c <ld_clust>
 801472e:	4602      	mov	r2, r0
 8014730:	693b      	ldr	r3, [r7, #16]
 8014732:	609a      	str	r2, [r3, #8]
 8014734:	e001      	b.n	801473a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014736:	2305      	movs	r3, #5
 8014738:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801473a:	7dfb      	ldrb	r3, [r7, #23]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d121      	bne.n	8014784 <f_opendir+0xc6>
				obj->id = fs->id;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	88da      	ldrh	r2, [r3, #6]
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014748:	2100      	movs	r1, #0
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	f7fe f907 	bl	801295e <dir_sdi>
 8014750:	4603      	mov	r3, r0
 8014752:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8014754:	7dfb      	ldrb	r3, [r7, #23]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d114      	bne.n	8014784 <f_opendir+0xc6>
					if (obj->sclust) {
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	689b      	ldr	r3, [r3, #8]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d00d      	beq.n	801477e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8014762:	2100      	movs	r1, #0
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f7fd fc4b 	bl	8012000 <inc_lock>
 801476a:	4602      	mov	r2, r0
 801476c:	693b      	ldr	r3, [r7, #16]
 801476e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	691b      	ldr	r3, [r3, #16]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d105      	bne.n	8014784 <f_opendir+0xc6>
 8014778:	2312      	movs	r3, #18
 801477a:	75fb      	strb	r3, [r7, #23]
 801477c:	e002      	b.n	8014784 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	2200      	movs	r2, #0
 8014782:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014784:	7dfb      	ldrb	r3, [r7, #23]
 8014786:	2b04      	cmp	r3, #4
 8014788:	d101      	bne.n	801478e <f_opendir+0xd0>
 801478a:	2305      	movs	r3, #5
 801478c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801478e:	7dfb      	ldrb	r3, [r7, #23]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d002      	beq.n	801479a <f_opendir+0xdc>
 8014794:	693b      	ldr	r3, [r7, #16]
 8014796:	2200      	movs	r2, #0
 8014798:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801479a:	7dfb      	ldrb	r3, [r7, #23]
}
 801479c:	4618      	mov	r0, r3
 801479e:	3718      	adds	r7, #24
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b084      	sub	sp, #16
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f107 0208 	add.w	r2, r7, #8
 80147b2:	4611      	mov	r1, r2
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fe ffe7 	bl	8013788 <validate>
 80147ba:	4603      	mov	r3, r0
 80147bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80147be:	7bfb      	ldrb	r3, [r7, #15]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d110      	bne.n	80147e6 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	691b      	ldr	r3, [r3, #16]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d006      	beq.n	80147da <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	691b      	ldr	r3, [r3, #16]
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7fd fca3 	bl	801211c <dec_lock>
 80147d6:	4603      	mov	r3, r0
 80147d8:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80147da:	7bfb      	ldrb	r3, [r7, #15]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d102      	bne.n	80147e6 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2200      	movs	r2, #0
 80147e4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80147e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80147e8:	4618      	mov	r0, r3
 80147ea:	3710      	adds	r7, #16
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}

080147f0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b084      	sub	sp, #16
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f107 0208 	add.w	r2, r7, #8
 8014800:	4611      	mov	r1, r2
 8014802:	4618      	mov	r0, r3
 8014804:	f7fe ffc0 	bl	8013788 <validate>
 8014808:	4603      	mov	r3, r0
 801480a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801480c:	7bfb      	ldrb	r3, [r7, #15]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d126      	bne.n	8014860 <f_readdir+0x70>
		if (!fno) {
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d106      	bne.n	8014826 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014818:	2100      	movs	r1, #0
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f7fe f89f 	bl	801295e <dir_sdi>
 8014820:	4603      	mov	r3, r0
 8014822:	73fb      	strb	r3, [r7, #15]
 8014824:	e01c      	b.n	8014860 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8014826:	2100      	movs	r1, #0
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f7fe fa5e 	bl	8012cea <dir_read>
 801482e:	4603      	mov	r3, r0
 8014830:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8014832:	7bfb      	ldrb	r3, [r7, #15]
 8014834:	2b04      	cmp	r3, #4
 8014836:	d101      	bne.n	801483c <f_readdir+0x4c>
 8014838:	2300      	movs	r3, #0
 801483a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801483c:	7bfb      	ldrb	r3, [r7, #15]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d10e      	bne.n	8014860 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014842:	6839      	ldr	r1, [r7, #0]
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f7fe fb52 	bl	8012eee <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801484a:	2100      	movs	r1, #0
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f7fe f901 	bl	8012a54 <dir_next>
 8014852:	4603      	mov	r3, r0
 8014854:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014856:	7bfb      	ldrb	r3, [r7, #15]
 8014858:	2b04      	cmp	r3, #4
 801485a:	d101      	bne.n	8014860 <f_readdir+0x70>
 801485c:	2300      	movs	r3, #0
 801485e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8014860:	7bfb      	ldrb	r3, [r7, #15]
}
 8014862:	4618      	mov	r0, r3
 8014864:	3710      	adds	r7, #16
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}

0801486a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801486a:	b580      	push	{r7, lr}
 801486c:	b090      	sub	sp, #64	@ 0x40
 801486e:	af00      	add	r7, sp, #0
 8014870:	6078      	str	r0, [r7, #4]
 8014872:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8014874:	f107 010c 	add.w	r1, r7, #12
 8014878:	1d3b      	adds	r3, r7, #4
 801487a:	2200      	movs	r2, #0
 801487c:	4618      	mov	r0, r3
 801487e:	f7fe fd37 	bl	80132f0 <find_volume>
 8014882:	4603      	mov	r3, r0
 8014884:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8014888:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801488c:	2b00      	cmp	r3, #0
 801488e:	d11f      	bne.n	80148d0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014890:	687a      	ldr	r2, [r7, #4]
 8014892:	f107 030c 	add.w	r3, r7, #12
 8014896:	4611      	mov	r1, r2
 8014898:	4618      	mov	r0, r3
 801489a:	f7fe fc1d 	bl	80130d8 <follow_path>
 801489e:	4603      	mov	r3, r0
 80148a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80148a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d111      	bne.n	80148d0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80148ac:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80148b0:	b25b      	sxtb	r3, r3
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	da03      	bge.n	80148be <f_stat+0x54>
				res = FR_INVALID_NAME;
 80148b6:	2306      	movs	r3, #6
 80148b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80148bc:	e008      	b.n	80148d0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d005      	beq.n	80148d0 <f_stat+0x66>
 80148c4:	f107 030c 	add.w	r3, r7, #12
 80148c8:	6839      	ldr	r1, [r7, #0]
 80148ca:	4618      	mov	r0, r3
 80148cc:	f7fe fb0f 	bl	8012eee <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80148d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3740      	adds	r7, #64	@ 0x40
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}

080148dc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b09e      	sub	sp, #120	@ 0x78
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80148e4:	2300      	movs	r3, #0
 80148e6:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80148e8:	f107 010c 	add.w	r1, r7, #12
 80148ec:	1d3b      	adds	r3, r7, #4
 80148ee:	2202      	movs	r2, #2
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7fe fcfd 	bl	80132f0 <find_volume>
 80148f6:	4603      	mov	r3, r0
 80148f8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8014900:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014904:	2b00      	cmp	r3, #0
 8014906:	f040 808e 	bne.w	8014a26 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801490a:	687a      	ldr	r2, [r7, #4]
 801490c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014910:	4611      	mov	r1, r2
 8014912:	4618      	mov	r0, r3
 8014914:	f7fe fbe0 	bl	80130d8 <follow_path>
 8014918:	4603      	mov	r3, r0
 801491a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801491e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014922:	2b00      	cmp	r3, #0
 8014924:	d108      	bne.n	8014938 <f_unlink+0x5c>
 8014926:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801492a:	2102      	movs	r1, #2
 801492c:	4618      	mov	r0, r3
 801492e:	f7fd fae9 	bl	8011f04 <chk_lock>
 8014932:	4603      	mov	r3, r0
 8014934:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014938:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801493c:	2b00      	cmp	r3, #0
 801493e:	d172      	bne.n	8014a26 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014940:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8014944:	b25b      	sxtb	r3, r3
 8014946:	2b00      	cmp	r3, #0
 8014948:	da03      	bge.n	8014952 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801494a:	2306      	movs	r3, #6
 801494c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8014950:	e008      	b.n	8014964 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014952:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8014956:	f003 0301 	and.w	r3, r3, #1
 801495a:	2b00      	cmp	r3, #0
 801495c:	d002      	beq.n	8014964 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801495e:	2307      	movs	r3, #7
 8014960:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 8014964:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014968:	2b00      	cmp	r3, #0
 801496a:	d134      	bne.n	80149d6 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014970:	4611      	mov	r1, r2
 8014972:	4618      	mov	r0, r3
 8014974:	f7fe f97a 	bl	8012c6c <ld_clust>
 8014978:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801497a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801497e:	f003 0310 	and.w	r3, r3, #16
 8014982:	2b00      	cmp	r3, #0
 8014984:	d027      	beq.n	80149d6 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801498a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801498c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801498e:	f107 0310 	add.w	r3, r7, #16
 8014992:	2100      	movs	r1, #0
 8014994:	4618      	mov	r0, r3
 8014996:	f7fd ffe2 	bl	801295e <dir_sdi>
 801499a:	4603      	mov	r3, r0
 801499c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 80149a0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d116      	bne.n	80149d6 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80149a8:	f107 0310 	add.w	r3, r7, #16
 80149ac:	2100      	movs	r1, #0
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7fe f99b 	bl	8012cea <dir_read>
 80149b4:	4603      	mov	r3, r0
 80149b6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80149ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d102      	bne.n	80149c8 <f_unlink+0xec>
 80149c2:	2307      	movs	r3, #7
 80149c4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80149c8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80149cc:	2b04      	cmp	r3, #4
 80149ce:	d102      	bne.n	80149d6 <f_unlink+0xfa>
 80149d0:	2300      	movs	r3, #0
 80149d2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80149d6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d123      	bne.n	8014a26 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80149de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7fe fa65 	bl	8012eb2 <dir_remove>
 80149e8:	4603      	mov	r3, r0
 80149ea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80149ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d10c      	bne.n	8014a10 <f_unlink+0x134>
 80149f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d009      	beq.n	8014a10 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80149fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014a00:	2200      	movs	r2, #0
 8014a02:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8014a04:	4618      	mov	r0, r3
 8014a06:	f7fd fe79 	bl	80126fc <remove_chain>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014a10:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d106      	bne.n	8014a26 <f_unlink+0x14a>
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f7fd fc50 	bl	80122c0 <sync_fs>
 8014a20:	4603      	mov	r3, r0
 8014a22:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014a26:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	3778      	adds	r7, #120	@ 0x78
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bd80      	pop	{r7, pc}

08014a32 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 8014a32:	b590      	push	{r4, r7, lr}
 8014a34:	b0a5      	sub	sp, #148	@ 0x94
 8014a36:	af00      	add	r7, sp, #0
 8014a38:	6078      	str	r0, [r7, #4]
 8014a3a:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 8014a3c:	463b      	mov	r3, r7
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7fe fbbb 	bl	80131ba <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 8014a44:	f107 0120 	add.w	r1, r7, #32
 8014a48:	1d3b      	adds	r3, r7, #4
 8014a4a:	2202      	movs	r2, #2
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7fe fc4f 	bl	80132f0 <find_volume>
 8014a52:	4603      	mov	r3, r0
 8014a54:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 8014a58:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	f040 80db 	bne.w	8014c18 <f_rename+0x1e6>
		djo.obj.fs = fs;
 8014a62:	6a3b      	ldr	r3, [r7, #32]
 8014a64:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 8014a66:	687a      	ldr	r2, [r7, #4]
 8014a68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8014a6c:	4611      	mov	r1, r2
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f7fe fb32 	bl	80130d8 <follow_path>
 8014a74:	4603      	mov	r3, r0
 8014a76:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8014a7a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d108      	bne.n	8014a94 <f_rename+0x62>
 8014a82:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8014a86:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d002      	beq.n	8014a94 <f_rename+0x62>
 8014a8e:	2306      	movs	r3, #6
 8014a90:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 8014a94:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d108      	bne.n	8014aae <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 8014a9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8014aa0:	2102      	movs	r1, #2
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7fd fa2e 	bl	8011f04 <chk_lock>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 8014aae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	f040 80b0 	bne.w	8014c18 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 8014ab8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014aba:	f103 010b 	add.w	r1, r3, #11
 8014abe:	f107 0308 	add.w	r3, r7, #8
 8014ac2:	2215      	movs	r2, #21
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7fd f99f 	bl	8011e08 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8014aca:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8014ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014ad2:	2230      	movs	r2, #48	@ 0x30
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7fd f997 	bl	8011e08 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8014ada:	683a      	ldr	r2, [r7, #0]
 8014adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014ae0:	4611      	mov	r1, r2
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fe faf8 	bl	80130d8 <follow_path>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8014aee:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d10c      	bne.n	8014b10 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8014af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014af8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d105      	bne.n	8014b0a <f_rename+0xd8>
 8014afe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014b00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014b02:	429a      	cmp	r2, r3
 8014b04:	d101      	bne.n	8014b0a <f_rename+0xd8>
 8014b06:	2304      	movs	r3, #4
 8014b08:	e000      	b.n	8014b0c <f_rename+0xda>
 8014b0a:	2308      	movs	r3, #8
 8014b0c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8014b10:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8014b14:	2b04      	cmp	r3, #4
 8014b16:	d168      	bne.n	8014bea <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 8014b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f7fe f996 	bl	8012e4e <dir_register>
 8014b22:	4603      	mov	r3, r0
 8014b24:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 8014b28:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d15c      	bne.n	8014bea <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 8014b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014b32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 8014b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014b3a:	f103 000d 	add.w	r0, r3, #13
 8014b3e:	f107 0308 	add.w	r3, r7, #8
 8014b42:	3302      	adds	r3, #2
 8014b44:	2213      	movs	r2, #19
 8014b46:	4619      	mov	r1, r3
 8014b48:	f7fd f95e 	bl	8011e08 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 8014b4c:	7a3a      	ldrb	r2, [r7, #8]
 8014b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014b52:	330b      	adds	r3, #11
 8014b54:	f042 0220 	orr.w	r2, r2, #32
 8014b58:	b2d2      	uxtb	r2, r2
 8014b5a:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 8014b5c:	6a3b      	ldr	r3, [r7, #32]
 8014b5e:	2201      	movs	r2, #1
 8014b60:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8014b62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014b66:	330b      	adds	r3, #11
 8014b68:	781b      	ldrb	r3, [r3, #0]
 8014b6a:	f003 0310 	and.w	r3, r3, #16
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d03b      	beq.n	8014bea <f_rename+0x1b8>
 8014b72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d037      	beq.n	8014bea <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 8014b7a:	6a3c      	ldr	r4, [r7, #32]
 8014b7c:	6a3b      	ldr	r3, [r7, #32]
 8014b7e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fe f872 	bl	8012c6c <ld_clust>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	f7fd fc05 	bl	801239c <clust2sect>
 8014b92:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 8014b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d103      	bne.n	8014ba6 <f_rename+0x174>
								res = FR_INT_ERR;
 8014b9e:	2302      	movs	r3, #2
 8014ba0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8014ba4:	e021      	b.n	8014bea <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 8014ba6:	6a3b      	ldr	r3, [r7, #32]
 8014ba8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7fd fb59 	bl	8012264 <move_window>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8014bb8:	6a3b      	ldr	r3, [r7, #32]
 8014bba:	3330      	adds	r3, #48	@ 0x30
 8014bbc:	3320      	adds	r3, #32
 8014bbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 8014bc2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d10f      	bne.n	8014bea <f_rename+0x1b8>
 8014bca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014bce:	3301      	adds	r3, #1
 8014bd0:	781b      	ldrb	r3, [r3, #0]
 8014bd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8014bd4:	d109      	bne.n	8014bea <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 8014bd6:	6a3b      	ldr	r3, [r7, #32]
 8014bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014bda:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fe f863 	bl	8012caa <st_clust>
									fs->wflag = 1;
 8014be4:	6a3b      	ldr	r3, [r7, #32]
 8014be6:	2201      	movs	r2, #1
 8014be8:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 8014bea:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d112      	bne.n	8014c18 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 8014bf2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7fe f95b 	bl	8012eb2 <dir_remove>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 8014c02:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d106      	bne.n	8014c18 <f_rename+0x1e6>
					res = sync_fs(fs);
 8014c0a:	6a3b      	ldr	r3, [r7, #32]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7fd fb57 	bl	80122c0 <sync_fs>
 8014c12:	4603      	mov	r3, r0
 8014c14:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014c18:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3794      	adds	r7, #148	@ 0x94
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd90      	pop	{r4, r7, pc}

08014c24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014c24:	b480      	push	{r7}
 8014c26:	b087      	sub	sp, #28
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	4613      	mov	r3, r2
 8014c30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014c32:	2301      	movs	r3, #1
 8014c34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014c36:	2300      	movs	r3, #0
 8014c38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8014cb8 <FATFS_LinkDriverEx+0x94>)
 8014c3c:	7a5b      	ldrb	r3, [r3, #9]
 8014c3e:	b2db      	uxtb	r3, r3
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d131      	bne.n	8014ca8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014c44:	4b1c      	ldr	r3, [pc, #112]	@ (8014cb8 <FATFS_LinkDriverEx+0x94>)
 8014c46:	7a5b      	ldrb	r3, [r3, #9]
 8014c48:	b2db      	uxtb	r3, r3
 8014c4a:	461a      	mov	r2, r3
 8014c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8014cb8 <FATFS_LinkDriverEx+0x94>)
 8014c4e:	2100      	movs	r1, #0
 8014c50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014c52:	4b19      	ldr	r3, [pc, #100]	@ (8014cb8 <FATFS_LinkDriverEx+0x94>)
 8014c54:	7a5b      	ldrb	r3, [r3, #9]
 8014c56:	b2db      	uxtb	r3, r3
 8014c58:	4a17      	ldr	r2, [pc, #92]	@ (8014cb8 <FATFS_LinkDriverEx+0x94>)
 8014c5a:	009b      	lsls	r3, r3, #2
 8014c5c:	4413      	add	r3, r2
 8014c5e:	68fa      	ldr	r2, [r7, #12]
 8014c60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014c62:	4b15      	ldr	r3, [pc, #84]	@ (8014cb8 <FATFS_LinkDriverEx+0x94>)
 8014c64:	7a5b      	ldrb	r3, [r3, #9]
 8014c66:	b2db      	uxtb	r3, r3
 8014c68:	461a      	mov	r2, r3
 8014c6a:	4b13      	ldr	r3, [pc, #76]	@ (8014cb8 <FATFS_LinkDriverEx+0x94>)
 8014c6c:	4413      	add	r3, r2
 8014c6e:	79fa      	ldrb	r2, [r7, #7]
 8014c70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014c72:	4b11      	ldr	r3, [pc, #68]	@ (8014cb8 <FATFS_LinkDriverEx+0x94>)
 8014c74:	7a5b      	ldrb	r3, [r3, #9]
 8014c76:	b2db      	uxtb	r3, r3
 8014c78:	1c5a      	adds	r2, r3, #1
 8014c7a:	b2d1      	uxtb	r1, r2
 8014c7c:	4a0e      	ldr	r2, [pc, #56]	@ (8014cb8 <FATFS_LinkDriverEx+0x94>)
 8014c7e:	7251      	strb	r1, [r2, #9]
 8014c80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014c82:	7dbb      	ldrb	r3, [r7, #22]
 8014c84:	3330      	adds	r3, #48	@ 0x30
 8014c86:	b2da      	uxtb	r2, r3
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	3301      	adds	r3, #1
 8014c90:	223a      	movs	r2, #58	@ 0x3a
 8014c92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	3302      	adds	r3, #2
 8014c98:	222f      	movs	r2, #47	@ 0x2f
 8014c9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	3303      	adds	r3, #3
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014caa:	4618      	mov	r0, r3
 8014cac:	371c      	adds	r7, #28
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb4:	4770      	bx	lr
 8014cb6:	bf00      	nop
 8014cb8:	200009d0 	.word	0x200009d0

08014cbc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b082      	sub	sp, #8
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
 8014cc4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	6839      	ldr	r1, [r7, #0]
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f7ff ffaa 	bl	8014c24 <FATFS_LinkDriverEx>
 8014cd0:	4603      	mov	r3, r0
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	3708      	adds	r7, #8
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
	...

08014cdc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8014ce0:	2201      	movs	r2, #1
 8014ce2:	490e      	ldr	r1, [pc, #56]	@ (8014d1c <MX_USB_HOST_Init+0x40>)
 8014ce4:	480e      	ldr	r0, [pc, #56]	@ (8014d20 <MX_USB_HOST_Init+0x44>)
 8014ce6:	f7fb fa89 	bl	80101fc <USBH_Init>
 8014cea:	4603      	mov	r3, r0
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d001      	beq.n	8014cf4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8014cf0:	f7ed fff0 	bl	8002cd4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8014cf4:	490b      	ldr	r1, [pc, #44]	@ (8014d24 <MX_USB_HOST_Init+0x48>)
 8014cf6:	480a      	ldr	r0, [pc, #40]	@ (8014d20 <MX_USB_HOST_Init+0x44>)
 8014cf8:	f7fb fb2d 	bl	8010356 <USBH_RegisterClass>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d001      	beq.n	8014d06 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8014d02:	f7ed ffe7 	bl	8002cd4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8014d06:	4806      	ldr	r0, [pc, #24]	@ (8014d20 <MX_USB_HOST_Init+0x44>)
 8014d08:	f7fb fbb1 	bl	801046e <USBH_Start>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d001      	beq.n	8014d16 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8014d12:	f7ed ffdf 	bl	8002cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8014d16:	bf00      	nop
 8014d18:	bd80      	pop	{r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	08014d3d 	.word	0x08014d3d
 8014d20:	200009dc 	.word	0x200009dc
 8014d24:	2000000c 	.word	0x2000000c

08014d28 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8014d2c:	4802      	ldr	r0, [pc, #8]	@ (8014d38 <MX_USB_HOST_Process+0x10>)
 8014d2e:	f7fb fbaf 	bl	8010490 <USBH_Process>
}
 8014d32:	bf00      	nop
 8014d34:	bd80      	pop	{r7, pc}
 8014d36:	bf00      	nop
 8014d38:	200009dc 	.word	0x200009dc

08014d3c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
 8014d44:	460b      	mov	r3, r1
 8014d46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8014d48:	78fb      	ldrb	r3, [r7, #3]
 8014d4a:	3b01      	subs	r3, #1
 8014d4c:	2b04      	cmp	r3, #4
 8014d4e:	d819      	bhi.n	8014d84 <USBH_UserProcess+0x48>
 8014d50:	a201      	add	r2, pc, #4	@ (adr r2, 8014d58 <USBH_UserProcess+0x1c>)
 8014d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d56:	bf00      	nop
 8014d58:	08014d85 	.word	0x08014d85
 8014d5c:	08014d75 	.word	0x08014d75
 8014d60:	08014d85 	.word	0x08014d85
 8014d64:	08014d7d 	.word	0x08014d7d
 8014d68:	08014d6d 	.word	0x08014d6d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014d6c:	4b09      	ldr	r3, [pc, #36]	@ (8014d94 <USBH_UserProcess+0x58>)
 8014d6e:	2203      	movs	r2, #3
 8014d70:	701a      	strb	r2, [r3, #0]
  break;
 8014d72:	e008      	b.n	8014d86 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8014d74:	4b07      	ldr	r3, [pc, #28]	@ (8014d94 <USBH_UserProcess+0x58>)
 8014d76:	2202      	movs	r2, #2
 8014d78:	701a      	strb	r2, [r3, #0]
  break;
 8014d7a:	e004      	b.n	8014d86 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014d7c:	4b05      	ldr	r3, [pc, #20]	@ (8014d94 <USBH_UserProcess+0x58>)
 8014d7e:	2201      	movs	r2, #1
 8014d80:	701a      	strb	r2, [r3, #0]
  break;
 8014d82:	e000      	b.n	8014d86 <USBH_UserProcess+0x4a>

  default:
  break;
 8014d84:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8014d86:	bf00      	nop
 8014d88:	370c      	adds	r7, #12
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d90:	4770      	bx	lr
 8014d92:	bf00      	nop
 8014d94:	20000db4 	.word	0x20000db4

08014d98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b08a      	sub	sp, #40	@ 0x28
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014da0:	f107 0314 	add.w	r3, r7, #20
 8014da4:	2200      	movs	r2, #0
 8014da6:	601a      	str	r2, [r3, #0]
 8014da8:	605a      	str	r2, [r3, #4]
 8014daa:	609a      	str	r2, [r3, #8]
 8014dac:	60da      	str	r2, [r3, #12]
 8014dae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014db8:	d147      	bne.n	8014e4a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014dba:	2300      	movs	r3, #0
 8014dbc:	613b      	str	r3, [r7, #16]
 8014dbe:	4b25      	ldr	r3, [pc, #148]	@ (8014e54 <HAL_HCD_MspInit+0xbc>)
 8014dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014dc2:	4a24      	ldr	r2, [pc, #144]	@ (8014e54 <HAL_HCD_MspInit+0xbc>)
 8014dc4:	f043 0301 	orr.w	r3, r3, #1
 8014dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8014dca:	4b22      	ldr	r3, [pc, #136]	@ (8014e54 <HAL_HCD_MspInit+0xbc>)
 8014dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014dce:	f003 0301 	and.w	r3, r3, #1
 8014dd2:	613b      	str	r3, [r7, #16]
 8014dd4:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8014dd6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8014dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ddc:	2302      	movs	r3, #2
 8014dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014de0:	2300      	movs	r3, #0
 8014de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014de4:	2303      	movs	r3, #3
 8014de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014de8:	230a      	movs	r3, #10
 8014dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014dec:	f107 0314 	add.w	r3, r7, #20
 8014df0:	4619      	mov	r1, r3
 8014df2:	4819      	ldr	r0, [pc, #100]	@ (8014e58 <HAL_HCD_MspInit+0xc0>)
 8014df4:	f7f0 fcd6 	bl	80057a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8014df8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014dfe:	2302      	movs	r3, #2
 8014e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e02:	2300      	movs	r3, #0
 8014e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8014e06:	f107 0314 	add.w	r3, r7, #20
 8014e0a:	4619      	mov	r1, r3
 8014e0c:	4812      	ldr	r0, [pc, #72]	@ (8014e58 <HAL_HCD_MspInit+0xc0>)
 8014e0e:	f7f0 fcc9 	bl	80057a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014e12:	4b10      	ldr	r3, [pc, #64]	@ (8014e54 <HAL_HCD_MspInit+0xbc>)
 8014e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e16:	4a0f      	ldr	r2, [pc, #60]	@ (8014e54 <HAL_HCD_MspInit+0xbc>)
 8014e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e1c:	6353      	str	r3, [r2, #52]	@ 0x34
 8014e1e:	2300      	movs	r3, #0
 8014e20:	60fb      	str	r3, [r7, #12]
 8014e22:	4b0c      	ldr	r3, [pc, #48]	@ (8014e54 <HAL_HCD_MspInit+0xbc>)
 8014e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e26:	4a0b      	ldr	r2, [pc, #44]	@ (8014e54 <HAL_HCD_MspInit+0xbc>)
 8014e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8014e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8014e2e:	4b09      	ldr	r3, [pc, #36]	@ (8014e54 <HAL_HCD_MspInit+0xbc>)
 8014e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014e36:	60fb      	str	r3, [r7, #12]
 8014e38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	2100      	movs	r1, #0
 8014e3e:	2043      	movs	r0, #67	@ 0x43
 8014e40:	f7ef f868 	bl	8003f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014e44:	2043      	movs	r0, #67	@ 0x43
 8014e46:	f7ef f881 	bl	8003f4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014e4a:	bf00      	nop
 8014e4c:	3728      	adds	r7, #40	@ 0x28
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	bd80      	pop	{r7, pc}
 8014e52:	bf00      	nop
 8014e54:	40023800 	.word	0x40023800
 8014e58:	40020000 	.word	0x40020000

08014e5c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b082      	sub	sp, #8
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7fb fee7 	bl	8010c3e <USBH_LL_IncTimer>
}
 8014e70:	bf00      	nop
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7fb ff1f 	bl	8010cca <USBH_LL_Connect>
}
 8014e8c:	bf00      	nop
 8014e8e:	3708      	adds	r7, #8
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}

08014e94 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b082      	sub	sp, #8
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7fb ff28 	bl	8010cf8 <USBH_LL_Disconnect>
}
 8014ea8:	bf00      	nop
 8014eaa:	3708      	adds	r7, #8
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}

08014eb0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8014eb0:	b480      	push	{r7}
 8014eb2:	b083      	sub	sp, #12
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
 8014eb8:	460b      	mov	r3, r1
 8014eba:	70fb      	strb	r3, [r7, #3]
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8014ec0:	bf00      	nop
 8014ec2:	370c      	adds	r7, #12
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr

08014ecc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b082      	sub	sp, #8
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7fb fed9 	bl	8010c92 <USBH_LL_PortEnabled>
}
 8014ee0:	bf00      	nop
 8014ee2:	3708      	adds	r7, #8
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}

08014ee8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b082      	sub	sp, #8
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7fb fed9 	bl	8010cae <USBH_LL_PortDisabled>
}
 8014efc:	bf00      	nop
 8014efe:	3708      	adds	r7, #8
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}

08014f04 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b082      	sub	sp, #8
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8014f12:	2b01      	cmp	r3, #1
 8014f14:	d12a      	bne.n	8014f6c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8014f16:	4a18      	ldr	r2, [pc, #96]	@ (8014f78 <USBH_LL_Init+0x74>)
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	4a15      	ldr	r2, [pc, #84]	@ (8014f78 <USBH_LL_Init+0x74>)
 8014f22:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014f26:	4b14      	ldr	r3, [pc, #80]	@ (8014f78 <USBH_LL_Init+0x74>)
 8014f28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8014f2c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8014f2e:	4b12      	ldr	r3, [pc, #72]	@ (8014f78 <USBH_LL_Init+0x74>)
 8014f30:	2208      	movs	r2, #8
 8014f32:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8014f34:	4b10      	ldr	r3, [pc, #64]	@ (8014f78 <USBH_LL_Init+0x74>)
 8014f36:	2201      	movs	r2, #1
 8014f38:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8014f78 <USBH_LL_Init+0x74>)
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8014f40:	4b0d      	ldr	r3, [pc, #52]	@ (8014f78 <USBH_LL_Init+0x74>)
 8014f42:	2202      	movs	r2, #2
 8014f44:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014f46:	4b0c      	ldr	r3, [pc, #48]	@ (8014f78 <USBH_LL_Init+0x74>)
 8014f48:	2200      	movs	r2, #0
 8014f4a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8014f4c:	480a      	ldr	r0, [pc, #40]	@ (8014f78 <USBH_LL_Init+0x74>)
 8014f4e:	f7f0 fe06 	bl	8005b5e <HAL_HCD_Init>
 8014f52:	4603      	mov	r3, r0
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d001      	beq.n	8014f5c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8014f58:	f7ed febc 	bl	8002cd4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8014f5c:	4806      	ldr	r0, [pc, #24]	@ (8014f78 <USBH_LL_Init+0x74>)
 8014f5e:	f7f1 fa67 	bl	8006430 <HAL_HCD_GetCurrentFrame>
 8014f62:	4603      	mov	r3, r0
 8014f64:	4619      	mov	r1, r3
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f7fb fe5a 	bl	8010c20 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8014f6c:	2300      	movs	r3, #0
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3708      	adds	r7, #8
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
 8014f76:	bf00      	nop
 8014f78:	20000db8 	.word	0x20000db8

08014f7c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b084      	sub	sp, #16
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f84:	2300      	movs	r3, #0
 8014f86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014f88:	2300      	movs	r3, #0
 8014f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7f1 f9d4 	bl	8006340 <HAL_HCD_Start>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014f9c:	7bfb      	ldrb	r3, [r7, #15]
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f000 f95e 	bl	8015260 <USBH_Get_USB_Status>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3710      	adds	r7, #16
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}

08014fb2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8014fb2:	b580      	push	{r7, lr}
 8014fb4:	b084      	sub	sp, #16
 8014fb6:	af00      	add	r7, sp, #0
 8014fb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f7f1 f9dc 	bl	8006386 <HAL_HCD_Stop>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014fd2:	7bfb      	ldrb	r3, [r7, #15]
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f000 f943 	bl	8015260 <USBH_Get_USB_Status>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014fde:	7bbb      	ldrb	r3, [r7, #14]
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3710      	adds	r7, #16
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}

08014fe8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b084      	sub	sp, #16
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7f1 fa26 	bl	800644c <HAL_HCD_GetCurrentSpeed>
 8015000:	4603      	mov	r3, r0
 8015002:	2b02      	cmp	r3, #2
 8015004:	d00c      	beq.n	8015020 <USBH_LL_GetSpeed+0x38>
 8015006:	2b02      	cmp	r3, #2
 8015008:	d80d      	bhi.n	8015026 <USBH_LL_GetSpeed+0x3e>
 801500a:	2b00      	cmp	r3, #0
 801500c:	d002      	beq.n	8015014 <USBH_LL_GetSpeed+0x2c>
 801500e:	2b01      	cmp	r3, #1
 8015010:	d003      	beq.n	801501a <USBH_LL_GetSpeed+0x32>
 8015012:	e008      	b.n	8015026 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015014:	2300      	movs	r3, #0
 8015016:	73fb      	strb	r3, [r7, #15]
    break;
 8015018:	e008      	b.n	801502c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801501a:	2301      	movs	r3, #1
 801501c:	73fb      	strb	r3, [r7, #15]
    break;
 801501e:	e005      	b.n	801502c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015020:	2302      	movs	r3, #2
 8015022:	73fb      	strb	r3, [r7, #15]
    break;
 8015024:	e002      	b.n	801502c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8015026:	2301      	movs	r3, #1
 8015028:	73fb      	strb	r3, [r7, #15]
    break;
 801502a:	bf00      	nop
  }
  return  speed;
 801502c:	7bfb      	ldrb	r3, [r7, #15]
}
 801502e:	4618      	mov	r0, r3
 8015030:	3710      	adds	r7, #16
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}

08015036 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015036:	b580      	push	{r7, lr}
 8015038:	b084      	sub	sp, #16
 801503a:	af00      	add	r7, sp, #0
 801503c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801503e:	2300      	movs	r3, #0
 8015040:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015042:	2300      	movs	r3, #0
 8015044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801504c:	4618      	mov	r0, r3
 801504e:	f7f1 f9b7 	bl	80063c0 <HAL_HCD_ResetPort>
 8015052:	4603      	mov	r3, r0
 8015054:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015056:	7bfb      	ldrb	r3, [r7, #15]
 8015058:	4618      	mov	r0, r3
 801505a:	f000 f901 	bl	8015260 <USBH_Get_USB_Status>
 801505e:	4603      	mov	r3, r0
 8015060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015062:	7bbb      	ldrb	r3, [r7, #14]
}
 8015064:	4618      	mov	r0, r3
 8015066:	3710      	adds	r7, #16
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}

0801506c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	460b      	mov	r3, r1
 8015076:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801507e:	78fa      	ldrb	r2, [r7, #3]
 8015080:	4611      	mov	r1, r2
 8015082:	4618      	mov	r0, r3
 8015084:	f7f1 f9bf 	bl	8006406 <HAL_HCD_HC_GetXferCount>
 8015088:	4603      	mov	r3, r0
}
 801508a:	4618      	mov	r0, r3
 801508c:	3708      	adds	r7, #8
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}

08015092 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015092:	b590      	push	{r4, r7, lr}
 8015094:	b089      	sub	sp, #36	@ 0x24
 8015096:	af04      	add	r7, sp, #16
 8015098:	6078      	str	r0, [r7, #4]
 801509a:	4608      	mov	r0, r1
 801509c:	4611      	mov	r1, r2
 801509e:	461a      	mov	r2, r3
 80150a0:	4603      	mov	r3, r0
 80150a2:	70fb      	strb	r3, [r7, #3]
 80150a4:	460b      	mov	r3, r1
 80150a6:	70bb      	strb	r3, [r7, #2]
 80150a8:	4613      	mov	r3, r2
 80150aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150ac:	2300      	movs	r3, #0
 80150ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80150b0:	2300      	movs	r3, #0
 80150b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80150ba:	787c      	ldrb	r4, [r7, #1]
 80150bc:	78ba      	ldrb	r2, [r7, #2]
 80150be:	78f9      	ldrb	r1, [r7, #3]
 80150c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80150c2:	9302      	str	r3, [sp, #8]
 80150c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80150c8:	9301      	str	r3, [sp, #4]
 80150ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80150ce:	9300      	str	r3, [sp, #0]
 80150d0:	4623      	mov	r3, r4
 80150d2:	f7f0 fdab 	bl	8005c2c <HAL_HCD_HC_Init>
 80150d6:	4603      	mov	r3, r0
 80150d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80150da:	7bfb      	ldrb	r3, [r7, #15]
 80150dc:	4618      	mov	r0, r3
 80150de:	f000 f8bf 	bl	8015260 <USBH_Get_USB_Status>
 80150e2:	4603      	mov	r3, r0
 80150e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80150e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	3714      	adds	r7, #20
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd90      	pop	{r4, r7, pc}

080150f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	460b      	mov	r3, r1
 80150fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150fc:	2300      	movs	r3, #0
 80150fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015100:	2300      	movs	r3, #0
 8015102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801510a:	78fa      	ldrb	r2, [r7, #3]
 801510c:	4611      	mov	r1, r2
 801510e:	4618      	mov	r0, r3
 8015110:	f7f0 fe44 	bl	8005d9c <HAL_HCD_HC_Halt>
 8015114:	4603      	mov	r3, r0
 8015116:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015118:	7bfb      	ldrb	r3, [r7, #15]
 801511a:	4618      	mov	r0, r3
 801511c:	f000 f8a0 	bl	8015260 <USBH_Get_USB_Status>
 8015120:	4603      	mov	r3, r0
 8015122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015124:	7bbb      	ldrb	r3, [r7, #14]
}
 8015126:	4618      	mov	r0, r3
 8015128:	3710      	adds	r7, #16
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}

0801512e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801512e:	b590      	push	{r4, r7, lr}
 8015130:	b089      	sub	sp, #36	@ 0x24
 8015132:	af04      	add	r7, sp, #16
 8015134:	6078      	str	r0, [r7, #4]
 8015136:	4608      	mov	r0, r1
 8015138:	4611      	mov	r1, r2
 801513a:	461a      	mov	r2, r3
 801513c:	4603      	mov	r3, r0
 801513e:	70fb      	strb	r3, [r7, #3]
 8015140:	460b      	mov	r3, r1
 8015142:	70bb      	strb	r3, [r7, #2]
 8015144:	4613      	mov	r3, r2
 8015146:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015148:	2300      	movs	r3, #0
 801514a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801514c:	2300      	movs	r3, #0
 801514e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8015156:	787c      	ldrb	r4, [r7, #1]
 8015158:	78ba      	ldrb	r2, [r7, #2]
 801515a:	78f9      	ldrb	r1, [r7, #3]
 801515c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8015160:	9303      	str	r3, [sp, #12]
 8015162:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015164:	9302      	str	r3, [sp, #8]
 8015166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015168:	9301      	str	r3, [sp, #4]
 801516a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801516e:	9300      	str	r3, [sp, #0]
 8015170:	4623      	mov	r3, r4
 8015172:	f7f0 fe37 	bl	8005de4 <HAL_HCD_HC_SubmitRequest>
 8015176:	4603      	mov	r3, r0
 8015178:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801517a:	7bfb      	ldrb	r3, [r7, #15]
 801517c:	4618      	mov	r0, r3
 801517e:	f000 f86f 	bl	8015260 <USBH_Get_USB_Status>
 8015182:	4603      	mov	r3, r0
 8015184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015186:	7bbb      	ldrb	r3, [r7, #14]
}
 8015188:	4618      	mov	r0, r3
 801518a:	3714      	adds	r7, #20
 801518c:	46bd      	mov	sp, r7
 801518e:	bd90      	pop	{r4, r7, pc}

08015190 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b082      	sub	sp, #8
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
 8015198:	460b      	mov	r3, r1
 801519a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80151a2:	78fa      	ldrb	r2, [r7, #3]
 80151a4:	4611      	mov	r1, r2
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7f1 f918 	bl	80063dc <HAL_HCD_HC_GetURBState>
 80151ac:	4603      	mov	r3, r0
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	3708      	adds	r7, #8
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}

080151b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80151b6:	b580      	push	{r7, lr}
 80151b8:	b082      	sub	sp, #8
 80151ba:	af00      	add	r7, sp, #0
 80151bc:	6078      	str	r0, [r7, #4]
 80151be:	460b      	mov	r3, r1
 80151c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80151c8:	2b01      	cmp	r3, #1
 80151ca:	d103      	bne.n	80151d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80151cc:	78fb      	ldrb	r3, [r7, #3]
 80151ce:	4618      	mov	r0, r3
 80151d0:	f000 f872 	bl	80152b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80151d4:	20c8      	movs	r0, #200	@ 0xc8
 80151d6:	f7ee fdc1 	bl	8003d5c <HAL_Delay>
  return USBH_OK;
 80151da:	2300      	movs	r3, #0
}
 80151dc:	4618      	mov	r0, r3
 80151de:	3708      	adds	r7, #8
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}

080151e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80151e4:	b480      	push	{r7}
 80151e6:	b085      	sub	sp, #20
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	460b      	mov	r3, r1
 80151ee:	70fb      	strb	r3, [r7, #3]
 80151f0:	4613      	mov	r3, r2
 80151f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80151fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80151fc:	78fa      	ldrb	r2, [r7, #3]
 80151fe:	68f9      	ldr	r1, [r7, #12]
 8015200:	4613      	mov	r3, r2
 8015202:	011b      	lsls	r3, r3, #4
 8015204:	1a9b      	subs	r3, r3, r2
 8015206:	009b      	lsls	r3, r3, #2
 8015208:	440b      	add	r3, r1
 801520a:	3317      	adds	r3, #23
 801520c:	781b      	ldrb	r3, [r3, #0]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d00a      	beq.n	8015228 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015212:	78fa      	ldrb	r2, [r7, #3]
 8015214:	68f9      	ldr	r1, [r7, #12]
 8015216:	4613      	mov	r3, r2
 8015218:	011b      	lsls	r3, r3, #4
 801521a:	1a9b      	subs	r3, r3, r2
 801521c:	009b      	lsls	r3, r3, #2
 801521e:	440b      	add	r3, r1
 8015220:	333c      	adds	r3, #60	@ 0x3c
 8015222:	78ba      	ldrb	r2, [r7, #2]
 8015224:	701a      	strb	r2, [r3, #0]
 8015226:	e009      	b.n	801523c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8015228:	78fa      	ldrb	r2, [r7, #3]
 801522a:	68f9      	ldr	r1, [r7, #12]
 801522c:	4613      	mov	r3, r2
 801522e:	011b      	lsls	r3, r3, #4
 8015230:	1a9b      	subs	r3, r3, r2
 8015232:	009b      	lsls	r3, r3, #2
 8015234:	440b      	add	r3, r1
 8015236:	333d      	adds	r3, #61	@ 0x3d
 8015238:	78ba      	ldrb	r2, [r7, #2]
 801523a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801523c:	2300      	movs	r3, #0
}
 801523e:	4618      	mov	r0, r3
 8015240:	3714      	adds	r7, #20
 8015242:	46bd      	mov	sp, r7
 8015244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015248:	4770      	bx	lr

0801524a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801524a:	b580      	push	{r7, lr}
 801524c:	b082      	sub	sp, #8
 801524e:	af00      	add	r7, sp, #0
 8015250:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f7ee fd82 	bl	8003d5c <HAL_Delay>
}
 8015258:	bf00      	nop
 801525a:	3708      	adds	r7, #8
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}

08015260 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015260:	b480      	push	{r7}
 8015262:	b085      	sub	sp, #20
 8015264:	af00      	add	r7, sp, #0
 8015266:	4603      	mov	r3, r0
 8015268:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801526a:	2300      	movs	r3, #0
 801526c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801526e:	79fb      	ldrb	r3, [r7, #7]
 8015270:	2b03      	cmp	r3, #3
 8015272:	d817      	bhi.n	80152a4 <USBH_Get_USB_Status+0x44>
 8015274:	a201      	add	r2, pc, #4	@ (adr r2, 801527c <USBH_Get_USB_Status+0x1c>)
 8015276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801527a:	bf00      	nop
 801527c:	0801528d 	.word	0x0801528d
 8015280:	08015293 	.word	0x08015293
 8015284:	08015299 	.word	0x08015299
 8015288:	0801529f 	.word	0x0801529f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801528c:	2300      	movs	r3, #0
 801528e:	73fb      	strb	r3, [r7, #15]
    break;
 8015290:	e00b      	b.n	80152aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8015292:	2302      	movs	r3, #2
 8015294:	73fb      	strb	r3, [r7, #15]
    break;
 8015296:	e008      	b.n	80152aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8015298:	2301      	movs	r3, #1
 801529a:	73fb      	strb	r3, [r7, #15]
    break;
 801529c:	e005      	b.n	80152aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801529e:	2302      	movs	r3, #2
 80152a0:	73fb      	strb	r3, [r7, #15]
    break;
 80152a2:	e002      	b.n	80152aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80152a4:	2302      	movs	r3, #2
 80152a6:	73fb      	strb	r3, [r7, #15]
    break;
 80152a8:	bf00      	nop
  }
  return usb_status;
 80152aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80152ac:	4618      	mov	r0, r3
 80152ae:	3714      	adds	r7, #20
 80152b0:	46bd      	mov	sp, r7
 80152b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b6:	4770      	bx	lr

080152b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b084      	sub	sp, #16
 80152bc:	af00      	add	r7, sp, #0
 80152be:	4603      	mov	r3, r0
 80152c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80152c2:	79fb      	ldrb	r3, [r7, #7]
 80152c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80152c6:	79fb      	ldrb	r3, [r7, #7]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d102      	bne.n	80152d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80152cc:	2300      	movs	r3, #0
 80152ce:	73fb      	strb	r3, [r7, #15]
 80152d0:	e001      	b.n	80152d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80152d2:	2301      	movs	r3, #1
 80152d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 80152d6:	7bfb      	ldrb	r3, [r7, #15]
 80152d8:	461a      	mov	r2, r3
 80152da:	2104      	movs	r1, #4
 80152dc:	4803      	ldr	r0, [pc, #12]	@ (80152ec <MX_DriverVbusFS+0x34>)
 80152de:	f7f0 fc25 	bl	8005b2c <HAL_GPIO_WritePin>
}
 80152e2:	bf00      	nop
 80152e4:	3710      	adds	r7, #16
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}
 80152ea:	bf00      	nop
 80152ec:	40020400 	.word	0x40020400

080152f0 <_ZdlPvj>:
 80152f0:	f000 b9bc 	b.w	801566c <_ZdlPv>

080152f4 <_Znwj>:
 80152f4:	2801      	cmp	r0, #1
 80152f6:	bf38      	it	cc
 80152f8:	2001      	movcc	r0, #1
 80152fa:	b510      	push	{r4, lr}
 80152fc:	4604      	mov	r4, r0
 80152fe:	4620      	mov	r0, r4
 8015300:	f000 f9c6 	bl	8015690 <malloc>
 8015304:	b100      	cbz	r0, 8015308 <_Znwj+0x14>
 8015306:	bd10      	pop	{r4, pc}
 8015308:	f000 f9b2 	bl	8015670 <_ZSt15get_new_handlerv>
 801530c:	b908      	cbnz	r0, 8015312 <_Znwj+0x1e>
 801530e:	f000 f9b7 	bl	8015680 <abort>
 8015312:	4780      	blx	r0
 8015314:	e7f3      	b.n	80152fe <_Znwj+0xa>

08015316 <_ZNSaIcEC1Ev>:
 8015316:	4770      	bx	lr

08015318 <_ZNSaIcED1Ev>:
 8015318:	4770      	bx	lr

0801531a <_ZSt17__throw_bad_allocv>:
 801531a:	b508      	push	{r3, lr}
 801531c:	f000 f9b0 	bl	8015680 <abort>

08015320 <_ZSt28__throw_bad_array_new_lengthv>:
 8015320:	b508      	push	{r3, lr}
 8015322:	f000 f9ad 	bl	8015680 <abort>

08015326 <_ZSt19__throw_logic_errorPKc>:
 8015326:	b508      	push	{r3, lr}
 8015328:	f000 f9aa 	bl	8015680 <abort>

0801532c <_ZSt20__throw_length_errorPKc>:
 801532c:	b508      	push	{r3, lr}
 801532e:	f000 f9a7 	bl	8015680 <abort>

08015332 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8015332:	b10a      	cbz	r2, 8015338 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8015334:	f000 bcb5 	b.w	8015ca2 <memcpy>
 8015338:	4770      	bx	lr

0801533a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 801533a:	f850 3b08 	ldr.w	r3, [r0], #8
 801533e:	1a1b      	subs	r3, r3, r0
 8015340:	4258      	negs	r0, r3
 8015342:	4158      	adcs	r0, r3
 8015344:	4770      	bx	lr
	...

08015348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8015348:	b508      	push	{r3, lr}
 801534a:	680b      	ldr	r3, [r1, #0]
 801534c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015350:	d302      	bcc.n	8015358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8015352:	480d      	ldr	r0, [pc, #52]	@ (8015388 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8015354:	f7ff ffea 	bl	801532c <_ZSt20__throw_length_errorPKc>
 8015358:	4293      	cmp	r3, r2
 801535a:	d90b      	bls.n	8015374 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801535c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8015360:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8015364:	d206      	bcs.n	8015374 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015366:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801536a:	bf2a      	itet	cs
 801536c:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8015370:	6008      	strcc	r0, [r1, #0]
 8015372:	600b      	strcs	r3, [r1, #0]
 8015374:	6808      	ldr	r0, [r1, #0]
 8015376:	3001      	adds	r0, #1
 8015378:	d501      	bpl.n	801537e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801537a:	f7ff ffce 	bl	801531a <_ZSt17__throw_bad_allocv>
 801537e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015382:	f7ff bfb7 	b.w	80152f4 <_Znwj>
 8015386:	bf00      	nop
 8015388:	08016e78 	.word	0x08016e78

0801538c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801538c:	b510      	push	{r4, lr}
 801538e:	4604      	mov	r4, r0
 8015390:	f7ff ffd3 	bl	801533a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8015394:	b920      	cbnz	r0, 80153a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8015396:	6820      	ldr	r0, [r4, #0]
 8015398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801539c:	f000 b966 	b.w	801566c <_ZdlPv>
 80153a0:	bd10      	pop	{r4, pc}

080153a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80153a2:	6840      	ldr	r0, [r0, #4]
 80153a4:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80153a8:	3901      	subs	r1, #1
 80153aa:	1a09      	subs	r1, r1, r0
 80153ac:	4291      	cmp	r1, r2
 80153ae:	b508      	push	{r3, lr}
 80153b0:	d202      	bcs.n	80153b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7ff ffba 	bl	801532c <_ZSt20__throw_length_errorPKc>
 80153b8:	bd08      	pop	{r3, pc}

080153ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80153ba:	6803      	ldr	r3, [r0, #0]
 80153bc:	428b      	cmp	r3, r1
 80153be:	d806      	bhi.n	80153ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80153c0:	6842      	ldr	r2, [r0, #4]
 80153c2:	4413      	add	r3, r2
 80153c4:	4299      	cmp	r1, r3
 80153c6:	bf94      	ite	ls
 80153c8:	2000      	movls	r0, #0
 80153ca:	2001      	movhi	r0, #1
 80153cc:	4770      	bx	lr
 80153ce:	2001      	movs	r0, #1
 80153d0:	4770      	bx	lr

080153d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80153d2:	2a01      	cmp	r2, #1
 80153d4:	b410      	push	{r4}
 80153d6:	d104      	bne.n	80153e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80153d8:	780a      	ldrb	r2, [r1, #0]
 80153da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153de:	7002      	strb	r2, [r0, #0]
 80153e0:	4770      	bx	lr
 80153e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153e6:	f7ff bfa4 	b.w	8015332 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080153ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80153ea:	2a01      	cmp	r2, #1
 80153ec:	b430      	push	{r4, r5}
 80153ee:	d103      	bne.n	80153f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80153f0:	780b      	ldrb	r3, [r1, #0]
 80153f2:	7003      	strb	r3, [r0, #0]
 80153f4:	bc30      	pop	{r4, r5}
 80153f6:	4770      	bx	lr
 80153f8:	2a00      	cmp	r2, #0
 80153fa:	d0fb      	beq.n	80153f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80153fc:	bc30      	pop	{r4, r5}
 80153fe:	f000 bb50 	b.w	8015aa2 <memmove>

08015402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8015402:	b508      	push	{r3, lr}
 8015404:	1a52      	subs	r2, r2, r1
 8015406:	f7ff ffe4 	bl	80153d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801540a:	bd08      	pop	{r3, pc}

0801540c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 801540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801540e:	f100 0708 	add.w	r7, r0, #8
 8015412:	6007      	str	r7, [r0, #0]
 8015414:	4605      	mov	r5, r0
 8015416:	4608      	mov	r0, r1
 8015418:	460c      	mov	r4, r1
 801541a:	f7ff ff8e 	bl	801533a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801541e:	f104 0608 	add.w	r6, r4, #8
 8015422:	6862      	ldr	r2, [r4, #4]
 8015424:	b160      	cbz	r0, 8015440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8015426:	3201      	adds	r2, #1
 8015428:	4631      	mov	r1, r6
 801542a:	4638      	mov	r0, r7
 801542c:	f7ff ff81 	bl	8015332 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8015430:	6863      	ldr	r3, [r4, #4]
 8015432:	606b      	str	r3, [r5, #4]
 8015434:	2300      	movs	r3, #0
 8015436:	7223      	strb	r3, [r4, #8]
 8015438:	6026      	str	r6, [r4, #0]
 801543a:	6063      	str	r3, [r4, #4]
 801543c:	4628      	mov	r0, r5
 801543e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015440:	6823      	ldr	r3, [r4, #0]
 8015442:	602b      	str	r3, [r5, #0]
 8015444:	68a3      	ldr	r3, [r4, #8]
 8015446:	60ab      	str	r3, [r5, #8]
 8015448:	e7f2      	b.n	8015430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

0801544a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801544a:	b510      	push	{r4, lr}
 801544c:	4604      	mov	r4, r0
 801544e:	f7ff ff9d 	bl	801538c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015452:	4620      	mov	r0, r4
 8015454:	bd10      	pop	{r4, pc}

08015456 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8015456:	b510      	push	{r4, lr}
 8015458:	4604      	mov	r4, r0
 801545a:	f7ff ff6e 	bl	801533a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801545e:	b908      	cbnz	r0, 8015464 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8015460:	68a0      	ldr	r0, [r4, #8]
 8015462:	bd10      	pop	{r4, pc}
 8015464:	200f      	movs	r0, #15
 8015466:	e7fc      	b.n	8015462 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08015468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8015468:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801546c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801546e:	461f      	mov	r7, r3
 8015470:	6843      	ldr	r3, [r0, #4]
 8015472:	eb01 0802 	add.w	r8, r1, r2
 8015476:	1ab2      	subs	r2, r6, r2
 8015478:	441a      	add	r2, r3
 801547a:	4604      	mov	r4, r0
 801547c:	460d      	mov	r5, r1
 801547e:	eba3 0908 	sub.w	r9, r3, r8
 8015482:	9201      	str	r2, [sp, #4]
 8015484:	f7ff ffe7 	bl	8015456 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8015488:	a901      	add	r1, sp, #4
 801548a:	4602      	mov	r2, r0
 801548c:	4620      	mov	r0, r4
 801548e:	f7ff ff5b 	bl	8015348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015492:	4682      	mov	sl, r0
 8015494:	b11d      	cbz	r5, 801549e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8015496:	6821      	ldr	r1, [r4, #0]
 8015498:	462a      	mov	r2, r5
 801549a:	f7ff ff9a 	bl	80153d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801549e:	b137      	cbz	r7, 80154ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80154a0:	b12e      	cbz	r6, 80154ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80154a2:	4632      	mov	r2, r6
 80154a4:	4639      	mov	r1, r7
 80154a6:	eb0a 0005 	add.w	r0, sl, r5
 80154aa:	f7ff ff92 	bl	80153d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80154ae:	f1b9 0f00 	cmp.w	r9, #0
 80154b2:	d007      	beq.n	80154c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 80154b4:	6821      	ldr	r1, [r4, #0]
 80154b6:	4435      	add	r5, r6
 80154b8:	464a      	mov	r2, r9
 80154ba:	4441      	add	r1, r8
 80154bc:	eb0a 0005 	add.w	r0, sl, r5
 80154c0:	f7ff ff87 	bl	80153d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80154c4:	4620      	mov	r0, r4
 80154c6:	f7ff ff61 	bl	801538c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80154ca:	9b01      	ldr	r3, [sp, #4]
 80154cc:	f8c4 a000 	str.w	sl, [r4]
 80154d0:	60a3      	str	r3, [r4, #8]
 80154d2:	b002      	add	sp, #8
 80154d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080154d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 80154d8:	6802      	ldr	r2, [r0, #0]
 80154da:	2300      	movs	r3, #0
 80154dc:	6043      	str	r3, [r0, #4]
 80154de:	7013      	strb	r3, [r2, #0]
 80154e0:	4770      	bx	lr
	...

080154e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80154e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e8:	b085      	sub	sp, #20
 80154ea:	4680      	mov	r8, r0
 80154ec:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80154ee:	4614      	mov	r4, r2
 80154f0:	4689      	mov	r9, r1
 80154f2:	462a      	mov	r2, r5
 80154f4:	4621      	mov	r1, r4
 80154f6:	461f      	mov	r7, r3
 80154f8:	4b37      	ldr	r3, [pc, #220]	@ (80155d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 80154fa:	f7ff ff52 	bl	80153a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80154fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015502:	9303      	str	r3, [sp, #12]
 8015504:	eba5 0b04 	sub.w	fp, r5, r4
 8015508:	4640      	mov	r0, r8
 801550a:	eb03 0a0b 	add.w	sl, r3, fp
 801550e:	f7ff ffa2 	bl	8015456 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8015512:	4550      	cmp	r0, sl
 8015514:	d354      	bcc.n	80155c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8015516:	f8d8 6000 	ldr.w	r6, [r8]
 801551a:	9b03      	ldr	r3, [sp, #12]
 801551c:	444e      	add	r6, r9
 801551e:	4639      	mov	r1, r7
 8015520:	44a1      	add	r9, r4
 8015522:	4640      	mov	r0, r8
 8015524:	eba3 0909 	sub.w	r9, r3, r9
 8015528:	f7ff ff47 	bl	80153ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 801552c:	b180      	cbz	r0, 8015550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 801552e:	f1b9 0f00 	cmp.w	r9, #0
 8015532:	d006      	beq.n	8015542 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8015534:	42ac      	cmp	r4, r5
 8015536:	d004      	beq.n	8015542 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8015538:	464a      	mov	r2, r9
 801553a:	1931      	adds	r1, r6, r4
 801553c:	1970      	adds	r0, r6, r5
 801553e:	f7ff ff54 	bl	80153ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8015542:	b315      	cbz	r5, 801558a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8015544:	462a      	mov	r2, r5
 8015546:	4639      	mov	r1, r7
 8015548:	4630      	mov	r0, r6
 801554a:	f7ff ff42 	bl	80153d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801554e:	e01c      	b.n	801558a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8015550:	b135      	cbz	r5, 8015560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8015552:	42ac      	cmp	r4, r5
 8015554:	d33c      	bcc.n	80155d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8015556:	462a      	mov	r2, r5
 8015558:	4639      	mov	r1, r7
 801555a:	4630      	mov	r0, r6
 801555c:	f7ff ff45 	bl	80153ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8015560:	f1b9 0f00 	cmp.w	r9, #0
 8015564:	d011      	beq.n	801558a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8015566:	42ac      	cmp	r4, r5
 8015568:	d00f      	beq.n	801558a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 801556a:	464a      	mov	r2, r9
 801556c:	1931      	adds	r1, r6, r4
 801556e:	1970      	adds	r0, r6, r5
 8015570:	f7ff ff3b 	bl	80153ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8015574:	42ac      	cmp	r4, r5
 8015576:	d208      	bcs.n	801558a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8015578:	4434      	add	r4, r6
 801557a:	197b      	adds	r3, r7, r5
 801557c:	429c      	cmp	r4, r3
 801557e:	d30f      	bcc.n	80155a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8015580:	462a      	mov	r2, r5
 8015582:	4639      	mov	r1, r7
 8015584:	4630      	mov	r0, r6
 8015586:	f7ff ff30 	bl	80153ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801558a:	f8d8 3000 	ldr.w	r3, [r8]
 801558e:	f8c8 a004 	str.w	sl, [r8, #4]
 8015592:	2200      	movs	r2, #0
 8015594:	4640      	mov	r0, r8
 8015596:	f803 200a 	strb.w	r2, [r3, sl]
 801559a:	b005      	add	sp, #20
 801559c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155a0:	42bc      	cmp	r4, r7
 80155a2:	d803      	bhi.n	80155ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 80155a4:	462a      	mov	r2, r5
 80155a6:	eb07 010b 	add.w	r1, r7, fp
 80155aa:	e7cd      	b.n	8015548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 80155ac:	1be4      	subs	r4, r4, r7
 80155ae:	4622      	mov	r2, r4
 80155b0:	4639      	mov	r1, r7
 80155b2:	4630      	mov	r0, r6
 80155b4:	f7ff ff19 	bl	80153ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80155b8:	1b2a      	subs	r2, r5, r4
 80155ba:	1971      	adds	r1, r6, r5
 80155bc:	1930      	adds	r0, r6, r4
 80155be:	e7c4      	b.n	801554a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 80155c0:	9500      	str	r5, [sp, #0]
 80155c2:	463b      	mov	r3, r7
 80155c4:	4622      	mov	r2, r4
 80155c6:	4649      	mov	r1, r9
 80155c8:	4640      	mov	r0, r8
 80155ca:	f7ff ff4d 	bl	8015468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80155ce:	e7dc      	b.n	801558a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80155d0:	f1b9 0f00 	cmp.w	r9, #0
 80155d4:	d0d0      	beq.n	8015578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 80155d6:	e7c8      	b.n	801556a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 80155d8:	08016e90 	.word	0x08016e90

080155dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80155dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155de:	4604      	mov	r4, r0
 80155e0:	4608      	mov	r0, r1
 80155e2:	460d      	mov	r5, r1
 80155e4:	f7ea fe5c 	bl	80002a0 <strlen>
 80155e8:	9000      	str	r0, [sp, #0]
 80155ea:	6862      	ldr	r2, [r4, #4]
 80155ec:	462b      	mov	r3, r5
 80155ee:	2100      	movs	r1, #0
 80155f0:	4620      	mov	r0, r4
 80155f2:	f7ff ff77 	bl	80154e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80155f6:	b003      	add	sp, #12
 80155f8:	bd30      	pop	{r4, r5, pc}

080155fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80155fa:	b508      	push	{r3, lr}
 80155fc:	f7ff ffee 	bl	80155dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8015600:	bd08      	pop	{r3, pc}

08015602 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8015602:	6800      	ldr	r0, [r0, #0]
 8015604:	4770      	bx	lr

08015606 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8015606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015608:	1a53      	subs	r3, r2, r1
 801560a:	2b0f      	cmp	r3, #15
 801560c:	4604      	mov	r4, r0
 801560e:	460d      	mov	r5, r1
 8015610:	4616      	mov	r6, r2
 8015612:	9301      	str	r3, [sp, #4]
 8015614:	d906      	bls.n	8015624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8015616:	2200      	movs	r2, #0
 8015618:	a901      	add	r1, sp, #4
 801561a:	f7ff fe95 	bl	8015348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801561e:	9b01      	ldr	r3, [sp, #4]
 8015620:	6020      	str	r0, [r4, #0]
 8015622:	60a3      	str	r3, [r4, #8]
 8015624:	4632      	mov	r2, r6
 8015626:	4629      	mov	r1, r5
 8015628:	6820      	ldr	r0, [r4, #0]
 801562a:	f7ff feea 	bl	8015402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 801562e:	9b01      	ldr	r3, [sp, #4]
 8015630:	6822      	ldr	r2, [r4, #0]
 8015632:	6063      	str	r3, [r4, #4]
 8015634:	2100      	movs	r1, #0
 8015636:	54d1      	strb	r1, [r2, r3]
 8015638:	b002      	add	sp, #8
 801563a:	bd70      	pop	{r4, r5, r6, pc}

0801563c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 801563c:	b538      	push	{r3, r4, r5, lr}
 801563e:	f100 0308 	add.w	r3, r0, #8
 8015642:	4604      	mov	r4, r0
 8015644:	6003      	str	r3, [r0, #0]
 8015646:	460d      	mov	r5, r1
 8015648:	b911      	cbnz	r1, 8015650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 801564a:	4807      	ldr	r0, [pc, #28]	@ (8015668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 801564c:	f7ff fe6b 	bl	8015326 <_ZSt19__throw_logic_errorPKc>
 8015650:	4608      	mov	r0, r1
 8015652:	f7ea fe25 	bl	80002a0 <strlen>
 8015656:	f04f 0300 	mov.w	r3, #0
 801565a:	182a      	adds	r2, r5, r0
 801565c:	4629      	mov	r1, r5
 801565e:	4620      	mov	r0, r4
 8015660:	f7ff ffd1 	bl	8015606 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8015664:	4620      	mov	r0, r4
 8015666:	bd38      	pop	{r3, r4, r5, pc}
 8015668:	08016ea9 	.word	0x08016ea9

0801566c <_ZdlPv>:
 801566c:	f000 b818 	b.w	80156a0 <free>

08015670 <_ZSt15get_new_handlerv>:
 8015670:	4b02      	ldr	r3, [pc, #8]	@ (801567c <_ZSt15get_new_handlerv+0xc>)
 8015672:	6818      	ldr	r0, [r3, #0]
 8015674:	f3bf 8f5b 	dmb	ish
 8015678:	4770      	bx	lr
 801567a:	bf00      	nop
 801567c:	20001198 	.word	0x20001198

08015680 <abort>:
 8015680:	b508      	push	{r3, lr}
 8015682:	2006      	movs	r0, #6
 8015684:	f000 fa6e 	bl	8015b64 <raise>
 8015688:	2001      	movs	r0, #1
 801568a:	f7ee fa57 	bl	8003b3c <_exit>
	...

08015690 <malloc>:
 8015690:	4b02      	ldr	r3, [pc, #8]	@ (801569c <malloc+0xc>)
 8015692:	4601      	mov	r1, r0
 8015694:	6818      	ldr	r0, [r3, #0]
 8015696:	f000 b82d 	b.w	80156f4 <_malloc_r>
 801569a:	bf00      	nop
 801569c:	20000038 	.word	0x20000038

080156a0 <free>:
 80156a0:	4b02      	ldr	r3, [pc, #8]	@ (80156ac <free+0xc>)
 80156a2:	4601      	mov	r1, r0
 80156a4:	6818      	ldr	r0, [r3, #0]
 80156a6:	f000 bb0b 	b.w	8015cc0 <_free_r>
 80156aa:	bf00      	nop
 80156ac:	20000038 	.word	0x20000038

080156b0 <sbrk_aligned>:
 80156b0:	b570      	push	{r4, r5, r6, lr}
 80156b2:	4e0f      	ldr	r6, [pc, #60]	@ (80156f0 <sbrk_aligned+0x40>)
 80156b4:	460c      	mov	r4, r1
 80156b6:	6831      	ldr	r1, [r6, #0]
 80156b8:	4605      	mov	r5, r0
 80156ba:	b911      	cbnz	r1, 80156c2 <sbrk_aligned+0x12>
 80156bc:	f000 faa2 	bl	8015c04 <_sbrk_r>
 80156c0:	6030      	str	r0, [r6, #0]
 80156c2:	4621      	mov	r1, r4
 80156c4:	4628      	mov	r0, r5
 80156c6:	f000 fa9d 	bl	8015c04 <_sbrk_r>
 80156ca:	1c43      	adds	r3, r0, #1
 80156cc:	d103      	bne.n	80156d6 <sbrk_aligned+0x26>
 80156ce:	f04f 34ff 	mov.w	r4, #4294967295
 80156d2:	4620      	mov	r0, r4
 80156d4:	bd70      	pop	{r4, r5, r6, pc}
 80156d6:	1cc4      	adds	r4, r0, #3
 80156d8:	f024 0403 	bic.w	r4, r4, #3
 80156dc:	42a0      	cmp	r0, r4
 80156de:	d0f8      	beq.n	80156d2 <sbrk_aligned+0x22>
 80156e0:	1a21      	subs	r1, r4, r0
 80156e2:	4628      	mov	r0, r5
 80156e4:	f000 fa8e 	bl	8015c04 <_sbrk_r>
 80156e8:	3001      	adds	r0, #1
 80156ea:	d1f2      	bne.n	80156d2 <sbrk_aligned+0x22>
 80156ec:	e7ef      	b.n	80156ce <sbrk_aligned+0x1e>
 80156ee:	bf00      	nop
 80156f0:	2000119c 	.word	0x2000119c

080156f4 <_malloc_r>:
 80156f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156f8:	1ccd      	adds	r5, r1, #3
 80156fa:	f025 0503 	bic.w	r5, r5, #3
 80156fe:	3508      	adds	r5, #8
 8015700:	2d0c      	cmp	r5, #12
 8015702:	bf38      	it	cc
 8015704:	250c      	movcc	r5, #12
 8015706:	2d00      	cmp	r5, #0
 8015708:	4606      	mov	r6, r0
 801570a:	db01      	blt.n	8015710 <_malloc_r+0x1c>
 801570c:	42a9      	cmp	r1, r5
 801570e:	d904      	bls.n	801571a <_malloc_r+0x26>
 8015710:	230c      	movs	r3, #12
 8015712:	6033      	str	r3, [r6, #0]
 8015714:	2000      	movs	r0, #0
 8015716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801571a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80157f0 <_malloc_r+0xfc>
 801571e:	f000 f869 	bl	80157f4 <__malloc_lock>
 8015722:	f8d8 3000 	ldr.w	r3, [r8]
 8015726:	461c      	mov	r4, r3
 8015728:	bb44      	cbnz	r4, 801577c <_malloc_r+0x88>
 801572a:	4629      	mov	r1, r5
 801572c:	4630      	mov	r0, r6
 801572e:	f7ff ffbf 	bl	80156b0 <sbrk_aligned>
 8015732:	1c43      	adds	r3, r0, #1
 8015734:	4604      	mov	r4, r0
 8015736:	d158      	bne.n	80157ea <_malloc_r+0xf6>
 8015738:	f8d8 4000 	ldr.w	r4, [r8]
 801573c:	4627      	mov	r7, r4
 801573e:	2f00      	cmp	r7, #0
 8015740:	d143      	bne.n	80157ca <_malloc_r+0xd6>
 8015742:	2c00      	cmp	r4, #0
 8015744:	d04b      	beq.n	80157de <_malloc_r+0xea>
 8015746:	6823      	ldr	r3, [r4, #0]
 8015748:	4639      	mov	r1, r7
 801574a:	4630      	mov	r0, r6
 801574c:	eb04 0903 	add.w	r9, r4, r3
 8015750:	f000 fa58 	bl	8015c04 <_sbrk_r>
 8015754:	4581      	cmp	r9, r0
 8015756:	d142      	bne.n	80157de <_malloc_r+0xea>
 8015758:	6821      	ldr	r1, [r4, #0]
 801575a:	1a6d      	subs	r5, r5, r1
 801575c:	4629      	mov	r1, r5
 801575e:	4630      	mov	r0, r6
 8015760:	f7ff ffa6 	bl	80156b0 <sbrk_aligned>
 8015764:	3001      	adds	r0, #1
 8015766:	d03a      	beq.n	80157de <_malloc_r+0xea>
 8015768:	6823      	ldr	r3, [r4, #0]
 801576a:	442b      	add	r3, r5
 801576c:	6023      	str	r3, [r4, #0]
 801576e:	f8d8 3000 	ldr.w	r3, [r8]
 8015772:	685a      	ldr	r2, [r3, #4]
 8015774:	bb62      	cbnz	r2, 80157d0 <_malloc_r+0xdc>
 8015776:	f8c8 7000 	str.w	r7, [r8]
 801577a:	e00f      	b.n	801579c <_malloc_r+0xa8>
 801577c:	6822      	ldr	r2, [r4, #0]
 801577e:	1b52      	subs	r2, r2, r5
 8015780:	d420      	bmi.n	80157c4 <_malloc_r+0xd0>
 8015782:	2a0b      	cmp	r2, #11
 8015784:	d917      	bls.n	80157b6 <_malloc_r+0xc2>
 8015786:	1961      	adds	r1, r4, r5
 8015788:	42a3      	cmp	r3, r4
 801578a:	6025      	str	r5, [r4, #0]
 801578c:	bf18      	it	ne
 801578e:	6059      	strne	r1, [r3, #4]
 8015790:	6863      	ldr	r3, [r4, #4]
 8015792:	bf08      	it	eq
 8015794:	f8c8 1000 	streq.w	r1, [r8]
 8015798:	5162      	str	r2, [r4, r5]
 801579a:	604b      	str	r3, [r1, #4]
 801579c:	4630      	mov	r0, r6
 801579e:	f000 f82f 	bl	8015800 <__malloc_unlock>
 80157a2:	f104 000b 	add.w	r0, r4, #11
 80157a6:	1d23      	adds	r3, r4, #4
 80157a8:	f020 0007 	bic.w	r0, r0, #7
 80157ac:	1ac2      	subs	r2, r0, r3
 80157ae:	bf1c      	itt	ne
 80157b0:	1a1b      	subne	r3, r3, r0
 80157b2:	50a3      	strne	r3, [r4, r2]
 80157b4:	e7af      	b.n	8015716 <_malloc_r+0x22>
 80157b6:	6862      	ldr	r2, [r4, #4]
 80157b8:	42a3      	cmp	r3, r4
 80157ba:	bf0c      	ite	eq
 80157bc:	f8c8 2000 	streq.w	r2, [r8]
 80157c0:	605a      	strne	r2, [r3, #4]
 80157c2:	e7eb      	b.n	801579c <_malloc_r+0xa8>
 80157c4:	4623      	mov	r3, r4
 80157c6:	6864      	ldr	r4, [r4, #4]
 80157c8:	e7ae      	b.n	8015728 <_malloc_r+0x34>
 80157ca:	463c      	mov	r4, r7
 80157cc:	687f      	ldr	r7, [r7, #4]
 80157ce:	e7b6      	b.n	801573e <_malloc_r+0x4a>
 80157d0:	461a      	mov	r2, r3
 80157d2:	685b      	ldr	r3, [r3, #4]
 80157d4:	42a3      	cmp	r3, r4
 80157d6:	d1fb      	bne.n	80157d0 <_malloc_r+0xdc>
 80157d8:	2300      	movs	r3, #0
 80157da:	6053      	str	r3, [r2, #4]
 80157dc:	e7de      	b.n	801579c <_malloc_r+0xa8>
 80157de:	230c      	movs	r3, #12
 80157e0:	6033      	str	r3, [r6, #0]
 80157e2:	4630      	mov	r0, r6
 80157e4:	f000 f80c 	bl	8015800 <__malloc_unlock>
 80157e8:	e794      	b.n	8015714 <_malloc_r+0x20>
 80157ea:	6005      	str	r5, [r0, #0]
 80157ec:	e7d6      	b.n	801579c <_malloc_r+0xa8>
 80157ee:	bf00      	nop
 80157f0:	200011a0 	.word	0x200011a0

080157f4 <__malloc_lock>:
 80157f4:	4801      	ldr	r0, [pc, #4]	@ (80157fc <__malloc_lock+0x8>)
 80157f6:	f000 ba52 	b.w	8015c9e <__retarget_lock_acquire_recursive>
 80157fa:	bf00      	nop
 80157fc:	200012e4 	.word	0x200012e4

08015800 <__malloc_unlock>:
 8015800:	4801      	ldr	r0, [pc, #4]	@ (8015808 <__malloc_unlock+0x8>)
 8015802:	f000 ba4d 	b.w	8015ca0 <__retarget_lock_release_recursive>
 8015806:	bf00      	nop
 8015808:	200012e4 	.word	0x200012e4

0801580c <std>:
 801580c:	2300      	movs	r3, #0
 801580e:	b510      	push	{r4, lr}
 8015810:	4604      	mov	r4, r0
 8015812:	e9c0 3300 	strd	r3, r3, [r0]
 8015816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801581a:	6083      	str	r3, [r0, #8]
 801581c:	8181      	strh	r1, [r0, #12]
 801581e:	6643      	str	r3, [r0, #100]	@ 0x64
 8015820:	81c2      	strh	r2, [r0, #14]
 8015822:	6183      	str	r3, [r0, #24]
 8015824:	4619      	mov	r1, r3
 8015826:	2208      	movs	r2, #8
 8015828:	305c      	adds	r0, #92	@ 0x5c
 801582a:	f000 f954 	bl	8015ad6 <memset>
 801582e:	4b0d      	ldr	r3, [pc, #52]	@ (8015864 <std+0x58>)
 8015830:	6263      	str	r3, [r4, #36]	@ 0x24
 8015832:	4b0d      	ldr	r3, [pc, #52]	@ (8015868 <std+0x5c>)
 8015834:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015836:	4b0d      	ldr	r3, [pc, #52]	@ (801586c <std+0x60>)
 8015838:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801583a:	4b0d      	ldr	r3, [pc, #52]	@ (8015870 <std+0x64>)
 801583c:	6323      	str	r3, [r4, #48]	@ 0x30
 801583e:	4b0d      	ldr	r3, [pc, #52]	@ (8015874 <std+0x68>)
 8015840:	6224      	str	r4, [r4, #32]
 8015842:	429c      	cmp	r4, r3
 8015844:	d006      	beq.n	8015854 <std+0x48>
 8015846:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801584a:	4294      	cmp	r4, r2
 801584c:	d002      	beq.n	8015854 <std+0x48>
 801584e:	33d0      	adds	r3, #208	@ 0xd0
 8015850:	429c      	cmp	r4, r3
 8015852:	d105      	bne.n	8015860 <std+0x54>
 8015854:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801585c:	f000 ba1e 	b.w	8015c9c <__retarget_lock_init_recursive>
 8015860:	bd10      	pop	{r4, pc}
 8015862:	bf00      	nop
 8015864:	08015a1d 	.word	0x08015a1d
 8015868:	08015a3f 	.word	0x08015a3f
 801586c:	08015a77 	.word	0x08015a77
 8015870:	08015a9b 	.word	0x08015a9b
 8015874:	200011a4 	.word	0x200011a4

08015878 <stdio_exit_handler>:
 8015878:	4a02      	ldr	r2, [pc, #8]	@ (8015884 <stdio_exit_handler+0xc>)
 801587a:	4903      	ldr	r1, [pc, #12]	@ (8015888 <stdio_exit_handler+0x10>)
 801587c:	4803      	ldr	r0, [pc, #12]	@ (801588c <stdio_exit_handler+0x14>)
 801587e:	f000 b869 	b.w	8015954 <_fwalk_sglue>
 8015882:	bf00      	nop
 8015884:	2000002c 	.word	0x2000002c
 8015888:	080166ad 	.word	0x080166ad
 801588c:	2000003c 	.word	0x2000003c

08015890 <cleanup_stdio>:
 8015890:	6841      	ldr	r1, [r0, #4]
 8015892:	4b0c      	ldr	r3, [pc, #48]	@ (80158c4 <cleanup_stdio+0x34>)
 8015894:	4299      	cmp	r1, r3
 8015896:	b510      	push	{r4, lr}
 8015898:	4604      	mov	r4, r0
 801589a:	d001      	beq.n	80158a0 <cleanup_stdio+0x10>
 801589c:	f000 ff06 	bl	80166ac <_fflush_r>
 80158a0:	68a1      	ldr	r1, [r4, #8]
 80158a2:	4b09      	ldr	r3, [pc, #36]	@ (80158c8 <cleanup_stdio+0x38>)
 80158a4:	4299      	cmp	r1, r3
 80158a6:	d002      	beq.n	80158ae <cleanup_stdio+0x1e>
 80158a8:	4620      	mov	r0, r4
 80158aa:	f000 feff 	bl	80166ac <_fflush_r>
 80158ae:	68e1      	ldr	r1, [r4, #12]
 80158b0:	4b06      	ldr	r3, [pc, #24]	@ (80158cc <cleanup_stdio+0x3c>)
 80158b2:	4299      	cmp	r1, r3
 80158b4:	d004      	beq.n	80158c0 <cleanup_stdio+0x30>
 80158b6:	4620      	mov	r0, r4
 80158b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158bc:	f000 bef6 	b.w	80166ac <_fflush_r>
 80158c0:	bd10      	pop	{r4, pc}
 80158c2:	bf00      	nop
 80158c4:	200011a4 	.word	0x200011a4
 80158c8:	2000120c 	.word	0x2000120c
 80158cc:	20001274 	.word	0x20001274

080158d0 <global_stdio_init.part.0>:
 80158d0:	b510      	push	{r4, lr}
 80158d2:	4b0b      	ldr	r3, [pc, #44]	@ (8015900 <global_stdio_init.part.0+0x30>)
 80158d4:	4c0b      	ldr	r4, [pc, #44]	@ (8015904 <global_stdio_init.part.0+0x34>)
 80158d6:	4a0c      	ldr	r2, [pc, #48]	@ (8015908 <global_stdio_init.part.0+0x38>)
 80158d8:	601a      	str	r2, [r3, #0]
 80158da:	4620      	mov	r0, r4
 80158dc:	2200      	movs	r2, #0
 80158de:	2104      	movs	r1, #4
 80158e0:	f7ff ff94 	bl	801580c <std>
 80158e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80158e8:	2201      	movs	r2, #1
 80158ea:	2109      	movs	r1, #9
 80158ec:	f7ff ff8e 	bl	801580c <std>
 80158f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80158f4:	2202      	movs	r2, #2
 80158f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158fa:	2112      	movs	r1, #18
 80158fc:	f7ff bf86 	b.w	801580c <std>
 8015900:	200012dc 	.word	0x200012dc
 8015904:	200011a4 	.word	0x200011a4
 8015908:	08015879 	.word	0x08015879

0801590c <__sfp_lock_acquire>:
 801590c:	4801      	ldr	r0, [pc, #4]	@ (8015914 <__sfp_lock_acquire+0x8>)
 801590e:	f000 b9c6 	b.w	8015c9e <__retarget_lock_acquire_recursive>
 8015912:	bf00      	nop
 8015914:	200012e5 	.word	0x200012e5

08015918 <__sfp_lock_release>:
 8015918:	4801      	ldr	r0, [pc, #4]	@ (8015920 <__sfp_lock_release+0x8>)
 801591a:	f000 b9c1 	b.w	8015ca0 <__retarget_lock_release_recursive>
 801591e:	bf00      	nop
 8015920:	200012e5 	.word	0x200012e5

08015924 <__sinit>:
 8015924:	b510      	push	{r4, lr}
 8015926:	4604      	mov	r4, r0
 8015928:	f7ff fff0 	bl	801590c <__sfp_lock_acquire>
 801592c:	6a23      	ldr	r3, [r4, #32]
 801592e:	b11b      	cbz	r3, 8015938 <__sinit+0x14>
 8015930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015934:	f7ff bff0 	b.w	8015918 <__sfp_lock_release>
 8015938:	4b04      	ldr	r3, [pc, #16]	@ (801594c <__sinit+0x28>)
 801593a:	6223      	str	r3, [r4, #32]
 801593c:	4b04      	ldr	r3, [pc, #16]	@ (8015950 <__sinit+0x2c>)
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d1f5      	bne.n	8015930 <__sinit+0xc>
 8015944:	f7ff ffc4 	bl	80158d0 <global_stdio_init.part.0>
 8015948:	e7f2      	b.n	8015930 <__sinit+0xc>
 801594a:	bf00      	nop
 801594c:	08015891 	.word	0x08015891
 8015950:	200012dc 	.word	0x200012dc

08015954 <_fwalk_sglue>:
 8015954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015958:	4607      	mov	r7, r0
 801595a:	4688      	mov	r8, r1
 801595c:	4614      	mov	r4, r2
 801595e:	2600      	movs	r6, #0
 8015960:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015964:	f1b9 0901 	subs.w	r9, r9, #1
 8015968:	d505      	bpl.n	8015976 <_fwalk_sglue+0x22>
 801596a:	6824      	ldr	r4, [r4, #0]
 801596c:	2c00      	cmp	r4, #0
 801596e:	d1f7      	bne.n	8015960 <_fwalk_sglue+0xc>
 8015970:	4630      	mov	r0, r6
 8015972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015976:	89ab      	ldrh	r3, [r5, #12]
 8015978:	2b01      	cmp	r3, #1
 801597a:	d907      	bls.n	801598c <_fwalk_sglue+0x38>
 801597c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015980:	3301      	adds	r3, #1
 8015982:	d003      	beq.n	801598c <_fwalk_sglue+0x38>
 8015984:	4629      	mov	r1, r5
 8015986:	4638      	mov	r0, r7
 8015988:	47c0      	blx	r8
 801598a:	4306      	orrs	r6, r0
 801598c:	3568      	adds	r5, #104	@ 0x68
 801598e:	e7e9      	b.n	8015964 <_fwalk_sglue+0x10>

08015990 <iprintf>:
 8015990:	b40f      	push	{r0, r1, r2, r3}
 8015992:	b507      	push	{r0, r1, r2, lr}
 8015994:	4906      	ldr	r1, [pc, #24]	@ (80159b0 <iprintf+0x20>)
 8015996:	ab04      	add	r3, sp, #16
 8015998:	6808      	ldr	r0, [r1, #0]
 801599a:	f853 2b04 	ldr.w	r2, [r3], #4
 801599e:	6881      	ldr	r1, [r0, #8]
 80159a0:	9301      	str	r3, [sp, #4]
 80159a2:	f000 fb59 	bl	8016058 <_vfiprintf_r>
 80159a6:	b003      	add	sp, #12
 80159a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80159ac:	b004      	add	sp, #16
 80159ae:	4770      	bx	lr
 80159b0:	20000038 	.word	0x20000038

080159b4 <sniprintf>:
 80159b4:	b40c      	push	{r2, r3}
 80159b6:	b530      	push	{r4, r5, lr}
 80159b8:	4b17      	ldr	r3, [pc, #92]	@ (8015a18 <sniprintf+0x64>)
 80159ba:	1e0c      	subs	r4, r1, #0
 80159bc:	681d      	ldr	r5, [r3, #0]
 80159be:	b09d      	sub	sp, #116	@ 0x74
 80159c0:	da08      	bge.n	80159d4 <sniprintf+0x20>
 80159c2:	238b      	movs	r3, #139	@ 0x8b
 80159c4:	602b      	str	r3, [r5, #0]
 80159c6:	f04f 30ff 	mov.w	r0, #4294967295
 80159ca:	b01d      	add	sp, #116	@ 0x74
 80159cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80159d0:	b002      	add	sp, #8
 80159d2:	4770      	bx	lr
 80159d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80159d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80159dc:	bf14      	ite	ne
 80159de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80159e2:	4623      	moveq	r3, r4
 80159e4:	9304      	str	r3, [sp, #16]
 80159e6:	9307      	str	r3, [sp, #28]
 80159e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80159ec:	9002      	str	r0, [sp, #8]
 80159ee:	9006      	str	r0, [sp, #24]
 80159f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80159f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80159f6:	ab21      	add	r3, sp, #132	@ 0x84
 80159f8:	a902      	add	r1, sp, #8
 80159fa:	4628      	mov	r0, r5
 80159fc:	9301      	str	r3, [sp, #4]
 80159fe:	f000 fa05 	bl	8015e0c <_svfiprintf_r>
 8015a02:	1c43      	adds	r3, r0, #1
 8015a04:	bfbc      	itt	lt
 8015a06:	238b      	movlt	r3, #139	@ 0x8b
 8015a08:	602b      	strlt	r3, [r5, #0]
 8015a0a:	2c00      	cmp	r4, #0
 8015a0c:	d0dd      	beq.n	80159ca <sniprintf+0x16>
 8015a0e:	9b02      	ldr	r3, [sp, #8]
 8015a10:	2200      	movs	r2, #0
 8015a12:	701a      	strb	r2, [r3, #0]
 8015a14:	e7d9      	b.n	80159ca <sniprintf+0x16>
 8015a16:	bf00      	nop
 8015a18:	20000038 	.word	0x20000038

08015a1c <__sread>:
 8015a1c:	b510      	push	{r4, lr}
 8015a1e:	460c      	mov	r4, r1
 8015a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a24:	f000 f8c8 	bl	8015bb8 <_read_r>
 8015a28:	2800      	cmp	r0, #0
 8015a2a:	bfab      	itete	ge
 8015a2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8015a30:	181b      	addge	r3, r3, r0
 8015a32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015a36:	bfac      	ite	ge
 8015a38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015a3a:	81a3      	strhlt	r3, [r4, #12]
 8015a3c:	bd10      	pop	{r4, pc}

08015a3e <__swrite>:
 8015a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a42:	461f      	mov	r7, r3
 8015a44:	898b      	ldrh	r3, [r1, #12]
 8015a46:	05db      	lsls	r3, r3, #23
 8015a48:	4605      	mov	r5, r0
 8015a4a:	460c      	mov	r4, r1
 8015a4c:	4616      	mov	r6, r2
 8015a4e:	d505      	bpl.n	8015a5c <__swrite+0x1e>
 8015a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a54:	2302      	movs	r3, #2
 8015a56:	2200      	movs	r2, #0
 8015a58:	f000 f89c 	bl	8015b94 <_lseek_r>
 8015a5c:	89a3      	ldrh	r3, [r4, #12]
 8015a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015a66:	81a3      	strh	r3, [r4, #12]
 8015a68:	4632      	mov	r2, r6
 8015a6a:	463b      	mov	r3, r7
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a72:	f000 b8d7 	b.w	8015c24 <_write_r>

08015a76 <__sseek>:
 8015a76:	b510      	push	{r4, lr}
 8015a78:	460c      	mov	r4, r1
 8015a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a7e:	f000 f889 	bl	8015b94 <_lseek_r>
 8015a82:	1c43      	adds	r3, r0, #1
 8015a84:	89a3      	ldrh	r3, [r4, #12]
 8015a86:	bf15      	itete	ne
 8015a88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015a8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015a8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015a92:	81a3      	strheq	r3, [r4, #12]
 8015a94:	bf18      	it	ne
 8015a96:	81a3      	strhne	r3, [r4, #12]
 8015a98:	bd10      	pop	{r4, pc}

08015a9a <__sclose>:
 8015a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a9e:	f000 b869 	b.w	8015b74 <_close_r>

08015aa2 <memmove>:
 8015aa2:	4288      	cmp	r0, r1
 8015aa4:	b510      	push	{r4, lr}
 8015aa6:	eb01 0402 	add.w	r4, r1, r2
 8015aaa:	d902      	bls.n	8015ab2 <memmove+0x10>
 8015aac:	4284      	cmp	r4, r0
 8015aae:	4623      	mov	r3, r4
 8015ab0:	d807      	bhi.n	8015ac2 <memmove+0x20>
 8015ab2:	1e43      	subs	r3, r0, #1
 8015ab4:	42a1      	cmp	r1, r4
 8015ab6:	d008      	beq.n	8015aca <memmove+0x28>
 8015ab8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015abc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015ac0:	e7f8      	b.n	8015ab4 <memmove+0x12>
 8015ac2:	4402      	add	r2, r0
 8015ac4:	4601      	mov	r1, r0
 8015ac6:	428a      	cmp	r2, r1
 8015ac8:	d100      	bne.n	8015acc <memmove+0x2a>
 8015aca:	bd10      	pop	{r4, pc}
 8015acc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015ad0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015ad4:	e7f7      	b.n	8015ac6 <memmove+0x24>

08015ad6 <memset>:
 8015ad6:	4402      	add	r2, r0
 8015ad8:	4603      	mov	r3, r0
 8015ada:	4293      	cmp	r3, r2
 8015adc:	d100      	bne.n	8015ae0 <memset+0xa>
 8015ade:	4770      	bx	lr
 8015ae0:	f803 1b01 	strb.w	r1, [r3], #1
 8015ae4:	e7f9      	b.n	8015ada <memset+0x4>

08015ae6 <strstr>:
 8015ae6:	780a      	ldrb	r2, [r1, #0]
 8015ae8:	b570      	push	{r4, r5, r6, lr}
 8015aea:	b96a      	cbnz	r2, 8015b08 <strstr+0x22>
 8015aec:	bd70      	pop	{r4, r5, r6, pc}
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d109      	bne.n	8015b06 <strstr+0x20>
 8015af2:	460c      	mov	r4, r1
 8015af4:	4605      	mov	r5, r0
 8015af6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d0f6      	beq.n	8015aec <strstr+0x6>
 8015afe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015b02:	429e      	cmp	r6, r3
 8015b04:	d0f7      	beq.n	8015af6 <strstr+0x10>
 8015b06:	3001      	adds	r0, #1
 8015b08:	7803      	ldrb	r3, [r0, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d1ef      	bne.n	8015aee <strstr+0x8>
 8015b0e:	4618      	mov	r0, r3
 8015b10:	e7ec      	b.n	8015aec <strstr+0x6>

08015b12 <_raise_r>:
 8015b12:	291f      	cmp	r1, #31
 8015b14:	b538      	push	{r3, r4, r5, lr}
 8015b16:	4605      	mov	r5, r0
 8015b18:	460c      	mov	r4, r1
 8015b1a:	d904      	bls.n	8015b26 <_raise_r+0x14>
 8015b1c:	2316      	movs	r3, #22
 8015b1e:	6003      	str	r3, [r0, #0]
 8015b20:	f04f 30ff 	mov.w	r0, #4294967295
 8015b24:	bd38      	pop	{r3, r4, r5, pc}
 8015b26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015b28:	b112      	cbz	r2, 8015b30 <_raise_r+0x1e>
 8015b2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015b2e:	b94b      	cbnz	r3, 8015b44 <_raise_r+0x32>
 8015b30:	4628      	mov	r0, r5
 8015b32:	f000 f865 	bl	8015c00 <_getpid_r>
 8015b36:	4622      	mov	r2, r4
 8015b38:	4601      	mov	r1, r0
 8015b3a:	4628      	mov	r0, r5
 8015b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b40:	f000 b84c 	b.w	8015bdc <_kill_r>
 8015b44:	2b01      	cmp	r3, #1
 8015b46:	d00a      	beq.n	8015b5e <_raise_r+0x4c>
 8015b48:	1c59      	adds	r1, r3, #1
 8015b4a:	d103      	bne.n	8015b54 <_raise_r+0x42>
 8015b4c:	2316      	movs	r3, #22
 8015b4e:	6003      	str	r3, [r0, #0]
 8015b50:	2001      	movs	r0, #1
 8015b52:	e7e7      	b.n	8015b24 <_raise_r+0x12>
 8015b54:	2100      	movs	r1, #0
 8015b56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015b5a:	4620      	mov	r0, r4
 8015b5c:	4798      	blx	r3
 8015b5e:	2000      	movs	r0, #0
 8015b60:	e7e0      	b.n	8015b24 <_raise_r+0x12>
	...

08015b64 <raise>:
 8015b64:	4b02      	ldr	r3, [pc, #8]	@ (8015b70 <raise+0xc>)
 8015b66:	4601      	mov	r1, r0
 8015b68:	6818      	ldr	r0, [r3, #0]
 8015b6a:	f7ff bfd2 	b.w	8015b12 <_raise_r>
 8015b6e:	bf00      	nop
 8015b70:	20000038 	.word	0x20000038

08015b74 <_close_r>:
 8015b74:	b538      	push	{r3, r4, r5, lr}
 8015b76:	4d06      	ldr	r5, [pc, #24]	@ (8015b90 <_close_r+0x1c>)
 8015b78:	2300      	movs	r3, #0
 8015b7a:	4604      	mov	r4, r0
 8015b7c:	4608      	mov	r0, r1
 8015b7e:	602b      	str	r3, [r5, #0]
 8015b80:	f7ee f804 	bl	8003b8c <_close>
 8015b84:	1c43      	adds	r3, r0, #1
 8015b86:	d102      	bne.n	8015b8e <_close_r+0x1a>
 8015b88:	682b      	ldr	r3, [r5, #0]
 8015b8a:	b103      	cbz	r3, 8015b8e <_close_r+0x1a>
 8015b8c:	6023      	str	r3, [r4, #0]
 8015b8e:	bd38      	pop	{r3, r4, r5, pc}
 8015b90:	200012e0 	.word	0x200012e0

08015b94 <_lseek_r>:
 8015b94:	b538      	push	{r3, r4, r5, lr}
 8015b96:	4d07      	ldr	r5, [pc, #28]	@ (8015bb4 <_lseek_r+0x20>)
 8015b98:	4604      	mov	r4, r0
 8015b9a:	4608      	mov	r0, r1
 8015b9c:	4611      	mov	r1, r2
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	602a      	str	r2, [r5, #0]
 8015ba2:	461a      	mov	r2, r3
 8015ba4:	f7ee f819 	bl	8003bda <_lseek>
 8015ba8:	1c43      	adds	r3, r0, #1
 8015baa:	d102      	bne.n	8015bb2 <_lseek_r+0x1e>
 8015bac:	682b      	ldr	r3, [r5, #0]
 8015bae:	b103      	cbz	r3, 8015bb2 <_lseek_r+0x1e>
 8015bb0:	6023      	str	r3, [r4, #0]
 8015bb2:	bd38      	pop	{r3, r4, r5, pc}
 8015bb4:	200012e0 	.word	0x200012e0

08015bb8 <_read_r>:
 8015bb8:	b538      	push	{r3, r4, r5, lr}
 8015bba:	4d07      	ldr	r5, [pc, #28]	@ (8015bd8 <_read_r+0x20>)
 8015bbc:	4604      	mov	r4, r0
 8015bbe:	4608      	mov	r0, r1
 8015bc0:	4611      	mov	r1, r2
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	602a      	str	r2, [r5, #0]
 8015bc6:	461a      	mov	r2, r3
 8015bc8:	f7ed ffc3 	bl	8003b52 <_read>
 8015bcc:	1c43      	adds	r3, r0, #1
 8015bce:	d102      	bne.n	8015bd6 <_read_r+0x1e>
 8015bd0:	682b      	ldr	r3, [r5, #0]
 8015bd2:	b103      	cbz	r3, 8015bd6 <_read_r+0x1e>
 8015bd4:	6023      	str	r3, [r4, #0]
 8015bd6:	bd38      	pop	{r3, r4, r5, pc}
 8015bd8:	200012e0 	.word	0x200012e0

08015bdc <_kill_r>:
 8015bdc:	b538      	push	{r3, r4, r5, lr}
 8015bde:	4d07      	ldr	r5, [pc, #28]	@ (8015bfc <_kill_r+0x20>)
 8015be0:	2300      	movs	r3, #0
 8015be2:	4604      	mov	r4, r0
 8015be4:	4608      	mov	r0, r1
 8015be6:	4611      	mov	r1, r2
 8015be8:	602b      	str	r3, [r5, #0]
 8015bea:	f7ed ff97 	bl	8003b1c <_kill>
 8015bee:	1c43      	adds	r3, r0, #1
 8015bf0:	d102      	bne.n	8015bf8 <_kill_r+0x1c>
 8015bf2:	682b      	ldr	r3, [r5, #0]
 8015bf4:	b103      	cbz	r3, 8015bf8 <_kill_r+0x1c>
 8015bf6:	6023      	str	r3, [r4, #0]
 8015bf8:	bd38      	pop	{r3, r4, r5, pc}
 8015bfa:	bf00      	nop
 8015bfc:	200012e0 	.word	0x200012e0

08015c00 <_getpid_r>:
 8015c00:	f7ed bf84 	b.w	8003b0c <_getpid>

08015c04 <_sbrk_r>:
 8015c04:	b538      	push	{r3, r4, r5, lr}
 8015c06:	4d06      	ldr	r5, [pc, #24]	@ (8015c20 <_sbrk_r+0x1c>)
 8015c08:	2300      	movs	r3, #0
 8015c0a:	4604      	mov	r4, r0
 8015c0c:	4608      	mov	r0, r1
 8015c0e:	602b      	str	r3, [r5, #0]
 8015c10:	f7ed fff0 	bl	8003bf4 <_sbrk>
 8015c14:	1c43      	adds	r3, r0, #1
 8015c16:	d102      	bne.n	8015c1e <_sbrk_r+0x1a>
 8015c18:	682b      	ldr	r3, [r5, #0]
 8015c1a:	b103      	cbz	r3, 8015c1e <_sbrk_r+0x1a>
 8015c1c:	6023      	str	r3, [r4, #0]
 8015c1e:	bd38      	pop	{r3, r4, r5, pc}
 8015c20:	200012e0 	.word	0x200012e0

08015c24 <_write_r>:
 8015c24:	b538      	push	{r3, r4, r5, lr}
 8015c26:	4d07      	ldr	r5, [pc, #28]	@ (8015c44 <_write_r+0x20>)
 8015c28:	4604      	mov	r4, r0
 8015c2a:	4608      	mov	r0, r1
 8015c2c:	4611      	mov	r1, r2
 8015c2e:	2200      	movs	r2, #0
 8015c30:	602a      	str	r2, [r5, #0]
 8015c32:	461a      	mov	r2, r3
 8015c34:	f7ec f986 	bl	8001f44 <_write>
 8015c38:	1c43      	adds	r3, r0, #1
 8015c3a:	d102      	bne.n	8015c42 <_write_r+0x1e>
 8015c3c:	682b      	ldr	r3, [r5, #0]
 8015c3e:	b103      	cbz	r3, 8015c42 <_write_r+0x1e>
 8015c40:	6023      	str	r3, [r4, #0]
 8015c42:	bd38      	pop	{r3, r4, r5, pc}
 8015c44:	200012e0 	.word	0x200012e0

08015c48 <__errno>:
 8015c48:	4b01      	ldr	r3, [pc, #4]	@ (8015c50 <__errno+0x8>)
 8015c4a:	6818      	ldr	r0, [r3, #0]
 8015c4c:	4770      	bx	lr
 8015c4e:	bf00      	nop
 8015c50:	20000038 	.word	0x20000038

08015c54 <__libc_init_array>:
 8015c54:	b570      	push	{r4, r5, r6, lr}
 8015c56:	4d0d      	ldr	r5, [pc, #52]	@ (8015c8c <__libc_init_array+0x38>)
 8015c58:	4c0d      	ldr	r4, [pc, #52]	@ (8015c90 <__libc_init_array+0x3c>)
 8015c5a:	1b64      	subs	r4, r4, r5
 8015c5c:	10a4      	asrs	r4, r4, #2
 8015c5e:	2600      	movs	r6, #0
 8015c60:	42a6      	cmp	r6, r4
 8015c62:	d109      	bne.n	8015c78 <__libc_init_array+0x24>
 8015c64:	4d0b      	ldr	r5, [pc, #44]	@ (8015c94 <__libc_init_array+0x40>)
 8015c66:	4c0c      	ldr	r4, [pc, #48]	@ (8015c98 <__libc_init_array+0x44>)
 8015c68:	f000 fe96 	bl	8016998 <_init>
 8015c6c:	1b64      	subs	r4, r4, r5
 8015c6e:	10a4      	asrs	r4, r4, #2
 8015c70:	2600      	movs	r6, #0
 8015c72:	42a6      	cmp	r6, r4
 8015c74:	d105      	bne.n	8015c82 <__libc_init_array+0x2e>
 8015c76:	bd70      	pop	{r4, r5, r6, pc}
 8015c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c7c:	4798      	blx	r3
 8015c7e:	3601      	adds	r6, #1
 8015c80:	e7ee      	b.n	8015c60 <__libc_init_array+0xc>
 8015c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c86:	4798      	blx	r3
 8015c88:	3601      	adds	r6, #1
 8015c8a:	e7f2      	b.n	8015c72 <__libc_init_array+0x1e>
 8015c8c:	08016f18 	.word	0x08016f18
 8015c90:	08016f18 	.word	0x08016f18
 8015c94:	08016f18 	.word	0x08016f18
 8015c98:	08016f1c 	.word	0x08016f1c

08015c9c <__retarget_lock_init_recursive>:
 8015c9c:	4770      	bx	lr

08015c9e <__retarget_lock_acquire_recursive>:
 8015c9e:	4770      	bx	lr

08015ca0 <__retarget_lock_release_recursive>:
 8015ca0:	4770      	bx	lr

08015ca2 <memcpy>:
 8015ca2:	440a      	add	r2, r1
 8015ca4:	4291      	cmp	r1, r2
 8015ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8015caa:	d100      	bne.n	8015cae <memcpy+0xc>
 8015cac:	4770      	bx	lr
 8015cae:	b510      	push	{r4, lr}
 8015cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015cb8:	4291      	cmp	r1, r2
 8015cba:	d1f9      	bne.n	8015cb0 <memcpy+0xe>
 8015cbc:	bd10      	pop	{r4, pc}
	...

08015cc0 <_free_r>:
 8015cc0:	b538      	push	{r3, r4, r5, lr}
 8015cc2:	4605      	mov	r5, r0
 8015cc4:	2900      	cmp	r1, #0
 8015cc6:	d041      	beq.n	8015d4c <_free_r+0x8c>
 8015cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ccc:	1f0c      	subs	r4, r1, #4
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	bfb8      	it	lt
 8015cd2:	18e4      	addlt	r4, r4, r3
 8015cd4:	f7ff fd8e 	bl	80157f4 <__malloc_lock>
 8015cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8015d50 <_free_r+0x90>)
 8015cda:	6813      	ldr	r3, [r2, #0]
 8015cdc:	b933      	cbnz	r3, 8015cec <_free_r+0x2c>
 8015cde:	6063      	str	r3, [r4, #4]
 8015ce0:	6014      	str	r4, [r2, #0]
 8015ce2:	4628      	mov	r0, r5
 8015ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ce8:	f7ff bd8a 	b.w	8015800 <__malloc_unlock>
 8015cec:	42a3      	cmp	r3, r4
 8015cee:	d908      	bls.n	8015d02 <_free_r+0x42>
 8015cf0:	6820      	ldr	r0, [r4, #0]
 8015cf2:	1821      	adds	r1, r4, r0
 8015cf4:	428b      	cmp	r3, r1
 8015cf6:	bf01      	itttt	eq
 8015cf8:	6819      	ldreq	r1, [r3, #0]
 8015cfa:	685b      	ldreq	r3, [r3, #4]
 8015cfc:	1809      	addeq	r1, r1, r0
 8015cfe:	6021      	streq	r1, [r4, #0]
 8015d00:	e7ed      	b.n	8015cde <_free_r+0x1e>
 8015d02:	461a      	mov	r2, r3
 8015d04:	685b      	ldr	r3, [r3, #4]
 8015d06:	b10b      	cbz	r3, 8015d0c <_free_r+0x4c>
 8015d08:	42a3      	cmp	r3, r4
 8015d0a:	d9fa      	bls.n	8015d02 <_free_r+0x42>
 8015d0c:	6811      	ldr	r1, [r2, #0]
 8015d0e:	1850      	adds	r0, r2, r1
 8015d10:	42a0      	cmp	r0, r4
 8015d12:	d10b      	bne.n	8015d2c <_free_r+0x6c>
 8015d14:	6820      	ldr	r0, [r4, #0]
 8015d16:	4401      	add	r1, r0
 8015d18:	1850      	adds	r0, r2, r1
 8015d1a:	4283      	cmp	r3, r0
 8015d1c:	6011      	str	r1, [r2, #0]
 8015d1e:	d1e0      	bne.n	8015ce2 <_free_r+0x22>
 8015d20:	6818      	ldr	r0, [r3, #0]
 8015d22:	685b      	ldr	r3, [r3, #4]
 8015d24:	6053      	str	r3, [r2, #4]
 8015d26:	4408      	add	r0, r1
 8015d28:	6010      	str	r0, [r2, #0]
 8015d2a:	e7da      	b.n	8015ce2 <_free_r+0x22>
 8015d2c:	d902      	bls.n	8015d34 <_free_r+0x74>
 8015d2e:	230c      	movs	r3, #12
 8015d30:	602b      	str	r3, [r5, #0]
 8015d32:	e7d6      	b.n	8015ce2 <_free_r+0x22>
 8015d34:	6820      	ldr	r0, [r4, #0]
 8015d36:	1821      	adds	r1, r4, r0
 8015d38:	428b      	cmp	r3, r1
 8015d3a:	bf04      	itt	eq
 8015d3c:	6819      	ldreq	r1, [r3, #0]
 8015d3e:	685b      	ldreq	r3, [r3, #4]
 8015d40:	6063      	str	r3, [r4, #4]
 8015d42:	bf04      	itt	eq
 8015d44:	1809      	addeq	r1, r1, r0
 8015d46:	6021      	streq	r1, [r4, #0]
 8015d48:	6054      	str	r4, [r2, #4]
 8015d4a:	e7ca      	b.n	8015ce2 <_free_r+0x22>
 8015d4c:	bd38      	pop	{r3, r4, r5, pc}
 8015d4e:	bf00      	nop
 8015d50:	200011a0 	.word	0x200011a0

08015d54 <__ssputs_r>:
 8015d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d58:	688e      	ldr	r6, [r1, #8]
 8015d5a:	461f      	mov	r7, r3
 8015d5c:	42be      	cmp	r6, r7
 8015d5e:	680b      	ldr	r3, [r1, #0]
 8015d60:	4682      	mov	sl, r0
 8015d62:	460c      	mov	r4, r1
 8015d64:	4690      	mov	r8, r2
 8015d66:	d82d      	bhi.n	8015dc4 <__ssputs_r+0x70>
 8015d68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015d6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015d70:	d026      	beq.n	8015dc0 <__ssputs_r+0x6c>
 8015d72:	6965      	ldr	r5, [r4, #20]
 8015d74:	6909      	ldr	r1, [r1, #16]
 8015d76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d7a:	eba3 0901 	sub.w	r9, r3, r1
 8015d7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015d82:	1c7b      	adds	r3, r7, #1
 8015d84:	444b      	add	r3, r9
 8015d86:	106d      	asrs	r5, r5, #1
 8015d88:	429d      	cmp	r5, r3
 8015d8a:	bf38      	it	cc
 8015d8c:	461d      	movcc	r5, r3
 8015d8e:	0553      	lsls	r3, r2, #21
 8015d90:	d527      	bpl.n	8015de2 <__ssputs_r+0x8e>
 8015d92:	4629      	mov	r1, r5
 8015d94:	f7ff fcae 	bl	80156f4 <_malloc_r>
 8015d98:	4606      	mov	r6, r0
 8015d9a:	b360      	cbz	r0, 8015df6 <__ssputs_r+0xa2>
 8015d9c:	6921      	ldr	r1, [r4, #16]
 8015d9e:	464a      	mov	r2, r9
 8015da0:	f7ff ff7f 	bl	8015ca2 <memcpy>
 8015da4:	89a3      	ldrh	r3, [r4, #12]
 8015da6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015dae:	81a3      	strh	r3, [r4, #12]
 8015db0:	6126      	str	r6, [r4, #16]
 8015db2:	6165      	str	r5, [r4, #20]
 8015db4:	444e      	add	r6, r9
 8015db6:	eba5 0509 	sub.w	r5, r5, r9
 8015dba:	6026      	str	r6, [r4, #0]
 8015dbc:	60a5      	str	r5, [r4, #8]
 8015dbe:	463e      	mov	r6, r7
 8015dc0:	42be      	cmp	r6, r7
 8015dc2:	d900      	bls.n	8015dc6 <__ssputs_r+0x72>
 8015dc4:	463e      	mov	r6, r7
 8015dc6:	6820      	ldr	r0, [r4, #0]
 8015dc8:	4632      	mov	r2, r6
 8015dca:	4641      	mov	r1, r8
 8015dcc:	f7ff fe69 	bl	8015aa2 <memmove>
 8015dd0:	68a3      	ldr	r3, [r4, #8]
 8015dd2:	1b9b      	subs	r3, r3, r6
 8015dd4:	60a3      	str	r3, [r4, #8]
 8015dd6:	6823      	ldr	r3, [r4, #0]
 8015dd8:	4433      	add	r3, r6
 8015dda:	6023      	str	r3, [r4, #0]
 8015ddc:	2000      	movs	r0, #0
 8015dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015de2:	462a      	mov	r2, r5
 8015de4:	f000 fd1e 	bl	8016824 <_realloc_r>
 8015de8:	4606      	mov	r6, r0
 8015dea:	2800      	cmp	r0, #0
 8015dec:	d1e0      	bne.n	8015db0 <__ssputs_r+0x5c>
 8015dee:	6921      	ldr	r1, [r4, #16]
 8015df0:	4650      	mov	r0, sl
 8015df2:	f7ff ff65 	bl	8015cc0 <_free_r>
 8015df6:	230c      	movs	r3, #12
 8015df8:	f8ca 3000 	str.w	r3, [sl]
 8015dfc:	89a3      	ldrh	r3, [r4, #12]
 8015dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015e02:	81a3      	strh	r3, [r4, #12]
 8015e04:	f04f 30ff 	mov.w	r0, #4294967295
 8015e08:	e7e9      	b.n	8015dde <__ssputs_r+0x8a>
	...

08015e0c <_svfiprintf_r>:
 8015e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e10:	4698      	mov	r8, r3
 8015e12:	898b      	ldrh	r3, [r1, #12]
 8015e14:	061b      	lsls	r3, r3, #24
 8015e16:	b09d      	sub	sp, #116	@ 0x74
 8015e18:	4607      	mov	r7, r0
 8015e1a:	460d      	mov	r5, r1
 8015e1c:	4614      	mov	r4, r2
 8015e1e:	d510      	bpl.n	8015e42 <_svfiprintf_r+0x36>
 8015e20:	690b      	ldr	r3, [r1, #16]
 8015e22:	b973      	cbnz	r3, 8015e42 <_svfiprintf_r+0x36>
 8015e24:	2140      	movs	r1, #64	@ 0x40
 8015e26:	f7ff fc65 	bl	80156f4 <_malloc_r>
 8015e2a:	6028      	str	r0, [r5, #0]
 8015e2c:	6128      	str	r0, [r5, #16]
 8015e2e:	b930      	cbnz	r0, 8015e3e <_svfiprintf_r+0x32>
 8015e30:	230c      	movs	r3, #12
 8015e32:	603b      	str	r3, [r7, #0]
 8015e34:	f04f 30ff 	mov.w	r0, #4294967295
 8015e38:	b01d      	add	sp, #116	@ 0x74
 8015e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e3e:	2340      	movs	r3, #64	@ 0x40
 8015e40:	616b      	str	r3, [r5, #20]
 8015e42:	2300      	movs	r3, #0
 8015e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e46:	2320      	movs	r3, #32
 8015e48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e50:	2330      	movs	r3, #48	@ 0x30
 8015e52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015ff0 <_svfiprintf_r+0x1e4>
 8015e56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015e5a:	f04f 0901 	mov.w	r9, #1
 8015e5e:	4623      	mov	r3, r4
 8015e60:	469a      	mov	sl, r3
 8015e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e66:	b10a      	cbz	r2, 8015e6c <_svfiprintf_r+0x60>
 8015e68:	2a25      	cmp	r2, #37	@ 0x25
 8015e6a:	d1f9      	bne.n	8015e60 <_svfiprintf_r+0x54>
 8015e6c:	ebba 0b04 	subs.w	fp, sl, r4
 8015e70:	d00b      	beq.n	8015e8a <_svfiprintf_r+0x7e>
 8015e72:	465b      	mov	r3, fp
 8015e74:	4622      	mov	r2, r4
 8015e76:	4629      	mov	r1, r5
 8015e78:	4638      	mov	r0, r7
 8015e7a:	f7ff ff6b 	bl	8015d54 <__ssputs_r>
 8015e7e:	3001      	adds	r0, #1
 8015e80:	f000 80a7 	beq.w	8015fd2 <_svfiprintf_r+0x1c6>
 8015e84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015e86:	445a      	add	r2, fp
 8015e88:	9209      	str	r2, [sp, #36]	@ 0x24
 8015e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	f000 809f 	beq.w	8015fd2 <_svfiprintf_r+0x1c6>
 8015e94:	2300      	movs	r3, #0
 8015e96:	f04f 32ff 	mov.w	r2, #4294967295
 8015e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e9e:	f10a 0a01 	add.w	sl, sl, #1
 8015ea2:	9304      	str	r3, [sp, #16]
 8015ea4:	9307      	str	r3, [sp, #28]
 8015ea6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015eaa:	931a      	str	r3, [sp, #104]	@ 0x68
 8015eac:	4654      	mov	r4, sl
 8015eae:	2205      	movs	r2, #5
 8015eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eb4:	484e      	ldr	r0, [pc, #312]	@ (8015ff0 <_svfiprintf_r+0x1e4>)
 8015eb6:	f7ea f9a3 	bl	8000200 <memchr>
 8015eba:	9a04      	ldr	r2, [sp, #16]
 8015ebc:	b9d8      	cbnz	r0, 8015ef6 <_svfiprintf_r+0xea>
 8015ebe:	06d0      	lsls	r0, r2, #27
 8015ec0:	bf44      	itt	mi
 8015ec2:	2320      	movmi	r3, #32
 8015ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ec8:	0711      	lsls	r1, r2, #28
 8015eca:	bf44      	itt	mi
 8015ecc:	232b      	movmi	r3, #43	@ 0x2b
 8015ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8015ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8015ed8:	d015      	beq.n	8015f06 <_svfiprintf_r+0xfa>
 8015eda:	9a07      	ldr	r2, [sp, #28]
 8015edc:	4654      	mov	r4, sl
 8015ede:	2000      	movs	r0, #0
 8015ee0:	f04f 0c0a 	mov.w	ip, #10
 8015ee4:	4621      	mov	r1, r4
 8015ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015eea:	3b30      	subs	r3, #48	@ 0x30
 8015eec:	2b09      	cmp	r3, #9
 8015eee:	d94b      	bls.n	8015f88 <_svfiprintf_r+0x17c>
 8015ef0:	b1b0      	cbz	r0, 8015f20 <_svfiprintf_r+0x114>
 8015ef2:	9207      	str	r2, [sp, #28]
 8015ef4:	e014      	b.n	8015f20 <_svfiprintf_r+0x114>
 8015ef6:	eba0 0308 	sub.w	r3, r0, r8
 8015efa:	fa09 f303 	lsl.w	r3, r9, r3
 8015efe:	4313      	orrs	r3, r2
 8015f00:	9304      	str	r3, [sp, #16]
 8015f02:	46a2      	mov	sl, r4
 8015f04:	e7d2      	b.n	8015eac <_svfiprintf_r+0xa0>
 8015f06:	9b03      	ldr	r3, [sp, #12]
 8015f08:	1d19      	adds	r1, r3, #4
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	9103      	str	r1, [sp, #12]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	bfbb      	ittet	lt
 8015f12:	425b      	neglt	r3, r3
 8015f14:	f042 0202 	orrlt.w	r2, r2, #2
 8015f18:	9307      	strge	r3, [sp, #28]
 8015f1a:	9307      	strlt	r3, [sp, #28]
 8015f1c:	bfb8      	it	lt
 8015f1e:	9204      	strlt	r2, [sp, #16]
 8015f20:	7823      	ldrb	r3, [r4, #0]
 8015f22:	2b2e      	cmp	r3, #46	@ 0x2e
 8015f24:	d10a      	bne.n	8015f3c <_svfiprintf_r+0x130>
 8015f26:	7863      	ldrb	r3, [r4, #1]
 8015f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8015f2a:	d132      	bne.n	8015f92 <_svfiprintf_r+0x186>
 8015f2c:	9b03      	ldr	r3, [sp, #12]
 8015f2e:	1d1a      	adds	r2, r3, #4
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	9203      	str	r2, [sp, #12]
 8015f34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015f38:	3402      	adds	r4, #2
 8015f3a:	9305      	str	r3, [sp, #20]
 8015f3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016000 <_svfiprintf_r+0x1f4>
 8015f40:	7821      	ldrb	r1, [r4, #0]
 8015f42:	2203      	movs	r2, #3
 8015f44:	4650      	mov	r0, sl
 8015f46:	f7ea f95b 	bl	8000200 <memchr>
 8015f4a:	b138      	cbz	r0, 8015f5c <_svfiprintf_r+0x150>
 8015f4c:	9b04      	ldr	r3, [sp, #16]
 8015f4e:	eba0 000a 	sub.w	r0, r0, sl
 8015f52:	2240      	movs	r2, #64	@ 0x40
 8015f54:	4082      	lsls	r2, r0
 8015f56:	4313      	orrs	r3, r2
 8015f58:	3401      	adds	r4, #1
 8015f5a:	9304      	str	r3, [sp, #16]
 8015f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f60:	4824      	ldr	r0, [pc, #144]	@ (8015ff4 <_svfiprintf_r+0x1e8>)
 8015f62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015f66:	2206      	movs	r2, #6
 8015f68:	f7ea f94a 	bl	8000200 <memchr>
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	d036      	beq.n	8015fde <_svfiprintf_r+0x1d2>
 8015f70:	4b21      	ldr	r3, [pc, #132]	@ (8015ff8 <_svfiprintf_r+0x1ec>)
 8015f72:	bb1b      	cbnz	r3, 8015fbc <_svfiprintf_r+0x1b0>
 8015f74:	9b03      	ldr	r3, [sp, #12]
 8015f76:	3307      	adds	r3, #7
 8015f78:	f023 0307 	bic.w	r3, r3, #7
 8015f7c:	3308      	adds	r3, #8
 8015f7e:	9303      	str	r3, [sp, #12]
 8015f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f82:	4433      	add	r3, r6
 8015f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f86:	e76a      	b.n	8015e5e <_svfiprintf_r+0x52>
 8015f88:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f8c:	460c      	mov	r4, r1
 8015f8e:	2001      	movs	r0, #1
 8015f90:	e7a8      	b.n	8015ee4 <_svfiprintf_r+0xd8>
 8015f92:	2300      	movs	r3, #0
 8015f94:	3401      	adds	r4, #1
 8015f96:	9305      	str	r3, [sp, #20]
 8015f98:	4619      	mov	r1, r3
 8015f9a:	f04f 0c0a 	mov.w	ip, #10
 8015f9e:	4620      	mov	r0, r4
 8015fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fa4:	3a30      	subs	r2, #48	@ 0x30
 8015fa6:	2a09      	cmp	r2, #9
 8015fa8:	d903      	bls.n	8015fb2 <_svfiprintf_r+0x1a6>
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d0c6      	beq.n	8015f3c <_svfiprintf_r+0x130>
 8015fae:	9105      	str	r1, [sp, #20]
 8015fb0:	e7c4      	b.n	8015f3c <_svfiprintf_r+0x130>
 8015fb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8015fb6:	4604      	mov	r4, r0
 8015fb8:	2301      	movs	r3, #1
 8015fba:	e7f0      	b.n	8015f9e <_svfiprintf_r+0x192>
 8015fbc:	ab03      	add	r3, sp, #12
 8015fbe:	9300      	str	r3, [sp, #0]
 8015fc0:	462a      	mov	r2, r5
 8015fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8015ffc <_svfiprintf_r+0x1f0>)
 8015fc4:	a904      	add	r1, sp, #16
 8015fc6:	4638      	mov	r0, r7
 8015fc8:	f3af 8000 	nop.w
 8015fcc:	1c42      	adds	r2, r0, #1
 8015fce:	4606      	mov	r6, r0
 8015fd0:	d1d6      	bne.n	8015f80 <_svfiprintf_r+0x174>
 8015fd2:	89ab      	ldrh	r3, [r5, #12]
 8015fd4:	065b      	lsls	r3, r3, #25
 8015fd6:	f53f af2d 	bmi.w	8015e34 <_svfiprintf_r+0x28>
 8015fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015fdc:	e72c      	b.n	8015e38 <_svfiprintf_r+0x2c>
 8015fde:	ab03      	add	r3, sp, #12
 8015fe0:	9300      	str	r3, [sp, #0]
 8015fe2:	462a      	mov	r2, r5
 8015fe4:	4b05      	ldr	r3, [pc, #20]	@ (8015ffc <_svfiprintf_r+0x1f0>)
 8015fe6:	a904      	add	r1, sp, #16
 8015fe8:	4638      	mov	r0, r7
 8015fea:	f000 f9bb 	bl	8016364 <_printf_i>
 8015fee:	e7ed      	b.n	8015fcc <_svfiprintf_r+0x1c0>
 8015ff0:	08016edb 	.word	0x08016edb
 8015ff4:	08016ee5 	.word	0x08016ee5
 8015ff8:	00000000 	.word	0x00000000
 8015ffc:	08015d55 	.word	0x08015d55
 8016000:	08016ee1 	.word	0x08016ee1

08016004 <__sfputc_r>:
 8016004:	6893      	ldr	r3, [r2, #8]
 8016006:	3b01      	subs	r3, #1
 8016008:	2b00      	cmp	r3, #0
 801600a:	b410      	push	{r4}
 801600c:	6093      	str	r3, [r2, #8]
 801600e:	da08      	bge.n	8016022 <__sfputc_r+0x1e>
 8016010:	6994      	ldr	r4, [r2, #24]
 8016012:	42a3      	cmp	r3, r4
 8016014:	db01      	blt.n	801601a <__sfputc_r+0x16>
 8016016:	290a      	cmp	r1, #10
 8016018:	d103      	bne.n	8016022 <__sfputc_r+0x1e>
 801601a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801601e:	f000 bb6d 	b.w	80166fc <__swbuf_r>
 8016022:	6813      	ldr	r3, [r2, #0]
 8016024:	1c58      	adds	r0, r3, #1
 8016026:	6010      	str	r0, [r2, #0]
 8016028:	7019      	strb	r1, [r3, #0]
 801602a:	4608      	mov	r0, r1
 801602c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016030:	4770      	bx	lr

08016032 <__sfputs_r>:
 8016032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016034:	4606      	mov	r6, r0
 8016036:	460f      	mov	r7, r1
 8016038:	4614      	mov	r4, r2
 801603a:	18d5      	adds	r5, r2, r3
 801603c:	42ac      	cmp	r4, r5
 801603e:	d101      	bne.n	8016044 <__sfputs_r+0x12>
 8016040:	2000      	movs	r0, #0
 8016042:	e007      	b.n	8016054 <__sfputs_r+0x22>
 8016044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016048:	463a      	mov	r2, r7
 801604a:	4630      	mov	r0, r6
 801604c:	f7ff ffda 	bl	8016004 <__sfputc_r>
 8016050:	1c43      	adds	r3, r0, #1
 8016052:	d1f3      	bne.n	801603c <__sfputs_r+0xa>
 8016054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016058 <_vfiprintf_r>:
 8016058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605c:	460d      	mov	r5, r1
 801605e:	b09d      	sub	sp, #116	@ 0x74
 8016060:	4614      	mov	r4, r2
 8016062:	4698      	mov	r8, r3
 8016064:	4606      	mov	r6, r0
 8016066:	b118      	cbz	r0, 8016070 <_vfiprintf_r+0x18>
 8016068:	6a03      	ldr	r3, [r0, #32]
 801606a:	b90b      	cbnz	r3, 8016070 <_vfiprintf_r+0x18>
 801606c:	f7ff fc5a 	bl	8015924 <__sinit>
 8016070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016072:	07d9      	lsls	r1, r3, #31
 8016074:	d405      	bmi.n	8016082 <_vfiprintf_r+0x2a>
 8016076:	89ab      	ldrh	r3, [r5, #12]
 8016078:	059a      	lsls	r2, r3, #22
 801607a:	d402      	bmi.n	8016082 <_vfiprintf_r+0x2a>
 801607c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801607e:	f7ff fe0e 	bl	8015c9e <__retarget_lock_acquire_recursive>
 8016082:	89ab      	ldrh	r3, [r5, #12]
 8016084:	071b      	lsls	r3, r3, #28
 8016086:	d501      	bpl.n	801608c <_vfiprintf_r+0x34>
 8016088:	692b      	ldr	r3, [r5, #16]
 801608a:	b99b      	cbnz	r3, 80160b4 <_vfiprintf_r+0x5c>
 801608c:	4629      	mov	r1, r5
 801608e:	4630      	mov	r0, r6
 8016090:	f000 fb72 	bl	8016778 <__swsetup_r>
 8016094:	b170      	cbz	r0, 80160b4 <_vfiprintf_r+0x5c>
 8016096:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016098:	07dc      	lsls	r4, r3, #31
 801609a:	d504      	bpl.n	80160a6 <_vfiprintf_r+0x4e>
 801609c:	f04f 30ff 	mov.w	r0, #4294967295
 80160a0:	b01d      	add	sp, #116	@ 0x74
 80160a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160a6:	89ab      	ldrh	r3, [r5, #12]
 80160a8:	0598      	lsls	r0, r3, #22
 80160aa:	d4f7      	bmi.n	801609c <_vfiprintf_r+0x44>
 80160ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80160ae:	f7ff fdf7 	bl	8015ca0 <__retarget_lock_release_recursive>
 80160b2:	e7f3      	b.n	801609c <_vfiprintf_r+0x44>
 80160b4:	2300      	movs	r3, #0
 80160b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80160b8:	2320      	movs	r3, #32
 80160ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80160be:	f8cd 800c 	str.w	r8, [sp, #12]
 80160c2:	2330      	movs	r3, #48	@ 0x30
 80160c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016274 <_vfiprintf_r+0x21c>
 80160c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80160cc:	f04f 0901 	mov.w	r9, #1
 80160d0:	4623      	mov	r3, r4
 80160d2:	469a      	mov	sl, r3
 80160d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160d8:	b10a      	cbz	r2, 80160de <_vfiprintf_r+0x86>
 80160da:	2a25      	cmp	r2, #37	@ 0x25
 80160dc:	d1f9      	bne.n	80160d2 <_vfiprintf_r+0x7a>
 80160de:	ebba 0b04 	subs.w	fp, sl, r4
 80160e2:	d00b      	beq.n	80160fc <_vfiprintf_r+0xa4>
 80160e4:	465b      	mov	r3, fp
 80160e6:	4622      	mov	r2, r4
 80160e8:	4629      	mov	r1, r5
 80160ea:	4630      	mov	r0, r6
 80160ec:	f7ff ffa1 	bl	8016032 <__sfputs_r>
 80160f0:	3001      	adds	r0, #1
 80160f2:	f000 80a7 	beq.w	8016244 <_vfiprintf_r+0x1ec>
 80160f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80160f8:	445a      	add	r2, fp
 80160fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80160fc:	f89a 3000 	ldrb.w	r3, [sl]
 8016100:	2b00      	cmp	r3, #0
 8016102:	f000 809f 	beq.w	8016244 <_vfiprintf_r+0x1ec>
 8016106:	2300      	movs	r3, #0
 8016108:	f04f 32ff 	mov.w	r2, #4294967295
 801610c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016110:	f10a 0a01 	add.w	sl, sl, #1
 8016114:	9304      	str	r3, [sp, #16]
 8016116:	9307      	str	r3, [sp, #28]
 8016118:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801611c:	931a      	str	r3, [sp, #104]	@ 0x68
 801611e:	4654      	mov	r4, sl
 8016120:	2205      	movs	r2, #5
 8016122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016126:	4853      	ldr	r0, [pc, #332]	@ (8016274 <_vfiprintf_r+0x21c>)
 8016128:	f7ea f86a 	bl	8000200 <memchr>
 801612c:	9a04      	ldr	r2, [sp, #16]
 801612e:	b9d8      	cbnz	r0, 8016168 <_vfiprintf_r+0x110>
 8016130:	06d1      	lsls	r1, r2, #27
 8016132:	bf44      	itt	mi
 8016134:	2320      	movmi	r3, #32
 8016136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801613a:	0713      	lsls	r3, r2, #28
 801613c:	bf44      	itt	mi
 801613e:	232b      	movmi	r3, #43	@ 0x2b
 8016140:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016144:	f89a 3000 	ldrb.w	r3, [sl]
 8016148:	2b2a      	cmp	r3, #42	@ 0x2a
 801614a:	d015      	beq.n	8016178 <_vfiprintf_r+0x120>
 801614c:	9a07      	ldr	r2, [sp, #28]
 801614e:	4654      	mov	r4, sl
 8016150:	2000      	movs	r0, #0
 8016152:	f04f 0c0a 	mov.w	ip, #10
 8016156:	4621      	mov	r1, r4
 8016158:	f811 3b01 	ldrb.w	r3, [r1], #1
 801615c:	3b30      	subs	r3, #48	@ 0x30
 801615e:	2b09      	cmp	r3, #9
 8016160:	d94b      	bls.n	80161fa <_vfiprintf_r+0x1a2>
 8016162:	b1b0      	cbz	r0, 8016192 <_vfiprintf_r+0x13a>
 8016164:	9207      	str	r2, [sp, #28]
 8016166:	e014      	b.n	8016192 <_vfiprintf_r+0x13a>
 8016168:	eba0 0308 	sub.w	r3, r0, r8
 801616c:	fa09 f303 	lsl.w	r3, r9, r3
 8016170:	4313      	orrs	r3, r2
 8016172:	9304      	str	r3, [sp, #16]
 8016174:	46a2      	mov	sl, r4
 8016176:	e7d2      	b.n	801611e <_vfiprintf_r+0xc6>
 8016178:	9b03      	ldr	r3, [sp, #12]
 801617a:	1d19      	adds	r1, r3, #4
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	9103      	str	r1, [sp, #12]
 8016180:	2b00      	cmp	r3, #0
 8016182:	bfbb      	ittet	lt
 8016184:	425b      	neglt	r3, r3
 8016186:	f042 0202 	orrlt.w	r2, r2, #2
 801618a:	9307      	strge	r3, [sp, #28]
 801618c:	9307      	strlt	r3, [sp, #28]
 801618e:	bfb8      	it	lt
 8016190:	9204      	strlt	r2, [sp, #16]
 8016192:	7823      	ldrb	r3, [r4, #0]
 8016194:	2b2e      	cmp	r3, #46	@ 0x2e
 8016196:	d10a      	bne.n	80161ae <_vfiprintf_r+0x156>
 8016198:	7863      	ldrb	r3, [r4, #1]
 801619a:	2b2a      	cmp	r3, #42	@ 0x2a
 801619c:	d132      	bne.n	8016204 <_vfiprintf_r+0x1ac>
 801619e:	9b03      	ldr	r3, [sp, #12]
 80161a0:	1d1a      	adds	r2, r3, #4
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	9203      	str	r2, [sp, #12]
 80161a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80161aa:	3402      	adds	r4, #2
 80161ac:	9305      	str	r3, [sp, #20]
 80161ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016284 <_vfiprintf_r+0x22c>
 80161b2:	7821      	ldrb	r1, [r4, #0]
 80161b4:	2203      	movs	r2, #3
 80161b6:	4650      	mov	r0, sl
 80161b8:	f7ea f822 	bl	8000200 <memchr>
 80161bc:	b138      	cbz	r0, 80161ce <_vfiprintf_r+0x176>
 80161be:	9b04      	ldr	r3, [sp, #16]
 80161c0:	eba0 000a 	sub.w	r0, r0, sl
 80161c4:	2240      	movs	r2, #64	@ 0x40
 80161c6:	4082      	lsls	r2, r0
 80161c8:	4313      	orrs	r3, r2
 80161ca:	3401      	adds	r4, #1
 80161cc:	9304      	str	r3, [sp, #16]
 80161ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161d2:	4829      	ldr	r0, [pc, #164]	@ (8016278 <_vfiprintf_r+0x220>)
 80161d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80161d8:	2206      	movs	r2, #6
 80161da:	f7ea f811 	bl	8000200 <memchr>
 80161de:	2800      	cmp	r0, #0
 80161e0:	d03f      	beq.n	8016262 <_vfiprintf_r+0x20a>
 80161e2:	4b26      	ldr	r3, [pc, #152]	@ (801627c <_vfiprintf_r+0x224>)
 80161e4:	bb1b      	cbnz	r3, 801622e <_vfiprintf_r+0x1d6>
 80161e6:	9b03      	ldr	r3, [sp, #12]
 80161e8:	3307      	adds	r3, #7
 80161ea:	f023 0307 	bic.w	r3, r3, #7
 80161ee:	3308      	adds	r3, #8
 80161f0:	9303      	str	r3, [sp, #12]
 80161f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161f4:	443b      	add	r3, r7
 80161f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80161f8:	e76a      	b.n	80160d0 <_vfiprintf_r+0x78>
 80161fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80161fe:	460c      	mov	r4, r1
 8016200:	2001      	movs	r0, #1
 8016202:	e7a8      	b.n	8016156 <_vfiprintf_r+0xfe>
 8016204:	2300      	movs	r3, #0
 8016206:	3401      	adds	r4, #1
 8016208:	9305      	str	r3, [sp, #20]
 801620a:	4619      	mov	r1, r3
 801620c:	f04f 0c0a 	mov.w	ip, #10
 8016210:	4620      	mov	r0, r4
 8016212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016216:	3a30      	subs	r2, #48	@ 0x30
 8016218:	2a09      	cmp	r2, #9
 801621a:	d903      	bls.n	8016224 <_vfiprintf_r+0x1cc>
 801621c:	2b00      	cmp	r3, #0
 801621e:	d0c6      	beq.n	80161ae <_vfiprintf_r+0x156>
 8016220:	9105      	str	r1, [sp, #20]
 8016222:	e7c4      	b.n	80161ae <_vfiprintf_r+0x156>
 8016224:	fb0c 2101 	mla	r1, ip, r1, r2
 8016228:	4604      	mov	r4, r0
 801622a:	2301      	movs	r3, #1
 801622c:	e7f0      	b.n	8016210 <_vfiprintf_r+0x1b8>
 801622e:	ab03      	add	r3, sp, #12
 8016230:	9300      	str	r3, [sp, #0]
 8016232:	462a      	mov	r2, r5
 8016234:	4b12      	ldr	r3, [pc, #72]	@ (8016280 <_vfiprintf_r+0x228>)
 8016236:	a904      	add	r1, sp, #16
 8016238:	4630      	mov	r0, r6
 801623a:	f3af 8000 	nop.w
 801623e:	4607      	mov	r7, r0
 8016240:	1c78      	adds	r0, r7, #1
 8016242:	d1d6      	bne.n	80161f2 <_vfiprintf_r+0x19a>
 8016244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016246:	07d9      	lsls	r1, r3, #31
 8016248:	d405      	bmi.n	8016256 <_vfiprintf_r+0x1fe>
 801624a:	89ab      	ldrh	r3, [r5, #12]
 801624c:	059a      	lsls	r2, r3, #22
 801624e:	d402      	bmi.n	8016256 <_vfiprintf_r+0x1fe>
 8016250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016252:	f7ff fd25 	bl	8015ca0 <__retarget_lock_release_recursive>
 8016256:	89ab      	ldrh	r3, [r5, #12]
 8016258:	065b      	lsls	r3, r3, #25
 801625a:	f53f af1f 	bmi.w	801609c <_vfiprintf_r+0x44>
 801625e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016260:	e71e      	b.n	80160a0 <_vfiprintf_r+0x48>
 8016262:	ab03      	add	r3, sp, #12
 8016264:	9300      	str	r3, [sp, #0]
 8016266:	462a      	mov	r2, r5
 8016268:	4b05      	ldr	r3, [pc, #20]	@ (8016280 <_vfiprintf_r+0x228>)
 801626a:	a904      	add	r1, sp, #16
 801626c:	4630      	mov	r0, r6
 801626e:	f000 f879 	bl	8016364 <_printf_i>
 8016272:	e7e4      	b.n	801623e <_vfiprintf_r+0x1e6>
 8016274:	08016edb 	.word	0x08016edb
 8016278:	08016ee5 	.word	0x08016ee5
 801627c:	00000000 	.word	0x00000000
 8016280:	08016033 	.word	0x08016033
 8016284:	08016ee1 	.word	0x08016ee1

08016288 <_printf_common>:
 8016288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801628c:	4616      	mov	r6, r2
 801628e:	4698      	mov	r8, r3
 8016290:	688a      	ldr	r2, [r1, #8]
 8016292:	690b      	ldr	r3, [r1, #16]
 8016294:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016298:	4293      	cmp	r3, r2
 801629a:	bfb8      	it	lt
 801629c:	4613      	movlt	r3, r2
 801629e:	6033      	str	r3, [r6, #0]
 80162a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80162a4:	4607      	mov	r7, r0
 80162a6:	460c      	mov	r4, r1
 80162a8:	b10a      	cbz	r2, 80162ae <_printf_common+0x26>
 80162aa:	3301      	adds	r3, #1
 80162ac:	6033      	str	r3, [r6, #0]
 80162ae:	6823      	ldr	r3, [r4, #0]
 80162b0:	0699      	lsls	r1, r3, #26
 80162b2:	bf42      	ittt	mi
 80162b4:	6833      	ldrmi	r3, [r6, #0]
 80162b6:	3302      	addmi	r3, #2
 80162b8:	6033      	strmi	r3, [r6, #0]
 80162ba:	6825      	ldr	r5, [r4, #0]
 80162bc:	f015 0506 	ands.w	r5, r5, #6
 80162c0:	d106      	bne.n	80162d0 <_printf_common+0x48>
 80162c2:	f104 0a19 	add.w	sl, r4, #25
 80162c6:	68e3      	ldr	r3, [r4, #12]
 80162c8:	6832      	ldr	r2, [r6, #0]
 80162ca:	1a9b      	subs	r3, r3, r2
 80162cc:	42ab      	cmp	r3, r5
 80162ce:	dc26      	bgt.n	801631e <_printf_common+0x96>
 80162d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80162d4:	6822      	ldr	r2, [r4, #0]
 80162d6:	3b00      	subs	r3, #0
 80162d8:	bf18      	it	ne
 80162da:	2301      	movne	r3, #1
 80162dc:	0692      	lsls	r2, r2, #26
 80162de:	d42b      	bmi.n	8016338 <_printf_common+0xb0>
 80162e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80162e4:	4641      	mov	r1, r8
 80162e6:	4638      	mov	r0, r7
 80162e8:	47c8      	blx	r9
 80162ea:	3001      	adds	r0, #1
 80162ec:	d01e      	beq.n	801632c <_printf_common+0xa4>
 80162ee:	6823      	ldr	r3, [r4, #0]
 80162f0:	6922      	ldr	r2, [r4, #16]
 80162f2:	f003 0306 	and.w	r3, r3, #6
 80162f6:	2b04      	cmp	r3, #4
 80162f8:	bf02      	ittt	eq
 80162fa:	68e5      	ldreq	r5, [r4, #12]
 80162fc:	6833      	ldreq	r3, [r6, #0]
 80162fe:	1aed      	subeq	r5, r5, r3
 8016300:	68a3      	ldr	r3, [r4, #8]
 8016302:	bf0c      	ite	eq
 8016304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016308:	2500      	movne	r5, #0
 801630a:	4293      	cmp	r3, r2
 801630c:	bfc4      	itt	gt
 801630e:	1a9b      	subgt	r3, r3, r2
 8016310:	18ed      	addgt	r5, r5, r3
 8016312:	2600      	movs	r6, #0
 8016314:	341a      	adds	r4, #26
 8016316:	42b5      	cmp	r5, r6
 8016318:	d11a      	bne.n	8016350 <_printf_common+0xc8>
 801631a:	2000      	movs	r0, #0
 801631c:	e008      	b.n	8016330 <_printf_common+0xa8>
 801631e:	2301      	movs	r3, #1
 8016320:	4652      	mov	r2, sl
 8016322:	4641      	mov	r1, r8
 8016324:	4638      	mov	r0, r7
 8016326:	47c8      	blx	r9
 8016328:	3001      	adds	r0, #1
 801632a:	d103      	bne.n	8016334 <_printf_common+0xac>
 801632c:	f04f 30ff 	mov.w	r0, #4294967295
 8016330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016334:	3501      	adds	r5, #1
 8016336:	e7c6      	b.n	80162c6 <_printf_common+0x3e>
 8016338:	18e1      	adds	r1, r4, r3
 801633a:	1c5a      	adds	r2, r3, #1
 801633c:	2030      	movs	r0, #48	@ 0x30
 801633e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016342:	4422      	add	r2, r4
 8016344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016348:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801634c:	3302      	adds	r3, #2
 801634e:	e7c7      	b.n	80162e0 <_printf_common+0x58>
 8016350:	2301      	movs	r3, #1
 8016352:	4622      	mov	r2, r4
 8016354:	4641      	mov	r1, r8
 8016356:	4638      	mov	r0, r7
 8016358:	47c8      	blx	r9
 801635a:	3001      	adds	r0, #1
 801635c:	d0e6      	beq.n	801632c <_printf_common+0xa4>
 801635e:	3601      	adds	r6, #1
 8016360:	e7d9      	b.n	8016316 <_printf_common+0x8e>
	...

08016364 <_printf_i>:
 8016364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016368:	7e0f      	ldrb	r7, [r1, #24]
 801636a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801636c:	2f78      	cmp	r7, #120	@ 0x78
 801636e:	4691      	mov	r9, r2
 8016370:	4680      	mov	r8, r0
 8016372:	460c      	mov	r4, r1
 8016374:	469a      	mov	sl, r3
 8016376:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801637a:	d807      	bhi.n	801638c <_printf_i+0x28>
 801637c:	2f62      	cmp	r7, #98	@ 0x62
 801637e:	d80a      	bhi.n	8016396 <_printf_i+0x32>
 8016380:	2f00      	cmp	r7, #0
 8016382:	f000 80d2 	beq.w	801652a <_printf_i+0x1c6>
 8016386:	2f58      	cmp	r7, #88	@ 0x58
 8016388:	f000 80b9 	beq.w	80164fe <_printf_i+0x19a>
 801638c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016390:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016394:	e03a      	b.n	801640c <_printf_i+0xa8>
 8016396:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801639a:	2b15      	cmp	r3, #21
 801639c:	d8f6      	bhi.n	801638c <_printf_i+0x28>
 801639e:	a101      	add	r1, pc, #4	@ (adr r1, 80163a4 <_printf_i+0x40>)
 80163a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80163a4:	080163fd 	.word	0x080163fd
 80163a8:	08016411 	.word	0x08016411
 80163ac:	0801638d 	.word	0x0801638d
 80163b0:	0801638d 	.word	0x0801638d
 80163b4:	0801638d 	.word	0x0801638d
 80163b8:	0801638d 	.word	0x0801638d
 80163bc:	08016411 	.word	0x08016411
 80163c0:	0801638d 	.word	0x0801638d
 80163c4:	0801638d 	.word	0x0801638d
 80163c8:	0801638d 	.word	0x0801638d
 80163cc:	0801638d 	.word	0x0801638d
 80163d0:	08016511 	.word	0x08016511
 80163d4:	0801643b 	.word	0x0801643b
 80163d8:	080164cb 	.word	0x080164cb
 80163dc:	0801638d 	.word	0x0801638d
 80163e0:	0801638d 	.word	0x0801638d
 80163e4:	08016533 	.word	0x08016533
 80163e8:	0801638d 	.word	0x0801638d
 80163ec:	0801643b 	.word	0x0801643b
 80163f0:	0801638d 	.word	0x0801638d
 80163f4:	0801638d 	.word	0x0801638d
 80163f8:	080164d3 	.word	0x080164d3
 80163fc:	6833      	ldr	r3, [r6, #0]
 80163fe:	1d1a      	adds	r2, r3, #4
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	6032      	str	r2, [r6, #0]
 8016404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016408:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801640c:	2301      	movs	r3, #1
 801640e:	e09d      	b.n	801654c <_printf_i+0x1e8>
 8016410:	6833      	ldr	r3, [r6, #0]
 8016412:	6820      	ldr	r0, [r4, #0]
 8016414:	1d19      	adds	r1, r3, #4
 8016416:	6031      	str	r1, [r6, #0]
 8016418:	0606      	lsls	r6, r0, #24
 801641a:	d501      	bpl.n	8016420 <_printf_i+0xbc>
 801641c:	681d      	ldr	r5, [r3, #0]
 801641e:	e003      	b.n	8016428 <_printf_i+0xc4>
 8016420:	0645      	lsls	r5, r0, #25
 8016422:	d5fb      	bpl.n	801641c <_printf_i+0xb8>
 8016424:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016428:	2d00      	cmp	r5, #0
 801642a:	da03      	bge.n	8016434 <_printf_i+0xd0>
 801642c:	232d      	movs	r3, #45	@ 0x2d
 801642e:	426d      	negs	r5, r5
 8016430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016434:	4859      	ldr	r0, [pc, #356]	@ (801659c <_printf_i+0x238>)
 8016436:	230a      	movs	r3, #10
 8016438:	e011      	b.n	801645e <_printf_i+0xfa>
 801643a:	6821      	ldr	r1, [r4, #0]
 801643c:	6833      	ldr	r3, [r6, #0]
 801643e:	0608      	lsls	r0, r1, #24
 8016440:	f853 5b04 	ldr.w	r5, [r3], #4
 8016444:	d402      	bmi.n	801644c <_printf_i+0xe8>
 8016446:	0649      	lsls	r1, r1, #25
 8016448:	bf48      	it	mi
 801644a:	b2ad      	uxthmi	r5, r5
 801644c:	2f6f      	cmp	r7, #111	@ 0x6f
 801644e:	4853      	ldr	r0, [pc, #332]	@ (801659c <_printf_i+0x238>)
 8016450:	6033      	str	r3, [r6, #0]
 8016452:	bf14      	ite	ne
 8016454:	230a      	movne	r3, #10
 8016456:	2308      	moveq	r3, #8
 8016458:	2100      	movs	r1, #0
 801645a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801645e:	6866      	ldr	r6, [r4, #4]
 8016460:	60a6      	str	r6, [r4, #8]
 8016462:	2e00      	cmp	r6, #0
 8016464:	bfa2      	ittt	ge
 8016466:	6821      	ldrge	r1, [r4, #0]
 8016468:	f021 0104 	bicge.w	r1, r1, #4
 801646c:	6021      	strge	r1, [r4, #0]
 801646e:	b90d      	cbnz	r5, 8016474 <_printf_i+0x110>
 8016470:	2e00      	cmp	r6, #0
 8016472:	d04b      	beq.n	801650c <_printf_i+0x1a8>
 8016474:	4616      	mov	r6, r2
 8016476:	fbb5 f1f3 	udiv	r1, r5, r3
 801647a:	fb03 5711 	mls	r7, r3, r1, r5
 801647e:	5dc7      	ldrb	r7, [r0, r7]
 8016480:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016484:	462f      	mov	r7, r5
 8016486:	42bb      	cmp	r3, r7
 8016488:	460d      	mov	r5, r1
 801648a:	d9f4      	bls.n	8016476 <_printf_i+0x112>
 801648c:	2b08      	cmp	r3, #8
 801648e:	d10b      	bne.n	80164a8 <_printf_i+0x144>
 8016490:	6823      	ldr	r3, [r4, #0]
 8016492:	07df      	lsls	r7, r3, #31
 8016494:	d508      	bpl.n	80164a8 <_printf_i+0x144>
 8016496:	6923      	ldr	r3, [r4, #16]
 8016498:	6861      	ldr	r1, [r4, #4]
 801649a:	4299      	cmp	r1, r3
 801649c:	bfde      	ittt	le
 801649e:	2330      	movle	r3, #48	@ 0x30
 80164a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80164a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80164a8:	1b92      	subs	r2, r2, r6
 80164aa:	6122      	str	r2, [r4, #16]
 80164ac:	f8cd a000 	str.w	sl, [sp]
 80164b0:	464b      	mov	r3, r9
 80164b2:	aa03      	add	r2, sp, #12
 80164b4:	4621      	mov	r1, r4
 80164b6:	4640      	mov	r0, r8
 80164b8:	f7ff fee6 	bl	8016288 <_printf_common>
 80164bc:	3001      	adds	r0, #1
 80164be:	d14a      	bne.n	8016556 <_printf_i+0x1f2>
 80164c0:	f04f 30ff 	mov.w	r0, #4294967295
 80164c4:	b004      	add	sp, #16
 80164c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164ca:	6823      	ldr	r3, [r4, #0]
 80164cc:	f043 0320 	orr.w	r3, r3, #32
 80164d0:	6023      	str	r3, [r4, #0]
 80164d2:	4833      	ldr	r0, [pc, #204]	@ (80165a0 <_printf_i+0x23c>)
 80164d4:	2778      	movs	r7, #120	@ 0x78
 80164d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80164da:	6823      	ldr	r3, [r4, #0]
 80164dc:	6831      	ldr	r1, [r6, #0]
 80164de:	061f      	lsls	r7, r3, #24
 80164e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80164e4:	d402      	bmi.n	80164ec <_printf_i+0x188>
 80164e6:	065f      	lsls	r7, r3, #25
 80164e8:	bf48      	it	mi
 80164ea:	b2ad      	uxthmi	r5, r5
 80164ec:	6031      	str	r1, [r6, #0]
 80164ee:	07d9      	lsls	r1, r3, #31
 80164f0:	bf44      	itt	mi
 80164f2:	f043 0320 	orrmi.w	r3, r3, #32
 80164f6:	6023      	strmi	r3, [r4, #0]
 80164f8:	b11d      	cbz	r5, 8016502 <_printf_i+0x19e>
 80164fa:	2310      	movs	r3, #16
 80164fc:	e7ac      	b.n	8016458 <_printf_i+0xf4>
 80164fe:	4827      	ldr	r0, [pc, #156]	@ (801659c <_printf_i+0x238>)
 8016500:	e7e9      	b.n	80164d6 <_printf_i+0x172>
 8016502:	6823      	ldr	r3, [r4, #0]
 8016504:	f023 0320 	bic.w	r3, r3, #32
 8016508:	6023      	str	r3, [r4, #0]
 801650a:	e7f6      	b.n	80164fa <_printf_i+0x196>
 801650c:	4616      	mov	r6, r2
 801650e:	e7bd      	b.n	801648c <_printf_i+0x128>
 8016510:	6833      	ldr	r3, [r6, #0]
 8016512:	6825      	ldr	r5, [r4, #0]
 8016514:	6961      	ldr	r1, [r4, #20]
 8016516:	1d18      	adds	r0, r3, #4
 8016518:	6030      	str	r0, [r6, #0]
 801651a:	062e      	lsls	r6, r5, #24
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	d501      	bpl.n	8016524 <_printf_i+0x1c0>
 8016520:	6019      	str	r1, [r3, #0]
 8016522:	e002      	b.n	801652a <_printf_i+0x1c6>
 8016524:	0668      	lsls	r0, r5, #25
 8016526:	d5fb      	bpl.n	8016520 <_printf_i+0x1bc>
 8016528:	8019      	strh	r1, [r3, #0]
 801652a:	2300      	movs	r3, #0
 801652c:	6123      	str	r3, [r4, #16]
 801652e:	4616      	mov	r6, r2
 8016530:	e7bc      	b.n	80164ac <_printf_i+0x148>
 8016532:	6833      	ldr	r3, [r6, #0]
 8016534:	1d1a      	adds	r2, r3, #4
 8016536:	6032      	str	r2, [r6, #0]
 8016538:	681e      	ldr	r6, [r3, #0]
 801653a:	6862      	ldr	r2, [r4, #4]
 801653c:	2100      	movs	r1, #0
 801653e:	4630      	mov	r0, r6
 8016540:	f7e9 fe5e 	bl	8000200 <memchr>
 8016544:	b108      	cbz	r0, 801654a <_printf_i+0x1e6>
 8016546:	1b80      	subs	r0, r0, r6
 8016548:	6060      	str	r0, [r4, #4]
 801654a:	6863      	ldr	r3, [r4, #4]
 801654c:	6123      	str	r3, [r4, #16]
 801654e:	2300      	movs	r3, #0
 8016550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016554:	e7aa      	b.n	80164ac <_printf_i+0x148>
 8016556:	6923      	ldr	r3, [r4, #16]
 8016558:	4632      	mov	r2, r6
 801655a:	4649      	mov	r1, r9
 801655c:	4640      	mov	r0, r8
 801655e:	47d0      	blx	sl
 8016560:	3001      	adds	r0, #1
 8016562:	d0ad      	beq.n	80164c0 <_printf_i+0x15c>
 8016564:	6823      	ldr	r3, [r4, #0]
 8016566:	079b      	lsls	r3, r3, #30
 8016568:	d413      	bmi.n	8016592 <_printf_i+0x22e>
 801656a:	68e0      	ldr	r0, [r4, #12]
 801656c:	9b03      	ldr	r3, [sp, #12]
 801656e:	4298      	cmp	r0, r3
 8016570:	bfb8      	it	lt
 8016572:	4618      	movlt	r0, r3
 8016574:	e7a6      	b.n	80164c4 <_printf_i+0x160>
 8016576:	2301      	movs	r3, #1
 8016578:	4632      	mov	r2, r6
 801657a:	4649      	mov	r1, r9
 801657c:	4640      	mov	r0, r8
 801657e:	47d0      	blx	sl
 8016580:	3001      	adds	r0, #1
 8016582:	d09d      	beq.n	80164c0 <_printf_i+0x15c>
 8016584:	3501      	adds	r5, #1
 8016586:	68e3      	ldr	r3, [r4, #12]
 8016588:	9903      	ldr	r1, [sp, #12]
 801658a:	1a5b      	subs	r3, r3, r1
 801658c:	42ab      	cmp	r3, r5
 801658e:	dcf2      	bgt.n	8016576 <_printf_i+0x212>
 8016590:	e7eb      	b.n	801656a <_printf_i+0x206>
 8016592:	2500      	movs	r5, #0
 8016594:	f104 0619 	add.w	r6, r4, #25
 8016598:	e7f5      	b.n	8016586 <_printf_i+0x222>
 801659a:	bf00      	nop
 801659c:	08016eec 	.word	0x08016eec
 80165a0:	08016efd 	.word	0x08016efd

080165a4 <__sflush_r>:
 80165a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80165a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165ac:	0716      	lsls	r6, r2, #28
 80165ae:	4605      	mov	r5, r0
 80165b0:	460c      	mov	r4, r1
 80165b2:	d454      	bmi.n	801665e <__sflush_r+0xba>
 80165b4:	684b      	ldr	r3, [r1, #4]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	dc02      	bgt.n	80165c0 <__sflush_r+0x1c>
 80165ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80165bc:	2b00      	cmp	r3, #0
 80165be:	dd48      	ble.n	8016652 <__sflush_r+0xae>
 80165c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80165c2:	2e00      	cmp	r6, #0
 80165c4:	d045      	beq.n	8016652 <__sflush_r+0xae>
 80165c6:	2300      	movs	r3, #0
 80165c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80165cc:	682f      	ldr	r7, [r5, #0]
 80165ce:	6a21      	ldr	r1, [r4, #32]
 80165d0:	602b      	str	r3, [r5, #0]
 80165d2:	d030      	beq.n	8016636 <__sflush_r+0x92>
 80165d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80165d6:	89a3      	ldrh	r3, [r4, #12]
 80165d8:	0759      	lsls	r1, r3, #29
 80165da:	d505      	bpl.n	80165e8 <__sflush_r+0x44>
 80165dc:	6863      	ldr	r3, [r4, #4]
 80165de:	1ad2      	subs	r2, r2, r3
 80165e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80165e2:	b10b      	cbz	r3, 80165e8 <__sflush_r+0x44>
 80165e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80165e6:	1ad2      	subs	r2, r2, r3
 80165e8:	2300      	movs	r3, #0
 80165ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80165ec:	6a21      	ldr	r1, [r4, #32]
 80165ee:	4628      	mov	r0, r5
 80165f0:	47b0      	blx	r6
 80165f2:	1c43      	adds	r3, r0, #1
 80165f4:	89a3      	ldrh	r3, [r4, #12]
 80165f6:	d106      	bne.n	8016606 <__sflush_r+0x62>
 80165f8:	6829      	ldr	r1, [r5, #0]
 80165fa:	291d      	cmp	r1, #29
 80165fc:	d82b      	bhi.n	8016656 <__sflush_r+0xb2>
 80165fe:	4a2a      	ldr	r2, [pc, #168]	@ (80166a8 <__sflush_r+0x104>)
 8016600:	410a      	asrs	r2, r1
 8016602:	07d6      	lsls	r6, r2, #31
 8016604:	d427      	bmi.n	8016656 <__sflush_r+0xb2>
 8016606:	2200      	movs	r2, #0
 8016608:	6062      	str	r2, [r4, #4]
 801660a:	04d9      	lsls	r1, r3, #19
 801660c:	6922      	ldr	r2, [r4, #16]
 801660e:	6022      	str	r2, [r4, #0]
 8016610:	d504      	bpl.n	801661c <__sflush_r+0x78>
 8016612:	1c42      	adds	r2, r0, #1
 8016614:	d101      	bne.n	801661a <__sflush_r+0x76>
 8016616:	682b      	ldr	r3, [r5, #0]
 8016618:	b903      	cbnz	r3, 801661c <__sflush_r+0x78>
 801661a:	6560      	str	r0, [r4, #84]	@ 0x54
 801661c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801661e:	602f      	str	r7, [r5, #0]
 8016620:	b1b9      	cbz	r1, 8016652 <__sflush_r+0xae>
 8016622:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016626:	4299      	cmp	r1, r3
 8016628:	d002      	beq.n	8016630 <__sflush_r+0x8c>
 801662a:	4628      	mov	r0, r5
 801662c:	f7ff fb48 	bl	8015cc0 <_free_r>
 8016630:	2300      	movs	r3, #0
 8016632:	6363      	str	r3, [r4, #52]	@ 0x34
 8016634:	e00d      	b.n	8016652 <__sflush_r+0xae>
 8016636:	2301      	movs	r3, #1
 8016638:	4628      	mov	r0, r5
 801663a:	47b0      	blx	r6
 801663c:	4602      	mov	r2, r0
 801663e:	1c50      	adds	r0, r2, #1
 8016640:	d1c9      	bne.n	80165d6 <__sflush_r+0x32>
 8016642:	682b      	ldr	r3, [r5, #0]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d0c6      	beq.n	80165d6 <__sflush_r+0x32>
 8016648:	2b1d      	cmp	r3, #29
 801664a:	d001      	beq.n	8016650 <__sflush_r+0xac>
 801664c:	2b16      	cmp	r3, #22
 801664e:	d11e      	bne.n	801668e <__sflush_r+0xea>
 8016650:	602f      	str	r7, [r5, #0]
 8016652:	2000      	movs	r0, #0
 8016654:	e022      	b.n	801669c <__sflush_r+0xf8>
 8016656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801665a:	b21b      	sxth	r3, r3
 801665c:	e01b      	b.n	8016696 <__sflush_r+0xf2>
 801665e:	690f      	ldr	r7, [r1, #16]
 8016660:	2f00      	cmp	r7, #0
 8016662:	d0f6      	beq.n	8016652 <__sflush_r+0xae>
 8016664:	0793      	lsls	r3, r2, #30
 8016666:	680e      	ldr	r6, [r1, #0]
 8016668:	bf08      	it	eq
 801666a:	694b      	ldreq	r3, [r1, #20]
 801666c:	600f      	str	r7, [r1, #0]
 801666e:	bf18      	it	ne
 8016670:	2300      	movne	r3, #0
 8016672:	eba6 0807 	sub.w	r8, r6, r7
 8016676:	608b      	str	r3, [r1, #8]
 8016678:	f1b8 0f00 	cmp.w	r8, #0
 801667c:	dde9      	ble.n	8016652 <__sflush_r+0xae>
 801667e:	6a21      	ldr	r1, [r4, #32]
 8016680:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016682:	4643      	mov	r3, r8
 8016684:	463a      	mov	r2, r7
 8016686:	4628      	mov	r0, r5
 8016688:	47b0      	blx	r6
 801668a:	2800      	cmp	r0, #0
 801668c:	dc08      	bgt.n	80166a0 <__sflush_r+0xfc>
 801668e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016696:	81a3      	strh	r3, [r4, #12]
 8016698:	f04f 30ff 	mov.w	r0, #4294967295
 801669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166a0:	4407      	add	r7, r0
 80166a2:	eba8 0800 	sub.w	r8, r8, r0
 80166a6:	e7e7      	b.n	8016678 <__sflush_r+0xd4>
 80166a8:	dfbffffe 	.word	0xdfbffffe

080166ac <_fflush_r>:
 80166ac:	b538      	push	{r3, r4, r5, lr}
 80166ae:	690b      	ldr	r3, [r1, #16]
 80166b0:	4605      	mov	r5, r0
 80166b2:	460c      	mov	r4, r1
 80166b4:	b913      	cbnz	r3, 80166bc <_fflush_r+0x10>
 80166b6:	2500      	movs	r5, #0
 80166b8:	4628      	mov	r0, r5
 80166ba:	bd38      	pop	{r3, r4, r5, pc}
 80166bc:	b118      	cbz	r0, 80166c6 <_fflush_r+0x1a>
 80166be:	6a03      	ldr	r3, [r0, #32]
 80166c0:	b90b      	cbnz	r3, 80166c6 <_fflush_r+0x1a>
 80166c2:	f7ff f92f 	bl	8015924 <__sinit>
 80166c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d0f3      	beq.n	80166b6 <_fflush_r+0xa>
 80166ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80166d0:	07d0      	lsls	r0, r2, #31
 80166d2:	d404      	bmi.n	80166de <_fflush_r+0x32>
 80166d4:	0599      	lsls	r1, r3, #22
 80166d6:	d402      	bmi.n	80166de <_fflush_r+0x32>
 80166d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80166da:	f7ff fae0 	bl	8015c9e <__retarget_lock_acquire_recursive>
 80166de:	4628      	mov	r0, r5
 80166e0:	4621      	mov	r1, r4
 80166e2:	f7ff ff5f 	bl	80165a4 <__sflush_r>
 80166e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80166e8:	07da      	lsls	r2, r3, #31
 80166ea:	4605      	mov	r5, r0
 80166ec:	d4e4      	bmi.n	80166b8 <_fflush_r+0xc>
 80166ee:	89a3      	ldrh	r3, [r4, #12]
 80166f0:	059b      	lsls	r3, r3, #22
 80166f2:	d4e1      	bmi.n	80166b8 <_fflush_r+0xc>
 80166f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80166f6:	f7ff fad3 	bl	8015ca0 <__retarget_lock_release_recursive>
 80166fa:	e7dd      	b.n	80166b8 <_fflush_r+0xc>

080166fc <__swbuf_r>:
 80166fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166fe:	460e      	mov	r6, r1
 8016700:	4614      	mov	r4, r2
 8016702:	4605      	mov	r5, r0
 8016704:	b118      	cbz	r0, 801670e <__swbuf_r+0x12>
 8016706:	6a03      	ldr	r3, [r0, #32]
 8016708:	b90b      	cbnz	r3, 801670e <__swbuf_r+0x12>
 801670a:	f7ff f90b 	bl	8015924 <__sinit>
 801670e:	69a3      	ldr	r3, [r4, #24]
 8016710:	60a3      	str	r3, [r4, #8]
 8016712:	89a3      	ldrh	r3, [r4, #12]
 8016714:	071a      	lsls	r2, r3, #28
 8016716:	d501      	bpl.n	801671c <__swbuf_r+0x20>
 8016718:	6923      	ldr	r3, [r4, #16]
 801671a:	b943      	cbnz	r3, 801672e <__swbuf_r+0x32>
 801671c:	4621      	mov	r1, r4
 801671e:	4628      	mov	r0, r5
 8016720:	f000 f82a 	bl	8016778 <__swsetup_r>
 8016724:	b118      	cbz	r0, 801672e <__swbuf_r+0x32>
 8016726:	f04f 37ff 	mov.w	r7, #4294967295
 801672a:	4638      	mov	r0, r7
 801672c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801672e:	6823      	ldr	r3, [r4, #0]
 8016730:	6922      	ldr	r2, [r4, #16]
 8016732:	1a98      	subs	r0, r3, r2
 8016734:	6963      	ldr	r3, [r4, #20]
 8016736:	b2f6      	uxtb	r6, r6
 8016738:	4283      	cmp	r3, r0
 801673a:	4637      	mov	r7, r6
 801673c:	dc05      	bgt.n	801674a <__swbuf_r+0x4e>
 801673e:	4621      	mov	r1, r4
 8016740:	4628      	mov	r0, r5
 8016742:	f7ff ffb3 	bl	80166ac <_fflush_r>
 8016746:	2800      	cmp	r0, #0
 8016748:	d1ed      	bne.n	8016726 <__swbuf_r+0x2a>
 801674a:	68a3      	ldr	r3, [r4, #8]
 801674c:	3b01      	subs	r3, #1
 801674e:	60a3      	str	r3, [r4, #8]
 8016750:	6823      	ldr	r3, [r4, #0]
 8016752:	1c5a      	adds	r2, r3, #1
 8016754:	6022      	str	r2, [r4, #0]
 8016756:	701e      	strb	r6, [r3, #0]
 8016758:	6962      	ldr	r2, [r4, #20]
 801675a:	1c43      	adds	r3, r0, #1
 801675c:	429a      	cmp	r2, r3
 801675e:	d004      	beq.n	801676a <__swbuf_r+0x6e>
 8016760:	89a3      	ldrh	r3, [r4, #12]
 8016762:	07db      	lsls	r3, r3, #31
 8016764:	d5e1      	bpl.n	801672a <__swbuf_r+0x2e>
 8016766:	2e0a      	cmp	r6, #10
 8016768:	d1df      	bne.n	801672a <__swbuf_r+0x2e>
 801676a:	4621      	mov	r1, r4
 801676c:	4628      	mov	r0, r5
 801676e:	f7ff ff9d 	bl	80166ac <_fflush_r>
 8016772:	2800      	cmp	r0, #0
 8016774:	d0d9      	beq.n	801672a <__swbuf_r+0x2e>
 8016776:	e7d6      	b.n	8016726 <__swbuf_r+0x2a>

08016778 <__swsetup_r>:
 8016778:	b538      	push	{r3, r4, r5, lr}
 801677a:	4b29      	ldr	r3, [pc, #164]	@ (8016820 <__swsetup_r+0xa8>)
 801677c:	4605      	mov	r5, r0
 801677e:	6818      	ldr	r0, [r3, #0]
 8016780:	460c      	mov	r4, r1
 8016782:	b118      	cbz	r0, 801678c <__swsetup_r+0x14>
 8016784:	6a03      	ldr	r3, [r0, #32]
 8016786:	b90b      	cbnz	r3, 801678c <__swsetup_r+0x14>
 8016788:	f7ff f8cc 	bl	8015924 <__sinit>
 801678c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016790:	0719      	lsls	r1, r3, #28
 8016792:	d422      	bmi.n	80167da <__swsetup_r+0x62>
 8016794:	06da      	lsls	r2, r3, #27
 8016796:	d407      	bmi.n	80167a8 <__swsetup_r+0x30>
 8016798:	2209      	movs	r2, #9
 801679a:	602a      	str	r2, [r5, #0]
 801679c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167a0:	81a3      	strh	r3, [r4, #12]
 80167a2:	f04f 30ff 	mov.w	r0, #4294967295
 80167a6:	e033      	b.n	8016810 <__swsetup_r+0x98>
 80167a8:	0758      	lsls	r0, r3, #29
 80167aa:	d512      	bpl.n	80167d2 <__swsetup_r+0x5a>
 80167ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80167ae:	b141      	cbz	r1, 80167c2 <__swsetup_r+0x4a>
 80167b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80167b4:	4299      	cmp	r1, r3
 80167b6:	d002      	beq.n	80167be <__swsetup_r+0x46>
 80167b8:	4628      	mov	r0, r5
 80167ba:	f7ff fa81 	bl	8015cc0 <_free_r>
 80167be:	2300      	movs	r3, #0
 80167c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80167c2:	89a3      	ldrh	r3, [r4, #12]
 80167c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80167c8:	81a3      	strh	r3, [r4, #12]
 80167ca:	2300      	movs	r3, #0
 80167cc:	6063      	str	r3, [r4, #4]
 80167ce:	6923      	ldr	r3, [r4, #16]
 80167d0:	6023      	str	r3, [r4, #0]
 80167d2:	89a3      	ldrh	r3, [r4, #12]
 80167d4:	f043 0308 	orr.w	r3, r3, #8
 80167d8:	81a3      	strh	r3, [r4, #12]
 80167da:	6923      	ldr	r3, [r4, #16]
 80167dc:	b94b      	cbnz	r3, 80167f2 <__swsetup_r+0x7a>
 80167de:	89a3      	ldrh	r3, [r4, #12]
 80167e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80167e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80167e8:	d003      	beq.n	80167f2 <__swsetup_r+0x7a>
 80167ea:	4621      	mov	r1, r4
 80167ec:	4628      	mov	r0, r5
 80167ee:	f000 f86d 	bl	80168cc <__smakebuf_r>
 80167f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167f6:	f013 0201 	ands.w	r2, r3, #1
 80167fa:	d00a      	beq.n	8016812 <__swsetup_r+0x9a>
 80167fc:	2200      	movs	r2, #0
 80167fe:	60a2      	str	r2, [r4, #8]
 8016800:	6962      	ldr	r2, [r4, #20]
 8016802:	4252      	negs	r2, r2
 8016804:	61a2      	str	r2, [r4, #24]
 8016806:	6922      	ldr	r2, [r4, #16]
 8016808:	b942      	cbnz	r2, 801681c <__swsetup_r+0xa4>
 801680a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801680e:	d1c5      	bne.n	801679c <__swsetup_r+0x24>
 8016810:	bd38      	pop	{r3, r4, r5, pc}
 8016812:	0799      	lsls	r1, r3, #30
 8016814:	bf58      	it	pl
 8016816:	6962      	ldrpl	r2, [r4, #20]
 8016818:	60a2      	str	r2, [r4, #8]
 801681a:	e7f4      	b.n	8016806 <__swsetup_r+0x8e>
 801681c:	2000      	movs	r0, #0
 801681e:	e7f7      	b.n	8016810 <__swsetup_r+0x98>
 8016820:	20000038 	.word	0x20000038

08016824 <_realloc_r>:
 8016824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016828:	4680      	mov	r8, r0
 801682a:	4615      	mov	r5, r2
 801682c:	460c      	mov	r4, r1
 801682e:	b921      	cbnz	r1, 801683a <_realloc_r+0x16>
 8016830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016834:	4611      	mov	r1, r2
 8016836:	f7fe bf5d 	b.w	80156f4 <_malloc_r>
 801683a:	b92a      	cbnz	r2, 8016848 <_realloc_r+0x24>
 801683c:	f7ff fa40 	bl	8015cc0 <_free_r>
 8016840:	2400      	movs	r4, #0
 8016842:	4620      	mov	r0, r4
 8016844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016848:	f000 f89e 	bl	8016988 <_malloc_usable_size_r>
 801684c:	4285      	cmp	r5, r0
 801684e:	4606      	mov	r6, r0
 8016850:	d802      	bhi.n	8016858 <_realloc_r+0x34>
 8016852:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016856:	d8f4      	bhi.n	8016842 <_realloc_r+0x1e>
 8016858:	4629      	mov	r1, r5
 801685a:	4640      	mov	r0, r8
 801685c:	f7fe ff4a 	bl	80156f4 <_malloc_r>
 8016860:	4607      	mov	r7, r0
 8016862:	2800      	cmp	r0, #0
 8016864:	d0ec      	beq.n	8016840 <_realloc_r+0x1c>
 8016866:	42b5      	cmp	r5, r6
 8016868:	462a      	mov	r2, r5
 801686a:	4621      	mov	r1, r4
 801686c:	bf28      	it	cs
 801686e:	4632      	movcs	r2, r6
 8016870:	f7ff fa17 	bl	8015ca2 <memcpy>
 8016874:	4621      	mov	r1, r4
 8016876:	4640      	mov	r0, r8
 8016878:	f7ff fa22 	bl	8015cc0 <_free_r>
 801687c:	463c      	mov	r4, r7
 801687e:	e7e0      	b.n	8016842 <_realloc_r+0x1e>

08016880 <__swhatbuf_r>:
 8016880:	b570      	push	{r4, r5, r6, lr}
 8016882:	460c      	mov	r4, r1
 8016884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016888:	2900      	cmp	r1, #0
 801688a:	b096      	sub	sp, #88	@ 0x58
 801688c:	4615      	mov	r5, r2
 801688e:	461e      	mov	r6, r3
 8016890:	da0d      	bge.n	80168ae <__swhatbuf_r+0x2e>
 8016892:	89a3      	ldrh	r3, [r4, #12]
 8016894:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016898:	f04f 0100 	mov.w	r1, #0
 801689c:	bf14      	ite	ne
 801689e:	2340      	movne	r3, #64	@ 0x40
 80168a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80168a4:	2000      	movs	r0, #0
 80168a6:	6031      	str	r1, [r6, #0]
 80168a8:	602b      	str	r3, [r5, #0]
 80168aa:	b016      	add	sp, #88	@ 0x58
 80168ac:	bd70      	pop	{r4, r5, r6, pc}
 80168ae:	466a      	mov	r2, sp
 80168b0:	f000 f848 	bl	8016944 <_fstat_r>
 80168b4:	2800      	cmp	r0, #0
 80168b6:	dbec      	blt.n	8016892 <__swhatbuf_r+0x12>
 80168b8:	9901      	ldr	r1, [sp, #4]
 80168ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80168be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80168c2:	4259      	negs	r1, r3
 80168c4:	4159      	adcs	r1, r3
 80168c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80168ca:	e7eb      	b.n	80168a4 <__swhatbuf_r+0x24>

080168cc <__smakebuf_r>:
 80168cc:	898b      	ldrh	r3, [r1, #12]
 80168ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80168d0:	079d      	lsls	r5, r3, #30
 80168d2:	4606      	mov	r6, r0
 80168d4:	460c      	mov	r4, r1
 80168d6:	d507      	bpl.n	80168e8 <__smakebuf_r+0x1c>
 80168d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80168dc:	6023      	str	r3, [r4, #0]
 80168de:	6123      	str	r3, [r4, #16]
 80168e0:	2301      	movs	r3, #1
 80168e2:	6163      	str	r3, [r4, #20]
 80168e4:	b003      	add	sp, #12
 80168e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168e8:	ab01      	add	r3, sp, #4
 80168ea:	466a      	mov	r2, sp
 80168ec:	f7ff ffc8 	bl	8016880 <__swhatbuf_r>
 80168f0:	9f00      	ldr	r7, [sp, #0]
 80168f2:	4605      	mov	r5, r0
 80168f4:	4639      	mov	r1, r7
 80168f6:	4630      	mov	r0, r6
 80168f8:	f7fe fefc 	bl	80156f4 <_malloc_r>
 80168fc:	b948      	cbnz	r0, 8016912 <__smakebuf_r+0x46>
 80168fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016902:	059a      	lsls	r2, r3, #22
 8016904:	d4ee      	bmi.n	80168e4 <__smakebuf_r+0x18>
 8016906:	f023 0303 	bic.w	r3, r3, #3
 801690a:	f043 0302 	orr.w	r3, r3, #2
 801690e:	81a3      	strh	r3, [r4, #12]
 8016910:	e7e2      	b.n	80168d8 <__smakebuf_r+0xc>
 8016912:	89a3      	ldrh	r3, [r4, #12]
 8016914:	6020      	str	r0, [r4, #0]
 8016916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801691a:	81a3      	strh	r3, [r4, #12]
 801691c:	9b01      	ldr	r3, [sp, #4]
 801691e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016922:	b15b      	cbz	r3, 801693c <__smakebuf_r+0x70>
 8016924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016928:	4630      	mov	r0, r6
 801692a:	f000 f81d 	bl	8016968 <_isatty_r>
 801692e:	b128      	cbz	r0, 801693c <__smakebuf_r+0x70>
 8016930:	89a3      	ldrh	r3, [r4, #12]
 8016932:	f023 0303 	bic.w	r3, r3, #3
 8016936:	f043 0301 	orr.w	r3, r3, #1
 801693a:	81a3      	strh	r3, [r4, #12]
 801693c:	89a3      	ldrh	r3, [r4, #12]
 801693e:	431d      	orrs	r5, r3
 8016940:	81a5      	strh	r5, [r4, #12]
 8016942:	e7cf      	b.n	80168e4 <__smakebuf_r+0x18>

08016944 <_fstat_r>:
 8016944:	b538      	push	{r3, r4, r5, lr}
 8016946:	4d07      	ldr	r5, [pc, #28]	@ (8016964 <_fstat_r+0x20>)
 8016948:	2300      	movs	r3, #0
 801694a:	4604      	mov	r4, r0
 801694c:	4608      	mov	r0, r1
 801694e:	4611      	mov	r1, r2
 8016950:	602b      	str	r3, [r5, #0]
 8016952:	f7ed f927 	bl	8003ba4 <_fstat>
 8016956:	1c43      	adds	r3, r0, #1
 8016958:	d102      	bne.n	8016960 <_fstat_r+0x1c>
 801695a:	682b      	ldr	r3, [r5, #0]
 801695c:	b103      	cbz	r3, 8016960 <_fstat_r+0x1c>
 801695e:	6023      	str	r3, [r4, #0]
 8016960:	bd38      	pop	{r3, r4, r5, pc}
 8016962:	bf00      	nop
 8016964:	200012e0 	.word	0x200012e0

08016968 <_isatty_r>:
 8016968:	b538      	push	{r3, r4, r5, lr}
 801696a:	4d06      	ldr	r5, [pc, #24]	@ (8016984 <_isatty_r+0x1c>)
 801696c:	2300      	movs	r3, #0
 801696e:	4604      	mov	r4, r0
 8016970:	4608      	mov	r0, r1
 8016972:	602b      	str	r3, [r5, #0]
 8016974:	f7ed f926 	bl	8003bc4 <_isatty>
 8016978:	1c43      	adds	r3, r0, #1
 801697a:	d102      	bne.n	8016982 <_isatty_r+0x1a>
 801697c:	682b      	ldr	r3, [r5, #0]
 801697e:	b103      	cbz	r3, 8016982 <_isatty_r+0x1a>
 8016980:	6023      	str	r3, [r4, #0]
 8016982:	bd38      	pop	{r3, r4, r5, pc}
 8016984:	200012e0 	.word	0x200012e0

08016988 <_malloc_usable_size_r>:
 8016988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801698c:	1f18      	subs	r0, r3, #4
 801698e:	2b00      	cmp	r3, #0
 8016990:	bfbc      	itt	lt
 8016992:	580b      	ldrlt	r3, [r1, r0]
 8016994:	18c0      	addlt	r0, r0, r3
 8016996:	4770      	bx	lr

08016998 <_init>:
 8016998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801699a:	bf00      	nop
 801699c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801699e:	bc08      	pop	{r3}
 80169a0:	469e      	mov	lr, r3
 80169a2:	4770      	bx	lr

080169a4 <_fini>:
 80169a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169a6:	bf00      	nop
 80169a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169aa:	bc08      	pop	{r3}
 80169ac:	469e      	mov	lr, r3
 80169ae:	4770      	bx	lr
