
Nucleo144_Application_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003afc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003d94  08003d94  00004d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc8  08003dc8  0000502c  2**0
                  CONTENTS
  4 .ARM          00000008  08003dc8  08003dc8  00004dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dd0  08003dd0  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd0  08003dd0  00004dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dd4  08003dd4  00004dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  08003dd8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2400002c  08003e04  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000f8  08003e04  000050f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fed9  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe9  00000000  00000000  00014f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00016f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bf  00000000  00000000  00017a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003984e  00000000  00000000  0001834f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fff6  00000000  00000000  00051b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017be1e  00000000  00000000  00061b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dd9b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e88  00000000  00000000  001dd9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  001e087c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003d7c 	.word	0x08003d7c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08003d7c 	.word	0x08003d7c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b49      	ldr	r3, [pc, #292]	@ (80006f4 <SystemInit+0x12c>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a48      	ldr	r2, [pc, #288]	@ (80006f4 <SystemInit+0x12c>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b45      	ldr	r3, [pc, #276]	@ (80006f4 <SystemInit+0x12c>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a44      	ldr	r2, [pc, #272]	@ (80006f4 <SystemInit+0x12c>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b43      	ldr	r3, [pc, #268]	@ (80006f8 <SystemInit+0x130>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <SystemInit+0x130>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a3e      	ldr	r2, [pc, #248]	@ (80006f8 <SystemInit+0x130>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b3d      	ldr	r3, [pc, #244]	@ (80006fc <SystemInit+0x134>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a3c      	ldr	r2, [pc, #240]	@ (80006fc <SystemInit+0x134>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b3a      	ldr	r3, [pc, #232]	@ (80006fc <SystemInit+0x134>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b39      	ldr	r3, [pc, #228]	@ (80006fc <SystemInit+0x134>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4938      	ldr	r1, [pc, #224]	@ (80006fc <SystemInit+0x134>)
 800061c:	4b38      	ldr	r3, [pc, #224]	@ (8000700 <SystemInit+0x138>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <SystemInit+0x130>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <SystemInit+0x130>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a30      	ldr	r2, [pc, #192]	@ (80006f8 <SystemInit+0x130>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b2f      	ldr	r3, [pc, #188]	@ (80006fc <SystemInit+0x134>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <SystemInit+0x134>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <SystemInit+0x134>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <SystemInit+0x134>)
 8000652:	4a2c      	ldr	r2, [pc, #176]	@ (8000704 <SystemInit+0x13c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemInit+0x134>)
 8000658:	4a2b      	ldr	r2, [pc, #172]	@ (8000708 <SystemInit+0x140>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <SystemInit+0x134>)
 800065e:	4a2b      	ldr	r2, [pc, #172]	@ (800070c <SystemInit+0x144>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemInit+0x134>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <SystemInit+0x134>)
 800066a:	4a28      	ldr	r2, [pc, #160]	@ (800070c <SystemInit+0x144>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <SystemInit+0x134>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <SystemInit+0x134>)
 8000676:	4a25      	ldr	r2, [pc, #148]	@ (800070c <SystemInit+0x144>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <SystemInit+0x134>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1d      	ldr	r2, [pc, #116]	@ (80006fc <SystemInit+0x134>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <SystemInit+0x134>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemInit+0x148>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a1e      	ldr	r2, [pc, #120]	@ (8000710 <SystemInit+0x148>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <SystemInit+0x14c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <SystemInit+0x150>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <SystemInit+0x154>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <SystemInit+0x134>)
 80006b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d113      	bne.n	80006e8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <SystemInit+0x134>)
 80006c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006c6:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <SystemInit+0x134>)
 80006c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <SystemInit+0x158>)
 80006d2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006d6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <SystemInit+0x134>)
 80006da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006de:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <SystemInit+0x134>)
 80006e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	52002000 	.word	0x52002000
 80006fc:	58024400 	.word	0x58024400
 8000700:	eaf6ed7f 	.word	0xeaf6ed7f
 8000704:	02020200 	.word	0x02020200
 8000708:	01ff0000 	.word	0x01ff0000
 800070c:	01010280 	.word	0x01010280
 8000710:	580000c0 	.word	0x580000c0
 8000714:	5c001000 	.word	0x5c001000
 8000718:	ffff0000 	.word	0xffff0000
 800071c:	51008108 	.word	0x51008108
 8000720:	52004000 	.word	0x52004000

08000724 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <ExitRun0Mode+0x2c>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <ExitRun0Mode+0x2c>)
 800072e:	f023 0302 	bic.w	r3, r3, #2
 8000732:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000734:	bf00      	nop
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <ExitRun0Mode+0x2c>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f9      	beq.n	8000736 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	58024800 	.word	0x58024800

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800075a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000760:	bf00      	nop
 8000762:	4b35      	ldr	r3, [pc, #212]	@ (8000838 <main+0xe4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d004      	beq.n	8000778 <main+0x24>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	dcf4      	bgt.n	8000762 <main+0xe>
  if ( timeout < 0 )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	da01      	bge.n	8000782 <main+0x2e>
  {
  Error_Handler();
 800077e:	f000 f97d 	bl	8000a7c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000782:	f000 fbc5 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000786:	f000 f85b 	bl	8000840 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800078a:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <main+0xe4>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000790:	4a29      	ldr	r2, [pc, #164]	@ (8000838 <main+0xe4>)
 8000792:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000796:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800079a:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <main+0xe4>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 ffad 	bl	8001708 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007ae:	2100      	movs	r1, #0
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 ffc3 	bl	800173c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007ba:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <main+0xe4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d104      	bne.n	80007d4 <main+0x80>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0x6a>
if ( timeout < 0 )
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x8a>
{
Error_Handler();
 80007da:	f000 f94f 	bl	8000a7c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f000 f8c7 	bl	8000970 <MX_GPIO_Init>
  MX_DMA_Init();
 80007e2:	f000 f8ab 	bl	800093c <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f9ca 	bl	8000b80 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f000 f9c7 	bl	8000b80 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007f2:	2002      	movs	r0, #2
 80007f4:	f000 f9c4 	bl	8000b80 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80007f8:	2101      	movs	r1, #1
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fa36 	bl	8000c6c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <main+0xe8>)
 8000802:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000806:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <main+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <main+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <main+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <main+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000820:	4906      	ldr	r1, [pc, #24]	@ (800083c <main+0xe8>)
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fab2 	bl	8000d8c <BSP_COM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <main+0xe0>
  {
    Error_Handler();
 800082e:	f000 f925 	bl	8000a7c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <main+0xe0>
 8000838:	58024400 	.word	0x58024400
 800083c:	24000048 	.word	0x24000048

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09c      	sub	sp, #112	@ 0x70
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084a:	224c      	movs	r2, #76	@ 0x4c
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f003 fa68 	bl	8003d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2220      	movs	r2, #32
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fa62 	bl	8003d24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000860:	2004      	movs	r0, #4
 8000862:	f000 ff7f 	bl	8001764 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b32      	ldr	r3, [pc, #200]	@ (8000934 <SystemClock_Config+0xf4>)
 800086c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800086e:	4a31      	ldr	r2, [pc, #196]	@ (8000934 <SystemClock_Config+0xf4>)
 8000870:	f023 0301 	bic.w	r3, r3, #1
 8000874:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000876:	4b2f      	ldr	r3, [pc, #188]	@ (8000934 <SystemClock_Config+0xf4>)
 8000878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <SystemClock_Config+0xf8>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000888:	4a2b      	ldr	r2, [pc, #172]	@ (8000938 <SystemClock_Config+0xf8>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <SystemClock_Config+0xf8>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089c:	bf00      	nop
 800089e:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <SystemClock_Config+0xf8>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008aa:	d1f8      	bne.n	800089e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ac:	2302      	movs	r3, #2
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	2340      	movs	r3, #64	@ 0x40
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008bc:	2300      	movs	r3, #0
 80008be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008c4:	230a      	movs	r3, #10
 80008c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d4:	230c      	movs	r3, #12
 80008d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008d8:	2302      	movs	r3, #2
 80008da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 ff97 	bl	8001818 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008f0:	f000 f8c4 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	233f      	movs	r3, #63	@ 0x3f
 80008f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000908:	2340      	movs	r3, #64	@ 0x40
 800090a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800090c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000910:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2101      	movs	r1, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fbd6 	bl	80020cc <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000926:	f000 f8a9 	bl	8000a7c <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3770      	adds	r7, #112	@ 0x70
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58000400 	.word	0x58000400
 8000938:	58024800 	.word	0x58024800

0800093c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <MX_DMA_Init+0x30>)
 8000944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000948:	4a08      	ldr	r2, [pc, #32]	@ (800096c <MX_DMA_Init+0x30>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_DMA_Init+0x30>)
 8000954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]

}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	58024400 	.word	0x58024400

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b39      	ldr	r3, [pc, #228]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098c:	4a37      	ldr	r2, [pc, #220]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000996:	4b35      	ldr	r3, [pc, #212]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a4:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009aa:	4a30      	ldr	r2, [pc, #192]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	4a28      	ldr	r2, [pc, #160]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 80009ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d2:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80009e0:	2386      	movs	r3, #134	@ 0x86
 80009e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f0:	230b      	movs	r3, #11
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	481d      	ldr	r0, [pc, #116]	@ (8000a70 <MX_GPIO_Init+0x100>)
 80009fc:	f000 fcba 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a00:	2330      	movs	r3, #48	@ 0x30
 8000a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a10:	230b      	movs	r3, #11
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4816      	ldr	r0, [pc, #88]	@ (8000a74 <MX_GPIO_Init+0x104>)
 8000a1c:	f000 fcaa 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a20:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a32:	230a      	movs	r3, #10
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <MX_GPIO_Init+0x100>)
 8000a3e:	f000 fc99 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a42:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a54:	230b      	movs	r3, #11
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <MX_GPIO_Init+0x108>)
 8000a60:	f000 fc88 	bl	8001374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	58020000 	.word	0x58020000
 8000a74:	58020800 	.word	0x58020800
 8000a78:	58021800 	.word	0x58021800

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <HAL_MspInit+0x30>)
 8000a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a94:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <HAL_MspInit+0x30>)
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_MspInit+0x30>)
 8000aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	58024400 	.word	0x58024400

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b12:	f000 fa6f 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f916 	bl	8000d50 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b28:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000b64 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000b2c:	f7ff fdfa 	bl	8000724 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b30:	f7ff fd4a 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	@ (8000b6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	@ (8000b70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f003 f8eb 	bl	8003d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fdf9 	bl	8000754 <main>
  bx  lr
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b6c:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000b70:	08003dd8 	.word	0x08003dd8
  ldr r2, =_sbss
 8000b74:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000b78:	240000f8 	.word	0x240000f8

08000b7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC3_IRQHandler>
	...

08000b80 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	@ 0x30
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d009      	beq.n	8000ba8 <BSP_LED_Init+0x28>
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d006      	beq.n	8000ba8 <BSP_LED_Init+0x28>
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d003      	beq.n	8000ba8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ba0:	f06f 0301 	mvn.w	r3, #1
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ba6:	e055      	b.n	8000c54 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10f      	bne.n	8000bce <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000bae:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <BSP_LED_Init+0xe0>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8000c60 <BSP_LED_Init+0xe0>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbe:	4b28      	ldr	r3, [pc, #160]	@ (8000c60 <BSP_LED_Init+0xe0>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	e021      	b.n	8000c12 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d10f      	bne.n	8000bf4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000bd4:	4b22      	ldr	r3, [pc, #136]	@ (8000c60 <BSP_LED_Init+0xe0>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bda:	4a21      	ldr	r2, [pc, #132]	@ (8000c60 <BSP_LED_Init+0xe0>)
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <BSP_LED_Init+0xe0>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	e00e      	b.n	8000c12 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <BSP_LED_Init+0xe0>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfa:	4a19      	ldr	r2, [pc, #100]	@ (8000c60 <BSP_LED_Init+0xe0>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c04:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <BSP_LED_Init+0xe0>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	4a13      	ldr	r2, [pc, #76]	@ (8000c64 <BSP_LED_Init+0xe4>)
 8000c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c1a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c68 <BSP_LED_Init+0xe8>)
 8000c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c30:	f107 0218 	add.w	r2, r7, #24
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fb9c 	bl	8001374 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <BSP_LED_Init+0xe8>)
 8000c40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <BSP_LED_Init+0xe4>)
 8000c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f000 fd40 	bl	80016d4 <HAL_GPIO_WritePin>
  }

  return ret;
 8000c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3730      	adds	r7, #48	@ 0x30
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024400 	.word	0x58024400
 8000c64:	08003da4 	.word	0x08003da4
 8000c68:	2400000c 	.word	0x2400000c

08000c6c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	460a      	mov	r2, r1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d38 <BSP_PB_Init+0xcc>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c82:	4a2d      	ldr	r2, [pc, #180]	@ (8000d38 <BSP_PB_Init+0xcc>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d38 <BSP_PB_Init+0xcc>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000c9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c9e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10c      	bne.n	8000cc8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4a21      	ldr	r2, [pc, #132]	@ (8000d3c <BSP_PB_Init+0xd0>)
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	f107 020c 	add.w	r2, r7, #12
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 fb57 	bl	8001374 <HAL_GPIO_Init>
 8000cc6:	e031      	b.n	8000d2c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000cc8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ccc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d3c <BSP_PB_Init+0xd0>)
 8000cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd6:	f107 020c 	add.w	r2, r7, #12
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fb49 	bl	8001374 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	4a16      	ldr	r2, [pc, #88]	@ (8000d40 <BSP_PB_Init+0xd4>)
 8000ce8:	441a      	add	r2, r3
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4915      	ldr	r1, [pc, #84]	@ (8000d44 <BSP_PB_Init+0xd8>)
 8000cee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	f000 faec 	bl	80012d2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4a10      	ldr	r2, [pc, #64]	@ (8000d40 <BSP_PB_Init+0xd4>)
 8000d00:	1898      	adds	r0, r3, r2
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <BSP_PB_Init+0xdc>)
 8000d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f000 fac1 	bl	8001294 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000d12:	2028      	movs	r0, #40	@ 0x28
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <BSP_PB_Init+0xe0>)
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f000 fa6f 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000d24:	2328      	movs	r3, #40	@ 0x28
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fa85 	bl	8001236 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	24000018 	.word	0x24000018
 8000d40:	24000058 	.word	0x24000058
 8000d44:	08003dac 	.word	0x08003dac
 8000d48:	2400001c 	.word	0x2400001c
 8000d4c:	24000020 	.word	0x24000020

08000d50 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <BSP_PB_IRQHandler+0x20>)
 8000d60:	4413      	add	r3, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 faca 	bl	80012fc <HAL_EXTI_IRQHandler>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	24000058 	.word	0x24000058

08000d74 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000da2:	f06f 0301 	mvn.w	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	e018      	b.n	8000ddc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2294      	movs	r2, #148	@ 0x94
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <BSP_COM_Init+0x5c>)
 8000db4:	4413      	add	r3, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f852 	bl	8000e60 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2294      	movs	r2, #148	@ 0x94
 8000dc0:	fb02 f303 	mul.w	r3, r2, r3
 8000dc4:	4a08      	ldr	r2, [pc, #32]	@ (8000de8 <BSP_COM_Init+0x5c>)
 8000dc6:	4413      	add	r3, r2
 8000dc8:	6839      	ldr	r1, [r7, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f80e 	bl	8000dec <MX_USART3_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d002      	beq.n	8000ddc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000dd6:	f06f 0303 	mvn.w	r3, #3
 8000dda:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24000060 	.word	0x24000060

08000dec <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_USART3_Init+0x60>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	220c      	movs	r2, #12
 8000e0a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	895b      	ldrh	r3, [r3, #10]
 8000e10:	461a      	mov	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	891b      	ldrh	r3, [r3, #8]
 8000e22:	461a      	mov	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	899b      	ldrh	r3, [r3, #12]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e38:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f001 ff90 	bl	8002d60 <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	24000008 	.word	0x24000008

08000e50 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff ff8d 	bl	8000d74 <BSP_PB_Callback>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	@ 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000e68:	4b27      	ldr	r3, [pc, #156]	@ (8000f08 <COM1_MspInit+0xa8>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6e:	4a26      	ldr	r2, [pc, #152]	@ (8000f08 <COM1_MspInit+0xa8>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e78:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <COM1_MspInit+0xa8>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <COM1_MspInit+0xa8>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8000f08 <COM1_MspInit+0xa8>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e96:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <COM1_MspInit+0xa8>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <COM1_MspInit+0xa8>)
 8000ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eaa:	4a17      	ldr	r2, [pc, #92]	@ (8000f08 <COM1_MspInit+0xa8>)
 8000eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <COM1_MspInit+0xa8>)
 8000eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8000ec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ec6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <COM1_MspInit+0xac>)
 8000ee0:	f000 fa48 	bl	8001374 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000ee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ee8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <COM1_MspInit+0xac>)
 8000efa:	f000 fa3b 	bl	8001374 <HAL_GPIO_Init>
}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	@ 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	58024400 	.word	0x58024400
 8000f0c:	58020c00 	.word	0x58020c00

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f16:	2003      	movs	r0, #3
 8000f18:	f000 f968 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f1c:	f001 fa8c 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <HAL_Init+0x68>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	4913      	ldr	r1, [pc, #76]	@ (8000f7c <HAL_Init+0x6c>)
 8000f2e:	5ccb      	ldrb	r3, [r1, r3]
 8000f30:	f003 031f 	and.w	r3, r3, #31
 8000f34:	fa22 f303 	lsr.w	r3, r2, r3
 8000f38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <HAL_Init+0x68>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	4a0e      	ldr	r2, [pc, #56]	@ (8000f7c <HAL_Init+0x6c>)
 8000f44:	5cd3      	ldrb	r3, [r2, r3]
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f50:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <HAL_Init+0x70>)
 8000f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f54:	4a0b      	ldr	r2, [pc, #44]	@ (8000f84 <HAL_Init+0x74>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f814 	bl	8000f88 <HAL_InitTick>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e002      	b.n	8000f70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6a:	f7ff fd8d 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	08003d94 	.word	0x08003d94
 8000f80:	24000004 	.word	0x24000004
 8000f84:	24000000 	.word	0x24000000

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_InitTick+0x60>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e021      	b.n	8000fe0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <HAL_InitTick+0x64>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_InitTick+0x60>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f94d 	bl	8001252 <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f917 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <HAL_InitTick+0x68>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	24000028 	.word	0x24000028
 8000fec:	24000000 	.word	0x24000000
 8000ff0:	24000024 	.word	0x24000024

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	24000028 	.word	0x24000028
 8001018:	240000f4 	.word	0x240000f4

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	240000f4 	.word	0x240000f4

08001034 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001038:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <HAL_GetREVID+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	0c1b      	lsrs	r3, r3, #16
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	5c001000 	.word	0x5c001000

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	4313      	orrs	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	@ (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	05fa0000 	.word	0x05fa0000

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	@ (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	@ (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <__NVIC_SetPriority+0x50>)
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	@ 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff29 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff40 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff90 	bl	8001140 <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5f 	bl	80010ec <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff33 	bl	80010b0 <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa4 	bl	80011a8 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <HAL_GetCurrentCPUID+0x24>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	2b07      	cmp	r3, #7
 800127c:	d101      	bne.n	8001282 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800127e:	2303      	movs	r3, #3
 8001280:	e000      	b.n	8001284 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001282:	2301      	movs	r3, #1
  }
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	460b      	mov	r3, r1
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e00a      	b.n	80012c6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80012b0:	7afb      	ldrb	r3, [r7, #11]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d103      	bne.n	80012be <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]
      break;
 80012bc:	e002      	b.n	80012c4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	75fb      	strb	r3, [r7, #23]
      break;
 80012c2:	bf00      	nop
  }

  return status;
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	371c      	adds	r7, #28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e003      	b.n	80012ee <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80012ec:	2300      	movs	r3, #0
  }
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0c1b      	lsrs	r3, r3, #16
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	2201      	movs	r2, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001320:	f7ff ffa4 	bl	800126c <HAL_GetCurrentCPUID>
 8001324:	4603      	mov	r3, r0
 8001326:	2b03      	cmp	r3, #3
 8001328:	d105      	bne.n	8001336 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	011a      	lsls	r2, r3, #4
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <HAL_EXTI_IRQHandler+0x70>)
 8001330:	4413      	add	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e004      	b.n	8001340 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	011a      	lsls	r2, r3, #4
 800133a:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <HAL_EXTI_IRQHandler+0x74>)
 800133c:	4413      	add	r3, r2
 800133e:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	4013      	ands	r3, r2
 8001348:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d009      	beq.n	8001364 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4798      	blx	r3
    }
  }
}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	58000088 	.word	0x58000088
 8001370:	580000c8 	.word	0x580000c8

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001382:	4b89      	ldr	r3, [pc, #548]	@ (80015a8 <HAL_GPIO_Init+0x234>)
 8001384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001386:	e194      	b.n	80016b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2101      	movs	r1, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8186 	beq.w	80016ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d005      	beq.n	80013b8 <HAL_GPIO_Init+0x44>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d130      	bne.n	800141a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ee:	2201      	movs	r2, #1
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	f003 0201 	and.w	r2, r3, #1
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b03      	cmp	r3, #3
 8001424:	d017      	beq.n	8001456 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d123      	bne.n	80014aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	08da      	lsrs	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3208      	adds	r2, #8
 800146a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691a      	ldr	r2, [r3, #16]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	69b9      	ldr	r1, [r7, #24]
 80014a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0203 	and.w	r2, r3, #3
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80e0 	beq.w	80016ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ec:	4b2f      	ldr	r3, [pc, #188]	@ (80015ac <HAL_GPIO_Init+0x238>)
 80014ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014f2:	4a2e      	ldr	r2, [pc, #184]	@ (80015ac <HAL_GPIO_Init+0x238>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014fc:	4b2b      	ldr	r3, [pc, #172]	@ (80015ac <HAL_GPIO_Init+0x238>)
 80014fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a29      	ldr	r2, [pc, #164]	@ (80015b0 <HAL_GPIO_Init+0x23c>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a20      	ldr	r2, [pc, #128]	@ (80015b4 <HAL_GPIO_Init+0x240>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d052      	beq.n	80015dc <HAL_GPIO_Init+0x268>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a1f      	ldr	r2, [pc, #124]	@ (80015b8 <HAL_GPIO_Init+0x244>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d031      	beq.n	80015a2 <HAL_GPIO_Init+0x22e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a1e      	ldr	r2, [pc, #120]	@ (80015bc <HAL_GPIO_Init+0x248>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d02b      	beq.n	800159e <HAL_GPIO_Init+0x22a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1d      	ldr	r2, [pc, #116]	@ (80015c0 <HAL_GPIO_Init+0x24c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d025      	beq.n	800159a <HAL_GPIO_Init+0x226>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1c      	ldr	r2, [pc, #112]	@ (80015c4 <HAL_GPIO_Init+0x250>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01f      	beq.n	8001596 <HAL_GPIO_Init+0x222>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <HAL_GPIO_Init+0x254>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x21e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1a      	ldr	r2, [pc, #104]	@ (80015cc <HAL_GPIO_Init+0x258>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x21a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a19      	ldr	r2, [pc, #100]	@ (80015d0 <HAL_GPIO_Init+0x25c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x216>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a18      	ldr	r2, [pc, #96]	@ (80015d4 <HAL_GPIO_Init+0x260>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x212>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_GPIO_Init+0x264>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x20e>
 800157e:	2309      	movs	r3, #9
 8001580:	e02d      	b.n	80015de <HAL_GPIO_Init+0x26a>
 8001582:	230a      	movs	r3, #10
 8001584:	e02b      	b.n	80015de <HAL_GPIO_Init+0x26a>
 8001586:	2308      	movs	r3, #8
 8001588:	e029      	b.n	80015de <HAL_GPIO_Init+0x26a>
 800158a:	2307      	movs	r3, #7
 800158c:	e027      	b.n	80015de <HAL_GPIO_Init+0x26a>
 800158e:	2306      	movs	r3, #6
 8001590:	e025      	b.n	80015de <HAL_GPIO_Init+0x26a>
 8001592:	2305      	movs	r3, #5
 8001594:	e023      	b.n	80015de <HAL_GPIO_Init+0x26a>
 8001596:	2304      	movs	r3, #4
 8001598:	e021      	b.n	80015de <HAL_GPIO_Init+0x26a>
 800159a:	2303      	movs	r3, #3
 800159c:	e01f      	b.n	80015de <HAL_GPIO_Init+0x26a>
 800159e:	2302      	movs	r3, #2
 80015a0:	e01d      	b.n	80015de <HAL_GPIO_Init+0x26a>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e01b      	b.n	80015de <HAL_GPIO_Init+0x26a>
 80015a6:	bf00      	nop
 80015a8:	58000080 	.word	0x58000080
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58000400 	.word	0x58000400
 80015b4:	58020000 	.word	0x58020000
 80015b8:	58020400 	.word	0x58020400
 80015bc:	58020800 	.word	0x58020800
 80015c0:	58020c00 	.word	0x58020c00
 80015c4:	58021000 	.word	0x58021000
 80015c8:	58021400 	.word	0x58021400
 80015cc:	58021800 	.word	0x58021800
 80015d0:	58021c00 	.word	0x58021c00
 80015d4:	58022000 	.word	0x58022000
 80015d8:	58022400 	.word	0x58022400
 80015dc:	2300      	movs	r3, #0
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	f002 0203 	and.w	r2, r2, #3
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	4093      	lsls	r3, r2
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ee:	4938      	ldr	r1, [pc, #224]	@ (80016d0 <HAL_GPIO_Init+0x35c>)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001622:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001650:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3301      	adds	r3, #1
 80016b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f47f ae63 	bne.w	8001388 <HAL_GPIO_Init+0x14>
  }
}
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	3724      	adds	r7, #36	@ 0x24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	58000400 	.word	0x58000400

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016f0:	e003      	b.n	80016fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001710:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_HSEM_FastTake+0x2c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3320      	adds	r3, #32
 8001716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171a:	4a07      	ldr	r2, [pc, #28]	@ (8001738 <HAL_HSEM_FastTake+0x30>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	e000      	b.n	8001726 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	58026400 	.word	0x58026400
 8001738:	80000300 	.word	0x80000300

0800173c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001746:	4906      	ldr	r1, [pc, #24]	@ (8001760 <HAL_HSEM_Release+0x24>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	58026400 	.word	0x58026400

08001764 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800176c:	4b29      	ldr	r3, [pc, #164]	@ (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	2b06      	cmp	r3, #6
 8001776:	d00a      	beq.n	800178e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001778:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e040      	b.n	800180c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e03e      	b.n	800180c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800178e:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001796:	491f      	ldr	r1, [pc, #124]	@ (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4313      	orrs	r3, r2
 800179c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800179e:	f7ff fc3d 	bl	800101c <HAL_GetTick>
 80017a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017a4:	e009      	b.n	80017ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017a6:	f7ff fc39 	bl	800101c <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017b4:	d901      	bls.n	80017ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e028      	b.n	800180c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80017ba:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017c6:	d1ee      	bne.n	80017a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b1e      	cmp	r3, #30
 80017cc:	d008      	beq.n	80017e0 <HAL_PWREx_ConfigSupply+0x7c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80017d2:	d005      	beq.n	80017e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b1d      	cmp	r3, #29
 80017d8:	d002      	beq.n	80017e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80017de:	d114      	bne.n	800180a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017e0:	f7ff fc1c 	bl	800101c <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017e6:	e009      	b.n	80017fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017e8:	f7ff fc18 	bl	800101c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017f6:	d901      	bls.n	80017fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e007      	b.n	800180c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_PWREx_ConfigSupply+0xb0>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001808:	d1ee      	bne.n	80017e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	58024800 	.word	0x58024800

08001818 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	@ 0x30
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	f000 bc48 	b.w	80020bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8088 	beq.w	800194a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183a:	4b99      	ldr	r3, [pc, #612]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001844:	4b96      	ldr	r3, [pc, #600]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800184a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184c:	2b10      	cmp	r3, #16
 800184e:	d007      	beq.n	8001860 <HAL_RCC_OscConfig+0x48>
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	2b18      	cmp	r3, #24
 8001854:	d111      	bne.n	800187a <HAL_RCC_OscConfig+0x62>
 8001856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d10c      	bne.n	800187a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4b8f      	ldr	r3, [pc, #572]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d06d      	beq.n	8001948 <HAL_RCC_OscConfig+0x130>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d169      	bne.n	8001948 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	f000 bc21 	b.w	80020bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x7a>
 8001884:	4b86      	ldr	r3, [pc, #536]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a85      	ldr	r2, [pc, #532]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 800188a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e02e      	b.n	80018f0 <HAL_RCC_OscConfig+0xd8>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x9c>
 800189a:	4b81      	ldr	r3, [pc, #516]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a80      	ldr	r2, [pc, #512]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b7e      	ldr	r3, [pc, #504]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a7d      	ldr	r2, [pc, #500]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e01d      	b.n	80018f0 <HAL_RCC_OscConfig+0xd8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0xc0>
 80018be:	4b78      	ldr	r3, [pc, #480]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a77      	ldr	r2, [pc, #476]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b75      	ldr	r3, [pc, #468]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a74      	ldr	r2, [pc, #464]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0xd8>
 80018d8:	4b71      	ldr	r3, [pc, #452]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a70      	ldr	r2, [pc, #448]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b6e      	ldr	r3, [pc, #440]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6d      	ldr	r2, [pc, #436]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fb90 	bl	800101c <HAL_GetTick>
 80018fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fb8c 	bl	800101c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	@ 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e3d4      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001912:	4b63      	ldr	r3, [pc, #396]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0xe8>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fb7c 	bl	800101c <HAL_GetTick>
 8001924:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fb78 	bl	800101c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	@ 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e3c0      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800193a:	4b59      	ldr	r3, [pc, #356]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x110>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80ca 	beq.w	8001aec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001958:	4b51      	ldr	r3, [pc, #324]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001960:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001962:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001966:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <HAL_RCC_OscConfig+0x166>
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	2b18      	cmp	r3, #24
 8001972:	d156      	bne.n	8001a22 <HAL_RCC_OscConfig+0x20a>
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d151      	bne.n	8001a22 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197e:	4b48      	ldr	r3, [pc, #288]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_RCC_OscConfig+0x17e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e392      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001996:	4b42      	ldr	r3, [pc, #264]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0219 	bic.w	r2, r3, #25
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	493f      	ldr	r1, [pc, #252]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fb38 	bl	800101c <HAL_GetTick>
 80019ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b0:	f7ff fb34 	bl	800101c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e37c      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c2:	4b37      	ldr	r3, [pc, #220]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	f7ff fb31 	bl	8001034 <HAL_GetREVID>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019d8:	4293      	cmp	r3, r2
 80019da:	d817      	bhi.n	8001a0c <HAL_RCC_OscConfig+0x1f4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	2b40      	cmp	r3, #64	@ 0x40
 80019e2:	d108      	bne.n	80019f6 <HAL_RCC_OscConfig+0x1de>
 80019e4:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80019ec:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80019ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f4:	e07a      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	031b      	lsls	r3, r3, #12
 8001a04:	4926      	ldr	r1, [pc, #152]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a0a:	e06f      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b24      	ldr	r3, [pc, #144]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	4921      	ldr	r1, [pc, #132]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a20:	e064      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d047      	beq.n	8001aba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0219 	bic.w	r2, r3, #25
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	491a      	ldr	r1, [pc, #104]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff faee 	bl	800101c <HAL_GetTick>
 8001a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff faea 	bl	800101c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e332      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	f7ff fae7 	bl	8001034 <HAL_GetREVID>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d819      	bhi.n	8001aa4 <HAL_RCC_OscConfig+0x28c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	2b40      	cmp	r3, #64	@ 0x40
 8001a76:	d108      	bne.n	8001a8a <HAL_RCC_OscConfig+0x272>
 8001a78:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a80:	4a07      	ldr	r2, [pc, #28]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a86:	6053      	str	r3, [r2, #4]
 8001a88:	e030      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
 8001a8a:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	031b      	lsls	r3, r3, #12
 8001a98:	4901      	ldr	r1, [pc, #4]	@ (8001aa0 <HAL_RCC_OscConfig+0x288>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
 8001a9e:	e025      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	4b9a      	ldr	r3, [pc, #616]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	4997      	ldr	r1, [pc, #604]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
 8001ab8:	e018      	b.n	8001aec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b95      	ldr	r3, [pc, #596]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a94      	ldr	r2, [pc, #592]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff faa9 	bl	800101c <HAL_GetTick>
 8001aca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff faa5 	bl	800101c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e2ed      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ae0:	4b8b      	ldr	r3, [pc, #556]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80a9 	beq.w	8001c4c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001afa:	4b85      	ldr	r3, [pc, #532]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b04:	4b82      	ldr	r3, [pc, #520]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b08:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d007      	beq.n	8001b20 <HAL_RCC_OscConfig+0x308>
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b18      	cmp	r3, #24
 8001b14:	d13a      	bne.n	8001b8c <HAL_RCC_OscConfig+0x374>
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d135      	bne.n	8001b8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b20:	4b7b      	ldr	r3, [pc, #492]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x320>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b80      	cmp	r3, #128	@ 0x80
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e2c1      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b38:	f7ff fa7c 	bl	8001034 <HAL_GetREVID>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d817      	bhi.n	8001b76 <HAL_RCC_OscConfig+0x35e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d108      	bne.n	8001b60 <HAL_RCC_OscConfig+0x348>
 8001b4e:	4b70      	ldr	r3, [pc, #448]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b56:	4a6e      	ldr	r2, [pc, #440]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b5c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b5e:	e075      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b60:	4b6b      	ldr	r3, [pc, #428]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	069b      	lsls	r3, r3, #26
 8001b6e:	4968      	ldr	r1, [pc, #416]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b74:	e06a      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b76:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	061b      	lsls	r3, r3, #24
 8001b84:	4962      	ldr	r1, [pc, #392]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b8a:	e05f      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d042      	beq.n	8001c1a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b94:	4b5e      	ldr	r3, [pc, #376]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a5d      	ldr	r2, [pc, #372]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fa3c 	bl	800101c <HAL_GetTick>
 8001ba4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fa38 	bl	800101c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e280      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bba:	4b55      	ldr	r3, [pc, #340]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bc6:	f7ff fa35 	bl	8001034 <HAL_GetREVID>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d817      	bhi.n	8001c04 <HAL_RCC_OscConfig+0x3ec>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d108      	bne.n	8001bee <HAL_RCC_OscConfig+0x3d6>
 8001bdc:	4b4c      	ldr	r3, [pc, #304]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001be4:	4a4a      	ldr	r2, [pc, #296]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001be6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001bea:	6053      	str	r3, [r2, #4]
 8001bec:	e02e      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
 8001bee:	4b48      	ldr	r3, [pc, #288]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	069b      	lsls	r3, r3, #26
 8001bfc:	4944      	ldr	r1, [pc, #272]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
 8001c02:	e023      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
 8001c04:	4b42      	ldr	r3, [pc, #264]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	493f      	ldr	r1, [pc, #252]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
 8001c18:	e018      	b.n	8001c4c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f9f9 	bl	800101c <HAL_GetTick>
 8001c2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f9f5 	bl	800101c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e23d      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c40:	4b33      	ldr	r3, [pc, #204]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d036      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d019      	beq.n	8001c94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c60:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c64:	4a2a      	ldr	r2, [pc, #168]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6c:	f7ff f9d6 	bl	800101c <HAL_GetTick>
 8001c70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff f9d2 	bl	800101c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e21a      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c86:	4b22      	ldr	r3, [pc, #136]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x45c>
 8001c92:	e018      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c94:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c98:	4a1d      	ldr	r2, [pc, #116]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f9bc 	bl	800101c <HAL_GetTick>
 8001ca4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f9b8 	bl	800101c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e200      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d039      	beq.n	8001d46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a0c      	ldr	r2, [pc, #48]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ce4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f999 	bl	800101c <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cee:	f7ff f995 	bl	800101c <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1dd      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x4d6>
 8001d0c:	e01b      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
 8001d0e:	bf00      	nop
 8001d10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d14:	4b9b      	ldr	r3, [pc, #620]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a9a      	ldr	r2, [pc, #616]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001d1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d20:	f7ff f97c 	bl	800101c <HAL_GetTick>
 8001d24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d28:	f7ff f978 	bl	800101c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1c0      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d3a:	4b92      	ldr	r3, [pc, #584]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8081 	beq.w	8001e56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d54:	4b8c      	ldr	r3, [pc, #560]	@ (8001f88 <HAL_RCC_OscConfig+0x770>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a8b      	ldr	r2, [pc, #556]	@ (8001f88 <HAL_RCC_OscConfig+0x770>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d60:	f7ff f95c 	bl	800101c <HAL_GetTick>
 8001d64:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d68:	f7ff f958 	bl	800101c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	@ 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1a0      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d7a:	4b83      	ldr	r3, [pc, #524]	@ (8001f88 <HAL_RCC_OscConfig+0x770>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x584>
 8001d8e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d92:	4a7c      	ldr	r2, [pc, #496]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d9a:	e02d      	b.n	8001df8 <HAL_RCC_OscConfig+0x5e0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x5a6>
 8001da4:	4b77      	ldr	r3, [pc, #476]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da8:	4a76      	ldr	r2, [pc, #472]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db0:	4b74      	ldr	r3, [pc, #464]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db4:	4a73      	ldr	r2, [pc, #460]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001db6:	f023 0304 	bic.w	r3, r3, #4
 8001dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dbc:	e01c      	b.n	8001df8 <HAL_RCC_OscConfig+0x5e0>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c8>
 8001dc6:	4b6f      	ldr	r3, [pc, #444]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dca:	4a6e      	ldr	r2, [pc, #440]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd6:	4a6b      	ldr	r2, [pc, #428]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0x5e0>
 8001de0:	4b68      	ldr	r3, [pc, #416]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de4:	4a67      	ldr	r2, [pc, #412]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dec:	4b65      	ldr	r3, [pc, #404]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df0:	4a64      	ldr	r2, [pc, #400]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001df2:	f023 0304 	bic.w	r3, r3, #4
 8001df6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d015      	beq.n	8001e2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff f90c 	bl	800101c <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff f908 	bl	800101c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e14e      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e1e:	4b59      	ldr	r3, [pc, #356]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0ee      	beq.n	8001e08 <HAL_RCC_OscConfig+0x5f0>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7ff f8f6 	bl	800101c <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7ff f8f2 	bl	800101c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e138      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1ee      	bne.n	8001e34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 812d 	beq.w	80020ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e60:	4b48      	ldr	r3, [pc, #288]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e68:	2b18      	cmp	r3, #24
 8001e6a:	f000 80bd 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	f040 809e 	bne.w	8001fb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e78:	4b42      	ldr	r3, [pc, #264]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a41      	ldr	r2, [pc, #260]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001e7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f8ca 	bl	800101c <HAL_GetTick>
 8001e88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff f8c6 	bl	800101c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e10e      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e9e:	4b39      	ldr	r3, [pc, #228]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eaa:	4b36      	ldr	r3, [pc, #216]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001eac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eae:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <HAL_RCC_OscConfig+0x774>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	4931      	ldr	r1, [pc, #196]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	025b      	lsls	r3, r3, #9
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eec:	3b01      	subs	r3, #1
 8001eee:	061b      	lsls	r3, r3, #24
 8001ef0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001ef4:	4923      	ldr	r1, [pc, #140]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001efa:	4b22      	ldr	r3, [pc, #136]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f06:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f0a:	4b21      	ldr	r3, [pc, #132]	@ (8001f90 <HAL_RCC_OscConfig+0x778>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f12:	00d2      	lsls	r2, r2, #3
 8001f14:	491b      	ldr	r1, [pc, #108]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1e:	f023 020c 	bic.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	4917      	ldr	r1, [pc, #92]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	f023 0202 	bic.w	r2, r3, #2
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f38:	4912      	ldr	r1, [pc, #72]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f3e:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	4a10      	ldr	r2, [pc, #64]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f66:	4a07      	ldr	r2, [pc, #28]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6e:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <HAL_RCC_OscConfig+0x76c>)
 8001f74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff f84f 	bl	800101c <HAL_GetTick>
 8001f7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f80:	e011      	b.n	8001fa6 <HAL_RCC_OscConfig+0x78e>
 8001f82:	bf00      	nop
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58024800 	.word	0x58024800
 8001f8c:	fffffc0c 	.word	0xfffffc0c
 8001f90:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff f842 	bl	800101c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e08a      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fa6:	4b47      	ldr	r3, [pc, #284]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x77c>
 8001fb2:	e082      	b.n	80020ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a42      	ldr	r2, [pc, #264]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001fba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f82c 	bl	800101c <HAL_GetTick>
 8001fc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff f828 	bl	800101c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e070      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fda:	4b3a      	ldr	r3, [pc, #232]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x7b0>
 8001fe6:	e068      	b.n	80020ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001fe8:	4b36      	ldr	r3, [pc, #216]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fee:	4b35      	ldr	r3, [pc, #212]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d031      	beq.n	8002060 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f003 0203 	and.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d12a      	bne.n	8002060 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d122      	bne.n	8002060 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002024:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d11a      	bne.n	8002060 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	0a5b      	lsrs	r3, r3, #9
 800202e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002036:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d111      	bne.n	8002060 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	0c1b      	lsrs	r3, r3, #16
 8002040:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002048:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d108      	bne.n	8002060 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0e1b      	lsrs	r3, r3, #24
 8002052:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800205a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e02b      	b.n	80020bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8002066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002068:	08db      	lsrs	r3, r3, #3
 800206a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800206e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	429a      	cmp	r2, r3
 8002078:	d01f      	beq.n	80020ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800207a:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 800207c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207e:	4a11      	ldr	r2, [pc, #68]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002086:	f7fe ffc9 	bl	800101c <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800208c:	bf00      	nop
 800208e:	f7fe ffc5 	bl	800101c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	4293      	cmp	r3, r2
 8002098:	d0f9      	beq.n	800208e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 800209c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_RCC_OscConfig+0x8b0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020a6:	00d2      	lsls	r2, r2, #3
 80020a8:	4906      	ldr	r1, [pc, #24]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80020ae:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 80020b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b2:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_RCC_OscConfig+0x8ac>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3730      	adds	r7, #48	@ 0x30
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	58024400 	.word	0x58024400
 80020c8:	ffff0007 	.word	0xffff0007

080020cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e19c      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b8a      	ldr	r3, [pc, #552]	@ (800230c <HAL_RCC_ClockConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d910      	bls.n	8002110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b87      	ldr	r3, [pc, #540]	@ (800230c <HAL_RCC_ClockConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	4985      	ldr	r1, [pc, #532]	@ (800230c <HAL_RCC_ClockConfig+0x240>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b83      	ldr	r3, [pc, #524]	@ (800230c <HAL_RCC_ClockConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e184      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d010      	beq.n	800213e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	4b7b      	ldr	r3, [pc, #492]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002128:	429a      	cmp	r2, r3
 800212a:	d908      	bls.n	800213e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800212c:	4b78      	ldr	r3, [pc, #480]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	4975      	ldr	r1, [pc, #468]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 800213a:	4313      	orrs	r3, r2
 800213c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	4b70      	ldr	r3, [pc, #448]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002156:	429a      	cmp	r2, r3
 8002158:	d908      	bls.n	800216c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800215a:	4b6d      	ldr	r3, [pc, #436]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	496a      	ldr	r1, [pc, #424]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002168:	4313      	orrs	r3, r2
 800216a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d010      	beq.n	800219a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	4b64      	ldr	r3, [pc, #400]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002184:	429a      	cmp	r2, r3
 8002186:	d908      	bls.n	800219a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002188:	4b61      	ldr	r3, [pc, #388]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	495e      	ldr	r1, [pc, #376]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002196:	4313      	orrs	r3, r2
 8002198:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	4b59      	ldr	r3, [pc, #356]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d908      	bls.n	80021c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021b6:	4b56      	ldr	r3, [pc, #344]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4953      	ldr	r1, [pc, #332]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d908      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f023 020f 	bic.w	r2, r3, #15
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4947      	ldr	r1, [pc, #284]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d055      	beq.n	80022ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002202:	4b43      	ldr	r3, [pc, #268]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4940      	ldr	r1, [pc, #256]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002210:	4313      	orrs	r3, r2
 8002212:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d107      	bne.n	800222c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800221c:	4b3c      	ldr	r3, [pc, #240]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d121      	bne.n	800226c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0f6      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d107      	bne.n	8002244 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002234:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d115      	bne.n	800226c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0ea      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d107      	bne.n	800225c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800224c:	4b30      	ldr	r3, [pc, #192]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0de      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800225c:	4b2c      	ldr	r3, [pc, #176]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0d6      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800226c:	4b28      	ldr	r3, [pc, #160]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f023 0207 	bic.w	r2, r3, #7
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4925      	ldr	r1, [pc, #148]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 800227a:	4313      	orrs	r3, r2
 800227c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800227e:	f7fe fecd 	bl	800101c <HAL_GetTick>
 8002282:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002284:	e00a      	b.n	800229c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002286:	f7fe fec9 	bl	800101c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0be      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229c:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d1eb      	bne.n	8002286 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d208      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ca:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f023 020f 	bic.w	r2, r3, #15
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	490e      	ldr	r1, [pc, #56]	@ (8002310 <HAL_RCC_ClockConfig+0x244>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022dc:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <HAL_RCC_ClockConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d214      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b08      	ldr	r3, [pc, #32]	@ (800230c <HAL_RCC_ClockConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 020f 	bic.w	r2, r3, #15
 80022f2:	4906      	ldr	r1, [pc, #24]	@ (800230c <HAL_RCC_ClockConfig+0x240>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b04      	ldr	r3, [pc, #16]	@ (800230c <HAL_RCC_ClockConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e086      	b.n	800241a <HAL_RCC_ClockConfig+0x34e>
 800230c:	52002000 	.word	0x52002000
 8002310:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	4b3f      	ldr	r3, [pc, #252]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800232c:	429a      	cmp	r2, r3
 800232e:	d208      	bcs.n	8002342 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002330:	4b3c      	ldr	r3, [pc, #240]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4939      	ldr	r1, [pc, #228]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 800233e:	4313      	orrs	r3, r2
 8002340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	4b34      	ldr	r3, [pc, #208]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800235a:	429a      	cmp	r2, r3
 800235c:	d208      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800235e:	4b31      	ldr	r3, [pc, #196]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	492e      	ldr	r1, [pc, #184]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 800236c:	4313      	orrs	r3, r2
 800236e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d010      	beq.n	800239e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002388:	429a      	cmp	r2, r3
 800238a:	d208      	bcs.n	800239e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800238c:	4b25      	ldr	r3, [pc, #148]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4922      	ldr	r1, [pc, #136]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 800239a:	4313      	orrs	r3, r2
 800239c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d208      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4917      	ldr	r1, [pc, #92]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023cc:	f000 f834 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	4912      	ldr	r1, [pc, #72]	@ (8002428 <HAL_RCC_ClockConfig+0x35c>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <HAL_RCC_ClockConfig+0x358>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002428 <HAL_RCC_ClockConfig+0x35c>)
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002400:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <HAL_RCC_ClockConfig+0x360>)
 8002402:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002404:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <HAL_RCC_ClockConfig+0x364>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800240a:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <HAL_RCC_ClockConfig+0x368>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fdba 	bl	8000f88 <HAL_InitTick>
 8002414:	4603      	mov	r3, r0
 8002416:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	58024400 	.word	0x58024400
 8002428:	08003d94 	.word	0x08003d94
 800242c:	24000004 	.word	0x24000004
 8002430:	24000000 	.word	0x24000000
 8002434:	24000024 	.word	0x24000024

08002438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800243e:	4bb3      	ldr	r3, [pc, #716]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002446:	2b18      	cmp	r3, #24
 8002448:	f200 8155 	bhi.w	80026f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800244c:	a201      	add	r2, pc, #4	@ (adr r2, 8002454 <HAL_RCC_GetSysClockFreq+0x1c>)
 800244e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002452:	bf00      	nop
 8002454:	080024b9 	.word	0x080024b9
 8002458:	080026f7 	.word	0x080026f7
 800245c:	080026f7 	.word	0x080026f7
 8002460:	080026f7 	.word	0x080026f7
 8002464:	080026f7 	.word	0x080026f7
 8002468:	080026f7 	.word	0x080026f7
 800246c:	080026f7 	.word	0x080026f7
 8002470:	080026f7 	.word	0x080026f7
 8002474:	080024df 	.word	0x080024df
 8002478:	080026f7 	.word	0x080026f7
 800247c:	080026f7 	.word	0x080026f7
 8002480:	080026f7 	.word	0x080026f7
 8002484:	080026f7 	.word	0x080026f7
 8002488:	080026f7 	.word	0x080026f7
 800248c:	080026f7 	.word	0x080026f7
 8002490:	080026f7 	.word	0x080026f7
 8002494:	080024e5 	.word	0x080024e5
 8002498:	080026f7 	.word	0x080026f7
 800249c:	080026f7 	.word	0x080026f7
 80024a0:	080026f7 	.word	0x080026f7
 80024a4:	080026f7 	.word	0x080026f7
 80024a8:	080026f7 	.word	0x080026f7
 80024ac:	080026f7 	.word	0x080026f7
 80024b0:	080026f7 	.word	0x080026f7
 80024b4:	080024eb 	.word	0x080024eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024b8:	4b94      	ldr	r3, [pc, #592]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024c4:	4b91      	ldr	r3, [pc, #580]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	4a90      	ldr	r2, [pc, #576]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
 80024d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80024d6:	e111      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024d8:	4b8d      	ldr	r3, [pc, #564]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024da:	61bb      	str	r3, [r7, #24]
      break;
 80024dc:	e10e      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80024de:	4b8d      	ldr	r3, [pc, #564]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024e0:	61bb      	str	r3, [r7, #24]
      break;
 80024e2:	e10b      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80024e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80024e6:	61bb      	str	r3, [r7, #24]
      break;
 80024e8:	e108      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024ea:	4b88      	ldr	r3, [pc, #544]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80024f4:	4b85      	ldr	r3, [pc, #532]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002500:	4b82      	ldr	r3, [pc, #520]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800250a:	4b80      	ldr	r3, [pc, #512]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800250c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250e:	08db      	lsrs	r3, r3, #3
 8002510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002522:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80e1 	beq.w	80026f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b02      	cmp	r3, #2
 8002532:	f000 8083 	beq.w	800263c <HAL_RCC_GetSysClockFreq+0x204>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b02      	cmp	r3, #2
 800253a:	f200 80a1 	bhi.w	8002680 <HAL_RCC_GetSysClockFreq+0x248>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x114>
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d056      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800254a:	e099      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800254c:	4b6f      	ldr	r3, [pc, #444]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d02d      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002558:	4b6c      	ldr	r3, [pc, #432]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	4a6b      	ldr	r2, [pc, #428]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	ee07 3a90 	vmov	s15, r3
 8002570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002582:	4b62      	ldr	r3, [pc, #392]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002592:	ed97 6a02 	vldr	s12, [r7, #8]
 8002596:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800271c <HAL_RCC_GetSysClockFreq+0x2e4>
 800259a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800259e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80025b2:	e087      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002720 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025c6:	4b51      	ldr	r3, [pc, #324]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800271c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025f6:	e065      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002602:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002724 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800260a:	4b40      	ldr	r3, [pc, #256]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002612:	ee07 3a90 	vmov	s15, r3
 8002616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800261a:	ed97 6a02 	vldr	s12, [r7, #8]
 800261e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800271c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800262a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800262e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800263a:	e043      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002646:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002728 <HAL_RCC_GetSysClockFreq+0x2f0>
 800264a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800264e:	4b2f      	ldr	r3, [pc, #188]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800265e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002662:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800271c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800266a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800266e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800267e:	e021      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	ee07 3a90 	vmov	s15, r3
 8002686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002724 <HAL_RCC_GetSysClockFreq+0x2ec>
 800268e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002692:	4b1e      	ldr	r3, [pc, #120]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80026a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800271c <HAL_RCC_GetSysClockFreq+0x2e4>
 80026aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	0a5b      	lsrs	r3, r3, #9
 80026ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026ce:	3301      	adds	r3, #1
 80026d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	ee07 3a90 	vmov	s15, r3
 80026d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80026e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026e8:	ee17 3a90 	vmov	r3, s15
 80026ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80026ee:	e005      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
      break;
 80026f4:	e002      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80026f6:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026f8:	61bb      	str	r3, [r7, #24]
      break;
 80026fa:	bf00      	nop
  }

  return sysclockfreq;
 80026fc:	69bb      	ldr	r3, [r7, #24]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3724      	adds	r7, #36	@ 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	58024400 	.word	0x58024400
 8002710:	03d09000 	.word	0x03d09000
 8002714:	003d0900 	.word	0x003d0900
 8002718:	017d7840 	.word	0x017d7840
 800271c:	46000000 	.word	0x46000000
 8002720:	4c742400 	.word	0x4c742400
 8002724:	4a742400 	.word	0x4a742400
 8002728:	4bbebc20 	.word	0x4bbebc20

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002732:	f7ff fe81 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 8002736:	4602      	mov	r2, r0
 8002738:	4b10      	ldr	r3, [pc, #64]	@ (800277c <HAL_RCC_GetHCLKFreq+0x50>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	490f      	ldr	r1, [pc, #60]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x54>)
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002750:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <HAL_RCC_GetHCLKFreq+0x50>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	4a09      	ldr	r2, [pc, #36]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x54>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <HAL_RCC_GetHCLKFreq+0x58>)
 8002768:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800276a:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <HAL_RCC_GetHCLKFreq+0x5c>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002770:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <HAL_RCC_GetHCLKFreq+0x58>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	58024400 	.word	0x58024400
 8002780:	08003d94 	.word	0x08003d94
 8002784:	24000004 	.word	0x24000004
 8002788:	24000000 	.word	0x24000000

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002790:	f7ff ffcc 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4904      	ldr	r1, [pc, #16]	@ (80027b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	58024400 	.word	0x58024400
 80027b4:	08003d94 	.word	0x08003d94

080027b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80027bc:	f7ff ffb6 	bl	800272c <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4904      	ldr	r1, [pc, #16]	@ (80027e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	58024400 	.word	0x58024400
 80027e0:	08003d94 	.word	0x08003d94

080027e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80027e8:	f7ff ffa0 	bl	800272c <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4904      	ldr	r1, [pc, #16]	@ (800280c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	58024400 	.word	0x58024400
 800280c:	08003d94 	.word	0x08003d94

08002810 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002818:	4ba1      	ldr	r3, [pc, #644]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002822:	4b9f      	ldr	r3, [pc, #636]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002826:	0b1b      	lsrs	r3, r3, #12
 8002828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800282c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800282e:	4b9c      	ldr	r3, [pc, #624]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800283a:	4b99      	ldr	r3, [pc, #612]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800283c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283e:	08db      	lsrs	r3, r3, #3
 8002840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8111 	beq.w	8002a80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b02      	cmp	r3, #2
 8002862:	f000 8083 	beq.w	800296c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b02      	cmp	r3, #2
 800286a:	f200 80a1 	bhi.w	80029b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d056      	beq.n	8002928 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800287a:	e099      	b.n	80029b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800287c:	4b88      	ldr	r3, [pc, #544]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02d      	beq.n	80028e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002888:	4b85      	ldr	r3, [pc, #532]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	08db      	lsrs	r3, r3, #3
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	4a84      	ldr	r2, [pc, #528]	@ (8002aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028b2:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80028b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80028c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80028ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80028e2:	e087      	b.n	80029f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	ee07 3a90 	vmov	s15, r3
 80028ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002aac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80028f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028f6:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80028f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002906:	ed97 6a03 	vldr	s12, [r7, #12]
 800290a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800290e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800291a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800291e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002926:	e065      	b.n	80029f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002932:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800293a:	4b59      	ldr	r3, [pc, #356]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800293c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800294a:	ed97 6a03 	vldr	s12, [r7, #12]
 800294e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800295a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800295e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800296a:	e043      	b.n	80029f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002976:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800297a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800297e:	4b48      	ldr	r3, [pc, #288]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800298e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002992:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800299a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800299e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029ae:	e021      	b.n	80029f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80029be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c2:	4b37      	ldr	r3, [pc, #220]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80029d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80029da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80029f4:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	0a5b      	lsrs	r3, r3, #9
 80029fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a1a:	ee17 2a90 	vmov	r2, s15
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002a22:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a26:	0c1b      	lsrs	r3, r3, #16
 8002a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a2c:	ee07 3a90 	vmov	s15, r3
 8002a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a48:	ee17 2a90 	vmov	r2, s15
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002a50:	4b13      	ldr	r3, [pc, #76]	@ (8002aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a54:	0e1b      	lsrs	r3, r3, #24
 8002a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a76:	ee17 2a90 	vmov	r2, s15
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002a7e:	e008      	b.n	8002a92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
}
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	@ 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	58024400 	.word	0x58024400
 8002aa4:	03d09000 	.word	0x03d09000
 8002aa8:	46000000 	.word	0x46000000
 8002aac:	4c742400 	.word	0x4c742400
 8002ab0:	4a742400 	.word	0x4a742400
 8002ab4:	4bbebc20 	.word	0x4bbebc20

08002ab8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	@ 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ac0:	4ba1      	ldr	r3, [pc, #644]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002aca:	4b9f      	ldr	r3, [pc, #636]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ace:	0d1b      	lsrs	r3, r3, #20
 8002ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ad4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002ad6:	4b9c      	ldr	r3, [pc, #624]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002ae2:	4b99      	ldr	r3, [pc, #612]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	08db      	lsrs	r3, r3, #3
 8002ae8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	fb02 f303 	mul.w	r3, r2, r3
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8111 	beq.w	8002d28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	f000 8083 	beq.w	8002c14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f200 80a1 	bhi.w	8002c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d056      	beq.n	8002bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002b22:	e099      	b.n	8002c58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b24:	4b88      	ldr	r3, [pc, #544]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d02d      	beq.n	8002b8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b30:	4b85      	ldr	r3, [pc, #532]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	4a84      	ldr	r2, [pc, #528]	@ (8002d4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002b8a:	e087      	b.n	8002c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002d54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8002bb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bce:	e065      	b.n	8002c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002be2:	4b59      	ldr	r3, [pc, #356]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002bf6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c12:	e043      	b.n	8002c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002d5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c26:	4b48      	ldr	r3, [pc, #288]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c56:	e021      	b.n	8002c9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c6a:	4b37      	ldr	r3, [pc, #220]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002d50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	0a5b      	lsrs	r3, r3, #9
 8002ca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc2:	ee17 2a90 	vmov	r2, s15
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002cca:	4b1f      	ldr	r3, [pc, #124]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cf0:	ee17 2a90 	vmov	r2, s15
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002cf8:	4b13      	ldr	r3, [pc, #76]	@ (8002d48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	0e1b      	lsrs	r3, r3, #24
 8002cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d1e:	ee17 2a90 	vmov	r2, s15
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002d26:	e008      	b.n	8002d3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
}
 8002d3a:	bf00      	nop
 8002d3c:	3724      	adds	r7, #36	@ 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	03d09000 	.word	0x03d09000
 8002d50:	46000000 	.word	0x46000000
 8002d54:	4c742400 	.word	0x4c742400
 8002d58:	4a742400 	.word	0x4a742400
 8002d5c:	4bbebc20 	.word	0x4bbebc20

08002d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e042      	b.n	8002df8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f83b 	bl	8002e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2224      	movs	r2, #36	@ 0x24
 8002d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fd9a 	bl	80038e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f82f 	bl	8002e14 <UART_SetConfig>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e01b      	b.n	8002df8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fe19 	bl	8003a28 <UART_CheckIdleState>
 8002df6:	4603      	mov	r3, r0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b092      	sub	sp, #72	@ 0x48
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4bbe      	ldr	r3, [pc, #760]	@ (800313c <UART_SetConfig+0x328>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4ab3      	ldr	r2, [pc, #716]	@ (8003140 <UART_SetConfig+0x32c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	4baf      	ldr	r3, [pc, #700]	@ (8003144 <UART_SetConfig+0x330>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9a:	f023 010f 	bic.w	r1, r3, #15
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4aa6      	ldr	r2, [pc, #664]	@ (8003148 <UART_SetConfig+0x334>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d177      	bne.n	8002fa4 <UART_SetConfig+0x190>
 8002eb4:	4ba5      	ldr	r3, [pc, #660]	@ (800314c <UART_SetConfig+0x338>)
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ebc:	2b28      	cmp	r3, #40	@ 0x28
 8002ebe:	d86d      	bhi.n	8002f9c <UART_SetConfig+0x188>
 8002ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec8 <UART_SetConfig+0xb4>)
 8002ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec6:	bf00      	nop
 8002ec8:	08002f6d 	.word	0x08002f6d
 8002ecc:	08002f9d 	.word	0x08002f9d
 8002ed0:	08002f9d 	.word	0x08002f9d
 8002ed4:	08002f9d 	.word	0x08002f9d
 8002ed8:	08002f9d 	.word	0x08002f9d
 8002edc:	08002f9d 	.word	0x08002f9d
 8002ee0:	08002f9d 	.word	0x08002f9d
 8002ee4:	08002f9d 	.word	0x08002f9d
 8002ee8:	08002f75 	.word	0x08002f75
 8002eec:	08002f9d 	.word	0x08002f9d
 8002ef0:	08002f9d 	.word	0x08002f9d
 8002ef4:	08002f9d 	.word	0x08002f9d
 8002ef8:	08002f9d 	.word	0x08002f9d
 8002efc:	08002f9d 	.word	0x08002f9d
 8002f00:	08002f9d 	.word	0x08002f9d
 8002f04:	08002f9d 	.word	0x08002f9d
 8002f08:	08002f7d 	.word	0x08002f7d
 8002f0c:	08002f9d 	.word	0x08002f9d
 8002f10:	08002f9d 	.word	0x08002f9d
 8002f14:	08002f9d 	.word	0x08002f9d
 8002f18:	08002f9d 	.word	0x08002f9d
 8002f1c:	08002f9d 	.word	0x08002f9d
 8002f20:	08002f9d 	.word	0x08002f9d
 8002f24:	08002f9d 	.word	0x08002f9d
 8002f28:	08002f85 	.word	0x08002f85
 8002f2c:	08002f9d 	.word	0x08002f9d
 8002f30:	08002f9d 	.word	0x08002f9d
 8002f34:	08002f9d 	.word	0x08002f9d
 8002f38:	08002f9d 	.word	0x08002f9d
 8002f3c:	08002f9d 	.word	0x08002f9d
 8002f40:	08002f9d 	.word	0x08002f9d
 8002f44:	08002f9d 	.word	0x08002f9d
 8002f48:	08002f8d 	.word	0x08002f8d
 8002f4c:	08002f9d 	.word	0x08002f9d
 8002f50:	08002f9d 	.word	0x08002f9d
 8002f54:	08002f9d 	.word	0x08002f9d
 8002f58:	08002f9d 	.word	0x08002f9d
 8002f5c:	08002f9d 	.word	0x08002f9d
 8002f60:	08002f9d 	.word	0x08002f9d
 8002f64:	08002f9d 	.word	0x08002f9d
 8002f68:	08002f95 	.word	0x08002f95
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f72:	e222      	b.n	80033ba <UART_SetConfig+0x5a6>
 8002f74:	2304      	movs	r3, #4
 8002f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f7a:	e21e      	b.n	80033ba <UART_SetConfig+0x5a6>
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f82:	e21a      	b.n	80033ba <UART_SetConfig+0x5a6>
 8002f84:	2310      	movs	r3, #16
 8002f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f8a:	e216      	b.n	80033ba <UART_SetConfig+0x5a6>
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f92:	e212      	b.n	80033ba <UART_SetConfig+0x5a6>
 8002f94:	2340      	movs	r3, #64	@ 0x40
 8002f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f9a:	e20e      	b.n	80033ba <UART_SetConfig+0x5a6>
 8002f9c:	2380      	movs	r3, #128	@ 0x80
 8002f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fa2:	e20a      	b.n	80033ba <UART_SetConfig+0x5a6>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a69      	ldr	r2, [pc, #420]	@ (8003150 <UART_SetConfig+0x33c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d130      	bne.n	8003010 <UART_SetConfig+0x1fc>
 8002fae:	4b67      	ldr	r3, [pc, #412]	@ (800314c <UART_SetConfig+0x338>)
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	2b05      	cmp	r3, #5
 8002fb8:	d826      	bhi.n	8003008 <UART_SetConfig+0x1f4>
 8002fba:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc0 <UART_SetConfig+0x1ac>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fd9 	.word	0x08002fd9
 8002fc4:	08002fe1 	.word	0x08002fe1
 8002fc8:	08002fe9 	.word	0x08002fe9
 8002fcc:	08002ff1 	.word	0x08002ff1
 8002fd0:	08002ff9 	.word	0x08002ff9
 8002fd4:	08003001 	.word	0x08003001
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fde:	e1ec      	b.n	80033ba <UART_SetConfig+0x5a6>
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fe6:	e1e8      	b.n	80033ba <UART_SetConfig+0x5a6>
 8002fe8:	2308      	movs	r3, #8
 8002fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fee:	e1e4      	b.n	80033ba <UART_SetConfig+0x5a6>
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ff6:	e1e0      	b.n	80033ba <UART_SetConfig+0x5a6>
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ffe:	e1dc      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003000:	2340      	movs	r3, #64	@ 0x40
 8003002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003006:	e1d8      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003008:	2380      	movs	r3, #128	@ 0x80
 800300a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800300e:	e1d4      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a4f      	ldr	r2, [pc, #316]	@ (8003154 <UART_SetConfig+0x340>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d130      	bne.n	800307c <UART_SetConfig+0x268>
 800301a:	4b4c      	ldr	r3, [pc, #304]	@ (800314c <UART_SetConfig+0x338>)
 800301c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	2b05      	cmp	r3, #5
 8003024:	d826      	bhi.n	8003074 <UART_SetConfig+0x260>
 8003026:	a201      	add	r2, pc, #4	@ (adr r2, 800302c <UART_SetConfig+0x218>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	08003045 	.word	0x08003045
 8003030:	0800304d 	.word	0x0800304d
 8003034:	08003055 	.word	0x08003055
 8003038:	0800305d 	.word	0x0800305d
 800303c:	08003065 	.word	0x08003065
 8003040:	0800306d 	.word	0x0800306d
 8003044:	2300      	movs	r3, #0
 8003046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800304a:	e1b6      	b.n	80033ba <UART_SetConfig+0x5a6>
 800304c:	2304      	movs	r3, #4
 800304e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003052:	e1b2      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003054:	2308      	movs	r3, #8
 8003056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800305a:	e1ae      	b.n	80033ba <UART_SetConfig+0x5a6>
 800305c:	2310      	movs	r3, #16
 800305e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003062:	e1aa      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003064:	2320      	movs	r3, #32
 8003066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800306a:	e1a6      	b.n	80033ba <UART_SetConfig+0x5a6>
 800306c:	2340      	movs	r3, #64	@ 0x40
 800306e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003072:	e1a2      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003074:	2380      	movs	r3, #128	@ 0x80
 8003076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800307a:	e19e      	b.n	80033ba <UART_SetConfig+0x5a6>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a35      	ldr	r2, [pc, #212]	@ (8003158 <UART_SetConfig+0x344>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d130      	bne.n	80030e8 <UART_SetConfig+0x2d4>
 8003086:	4b31      	ldr	r3, [pc, #196]	@ (800314c <UART_SetConfig+0x338>)
 8003088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	2b05      	cmp	r3, #5
 8003090:	d826      	bhi.n	80030e0 <UART_SetConfig+0x2cc>
 8003092:	a201      	add	r2, pc, #4	@ (adr r2, 8003098 <UART_SetConfig+0x284>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030b1 	.word	0x080030b1
 800309c:	080030b9 	.word	0x080030b9
 80030a0:	080030c1 	.word	0x080030c1
 80030a4:	080030c9 	.word	0x080030c9
 80030a8:	080030d1 	.word	0x080030d1
 80030ac:	080030d9 	.word	0x080030d9
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030b6:	e180      	b.n	80033ba <UART_SetConfig+0x5a6>
 80030b8:	2304      	movs	r3, #4
 80030ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030be:	e17c      	b.n	80033ba <UART_SetConfig+0x5a6>
 80030c0:	2308      	movs	r3, #8
 80030c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030c6:	e178      	b.n	80033ba <UART_SetConfig+0x5a6>
 80030c8:	2310      	movs	r3, #16
 80030ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030ce:	e174      	b.n	80033ba <UART_SetConfig+0x5a6>
 80030d0:	2320      	movs	r3, #32
 80030d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030d6:	e170      	b.n	80033ba <UART_SetConfig+0x5a6>
 80030d8:	2340      	movs	r3, #64	@ 0x40
 80030da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030de:	e16c      	b.n	80033ba <UART_SetConfig+0x5a6>
 80030e0:	2380      	movs	r3, #128	@ 0x80
 80030e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030e6:	e168      	b.n	80033ba <UART_SetConfig+0x5a6>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1b      	ldr	r2, [pc, #108]	@ (800315c <UART_SetConfig+0x348>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d142      	bne.n	8003178 <UART_SetConfig+0x364>
 80030f2:	4b16      	ldr	r3, [pc, #88]	@ (800314c <UART_SetConfig+0x338>)
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	2b05      	cmp	r3, #5
 80030fc:	d838      	bhi.n	8003170 <UART_SetConfig+0x35c>
 80030fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003104 <UART_SetConfig+0x2f0>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	0800311d 	.word	0x0800311d
 8003108:	08003125 	.word	0x08003125
 800310c:	0800312d 	.word	0x0800312d
 8003110:	08003135 	.word	0x08003135
 8003114:	08003161 	.word	0x08003161
 8003118:	08003169 	.word	0x08003169
 800311c:	2300      	movs	r3, #0
 800311e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003122:	e14a      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003124:	2304      	movs	r3, #4
 8003126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800312a:	e146      	b.n	80033ba <UART_SetConfig+0x5a6>
 800312c:	2308      	movs	r3, #8
 800312e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003132:	e142      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003134:	2310      	movs	r3, #16
 8003136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800313a:	e13e      	b.n	80033ba <UART_SetConfig+0x5a6>
 800313c:	cfff69f3 	.word	0xcfff69f3
 8003140:	58000c00 	.word	0x58000c00
 8003144:	11fff4ff 	.word	0x11fff4ff
 8003148:	40011000 	.word	0x40011000
 800314c:	58024400 	.word	0x58024400
 8003150:	40004400 	.word	0x40004400
 8003154:	40004800 	.word	0x40004800
 8003158:	40004c00 	.word	0x40004c00
 800315c:	40005000 	.word	0x40005000
 8003160:	2320      	movs	r3, #32
 8003162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003166:	e128      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003168:	2340      	movs	r3, #64	@ 0x40
 800316a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800316e:	e124      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003170:	2380      	movs	r3, #128	@ 0x80
 8003172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003176:	e120      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4acb      	ldr	r2, [pc, #812]	@ (80034ac <UART_SetConfig+0x698>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d176      	bne.n	8003270 <UART_SetConfig+0x45c>
 8003182:	4bcb      	ldr	r3, [pc, #812]	@ (80034b0 <UART_SetConfig+0x69c>)
 8003184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800318a:	2b28      	cmp	r3, #40	@ 0x28
 800318c:	d86c      	bhi.n	8003268 <UART_SetConfig+0x454>
 800318e:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <UART_SetConfig+0x380>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	08003239 	.word	0x08003239
 8003198:	08003269 	.word	0x08003269
 800319c:	08003269 	.word	0x08003269
 80031a0:	08003269 	.word	0x08003269
 80031a4:	08003269 	.word	0x08003269
 80031a8:	08003269 	.word	0x08003269
 80031ac:	08003269 	.word	0x08003269
 80031b0:	08003269 	.word	0x08003269
 80031b4:	08003241 	.word	0x08003241
 80031b8:	08003269 	.word	0x08003269
 80031bc:	08003269 	.word	0x08003269
 80031c0:	08003269 	.word	0x08003269
 80031c4:	08003269 	.word	0x08003269
 80031c8:	08003269 	.word	0x08003269
 80031cc:	08003269 	.word	0x08003269
 80031d0:	08003269 	.word	0x08003269
 80031d4:	08003249 	.word	0x08003249
 80031d8:	08003269 	.word	0x08003269
 80031dc:	08003269 	.word	0x08003269
 80031e0:	08003269 	.word	0x08003269
 80031e4:	08003269 	.word	0x08003269
 80031e8:	08003269 	.word	0x08003269
 80031ec:	08003269 	.word	0x08003269
 80031f0:	08003269 	.word	0x08003269
 80031f4:	08003251 	.word	0x08003251
 80031f8:	08003269 	.word	0x08003269
 80031fc:	08003269 	.word	0x08003269
 8003200:	08003269 	.word	0x08003269
 8003204:	08003269 	.word	0x08003269
 8003208:	08003269 	.word	0x08003269
 800320c:	08003269 	.word	0x08003269
 8003210:	08003269 	.word	0x08003269
 8003214:	08003259 	.word	0x08003259
 8003218:	08003269 	.word	0x08003269
 800321c:	08003269 	.word	0x08003269
 8003220:	08003269 	.word	0x08003269
 8003224:	08003269 	.word	0x08003269
 8003228:	08003269 	.word	0x08003269
 800322c:	08003269 	.word	0x08003269
 8003230:	08003269 	.word	0x08003269
 8003234:	08003261 	.word	0x08003261
 8003238:	2301      	movs	r3, #1
 800323a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800323e:	e0bc      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003240:	2304      	movs	r3, #4
 8003242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003246:	e0b8      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003248:	2308      	movs	r3, #8
 800324a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800324e:	e0b4      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003250:	2310      	movs	r3, #16
 8003252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003256:	e0b0      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003258:	2320      	movs	r3, #32
 800325a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800325e:	e0ac      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003260:	2340      	movs	r3, #64	@ 0x40
 8003262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003266:	e0a8      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003268:	2380      	movs	r3, #128	@ 0x80
 800326a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800326e:	e0a4      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a8f      	ldr	r2, [pc, #572]	@ (80034b4 <UART_SetConfig+0x6a0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d130      	bne.n	80032dc <UART_SetConfig+0x4c8>
 800327a:	4b8d      	ldr	r3, [pc, #564]	@ (80034b0 <UART_SetConfig+0x69c>)
 800327c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	2b05      	cmp	r3, #5
 8003284:	d826      	bhi.n	80032d4 <UART_SetConfig+0x4c0>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <UART_SetConfig+0x478>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	080032a5 	.word	0x080032a5
 8003290:	080032ad 	.word	0x080032ad
 8003294:	080032b5 	.word	0x080032b5
 8003298:	080032bd 	.word	0x080032bd
 800329c:	080032c5 	.word	0x080032c5
 80032a0:	080032cd 	.word	0x080032cd
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032aa:	e086      	b.n	80033ba <UART_SetConfig+0x5a6>
 80032ac:	2304      	movs	r3, #4
 80032ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032b2:	e082      	b.n	80033ba <UART_SetConfig+0x5a6>
 80032b4:	2308      	movs	r3, #8
 80032b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ba:	e07e      	b.n	80033ba <UART_SetConfig+0x5a6>
 80032bc:	2310      	movs	r3, #16
 80032be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032c2:	e07a      	b.n	80033ba <UART_SetConfig+0x5a6>
 80032c4:	2320      	movs	r3, #32
 80032c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ca:	e076      	b.n	80033ba <UART_SetConfig+0x5a6>
 80032cc:	2340      	movs	r3, #64	@ 0x40
 80032ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032d2:	e072      	b.n	80033ba <UART_SetConfig+0x5a6>
 80032d4:	2380      	movs	r3, #128	@ 0x80
 80032d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032da:	e06e      	b.n	80033ba <UART_SetConfig+0x5a6>
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a75      	ldr	r2, [pc, #468]	@ (80034b8 <UART_SetConfig+0x6a4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d130      	bne.n	8003348 <UART_SetConfig+0x534>
 80032e6:	4b72      	ldr	r3, [pc, #456]	@ (80034b0 <UART_SetConfig+0x69c>)
 80032e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d826      	bhi.n	8003340 <UART_SetConfig+0x52c>
 80032f2:	a201      	add	r2, pc, #4	@ (adr r2, 80032f8 <UART_SetConfig+0x4e4>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	08003311 	.word	0x08003311
 80032fc:	08003319 	.word	0x08003319
 8003300:	08003321 	.word	0x08003321
 8003304:	08003329 	.word	0x08003329
 8003308:	08003331 	.word	0x08003331
 800330c:	08003339 	.word	0x08003339
 8003310:	2300      	movs	r3, #0
 8003312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003316:	e050      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003318:	2304      	movs	r3, #4
 800331a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800331e:	e04c      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003320:	2308      	movs	r3, #8
 8003322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003326:	e048      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003328:	2310      	movs	r3, #16
 800332a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800332e:	e044      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003330:	2320      	movs	r3, #32
 8003332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003336:	e040      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003338:	2340      	movs	r3, #64	@ 0x40
 800333a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800333e:	e03c      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003346:	e038      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a5b      	ldr	r2, [pc, #364]	@ (80034bc <UART_SetConfig+0x6a8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d130      	bne.n	80033b4 <UART_SetConfig+0x5a0>
 8003352:	4b57      	ldr	r3, [pc, #348]	@ (80034b0 <UART_SetConfig+0x69c>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	2b05      	cmp	r3, #5
 800335c:	d826      	bhi.n	80033ac <UART_SetConfig+0x598>
 800335e:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <UART_SetConfig+0x550>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	0800337d 	.word	0x0800337d
 8003368:	08003385 	.word	0x08003385
 800336c:	0800338d 	.word	0x0800338d
 8003370:	08003395 	.word	0x08003395
 8003374:	0800339d 	.word	0x0800339d
 8003378:	080033a5 	.word	0x080033a5
 800337c:	2302      	movs	r3, #2
 800337e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003382:	e01a      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003384:	2304      	movs	r3, #4
 8003386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800338a:	e016      	b.n	80033ba <UART_SetConfig+0x5a6>
 800338c:	2308      	movs	r3, #8
 800338e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003392:	e012      	b.n	80033ba <UART_SetConfig+0x5a6>
 8003394:	2310      	movs	r3, #16
 8003396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800339a:	e00e      	b.n	80033ba <UART_SetConfig+0x5a6>
 800339c:	2320      	movs	r3, #32
 800339e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033a2:	e00a      	b.n	80033ba <UART_SetConfig+0x5a6>
 80033a4:	2340      	movs	r3, #64	@ 0x40
 80033a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033aa:	e006      	b.n	80033ba <UART_SetConfig+0x5a6>
 80033ac:	2380      	movs	r3, #128	@ 0x80
 80033ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033b2:	e002      	b.n	80033ba <UART_SetConfig+0x5a6>
 80033b4:	2380      	movs	r3, #128	@ 0x80
 80033b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a3f      	ldr	r2, [pc, #252]	@ (80034bc <UART_SetConfig+0x6a8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	f040 80f8 	bne.w	80035b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	dc46      	bgt.n	800345c <UART_SetConfig+0x648>
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	f2c0 8082 	blt.w	80034d8 <UART_SetConfig+0x6c4>
 80033d4:	3b02      	subs	r3, #2
 80033d6:	2b1e      	cmp	r3, #30
 80033d8:	d87e      	bhi.n	80034d8 <UART_SetConfig+0x6c4>
 80033da:	a201      	add	r2, pc, #4	@ (adr r2, 80033e0 <UART_SetConfig+0x5cc>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	08003463 	.word	0x08003463
 80033e4:	080034d9 	.word	0x080034d9
 80033e8:	0800346b 	.word	0x0800346b
 80033ec:	080034d9 	.word	0x080034d9
 80033f0:	080034d9 	.word	0x080034d9
 80033f4:	080034d9 	.word	0x080034d9
 80033f8:	0800347b 	.word	0x0800347b
 80033fc:	080034d9 	.word	0x080034d9
 8003400:	080034d9 	.word	0x080034d9
 8003404:	080034d9 	.word	0x080034d9
 8003408:	080034d9 	.word	0x080034d9
 800340c:	080034d9 	.word	0x080034d9
 8003410:	080034d9 	.word	0x080034d9
 8003414:	080034d9 	.word	0x080034d9
 8003418:	0800348b 	.word	0x0800348b
 800341c:	080034d9 	.word	0x080034d9
 8003420:	080034d9 	.word	0x080034d9
 8003424:	080034d9 	.word	0x080034d9
 8003428:	080034d9 	.word	0x080034d9
 800342c:	080034d9 	.word	0x080034d9
 8003430:	080034d9 	.word	0x080034d9
 8003434:	080034d9 	.word	0x080034d9
 8003438:	080034d9 	.word	0x080034d9
 800343c:	080034d9 	.word	0x080034d9
 8003440:	080034d9 	.word	0x080034d9
 8003444:	080034d9 	.word	0x080034d9
 8003448:	080034d9 	.word	0x080034d9
 800344c:	080034d9 	.word	0x080034d9
 8003450:	080034d9 	.word	0x080034d9
 8003454:	080034d9 	.word	0x080034d9
 8003458:	080034cb 	.word	0x080034cb
 800345c:	2b40      	cmp	r3, #64	@ 0x40
 800345e:	d037      	beq.n	80034d0 <UART_SetConfig+0x6bc>
 8003460:	e03a      	b.n	80034d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003462:	f7ff f9bf 	bl	80027e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8003466:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003468:	e03c      	b.n	80034e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800346a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff f9ce 	bl	8002810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003478:	e034      	b.n	80034e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800347a:	f107 0318 	add.w	r3, r7, #24
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fb1a 	bl	8002ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003488:	e02c      	b.n	80034e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800348a:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <UART_SetConfig+0x69c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d016      	beq.n	80034c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003496:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <UART_SetConfig+0x69c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	08db      	lsrs	r3, r3, #3
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	4a07      	ldr	r2, [pc, #28]	@ (80034c0 <UART_SetConfig+0x6ac>)
 80034a2:	fa22 f303 	lsr.w	r3, r2, r3
 80034a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80034a8:	e01c      	b.n	80034e4 <UART_SetConfig+0x6d0>
 80034aa:	bf00      	nop
 80034ac:	40011400 	.word	0x40011400
 80034b0:	58024400 	.word	0x58024400
 80034b4:	40007800 	.word	0x40007800
 80034b8:	40007c00 	.word	0x40007c00
 80034bc:	58000c00 	.word	0x58000c00
 80034c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80034c4:	4b9d      	ldr	r3, [pc, #628]	@ (800373c <UART_SetConfig+0x928>)
 80034c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034c8:	e00c      	b.n	80034e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80034ca:	4b9d      	ldr	r3, [pc, #628]	@ (8003740 <UART_SetConfig+0x92c>)
 80034cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034ce:	e009      	b.n	80034e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034d6:	e005      	b.n	80034e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80034e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 81de 	beq.w	80038a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	4a94      	ldr	r2, [pc, #592]	@ (8003744 <UART_SetConfig+0x930>)
 80034f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f6:	461a      	mov	r2, r3
 80034f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80034fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800350c:	429a      	cmp	r2, r3
 800350e:	d305      	bcc.n	800351c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003518:	429a      	cmp	r2, r3
 800351a:	d903      	bls.n	8003524 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003522:	e1c1      	b.n	80038a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003526:	2200      	movs	r2, #0
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	60fa      	str	r2, [r7, #12]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	4a84      	ldr	r2, [pc, #528]	@ (8003744 <UART_SetConfig+0x930>)
 8003532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003536:	b29b      	uxth	r3, r3
 8003538:	2200      	movs	r2, #0
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003546:	f7fc fec7 	bl	80002d8 <__aeabi_uldivmod>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4610      	mov	r0, r2
 8003550:	4619      	mov	r1, r3
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	020b      	lsls	r3, r1, #8
 800355c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003560:	0202      	lsls	r2, r0, #8
 8003562:	6979      	ldr	r1, [r7, #20]
 8003564:	6849      	ldr	r1, [r1, #4]
 8003566:	0849      	lsrs	r1, r1, #1
 8003568:	2000      	movs	r0, #0
 800356a:	460c      	mov	r4, r1
 800356c:	4605      	mov	r5, r0
 800356e:	eb12 0804 	adds.w	r8, r2, r4
 8003572:	eb43 0905 	adc.w	r9, r3, r5
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	469a      	mov	sl, r3
 800357e:	4693      	mov	fp, r2
 8003580:	4652      	mov	r2, sl
 8003582:	465b      	mov	r3, fp
 8003584:	4640      	mov	r0, r8
 8003586:	4649      	mov	r1, r9
 8003588:	f7fc fea6 	bl	80002d8 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800359a:	d308      	bcc.n	80035ae <UART_SetConfig+0x79a>
 800359c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035a2:	d204      	bcs.n	80035ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	e17c      	b.n	80038a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80035b4:	e178      	b.n	80038a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035be:	f040 80c5 	bne.w	800374c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80035c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	dc48      	bgt.n	800365c <UART_SetConfig+0x848>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db7b      	blt.n	80036c6 <UART_SetConfig+0x8b2>
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d879      	bhi.n	80036c6 <UART_SetConfig+0x8b2>
 80035d2:	a201      	add	r2, pc, #4	@ (adr r2, 80035d8 <UART_SetConfig+0x7c4>)
 80035d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d8:	08003663 	.word	0x08003663
 80035dc:	0800366b 	.word	0x0800366b
 80035e0:	080036c7 	.word	0x080036c7
 80035e4:	080036c7 	.word	0x080036c7
 80035e8:	08003673 	.word	0x08003673
 80035ec:	080036c7 	.word	0x080036c7
 80035f0:	080036c7 	.word	0x080036c7
 80035f4:	080036c7 	.word	0x080036c7
 80035f8:	08003683 	.word	0x08003683
 80035fc:	080036c7 	.word	0x080036c7
 8003600:	080036c7 	.word	0x080036c7
 8003604:	080036c7 	.word	0x080036c7
 8003608:	080036c7 	.word	0x080036c7
 800360c:	080036c7 	.word	0x080036c7
 8003610:	080036c7 	.word	0x080036c7
 8003614:	080036c7 	.word	0x080036c7
 8003618:	08003693 	.word	0x08003693
 800361c:	080036c7 	.word	0x080036c7
 8003620:	080036c7 	.word	0x080036c7
 8003624:	080036c7 	.word	0x080036c7
 8003628:	080036c7 	.word	0x080036c7
 800362c:	080036c7 	.word	0x080036c7
 8003630:	080036c7 	.word	0x080036c7
 8003634:	080036c7 	.word	0x080036c7
 8003638:	080036c7 	.word	0x080036c7
 800363c:	080036c7 	.word	0x080036c7
 8003640:	080036c7 	.word	0x080036c7
 8003644:	080036c7 	.word	0x080036c7
 8003648:	080036c7 	.word	0x080036c7
 800364c:	080036c7 	.word	0x080036c7
 8003650:	080036c7 	.word	0x080036c7
 8003654:	080036c7 	.word	0x080036c7
 8003658:	080036b9 	.word	0x080036b9
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d02e      	beq.n	80036be <UART_SetConfig+0x8aa>
 8003660:	e031      	b.n	80036c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003662:	f7ff f893 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8003666:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003668:	e033      	b.n	80036d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800366a:	f7ff f8a5 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 800366e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003670:	e02f      	b.n	80036d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f8ca 	bl	8002810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003680:	e027      	b.n	80036d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003682:	f107 0318 	add.w	r3, r7, #24
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fa16 	bl	8002ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003690:	e01f      	b.n	80036d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003692:	4b2d      	ldr	r3, [pc, #180]	@ (8003748 <UART_SetConfig+0x934>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800369e:	4b2a      	ldr	r3, [pc, #168]	@ (8003748 <UART_SetConfig+0x934>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	08db      	lsrs	r3, r3, #3
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	4a24      	ldr	r2, [pc, #144]	@ (800373c <UART_SetConfig+0x928>)
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80036b0:	e00f      	b.n	80036d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80036b2:	4b22      	ldr	r3, [pc, #136]	@ (800373c <UART_SetConfig+0x928>)
 80036b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80036b6:	e00c      	b.n	80036d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80036b8:	4b21      	ldr	r3, [pc, #132]	@ (8003740 <UART_SetConfig+0x92c>)
 80036ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80036bc:	e009      	b.n	80036d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80036c4:	e005      	b.n	80036d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80036d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80e7 	beq.w	80038a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	4a19      	ldr	r2, [pc, #100]	@ (8003744 <UART_SetConfig+0x930>)
 80036e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036e4:	461a      	mov	r2, r3
 80036e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ec:	005a      	lsls	r2, r3, #1
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	441a      	add	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003702:	2b0f      	cmp	r3, #15
 8003704:	d916      	bls.n	8003734 <UART_SetConfig+0x920>
 8003706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800370c:	d212      	bcs.n	8003734 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	b29b      	uxth	r3, r3
 8003712:	f023 030f 	bic.w	r3, r3, #15
 8003716:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	b29b      	uxth	r3, r3
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	b29a      	uxth	r2, r3
 8003724:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003726:	4313      	orrs	r3, r2
 8003728:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	e0b9      	b.n	80038a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800373a:	e0b5      	b.n	80038a8 <UART_SetConfig+0xa94>
 800373c:	03d09000 	.word	0x03d09000
 8003740:	003d0900 	.word	0x003d0900
 8003744:	08003db0 	.word	0x08003db0
 8003748:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800374c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003750:	2b20      	cmp	r3, #32
 8003752:	dc49      	bgt.n	80037e8 <UART_SetConfig+0x9d4>
 8003754:	2b00      	cmp	r3, #0
 8003756:	db7c      	blt.n	8003852 <UART_SetConfig+0xa3e>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d87a      	bhi.n	8003852 <UART_SetConfig+0xa3e>
 800375c:	a201      	add	r2, pc, #4	@ (adr r2, 8003764 <UART_SetConfig+0x950>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	080037ef 	.word	0x080037ef
 8003768:	080037f7 	.word	0x080037f7
 800376c:	08003853 	.word	0x08003853
 8003770:	08003853 	.word	0x08003853
 8003774:	080037ff 	.word	0x080037ff
 8003778:	08003853 	.word	0x08003853
 800377c:	08003853 	.word	0x08003853
 8003780:	08003853 	.word	0x08003853
 8003784:	0800380f 	.word	0x0800380f
 8003788:	08003853 	.word	0x08003853
 800378c:	08003853 	.word	0x08003853
 8003790:	08003853 	.word	0x08003853
 8003794:	08003853 	.word	0x08003853
 8003798:	08003853 	.word	0x08003853
 800379c:	08003853 	.word	0x08003853
 80037a0:	08003853 	.word	0x08003853
 80037a4:	0800381f 	.word	0x0800381f
 80037a8:	08003853 	.word	0x08003853
 80037ac:	08003853 	.word	0x08003853
 80037b0:	08003853 	.word	0x08003853
 80037b4:	08003853 	.word	0x08003853
 80037b8:	08003853 	.word	0x08003853
 80037bc:	08003853 	.word	0x08003853
 80037c0:	08003853 	.word	0x08003853
 80037c4:	08003853 	.word	0x08003853
 80037c8:	08003853 	.word	0x08003853
 80037cc:	08003853 	.word	0x08003853
 80037d0:	08003853 	.word	0x08003853
 80037d4:	08003853 	.word	0x08003853
 80037d8:	08003853 	.word	0x08003853
 80037dc:	08003853 	.word	0x08003853
 80037e0:	08003853 	.word	0x08003853
 80037e4:	08003845 	.word	0x08003845
 80037e8:	2b40      	cmp	r3, #64	@ 0x40
 80037ea:	d02e      	beq.n	800384a <UART_SetConfig+0xa36>
 80037ec:	e031      	b.n	8003852 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ee:	f7fe ffcd 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 80037f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80037f4:	e033      	b.n	800385e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f6:	f7fe ffdf 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 80037fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80037fc:	e02f      	b.n	800385e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80037fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff f804 	bl	8002810 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800380c:	e027      	b.n	800385e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800380e:	f107 0318 	add.w	r3, r7, #24
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff f950 	bl	8002ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800381c:	e01f      	b.n	800385e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800381e:	4b2d      	ldr	r3, [pc, #180]	@ (80038d4 <UART_SetConfig+0xac0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800382a:	4b2a      	ldr	r3, [pc, #168]	@ (80038d4 <UART_SetConfig+0xac0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	08db      	lsrs	r3, r3, #3
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	4a28      	ldr	r2, [pc, #160]	@ (80038d8 <UART_SetConfig+0xac4>)
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800383c:	e00f      	b.n	800385e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800383e:	4b26      	ldr	r3, [pc, #152]	@ (80038d8 <UART_SetConfig+0xac4>)
 8003840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003842:	e00c      	b.n	800385e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003844:	4b25      	ldr	r3, [pc, #148]	@ (80038dc <UART_SetConfig+0xac8>)
 8003846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003848:	e009      	b.n	800385e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800384e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003850:	e005      	b.n	800385e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800385c:	bf00      	nop
    }

    if (pclk != 0U)
 800385e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d021      	beq.n	80038a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <UART_SetConfig+0xacc>)
 800386a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800386e:	461a      	mov	r2, r3
 8003870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003872:	fbb3 f2f2 	udiv	r2, r3, r2
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	441a      	add	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388a:	2b0f      	cmp	r3, #15
 800388c:	d909      	bls.n	80038a2 <UART_SetConfig+0xa8e>
 800388e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003894:	d205      	bcs.n	80038a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003898:	b29a      	uxth	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e002      	b.n	80038a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2200      	movs	r2, #0
 80038bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80038c4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3748      	adds	r7, #72	@ 0x48
 80038cc:	46bd      	mov	sp, r7
 80038ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d2:	bf00      	nop
 80038d4:	58024400 	.word	0x58024400
 80038d8:	03d09000 	.word	0x03d09000
 80038dc:	003d0900 	.word	0x003d0900
 80038e0:	08003db0 	.word	0x08003db0

080038e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01a      	beq.n	80039fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039e2:	d10a      	bne.n	80039fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b098      	sub	sp, #96	@ 0x60
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a38:	f7fd faf0 	bl	800101c <HAL_GetTick>
 8003a3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d12f      	bne.n	8003aac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a54:	2200      	movs	r2, #0
 8003a56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f88e 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d022      	beq.n	8003aac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e6      	bne.n	8003a66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e063      	b.n	8003b74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d149      	bne.n	8003b4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f857 	bl	8003b7c <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d03c      	beq.n	8003b4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003af2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e6      	bne.n	8003ad4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3308      	adds	r3, #8
 8003b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b26:	61fa      	str	r2, [r7, #28]
 8003b28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	617b      	str	r3, [r7, #20]
   return(result);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e5      	bne.n	8003b06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e012      	b.n	8003b74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3758      	adds	r7, #88	@ 0x58
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8c:	e04f      	b.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d04b      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b96:	f7fd fa41 	bl	800101c <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d302      	bcc.n	8003bac <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e04e      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d037      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b80      	cmp	r3, #128	@ 0x80
 8003bc2:	d034      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b40      	cmp	r3, #64	@ 0x40
 8003bc8:	d031      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d110      	bne.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f839 	bl	8003c58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2208      	movs	r2, #8
 8003bea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e029      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c08:	d111      	bne.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f81f 	bl	8003c58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e00f      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2301      	moveq	r3, #1
 8003c40:	2300      	movne	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d0a0      	beq.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b095      	sub	sp, #84	@ 0x54
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e6      	bne.n	8003c60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3308      	adds	r3, #8
 8003c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d20 <UART_EndRxTransfer+0xc8>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e5      	bne.n	8003c92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d118      	bne.n	8003d00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f023 0310 	bic.w	r3, r3, #16
 8003ce2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e6      	bne.n	8003cce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d14:	bf00      	nop
 8003d16:	3754      	adds	r7, #84	@ 0x54
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	effffffe 	.word	0xeffffffe

08003d24 <memset>:
 8003d24:	4402      	add	r2, r0
 8003d26:	4603      	mov	r3, r0
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d100      	bne.n	8003d2e <memset+0xa>
 8003d2c:	4770      	bx	lr
 8003d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d32:	e7f9      	b.n	8003d28 <memset+0x4>

08003d34 <__libc_init_array>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4d0d      	ldr	r5, [pc, #52]	@ (8003d6c <__libc_init_array+0x38>)
 8003d38:	4c0d      	ldr	r4, [pc, #52]	@ (8003d70 <__libc_init_array+0x3c>)
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	2600      	movs	r6, #0
 8003d40:	42a6      	cmp	r6, r4
 8003d42:	d109      	bne.n	8003d58 <__libc_init_array+0x24>
 8003d44:	4d0b      	ldr	r5, [pc, #44]	@ (8003d74 <__libc_init_array+0x40>)
 8003d46:	4c0c      	ldr	r4, [pc, #48]	@ (8003d78 <__libc_init_array+0x44>)
 8003d48:	f000 f818 	bl	8003d7c <_init>
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	2600      	movs	r6, #0
 8003d52:	42a6      	cmp	r6, r4
 8003d54:	d105      	bne.n	8003d62 <__libc_init_array+0x2e>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5c:	4798      	blx	r3
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7ee      	b.n	8003d40 <__libc_init_array+0xc>
 8003d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d66:	4798      	blx	r3
 8003d68:	3601      	adds	r6, #1
 8003d6a:	e7f2      	b.n	8003d52 <__libc_init_array+0x1e>
 8003d6c:	08003dd0 	.word	0x08003dd0
 8003d70:	08003dd0 	.word	0x08003dd0
 8003d74:	08003dd0 	.word	0x08003dd0
 8003d78:	08003dd4 	.word	0x08003dd4

08003d7c <_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr

08003d88 <_fini>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr
