
Nucleo144_Application_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb94  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0810be2c  0810be2c  0000ce2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810be6c  0810be6c  0000ce6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810be74  0810be74  0000ce74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810be78  0810be78  0000ce78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  10000000  0810be7c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000060c  10000010  0810be8c  0000d010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000061c  0810be8c  0000d61c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fb16  00000000  00000000  0000d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003642  00000000  00000000  0002cb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019b0  00000000  00000000  00030198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013fc  00000000  00000000  00031b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e4d0  00000000  00000000  00032f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000238eb  00000000  00000000  00071414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019d7c2  00000000  00000000  00094cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002324c1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006fa0  00000000  00000000  00232504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000096  00000000  00000000  002394a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810be14 	.word	0x0810be14

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	0810be14 	.word	0x0810be14

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b96a 	b.w	81005c4 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	460c      	mov	r4, r1
 8100310:	2b00      	cmp	r3, #0
 8100312:	d14e      	bne.n	81003b2 <__udivmoddi4+0xaa>
 8100314:	4694      	mov	ip, r2
 8100316:	458c      	cmp	ip, r1
 8100318:	4686      	mov	lr, r0
 810031a:	fab2 f282 	clz	r2, r2
 810031e:	d962      	bls.n	81003e6 <__udivmoddi4+0xde>
 8100320:	b14a      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100322:	f1c2 0320 	rsb	r3, r2, #32
 8100326:	4091      	lsls	r1, r2
 8100328:	fa20 f303 	lsr.w	r3, r0, r3
 810032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8100330:	4319      	orrs	r1, r3
 8100332:	fa00 fe02 	lsl.w	lr, r0, r2
 8100336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810033a:	fa1f f68c 	uxth.w	r6, ip
 810033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8100342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100346:	fb07 1114 	mls	r1, r7, r4, r1
 810034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034e:	fb04 f106 	mul.w	r1, r4, r6
 8100352:	4299      	cmp	r1, r3
 8100354:	d90a      	bls.n	810036c <__udivmoddi4+0x64>
 8100356:	eb1c 0303 	adds.w	r3, ip, r3
 810035a:	f104 30ff 	add.w	r0, r4, #4294967295
 810035e:	f080 8112 	bcs.w	8100586 <__udivmoddi4+0x27e>
 8100362:	4299      	cmp	r1, r3
 8100364:	f240 810f 	bls.w	8100586 <__udivmoddi4+0x27e>
 8100368:	3c02      	subs	r4, #2
 810036a:	4463      	add	r3, ip
 810036c:	1a59      	subs	r1, r3, r1
 810036e:	fa1f f38e 	uxth.w	r3, lr
 8100372:	fbb1 f0f7 	udiv	r0, r1, r7
 8100376:	fb07 1110 	mls	r1, r7, r0, r1
 810037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810037e:	fb00 f606 	mul.w	r6, r0, r6
 8100382:	429e      	cmp	r6, r3
 8100384:	d90a      	bls.n	810039c <__udivmoddi4+0x94>
 8100386:	eb1c 0303 	adds.w	r3, ip, r3
 810038a:	f100 31ff 	add.w	r1, r0, #4294967295
 810038e:	f080 80fc 	bcs.w	810058a <__udivmoddi4+0x282>
 8100392:	429e      	cmp	r6, r3
 8100394:	f240 80f9 	bls.w	810058a <__udivmoddi4+0x282>
 8100398:	4463      	add	r3, ip
 810039a:	3802      	subs	r0, #2
 810039c:	1b9b      	subs	r3, r3, r6
 810039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 81003a2:	2100      	movs	r1, #0
 81003a4:	b11d      	cbz	r5, 81003ae <__udivmoddi4+0xa6>
 81003a6:	40d3      	lsrs	r3, r2
 81003a8:	2200      	movs	r2, #0
 81003aa:	e9c5 3200 	strd	r3, r2, [r5]
 81003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b2:	428b      	cmp	r3, r1
 81003b4:	d905      	bls.n	81003c2 <__udivmoddi4+0xba>
 81003b6:	b10d      	cbz	r5, 81003bc <__udivmoddi4+0xb4>
 81003b8:	e9c5 0100 	strd	r0, r1, [r5]
 81003bc:	2100      	movs	r1, #0
 81003be:	4608      	mov	r0, r1
 81003c0:	e7f5      	b.n	81003ae <__udivmoddi4+0xa6>
 81003c2:	fab3 f183 	clz	r1, r3
 81003c6:	2900      	cmp	r1, #0
 81003c8:	d146      	bne.n	8100458 <__udivmoddi4+0x150>
 81003ca:	42a3      	cmp	r3, r4
 81003cc:	d302      	bcc.n	81003d4 <__udivmoddi4+0xcc>
 81003ce:	4290      	cmp	r0, r2
 81003d0:	f0c0 80f0 	bcc.w	81005b4 <__udivmoddi4+0x2ac>
 81003d4:	1a86      	subs	r6, r0, r2
 81003d6:	eb64 0303 	sbc.w	r3, r4, r3
 81003da:	2001      	movs	r0, #1
 81003dc:	2d00      	cmp	r5, #0
 81003de:	d0e6      	beq.n	81003ae <__udivmoddi4+0xa6>
 81003e0:	e9c5 6300 	strd	r6, r3, [r5]
 81003e4:	e7e3      	b.n	81003ae <__udivmoddi4+0xa6>
 81003e6:	2a00      	cmp	r2, #0
 81003e8:	f040 8090 	bne.w	810050c <__udivmoddi4+0x204>
 81003ec:	eba1 040c 	sub.w	r4, r1, ip
 81003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003f4:	fa1f f78c 	uxth.w	r7, ip
 81003f8:	2101      	movs	r1, #1
 81003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 81003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100402:	fb08 4416 	mls	r4, r8, r6, r4
 8100406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810040a:	fb07 f006 	mul.w	r0, r7, r6
 810040e:	4298      	cmp	r0, r3
 8100410:	d908      	bls.n	8100424 <__udivmoddi4+0x11c>
 8100412:	eb1c 0303 	adds.w	r3, ip, r3
 8100416:	f106 34ff 	add.w	r4, r6, #4294967295
 810041a:	d202      	bcs.n	8100422 <__udivmoddi4+0x11a>
 810041c:	4298      	cmp	r0, r3
 810041e:	f200 80cd 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 8100422:	4626      	mov	r6, r4
 8100424:	1a1c      	subs	r4, r3, r0
 8100426:	fa1f f38e 	uxth.w	r3, lr
 810042a:	fbb4 f0f8 	udiv	r0, r4, r8
 810042e:	fb08 4410 	mls	r4, r8, r0, r4
 8100432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100436:	fb00 f707 	mul.w	r7, r0, r7
 810043a:	429f      	cmp	r7, r3
 810043c:	d908      	bls.n	8100450 <__udivmoddi4+0x148>
 810043e:	eb1c 0303 	adds.w	r3, ip, r3
 8100442:	f100 34ff 	add.w	r4, r0, #4294967295
 8100446:	d202      	bcs.n	810044e <__udivmoddi4+0x146>
 8100448:	429f      	cmp	r7, r3
 810044a:	f200 80b0 	bhi.w	81005ae <__udivmoddi4+0x2a6>
 810044e:	4620      	mov	r0, r4
 8100450:	1bdb      	subs	r3, r3, r7
 8100452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100456:	e7a5      	b.n	81003a4 <__udivmoddi4+0x9c>
 8100458:	f1c1 0620 	rsb	r6, r1, #32
 810045c:	408b      	lsls	r3, r1
 810045e:	fa22 f706 	lsr.w	r7, r2, r6
 8100462:	431f      	orrs	r7, r3
 8100464:	fa20 fc06 	lsr.w	ip, r0, r6
 8100468:	fa04 f301 	lsl.w	r3, r4, r1
 810046c:	ea43 030c 	orr.w	r3, r3, ip
 8100470:	40f4      	lsrs	r4, r6
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	0c38      	lsrs	r0, r7, #16
 8100478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 810047c:	fbb4 fef0 	udiv	lr, r4, r0
 8100480:	fa1f fc87 	uxth.w	ip, r7
 8100484:	fb00 441e 	mls	r4, r0, lr, r4
 8100488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810048c:	fb0e f90c 	mul.w	r9, lr, ip
 8100490:	45a1      	cmp	r9, r4
 8100492:	fa02 f201 	lsl.w	r2, r2, r1
 8100496:	d90a      	bls.n	81004ae <__udivmoddi4+0x1a6>
 8100498:	193c      	adds	r4, r7, r4
 810049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 810049e:	f080 8084 	bcs.w	81005aa <__udivmoddi4+0x2a2>
 81004a2:	45a1      	cmp	r9, r4
 81004a4:	f240 8081 	bls.w	81005aa <__udivmoddi4+0x2a2>
 81004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 81004ac:	443c      	add	r4, r7
 81004ae:	eba4 0409 	sub.w	r4, r4, r9
 81004b2:	fa1f f983 	uxth.w	r9, r3
 81004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 81004ba:	fb00 4413 	mls	r4, r0, r3, r4
 81004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 81004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c6:	45a4      	cmp	ip, r4
 81004c8:	d907      	bls.n	81004da <__udivmoddi4+0x1d2>
 81004ca:	193c      	adds	r4, r7, r4
 81004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 81004d0:	d267      	bcs.n	81005a2 <__udivmoddi4+0x29a>
 81004d2:	45a4      	cmp	ip, r4
 81004d4:	d965      	bls.n	81005a2 <__udivmoddi4+0x29a>
 81004d6:	3b02      	subs	r3, #2
 81004d8:	443c      	add	r4, r7
 81004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81004de:	fba0 9302 	umull	r9, r3, r0, r2
 81004e2:	eba4 040c 	sub.w	r4, r4, ip
 81004e6:	429c      	cmp	r4, r3
 81004e8:	46ce      	mov	lr, r9
 81004ea:	469c      	mov	ip, r3
 81004ec:	d351      	bcc.n	8100592 <__udivmoddi4+0x28a>
 81004ee:	d04e      	beq.n	810058e <__udivmoddi4+0x286>
 81004f0:	b155      	cbz	r5, 8100508 <__udivmoddi4+0x200>
 81004f2:	ebb8 030e 	subs.w	r3, r8, lr
 81004f6:	eb64 040c 	sbc.w	r4, r4, ip
 81004fa:	fa04 f606 	lsl.w	r6, r4, r6
 81004fe:	40cb      	lsrs	r3, r1
 8100500:	431e      	orrs	r6, r3
 8100502:	40cc      	lsrs	r4, r1
 8100504:	e9c5 6400 	strd	r6, r4, [r5]
 8100508:	2100      	movs	r1, #0
 810050a:	e750      	b.n	81003ae <__udivmoddi4+0xa6>
 810050c:	f1c2 0320 	rsb	r3, r2, #32
 8100510:	fa20 f103 	lsr.w	r1, r0, r3
 8100514:	fa0c fc02 	lsl.w	ip, ip, r2
 8100518:	fa24 f303 	lsr.w	r3, r4, r3
 810051c:	4094      	lsls	r4, r2
 810051e:	430c      	orrs	r4, r1
 8100520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100524:	fa00 fe02 	lsl.w	lr, r0, r2
 8100528:	fa1f f78c 	uxth.w	r7, ip
 810052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100530:	fb08 3110 	mls	r1, r8, r0, r3
 8100534:	0c23      	lsrs	r3, r4, #16
 8100536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810053a:	fb00 f107 	mul.w	r1, r0, r7
 810053e:	4299      	cmp	r1, r3
 8100540:	d908      	bls.n	8100554 <__udivmoddi4+0x24c>
 8100542:	eb1c 0303 	adds.w	r3, ip, r3
 8100546:	f100 36ff 	add.w	r6, r0, #4294967295
 810054a:	d22c      	bcs.n	81005a6 <__udivmoddi4+0x29e>
 810054c:	4299      	cmp	r1, r3
 810054e:	d92a      	bls.n	81005a6 <__udivmoddi4+0x29e>
 8100550:	3802      	subs	r0, #2
 8100552:	4463      	add	r3, ip
 8100554:	1a5b      	subs	r3, r3, r1
 8100556:	b2a4      	uxth	r4, r4
 8100558:	fbb3 f1f8 	udiv	r1, r3, r8
 810055c:	fb08 3311 	mls	r3, r8, r1, r3
 8100560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100564:	fb01 f307 	mul.w	r3, r1, r7
 8100568:	42a3      	cmp	r3, r4
 810056a:	d908      	bls.n	810057e <__udivmoddi4+0x276>
 810056c:	eb1c 0404 	adds.w	r4, ip, r4
 8100570:	f101 36ff 	add.w	r6, r1, #4294967295
 8100574:	d213      	bcs.n	810059e <__udivmoddi4+0x296>
 8100576:	42a3      	cmp	r3, r4
 8100578:	d911      	bls.n	810059e <__udivmoddi4+0x296>
 810057a:	3902      	subs	r1, #2
 810057c:	4464      	add	r4, ip
 810057e:	1ae4      	subs	r4, r4, r3
 8100580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100584:	e739      	b.n	81003fa <__udivmoddi4+0xf2>
 8100586:	4604      	mov	r4, r0
 8100588:	e6f0      	b.n	810036c <__udivmoddi4+0x64>
 810058a:	4608      	mov	r0, r1
 810058c:	e706      	b.n	810039c <__udivmoddi4+0x94>
 810058e:	45c8      	cmp	r8, r9
 8100590:	d2ae      	bcs.n	81004f0 <__udivmoddi4+0x1e8>
 8100592:	ebb9 0e02 	subs.w	lr, r9, r2
 8100596:	eb63 0c07 	sbc.w	ip, r3, r7
 810059a:	3801      	subs	r0, #1
 810059c:	e7a8      	b.n	81004f0 <__udivmoddi4+0x1e8>
 810059e:	4631      	mov	r1, r6
 81005a0:	e7ed      	b.n	810057e <__udivmoddi4+0x276>
 81005a2:	4603      	mov	r3, r0
 81005a4:	e799      	b.n	81004da <__udivmoddi4+0x1d2>
 81005a6:	4630      	mov	r0, r6
 81005a8:	e7d4      	b.n	8100554 <__udivmoddi4+0x24c>
 81005aa:	46d6      	mov	lr, sl
 81005ac:	e77f      	b.n	81004ae <__udivmoddi4+0x1a6>
 81005ae:	4463      	add	r3, ip
 81005b0:	3802      	subs	r0, #2
 81005b2:	e74d      	b.n	8100450 <__udivmoddi4+0x148>
 81005b4:	4606      	mov	r6, r0
 81005b6:	4623      	mov	r3, r4
 81005b8:	4608      	mov	r0, r1
 81005ba:	e70f      	b.n	81003dc <__udivmoddi4+0xd4>
 81005bc:	3e02      	subs	r6, #2
 81005be:	4463      	add	r3, ip
 81005c0:	e730      	b.n	8100424 <__udivmoddi4+0x11c>
 81005c2:	bf00      	nop

081005c4 <__aeabi_idiv0>:
 81005c4:	4770      	bx	lr
 81005c6:	bf00      	nop

081005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005c8:	b480      	push	{r7}
 81005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005cc:	4b09      	ldr	r3, [pc, #36]	@ (81005f4 <SystemInit+0x2c>)
 81005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81005d2:	4a08      	ldr	r2, [pc, #32]	@ (81005f4 <SystemInit+0x2c>)
 81005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005dc:	4b05      	ldr	r3, [pc, #20]	@ (81005f4 <SystemInit+0x2c>)
 81005de:	691b      	ldr	r3, [r3, #16]
 81005e0:	4a04      	ldr	r2, [pc, #16]	@ (81005f4 <SystemInit+0x2c>)
 81005e2:	f043 0310 	orr.w	r3, r3, #16
 81005e6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81005e8:	bf00      	nop
 81005ea:	46bd      	mov	sp, r7
 81005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f0:	4770      	bx	lr
 81005f2:	bf00      	nop
 81005f4:	e000ed00 	.word	0xe000ed00

081005f8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 81005f8:	b480      	push	{r7}
 81005fa:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 81005fc:	4b09      	ldr	r3, [pc, #36]	@ (8100624 <ExitRun0Mode+0x2c>)
 81005fe:	68db      	ldr	r3, [r3, #12]
 8100600:	4a08      	ldr	r2, [pc, #32]	@ (8100624 <ExitRun0Mode+0x2c>)
 8100602:	f023 0302 	bic.w	r3, r3, #2
 8100606:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100608:	bf00      	nop
 810060a:	4b06      	ldr	r3, [pc, #24]	@ (8100624 <ExitRun0Mode+0x2c>)
 810060c:	685b      	ldr	r3, [r3, #4]
 810060e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100612:	2b00      	cmp	r3, #0
 8100614:	d0f9      	beq.n	810060a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100616:	bf00      	nop
 8100618:	bf00      	nop
 810061a:	46bd      	mov	sp, r7
 810061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100620:	4770      	bx	lr
 8100622:	bf00      	nop
 8100624:	58024800 	.word	0x58024800

08100628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100628:	b580      	push	{r7, lr}
 810062a:	b082      	sub	sp, #8
 810062c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810062e:	4b22      	ldr	r3, [pc, #136]	@ (81006b8 <main+0x90>)
 8100630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100634:	4a20      	ldr	r2, [pc, #128]	@ (81006b8 <main+0x90>)
 8100636:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810063a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810063e:	4b1e      	ldr	r3, [pc, #120]	@ (81006b8 <main+0x90>)
 8100640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100648:	607b      	str	r3, [r7, #4]
 810064a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810064c:	2001      	movs	r0, #1
 810064e:	f004 fbe1 	bl	8104e14 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100652:	f004 ffc3 	bl	81055dc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100656:	2201      	movs	r2, #1
 8100658:	2102      	movs	r1, #2
 810065a:	2000      	movs	r0, #0
 810065c:	f004 ff44 	bl	81054e8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100660:	4b16      	ldr	r3, [pc, #88]	@ (81006bc <main+0x94>)
 8100662:	681b      	ldr	r3, [r3, #0]
 8100664:	091b      	lsrs	r3, r3, #4
 8100666:	f003 030f 	and.w	r3, r3, #15
 810066a:	2b07      	cmp	r3, #7
 810066c:	d108      	bne.n	8100680 <main+0x58>
 810066e:	4b14      	ldr	r3, [pc, #80]	@ (81006c0 <main+0x98>)
 8100670:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100674:	4a12      	ldr	r2, [pc, #72]	@ (81006c0 <main+0x98>)
 8100676:	f043 0301 	orr.w	r3, r3, #1
 810067a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810067e:	e007      	b.n	8100690 <main+0x68>
 8100680:	4b0f      	ldr	r3, [pc, #60]	@ (81006c0 <main+0x98>)
 8100682:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100686:	4a0e      	ldr	r2, [pc, #56]	@ (81006c0 <main+0x98>)
 8100688:	f043 0301 	orr.w	r3, r3, #1
 810068c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100690:	f001 f884 	bl	810179c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100694:	f000 fa1a 	bl	8100acc <MX_GPIO_Init>
  MX_DMA_Init();
 8100698:	f000 f9c8 	bl	8100a2c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 810069c:	f000 f902 	bl	81008a4 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 81006a0:	f000 f978 	bl	8100994 <MX_USART1_UART_Init>
  MX_I2S2_Init();
 81006a4:	f000 f8ca 	bl	810083c <MX_I2S2_Init>
  MX_I2C1_Init();
 81006a8:	f000 f888 	bl	81007bc <MX_I2C1_Init>
  MX_SPI1_Init();
 81006ac:	f000 f91c 	bl	81008e8 <MX_SPI1_Init>
  MX_ADC1_Init();
 81006b0:	f000 f808 	bl	81006c4 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81006b4:	bf00      	nop
 81006b6:	e7fd      	b.n	81006b4 <main+0x8c>
 81006b8:	58024400 	.word	0x58024400
 81006bc:	e000ed00 	.word	0xe000ed00
 81006c0:	58026400 	.word	0x58026400

081006c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 81006c4:	b580      	push	{r7, lr}
 81006c6:	b08a      	sub	sp, #40	@ 0x28
 81006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 81006ca:	f107 031c 	add.w	r3, r7, #28
 81006ce:	2200      	movs	r2, #0
 81006d0:	601a      	str	r2, [r3, #0]
 81006d2:	605a      	str	r2, [r3, #4]
 81006d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81006d6:	463b      	mov	r3, r7
 81006d8:	2200      	movs	r2, #0
 81006da:	601a      	str	r2, [r3, #0]
 81006dc:	605a      	str	r2, [r3, #4]
 81006de:	609a      	str	r2, [r3, #8]
 81006e0:	60da      	str	r2, [r3, #12]
 81006e2:	611a      	str	r2, [r3, #16]
 81006e4:	615a      	str	r2, [r3, #20]
 81006e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81006e8:	4b31      	ldr	r3, [pc, #196]	@ (81007b0 <MX_ADC1_Init+0xec>)
 81006ea:	4a32      	ldr	r2, [pc, #200]	@ (81007b4 <MX_ADC1_Init+0xf0>)
 81006ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 81006ee:	4b30      	ldr	r3, [pc, #192]	@ (81007b0 <MX_ADC1_Init+0xec>)
 81006f0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 81006f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 81006f6:	4b2e      	ldr	r3, [pc, #184]	@ (81007b0 <MX_ADC1_Init+0xec>)
 81006f8:	2200      	movs	r2, #0
 81006fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81006fc:	4b2c      	ldr	r3, [pc, #176]	@ (81007b0 <MX_ADC1_Init+0xec>)
 81006fe:	2200      	movs	r2, #0
 8100700:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100702:	4b2b      	ldr	r3, [pc, #172]	@ (81007b0 <MX_ADC1_Init+0xec>)
 8100704:	2204      	movs	r2, #4
 8100706:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100708:	4b29      	ldr	r3, [pc, #164]	@ (81007b0 <MX_ADC1_Init+0xec>)
 810070a:	2200      	movs	r2, #0
 810070c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 810070e:	4b28      	ldr	r3, [pc, #160]	@ (81007b0 <MX_ADC1_Init+0xec>)
 8100710:	2200      	movs	r2, #0
 8100712:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8100714:	4b26      	ldr	r3, [pc, #152]	@ (81007b0 <MX_ADC1_Init+0xec>)
 8100716:	2201      	movs	r2, #1
 8100718:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810071a:	4b25      	ldr	r3, [pc, #148]	@ (81007b0 <MX_ADC1_Init+0xec>)
 810071c:	2200      	movs	r2, #0
 810071e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100720:	4b23      	ldr	r3, [pc, #140]	@ (81007b0 <MX_ADC1_Init+0xec>)
 8100722:	2200      	movs	r2, #0
 8100724:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100726:	4b22      	ldr	r3, [pc, #136]	@ (81007b0 <MX_ADC1_Init+0xec>)
 8100728:	2200      	movs	r2, #0
 810072a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810072c:	4b20      	ldr	r3, [pc, #128]	@ (81007b0 <MX_ADC1_Init+0xec>)
 810072e:	2200      	movs	r2, #0
 8100730:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100732:	4b1f      	ldr	r3, [pc, #124]	@ (81007b0 <MX_ADC1_Init+0xec>)
 8100734:	2200      	movs	r2, #0
 8100736:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100738:	4b1d      	ldr	r3, [pc, #116]	@ (81007b0 <MX_ADC1_Init+0xec>)
 810073a:	2200      	movs	r2, #0
 810073c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 810073e:	4b1c      	ldr	r3, [pc, #112]	@ (81007b0 <MX_ADC1_Init+0xec>)
 8100740:	2200      	movs	r2, #0
 8100742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8100746:	4b1a      	ldr	r3, [pc, #104]	@ (81007b0 <MX_ADC1_Init+0xec>)
 8100748:	2201      	movs	r2, #1
 810074a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810074c:	4818      	ldr	r0, [pc, #96]	@ (81007b0 <MX_ADC1_Init+0xec>)
 810074e:	f001 fac7 	bl	8101ce0 <HAL_ADC_Init>
 8100752:	4603      	mov	r3, r0
 8100754:	2b00      	cmp	r3, #0
 8100756:	d001      	beq.n	810075c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8100758:	f000 fa92 	bl	8100c80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810075c:	2300      	movs	r3, #0
 810075e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8100760:	f107 031c 	add.w	r3, r7, #28
 8100764:	4619      	mov	r1, r3
 8100766:	4812      	ldr	r0, [pc, #72]	@ (81007b0 <MX_ADC1_Init+0xec>)
 8100768:	f002 f87e 	bl	8102868 <HAL_ADCEx_MultiModeConfigChannel>
 810076c:	4603      	mov	r3, r0
 810076e:	2b00      	cmp	r3, #0
 8100770:	d001      	beq.n	8100776 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8100772:	f000 fa85 	bl	8100c80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8100776:	4b10      	ldr	r3, [pc, #64]	@ (81007b8 <MX_ADC1_Init+0xf4>)
 8100778:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810077a:	2306      	movs	r3, #6
 810077c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810077e:	2300      	movs	r3, #0
 8100780:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100782:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8100786:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100788:	2304      	movs	r3, #4
 810078a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 810078c:	2300      	movs	r3, #0
 810078e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100790:	2300      	movs	r3, #0
 8100792:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8100794:	463b      	mov	r3, r7
 8100796:	4619      	mov	r1, r3
 8100798:	4805      	ldr	r0, [pc, #20]	@ (81007b0 <MX_ADC1_Init+0xec>)
 810079a:	f001 fc43 	bl	8102024 <HAL_ADC_ConfigChannel>
 810079e:	4603      	mov	r3, r0
 81007a0:	2b00      	cmp	r3, #0
 81007a2:	d001      	beq.n	81007a8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 81007a4:	f000 fa6c 	bl	8100c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81007a8:	bf00      	nop
 81007aa:	3728      	adds	r7, #40	@ 0x28
 81007ac:	46bd      	mov	sp, r7
 81007ae:	bd80      	pop	{r7, pc}
 81007b0:	1000002c 	.word	0x1000002c
 81007b4:	40022000 	.word	0x40022000
 81007b8:	14f00020 	.word	0x14f00020

081007bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 81007bc:	b580      	push	{r7, lr}
 81007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 81007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8100830 <MX_I2C1_Init+0x74>)
 81007c2:	4a1c      	ldr	r2, [pc, #112]	@ (8100834 <MX_I2C1_Init+0x78>)
 81007c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 81007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8100830 <MX_I2C1_Init+0x74>)
 81007c8:	4a1b      	ldr	r2, [pc, #108]	@ (8100838 <MX_I2C1_Init+0x7c>)
 81007ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81007cc:	4b18      	ldr	r3, [pc, #96]	@ (8100830 <MX_I2C1_Init+0x74>)
 81007ce:	2200      	movs	r2, #0
 81007d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81007d2:	4b17      	ldr	r3, [pc, #92]	@ (8100830 <MX_I2C1_Init+0x74>)
 81007d4:	2201      	movs	r2, #1
 81007d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81007d8:	4b15      	ldr	r3, [pc, #84]	@ (8100830 <MX_I2C1_Init+0x74>)
 81007da:	2200      	movs	r2, #0
 81007dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81007de:	4b14      	ldr	r3, [pc, #80]	@ (8100830 <MX_I2C1_Init+0x74>)
 81007e0:	2200      	movs	r2, #0
 81007e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81007e4:	4b12      	ldr	r3, [pc, #72]	@ (8100830 <MX_I2C1_Init+0x74>)
 81007e6:	2200      	movs	r2, #0
 81007e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81007ea:	4b11      	ldr	r3, [pc, #68]	@ (8100830 <MX_I2C1_Init+0x74>)
 81007ec:	2200      	movs	r2, #0
 81007ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8100830 <MX_I2C1_Init+0x74>)
 81007f2:	2200      	movs	r2, #0
 81007f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81007f6:	480e      	ldr	r0, [pc, #56]	@ (8100830 <MX_I2C1_Init+0x74>)
 81007f8:	f004 fb1e 	bl	8104e38 <HAL_I2C_Init>
 81007fc:	4603      	mov	r3, r0
 81007fe:	2b00      	cmp	r3, #0
 8100800:	d001      	beq.n	8100806 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8100802:	f000 fa3d 	bl	8100c80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100806:	2100      	movs	r1, #0
 8100808:	4809      	ldr	r0, [pc, #36]	@ (8100830 <MX_I2C1_Init+0x74>)
 810080a:	f004 fbb0 	bl	8104f6e <HAL_I2CEx_ConfigAnalogFilter>
 810080e:	4603      	mov	r3, r0
 8100810:	2b00      	cmp	r3, #0
 8100812:	d001      	beq.n	8100818 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8100814:	f000 fa34 	bl	8100c80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8100818:	2100      	movs	r1, #0
 810081a:	4805      	ldr	r0, [pc, #20]	@ (8100830 <MX_I2C1_Init+0x74>)
 810081c:	f004 fbf2 	bl	8105004 <HAL_I2CEx_ConfigDigitalFilter>
 8100820:	4603      	mov	r3, r0
 8100822:	2b00      	cmp	r3, #0
 8100824:	d001      	beq.n	810082a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8100826:	f000 fa2b 	bl	8100c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 810082a:	bf00      	nop
 810082c:	bd80      	pop	{r7, pc}
 810082e:	bf00      	nop
 8100830:	10000090 	.word	0x10000090
 8100834:	40005400 	.word	0x40005400
 8100838:	00707cbb 	.word	0x00707cbb

0810083c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 810083c:	b580      	push	{r7, lr}
 810083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8100840:	4b16      	ldr	r3, [pc, #88]	@ (810089c <MX_I2S2_Init+0x60>)
 8100842:	4a17      	ldr	r2, [pc, #92]	@ (81008a0 <MX_I2S2_Init+0x64>)
 8100844:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8100846:	4b15      	ldr	r3, [pc, #84]	@ (810089c <MX_I2S2_Init+0x60>)
 8100848:	2204      	movs	r2, #4
 810084a:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 810084c:	4b13      	ldr	r3, [pc, #76]	@ (810089c <MX_I2S2_Init+0x60>)
 810084e:	2200      	movs	r2, #0
 8100850:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8100852:	4b12      	ldr	r3, [pc, #72]	@ (810089c <MX_I2S2_Init+0x60>)
 8100854:	2200      	movs	r2, #0
 8100856:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8100858:	4b10      	ldr	r3, [pc, #64]	@ (810089c <MX_I2S2_Init+0x60>)
 810085a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 810085e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8100860:	4b0e      	ldr	r3, [pc, #56]	@ (810089c <MX_I2S2_Init+0x60>)
 8100862:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8100866:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8100868:	4b0c      	ldr	r3, [pc, #48]	@ (810089c <MX_I2S2_Init+0x60>)
 810086a:	2200      	movs	r2, #0
 810086c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 810086e:	4b0b      	ldr	r3, [pc, #44]	@ (810089c <MX_I2S2_Init+0x60>)
 8100870:	2200      	movs	r2, #0
 8100872:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8100874:	4b09      	ldr	r3, [pc, #36]	@ (810089c <MX_I2S2_Init+0x60>)
 8100876:	2200      	movs	r2, #0
 8100878:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 810087a:	4b08      	ldr	r3, [pc, #32]	@ (810089c <MX_I2S2_Init+0x60>)
 810087c:	2200      	movs	r2, #0
 810087e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8100880:	4b06      	ldr	r3, [pc, #24]	@ (810089c <MX_I2S2_Init+0x60>)
 8100882:	2200      	movs	r2, #0
 8100884:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8100886:	4805      	ldr	r0, [pc, #20]	@ (810089c <MX_I2S2_Init+0x60>)
 8100888:	f004 fc08 	bl	810509c <HAL_I2S_Init>
 810088c:	4603      	mov	r3, r0
 810088e:	2b00      	cmp	r3, #0
 8100890:	d001      	beq.n	8100896 <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8100892:	f000 f9f5 	bl	8100c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8100896:	bf00      	nop
 8100898:	bd80      	pop	{r7, pc}
 810089a:	bf00      	nop
 810089c:	100001d4 	.word	0x100001d4
 81008a0:	40003800 	.word	0x40003800

081008a4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 81008a4:	b580      	push	{r7, lr}
 81008a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 81008a8:	4b0d      	ldr	r3, [pc, #52]	@ (81008e0 <MX_SDMMC1_SD_Init+0x3c>)
 81008aa:	4a0e      	ldr	r2, [pc, #56]	@ (81008e4 <MX_SDMMC1_SD_Init+0x40>)
 81008ac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 81008ae:	4b0c      	ldr	r3, [pc, #48]	@ (81008e0 <MX_SDMMC1_SD_Init+0x3c>)
 81008b0:	2200      	movs	r2, #0
 81008b2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 81008b4:	4b0a      	ldr	r3, [pc, #40]	@ (81008e0 <MX_SDMMC1_SD_Init+0x3c>)
 81008b6:	2200      	movs	r2, #0
 81008b8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 81008ba:	4b09      	ldr	r3, [pc, #36]	@ (81008e0 <MX_SDMMC1_SD_Init+0x3c>)
 81008bc:	2200      	movs	r2, #0
 81008be:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 81008c0:	4b07      	ldr	r3, [pc, #28]	@ (81008e0 <MX_SDMMC1_SD_Init+0x3c>)
 81008c2:	2200      	movs	r2, #0
 81008c4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 81008c6:	4b06      	ldr	r3, [pc, #24]	@ (81008e0 <MX_SDMMC1_SD_Init+0x3c>)
 81008c8:	2200      	movs	r2, #0
 81008ca:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 81008cc:	4804      	ldr	r0, [pc, #16]	@ (81008e0 <MX_SDMMC1_SD_Init+0x3c>)
 81008ce:	f007 fd69 	bl	81083a4 <HAL_SD_Init>
 81008d2:	4603      	mov	r3, r0
 81008d4:	2b00      	cmp	r3, #0
 81008d6:	d001      	beq.n	81008dc <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 81008d8:	f000 f9d2 	bl	8100c80 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 81008dc:	bf00      	nop
 81008de:	bd80      	pop	{r7, pc}
 81008e0:	100002a0 	.word	0x100002a0
 81008e4:	52007000 	.word	0x52007000

081008e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 81008e8:	b580      	push	{r7, lr}
 81008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 81008ec:	4b27      	ldr	r3, [pc, #156]	@ (810098c <MX_SPI1_Init+0xa4>)
 81008ee:	4a28      	ldr	r2, [pc, #160]	@ (8100990 <MX_SPI1_Init+0xa8>)
 81008f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81008f2:	4b26      	ldr	r3, [pc, #152]	@ (810098c <MX_SPI1_Init+0xa4>)
 81008f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 81008f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81008fa:	4b24      	ldr	r3, [pc, #144]	@ (810098c <MX_SPI1_Init+0xa4>)
 81008fc:	2200      	movs	r2, #0
 81008fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8100900:	4b22      	ldr	r3, [pc, #136]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100902:	2203      	movs	r2, #3
 8100904:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100906:	4b21      	ldr	r3, [pc, #132]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100908:	2200      	movs	r2, #0
 810090a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 810090c:	4b1f      	ldr	r3, [pc, #124]	@ (810098c <MX_SPI1_Init+0xa4>)
 810090e:	2200      	movs	r2, #0
 8100910:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8100912:	4b1e      	ldr	r3, [pc, #120]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100914:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8100918:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 810091a:	4b1c      	ldr	r3, [pc, #112]	@ (810098c <MX_SPI1_Init+0xa4>)
 810091c:	2200      	movs	r2, #0
 810091e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100920:	4b1a      	ldr	r3, [pc, #104]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100922:	2200      	movs	r2, #0
 8100924:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8100926:	4b19      	ldr	r3, [pc, #100]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100928:	2200      	movs	r2, #0
 810092a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810092c:	4b17      	ldr	r3, [pc, #92]	@ (810098c <MX_SPI1_Init+0xa4>)
 810092e:	2200      	movs	r2, #0
 8100930:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8100932:	4b16      	ldr	r3, [pc, #88]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100934:	2200      	movs	r2, #0
 8100936:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100938:	4b14      	ldr	r3, [pc, #80]	@ (810098c <MX_SPI1_Init+0xa4>)
 810093a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810093e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100940:	4b12      	ldr	r3, [pc, #72]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100942:	2200      	movs	r2, #0
 8100944:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100946:	4b11      	ldr	r3, [pc, #68]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100948:	2200      	movs	r2, #0
 810094a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810094c:	4b0f      	ldr	r3, [pc, #60]	@ (810098c <MX_SPI1_Init+0xa4>)
 810094e:	2200      	movs	r2, #0
 8100950:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100952:	4b0e      	ldr	r3, [pc, #56]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100954:	2200      	movs	r2, #0
 8100956:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100958:	4b0c      	ldr	r3, [pc, #48]	@ (810098c <MX_SPI1_Init+0xa4>)
 810095a:	2200      	movs	r2, #0
 810095c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810095e:	4b0b      	ldr	r3, [pc, #44]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100960:	2200      	movs	r2, #0
 8100962:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100964:	4b09      	ldr	r3, [pc, #36]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100966:	2200      	movs	r2, #0
 8100968:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810096a:	4b08      	ldr	r3, [pc, #32]	@ (810098c <MX_SPI1_Init+0xa4>)
 810096c:	2200      	movs	r2, #0
 810096e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100970:	4b06      	ldr	r3, [pc, #24]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100972:	2200      	movs	r2, #0
 8100974:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8100976:	4805      	ldr	r0, [pc, #20]	@ (810098c <MX_SPI1_Init+0xa4>)
 8100978:	f009 f80e 	bl	8109998 <HAL_SPI_Init>
 810097c:	4603      	mov	r3, r0
 810097e:	2b00      	cmp	r3, #0
 8100980:	d001      	beq.n	8100986 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8100982:	f000 f97d 	bl	8100c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8100986:	bf00      	nop
 8100988:	bd80      	pop	{r7, pc}
 810098a:	bf00      	nop
 810098c:	1000031c 	.word	0x1000031c
 8100990:	40013000 	.word	0x40013000

08100994 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8100994:	b580      	push	{r7, lr}
 8100996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8100998:	4b22      	ldr	r3, [pc, #136]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 810099a:	4a23      	ldr	r2, [pc, #140]	@ (8100a28 <MX_USART1_UART_Init+0x94>)
 810099c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 810099e:	4b21      	ldr	r3, [pc, #132]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81009a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 81009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009a8:	2200      	movs	r2, #0
 81009aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 81009ac:	4b1d      	ldr	r3, [pc, #116]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009ae:	2200      	movs	r2, #0
 81009b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 81009b2:	4b1c      	ldr	r3, [pc, #112]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009b4:	2200      	movs	r2, #0
 81009b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 81009b8:	4b1a      	ldr	r3, [pc, #104]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009ba:	220c      	movs	r2, #12
 81009bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81009be:	4b19      	ldr	r3, [pc, #100]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009c0:	2200      	movs	r2, #0
 81009c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 81009c4:	4b17      	ldr	r3, [pc, #92]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009c6:	2200      	movs	r2, #0
 81009c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81009ca:	4b16      	ldr	r3, [pc, #88]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009cc:	2200      	movs	r2, #0
 81009ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81009d0:	4b14      	ldr	r3, [pc, #80]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009d2:	2200      	movs	r2, #0
 81009d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81009d6:	4b13      	ldr	r3, [pc, #76]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009d8:	2200      	movs	r2, #0
 81009da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 81009dc:	4811      	ldr	r0, [pc, #68]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009de:	f009 fbd4 	bl	810a18a <HAL_UART_Init>
 81009e2:	4603      	mov	r3, r0
 81009e4:	2b00      	cmp	r3, #0
 81009e6:	d001      	beq.n	81009ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 81009e8:	f000 f94a 	bl	8100c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81009ec:	2100      	movs	r1, #0
 81009ee:	480d      	ldr	r0, [pc, #52]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 81009f0:	f00a fbdc 	bl	810b1ac <HAL_UARTEx_SetTxFifoThreshold>
 81009f4:	4603      	mov	r3, r0
 81009f6:	2b00      	cmp	r3, #0
 81009f8:	d001      	beq.n	81009fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 81009fa:	f000 f941 	bl	8100c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81009fe:	2100      	movs	r1, #0
 8100a00:	4808      	ldr	r0, [pc, #32]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 8100a02:	f00a fc11 	bl	810b228 <HAL_UARTEx_SetRxFifoThreshold>
 8100a06:	4603      	mov	r3, r0
 8100a08:	2b00      	cmp	r3, #0
 8100a0a:	d001      	beq.n	8100a10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8100a0c:	f000 f938 	bl	8100c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8100a10:	4804      	ldr	r0, [pc, #16]	@ (8100a24 <MX_USART1_UART_Init+0x90>)
 8100a12:	f00a fb92 	bl	810b13a <HAL_UARTEx_DisableFifoMode>
 8100a16:	4603      	mov	r3, r0
 8100a18:	2b00      	cmp	r3, #0
 8100a1a:	d001      	beq.n	8100a20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8100a1c:	f000 f930 	bl	8100c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8100a20:	bf00      	nop
 8100a22:	bd80      	pop	{r7, pc}
 8100a24:	10000494 	.word	0x10000494
 8100a28:	40011000 	.word	0x40011000

08100a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8100a2c:	b580      	push	{r7, lr}
 8100a2e:	b082      	sub	sp, #8
 8100a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100a32:	4b25      	ldr	r3, [pc, #148]	@ (8100ac8 <MX_DMA_Init+0x9c>)
 8100a34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100a38:	4a23      	ldr	r2, [pc, #140]	@ (8100ac8 <MX_DMA_Init+0x9c>)
 8100a3a:	f043 0301 	orr.w	r3, r3, #1
 8100a3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100a42:	4b21      	ldr	r3, [pc, #132]	@ (8100ac8 <MX_DMA_Init+0x9c>)
 8100a44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100a48:	f003 0301 	and.w	r3, r3, #1
 8100a4c:	607b      	str	r3, [r7, #4]
 8100a4e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8100a50:	2200      	movs	r2, #0
 8100a52:	2100      	movs	r1, #0
 8100a54:	200b      	movs	r0, #11
 8100a56:	f002 f8c4 	bl	8102be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8100a5a:	200b      	movs	r0, #11
 8100a5c:	f002 f8db 	bl	8102c16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8100a60:	2200      	movs	r2, #0
 8100a62:	2100      	movs	r1, #0
 8100a64:	200c      	movs	r0, #12
 8100a66:	f002 f8bc 	bl	8102be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8100a6a:	200c      	movs	r0, #12
 8100a6c:	f002 f8d3 	bl	8102c16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8100a70:	2200      	movs	r2, #0
 8100a72:	2100      	movs	r1, #0
 8100a74:	200d      	movs	r0, #13
 8100a76:	f002 f8b4 	bl	8102be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8100a7a:	200d      	movs	r0, #13
 8100a7c:	f002 f8cb 	bl	8102c16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8100a80:	2200      	movs	r2, #0
 8100a82:	2100      	movs	r1, #0
 8100a84:	200e      	movs	r0, #14
 8100a86:	f002 f8ac 	bl	8102be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8100a8a:	200e      	movs	r0, #14
 8100a8c:	f002 f8c3 	bl	8102c16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8100a90:	2200      	movs	r2, #0
 8100a92:	2100      	movs	r1, #0
 8100a94:	200f      	movs	r0, #15
 8100a96:	f002 f8a4 	bl	8102be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8100a9a:	200f      	movs	r0, #15
 8100a9c:	f002 f8bb 	bl	8102c16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8100aa0:	2200      	movs	r2, #0
 8100aa2:	2100      	movs	r1, #0
 8100aa4:	2010      	movs	r0, #16
 8100aa6:	f002 f89c 	bl	8102be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8100aaa:	2010      	movs	r0, #16
 8100aac:	f002 f8b3 	bl	8102c16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8100ab0:	2200      	movs	r2, #0
 8100ab2:	2100      	movs	r1, #0
 8100ab4:	2011      	movs	r0, #17
 8100ab6:	f002 f894 	bl	8102be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8100aba:	2011      	movs	r0, #17
 8100abc:	f002 f8ab 	bl	8102c16 <HAL_NVIC_EnableIRQ>

}
 8100ac0:	bf00      	nop
 8100ac2:	3708      	adds	r7, #8
 8100ac4:	46bd      	mov	sp, r7
 8100ac6:	bd80      	pop	{r7, pc}
 8100ac8:	58024400 	.word	0x58024400

08100acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100acc:	b580      	push	{r7, lr}
 8100ace:	b08c      	sub	sp, #48	@ 0x30
 8100ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ad2:	f107 031c 	add.w	r3, r7, #28
 8100ad6:	2200      	movs	r2, #0
 8100ad8:	601a      	str	r2, [r3, #0]
 8100ada:	605a      	str	r2, [r3, #4]
 8100adc:	609a      	str	r2, [r3, #8]
 8100ade:	60da      	str	r2, [r3, #12]
 8100ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100ae2:	4b61      	ldr	r3, [pc, #388]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ae8:	4a5f      	ldr	r2, [pc, #380]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100aea:	f043 0304 	orr.w	r3, r3, #4
 8100aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100af2:	4b5d      	ldr	r3, [pc, #372]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100af8:	f003 0304 	and.w	r3, r3, #4
 8100afc:	61bb      	str	r3, [r7, #24]
 8100afe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100b00:	4b59      	ldr	r3, [pc, #356]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b06:	4a58      	ldr	r2, [pc, #352]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b08:	f043 0301 	orr.w	r3, r3, #1
 8100b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b10:	4b55      	ldr	r3, [pc, #340]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b16:	f003 0301 	and.w	r3, r3, #1
 8100b1a:	617b      	str	r3, [r7, #20]
 8100b1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100b1e:	4b52      	ldr	r3, [pc, #328]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b24:	4a50      	ldr	r2, [pc, #320]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b26:	f043 0302 	orr.w	r3, r3, #2
 8100b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b34:	f003 0302 	and.w	r3, r3, #2
 8100b38:	613b      	str	r3, [r7, #16]
 8100b3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100b3c:	4b4a      	ldr	r3, [pc, #296]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b42:	4a49      	ldr	r2, [pc, #292]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b44:	f043 0310 	orr.w	r3, r3, #16
 8100b48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b4c:	4b46      	ldr	r3, [pc, #280]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b52:	f003 0310 	and.w	r3, r3, #16
 8100b56:	60fb      	str	r3, [r7, #12]
 8100b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100b5a:	4b43      	ldr	r3, [pc, #268]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b60:	4a41      	ldr	r2, [pc, #260]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b62:	f043 0308 	orr.w	r3, r3, #8
 8100b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b70:	f003 0308 	and.w	r3, r3, #8
 8100b74:	60bb      	str	r3, [r7, #8]
 8100b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100b78:	4b3b      	ldr	r3, [pc, #236]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b7e:	4a3a      	ldr	r2, [pc, #232]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b88:	4b37      	ldr	r3, [pc, #220]	@ (8100c68 <MX_GPIO_Init+0x19c>)
 8100b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100b92:	607b      	str	r3, [r7, #4]
 8100b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8100b96:	2200      	movs	r2, #0
 8100b98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8100b9c:	4833      	ldr	r0, [pc, #204]	@ (8100c6c <MX_GPIO_Init+0x1a0>)
 8100b9e:	f004 f91f 	bl	8104de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8100ba2:	2200      	movs	r2, #0
 8100ba4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8100ba8:	4831      	ldr	r0, [pc, #196]	@ (8100c70 <MX_GPIO_Init+0x1a4>)
 8100baa:	f004 f919 	bl	8104de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8100bae:	2301      	movs	r3, #1
 8100bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100bb2:	2302      	movs	r3, #2
 8100bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100bb6:	2300      	movs	r3, #0
 8100bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100bba:	2300      	movs	r3, #0
 8100bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8100bbe:	2308      	movs	r3, #8
 8100bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100bc2:	f107 031c 	add.w	r3, r7, #28
 8100bc6:	4619      	mov	r1, r3
 8100bc8:	482a      	ldr	r0, [pc, #168]	@ (8100c74 <MX_GPIO_Init+0x1a8>)
 8100bca:	f003 ff59 	bl	8104a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN3_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN3_Pin|BTN2_Pin;
 8100bce:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8100bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100bd4:	2300      	movs	r3, #0
 8100bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100bd8:	2300      	movs	r3, #0
 8100bda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100bdc:	f107 031c 	add.w	r3, r7, #28
 8100be0:	4619      	mov	r1, r3
 8100be2:	4825      	ldr	r0, [pc, #148]	@ (8100c78 <MX_GPIO_Init+0x1ac>)
 8100be4:	f003 ff4c 	bl	8104a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN0_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin;
 8100be8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8100bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100bee:	2300      	movs	r3, #0
 8100bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100bf2:	2300      	movs	r3, #0
 8100bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN0_GPIO_Port, &GPIO_InitStruct);
 8100bf6:	f107 031c 	add.w	r3, r7, #28
 8100bfa:	4619      	mov	r1, r3
 8100bfc:	481f      	ldr	r0, [pc, #124]	@ (8100c7c <MX_GPIO_Init+0x1b0>)
 8100bfe:	f003 ff3f 	bl	8104a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8100c02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8100c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100c08:	2301      	movs	r3, #1
 8100c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c0c:	2300      	movs	r3, #0
 8100c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c10:	2300      	movs	r3, #0
 8100c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8100c14:	f107 031c 	add.w	r3, r7, #28
 8100c18:	4619      	mov	r1, r3
 8100c1a:	4814      	ldr	r0, [pc, #80]	@ (8100c6c <MX_GPIO_Init+0x1a0>)
 8100c1c:	f003 ff30 	bl	8104a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8100c20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8100c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c26:	2302      	movs	r3, #2
 8100c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c2a:	2300      	movs	r3, #0
 8100c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c2e:	2300      	movs	r3, #0
 8100c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8100c32:	2306      	movs	r3, #6
 8100c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100c36:	f107 031c 	add.w	r3, r7, #28
 8100c3a:	4619      	mov	r1, r3
 8100c3c:	480b      	ldr	r0, [pc, #44]	@ (8100c6c <MX_GPIO_Init+0x1a0>)
 8100c3e:	f003 ff1f 	bl	8104a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8100c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8100c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100c48:	2301      	movs	r3, #1
 8100c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c4c:	2300      	movs	r3, #0
 8100c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c50:	2300      	movs	r3, #0
 8100c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8100c54:	f107 031c 	add.w	r3, r7, #28
 8100c58:	4619      	mov	r1, r3
 8100c5a:	4805      	ldr	r0, [pc, #20]	@ (8100c70 <MX_GPIO_Init+0x1a4>)
 8100c5c:	f003 ff10 	bl	8104a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100c60:	bf00      	nop
 8100c62:	3730      	adds	r7, #48	@ 0x30
 8100c64:	46bd      	mov	sp, r7
 8100c66:	bd80      	pop	{r7, pc}
 8100c68:	58024400 	.word	0x58024400
 8100c6c:	58020000 	.word	0x58020000
 8100c70:	58021800 	.word	0x58021800
 8100c74:	58020800 	.word	0x58020800
 8100c78:	58021000 	.word	0x58021000
 8100c7c:	58020c00 	.word	0x58020c00

08100c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100c80:	b480      	push	{r7}
 8100c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100c84:	b672      	cpsid	i
}
 8100c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100c88:	bf00      	nop
 8100c8a:	e7fd      	b.n	8100c88 <Error_Handler+0x8>

08100c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100c8c:	b480      	push	{r7}
 8100c8e:	b083      	sub	sp, #12
 8100c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100c92:	4b0a      	ldr	r3, [pc, #40]	@ (8100cbc <HAL_MspInit+0x30>)
 8100c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100c98:	4a08      	ldr	r2, [pc, #32]	@ (8100cbc <HAL_MspInit+0x30>)
 8100c9a:	f043 0302 	orr.w	r3, r3, #2
 8100c9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100ca2:	4b06      	ldr	r3, [pc, #24]	@ (8100cbc <HAL_MspInit+0x30>)
 8100ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100ca8:	f003 0302 	and.w	r3, r3, #2
 8100cac:	607b      	str	r3, [r7, #4]
 8100cae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100cb0:	bf00      	nop
 8100cb2:	370c      	adds	r7, #12
 8100cb4:	46bd      	mov	sp, r7
 8100cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cba:	4770      	bx	lr
 8100cbc:	58024400 	.word	0x58024400

08100cc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8100cc0:	b580      	push	{r7, lr}
 8100cc2:	b0bc      	sub	sp, #240	@ 0xf0
 8100cc4:	af00      	add	r7, sp, #0
 8100cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100cc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100ccc:	2200      	movs	r2, #0
 8100cce:	601a      	str	r2, [r3, #0]
 8100cd0:	605a      	str	r2, [r3, #4]
 8100cd2:	609a      	str	r2, [r3, #8]
 8100cd4:	60da      	str	r2, [r3, #12]
 8100cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100cd8:	f107 0318 	add.w	r3, r7, #24
 8100cdc:	22c0      	movs	r2, #192	@ 0xc0
 8100cde:	2100      	movs	r1, #0
 8100ce0:	4618      	mov	r0, r3
 8100ce2:	f00b f86b 	bl	810bdbc <memset>
  if(hadc->Instance==ADC1)
 8100ce6:	687b      	ldr	r3, [r7, #4]
 8100ce8:	681b      	ldr	r3, [r3, #0]
 8100cea:	4a3a      	ldr	r2, [pc, #232]	@ (8100dd4 <HAL_ADC_MspInit+0x114>)
 8100cec:	4293      	cmp	r3, r2
 8100cee:	d16d      	bne.n	8100dcc <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8100cf0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8100cf4:	f04f 0300 	mov.w	r3, #0
 8100cf8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8100cfc:	2304      	movs	r3, #4
 8100cfe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8100d00:	230a      	movs	r3, #10
 8100d02:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8100d04:	2302      	movs	r3, #2
 8100d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8100d08:	2302      	movs	r3, #2
 8100d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8100d0c:	2302      	movs	r3, #2
 8100d0e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8100d10:	23c0      	movs	r3, #192	@ 0xc0
 8100d12:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8100d14:	2320      	movs	r3, #32
 8100d16:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8100d18:	2300      	movs	r3, #0
 8100d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8100d1c:	2300      	movs	r3, #0
 8100d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100d22:	f107 0318 	add.w	r3, r7, #24
 8100d26:	4618      	mov	r0, r3
 8100d28:	f004 fe3e 	bl	81059a8 <HAL_RCCEx_PeriphCLKConfig>
 8100d2c:	4603      	mov	r3, r0
 8100d2e:	2b00      	cmp	r3, #0
 8100d30:	d001      	beq.n	8100d36 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8100d32:	f7ff ffa5 	bl	8100c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8100d36:	4b28      	ldr	r3, [pc, #160]	@ (8100dd8 <HAL_ADC_MspInit+0x118>)
 8100d38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100d3c:	4a26      	ldr	r2, [pc, #152]	@ (8100dd8 <HAL_ADC_MspInit+0x118>)
 8100d3e:	f043 0320 	orr.w	r3, r3, #32
 8100d42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100d46:	4b24      	ldr	r3, [pc, #144]	@ (8100dd8 <HAL_ADC_MspInit+0x118>)
 8100d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100d4c:	f003 0320 	and.w	r3, r3, #32
 8100d50:	617b      	str	r3, [r7, #20]
 8100d52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100d54:	4b20      	ldr	r3, [pc, #128]	@ (8100dd8 <HAL_ADC_MspInit+0x118>)
 8100d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8100dd8 <HAL_ADC_MspInit+0x118>)
 8100d5c:	f043 0304 	orr.w	r3, r3, #4
 8100d60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d64:	4b1c      	ldr	r3, [pc, #112]	@ (8100dd8 <HAL_ADC_MspInit+0x118>)
 8100d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d6a:	f003 0304 	and.w	r3, r3, #4
 8100d6e:	613b      	str	r3, [r7, #16]
 8100d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100d72:	4b19      	ldr	r3, [pc, #100]	@ (8100dd8 <HAL_ADC_MspInit+0x118>)
 8100d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d78:	4a17      	ldr	r2, [pc, #92]	@ (8100dd8 <HAL_ADC_MspInit+0x118>)
 8100d7a:	f043 0302 	orr.w	r3, r3, #2
 8100d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d82:	4b15      	ldr	r3, [pc, #84]	@ (8100dd8 <HAL_ADC_MspInit+0x118>)
 8100d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d88:	f003 0302 	and.w	r3, r3, #2
 8100d8c:	60fb      	str	r3, [r7, #12]
 8100d8e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_INP11
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = POT1_Pin;
 8100d90:	2302      	movs	r3, #2
 8100d92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8100d96:	2303      	movs	r3, #3
 8100d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d9c:	2300      	movs	r3, #0
 8100d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(POT1_GPIO_Port, &GPIO_InitStruct);
 8100da2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100da6:	4619      	mov	r1, r3
 8100da8:	480c      	ldr	r0, [pc, #48]	@ (8100ddc <HAL_ADC_MspInit+0x11c>)
 8100daa:	f003 fe69 	bl	8104a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT0_Pin;
 8100dae:	2302      	movs	r3, #2
 8100db0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8100db4:	2303      	movs	r3, #3
 8100db6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100dba:	2300      	movs	r3, #0
 8100dbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(POT0_GPIO_Port, &GPIO_InitStruct);
 8100dc0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100dc4:	4619      	mov	r1, r3
 8100dc6:	4806      	ldr	r0, [pc, #24]	@ (8100de0 <HAL_ADC_MspInit+0x120>)
 8100dc8:	f003 fe5a 	bl	8104a80 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8100dcc:	bf00      	nop
 8100dce:	37f0      	adds	r7, #240	@ 0xf0
 8100dd0:	46bd      	mov	sp, r7
 8100dd2:	bd80      	pop	{r7, pc}
 8100dd4:	40022000 	.word	0x40022000
 8100dd8:	58024400 	.word	0x58024400
 8100ddc:	58020800 	.word	0x58020800
 8100de0:	58020400 	.word	0x58020400

08100de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8100de4:	b580      	push	{r7, lr}
 8100de6:	b0ba      	sub	sp, #232	@ 0xe8
 8100de8:	af00      	add	r7, sp, #0
 8100dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100dec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100df0:	2200      	movs	r2, #0
 8100df2:	601a      	str	r2, [r3, #0]
 8100df4:	605a      	str	r2, [r3, #4]
 8100df6:	609a      	str	r2, [r3, #8]
 8100df8:	60da      	str	r2, [r3, #12]
 8100dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100dfc:	f107 0310 	add.w	r3, r7, #16
 8100e00:	22c0      	movs	r2, #192	@ 0xc0
 8100e02:	2100      	movs	r1, #0
 8100e04:	4618      	mov	r0, r3
 8100e06:	f00a ffd9 	bl	810bdbc <memset>
  if(hi2c->Instance==I2C1)
 8100e0a:	687b      	ldr	r3, [r7, #4]
 8100e0c:	681b      	ldr	r3, [r3, #0]
 8100e0e:	4a54      	ldr	r2, [pc, #336]	@ (8100f60 <HAL_I2C_MspInit+0x17c>)
 8100e10:	4293      	cmp	r3, r2
 8100e12:	f040 80a1 	bne.w	8100f58 <HAL_I2C_MspInit+0x174>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8100e16:	f04f 0208 	mov.w	r2, #8
 8100e1a:	f04f 0300 	mov.w	r3, #0
 8100e1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8100e22:	2300      	movs	r3, #0
 8100e24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100e28:	f107 0310 	add.w	r3, r7, #16
 8100e2c:	4618      	mov	r0, r3
 8100e2e:	f004 fdbb 	bl	81059a8 <HAL_RCCEx_PeriphCLKConfig>
 8100e32:	4603      	mov	r3, r0
 8100e34:	2b00      	cmp	r3, #0
 8100e36:	d001      	beq.n	8100e3c <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8100e38:	f7ff ff22 	bl	8100c80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100e3c:	4b49      	ldr	r3, [pc, #292]	@ (8100f64 <HAL_I2C_MspInit+0x180>)
 8100e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e42:	4a48      	ldr	r2, [pc, #288]	@ (8100f64 <HAL_I2C_MspInit+0x180>)
 8100e44:	f043 0302 	orr.w	r3, r3, #2
 8100e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100e4c:	4b45      	ldr	r3, [pc, #276]	@ (8100f64 <HAL_I2C_MspInit+0x180>)
 8100e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e52:	f003 0302 	and.w	r3, r3, #2
 8100e56:	60fb      	str	r3, [r7, #12]
 8100e58:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8100e5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8100e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100e62:	2312      	movs	r3, #18
 8100e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e68:	2300      	movs	r3, #0
 8100e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e6e:	2300      	movs	r3, #0
 8100e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8100e74:	2304      	movs	r3, #4
 8100e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100e7a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100e7e:	4619      	mov	r1, r3
 8100e80:	4839      	ldr	r0, [pc, #228]	@ (8100f68 <HAL_I2C_MspInit+0x184>)
 8100e82:	f003 fdfd 	bl	8104a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8100e86:	4b37      	ldr	r3, [pc, #220]	@ (8100f64 <HAL_I2C_MspInit+0x180>)
 8100e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100e8c:	4a35      	ldr	r2, [pc, #212]	@ (8100f64 <HAL_I2C_MspInit+0x180>)
 8100e8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8100e92:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100e96:	4b33      	ldr	r3, [pc, #204]	@ (8100f64 <HAL_I2C_MspInit+0x180>)
 8100e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8100ea0:	60bb      	str	r3, [r7, #8]
 8100ea2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream4;
 8100ea4:	4b31      	ldr	r3, [pc, #196]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100ea6:	4a32      	ldr	r2, [pc, #200]	@ (8100f70 <HAL_I2C_MspInit+0x18c>)
 8100ea8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8100eaa:	4b30      	ldr	r3, [pc, #192]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100eac:	2222      	movs	r2, #34	@ 0x22
 8100eae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8100eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100eb2:	2240      	movs	r2, #64	@ 0x40
 8100eb4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8100eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100eb8:	2200      	movs	r2, #0
 8100eba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8100ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8100ec2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8100ec4:	4b29      	ldr	r3, [pc, #164]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100ec6:	2200      	movs	r2, #0
 8100ec8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8100eca:	4b28      	ldr	r3, [pc, #160]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100ecc:	2200      	movs	r2, #0
 8100ece:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8100ed0:	4b26      	ldr	r3, [pc, #152]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100ed2:	2200      	movs	r2, #0
 8100ed4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8100ed6:	4b25      	ldr	r3, [pc, #148]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100ed8:	2200      	movs	r2, #0
 8100eda:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8100edc:	4b23      	ldr	r3, [pc, #140]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100ede:	2200      	movs	r2, #0
 8100ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8100ee2:	4822      	ldr	r0, [pc, #136]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100ee4:	f001 fec6 	bl	8102c74 <HAL_DMA_Init>
 8100ee8:	4603      	mov	r3, r0
 8100eea:	2b00      	cmp	r3, #0
 8100eec:	d001      	beq.n	8100ef2 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8100eee:	f7ff fec7 	bl	8100c80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8100ef2:	687b      	ldr	r3, [r7, #4]
 8100ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100ef6:	639a      	str	r2, [r3, #56]	@ 0x38
 8100ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8100f6c <HAL_I2C_MspInit+0x188>)
 8100efa:	687b      	ldr	r3, [r7, #4]
 8100efc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8100efe:	4b1d      	ldr	r3, [pc, #116]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f00:	4a1d      	ldr	r2, [pc, #116]	@ (8100f78 <HAL_I2C_MspInit+0x194>)
 8100f02:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8100f04:	4b1b      	ldr	r3, [pc, #108]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f06:	2221      	movs	r2, #33	@ 0x21
 8100f08:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8100f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f0c:	2200      	movs	r2, #0
 8100f0e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8100f10:	4b18      	ldr	r3, [pc, #96]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f12:	2200      	movs	r2, #0
 8100f14:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8100f16:	4b17      	ldr	r3, [pc, #92]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8100f1c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8100f1e:	4b15      	ldr	r3, [pc, #84]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f20:	2200      	movs	r2, #0
 8100f22:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8100f24:	4b13      	ldr	r3, [pc, #76]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f26:	2200      	movs	r2, #0
 8100f28:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8100f2a:	4b12      	ldr	r3, [pc, #72]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f2c:	2200      	movs	r2, #0
 8100f2e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8100f30:	4b10      	ldr	r3, [pc, #64]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f32:	2200      	movs	r2, #0
 8100f34:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8100f36:	4b0f      	ldr	r3, [pc, #60]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f38:	2200      	movs	r2, #0
 8100f3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8100f3c:	480d      	ldr	r0, [pc, #52]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f3e:	f001 fe99 	bl	8102c74 <HAL_DMA_Init>
 8100f42:	4603      	mov	r3, r0
 8100f44:	2b00      	cmp	r3, #0
 8100f46:	d001      	beq.n	8100f4c <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8100f48:	f7ff fe9a 	bl	8100c80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8100f4c:	687b      	ldr	r3, [r7, #4]
 8100f4e:	4a09      	ldr	r2, [pc, #36]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8100f52:	4a08      	ldr	r2, [pc, #32]	@ (8100f74 <HAL_I2C_MspInit+0x190>)
 8100f54:	687b      	ldr	r3, [r7, #4]
 8100f56:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8100f58:	bf00      	nop
 8100f5a:	37e8      	adds	r7, #232	@ 0xe8
 8100f5c:	46bd      	mov	sp, r7
 8100f5e:	bd80      	pop	{r7, pc}
 8100f60:	40005400 	.word	0x40005400
 8100f64:	58024400 	.word	0x58024400
 8100f68:	58020400 	.word	0x58020400
 8100f6c:	100000e4 	.word	0x100000e4
 8100f70:	40020070 	.word	0x40020070
 8100f74:	1000015c 	.word	0x1000015c
 8100f78:	40020088 	.word	0x40020088

08100f7c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8100f7c:	b580      	push	{r7, lr}
 8100f7e:	b0bc      	sub	sp, #240	@ 0xf0
 8100f80:	af00      	add	r7, sp, #0
 8100f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100f88:	2200      	movs	r2, #0
 8100f8a:	601a      	str	r2, [r3, #0]
 8100f8c:	605a      	str	r2, [r3, #4]
 8100f8e:	609a      	str	r2, [r3, #8]
 8100f90:	60da      	str	r2, [r3, #12]
 8100f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f94:	f107 0318 	add.w	r3, r7, #24
 8100f98:	22c0      	movs	r2, #192	@ 0xc0
 8100f9a:	2100      	movs	r1, #0
 8100f9c:	4618      	mov	r0, r3
 8100f9e:	f00a ff0d 	bl	810bdbc <memset>
  if(hi2s->Instance==SPI2)
 8100fa2:	687b      	ldr	r3, [r7, #4]
 8100fa4:	681b      	ldr	r3, [r3, #0]
 8100fa6:	4a55      	ldr	r2, [pc, #340]	@ (81010fc <HAL_I2S_MspInit+0x180>)
 8100fa8:	4293      	cmp	r3, r2
 8100faa:	f040 80a2 	bne.w	81010f2 <HAL_I2S_MspInit+0x176>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8100fae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8100fb2:	f04f 0300 	mov.w	r3, #0
 8100fb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8100fba:	2300      	movs	r3, #0
 8100fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100fbe:	f107 0318 	add.w	r3, r7, #24
 8100fc2:	4618      	mov	r0, r3
 8100fc4:	f004 fcf0 	bl	81059a8 <HAL_RCCEx_PeriphCLKConfig>
 8100fc8:	4603      	mov	r3, r0
 8100fca:	2b00      	cmp	r3, #0
 8100fcc:	d001      	beq.n	8100fd2 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8100fce:	f7ff fe57 	bl	8100c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8100fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8101100 <HAL_I2S_MspInit+0x184>)
 8100fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100fd8:	4a49      	ldr	r2, [pc, #292]	@ (8101100 <HAL_I2S_MspInit+0x184>)
 8100fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100fde:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100fe2:	4b47      	ldr	r3, [pc, #284]	@ (8101100 <HAL_I2S_MspInit+0x184>)
 8100fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100fec:	617b      	str	r3, [r7, #20]
 8100fee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100ff0:	4b43      	ldr	r3, [pc, #268]	@ (8101100 <HAL_I2S_MspInit+0x184>)
 8100ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ff6:	4a42      	ldr	r2, [pc, #264]	@ (8101100 <HAL_I2S_MspInit+0x184>)
 8100ff8:	f043 0302 	orr.w	r3, r3, #2
 8100ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101000:	4b3f      	ldr	r3, [pc, #252]	@ (8101100 <HAL_I2S_MspInit+0x184>)
 8101002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101006:	f003 0302 	and.w	r3, r3, #2
 810100a:	613b      	str	r3, [r7, #16]
 810100c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810100e:	4b3c      	ldr	r3, [pc, #240]	@ (8101100 <HAL_I2S_MspInit+0x184>)
 8101010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101014:	4a3a      	ldr	r2, [pc, #232]	@ (8101100 <HAL_I2S_MspInit+0x184>)
 8101016:	f043 0304 	orr.w	r3, r3, #4
 810101a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810101e:	4b38      	ldr	r3, [pc, #224]	@ (8101100 <HAL_I2S_MspInit+0x184>)
 8101020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101024:	f003 0304 	and.w	r3, r3, #4
 8101028:	60fb      	str	r3, [r7, #12]
 810102a:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SDO
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 810102c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8101030:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101034:	2302      	movs	r3, #2
 8101036:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810103a:	2300      	movs	r3, #0
 810103c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101040:	2300      	movs	r3, #0
 8101042:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101046:	2305      	movs	r3, #5
 8101048:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810104c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101050:	4619      	mov	r1, r3
 8101052:	482c      	ldr	r0, [pc, #176]	@ (8101104 <HAL_I2S_MspInit+0x188>)
 8101054:	f003 fd14 	bl	8104a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101058:	2340      	movs	r3, #64	@ 0x40
 810105a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810105e:	2302      	movs	r3, #2
 8101060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101064:	2300      	movs	r3, #0
 8101066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810106a:	2300      	movs	r3, #0
 810106c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101070:	2305      	movs	r3, #5
 8101072:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101076:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810107a:	4619      	mov	r1, r3
 810107c:	4822      	ldr	r0, [pc, #136]	@ (8101108 <HAL_I2S_MspInit+0x18c>)
 810107e:	f003 fcff 	bl	8104a80 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream3;
 8101082:	4b22      	ldr	r3, [pc, #136]	@ (810110c <HAL_I2S_MspInit+0x190>)
 8101084:	4a22      	ldr	r2, [pc, #136]	@ (8101110 <HAL_I2S_MspInit+0x194>)
 8101086:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8101088:	4b20      	ldr	r3, [pc, #128]	@ (810110c <HAL_I2S_MspInit+0x190>)
 810108a:	2228      	movs	r2, #40	@ 0x28
 810108c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810108e:	4b1f      	ldr	r3, [pc, #124]	@ (810110c <HAL_I2S_MspInit+0x190>)
 8101090:	2240      	movs	r2, #64	@ 0x40
 8101092:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101094:	4b1d      	ldr	r3, [pc, #116]	@ (810110c <HAL_I2S_MspInit+0x190>)
 8101096:	2200      	movs	r2, #0
 8101098:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 810109a:	4b1c      	ldr	r3, [pc, #112]	@ (810110c <HAL_I2S_MspInit+0x190>)
 810109c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81010a0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 81010a2:	4b1a      	ldr	r3, [pc, #104]	@ (810110c <HAL_I2S_MspInit+0x190>)
 81010a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81010a8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 81010aa:	4b18      	ldr	r3, [pc, #96]	@ (810110c <HAL_I2S_MspInit+0x190>)
 81010ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81010b0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 81010b2:	4b16      	ldr	r3, [pc, #88]	@ (810110c <HAL_I2S_MspInit+0x190>)
 81010b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81010b8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 81010ba:	4b14      	ldr	r3, [pc, #80]	@ (810110c <HAL_I2S_MspInit+0x190>)
 81010bc:	2200      	movs	r2, #0
 81010be:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81010c0:	4b12      	ldr	r3, [pc, #72]	@ (810110c <HAL_I2S_MspInit+0x190>)
 81010c2:	2200      	movs	r2, #0
 81010c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 81010c6:	4811      	ldr	r0, [pc, #68]	@ (810110c <HAL_I2S_MspInit+0x190>)
 81010c8:	f001 fdd4 	bl	8102c74 <HAL_DMA_Init>
 81010cc:	4603      	mov	r3, r0
 81010ce:	2b00      	cmp	r3, #0
 81010d0:	d001      	beq.n	81010d6 <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 81010d2:	f7ff fdd5 	bl	8100c80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 81010d6:	687b      	ldr	r3, [r7, #4]
 81010d8:	4a0c      	ldr	r2, [pc, #48]	@ (810110c <HAL_I2S_MspInit+0x190>)
 81010da:	645a      	str	r2, [r3, #68]	@ 0x44
 81010dc:	4a0b      	ldr	r2, [pc, #44]	@ (810110c <HAL_I2S_MspInit+0x190>)
 81010de:	687b      	ldr	r3, [r7, #4]
 81010e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 81010e2:	2200      	movs	r2, #0
 81010e4:	2100      	movs	r1, #0
 81010e6:	2024      	movs	r0, #36	@ 0x24
 81010e8:	f001 fd7b 	bl	8102be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 81010ec:	2024      	movs	r0, #36	@ 0x24
 81010ee:	f001 fd92 	bl	8102c16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 81010f2:	bf00      	nop
 81010f4:	37f0      	adds	r7, #240	@ 0xf0
 81010f6:	46bd      	mov	sp, r7
 81010f8:	bd80      	pop	{r7, pc}
 81010fa:	bf00      	nop
 81010fc:	40003800 	.word	0x40003800
 8101100:	58024400 	.word	0x58024400
 8101104:	58020400 	.word	0x58020400
 8101108:	58020800 	.word	0x58020800
 810110c:	10000228 	.word	0x10000228
 8101110:	40020058 	.word	0x40020058

08101114 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8101114:	b580      	push	{r7, lr}
 8101116:	b0bc      	sub	sp, #240	@ 0xf0
 8101118:	af00      	add	r7, sp, #0
 810111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810111c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101120:	2200      	movs	r2, #0
 8101122:	601a      	str	r2, [r3, #0]
 8101124:	605a      	str	r2, [r3, #4]
 8101126:	609a      	str	r2, [r3, #8]
 8101128:	60da      	str	r2, [r3, #12]
 810112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810112c:	f107 0318 	add.w	r3, r7, #24
 8101130:	22c0      	movs	r2, #192	@ 0xc0
 8101132:	2100      	movs	r1, #0
 8101134:	4618      	mov	r0, r3
 8101136:	f00a fe41 	bl	810bdbc <memset>
  if(hsd->Instance==SDMMC1)
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	681b      	ldr	r3, [r3, #0]
 810113e:	4a3c      	ldr	r2, [pc, #240]	@ (8101230 <HAL_SD_MspInit+0x11c>)
 8101140:	4293      	cmp	r3, r2
 8101142:	d171      	bne.n	8101228 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101144:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8101148:	f04f 0300 	mov.w	r3, #0
 810114c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101150:	2300      	movs	r3, #0
 8101152:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101154:	f107 0318 	add.w	r3, r7, #24
 8101158:	4618      	mov	r0, r3
 810115a:	f004 fc25 	bl	81059a8 <HAL_RCCEx_PeriphCLKConfig>
 810115e:	4603      	mov	r3, r0
 8101160:	2b00      	cmp	r3, #0
 8101162:	d001      	beq.n	8101168 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8101164:	f7ff fd8c 	bl	8100c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101168:	4b32      	ldr	r3, [pc, #200]	@ (8101234 <HAL_SD_MspInit+0x120>)
 810116a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810116e:	4a31      	ldr	r2, [pc, #196]	@ (8101234 <HAL_SD_MspInit+0x120>)
 8101170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101174:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101178:	4b2e      	ldr	r3, [pc, #184]	@ (8101234 <HAL_SD_MspInit+0x120>)
 810117a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810117e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101182:	617b      	str	r3, [r7, #20]
 8101184:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101186:	4b2b      	ldr	r3, [pc, #172]	@ (8101234 <HAL_SD_MspInit+0x120>)
 8101188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810118c:	4a29      	ldr	r2, [pc, #164]	@ (8101234 <HAL_SD_MspInit+0x120>)
 810118e:	f043 0304 	orr.w	r3, r3, #4
 8101192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101196:	4b27      	ldr	r3, [pc, #156]	@ (8101234 <HAL_SD_MspInit+0x120>)
 8101198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810119c:	f003 0304 	and.w	r3, r3, #4
 81011a0:	613b      	str	r3, [r7, #16]
 81011a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81011a4:	4b23      	ldr	r3, [pc, #140]	@ (8101234 <HAL_SD_MspInit+0x120>)
 81011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011aa:	4a22      	ldr	r2, [pc, #136]	@ (8101234 <HAL_SD_MspInit+0x120>)
 81011ac:	f043 0308 	orr.w	r3, r3, #8
 81011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011b4:	4b1f      	ldr	r3, [pc, #124]	@ (8101234 <HAL_SD_MspInit+0x120>)
 81011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011ba:	f003 0308 	and.w	r3, r3, #8
 81011be:	60fb      	str	r3, [r7, #12]
 81011c0:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 81011c2:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 81011c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011ca:	2302      	movs	r3, #2
 81011cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011d0:	2300      	movs	r3, #0
 81011d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011d6:	2303      	movs	r3, #3
 81011d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81011dc:	230c      	movs	r3, #12
 81011de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81011e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81011e6:	4619      	mov	r1, r3
 81011e8:	4813      	ldr	r0, [pc, #76]	@ (8101238 <HAL_SD_MspInit+0x124>)
 81011ea:	f003 fc49 	bl	8104a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 81011ee:	2304      	movs	r3, #4
 81011f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011f4:	2302      	movs	r3, #2
 81011f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011fa:	2300      	movs	r3, #0
 81011fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101200:	2303      	movs	r3, #3
 8101202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101206:	230c      	movs	r3, #12
 8101208:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810120c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101210:	4619      	mov	r1, r3
 8101212:	480a      	ldr	r0, [pc, #40]	@ (810123c <HAL_SD_MspInit+0x128>)
 8101214:	f003 fc34 	bl	8104a80 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8101218:	2200      	movs	r2, #0
 810121a:	2100      	movs	r1, #0
 810121c:	2031      	movs	r0, #49	@ 0x31
 810121e:	f001 fce0 	bl	8102be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8101222:	2031      	movs	r0, #49	@ 0x31
 8101224:	f001 fcf7 	bl	8102c16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8101228:	bf00      	nop
 810122a:	37f0      	adds	r7, #240	@ 0xf0
 810122c:	46bd      	mov	sp, r7
 810122e:	bd80      	pop	{r7, pc}
 8101230:	52007000 	.word	0x52007000
 8101234:	58024400 	.word	0x58024400
 8101238:	58020800 	.word	0x58020800
 810123c:	58020c00 	.word	0x58020c00

08101240 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101240:	b580      	push	{r7, lr}
 8101242:	b0bc      	sub	sp, #240	@ 0xf0
 8101244:	af00      	add	r7, sp, #0
 8101246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101248:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810124c:	2200      	movs	r2, #0
 810124e:	601a      	str	r2, [r3, #0]
 8101250:	605a      	str	r2, [r3, #4]
 8101252:	609a      	str	r2, [r3, #8]
 8101254:	60da      	str	r2, [r3, #12]
 8101256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101258:	f107 0318 	add.w	r3, r7, #24
 810125c:	22c0      	movs	r2, #192	@ 0xc0
 810125e:	2100      	movs	r1, #0
 8101260:	4618      	mov	r0, r3
 8101262:	f00a fdab 	bl	810bdbc <memset>
  if(hspi->Instance==SPI1)
 8101266:	687b      	ldr	r3, [r7, #4]
 8101268:	681b      	ldr	r3, [r3, #0]
 810126a:	4a7d      	ldr	r2, [pc, #500]	@ (8101460 <HAL_SPI_MspInit+0x220>)
 810126c:	4293      	cmp	r3, r2
 810126e:	f040 80f2 	bne.w	8101456 <HAL_SPI_MspInit+0x216>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8101272:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8101276:	f04f 0300 	mov.w	r3, #0
 810127a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 810127e:	2300      	movs	r3, #0
 8101280:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101282:	f107 0318 	add.w	r3, r7, #24
 8101286:	4618      	mov	r0, r3
 8101288:	f004 fb8e 	bl	81059a8 <HAL_RCCEx_PeriphCLKConfig>
 810128c:	4603      	mov	r3, r0
 810128e:	2b00      	cmp	r3, #0
 8101290:	d001      	beq.n	8101296 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8101292:	f7ff fcf5 	bl	8100c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101296:	4b73      	ldr	r3, [pc, #460]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 8101298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810129c:	4a71      	ldr	r2, [pc, #452]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 810129e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81012a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81012a6:	4b6f      	ldr	r3, [pc, #444]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 81012a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81012ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81012b0:	617b      	str	r3, [r7, #20]
 81012b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81012b4:	4b6b      	ldr	r3, [pc, #428]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 81012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012ba:	4a6a      	ldr	r2, [pc, #424]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 81012bc:	f043 0301 	orr.w	r3, r3, #1
 81012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81012c4:	4b67      	ldr	r3, [pc, #412]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 81012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012ca:	f003 0301 	and.w	r3, r3, #1
 81012ce:	613b      	str	r3, [r7, #16]
 81012d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 81012d2:	4b64      	ldr	r3, [pc, #400]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 81012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012d8:	4a62      	ldr	r2, [pc, #392]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 81012da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81012de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81012e2:	4b60      	ldr	r3, [pc, #384]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 81012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81012ec:	60fb      	str	r3, [r7, #12]
 81012ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81012f0:	4b5c      	ldr	r3, [pc, #368]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 81012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012f6:	4a5b      	ldr	r2, [pc, #364]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 81012f8:	f043 0302 	orr.w	r3, r3, #2
 81012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101300:	4b58      	ldr	r3, [pc, #352]	@ (8101464 <HAL_SPI_MspInit+0x224>)
 8101302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101306:	f003 0302 	and.w	r3, r3, #2
 810130a:	60bb      	str	r3, [r7, #8]
 810130c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PG9     ------> SPI1_MISO
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 810130e:	2310      	movs	r3, #16
 8101310:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101314:	2302      	movs	r3, #2
 8101316:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810131a:	2300      	movs	r3, #0
 810131c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101320:	2300      	movs	r3, #0
 8101322:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101326:	2305      	movs	r3, #5
 8101328:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810132c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101330:	4619      	mov	r1, r3
 8101332:	484d      	ldr	r0, [pc, #308]	@ (8101468 <HAL_SPI_MspInit+0x228>)
 8101334:	f003 fba4 	bl	8104a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8101338:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810133c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101340:	2302      	movs	r3, #2
 8101342:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101346:	2300      	movs	r3, #0
 8101348:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810134c:	2300      	movs	r3, #0
 810134e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101352:	2305      	movs	r3, #5
 8101354:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101358:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810135c:	4619      	mov	r1, r3
 810135e:	4843      	ldr	r0, [pc, #268]	@ (810146c <HAL_SPI_MspInit+0x22c>)
 8101360:	f003 fb8e 	bl	8104a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8101364:	2328      	movs	r3, #40	@ 0x28
 8101366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810136a:	2302      	movs	r3, #2
 810136c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101370:	2300      	movs	r3, #0
 8101372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101376:	2300      	movs	r3, #0
 8101378:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 810137c:	2305      	movs	r3, #5
 810137e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101382:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101386:	4619      	mov	r1, r3
 8101388:	4839      	ldr	r0, [pc, #228]	@ (8101470 <HAL_SPI_MspInit+0x230>)
 810138a:	f003 fb79 	bl	8104a80 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream2;
 810138e:	4b39      	ldr	r3, [pc, #228]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 8101390:	4a39      	ldr	r2, [pc, #228]	@ (8101478 <HAL_SPI_MspInit+0x238>)
 8101392:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101394:	4b37      	ldr	r3, [pc, #220]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 8101396:	2225      	movs	r2, #37	@ 0x25
 8101398:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810139a:	4b36      	ldr	r3, [pc, #216]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 810139c:	2200      	movs	r2, #0
 810139e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 81013a0:	4b34      	ldr	r3, [pc, #208]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 81013a2:	2200      	movs	r2, #0
 81013a4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 81013a6:	4b33      	ldr	r3, [pc, #204]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 81013a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81013ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81013ae:	4b31      	ldr	r3, [pc, #196]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 81013b0:	2200      	movs	r2, #0
 81013b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81013b4:	4b2f      	ldr	r3, [pc, #188]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 81013b6:	2200      	movs	r2, #0
 81013b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 81013ba:	4b2e      	ldr	r3, [pc, #184]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 81013bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81013c0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 81013c2:	4b2c      	ldr	r3, [pc, #176]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 81013c4:	2200      	movs	r2, #0
 81013c6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81013c8:	4b2a      	ldr	r3, [pc, #168]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 81013ca:	2200      	movs	r2, #0
 81013cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 81013ce:	4829      	ldr	r0, [pc, #164]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 81013d0:	f001 fc50 	bl	8102c74 <HAL_DMA_Init>
 81013d4:	4603      	mov	r3, r0
 81013d6:	2b00      	cmp	r3, #0
 81013d8:	d001      	beq.n	81013de <HAL_SPI_MspInit+0x19e>
    {
      Error_Handler();
 81013da:	f7ff fc51 	bl	8100c80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 81013de:	687b      	ldr	r3, [r7, #4]
 81013e0:	4a24      	ldr	r2, [pc, #144]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 81013e2:	67da      	str	r2, [r3, #124]	@ 0x7c
 81013e4:	4a23      	ldr	r2, [pc, #140]	@ (8101474 <HAL_SPI_MspInit+0x234>)
 81013e6:	687b      	ldr	r3, [r7, #4]
 81013e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream6;
 81013ea:	4b24      	ldr	r3, [pc, #144]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 81013ec:	4a24      	ldr	r2, [pc, #144]	@ (8101480 <HAL_SPI_MspInit+0x240>)
 81013ee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 81013f0:	4b22      	ldr	r3, [pc, #136]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 81013f2:	2226      	movs	r2, #38	@ 0x26
 81013f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81013f6:	4b21      	ldr	r3, [pc, #132]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 81013f8:	2240      	movs	r2, #64	@ 0x40
 81013fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81013fc:	4b1f      	ldr	r3, [pc, #124]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 81013fe:	2200      	movs	r2, #0
 8101400:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101402:	4b1e      	ldr	r3, [pc, #120]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 8101404:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8101408:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810140a:	4b1c      	ldr	r3, [pc, #112]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 810140c:	2200      	movs	r2, #0
 810140e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101410:	4b1a      	ldr	r3, [pc, #104]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 8101412:	2200      	movs	r2, #0
 8101414:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8101416:	4b19      	ldr	r3, [pc, #100]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 8101418:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810141c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 810141e:	4b17      	ldr	r3, [pc, #92]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 8101420:	2200      	movs	r2, #0
 8101422:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101424:	4b15      	ldr	r3, [pc, #84]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 8101426:	2200      	movs	r2, #0
 8101428:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 810142a:	4814      	ldr	r0, [pc, #80]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 810142c:	f001 fc22 	bl	8102c74 <HAL_DMA_Init>
 8101430:	4603      	mov	r3, r0
 8101432:	2b00      	cmp	r3, #0
 8101434:	d001      	beq.n	810143a <HAL_SPI_MspInit+0x1fa>
    {
      Error_Handler();
 8101436:	f7ff fc23 	bl	8100c80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 810143a:	687b      	ldr	r3, [r7, #4]
 810143c:	4a0f      	ldr	r2, [pc, #60]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 810143e:	679a      	str	r2, [r3, #120]	@ 0x78
 8101440:	4a0e      	ldr	r2, [pc, #56]	@ (810147c <HAL_SPI_MspInit+0x23c>)
 8101442:	687b      	ldr	r3, [r7, #4]
 8101444:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8101446:	2200      	movs	r2, #0
 8101448:	2100      	movs	r1, #0
 810144a:	2023      	movs	r0, #35	@ 0x23
 810144c:	f001 fbc9 	bl	8102be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101450:	2023      	movs	r0, #35	@ 0x23
 8101452:	f001 fbe0 	bl	8102c16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8101456:	bf00      	nop
 8101458:	37f0      	adds	r7, #240	@ 0xf0
 810145a:	46bd      	mov	sp, r7
 810145c:	bd80      	pop	{r7, pc}
 810145e:	bf00      	nop
 8101460:	40013000 	.word	0x40013000
 8101464:	58024400 	.word	0x58024400
 8101468:	58020000 	.word	0x58020000
 810146c:	58021800 	.word	0x58021800
 8101470:	58020400 	.word	0x58020400
 8101474:	100003a4 	.word	0x100003a4
 8101478:	40020040 	.word	0x40020040
 810147c:	1000041c 	.word	0x1000041c
 8101480:	400200a0 	.word	0x400200a0

08101484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101484:	b580      	push	{r7, lr}
 8101486:	b0ba      	sub	sp, #232	@ 0xe8
 8101488:	af00      	add	r7, sp, #0
 810148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810148c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101490:	2200      	movs	r2, #0
 8101492:	601a      	str	r2, [r3, #0]
 8101494:	605a      	str	r2, [r3, #4]
 8101496:	609a      	str	r2, [r3, #8]
 8101498:	60da      	str	r2, [r3, #12]
 810149a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810149c:	f107 0310 	add.w	r3, r7, #16
 81014a0:	22c0      	movs	r2, #192	@ 0xc0
 81014a2:	2100      	movs	r1, #0
 81014a4:	4618      	mov	r0, r3
 81014a6:	f00a fc89 	bl	810bdbc <memset>
  if(huart->Instance==USART1)
 81014aa:	687b      	ldr	r3, [r7, #4]
 81014ac:	681b      	ldr	r3, [r3, #0]
 81014ae:	4a54      	ldr	r2, [pc, #336]	@ (8101600 <HAL_UART_MspInit+0x17c>)
 81014b0:	4293      	cmp	r3, r2
 81014b2:	f040 80a1 	bne.w	81015f8 <HAL_UART_MspInit+0x174>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 81014b6:	f04f 0201 	mov.w	r2, #1
 81014ba:	f04f 0300 	mov.w	r3, #0
 81014be:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 81014c2:	2300      	movs	r3, #0
 81014c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81014c8:	f107 0310 	add.w	r3, r7, #16
 81014cc:	4618      	mov	r0, r3
 81014ce:	f004 fa6b 	bl	81059a8 <HAL_RCCEx_PeriphCLKConfig>
 81014d2:	4603      	mov	r3, r0
 81014d4:	2b00      	cmp	r3, #0
 81014d6:	d001      	beq.n	81014dc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 81014d8:	f7ff fbd2 	bl	8100c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 81014dc:	4b49      	ldr	r3, [pc, #292]	@ (8101604 <HAL_UART_MspInit+0x180>)
 81014de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81014e2:	4a48      	ldr	r2, [pc, #288]	@ (8101604 <HAL_UART_MspInit+0x180>)
 81014e4:	f043 0310 	orr.w	r3, r3, #16
 81014e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81014ec:	4b45      	ldr	r3, [pc, #276]	@ (8101604 <HAL_UART_MspInit+0x180>)
 81014ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81014f2:	f003 0310 	and.w	r3, r3, #16
 81014f6:	60fb      	str	r3, [r7, #12]
 81014f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014fa:	4b42      	ldr	r3, [pc, #264]	@ (8101604 <HAL_UART_MspInit+0x180>)
 81014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101500:	4a40      	ldr	r2, [pc, #256]	@ (8101604 <HAL_UART_MspInit+0x180>)
 8101502:	f043 0302 	orr.w	r3, r3, #2
 8101506:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810150a:	4b3e      	ldr	r3, [pc, #248]	@ (8101604 <HAL_UART_MspInit+0x180>)
 810150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101510:	f003 0302 	and.w	r3, r3, #2
 8101514:	60bb      	str	r3, [r7, #8]
 8101516:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8101518:	23c0      	movs	r3, #192	@ 0xc0
 810151a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810151e:	2302      	movs	r3, #2
 8101520:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101524:	2300      	movs	r3, #0
 8101526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810152a:	2300      	movs	r3, #0
 810152c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8101530:	2307      	movs	r3, #7
 8101532:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101536:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810153a:	4619      	mov	r1, r3
 810153c:	4832      	ldr	r0, [pc, #200]	@ (8101608 <HAL_UART_MspInit+0x184>)
 810153e:	f003 fa9f 	bl	8104a80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8101542:	4b32      	ldr	r3, [pc, #200]	@ (810160c <HAL_UART_MspInit+0x188>)
 8101544:	4a32      	ldr	r2, [pc, #200]	@ (8101610 <HAL_UART_MspInit+0x18c>)
 8101546:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8101548:	4b30      	ldr	r3, [pc, #192]	@ (810160c <HAL_UART_MspInit+0x188>)
 810154a:	2229      	movs	r2, #41	@ 0x29
 810154c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810154e:	4b2f      	ldr	r3, [pc, #188]	@ (810160c <HAL_UART_MspInit+0x188>)
 8101550:	2200      	movs	r2, #0
 8101552:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101554:	4b2d      	ldr	r3, [pc, #180]	@ (810160c <HAL_UART_MspInit+0x188>)
 8101556:	2200      	movs	r2, #0
 8101558:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810155a:	4b2c      	ldr	r3, [pc, #176]	@ (810160c <HAL_UART_MspInit+0x188>)
 810155c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8101560:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101562:	4b2a      	ldr	r3, [pc, #168]	@ (810160c <HAL_UART_MspInit+0x188>)
 8101564:	2200      	movs	r2, #0
 8101566:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101568:	4b28      	ldr	r3, [pc, #160]	@ (810160c <HAL_UART_MspInit+0x188>)
 810156a:	2200      	movs	r2, #0
 810156c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 810156e:	4b27      	ldr	r3, [pc, #156]	@ (810160c <HAL_UART_MspInit+0x188>)
 8101570:	2200      	movs	r2, #0
 8101572:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8101574:	4b25      	ldr	r3, [pc, #148]	@ (810160c <HAL_UART_MspInit+0x188>)
 8101576:	2200      	movs	r2, #0
 8101578:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810157a:	4b24      	ldr	r3, [pc, #144]	@ (810160c <HAL_UART_MspInit+0x188>)
 810157c:	2200      	movs	r2, #0
 810157e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8101580:	4822      	ldr	r0, [pc, #136]	@ (810160c <HAL_UART_MspInit+0x188>)
 8101582:	f001 fb77 	bl	8102c74 <HAL_DMA_Init>
 8101586:	4603      	mov	r3, r0
 8101588:	2b00      	cmp	r3, #0
 810158a:	d001      	beq.n	8101590 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 810158c:	f7ff fb78 	bl	8100c80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8101590:	687b      	ldr	r3, [r7, #4]
 8101592:	4a1e      	ldr	r2, [pc, #120]	@ (810160c <HAL_UART_MspInit+0x188>)
 8101594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8101598:	4a1c      	ldr	r2, [pc, #112]	@ (810160c <HAL_UART_MspInit+0x188>)
 810159a:	687b      	ldr	r3, [r7, #4]
 810159c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 810159e:	4b1d      	ldr	r3, [pc, #116]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015a0:	4a1d      	ldr	r2, [pc, #116]	@ (8101618 <HAL_UART_MspInit+0x194>)
 81015a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 81015a4:	4b1b      	ldr	r3, [pc, #108]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015a6:	222a      	movs	r2, #42	@ 0x2a
 81015a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81015aa:	4b1a      	ldr	r3, [pc, #104]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015ac:	2240      	movs	r2, #64	@ 0x40
 81015ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81015b0:	4b18      	ldr	r3, [pc, #96]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015b2:	2200      	movs	r2, #0
 81015b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81015b6:	4b17      	ldr	r3, [pc, #92]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81015bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81015be:	4b15      	ldr	r3, [pc, #84]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015c0:	2200      	movs	r2, #0
 81015c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81015c4:	4b13      	ldr	r3, [pc, #76]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015c6:	2200      	movs	r2, #0
 81015c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 81015ca:	4b12      	ldr	r3, [pc, #72]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015cc:	2200      	movs	r2, #0
 81015ce:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 81015d0:	4b10      	ldr	r3, [pc, #64]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015d2:	2200      	movs	r2, #0
 81015d4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015d8:	2200      	movs	r2, #0
 81015da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 81015dc:	480d      	ldr	r0, [pc, #52]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015de:	f001 fb49 	bl	8102c74 <HAL_DMA_Init>
 81015e2:	4603      	mov	r3, r0
 81015e4:	2b00      	cmp	r3, #0
 81015e6:	d001      	beq.n	81015ec <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 81015e8:	f7ff fb4a 	bl	8100c80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 81015ec:	687b      	ldr	r3, [r7, #4]
 81015ee:	4a09      	ldr	r2, [pc, #36]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015f0:	67da      	str	r2, [r3, #124]	@ 0x7c
 81015f2:	4a08      	ldr	r2, [pc, #32]	@ (8101614 <HAL_UART_MspInit+0x190>)
 81015f4:	687b      	ldr	r3, [r7, #4]
 81015f6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART1_MspInit 1 */

  }

}
 81015f8:	bf00      	nop
 81015fa:	37e8      	adds	r7, #232	@ 0xe8
 81015fc:	46bd      	mov	sp, r7
 81015fe:	bd80      	pop	{r7, pc}
 8101600:	40011000 	.word	0x40011000
 8101604:	58024400 	.word	0x58024400
 8101608:	58020400 	.word	0x58020400
 810160c:	10000528 	.word	0x10000528
 8101610:	40020010 	.word	0x40020010
 8101614:	100005a0 	.word	0x100005a0
 8101618:	40020028 	.word	0x40020028

0810161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810161c:	b480      	push	{r7}
 810161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101620:	bf00      	nop
 8101622:	e7fd      	b.n	8101620 <NMI_Handler+0x4>

08101624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101624:	b480      	push	{r7}
 8101626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101628:	bf00      	nop
 810162a:	e7fd      	b.n	8101628 <HardFault_Handler+0x4>

0810162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810162c:	b480      	push	{r7}
 810162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101630:	bf00      	nop
 8101632:	e7fd      	b.n	8101630 <MemManage_Handler+0x4>

08101634 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101634:	b480      	push	{r7}
 8101636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101638:	bf00      	nop
 810163a:	e7fd      	b.n	8101638 <BusFault_Handler+0x4>

0810163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810163c:	b480      	push	{r7}
 810163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101640:	bf00      	nop
 8101642:	e7fd      	b.n	8101640 <UsageFault_Handler+0x4>

08101644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101644:	b480      	push	{r7}
 8101646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101648:	bf00      	nop
 810164a:	46bd      	mov	sp, r7
 810164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101650:	4770      	bx	lr

08101652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101652:	b480      	push	{r7}
 8101654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101656:	bf00      	nop
 8101658:	46bd      	mov	sp, r7
 810165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810165e:	4770      	bx	lr

08101660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101660:	b480      	push	{r7}
 8101662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101664:	bf00      	nop
 8101666:	46bd      	mov	sp, r7
 8101668:	f85d 7b04 	ldr.w	r7, [sp], #4
 810166c:	4770      	bx	lr

0810166e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810166e:	b580      	push	{r7, lr}
 8101670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101672:	f000 f927 	bl	81018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101676:	bf00      	nop
 8101678:	bd80      	pop	{r7, pc}
	...

0810167c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 810167c:	b580      	push	{r7, lr}
 810167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8101680:	4802      	ldr	r0, [pc, #8]	@ (810168c <DMA1_Stream0_IRQHandler+0x10>)
 8101682:	f002 f897 	bl	81037b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101686:	bf00      	nop
 8101688:	bd80      	pop	{r7, pc}
 810168a:	bf00      	nop
 810168c:	10000528 	.word	0x10000528

08101690 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101690:	b580      	push	{r7, lr}
 8101692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8101694:	4802      	ldr	r0, [pc, #8]	@ (81016a0 <DMA1_Stream1_IRQHandler+0x10>)
 8101696:	f002 f88d 	bl	81037b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 810169a:	bf00      	nop
 810169c:	bd80      	pop	{r7, pc}
 810169e:	bf00      	nop
 81016a0:	100005a0 	.word	0x100005a0

081016a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 81016a4:	b580      	push	{r7, lr}
 81016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 81016a8:	4802      	ldr	r0, [pc, #8]	@ (81016b4 <DMA1_Stream2_IRQHandler+0x10>)
 81016aa:	f002 f883 	bl	81037b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 81016ae:	bf00      	nop
 81016b0:	bd80      	pop	{r7, pc}
 81016b2:	bf00      	nop
 81016b4:	100003a4 	.word	0x100003a4

081016b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 81016b8:	b580      	push	{r7, lr}
 81016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 81016bc:	4802      	ldr	r0, [pc, #8]	@ (81016c8 <DMA1_Stream3_IRQHandler+0x10>)
 81016be:	f002 f879 	bl	81037b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 81016c2:	bf00      	nop
 81016c4:	bd80      	pop	{r7, pc}
 81016c6:	bf00      	nop
 81016c8:	10000228 	.word	0x10000228

081016cc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 81016cc:	b580      	push	{r7, lr}
 81016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 81016d0:	4802      	ldr	r0, [pc, #8]	@ (81016dc <DMA1_Stream4_IRQHandler+0x10>)
 81016d2:	f002 f86f 	bl	81037b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 81016d6:	bf00      	nop
 81016d8:	bd80      	pop	{r7, pc}
 81016da:	bf00      	nop
 81016dc:	100000e4 	.word	0x100000e4

081016e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 81016e0:	b580      	push	{r7, lr}
 81016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 81016e4:	4802      	ldr	r0, [pc, #8]	@ (81016f0 <DMA1_Stream5_IRQHandler+0x10>)
 81016e6:	f002 f865 	bl	81037b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 81016ea:	bf00      	nop
 81016ec:	bd80      	pop	{r7, pc}
 81016ee:	bf00      	nop
 81016f0:	1000015c 	.word	0x1000015c

081016f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 81016f4:	b580      	push	{r7, lr}
 81016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 81016f8:	4802      	ldr	r0, [pc, #8]	@ (8101704 <DMA1_Stream6_IRQHandler+0x10>)
 81016fa:	f002 f85b 	bl	81037b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 81016fe:	bf00      	nop
 8101700:	bd80      	pop	{r7, pc}
 8101702:	bf00      	nop
 8101704:	1000041c 	.word	0x1000041c

08101708 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101708:	b580      	push	{r7, lr}
 810170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 810170c:	4802      	ldr	r0, [pc, #8]	@ (8101718 <SPI1_IRQHandler+0x10>)
 810170e:	f008 fa67 	bl	8109be0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8101712:	bf00      	nop
 8101714:	bd80      	pop	{r7, pc}
 8101716:	bf00      	nop
 8101718:	1000031c 	.word	0x1000031c

0810171c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 810171c:	b580      	push	{r7, lr}
 810171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8101720:	4802      	ldr	r0, [pc, #8]	@ (810172c <SPI2_IRQHandler+0x10>)
 8101722:	f003 fddd 	bl	81052e0 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8101726:	bf00      	nop
 8101728:	bd80      	pop	{r7, pc}
 810172a:	bf00      	nop
 810172c:	100001d4 	.word	0x100001d4

08101730 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8101730:	b580      	push	{r7, lr}
 8101732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8101734:	4802      	ldr	r0, [pc, #8]	@ (8101740 <SDMMC1_IRQHandler+0x10>)
 8101736:	f006 ff55 	bl	81085e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 810173a:	bf00      	nop
 810173c:	bd80      	pop	{r7, pc}
 810173e:	bf00      	nop
 8101740:	100002a0 	.word	0x100002a0

08101744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101744:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8101780 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8101748:	f7fe ff56 	bl	81005f8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 810174c:	f7fe ff3c 	bl	81005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101750:	480c      	ldr	r0, [pc, #48]	@ (8101784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101752:	490d      	ldr	r1, [pc, #52]	@ (8101788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101754:	4a0d      	ldr	r2, [pc, #52]	@ (810178c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101758:	e002      	b.n	8101760 <LoopCopyDataInit>

0810175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810175e:	3304      	adds	r3, #4

08101760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101764:	d3f9      	bcc.n	810175a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101766:	4a0a      	ldr	r2, [pc, #40]	@ (8101790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101768:	4c0a      	ldr	r4, [pc, #40]	@ (8101794 <LoopFillZerobss+0x22>)
  movs r3, #0
 810176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810176c:	e001      	b.n	8101772 <LoopFillZerobss>

0810176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101770:	3204      	adds	r2, #4

08101772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101774:	d3fb      	bcc.n	810176e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101776:	f00a fb29 	bl	810bdcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810177a:	f7fe ff55 	bl	8100628 <main>
  bx  lr
 810177e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101780:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101784:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101788:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 810178c:	0810be7c 	.word	0x0810be7c
  ldr r2, =_sbss
 8101790:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8101794:	1000061c 	.word	0x1000061c

08101798 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101798:	e7fe      	b.n	8101798 <ADC3_IRQHandler>
	...

0810179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810179c:	b580      	push	{r7, lr}
 810179e:	b082      	sub	sp, #8
 81017a0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81017a2:	4b28      	ldr	r3, [pc, #160]	@ (8101844 <HAL_Init+0xa8>)
 81017a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81017a8:	4a26      	ldr	r2, [pc, #152]	@ (8101844 <HAL_Init+0xa8>)
 81017aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81017ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81017b2:	4b24      	ldr	r3, [pc, #144]	@ (8101844 <HAL_Init+0xa8>)
 81017b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81017b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81017bc:	603b      	str	r3, [r7, #0]
 81017be:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81017c0:	4b21      	ldr	r3, [pc, #132]	@ (8101848 <HAL_Init+0xac>)
 81017c2:	681b      	ldr	r3, [r3, #0]
 81017c4:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81017c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81017cc:	4a1e      	ldr	r2, [pc, #120]	@ (8101848 <HAL_Init+0xac>)
 81017ce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81017d2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81017d4:	4b1c      	ldr	r3, [pc, #112]	@ (8101848 <HAL_Init+0xac>)
 81017d6:	681b      	ldr	r3, [r3, #0]
 81017d8:	4a1b      	ldr	r2, [pc, #108]	@ (8101848 <HAL_Init+0xac>)
 81017da:	f043 0301 	orr.w	r3, r3, #1
 81017de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81017e0:	2003      	movs	r0, #3
 81017e2:	f001 f9f3 	bl	8102bcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81017e6:	f003 ff07 	bl	81055f8 <HAL_RCC_GetSysClockFreq>
 81017ea:	4602      	mov	r2, r0
 81017ec:	4b15      	ldr	r3, [pc, #84]	@ (8101844 <HAL_Init+0xa8>)
 81017ee:	699b      	ldr	r3, [r3, #24]
 81017f0:	0a1b      	lsrs	r3, r3, #8
 81017f2:	f003 030f 	and.w	r3, r3, #15
 81017f6:	4915      	ldr	r1, [pc, #84]	@ (810184c <HAL_Init+0xb0>)
 81017f8:	5ccb      	ldrb	r3, [r1, r3]
 81017fa:	f003 031f 	and.w	r3, r3, #31
 81017fe:	fa22 f303 	lsr.w	r3, r2, r3
 8101802:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101804:	4b0f      	ldr	r3, [pc, #60]	@ (8101844 <HAL_Init+0xa8>)
 8101806:	699b      	ldr	r3, [r3, #24]
 8101808:	f003 030f 	and.w	r3, r3, #15
 810180c:	4a0f      	ldr	r2, [pc, #60]	@ (810184c <HAL_Init+0xb0>)
 810180e:	5cd3      	ldrb	r3, [r2, r3]
 8101810:	f003 031f 	and.w	r3, r3, #31
 8101814:	687a      	ldr	r2, [r7, #4]
 8101816:	fa22 f303 	lsr.w	r3, r2, r3
 810181a:	4a0d      	ldr	r2, [pc, #52]	@ (8101850 <HAL_Init+0xb4>)
 810181c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810181e:	4b0c      	ldr	r3, [pc, #48]	@ (8101850 <HAL_Init+0xb4>)
 8101820:	681b      	ldr	r3, [r3, #0]
 8101822:	4a0c      	ldr	r2, [pc, #48]	@ (8101854 <HAL_Init+0xb8>)
 8101824:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101826:	2000      	movs	r0, #0
 8101828:	f000 f816 	bl	8101858 <HAL_InitTick>
 810182c:	4603      	mov	r3, r0
 810182e:	2b00      	cmp	r3, #0
 8101830:	d001      	beq.n	8101836 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101832:	2301      	movs	r3, #1
 8101834:	e002      	b.n	810183c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101836:	f7ff fa29 	bl	8100c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810183a:	2300      	movs	r3, #0
}
 810183c:	4618      	mov	r0, r3
 810183e:	3708      	adds	r7, #8
 8101840:	46bd      	mov	sp, r7
 8101842:	bd80      	pop	{r7, pc}
 8101844:	58024400 	.word	0x58024400
 8101848:	40024400 	.word	0x40024400
 810184c:	0810be2c 	.word	0x0810be2c
 8101850:	10000004 	.word	0x10000004
 8101854:	10000000 	.word	0x10000000

08101858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101858:	b580      	push	{r7, lr}
 810185a:	b082      	sub	sp, #8
 810185c:	af00      	add	r7, sp, #0
 810185e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101860:	4b15      	ldr	r3, [pc, #84]	@ (81018b8 <HAL_InitTick+0x60>)
 8101862:	781b      	ldrb	r3, [r3, #0]
 8101864:	2b00      	cmp	r3, #0
 8101866:	d101      	bne.n	810186c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101868:	2301      	movs	r3, #1
 810186a:	e021      	b.n	81018b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810186c:	4b13      	ldr	r3, [pc, #76]	@ (81018bc <HAL_InitTick+0x64>)
 810186e:	681a      	ldr	r2, [r3, #0]
 8101870:	4b11      	ldr	r3, [pc, #68]	@ (81018b8 <HAL_InitTick+0x60>)
 8101872:	781b      	ldrb	r3, [r3, #0]
 8101874:	4619      	mov	r1, r3
 8101876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810187a:	fbb3 f3f1 	udiv	r3, r3, r1
 810187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101882:	4618      	mov	r0, r3
 8101884:	f001 f9d5 	bl	8102c32 <HAL_SYSTICK_Config>
 8101888:	4603      	mov	r3, r0
 810188a:	2b00      	cmp	r3, #0
 810188c:	d001      	beq.n	8101892 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810188e:	2301      	movs	r3, #1
 8101890:	e00e      	b.n	81018b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101892:	687b      	ldr	r3, [r7, #4]
 8101894:	2b0f      	cmp	r3, #15
 8101896:	d80a      	bhi.n	81018ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101898:	2200      	movs	r2, #0
 810189a:	6879      	ldr	r1, [r7, #4]
 810189c:	f04f 30ff 	mov.w	r0, #4294967295
 81018a0:	f001 f99f 	bl	8102be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81018a4:	4a06      	ldr	r2, [pc, #24]	@ (81018c0 <HAL_InitTick+0x68>)
 81018a6:	687b      	ldr	r3, [r7, #4]
 81018a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81018aa:	2300      	movs	r3, #0
 81018ac:	e000      	b.n	81018b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81018ae:	2301      	movs	r3, #1
}
 81018b0:	4618      	mov	r0, r3
 81018b2:	3708      	adds	r7, #8
 81018b4:	46bd      	mov	sp, r7
 81018b6:	bd80      	pop	{r7, pc}
 81018b8:	1000000c 	.word	0x1000000c
 81018bc:	10000000 	.word	0x10000000
 81018c0:	10000008 	.word	0x10000008

081018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81018c4:	b480      	push	{r7}
 81018c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81018c8:	4b06      	ldr	r3, [pc, #24]	@ (81018e4 <HAL_IncTick+0x20>)
 81018ca:	781b      	ldrb	r3, [r3, #0]
 81018cc:	461a      	mov	r2, r3
 81018ce:	4b06      	ldr	r3, [pc, #24]	@ (81018e8 <HAL_IncTick+0x24>)
 81018d0:	681b      	ldr	r3, [r3, #0]
 81018d2:	4413      	add	r3, r2
 81018d4:	4a04      	ldr	r2, [pc, #16]	@ (81018e8 <HAL_IncTick+0x24>)
 81018d6:	6013      	str	r3, [r2, #0]
}
 81018d8:	bf00      	nop
 81018da:	46bd      	mov	sp, r7
 81018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018e0:	4770      	bx	lr
 81018e2:	bf00      	nop
 81018e4:	1000000c 	.word	0x1000000c
 81018e8:	10000618 	.word	0x10000618

081018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81018ec:	b480      	push	{r7}
 81018ee:	af00      	add	r7, sp, #0
  return uwTick;
 81018f0:	4b03      	ldr	r3, [pc, #12]	@ (8101900 <HAL_GetTick+0x14>)
 81018f2:	681b      	ldr	r3, [r3, #0]
}
 81018f4:	4618      	mov	r0, r3
 81018f6:	46bd      	mov	sp, r7
 81018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018fc:	4770      	bx	lr
 81018fe:	bf00      	nop
 8101900:	10000618 	.word	0x10000618

08101904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101904:	b580      	push	{r7, lr}
 8101906:	b084      	sub	sp, #16
 8101908:	af00      	add	r7, sp, #0
 810190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810190c:	f7ff ffee 	bl	81018ec <HAL_GetTick>
 8101910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101912:	687b      	ldr	r3, [r7, #4]
 8101914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101916:	68fb      	ldr	r3, [r7, #12]
 8101918:	f1b3 3fff 	cmp.w	r3, #4294967295
 810191c:	d005      	beq.n	810192a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810191e:	4b0a      	ldr	r3, [pc, #40]	@ (8101948 <HAL_Delay+0x44>)
 8101920:	781b      	ldrb	r3, [r3, #0]
 8101922:	461a      	mov	r2, r3
 8101924:	68fb      	ldr	r3, [r7, #12]
 8101926:	4413      	add	r3, r2
 8101928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810192a:	bf00      	nop
 810192c:	f7ff ffde 	bl	81018ec <HAL_GetTick>
 8101930:	4602      	mov	r2, r0
 8101932:	68bb      	ldr	r3, [r7, #8]
 8101934:	1ad3      	subs	r3, r2, r3
 8101936:	68fa      	ldr	r2, [r7, #12]
 8101938:	429a      	cmp	r2, r3
 810193a:	d8f7      	bhi.n	810192c <HAL_Delay+0x28>
  {
  }
}
 810193c:	bf00      	nop
 810193e:	bf00      	nop
 8101940:	3710      	adds	r7, #16
 8101942:	46bd      	mov	sp, r7
 8101944:	bd80      	pop	{r7, pc}
 8101946:	bf00      	nop
 8101948:	1000000c 	.word	0x1000000c

0810194c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810194c:	b480      	push	{r7}
 810194e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101950:	4b03      	ldr	r3, [pc, #12]	@ (8101960 <HAL_GetREVID+0x14>)
 8101952:	681b      	ldr	r3, [r3, #0]
 8101954:	0c1b      	lsrs	r3, r3, #16
}
 8101956:	4618      	mov	r0, r3
 8101958:	46bd      	mov	sp, r7
 810195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810195e:	4770      	bx	lr
 8101960:	5c001000 	.word	0x5c001000

08101964 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8101964:	b480      	push	{r7}
 8101966:	b083      	sub	sp, #12
 8101968:	af00      	add	r7, sp, #0
 810196a:	6078      	str	r0, [r7, #4]
 810196c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	689b      	ldr	r3, [r3, #8]
 8101972:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8101976:	683b      	ldr	r3, [r7, #0]
 8101978:	431a      	orrs	r2, r3
 810197a:	687b      	ldr	r3, [r7, #4]
 810197c:	609a      	str	r2, [r3, #8]
}
 810197e:	bf00      	nop
 8101980:	370c      	adds	r7, #12
 8101982:	46bd      	mov	sp, r7
 8101984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101988:	4770      	bx	lr

0810198a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 810198a:	b480      	push	{r7}
 810198c:	b083      	sub	sp, #12
 810198e:	af00      	add	r7, sp, #0
 8101990:	6078      	str	r0, [r7, #4]
 8101992:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	689b      	ldr	r3, [r3, #8]
 8101998:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 810199c:	683b      	ldr	r3, [r7, #0]
 810199e:	431a      	orrs	r2, r3
 81019a0:	687b      	ldr	r3, [r7, #4]
 81019a2:	609a      	str	r2, [r3, #8]
}
 81019a4:	bf00      	nop
 81019a6:	370c      	adds	r7, #12
 81019a8:	46bd      	mov	sp, r7
 81019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ae:	4770      	bx	lr

081019b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 81019b0:	b480      	push	{r7}
 81019b2:	b083      	sub	sp, #12
 81019b4:	af00      	add	r7, sp, #0
 81019b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81019b8:	687b      	ldr	r3, [r7, #4]
 81019ba:	689b      	ldr	r3, [r3, #8]
 81019bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 81019c0:	4618      	mov	r0, r3
 81019c2:	370c      	adds	r7, #12
 81019c4:	46bd      	mov	sp, r7
 81019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ca:	4770      	bx	lr

081019cc <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 81019cc:	b480      	push	{r7}
 81019ce:	b087      	sub	sp, #28
 81019d0:	af00      	add	r7, sp, #0
 81019d2:	6078      	str	r0, [r7, #4]
 81019d4:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 81019d6:	683b      	ldr	r3, [r7, #0]
 81019d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81019dc:	2b00      	cmp	r3, #0
 81019de:	d107      	bne.n	81019f0 <LL_ADC_SetChannelPreselection+0x24>
 81019e0:	683b      	ldr	r3, [r7, #0]
 81019e2:	0e9b      	lsrs	r3, r3, #26
 81019e4:	f003 031f 	and.w	r3, r3, #31
 81019e8:	2201      	movs	r2, #1
 81019ea:	fa02 f303 	lsl.w	r3, r2, r3
 81019ee:	e015      	b.n	8101a1c <LL_ADC_SetChannelPreselection+0x50>
 81019f0:	683b      	ldr	r3, [r7, #0]
 81019f2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81019f4:	693b      	ldr	r3, [r7, #16]
 81019f6:	fa93 f3a3 	rbit	r3, r3
 81019fa:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81019fc:	68fb      	ldr	r3, [r7, #12]
 81019fe:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8101a00:	697b      	ldr	r3, [r7, #20]
 8101a02:	2b00      	cmp	r3, #0
 8101a04:	d101      	bne.n	8101a0a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8101a06:	2320      	movs	r3, #32
 8101a08:	e003      	b.n	8101a12 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8101a0a:	697b      	ldr	r3, [r7, #20]
 8101a0c:	fab3 f383 	clz	r3, r3
 8101a10:	b2db      	uxtb	r3, r3
 8101a12:	f003 031f 	and.w	r3, r3, #31
 8101a16:	2201      	movs	r2, #1
 8101a18:	fa02 f303 	lsl.w	r3, r2, r3
 8101a1c:	687a      	ldr	r2, [r7, #4]
 8101a1e:	69d2      	ldr	r2, [r2, #28]
 8101a20:	431a      	orrs	r2, r3
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8101a26:	bf00      	nop
 8101a28:	371c      	adds	r7, #28
 8101a2a:	46bd      	mov	sp, r7
 8101a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a30:	4770      	bx	lr

08101a32 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8101a32:	b480      	push	{r7}
 8101a34:	b087      	sub	sp, #28
 8101a36:	af00      	add	r7, sp, #0
 8101a38:	60f8      	str	r0, [r7, #12]
 8101a3a:	60b9      	str	r1, [r7, #8]
 8101a3c:	607a      	str	r2, [r7, #4]
 8101a3e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101a40:	68fb      	ldr	r3, [r7, #12]
 8101a42:	3360      	adds	r3, #96	@ 0x60
 8101a44:	461a      	mov	r2, r3
 8101a46:	68bb      	ldr	r3, [r7, #8]
 8101a48:	009b      	lsls	r3, r3, #2
 8101a4a:	4413      	add	r3, r2
 8101a4c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101a4e:	697b      	ldr	r3, [r7, #20]
 8101a50:	681b      	ldr	r3, [r3, #0]
 8101a52:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8101a56:	687b      	ldr	r3, [r7, #4]
 8101a58:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8101a5c:	683b      	ldr	r3, [r7, #0]
 8101a5e:	430b      	orrs	r3, r1
 8101a60:	431a      	orrs	r2, r3
 8101a62:	697b      	ldr	r3, [r7, #20]
 8101a64:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8101a66:	bf00      	nop
 8101a68:	371c      	adds	r7, #28
 8101a6a:	46bd      	mov	sp, r7
 8101a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a70:	4770      	bx	lr

08101a72 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101a72:	b480      	push	{r7}
 8101a74:	b085      	sub	sp, #20
 8101a76:	af00      	add	r7, sp, #0
 8101a78:	60f8      	str	r0, [r7, #12]
 8101a7a:	60b9      	str	r1, [r7, #8]
 8101a7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101a7e:	68fb      	ldr	r3, [r7, #12]
 8101a80:	691b      	ldr	r3, [r3, #16]
 8101a82:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8101a86:	68bb      	ldr	r3, [r7, #8]
 8101a88:	f003 031f 	and.w	r3, r3, #31
 8101a8c:	6879      	ldr	r1, [r7, #4]
 8101a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8101a92:	431a      	orrs	r2, r3
 8101a94:	68fb      	ldr	r3, [r7, #12]
 8101a96:	611a      	str	r2, [r3, #16]
}
 8101a98:	bf00      	nop
 8101a9a:	3714      	adds	r7, #20
 8101a9c:	46bd      	mov	sp, r7
 8101a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa2:	4770      	bx	lr

08101aa4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8101aa4:	b480      	push	{r7}
 8101aa6:	b087      	sub	sp, #28
 8101aa8:	af00      	add	r7, sp, #0
 8101aaa:	60f8      	str	r0, [r7, #12]
 8101aac:	60b9      	str	r1, [r7, #8]
 8101aae:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101ab0:	68fb      	ldr	r3, [r7, #12]
 8101ab2:	3360      	adds	r3, #96	@ 0x60
 8101ab4:	461a      	mov	r2, r3
 8101ab6:	68bb      	ldr	r3, [r7, #8]
 8101ab8:	009b      	lsls	r3, r3, #2
 8101aba:	4413      	add	r3, r2
 8101abc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8101abe:	697b      	ldr	r3, [r7, #20]
 8101ac0:	681b      	ldr	r3, [r3, #0]
 8101ac2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8101ac6:	687b      	ldr	r3, [r7, #4]
 8101ac8:	431a      	orrs	r2, r3
 8101aca:	697b      	ldr	r3, [r7, #20]
 8101acc:	601a      	str	r2, [r3, #0]
  }
}
 8101ace:	bf00      	nop
 8101ad0:	371c      	adds	r7, #28
 8101ad2:	46bd      	mov	sp, r7
 8101ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ad8:	4770      	bx	lr

08101ada <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8101ada:	b480      	push	{r7}
 8101adc:	b087      	sub	sp, #28
 8101ade:	af00      	add	r7, sp, #0
 8101ae0:	60f8      	str	r0, [r7, #12]
 8101ae2:	60b9      	str	r1, [r7, #8]
 8101ae4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8101ae6:	68fb      	ldr	r3, [r7, #12]
 8101ae8:	3330      	adds	r3, #48	@ 0x30
 8101aea:	461a      	mov	r2, r3
 8101aec:	68bb      	ldr	r3, [r7, #8]
 8101aee:	0a1b      	lsrs	r3, r3, #8
 8101af0:	009b      	lsls	r3, r3, #2
 8101af2:	f003 030c 	and.w	r3, r3, #12
 8101af6:	4413      	add	r3, r2
 8101af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101afa:	697b      	ldr	r3, [r7, #20]
 8101afc:	681a      	ldr	r2, [r3, #0]
 8101afe:	68bb      	ldr	r3, [r7, #8]
 8101b00:	f003 031f 	and.w	r3, r3, #31
 8101b04:	211f      	movs	r1, #31
 8101b06:	fa01 f303 	lsl.w	r3, r1, r3
 8101b0a:	43db      	mvns	r3, r3
 8101b0c:	401a      	ands	r2, r3
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	0e9b      	lsrs	r3, r3, #26
 8101b12:	f003 011f 	and.w	r1, r3, #31
 8101b16:	68bb      	ldr	r3, [r7, #8]
 8101b18:	f003 031f 	and.w	r3, r3, #31
 8101b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8101b20:	431a      	orrs	r2, r3
 8101b22:	697b      	ldr	r3, [r7, #20]
 8101b24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8101b26:	bf00      	nop
 8101b28:	371c      	adds	r7, #28
 8101b2a:	46bd      	mov	sp, r7
 8101b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b30:	4770      	bx	lr

08101b32 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8101b32:	b480      	push	{r7}
 8101b34:	b087      	sub	sp, #28
 8101b36:	af00      	add	r7, sp, #0
 8101b38:	60f8      	str	r0, [r7, #12]
 8101b3a:	60b9      	str	r1, [r7, #8]
 8101b3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8101b3e:	68fb      	ldr	r3, [r7, #12]
 8101b40:	3314      	adds	r3, #20
 8101b42:	461a      	mov	r2, r3
 8101b44:	68bb      	ldr	r3, [r7, #8]
 8101b46:	0e5b      	lsrs	r3, r3, #25
 8101b48:	009b      	lsls	r3, r3, #2
 8101b4a:	f003 0304 	and.w	r3, r3, #4
 8101b4e:	4413      	add	r3, r2
 8101b50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101b52:	697b      	ldr	r3, [r7, #20]
 8101b54:	681a      	ldr	r2, [r3, #0]
 8101b56:	68bb      	ldr	r3, [r7, #8]
 8101b58:	0d1b      	lsrs	r3, r3, #20
 8101b5a:	f003 031f 	and.w	r3, r3, #31
 8101b5e:	2107      	movs	r1, #7
 8101b60:	fa01 f303 	lsl.w	r3, r1, r3
 8101b64:	43db      	mvns	r3, r3
 8101b66:	401a      	ands	r2, r3
 8101b68:	68bb      	ldr	r3, [r7, #8]
 8101b6a:	0d1b      	lsrs	r3, r3, #20
 8101b6c:	f003 031f 	and.w	r3, r3, #31
 8101b70:	6879      	ldr	r1, [r7, #4]
 8101b72:	fa01 f303 	lsl.w	r3, r1, r3
 8101b76:	431a      	orrs	r2, r3
 8101b78:	697b      	ldr	r3, [r7, #20]
 8101b7a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8101b7c:	bf00      	nop
 8101b7e:	371c      	adds	r7, #28
 8101b80:	46bd      	mov	sp, r7
 8101b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b86:	4770      	bx	lr

08101b88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8101b88:	b480      	push	{r7}
 8101b8a:	b085      	sub	sp, #20
 8101b8c:	af00      	add	r7, sp, #0
 8101b8e:	60f8      	str	r0, [r7, #12]
 8101b90:	60b9      	str	r1, [r7, #8]
 8101b92:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8101b94:	68fb      	ldr	r3, [r7, #12]
 8101b96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8101b9a:	68bb      	ldr	r3, [r7, #8]
 8101b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101ba0:	43db      	mvns	r3, r3
 8101ba2:	401a      	ands	r2, r3
 8101ba4:	687b      	ldr	r3, [r7, #4]
 8101ba6:	f003 0318 	and.w	r3, r3, #24
 8101baa:	4908      	ldr	r1, [pc, #32]	@ (8101bcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8101bac:	40d9      	lsrs	r1, r3
 8101bae:	68bb      	ldr	r3, [r7, #8]
 8101bb0:	400b      	ands	r3, r1
 8101bb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101bb6:	431a      	orrs	r2, r3
 8101bb8:	68fb      	ldr	r3, [r7, #12]
 8101bba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8101bbe:	bf00      	nop
 8101bc0:	3714      	adds	r7, #20
 8101bc2:	46bd      	mov	sp, r7
 8101bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bc8:	4770      	bx	lr
 8101bca:	bf00      	nop
 8101bcc:	000fffff 	.word	0x000fffff

08101bd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8101bd0:	b480      	push	{r7}
 8101bd2:	b083      	sub	sp, #12
 8101bd4:	af00      	add	r7, sp, #0
 8101bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8101bd8:	687b      	ldr	r3, [r7, #4]
 8101bda:	689b      	ldr	r3, [r3, #8]
 8101bdc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8101be0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8101be4:	687a      	ldr	r2, [r7, #4]
 8101be6:	6093      	str	r3, [r2, #8]
}
 8101be8:	bf00      	nop
 8101bea:	370c      	adds	r7, #12
 8101bec:	46bd      	mov	sp, r7
 8101bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bf2:	4770      	bx	lr

08101bf4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8101bf4:	b480      	push	{r7}
 8101bf6:	b083      	sub	sp, #12
 8101bf8:	af00      	add	r7, sp, #0
 8101bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8101bfc:	687b      	ldr	r3, [r7, #4]
 8101bfe:	689b      	ldr	r3, [r3, #8]
 8101c00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8101c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101c08:	d101      	bne.n	8101c0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8101c0a:	2301      	movs	r3, #1
 8101c0c:	e000      	b.n	8101c10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8101c0e:	2300      	movs	r3, #0
}
 8101c10:	4618      	mov	r0, r3
 8101c12:	370c      	adds	r7, #12
 8101c14:	46bd      	mov	sp, r7
 8101c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c1a:	4770      	bx	lr

08101c1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8101c1c:	b480      	push	{r7}
 8101c1e:	b083      	sub	sp, #12
 8101c20:	af00      	add	r7, sp, #0
 8101c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	689b      	ldr	r3, [r3, #8]
 8101c28:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8101c2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8101c30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8101c34:	687b      	ldr	r3, [r7, #4]
 8101c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8101c38:	bf00      	nop
 8101c3a:	370c      	adds	r7, #12
 8101c3c:	46bd      	mov	sp, r7
 8101c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c42:	4770      	bx	lr

08101c44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8101c44:	b480      	push	{r7}
 8101c46:	b083      	sub	sp, #12
 8101c48:	af00      	add	r7, sp, #0
 8101c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8101c4c:	687b      	ldr	r3, [r7, #4]
 8101c4e:	689b      	ldr	r3, [r3, #8]
 8101c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8101c54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101c58:	d101      	bne.n	8101c5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8101c5a:	2301      	movs	r3, #1
 8101c5c:	e000      	b.n	8101c60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8101c5e:	2300      	movs	r3, #0
}
 8101c60:	4618      	mov	r0, r3
 8101c62:	370c      	adds	r7, #12
 8101c64:	46bd      	mov	sp, r7
 8101c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c6a:	4770      	bx	lr

08101c6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8101c6c:	b480      	push	{r7}
 8101c6e:	b083      	sub	sp, #12
 8101c70:	af00      	add	r7, sp, #0
 8101c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101c74:	687b      	ldr	r3, [r7, #4]
 8101c76:	689b      	ldr	r3, [r3, #8]
 8101c78:	f003 0301 	and.w	r3, r3, #1
 8101c7c:	2b01      	cmp	r3, #1
 8101c7e:	d101      	bne.n	8101c84 <LL_ADC_IsEnabled+0x18>
 8101c80:	2301      	movs	r3, #1
 8101c82:	e000      	b.n	8101c86 <LL_ADC_IsEnabled+0x1a>
 8101c84:	2300      	movs	r3, #0
}
 8101c86:	4618      	mov	r0, r3
 8101c88:	370c      	adds	r7, #12
 8101c8a:	46bd      	mov	sp, r7
 8101c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c90:	4770      	bx	lr

08101c92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8101c92:	b480      	push	{r7}
 8101c94:	b083      	sub	sp, #12
 8101c96:	af00      	add	r7, sp, #0
 8101c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101c9a:	687b      	ldr	r3, [r7, #4]
 8101c9c:	689b      	ldr	r3, [r3, #8]
 8101c9e:	f003 0304 	and.w	r3, r3, #4
 8101ca2:	2b04      	cmp	r3, #4
 8101ca4:	d101      	bne.n	8101caa <LL_ADC_REG_IsConversionOngoing+0x18>
 8101ca6:	2301      	movs	r3, #1
 8101ca8:	e000      	b.n	8101cac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8101caa:	2300      	movs	r3, #0
}
 8101cac:	4618      	mov	r0, r3
 8101cae:	370c      	adds	r7, #12
 8101cb0:	46bd      	mov	sp, r7
 8101cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cb6:	4770      	bx	lr

08101cb8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8101cb8:	b480      	push	{r7}
 8101cba:	b083      	sub	sp, #12
 8101cbc:	af00      	add	r7, sp, #0
 8101cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8101cc0:	687b      	ldr	r3, [r7, #4]
 8101cc2:	689b      	ldr	r3, [r3, #8]
 8101cc4:	f003 0308 	and.w	r3, r3, #8
 8101cc8:	2b08      	cmp	r3, #8
 8101cca:	d101      	bne.n	8101cd0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8101ccc:	2301      	movs	r3, #1
 8101cce:	e000      	b.n	8101cd2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8101cd0:	2300      	movs	r3, #0
}
 8101cd2:	4618      	mov	r0, r3
 8101cd4:	370c      	adds	r7, #12
 8101cd6:	46bd      	mov	sp, r7
 8101cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cdc:	4770      	bx	lr
	...

08101ce0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8101ce0:	b590      	push	{r4, r7, lr}
 8101ce2:	b089      	sub	sp, #36	@ 0x24
 8101ce4:	af00      	add	r7, sp, #0
 8101ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101ce8:	2300      	movs	r3, #0
 8101cea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8101cec:	2300      	movs	r3, #0
 8101cee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	2b00      	cmp	r3, #0
 8101cf4:	d101      	bne.n	8101cfa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8101cf6:	2301      	movs	r3, #1
 8101cf8:	e18f      	b.n	810201a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	68db      	ldr	r3, [r3, #12]
 8101cfe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8101d00:	687b      	ldr	r3, [r7, #4]
 8101d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101d04:	2b00      	cmp	r3, #0
 8101d06:	d109      	bne.n	8101d1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8101d08:	6878      	ldr	r0, [r7, #4]
 8101d0a:	f7fe ffd9 	bl	8100cc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8101d0e:	687b      	ldr	r3, [r7, #4]
 8101d10:	2200      	movs	r2, #0
 8101d12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8101d14:	687b      	ldr	r3, [r7, #4]
 8101d16:	2200      	movs	r2, #0
 8101d18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8101d1c:	687b      	ldr	r3, [r7, #4]
 8101d1e:	681b      	ldr	r3, [r3, #0]
 8101d20:	4618      	mov	r0, r3
 8101d22:	f7ff ff67 	bl	8101bf4 <LL_ADC_IsDeepPowerDownEnabled>
 8101d26:	4603      	mov	r3, r0
 8101d28:	2b00      	cmp	r3, #0
 8101d2a:	d004      	beq.n	8101d36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8101d2c:	687b      	ldr	r3, [r7, #4]
 8101d2e:	681b      	ldr	r3, [r3, #0]
 8101d30:	4618      	mov	r0, r3
 8101d32:	f7ff ff4d 	bl	8101bd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	681b      	ldr	r3, [r3, #0]
 8101d3a:	4618      	mov	r0, r3
 8101d3c:	f7ff ff82 	bl	8101c44 <LL_ADC_IsInternalRegulatorEnabled>
 8101d40:	4603      	mov	r3, r0
 8101d42:	2b00      	cmp	r3, #0
 8101d44:	d114      	bne.n	8101d70 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	4618      	mov	r0, r3
 8101d4c:	f7ff ff66 	bl	8101c1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101d50:	4b88      	ldr	r3, [pc, #544]	@ (8101f74 <HAL_ADC_Init+0x294>)
 8101d52:	681b      	ldr	r3, [r3, #0]
 8101d54:	099b      	lsrs	r3, r3, #6
 8101d56:	4a88      	ldr	r2, [pc, #544]	@ (8101f78 <HAL_ADC_Init+0x298>)
 8101d58:	fba2 2303 	umull	r2, r3, r2, r3
 8101d5c:	099b      	lsrs	r3, r3, #6
 8101d5e:	3301      	adds	r3, #1
 8101d60:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101d62:	e002      	b.n	8101d6a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8101d64:	68bb      	ldr	r3, [r7, #8]
 8101d66:	3b01      	subs	r3, #1
 8101d68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101d6a:	68bb      	ldr	r3, [r7, #8]
 8101d6c:	2b00      	cmp	r3, #0
 8101d6e:	d1f9      	bne.n	8101d64 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101d70:	687b      	ldr	r3, [r7, #4]
 8101d72:	681b      	ldr	r3, [r3, #0]
 8101d74:	4618      	mov	r0, r3
 8101d76:	f7ff ff65 	bl	8101c44 <LL_ADC_IsInternalRegulatorEnabled>
 8101d7a:	4603      	mov	r3, r0
 8101d7c:	2b00      	cmp	r3, #0
 8101d7e:	d10d      	bne.n	8101d9c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101d80:	687b      	ldr	r3, [r7, #4]
 8101d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101d84:	f043 0210 	orr.w	r2, r3, #16
 8101d88:	687b      	ldr	r3, [r7, #4]
 8101d8a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101d8c:	687b      	ldr	r3, [r7, #4]
 8101d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101d90:	f043 0201 	orr.w	r2, r3, #1
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8101d98:	2301      	movs	r3, #1
 8101d9a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	681b      	ldr	r3, [r3, #0]
 8101da0:	4618      	mov	r0, r3
 8101da2:	f7ff ff76 	bl	8101c92 <LL_ADC_REG_IsConversionOngoing>
 8101da6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8101da8:	687b      	ldr	r3, [r7, #4]
 8101daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101dac:	f003 0310 	and.w	r3, r3, #16
 8101db0:	2b00      	cmp	r3, #0
 8101db2:	f040 8129 	bne.w	8102008 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8101db6:	697b      	ldr	r3, [r7, #20]
 8101db8:	2b00      	cmp	r3, #0
 8101dba:	f040 8125 	bne.w	8102008 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8101dbe:	687b      	ldr	r3, [r7, #4]
 8101dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101dc2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8101dc6:	f043 0202 	orr.w	r2, r3, #2
 8101dca:	687b      	ldr	r3, [r7, #4]
 8101dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	681b      	ldr	r3, [r3, #0]
 8101dd2:	4618      	mov	r0, r3
 8101dd4:	f7ff ff4a 	bl	8101c6c <LL_ADC_IsEnabled>
 8101dd8:	4603      	mov	r3, r0
 8101dda:	2b00      	cmp	r3, #0
 8101ddc:	d136      	bne.n	8101e4c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	681b      	ldr	r3, [r3, #0]
 8101de2:	4a66      	ldr	r2, [pc, #408]	@ (8101f7c <HAL_ADC_Init+0x29c>)
 8101de4:	4293      	cmp	r3, r2
 8101de6:	d004      	beq.n	8101df2 <HAL_ADC_Init+0x112>
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	681b      	ldr	r3, [r3, #0]
 8101dec:	4a64      	ldr	r2, [pc, #400]	@ (8101f80 <HAL_ADC_Init+0x2a0>)
 8101dee:	4293      	cmp	r3, r2
 8101df0:	d10e      	bne.n	8101e10 <HAL_ADC_Init+0x130>
 8101df2:	4862      	ldr	r0, [pc, #392]	@ (8101f7c <HAL_ADC_Init+0x29c>)
 8101df4:	f7ff ff3a 	bl	8101c6c <LL_ADC_IsEnabled>
 8101df8:	4604      	mov	r4, r0
 8101dfa:	4861      	ldr	r0, [pc, #388]	@ (8101f80 <HAL_ADC_Init+0x2a0>)
 8101dfc:	f7ff ff36 	bl	8101c6c <LL_ADC_IsEnabled>
 8101e00:	4603      	mov	r3, r0
 8101e02:	4323      	orrs	r3, r4
 8101e04:	2b00      	cmp	r3, #0
 8101e06:	bf0c      	ite	eq
 8101e08:	2301      	moveq	r3, #1
 8101e0a:	2300      	movne	r3, #0
 8101e0c:	b2db      	uxtb	r3, r3
 8101e0e:	e008      	b.n	8101e22 <HAL_ADC_Init+0x142>
 8101e10:	485c      	ldr	r0, [pc, #368]	@ (8101f84 <HAL_ADC_Init+0x2a4>)
 8101e12:	f7ff ff2b 	bl	8101c6c <LL_ADC_IsEnabled>
 8101e16:	4603      	mov	r3, r0
 8101e18:	2b00      	cmp	r3, #0
 8101e1a:	bf0c      	ite	eq
 8101e1c:	2301      	moveq	r3, #1
 8101e1e:	2300      	movne	r3, #0
 8101e20:	b2db      	uxtb	r3, r3
 8101e22:	2b00      	cmp	r3, #0
 8101e24:	d012      	beq.n	8101e4c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8101e26:	687b      	ldr	r3, [r7, #4]
 8101e28:	681b      	ldr	r3, [r3, #0]
 8101e2a:	4a54      	ldr	r2, [pc, #336]	@ (8101f7c <HAL_ADC_Init+0x29c>)
 8101e2c:	4293      	cmp	r3, r2
 8101e2e:	d004      	beq.n	8101e3a <HAL_ADC_Init+0x15a>
 8101e30:	687b      	ldr	r3, [r7, #4]
 8101e32:	681b      	ldr	r3, [r3, #0]
 8101e34:	4a52      	ldr	r2, [pc, #328]	@ (8101f80 <HAL_ADC_Init+0x2a0>)
 8101e36:	4293      	cmp	r3, r2
 8101e38:	d101      	bne.n	8101e3e <HAL_ADC_Init+0x15e>
 8101e3a:	4a53      	ldr	r2, [pc, #332]	@ (8101f88 <HAL_ADC_Init+0x2a8>)
 8101e3c:	e000      	b.n	8101e40 <HAL_ADC_Init+0x160>
 8101e3e:	4a53      	ldr	r2, [pc, #332]	@ (8101f8c <HAL_ADC_Init+0x2ac>)
 8101e40:	687b      	ldr	r3, [r7, #4]
 8101e42:	685b      	ldr	r3, [r3, #4]
 8101e44:	4619      	mov	r1, r3
 8101e46:	4610      	mov	r0, r2
 8101e48:	f7ff fd8c 	bl	8101964 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8101e4c:	f7ff fd7e 	bl	810194c <HAL_GetREVID>
 8101e50:	4603      	mov	r3, r0
 8101e52:	f241 0203 	movw	r2, #4099	@ 0x1003
 8101e56:	4293      	cmp	r3, r2
 8101e58:	d914      	bls.n	8101e84 <HAL_ADC_Init+0x1a4>
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	689b      	ldr	r3, [r3, #8]
 8101e5e:	2b10      	cmp	r3, #16
 8101e60:	d110      	bne.n	8101e84 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101e62:	687b      	ldr	r3, [r7, #4]
 8101e64:	7d5b      	ldrb	r3, [r3, #21]
 8101e66:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101e6c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101e6e:	687b      	ldr	r3, [r7, #4]
 8101e70:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101e72:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101e74:	687b      	ldr	r3, [r7, #4]
 8101e76:	7f1b      	ldrb	r3, [r3, #28]
 8101e78:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101e7a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101e7c:	f043 030c 	orr.w	r3, r3, #12
 8101e80:	61bb      	str	r3, [r7, #24]
 8101e82:	e00d      	b.n	8101ea0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	7d5b      	ldrb	r3, [r3, #21]
 8101e88:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101e8a:	687b      	ldr	r3, [r7, #4]
 8101e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101e8e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8101e90:	687b      	ldr	r3, [r7, #4]
 8101e92:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101e94:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101e96:	687b      	ldr	r3, [r7, #4]
 8101e98:	7f1b      	ldrb	r3, [r3, #28]
 8101e9a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101e9c:	4313      	orrs	r3, r2
 8101e9e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	7f1b      	ldrb	r3, [r3, #28]
 8101ea4:	2b01      	cmp	r3, #1
 8101ea6:	d106      	bne.n	8101eb6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	6a1b      	ldr	r3, [r3, #32]
 8101eac:	3b01      	subs	r3, #1
 8101eae:	045b      	lsls	r3, r3, #17
 8101eb0:	69ba      	ldr	r2, [r7, #24]
 8101eb2:	4313      	orrs	r3, r2
 8101eb4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8101eb6:	687b      	ldr	r3, [r7, #4]
 8101eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101eba:	2b00      	cmp	r3, #0
 8101ebc:	d009      	beq.n	8101ed2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101ebe:	687b      	ldr	r3, [r7, #4]
 8101ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101ec2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101eca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101ecc:	69ba      	ldr	r2, [r7, #24]
 8101ece:	4313      	orrs	r3, r2
 8101ed0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	681b      	ldr	r3, [r3, #0]
 8101ed6:	68da      	ldr	r2, [r3, #12]
 8101ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8101f90 <HAL_ADC_Init+0x2b0>)
 8101eda:	4013      	ands	r3, r2
 8101edc:	687a      	ldr	r2, [r7, #4]
 8101ede:	6812      	ldr	r2, [r2, #0]
 8101ee0:	69b9      	ldr	r1, [r7, #24]
 8101ee2:	430b      	orrs	r3, r1
 8101ee4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101ee6:	687b      	ldr	r3, [r7, #4]
 8101ee8:	681b      	ldr	r3, [r3, #0]
 8101eea:	4618      	mov	r0, r3
 8101eec:	f7ff fed1 	bl	8101c92 <LL_ADC_REG_IsConversionOngoing>
 8101ef0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101ef2:	687b      	ldr	r3, [r7, #4]
 8101ef4:	681b      	ldr	r3, [r3, #0]
 8101ef6:	4618      	mov	r0, r3
 8101ef8:	f7ff fede 	bl	8101cb8 <LL_ADC_INJ_IsConversionOngoing>
 8101efc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101efe:	693b      	ldr	r3, [r7, #16]
 8101f00:	2b00      	cmp	r3, #0
 8101f02:	d15f      	bne.n	8101fc4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101f04:	68fb      	ldr	r3, [r7, #12]
 8101f06:	2b00      	cmp	r3, #0
 8101f08:	d15c      	bne.n	8101fc4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	7d1b      	ldrb	r3, [r3, #20]
 8101f0e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8101f10:	687b      	ldr	r3, [r7, #4]
 8101f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8101f14:	4313      	orrs	r3, r2
 8101f16:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8101f18:	687b      	ldr	r3, [r7, #4]
 8101f1a:	681b      	ldr	r3, [r3, #0]
 8101f1c:	68db      	ldr	r3, [r3, #12]
 8101f1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8101f22:	f023 0303 	bic.w	r3, r3, #3
 8101f26:	687a      	ldr	r2, [r7, #4]
 8101f28:	6812      	ldr	r2, [r2, #0]
 8101f2a:	69b9      	ldr	r1, [r7, #24]
 8101f2c:	430b      	orrs	r3, r1
 8101f2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8101f36:	2b01      	cmp	r3, #1
 8101f38:	d12e      	bne.n	8101f98 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101f3e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	681b      	ldr	r3, [r3, #0]
 8101f44:	691a      	ldr	r2, [r3, #16]
 8101f46:	4b13      	ldr	r3, [pc, #76]	@ (8101f94 <HAL_ADC_Init+0x2b4>)
 8101f48:	4013      	ands	r3, r2
 8101f4a:	687a      	ldr	r2, [r7, #4]
 8101f4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8101f4e:	3a01      	subs	r2, #1
 8101f50:	0411      	lsls	r1, r2, #16
 8101f52:	687a      	ldr	r2, [r7, #4]
 8101f54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8101f56:	4311      	orrs	r1, r2
 8101f58:	687a      	ldr	r2, [r7, #4]
 8101f5a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8101f5c:	4311      	orrs	r1, r2
 8101f5e:	687a      	ldr	r2, [r7, #4]
 8101f60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8101f62:	430a      	orrs	r2, r1
 8101f64:	431a      	orrs	r2, r3
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	681b      	ldr	r3, [r3, #0]
 8101f6a:	f042 0201 	orr.w	r2, r2, #1
 8101f6e:	611a      	str	r2, [r3, #16]
 8101f70:	e01a      	b.n	8101fa8 <HAL_ADC_Init+0x2c8>
 8101f72:	bf00      	nop
 8101f74:	10000000 	.word	0x10000000
 8101f78:	053e2d63 	.word	0x053e2d63
 8101f7c:	40022000 	.word	0x40022000
 8101f80:	40022100 	.word	0x40022100
 8101f84:	58026000 	.word	0x58026000
 8101f88:	40022300 	.word	0x40022300
 8101f8c:	58026300 	.word	0x58026300
 8101f90:	fff0c003 	.word	0xfff0c003
 8101f94:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	681b      	ldr	r3, [r3, #0]
 8101f9c:	691a      	ldr	r2, [r3, #16]
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	681b      	ldr	r3, [r3, #0]
 8101fa2:	f022 0201 	bic.w	r2, r2, #1
 8101fa6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	681b      	ldr	r3, [r3, #0]
 8101fac:	691b      	ldr	r3, [r3, #16]
 8101fae:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	681b      	ldr	r3, [r3, #0]
 8101fba:	430a      	orrs	r2, r1
 8101fbc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8101fbe:	6878      	ldr	r0, [r7, #4]
 8101fc0:	f000 fb20 	bl	8102604 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	68db      	ldr	r3, [r3, #12]
 8101fc8:	2b01      	cmp	r3, #1
 8101fca:	d10c      	bne.n	8101fe6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8101fcc:	687b      	ldr	r3, [r7, #4]
 8101fce:	681b      	ldr	r3, [r3, #0]
 8101fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101fd2:	f023 010f 	bic.w	r1, r3, #15
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	699b      	ldr	r3, [r3, #24]
 8101fda:	1e5a      	subs	r2, r3, #1
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	681b      	ldr	r3, [r3, #0]
 8101fe0:	430a      	orrs	r2, r1
 8101fe2:	631a      	str	r2, [r3, #48]	@ 0x30
 8101fe4:	e007      	b.n	8101ff6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	681b      	ldr	r3, [r3, #0]
 8101fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	681b      	ldr	r3, [r3, #0]
 8101ff0:	f022 020f 	bic.w	r2, r2, #15
 8101ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101ffa:	f023 0303 	bic.w	r3, r3, #3
 8101ffe:	f043 0201 	orr.w	r2, r3, #1
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	655a      	str	r2, [r3, #84]	@ 0x54
 8102006:	e007      	b.n	8102018 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102008:	687b      	ldr	r3, [r7, #4]
 810200a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810200c:	f043 0210 	orr.w	r2, r3, #16
 8102010:	687b      	ldr	r3, [r7, #4]
 8102012:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8102014:	2301      	movs	r3, #1
 8102016:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8102018:	7ffb      	ldrb	r3, [r7, #31]
}
 810201a:	4618      	mov	r0, r3
 810201c:	3724      	adds	r7, #36	@ 0x24
 810201e:	46bd      	mov	sp, r7
 8102020:	bd90      	pop	{r4, r7, pc}
 8102022:	bf00      	nop

08102024 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102024:	b590      	push	{r4, r7, lr}
 8102026:	b08d      	sub	sp, #52	@ 0x34
 8102028:	af00      	add	r7, sp, #0
 810202a:	6078      	str	r0, [r7, #4]
 810202c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810202e:	2300      	movs	r3, #0
 8102030:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102034:	2300      	movs	r3, #0
 8102036:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8102038:	683b      	ldr	r3, [r7, #0]
 810203a:	68db      	ldr	r3, [r3, #12]
 810203c:	4a65      	ldr	r2, [pc, #404]	@ (81021d4 <HAL_ADC_ConfigChannel+0x1b0>)
 810203e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8102046:	2b01      	cmp	r3, #1
 8102048:	d101      	bne.n	810204e <HAL_ADC_ConfigChannel+0x2a>
 810204a:	2302      	movs	r3, #2
 810204c:	e2c7      	b.n	81025de <HAL_ADC_ConfigChannel+0x5ba>
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	2201      	movs	r2, #1
 8102052:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	681b      	ldr	r3, [r3, #0]
 810205a:	4618      	mov	r0, r3
 810205c:	f7ff fe19 	bl	8101c92 <LL_ADC_REG_IsConversionOngoing>
 8102060:	4603      	mov	r3, r0
 8102062:	2b00      	cmp	r3, #0
 8102064:	f040 82ac 	bne.w	81025c0 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8102068:	683b      	ldr	r3, [r7, #0]
 810206a:	681b      	ldr	r3, [r3, #0]
 810206c:	2b00      	cmp	r3, #0
 810206e:	db2c      	blt.n	81020ca <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102070:	683b      	ldr	r3, [r7, #0]
 8102072:	681b      	ldr	r3, [r3, #0]
 8102074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102078:	2b00      	cmp	r3, #0
 810207a:	d108      	bne.n	810208e <HAL_ADC_ConfigChannel+0x6a>
 810207c:	683b      	ldr	r3, [r7, #0]
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	0e9b      	lsrs	r3, r3, #26
 8102082:	f003 031f 	and.w	r3, r3, #31
 8102086:	2201      	movs	r2, #1
 8102088:	fa02 f303 	lsl.w	r3, r2, r3
 810208c:	e016      	b.n	81020bc <HAL_ADC_ConfigChannel+0x98>
 810208e:	683b      	ldr	r3, [r7, #0]
 8102090:	681b      	ldr	r3, [r3, #0]
 8102092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102094:	697b      	ldr	r3, [r7, #20]
 8102096:	fa93 f3a3 	rbit	r3, r3
 810209a:	613b      	str	r3, [r7, #16]
  return result;
 810209c:	693b      	ldr	r3, [r7, #16]
 810209e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 81020a0:	69bb      	ldr	r3, [r7, #24]
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	d101      	bne.n	81020aa <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 81020a6:	2320      	movs	r3, #32
 81020a8:	e003      	b.n	81020b2 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 81020aa:	69bb      	ldr	r3, [r7, #24]
 81020ac:	fab3 f383 	clz	r3, r3
 81020b0:	b2db      	uxtb	r3, r3
 81020b2:	f003 031f 	and.w	r3, r3, #31
 81020b6:	2201      	movs	r2, #1
 81020b8:	fa02 f303 	lsl.w	r3, r2, r3
 81020bc:	687a      	ldr	r2, [r7, #4]
 81020be:	6812      	ldr	r2, [r2, #0]
 81020c0:	69d1      	ldr	r1, [r2, #28]
 81020c2:	687a      	ldr	r2, [r7, #4]
 81020c4:	6812      	ldr	r2, [r2, #0]
 81020c6:	430b      	orrs	r3, r1
 81020c8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	6818      	ldr	r0, [r3, #0]
 81020ce:	683b      	ldr	r3, [r7, #0]
 81020d0:	6859      	ldr	r1, [r3, #4]
 81020d2:	683b      	ldr	r3, [r7, #0]
 81020d4:	681b      	ldr	r3, [r3, #0]
 81020d6:	461a      	mov	r2, r3
 81020d8:	f7ff fcff 	bl	8101ada <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	681b      	ldr	r3, [r3, #0]
 81020e0:	4618      	mov	r0, r3
 81020e2:	f7ff fdd6 	bl	8101c92 <LL_ADC_REG_IsConversionOngoing>
 81020e6:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	681b      	ldr	r3, [r3, #0]
 81020ec:	4618      	mov	r0, r3
 81020ee:	f7ff fde3 	bl	8101cb8 <LL_ADC_INJ_IsConversionOngoing>
 81020f2:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81020f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81020f6:	2b00      	cmp	r3, #0
 81020f8:	f040 80b8 	bne.w	810226c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81020fe:	2b00      	cmp	r3, #0
 8102100:	f040 80b4 	bne.w	810226c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	6818      	ldr	r0, [r3, #0]
 8102108:	683b      	ldr	r3, [r7, #0]
 810210a:	6819      	ldr	r1, [r3, #0]
 810210c:	683b      	ldr	r3, [r7, #0]
 810210e:	689b      	ldr	r3, [r3, #8]
 8102110:	461a      	mov	r2, r3
 8102112:	f7ff fd0e 	bl	8101b32 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102116:	4b30      	ldr	r3, [pc, #192]	@ (81021d8 <HAL_ADC_ConfigChannel+0x1b4>)
 8102118:	681b      	ldr	r3, [r3, #0]
 810211a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 810211e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102122:	d10b      	bne.n	810213c <HAL_ADC_ConfigChannel+0x118>
 8102124:	683b      	ldr	r3, [r7, #0]
 8102126:	695a      	ldr	r2, [r3, #20]
 8102128:	687b      	ldr	r3, [r7, #4]
 810212a:	681b      	ldr	r3, [r3, #0]
 810212c:	68db      	ldr	r3, [r3, #12]
 810212e:	089b      	lsrs	r3, r3, #2
 8102130:	f003 0307 	and.w	r3, r3, #7
 8102134:	005b      	lsls	r3, r3, #1
 8102136:	fa02 f303 	lsl.w	r3, r2, r3
 810213a:	e01d      	b.n	8102178 <HAL_ADC_ConfigChannel+0x154>
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	681b      	ldr	r3, [r3, #0]
 8102140:	68db      	ldr	r3, [r3, #12]
 8102142:	f003 0310 	and.w	r3, r3, #16
 8102146:	2b00      	cmp	r3, #0
 8102148:	d10b      	bne.n	8102162 <HAL_ADC_ConfigChannel+0x13e>
 810214a:	683b      	ldr	r3, [r7, #0]
 810214c:	695a      	ldr	r2, [r3, #20]
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	681b      	ldr	r3, [r3, #0]
 8102152:	68db      	ldr	r3, [r3, #12]
 8102154:	089b      	lsrs	r3, r3, #2
 8102156:	f003 0307 	and.w	r3, r3, #7
 810215a:	005b      	lsls	r3, r3, #1
 810215c:	fa02 f303 	lsl.w	r3, r2, r3
 8102160:	e00a      	b.n	8102178 <HAL_ADC_ConfigChannel+0x154>
 8102162:	683b      	ldr	r3, [r7, #0]
 8102164:	695a      	ldr	r2, [r3, #20]
 8102166:	687b      	ldr	r3, [r7, #4]
 8102168:	681b      	ldr	r3, [r3, #0]
 810216a:	68db      	ldr	r3, [r3, #12]
 810216c:	089b      	lsrs	r3, r3, #2
 810216e:	f003 0304 	and.w	r3, r3, #4
 8102172:	005b      	lsls	r3, r3, #1
 8102174:	fa02 f303 	lsl.w	r3, r2, r3
 8102178:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810217a:	683b      	ldr	r3, [r7, #0]
 810217c:	691b      	ldr	r3, [r3, #16]
 810217e:	2b04      	cmp	r3, #4
 8102180:	d02c      	beq.n	81021dc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	6818      	ldr	r0, [r3, #0]
 8102186:	683b      	ldr	r3, [r7, #0]
 8102188:	6919      	ldr	r1, [r3, #16]
 810218a:	683b      	ldr	r3, [r7, #0]
 810218c:	681a      	ldr	r2, [r3, #0]
 810218e:	6a3b      	ldr	r3, [r7, #32]
 8102190:	f7ff fc4f 	bl	8101a32 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	6818      	ldr	r0, [r3, #0]
 8102198:	683b      	ldr	r3, [r7, #0]
 810219a:	6919      	ldr	r1, [r3, #16]
 810219c:	683b      	ldr	r3, [r7, #0]
 810219e:	7e5b      	ldrb	r3, [r3, #25]
 81021a0:	2b01      	cmp	r3, #1
 81021a2:	d102      	bne.n	81021aa <HAL_ADC_ConfigChannel+0x186>
 81021a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81021a8:	e000      	b.n	81021ac <HAL_ADC_ConfigChannel+0x188>
 81021aa:	2300      	movs	r3, #0
 81021ac:	461a      	mov	r2, r3
 81021ae:	f7ff fc79 	bl	8101aa4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81021b2:	687b      	ldr	r3, [r7, #4]
 81021b4:	6818      	ldr	r0, [r3, #0]
 81021b6:	683b      	ldr	r3, [r7, #0]
 81021b8:	6919      	ldr	r1, [r3, #16]
 81021ba:	683b      	ldr	r3, [r7, #0]
 81021bc:	7e1b      	ldrb	r3, [r3, #24]
 81021be:	2b01      	cmp	r3, #1
 81021c0:	d102      	bne.n	81021c8 <HAL_ADC_ConfigChannel+0x1a4>
 81021c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81021c6:	e000      	b.n	81021ca <HAL_ADC_ConfigChannel+0x1a6>
 81021c8:	2300      	movs	r3, #0
 81021ca:	461a      	mov	r2, r3
 81021cc:	f7ff fc51 	bl	8101a72 <LL_ADC_SetDataRightShift>
 81021d0:	e04c      	b.n	810226c <HAL_ADC_ConfigChannel+0x248>
 81021d2:	bf00      	nop
 81021d4:	47ff0000 	.word	0x47ff0000
 81021d8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	681b      	ldr	r3, [r3, #0]
 81021e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81021e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81021e6:	683b      	ldr	r3, [r7, #0]
 81021e8:	681b      	ldr	r3, [r3, #0]
 81021ea:	069b      	lsls	r3, r3, #26
 81021ec:	429a      	cmp	r2, r3
 81021ee:	d107      	bne.n	8102200 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	681b      	ldr	r3, [r3, #0]
 81021f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 81021f6:	687b      	ldr	r3, [r7, #4]
 81021f8:	681b      	ldr	r3, [r3, #0]
 81021fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81021fe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102200:	687b      	ldr	r3, [r7, #4]
 8102202:	681b      	ldr	r3, [r3, #0]
 8102204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810220a:	683b      	ldr	r3, [r7, #0]
 810220c:	681b      	ldr	r3, [r3, #0]
 810220e:	069b      	lsls	r3, r3, #26
 8102210:	429a      	cmp	r2, r3
 8102212:	d107      	bne.n	8102224 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102214:	687b      	ldr	r3, [r7, #4]
 8102216:	681b      	ldr	r3, [r3, #0]
 8102218:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	681b      	ldr	r3, [r3, #0]
 810221e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8102222:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	681b      	ldr	r3, [r3, #0]
 8102228:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810222a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810222e:	683b      	ldr	r3, [r7, #0]
 8102230:	681b      	ldr	r3, [r3, #0]
 8102232:	069b      	lsls	r3, r3, #26
 8102234:	429a      	cmp	r2, r3
 8102236:	d107      	bne.n	8102248 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	681b      	ldr	r3, [r3, #0]
 810223c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	681b      	ldr	r3, [r3, #0]
 8102242:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8102246:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102248:	687b      	ldr	r3, [r7, #4]
 810224a:	681b      	ldr	r3, [r3, #0]
 810224c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810224e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102252:	683b      	ldr	r3, [r7, #0]
 8102254:	681b      	ldr	r3, [r3, #0]
 8102256:	069b      	lsls	r3, r3, #26
 8102258:	429a      	cmp	r2, r3
 810225a:	d107      	bne.n	810226c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 810225c:	687b      	ldr	r3, [r7, #4]
 810225e:	681b      	ldr	r3, [r3, #0]
 8102260:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	681b      	ldr	r3, [r3, #0]
 8102266:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810226a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	4618      	mov	r0, r3
 8102272:	f7ff fcfb 	bl	8101c6c <LL_ADC_IsEnabled>
 8102276:	4603      	mov	r3, r0
 8102278:	2b00      	cmp	r3, #0
 810227a:	f040 81aa 	bne.w	81025d2 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	6818      	ldr	r0, [r3, #0]
 8102282:	683b      	ldr	r3, [r7, #0]
 8102284:	6819      	ldr	r1, [r3, #0]
 8102286:	683b      	ldr	r3, [r7, #0]
 8102288:	68db      	ldr	r3, [r3, #12]
 810228a:	461a      	mov	r2, r3
 810228c:	f7ff fc7c 	bl	8101b88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102290:	683b      	ldr	r3, [r7, #0]
 8102292:	68db      	ldr	r3, [r3, #12]
 8102294:	4a87      	ldr	r2, [pc, #540]	@ (81024b4 <HAL_ADC_ConfigChannel+0x490>)
 8102296:	4293      	cmp	r3, r2
 8102298:	f040 809a 	bne.w	81023d0 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	681a      	ldr	r2, [r3, #0]
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	681b      	ldr	r3, [r3, #0]
 81022a4:	4984      	ldr	r1, [pc, #528]	@ (81024b8 <HAL_ADC_ConfigChannel+0x494>)
 81022a6:	428b      	cmp	r3, r1
 81022a8:	d147      	bne.n	810233a <HAL_ADC_ConfigChannel+0x316>
 81022aa:	683b      	ldr	r3, [r7, #0]
 81022ac:	681b      	ldr	r3, [r3, #0]
 81022ae:	4983      	ldr	r1, [pc, #524]	@ (81024bc <HAL_ADC_ConfigChannel+0x498>)
 81022b0:	428b      	cmp	r3, r1
 81022b2:	d040      	beq.n	8102336 <HAL_ADC_ConfigChannel+0x312>
 81022b4:	683b      	ldr	r3, [r7, #0]
 81022b6:	681b      	ldr	r3, [r3, #0]
 81022b8:	4981      	ldr	r1, [pc, #516]	@ (81024c0 <HAL_ADC_ConfigChannel+0x49c>)
 81022ba:	428b      	cmp	r3, r1
 81022bc:	d039      	beq.n	8102332 <HAL_ADC_ConfigChannel+0x30e>
 81022be:	683b      	ldr	r3, [r7, #0]
 81022c0:	681b      	ldr	r3, [r3, #0]
 81022c2:	4980      	ldr	r1, [pc, #512]	@ (81024c4 <HAL_ADC_ConfigChannel+0x4a0>)
 81022c4:	428b      	cmp	r3, r1
 81022c6:	d032      	beq.n	810232e <HAL_ADC_ConfigChannel+0x30a>
 81022c8:	683b      	ldr	r3, [r7, #0]
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	497e      	ldr	r1, [pc, #504]	@ (81024c8 <HAL_ADC_ConfigChannel+0x4a4>)
 81022ce:	428b      	cmp	r3, r1
 81022d0:	d02b      	beq.n	810232a <HAL_ADC_ConfigChannel+0x306>
 81022d2:	683b      	ldr	r3, [r7, #0]
 81022d4:	681b      	ldr	r3, [r3, #0]
 81022d6:	497d      	ldr	r1, [pc, #500]	@ (81024cc <HAL_ADC_ConfigChannel+0x4a8>)
 81022d8:	428b      	cmp	r3, r1
 81022da:	d024      	beq.n	8102326 <HAL_ADC_ConfigChannel+0x302>
 81022dc:	683b      	ldr	r3, [r7, #0]
 81022de:	681b      	ldr	r3, [r3, #0]
 81022e0:	497b      	ldr	r1, [pc, #492]	@ (81024d0 <HAL_ADC_ConfigChannel+0x4ac>)
 81022e2:	428b      	cmp	r3, r1
 81022e4:	d01d      	beq.n	8102322 <HAL_ADC_ConfigChannel+0x2fe>
 81022e6:	683b      	ldr	r3, [r7, #0]
 81022e8:	681b      	ldr	r3, [r3, #0]
 81022ea:	497a      	ldr	r1, [pc, #488]	@ (81024d4 <HAL_ADC_ConfigChannel+0x4b0>)
 81022ec:	428b      	cmp	r3, r1
 81022ee:	d016      	beq.n	810231e <HAL_ADC_ConfigChannel+0x2fa>
 81022f0:	683b      	ldr	r3, [r7, #0]
 81022f2:	681b      	ldr	r3, [r3, #0]
 81022f4:	4978      	ldr	r1, [pc, #480]	@ (81024d8 <HAL_ADC_ConfigChannel+0x4b4>)
 81022f6:	428b      	cmp	r3, r1
 81022f8:	d00f      	beq.n	810231a <HAL_ADC_ConfigChannel+0x2f6>
 81022fa:	683b      	ldr	r3, [r7, #0]
 81022fc:	681b      	ldr	r3, [r3, #0]
 81022fe:	4977      	ldr	r1, [pc, #476]	@ (81024dc <HAL_ADC_ConfigChannel+0x4b8>)
 8102300:	428b      	cmp	r3, r1
 8102302:	d008      	beq.n	8102316 <HAL_ADC_ConfigChannel+0x2f2>
 8102304:	683b      	ldr	r3, [r7, #0]
 8102306:	681b      	ldr	r3, [r3, #0]
 8102308:	4975      	ldr	r1, [pc, #468]	@ (81024e0 <HAL_ADC_ConfigChannel+0x4bc>)
 810230a:	428b      	cmp	r3, r1
 810230c:	d101      	bne.n	8102312 <HAL_ADC_ConfigChannel+0x2ee>
 810230e:	4b75      	ldr	r3, [pc, #468]	@ (81024e4 <HAL_ADC_ConfigChannel+0x4c0>)
 8102310:	e05a      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 8102312:	2300      	movs	r3, #0
 8102314:	e058      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 8102316:	4b74      	ldr	r3, [pc, #464]	@ (81024e8 <HAL_ADC_ConfigChannel+0x4c4>)
 8102318:	e056      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 810231a:	4b74      	ldr	r3, [pc, #464]	@ (81024ec <HAL_ADC_ConfigChannel+0x4c8>)
 810231c:	e054      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 810231e:	4b6e      	ldr	r3, [pc, #440]	@ (81024d8 <HAL_ADC_ConfigChannel+0x4b4>)
 8102320:	e052      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 8102322:	4b6c      	ldr	r3, [pc, #432]	@ (81024d4 <HAL_ADC_ConfigChannel+0x4b0>)
 8102324:	e050      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 8102326:	4b72      	ldr	r3, [pc, #456]	@ (81024f0 <HAL_ADC_ConfigChannel+0x4cc>)
 8102328:	e04e      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 810232a:	4b72      	ldr	r3, [pc, #456]	@ (81024f4 <HAL_ADC_ConfigChannel+0x4d0>)
 810232c:	e04c      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 810232e:	4b72      	ldr	r3, [pc, #456]	@ (81024f8 <HAL_ADC_ConfigChannel+0x4d4>)
 8102330:	e04a      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 8102332:	4b72      	ldr	r3, [pc, #456]	@ (81024fc <HAL_ADC_ConfigChannel+0x4d8>)
 8102334:	e048      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 8102336:	2301      	movs	r3, #1
 8102338:	e046      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	681b      	ldr	r3, [r3, #0]
 810233e:	4970      	ldr	r1, [pc, #448]	@ (8102500 <HAL_ADC_ConfigChannel+0x4dc>)
 8102340:	428b      	cmp	r3, r1
 8102342:	d140      	bne.n	81023c6 <HAL_ADC_ConfigChannel+0x3a2>
 8102344:	683b      	ldr	r3, [r7, #0]
 8102346:	681b      	ldr	r3, [r3, #0]
 8102348:	495c      	ldr	r1, [pc, #368]	@ (81024bc <HAL_ADC_ConfigChannel+0x498>)
 810234a:	428b      	cmp	r3, r1
 810234c:	d039      	beq.n	81023c2 <HAL_ADC_ConfigChannel+0x39e>
 810234e:	683b      	ldr	r3, [r7, #0]
 8102350:	681b      	ldr	r3, [r3, #0]
 8102352:	495b      	ldr	r1, [pc, #364]	@ (81024c0 <HAL_ADC_ConfigChannel+0x49c>)
 8102354:	428b      	cmp	r3, r1
 8102356:	d032      	beq.n	81023be <HAL_ADC_ConfigChannel+0x39a>
 8102358:	683b      	ldr	r3, [r7, #0]
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	4959      	ldr	r1, [pc, #356]	@ (81024c4 <HAL_ADC_ConfigChannel+0x4a0>)
 810235e:	428b      	cmp	r3, r1
 8102360:	d02b      	beq.n	81023ba <HAL_ADC_ConfigChannel+0x396>
 8102362:	683b      	ldr	r3, [r7, #0]
 8102364:	681b      	ldr	r3, [r3, #0]
 8102366:	4958      	ldr	r1, [pc, #352]	@ (81024c8 <HAL_ADC_ConfigChannel+0x4a4>)
 8102368:	428b      	cmp	r3, r1
 810236a:	d024      	beq.n	81023b6 <HAL_ADC_ConfigChannel+0x392>
 810236c:	683b      	ldr	r3, [r7, #0]
 810236e:	681b      	ldr	r3, [r3, #0]
 8102370:	4956      	ldr	r1, [pc, #344]	@ (81024cc <HAL_ADC_ConfigChannel+0x4a8>)
 8102372:	428b      	cmp	r3, r1
 8102374:	d01d      	beq.n	81023b2 <HAL_ADC_ConfigChannel+0x38e>
 8102376:	683b      	ldr	r3, [r7, #0]
 8102378:	681b      	ldr	r3, [r3, #0]
 810237a:	4955      	ldr	r1, [pc, #340]	@ (81024d0 <HAL_ADC_ConfigChannel+0x4ac>)
 810237c:	428b      	cmp	r3, r1
 810237e:	d016      	beq.n	81023ae <HAL_ADC_ConfigChannel+0x38a>
 8102380:	683b      	ldr	r3, [r7, #0]
 8102382:	681b      	ldr	r3, [r3, #0]
 8102384:	4953      	ldr	r1, [pc, #332]	@ (81024d4 <HAL_ADC_ConfigChannel+0x4b0>)
 8102386:	428b      	cmp	r3, r1
 8102388:	d00f      	beq.n	81023aa <HAL_ADC_ConfigChannel+0x386>
 810238a:	683b      	ldr	r3, [r7, #0]
 810238c:	681b      	ldr	r3, [r3, #0]
 810238e:	4952      	ldr	r1, [pc, #328]	@ (81024d8 <HAL_ADC_ConfigChannel+0x4b4>)
 8102390:	428b      	cmp	r3, r1
 8102392:	d008      	beq.n	81023a6 <HAL_ADC_ConfigChannel+0x382>
 8102394:	683b      	ldr	r3, [r7, #0]
 8102396:	681b      	ldr	r3, [r3, #0]
 8102398:	4951      	ldr	r1, [pc, #324]	@ (81024e0 <HAL_ADC_ConfigChannel+0x4bc>)
 810239a:	428b      	cmp	r3, r1
 810239c:	d101      	bne.n	81023a2 <HAL_ADC_ConfigChannel+0x37e>
 810239e:	4b51      	ldr	r3, [pc, #324]	@ (81024e4 <HAL_ADC_ConfigChannel+0x4c0>)
 81023a0:	e012      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 81023a2:	2300      	movs	r3, #0
 81023a4:	e010      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 81023a6:	4b51      	ldr	r3, [pc, #324]	@ (81024ec <HAL_ADC_ConfigChannel+0x4c8>)
 81023a8:	e00e      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 81023aa:	4b4b      	ldr	r3, [pc, #300]	@ (81024d8 <HAL_ADC_ConfigChannel+0x4b4>)
 81023ac:	e00c      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 81023ae:	4b49      	ldr	r3, [pc, #292]	@ (81024d4 <HAL_ADC_ConfigChannel+0x4b0>)
 81023b0:	e00a      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 81023b2:	4b4f      	ldr	r3, [pc, #316]	@ (81024f0 <HAL_ADC_ConfigChannel+0x4cc>)
 81023b4:	e008      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 81023b6:	4b4f      	ldr	r3, [pc, #316]	@ (81024f4 <HAL_ADC_ConfigChannel+0x4d0>)
 81023b8:	e006      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 81023ba:	4b4f      	ldr	r3, [pc, #316]	@ (81024f8 <HAL_ADC_ConfigChannel+0x4d4>)
 81023bc:	e004      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 81023be:	4b4f      	ldr	r3, [pc, #316]	@ (81024fc <HAL_ADC_ConfigChannel+0x4d8>)
 81023c0:	e002      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 81023c2:	2301      	movs	r3, #1
 81023c4:	e000      	b.n	81023c8 <HAL_ADC_ConfigChannel+0x3a4>
 81023c6:	2300      	movs	r3, #0
 81023c8:	4619      	mov	r1, r3
 81023ca:	4610      	mov	r0, r2
 81023cc:	f7ff fafe 	bl	81019cc <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 81023d0:	683b      	ldr	r3, [r7, #0]
 81023d2:	681b      	ldr	r3, [r3, #0]
 81023d4:	2b00      	cmp	r3, #0
 81023d6:	f280 80fc 	bge.w	81025d2 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	681b      	ldr	r3, [r3, #0]
 81023de:	4a36      	ldr	r2, [pc, #216]	@ (81024b8 <HAL_ADC_ConfigChannel+0x494>)
 81023e0:	4293      	cmp	r3, r2
 81023e2:	d004      	beq.n	81023ee <HAL_ADC_ConfigChannel+0x3ca>
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	4a45      	ldr	r2, [pc, #276]	@ (8102500 <HAL_ADC_ConfigChannel+0x4dc>)
 81023ea:	4293      	cmp	r3, r2
 81023ec:	d101      	bne.n	81023f2 <HAL_ADC_ConfigChannel+0x3ce>
 81023ee:	4b45      	ldr	r3, [pc, #276]	@ (8102504 <HAL_ADC_ConfigChannel+0x4e0>)
 81023f0:	e000      	b.n	81023f4 <HAL_ADC_ConfigChannel+0x3d0>
 81023f2:	4b45      	ldr	r3, [pc, #276]	@ (8102508 <HAL_ADC_ConfigChannel+0x4e4>)
 81023f4:	4618      	mov	r0, r3
 81023f6:	f7ff fadb 	bl	81019b0 <LL_ADC_GetCommonPathInternalCh>
 81023fa:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81023fc:	687b      	ldr	r3, [r7, #4]
 81023fe:	681b      	ldr	r3, [r3, #0]
 8102400:	4a2d      	ldr	r2, [pc, #180]	@ (81024b8 <HAL_ADC_ConfigChannel+0x494>)
 8102402:	4293      	cmp	r3, r2
 8102404:	d004      	beq.n	8102410 <HAL_ADC_ConfigChannel+0x3ec>
 8102406:	687b      	ldr	r3, [r7, #4]
 8102408:	681b      	ldr	r3, [r3, #0]
 810240a:	4a3d      	ldr	r2, [pc, #244]	@ (8102500 <HAL_ADC_ConfigChannel+0x4dc>)
 810240c:	4293      	cmp	r3, r2
 810240e:	d10e      	bne.n	810242e <HAL_ADC_ConfigChannel+0x40a>
 8102410:	4829      	ldr	r0, [pc, #164]	@ (81024b8 <HAL_ADC_ConfigChannel+0x494>)
 8102412:	f7ff fc2b 	bl	8101c6c <LL_ADC_IsEnabled>
 8102416:	4604      	mov	r4, r0
 8102418:	4839      	ldr	r0, [pc, #228]	@ (8102500 <HAL_ADC_ConfigChannel+0x4dc>)
 810241a:	f7ff fc27 	bl	8101c6c <LL_ADC_IsEnabled>
 810241e:	4603      	mov	r3, r0
 8102420:	4323      	orrs	r3, r4
 8102422:	2b00      	cmp	r3, #0
 8102424:	bf0c      	ite	eq
 8102426:	2301      	moveq	r3, #1
 8102428:	2300      	movne	r3, #0
 810242a:	b2db      	uxtb	r3, r3
 810242c:	e008      	b.n	8102440 <HAL_ADC_ConfigChannel+0x41c>
 810242e:	4837      	ldr	r0, [pc, #220]	@ (810250c <HAL_ADC_ConfigChannel+0x4e8>)
 8102430:	f7ff fc1c 	bl	8101c6c <LL_ADC_IsEnabled>
 8102434:	4603      	mov	r3, r0
 8102436:	2b00      	cmp	r3, #0
 8102438:	bf0c      	ite	eq
 810243a:	2301      	moveq	r3, #1
 810243c:	2300      	movne	r3, #0
 810243e:	b2db      	uxtb	r3, r3
 8102440:	2b00      	cmp	r3, #0
 8102442:	f000 80b3 	beq.w	81025ac <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102446:	683b      	ldr	r3, [r7, #0]
 8102448:	681b      	ldr	r3, [r3, #0]
 810244a:	4a31      	ldr	r2, [pc, #196]	@ (8102510 <HAL_ADC_ConfigChannel+0x4ec>)
 810244c:	4293      	cmp	r3, r2
 810244e:	d165      	bne.n	810251c <HAL_ADC_ConfigChannel+0x4f8>
 8102450:	69fb      	ldr	r3, [r7, #28]
 8102452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8102456:	2b00      	cmp	r3, #0
 8102458:	d160      	bne.n	810251c <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	681b      	ldr	r3, [r3, #0]
 810245e:	4a2b      	ldr	r2, [pc, #172]	@ (810250c <HAL_ADC_ConfigChannel+0x4e8>)
 8102460:	4293      	cmp	r3, r2
 8102462:	f040 80b6 	bne.w	81025d2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	681b      	ldr	r3, [r3, #0]
 810246a:	4a13      	ldr	r2, [pc, #76]	@ (81024b8 <HAL_ADC_ConfigChannel+0x494>)
 810246c:	4293      	cmp	r3, r2
 810246e:	d004      	beq.n	810247a <HAL_ADC_ConfigChannel+0x456>
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	681b      	ldr	r3, [r3, #0]
 8102474:	4a22      	ldr	r2, [pc, #136]	@ (8102500 <HAL_ADC_ConfigChannel+0x4dc>)
 8102476:	4293      	cmp	r3, r2
 8102478:	d101      	bne.n	810247e <HAL_ADC_ConfigChannel+0x45a>
 810247a:	4a22      	ldr	r2, [pc, #136]	@ (8102504 <HAL_ADC_ConfigChannel+0x4e0>)
 810247c:	e000      	b.n	8102480 <HAL_ADC_ConfigChannel+0x45c>
 810247e:	4a22      	ldr	r2, [pc, #136]	@ (8102508 <HAL_ADC_ConfigChannel+0x4e4>)
 8102480:	69fb      	ldr	r3, [r7, #28]
 8102482:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8102486:	4619      	mov	r1, r3
 8102488:	4610      	mov	r0, r2
 810248a:	f7ff fa7e 	bl	810198a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810248e:	4b21      	ldr	r3, [pc, #132]	@ (8102514 <HAL_ADC_ConfigChannel+0x4f0>)
 8102490:	681b      	ldr	r3, [r3, #0]
 8102492:	099b      	lsrs	r3, r3, #6
 8102494:	4a20      	ldr	r2, [pc, #128]	@ (8102518 <HAL_ADC_ConfigChannel+0x4f4>)
 8102496:	fba2 2303 	umull	r2, r3, r2, r3
 810249a:	099b      	lsrs	r3, r3, #6
 810249c:	3301      	adds	r3, #1
 810249e:	005b      	lsls	r3, r3, #1
 81024a0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 81024a2:	e002      	b.n	81024aa <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 81024a4:	68fb      	ldr	r3, [r7, #12]
 81024a6:	3b01      	subs	r3, #1
 81024a8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 81024aa:	68fb      	ldr	r3, [r7, #12]
 81024ac:	2b00      	cmp	r3, #0
 81024ae:	d1f9      	bne.n	81024a4 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81024b0:	e08f      	b.n	81025d2 <HAL_ADC_ConfigChannel+0x5ae>
 81024b2:	bf00      	nop
 81024b4:	47ff0000 	.word	0x47ff0000
 81024b8:	40022000 	.word	0x40022000
 81024bc:	04300002 	.word	0x04300002
 81024c0:	08600004 	.word	0x08600004
 81024c4:	0c900008 	.word	0x0c900008
 81024c8:	10c00010 	.word	0x10c00010
 81024cc:	14f00020 	.word	0x14f00020
 81024d0:	2a000400 	.word	0x2a000400
 81024d4:	2e300800 	.word	0x2e300800
 81024d8:	32601000 	.word	0x32601000
 81024dc:	43210000 	.word	0x43210000
 81024e0:	4b840000 	.word	0x4b840000
 81024e4:	4fb80000 	.word	0x4fb80000
 81024e8:	47520000 	.word	0x47520000
 81024ec:	36902000 	.word	0x36902000
 81024f0:	25b00200 	.word	0x25b00200
 81024f4:	21800100 	.word	0x21800100
 81024f8:	1d500080 	.word	0x1d500080
 81024fc:	19200040 	.word	0x19200040
 8102500:	40022100 	.word	0x40022100
 8102504:	40022300 	.word	0x40022300
 8102508:	58026300 	.word	0x58026300
 810250c:	58026000 	.word	0x58026000
 8102510:	cb840000 	.word	0xcb840000
 8102514:	10000000 	.word	0x10000000
 8102518:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 810251c:	683b      	ldr	r3, [r7, #0]
 810251e:	681b      	ldr	r3, [r3, #0]
 8102520:	4a31      	ldr	r2, [pc, #196]	@ (81025e8 <HAL_ADC_ConfigChannel+0x5c4>)
 8102522:	4293      	cmp	r3, r2
 8102524:	d11e      	bne.n	8102564 <HAL_ADC_ConfigChannel+0x540>
 8102526:	69fb      	ldr	r3, [r7, #28]
 8102528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810252c:	2b00      	cmp	r3, #0
 810252e:	d119      	bne.n	8102564 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	681b      	ldr	r3, [r3, #0]
 8102534:	4a2d      	ldr	r2, [pc, #180]	@ (81025ec <HAL_ADC_ConfigChannel+0x5c8>)
 8102536:	4293      	cmp	r3, r2
 8102538:	d14b      	bne.n	81025d2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	681b      	ldr	r3, [r3, #0]
 810253e:	4a2c      	ldr	r2, [pc, #176]	@ (81025f0 <HAL_ADC_ConfigChannel+0x5cc>)
 8102540:	4293      	cmp	r3, r2
 8102542:	d004      	beq.n	810254e <HAL_ADC_ConfigChannel+0x52a>
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	681b      	ldr	r3, [r3, #0]
 8102548:	4a2a      	ldr	r2, [pc, #168]	@ (81025f4 <HAL_ADC_ConfigChannel+0x5d0>)
 810254a:	4293      	cmp	r3, r2
 810254c:	d101      	bne.n	8102552 <HAL_ADC_ConfigChannel+0x52e>
 810254e:	4a2a      	ldr	r2, [pc, #168]	@ (81025f8 <HAL_ADC_ConfigChannel+0x5d4>)
 8102550:	e000      	b.n	8102554 <HAL_ADC_ConfigChannel+0x530>
 8102552:	4a2a      	ldr	r2, [pc, #168]	@ (81025fc <HAL_ADC_ConfigChannel+0x5d8>)
 8102554:	69fb      	ldr	r3, [r7, #28]
 8102556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810255a:	4619      	mov	r1, r3
 810255c:	4610      	mov	r0, r2
 810255e:	f7ff fa14 	bl	810198a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102562:	e036      	b.n	81025d2 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102564:	683b      	ldr	r3, [r7, #0]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	4a25      	ldr	r2, [pc, #148]	@ (8102600 <HAL_ADC_ConfigChannel+0x5dc>)
 810256a:	4293      	cmp	r3, r2
 810256c:	d131      	bne.n	81025d2 <HAL_ADC_ConfigChannel+0x5ae>
 810256e:	69fb      	ldr	r3, [r7, #28]
 8102570:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8102574:	2b00      	cmp	r3, #0
 8102576:	d12c      	bne.n	81025d2 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	681b      	ldr	r3, [r3, #0]
 810257c:	4a1b      	ldr	r2, [pc, #108]	@ (81025ec <HAL_ADC_ConfigChannel+0x5c8>)
 810257e:	4293      	cmp	r3, r2
 8102580:	d127      	bne.n	81025d2 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	681b      	ldr	r3, [r3, #0]
 8102586:	4a1a      	ldr	r2, [pc, #104]	@ (81025f0 <HAL_ADC_ConfigChannel+0x5cc>)
 8102588:	4293      	cmp	r3, r2
 810258a:	d004      	beq.n	8102596 <HAL_ADC_ConfigChannel+0x572>
 810258c:	687b      	ldr	r3, [r7, #4]
 810258e:	681b      	ldr	r3, [r3, #0]
 8102590:	4a18      	ldr	r2, [pc, #96]	@ (81025f4 <HAL_ADC_ConfigChannel+0x5d0>)
 8102592:	4293      	cmp	r3, r2
 8102594:	d101      	bne.n	810259a <HAL_ADC_ConfigChannel+0x576>
 8102596:	4a18      	ldr	r2, [pc, #96]	@ (81025f8 <HAL_ADC_ConfigChannel+0x5d4>)
 8102598:	e000      	b.n	810259c <HAL_ADC_ConfigChannel+0x578>
 810259a:	4a18      	ldr	r2, [pc, #96]	@ (81025fc <HAL_ADC_ConfigChannel+0x5d8>)
 810259c:	69fb      	ldr	r3, [r7, #28]
 810259e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81025a2:	4619      	mov	r1, r3
 81025a4:	4610      	mov	r0, r2
 81025a6:	f7ff f9f0 	bl	810198a <LL_ADC_SetCommonPathInternalCh>
 81025aa:	e012      	b.n	81025d2 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81025ac:	687b      	ldr	r3, [r7, #4]
 81025ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81025b0:	f043 0220 	orr.w	r2, r3, #32
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 81025b8:	2301      	movs	r3, #1
 81025ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 81025be:	e008      	b.n	81025d2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81025c4:	f043 0220 	orr.w	r2, r3, #32
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81025cc:	2301      	movs	r3, #1
 81025ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	2200      	movs	r2, #0
 81025d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81025da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 81025de:	4618      	mov	r0, r3
 81025e0:	3734      	adds	r7, #52	@ 0x34
 81025e2:	46bd      	mov	sp, r7
 81025e4:	bd90      	pop	{r4, r7, pc}
 81025e6:	bf00      	nop
 81025e8:	c7520000 	.word	0xc7520000
 81025ec:	58026000 	.word	0x58026000
 81025f0:	40022000 	.word	0x40022000
 81025f4:	40022100 	.word	0x40022100
 81025f8:	40022300 	.word	0x40022300
 81025fc:	58026300 	.word	0x58026300
 8102600:	cfb80000 	.word	0xcfb80000

08102604 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8102604:	b580      	push	{r7, lr}
 8102606:	b084      	sub	sp, #16
 8102608:	af00      	add	r7, sp, #0
 810260a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 810260c:	687b      	ldr	r3, [r7, #4]
 810260e:	681b      	ldr	r3, [r3, #0]
 8102610:	4a7a      	ldr	r2, [pc, #488]	@ (81027fc <ADC_ConfigureBoostMode+0x1f8>)
 8102612:	4293      	cmp	r3, r2
 8102614:	d004      	beq.n	8102620 <ADC_ConfigureBoostMode+0x1c>
 8102616:	687b      	ldr	r3, [r7, #4]
 8102618:	681b      	ldr	r3, [r3, #0]
 810261a:	4a79      	ldr	r2, [pc, #484]	@ (8102800 <ADC_ConfigureBoostMode+0x1fc>)
 810261c:	4293      	cmp	r3, r2
 810261e:	d109      	bne.n	8102634 <ADC_ConfigureBoostMode+0x30>
 8102620:	4b78      	ldr	r3, [pc, #480]	@ (8102804 <ADC_ConfigureBoostMode+0x200>)
 8102622:	689b      	ldr	r3, [r3, #8]
 8102624:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102628:	2b00      	cmp	r3, #0
 810262a:	bf14      	ite	ne
 810262c:	2301      	movne	r3, #1
 810262e:	2300      	moveq	r3, #0
 8102630:	b2db      	uxtb	r3, r3
 8102632:	e008      	b.n	8102646 <ADC_ConfigureBoostMode+0x42>
 8102634:	4b74      	ldr	r3, [pc, #464]	@ (8102808 <ADC_ConfigureBoostMode+0x204>)
 8102636:	689b      	ldr	r3, [r3, #8]
 8102638:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810263c:	2b00      	cmp	r3, #0
 810263e:	bf14      	ite	ne
 8102640:	2301      	movne	r3, #1
 8102642:	2300      	moveq	r3, #0
 8102644:	b2db      	uxtb	r3, r3
 8102646:	2b00      	cmp	r3, #0
 8102648:	d01c      	beq.n	8102684 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 810264a:	f003 f94f 	bl	81058ec <HAL_RCC_GetHCLKFreq>
 810264e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	685b      	ldr	r3, [r3, #4]
 8102654:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102658:	d010      	beq.n	810267c <ADC_ConfigureBoostMode+0x78>
 810265a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810265e:	d873      	bhi.n	8102748 <ADC_ConfigureBoostMode+0x144>
 8102660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102664:	d002      	beq.n	810266c <ADC_ConfigureBoostMode+0x68>
 8102666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810266a:	d16d      	bne.n	8102748 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 810266c:	687b      	ldr	r3, [r7, #4]
 810266e:	685b      	ldr	r3, [r3, #4]
 8102670:	0c1b      	lsrs	r3, r3, #16
 8102672:	68fa      	ldr	r2, [r7, #12]
 8102674:	fbb2 f3f3 	udiv	r3, r2, r3
 8102678:	60fb      	str	r3, [r7, #12]
        break;
 810267a:	e068      	b.n	810274e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 810267c:	68fb      	ldr	r3, [r7, #12]
 810267e:	089b      	lsrs	r3, r3, #2
 8102680:	60fb      	str	r3, [r7, #12]
        break;
 8102682:	e064      	b.n	810274e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8102684:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8102688:	f04f 0100 	mov.w	r1, #0
 810268c:	f004 fb96 	bl	8106dbc <HAL_RCCEx_GetPeriphCLKFreq>
 8102690:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	685b      	ldr	r3, [r3, #4]
 8102696:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 810269a:	d051      	beq.n	8102740 <ADC_ConfigureBoostMode+0x13c>
 810269c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81026a0:	d854      	bhi.n	810274c <ADC_ConfigureBoostMode+0x148>
 81026a2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81026a6:	d047      	beq.n	8102738 <ADC_ConfigureBoostMode+0x134>
 81026a8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81026ac:	d84e      	bhi.n	810274c <ADC_ConfigureBoostMode+0x148>
 81026ae:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81026b2:	d03d      	beq.n	8102730 <ADC_ConfigureBoostMode+0x12c>
 81026b4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81026b8:	d848      	bhi.n	810274c <ADC_ConfigureBoostMode+0x148>
 81026ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81026be:	d033      	beq.n	8102728 <ADC_ConfigureBoostMode+0x124>
 81026c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81026c4:	d842      	bhi.n	810274c <ADC_ConfigureBoostMode+0x148>
 81026c6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81026ca:	d029      	beq.n	8102720 <ADC_ConfigureBoostMode+0x11c>
 81026cc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81026d0:	d83c      	bhi.n	810274c <ADC_ConfigureBoostMode+0x148>
 81026d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81026d6:	d01a      	beq.n	810270e <ADC_ConfigureBoostMode+0x10a>
 81026d8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81026dc:	d836      	bhi.n	810274c <ADC_ConfigureBoostMode+0x148>
 81026de:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81026e2:	d014      	beq.n	810270e <ADC_ConfigureBoostMode+0x10a>
 81026e4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81026e8:	d830      	bhi.n	810274c <ADC_ConfigureBoostMode+0x148>
 81026ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81026ee:	d00e      	beq.n	810270e <ADC_ConfigureBoostMode+0x10a>
 81026f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81026f4:	d82a      	bhi.n	810274c <ADC_ConfigureBoostMode+0x148>
 81026f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81026fa:	d008      	beq.n	810270e <ADC_ConfigureBoostMode+0x10a>
 81026fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8102700:	d824      	bhi.n	810274c <ADC_ConfigureBoostMode+0x148>
 8102702:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102706:	d002      	beq.n	810270e <ADC_ConfigureBoostMode+0x10a>
 8102708:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 810270c:	d11e      	bne.n	810274c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	685b      	ldr	r3, [r3, #4]
 8102712:	0c9b      	lsrs	r3, r3, #18
 8102714:	005b      	lsls	r3, r3, #1
 8102716:	68fa      	ldr	r2, [r7, #12]
 8102718:	fbb2 f3f3 	udiv	r3, r2, r3
 810271c:	60fb      	str	r3, [r7, #12]
        break;
 810271e:	e016      	b.n	810274e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8102720:	68fb      	ldr	r3, [r7, #12]
 8102722:	091b      	lsrs	r3, r3, #4
 8102724:	60fb      	str	r3, [r7, #12]
        break;
 8102726:	e012      	b.n	810274e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8102728:	68fb      	ldr	r3, [r7, #12]
 810272a:	095b      	lsrs	r3, r3, #5
 810272c:	60fb      	str	r3, [r7, #12]
        break;
 810272e:	e00e      	b.n	810274e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8102730:	68fb      	ldr	r3, [r7, #12]
 8102732:	099b      	lsrs	r3, r3, #6
 8102734:	60fb      	str	r3, [r7, #12]
        break;
 8102736:	e00a      	b.n	810274e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8102738:	68fb      	ldr	r3, [r7, #12]
 810273a:	09db      	lsrs	r3, r3, #7
 810273c:	60fb      	str	r3, [r7, #12]
        break;
 810273e:	e006      	b.n	810274e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8102740:	68fb      	ldr	r3, [r7, #12]
 8102742:	0a1b      	lsrs	r3, r3, #8
 8102744:	60fb      	str	r3, [r7, #12]
        break;
 8102746:	e002      	b.n	810274e <ADC_ConfigureBoostMode+0x14a>
        break;
 8102748:	bf00      	nop
 810274a:	e000      	b.n	810274e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 810274c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 810274e:	f7ff f8fd 	bl	810194c <HAL_GetREVID>
 8102752:	4603      	mov	r3, r0
 8102754:	f241 0203 	movw	r2, #4099	@ 0x1003
 8102758:	4293      	cmp	r3, r2
 810275a:	d815      	bhi.n	8102788 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 810275c:	68fb      	ldr	r3, [r7, #12]
 810275e:	4a2b      	ldr	r2, [pc, #172]	@ (810280c <ADC_ConfigureBoostMode+0x208>)
 8102760:	4293      	cmp	r3, r2
 8102762:	d908      	bls.n	8102776 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102764:	687b      	ldr	r3, [r7, #4]
 8102766:	681b      	ldr	r3, [r3, #0]
 8102768:	689a      	ldr	r2, [r3, #8]
 810276a:	687b      	ldr	r3, [r7, #4]
 810276c:	681b      	ldr	r3, [r3, #0]
 810276e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8102772:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8102774:	e03e      	b.n	81027f4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102776:	687b      	ldr	r3, [r7, #4]
 8102778:	681b      	ldr	r3, [r3, #0]
 810277a:	689a      	ldr	r2, [r3, #8]
 810277c:	687b      	ldr	r3, [r7, #4]
 810277e:	681b      	ldr	r3, [r3, #0]
 8102780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8102784:	609a      	str	r2, [r3, #8]
}
 8102786:	e035      	b.n	81027f4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8102788:	68fb      	ldr	r3, [r7, #12]
 810278a:	085b      	lsrs	r3, r3, #1
 810278c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 810278e:	68fb      	ldr	r3, [r7, #12]
 8102790:	4a1f      	ldr	r2, [pc, #124]	@ (8102810 <ADC_ConfigureBoostMode+0x20c>)
 8102792:	4293      	cmp	r3, r2
 8102794:	d808      	bhi.n	81027a8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	681b      	ldr	r3, [r3, #0]
 810279a:	689a      	ldr	r2, [r3, #8]
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	681b      	ldr	r3, [r3, #0]
 81027a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 81027a4:	609a      	str	r2, [r3, #8]
}
 81027a6:	e025      	b.n	81027f4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 81027a8:	68fb      	ldr	r3, [r7, #12]
 81027aa:	4a1a      	ldr	r2, [pc, #104]	@ (8102814 <ADC_ConfigureBoostMode+0x210>)
 81027ac:	4293      	cmp	r3, r2
 81027ae:	d80a      	bhi.n	81027c6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	689b      	ldr	r3, [r3, #8]
 81027b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	681b      	ldr	r3, [r3, #0]
 81027be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81027c2:	609a      	str	r2, [r3, #8]
}
 81027c4:	e016      	b.n	81027f4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 81027c6:	68fb      	ldr	r3, [r7, #12]
 81027c8:	4a13      	ldr	r2, [pc, #76]	@ (8102818 <ADC_ConfigureBoostMode+0x214>)
 81027ca:	4293      	cmp	r3, r2
 81027cc:	d80a      	bhi.n	81027e4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81027ce:	687b      	ldr	r3, [r7, #4]
 81027d0:	681b      	ldr	r3, [r3, #0]
 81027d2:	689b      	ldr	r3, [r3, #8]
 81027d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	681b      	ldr	r3, [r3, #0]
 81027dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81027e0:	609a      	str	r2, [r3, #8]
}
 81027e2:	e007      	b.n	81027f4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	689a      	ldr	r2, [r3, #8]
 81027ea:	687b      	ldr	r3, [r7, #4]
 81027ec:	681b      	ldr	r3, [r3, #0]
 81027ee:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 81027f2:	609a      	str	r2, [r3, #8]
}
 81027f4:	bf00      	nop
 81027f6:	3710      	adds	r7, #16
 81027f8:	46bd      	mov	sp, r7
 81027fa:	bd80      	pop	{r7, pc}
 81027fc:	40022000 	.word	0x40022000
 8102800:	40022100 	.word	0x40022100
 8102804:	40022300 	.word	0x40022300
 8102808:	58026300 	.word	0x58026300
 810280c:	01312d00 	.word	0x01312d00
 8102810:	005f5e10 	.word	0x005f5e10
 8102814:	00bebc20 	.word	0x00bebc20
 8102818:	017d7840 	.word	0x017d7840

0810281c <LL_ADC_IsEnabled>:
{
 810281c:	b480      	push	{r7}
 810281e:	b083      	sub	sp, #12
 8102820:	af00      	add	r7, sp, #0
 8102822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	689b      	ldr	r3, [r3, #8]
 8102828:	f003 0301 	and.w	r3, r3, #1
 810282c:	2b01      	cmp	r3, #1
 810282e:	d101      	bne.n	8102834 <LL_ADC_IsEnabled+0x18>
 8102830:	2301      	movs	r3, #1
 8102832:	e000      	b.n	8102836 <LL_ADC_IsEnabled+0x1a>
 8102834:	2300      	movs	r3, #0
}
 8102836:	4618      	mov	r0, r3
 8102838:	370c      	adds	r7, #12
 810283a:	46bd      	mov	sp, r7
 810283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102840:	4770      	bx	lr

08102842 <LL_ADC_REG_IsConversionOngoing>:
{
 8102842:	b480      	push	{r7}
 8102844:	b083      	sub	sp, #12
 8102846:	af00      	add	r7, sp, #0
 8102848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810284a:	687b      	ldr	r3, [r7, #4]
 810284c:	689b      	ldr	r3, [r3, #8]
 810284e:	f003 0304 	and.w	r3, r3, #4
 8102852:	2b04      	cmp	r3, #4
 8102854:	d101      	bne.n	810285a <LL_ADC_REG_IsConversionOngoing+0x18>
 8102856:	2301      	movs	r3, #1
 8102858:	e000      	b.n	810285c <LL_ADC_REG_IsConversionOngoing+0x1a>
 810285a:	2300      	movs	r3, #0
}
 810285c:	4618      	mov	r0, r3
 810285e:	370c      	adds	r7, #12
 8102860:	46bd      	mov	sp, r7
 8102862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102866:	4770      	bx	lr

08102868 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8102868:	b590      	push	{r4, r7, lr}
 810286a:	b09f      	sub	sp, #124	@ 0x7c
 810286c:	af00      	add	r7, sp, #0
 810286e:	6078      	str	r0, [r7, #4]
 8102870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102872:	2300      	movs	r3, #0
 8102874:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102878:	687b      	ldr	r3, [r7, #4]
 810287a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810287e:	2b01      	cmp	r3, #1
 8102880:	d101      	bne.n	8102886 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8102882:	2302      	movs	r3, #2
 8102884:	e0c4      	b.n	8102a10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	2201      	movs	r2, #1
 810288a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810288e:	2300      	movs	r3, #0
 8102890:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8102892:	2300      	movs	r3, #0
 8102894:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	681b      	ldr	r3, [r3, #0]
 810289a:	4a5f      	ldr	r2, [pc, #380]	@ (8102a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810289c:	4293      	cmp	r3, r2
 810289e:	d102      	bne.n	81028a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81028a0:	4b5e      	ldr	r3, [pc, #376]	@ (8102a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81028a2:	60bb      	str	r3, [r7, #8]
 81028a4:	e001      	b.n	81028aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81028a6:	2300      	movs	r3, #0
 81028a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81028aa:	68bb      	ldr	r3, [r7, #8]
 81028ac:	2b00      	cmp	r3, #0
 81028ae:	d10b      	bne.n	81028c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81028b4:	f043 0220 	orr.w	r2, r3, #32
 81028b8:	687b      	ldr	r3, [r7, #4]
 81028ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81028bc:	687b      	ldr	r3, [r7, #4]
 81028be:	2200      	movs	r2, #0
 81028c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 81028c4:	2301      	movs	r3, #1
 81028c6:	e0a3      	b.n	8102a10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81028c8:	68bb      	ldr	r3, [r7, #8]
 81028ca:	4618      	mov	r0, r3
 81028cc:	f7ff ffb9 	bl	8102842 <LL_ADC_REG_IsConversionOngoing>
 81028d0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	4618      	mov	r0, r3
 81028d8:	f7ff ffb3 	bl	8102842 <LL_ADC_REG_IsConversionOngoing>
 81028dc:	4603      	mov	r3, r0
 81028de:	2b00      	cmp	r3, #0
 81028e0:	f040 8085 	bne.w	81029ee <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81028e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81028e6:	2b00      	cmp	r3, #0
 81028e8:	f040 8081 	bne.w	81029ee <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	681b      	ldr	r3, [r3, #0]
 81028f0:	4a49      	ldr	r2, [pc, #292]	@ (8102a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81028f2:	4293      	cmp	r3, r2
 81028f4:	d004      	beq.n	8102900 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81028f6:	687b      	ldr	r3, [r7, #4]
 81028f8:	681b      	ldr	r3, [r3, #0]
 81028fa:	4a48      	ldr	r2, [pc, #288]	@ (8102a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81028fc:	4293      	cmp	r3, r2
 81028fe:	d101      	bne.n	8102904 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8102900:	4b47      	ldr	r3, [pc, #284]	@ (8102a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8102902:	e000      	b.n	8102906 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8102904:	4b47      	ldr	r3, [pc, #284]	@ (8102a24 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8102906:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102908:	683b      	ldr	r3, [r7, #0]
 810290a:	681b      	ldr	r3, [r3, #0]
 810290c:	2b00      	cmp	r3, #0
 810290e:	d03b      	beq.n	8102988 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8102910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8102912:	689b      	ldr	r3, [r3, #8]
 8102914:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8102918:	683b      	ldr	r3, [r7, #0]
 810291a:	685b      	ldr	r3, [r3, #4]
 810291c:	431a      	orrs	r2, r3
 810291e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8102920:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	681b      	ldr	r3, [r3, #0]
 8102926:	4a3c      	ldr	r2, [pc, #240]	@ (8102a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102928:	4293      	cmp	r3, r2
 810292a:	d004      	beq.n	8102936 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	4a3a      	ldr	r2, [pc, #232]	@ (8102a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102932:	4293      	cmp	r3, r2
 8102934:	d10e      	bne.n	8102954 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8102936:	4838      	ldr	r0, [pc, #224]	@ (8102a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102938:	f7ff ff70 	bl	810281c <LL_ADC_IsEnabled>
 810293c:	4604      	mov	r4, r0
 810293e:	4837      	ldr	r0, [pc, #220]	@ (8102a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102940:	f7ff ff6c 	bl	810281c <LL_ADC_IsEnabled>
 8102944:	4603      	mov	r3, r0
 8102946:	4323      	orrs	r3, r4
 8102948:	2b00      	cmp	r3, #0
 810294a:	bf0c      	ite	eq
 810294c:	2301      	moveq	r3, #1
 810294e:	2300      	movne	r3, #0
 8102950:	b2db      	uxtb	r3, r3
 8102952:	e008      	b.n	8102966 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8102954:	4834      	ldr	r0, [pc, #208]	@ (8102a28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8102956:	f7ff ff61 	bl	810281c <LL_ADC_IsEnabled>
 810295a:	4603      	mov	r3, r0
 810295c:	2b00      	cmp	r3, #0
 810295e:	bf0c      	ite	eq
 8102960:	2301      	moveq	r3, #1
 8102962:	2300      	movne	r3, #0
 8102964:	b2db      	uxtb	r3, r3
 8102966:	2b00      	cmp	r3, #0
 8102968:	d04b      	beq.n	8102a02 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810296a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810296c:	689b      	ldr	r3, [r3, #8]
 810296e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8102972:	f023 030f 	bic.w	r3, r3, #15
 8102976:	683a      	ldr	r2, [r7, #0]
 8102978:	6811      	ldr	r1, [r2, #0]
 810297a:	683a      	ldr	r2, [r7, #0]
 810297c:	6892      	ldr	r2, [r2, #8]
 810297e:	430a      	orrs	r2, r1
 8102980:	431a      	orrs	r2, r3
 8102982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8102984:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102986:	e03c      	b.n	8102a02 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8102988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810298a:	689b      	ldr	r3, [r3, #8]
 810298c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8102990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8102992:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102994:	687b      	ldr	r3, [r7, #4]
 8102996:	681b      	ldr	r3, [r3, #0]
 8102998:	4a1f      	ldr	r2, [pc, #124]	@ (8102a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810299a:	4293      	cmp	r3, r2
 810299c:	d004      	beq.n	81029a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	681b      	ldr	r3, [r3, #0]
 81029a2:	4a1e      	ldr	r2, [pc, #120]	@ (8102a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81029a4:	4293      	cmp	r3, r2
 81029a6:	d10e      	bne.n	81029c6 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81029a8:	481b      	ldr	r0, [pc, #108]	@ (8102a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81029aa:	f7ff ff37 	bl	810281c <LL_ADC_IsEnabled>
 81029ae:	4604      	mov	r4, r0
 81029b0:	481a      	ldr	r0, [pc, #104]	@ (8102a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81029b2:	f7ff ff33 	bl	810281c <LL_ADC_IsEnabled>
 81029b6:	4603      	mov	r3, r0
 81029b8:	4323      	orrs	r3, r4
 81029ba:	2b00      	cmp	r3, #0
 81029bc:	bf0c      	ite	eq
 81029be:	2301      	moveq	r3, #1
 81029c0:	2300      	movne	r3, #0
 81029c2:	b2db      	uxtb	r3, r3
 81029c4:	e008      	b.n	81029d8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81029c6:	4818      	ldr	r0, [pc, #96]	@ (8102a28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81029c8:	f7ff ff28 	bl	810281c <LL_ADC_IsEnabled>
 81029cc:	4603      	mov	r3, r0
 81029ce:	2b00      	cmp	r3, #0
 81029d0:	bf0c      	ite	eq
 81029d2:	2301      	moveq	r3, #1
 81029d4:	2300      	movne	r3, #0
 81029d6:	b2db      	uxtb	r3, r3
 81029d8:	2b00      	cmp	r3, #0
 81029da:	d012      	beq.n	8102a02 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81029dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81029de:	689b      	ldr	r3, [r3, #8]
 81029e0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 81029e4:	f023 030f 	bic.w	r3, r3, #15
 81029e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 81029ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81029ec:	e009      	b.n	8102a02 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81029ee:	687b      	ldr	r3, [r7, #4]
 81029f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81029f2:	f043 0220 	orr.w	r2, r3, #32
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81029fa:	2301      	movs	r3, #1
 81029fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8102a00:	e000      	b.n	8102a04 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102a02:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	2200      	movs	r2, #0
 8102a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8102a0c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8102a10:	4618      	mov	r0, r3
 8102a12:	377c      	adds	r7, #124	@ 0x7c
 8102a14:	46bd      	mov	sp, r7
 8102a16:	bd90      	pop	{r4, r7, pc}
 8102a18:	40022000 	.word	0x40022000
 8102a1c:	40022100 	.word	0x40022100
 8102a20:	40022300 	.word	0x40022300
 8102a24:	58026300 	.word	0x58026300
 8102a28:	58026000 	.word	0x58026000

08102a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102a2c:	b480      	push	{r7}
 8102a2e:	b085      	sub	sp, #20
 8102a30:	af00      	add	r7, sp, #0
 8102a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	f003 0307 	and.w	r3, r3, #7
 8102a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8102a70 <__NVIC_SetPriorityGrouping+0x44>)
 8102a3e:	68db      	ldr	r3, [r3, #12]
 8102a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102a42:	68ba      	ldr	r2, [r7, #8]
 8102a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102a48:	4013      	ands	r3, r2
 8102a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102a4c:	68fb      	ldr	r3, [r7, #12]
 8102a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102a50:	68bb      	ldr	r3, [r7, #8]
 8102a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102a5e:	4a04      	ldr	r2, [pc, #16]	@ (8102a70 <__NVIC_SetPriorityGrouping+0x44>)
 8102a60:	68bb      	ldr	r3, [r7, #8]
 8102a62:	60d3      	str	r3, [r2, #12]
}
 8102a64:	bf00      	nop
 8102a66:	3714      	adds	r7, #20
 8102a68:	46bd      	mov	sp, r7
 8102a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a6e:	4770      	bx	lr
 8102a70:	e000ed00 	.word	0xe000ed00

08102a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102a74:	b480      	push	{r7}
 8102a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102a78:	4b04      	ldr	r3, [pc, #16]	@ (8102a8c <__NVIC_GetPriorityGrouping+0x18>)
 8102a7a:	68db      	ldr	r3, [r3, #12]
 8102a7c:	0a1b      	lsrs	r3, r3, #8
 8102a7e:	f003 0307 	and.w	r3, r3, #7
}
 8102a82:	4618      	mov	r0, r3
 8102a84:	46bd      	mov	sp, r7
 8102a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a8a:	4770      	bx	lr
 8102a8c:	e000ed00 	.word	0xe000ed00

08102a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102a90:	b480      	push	{r7}
 8102a92:	b083      	sub	sp, #12
 8102a94:	af00      	add	r7, sp, #0
 8102a96:	4603      	mov	r3, r0
 8102a98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102a9e:	2b00      	cmp	r3, #0
 8102aa0:	db0b      	blt.n	8102aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102aa2:	88fb      	ldrh	r3, [r7, #6]
 8102aa4:	f003 021f 	and.w	r2, r3, #31
 8102aa8:	4907      	ldr	r1, [pc, #28]	@ (8102ac8 <__NVIC_EnableIRQ+0x38>)
 8102aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102aae:	095b      	lsrs	r3, r3, #5
 8102ab0:	2001      	movs	r0, #1
 8102ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8102ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102aba:	bf00      	nop
 8102abc:	370c      	adds	r7, #12
 8102abe:	46bd      	mov	sp, r7
 8102ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ac4:	4770      	bx	lr
 8102ac6:	bf00      	nop
 8102ac8:	e000e100 	.word	0xe000e100

08102acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102acc:	b480      	push	{r7}
 8102ace:	b083      	sub	sp, #12
 8102ad0:	af00      	add	r7, sp, #0
 8102ad2:	4603      	mov	r3, r0
 8102ad4:	6039      	str	r1, [r7, #0]
 8102ad6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102adc:	2b00      	cmp	r3, #0
 8102ade:	db0a      	blt.n	8102af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102ae0:	683b      	ldr	r3, [r7, #0]
 8102ae2:	b2da      	uxtb	r2, r3
 8102ae4:	490c      	ldr	r1, [pc, #48]	@ (8102b18 <__NVIC_SetPriority+0x4c>)
 8102ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102aea:	0112      	lsls	r2, r2, #4
 8102aec:	b2d2      	uxtb	r2, r2
 8102aee:	440b      	add	r3, r1
 8102af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102af4:	e00a      	b.n	8102b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102af6:	683b      	ldr	r3, [r7, #0]
 8102af8:	b2da      	uxtb	r2, r3
 8102afa:	4908      	ldr	r1, [pc, #32]	@ (8102b1c <__NVIC_SetPriority+0x50>)
 8102afc:	88fb      	ldrh	r3, [r7, #6]
 8102afe:	f003 030f 	and.w	r3, r3, #15
 8102b02:	3b04      	subs	r3, #4
 8102b04:	0112      	lsls	r2, r2, #4
 8102b06:	b2d2      	uxtb	r2, r2
 8102b08:	440b      	add	r3, r1
 8102b0a:	761a      	strb	r2, [r3, #24]
}
 8102b0c:	bf00      	nop
 8102b0e:	370c      	adds	r7, #12
 8102b10:	46bd      	mov	sp, r7
 8102b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b16:	4770      	bx	lr
 8102b18:	e000e100 	.word	0xe000e100
 8102b1c:	e000ed00 	.word	0xe000ed00

08102b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102b20:	b480      	push	{r7}
 8102b22:	b089      	sub	sp, #36	@ 0x24
 8102b24:	af00      	add	r7, sp, #0
 8102b26:	60f8      	str	r0, [r7, #12]
 8102b28:	60b9      	str	r1, [r7, #8]
 8102b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102b2c:	68fb      	ldr	r3, [r7, #12]
 8102b2e:	f003 0307 	and.w	r3, r3, #7
 8102b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102b34:	69fb      	ldr	r3, [r7, #28]
 8102b36:	f1c3 0307 	rsb	r3, r3, #7
 8102b3a:	2b04      	cmp	r3, #4
 8102b3c:	bf28      	it	cs
 8102b3e:	2304      	movcs	r3, #4
 8102b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102b42:	69fb      	ldr	r3, [r7, #28]
 8102b44:	3304      	adds	r3, #4
 8102b46:	2b06      	cmp	r3, #6
 8102b48:	d902      	bls.n	8102b50 <NVIC_EncodePriority+0x30>
 8102b4a:	69fb      	ldr	r3, [r7, #28]
 8102b4c:	3b03      	subs	r3, #3
 8102b4e:	e000      	b.n	8102b52 <NVIC_EncodePriority+0x32>
 8102b50:	2300      	movs	r3, #0
 8102b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102b54:	f04f 32ff 	mov.w	r2, #4294967295
 8102b58:	69bb      	ldr	r3, [r7, #24]
 8102b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8102b5e:	43da      	mvns	r2, r3
 8102b60:	68bb      	ldr	r3, [r7, #8]
 8102b62:	401a      	ands	r2, r3
 8102b64:	697b      	ldr	r3, [r7, #20]
 8102b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102b68:	f04f 31ff 	mov.w	r1, #4294967295
 8102b6c:	697b      	ldr	r3, [r7, #20]
 8102b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8102b72:	43d9      	mvns	r1, r3
 8102b74:	687b      	ldr	r3, [r7, #4]
 8102b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102b78:	4313      	orrs	r3, r2
         );
}
 8102b7a:	4618      	mov	r0, r3
 8102b7c:	3724      	adds	r7, #36	@ 0x24
 8102b7e:	46bd      	mov	sp, r7
 8102b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b84:	4770      	bx	lr
	...

08102b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102b88:	b580      	push	{r7, lr}
 8102b8a:	b082      	sub	sp, #8
 8102b8c:	af00      	add	r7, sp, #0
 8102b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	3b01      	subs	r3, #1
 8102b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102b98:	d301      	bcc.n	8102b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102b9a:	2301      	movs	r3, #1
 8102b9c:	e00f      	b.n	8102bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8102bc8 <SysTick_Config+0x40>)
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	3b01      	subs	r3, #1
 8102ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102ba6:	210f      	movs	r1, #15
 8102ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8102bac:	f7ff ff8e 	bl	8102acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102bb0:	4b05      	ldr	r3, [pc, #20]	@ (8102bc8 <SysTick_Config+0x40>)
 8102bb2:	2200      	movs	r2, #0
 8102bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102bb6:	4b04      	ldr	r3, [pc, #16]	@ (8102bc8 <SysTick_Config+0x40>)
 8102bb8:	2207      	movs	r2, #7
 8102bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102bbc:	2300      	movs	r3, #0
}
 8102bbe:	4618      	mov	r0, r3
 8102bc0:	3708      	adds	r7, #8
 8102bc2:	46bd      	mov	sp, r7
 8102bc4:	bd80      	pop	{r7, pc}
 8102bc6:	bf00      	nop
 8102bc8:	e000e010 	.word	0xe000e010

08102bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102bcc:	b580      	push	{r7, lr}
 8102bce:	b082      	sub	sp, #8
 8102bd0:	af00      	add	r7, sp, #0
 8102bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102bd4:	6878      	ldr	r0, [r7, #4]
 8102bd6:	f7ff ff29 	bl	8102a2c <__NVIC_SetPriorityGrouping>
}
 8102bda:	bf00      	nop
 8102bdc:	3708      	adds	r7, #8
 8102bde:	46bd      	mov	sp, r7
 8102be0:	bd80      	pop	{r7, pc}

08102be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102be2:	b580      	push	{r7, lr}
 8102be4:	b086      	sub	sp, #24
 8102be6:	af00      	add	r7, sp, #0
 8102be8:	4603      	mov	r3, r0
 8102bea:	60b9      	str	r1, [r7, #8]
 8102bec:	607a      	str	r2, [r7, #4]
 8102bee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102bf0:	f7ff ff40 	bl	8102a74 <__NVIC_GetPriorityGrouping>
 8102bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102bf6:	687a      	ldr	r2, [r7, #4]
 8102bf8:	68b9      	ldr	r1, [r7, #8]
 8102bfa:	6978      	ldr	r0, [r7, #20]
 8102bfc:	f7ff ff90 	bl	8102b20 <NVIC_EncodePriority>
 8102c00:	4602      	mov	r2, r0
 8102c02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102c06:	4611      	mov	r1, r2
 8102c08:	4618      	mov	r0, r3
 8102c0a:	f7ff ff5f 	bl	8102acc <__NVIC_SetPriority>
}
 8102c0e:	bf00      	nop
 8102c10:	3718      	adds	r7, #24
 8102c12:	46bd      	mov	sp, r7
 8102c14:	bd80      	pop	{r7, pc}

08102c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102c16:	b580      	push	{r7, lr}
 8102c18:	b082      	sub	sp, #8
 8102c1a:	af00      	add	r7, sp, #0
 8102c1c:	4603      	mov	r3, r0
 8102c1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102c24:	4618      	mov	r0, r3
 8102c26:	f7ff ff33 	bl	8102a90 <__NVIC_EnableIRQ>
}
 8102c2a:	bf00      	nop
 8102c2c:	3708      	adds	r7, #8
 8102c2e:	46bd      	mov	sp, r7
 8102c30:	bd80      	pop	{r7, pc}

08102c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102c32:	b580      	push	{r7, lr}
 8102c34:	b082      	sub	sp, #8
 8102c36:	af00      	add	r7, sp, #0
 8102c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102c3a:	6878      	ldr	r0, [r7, #4]
 8102c3c:	f7ff ffa4 	bl	8102b88 <SysTick_Config>
 8102c40:	4603      	mov	r3, r0
}
 8102c42:	4618      	mov	r0, r3
 8102c44:	3708      	adds	r7, #8
 8102c46:	46bd      	mov	sp, r7
 8102c48:	bd80      	pop	{r7, pc}
	...

08102c4c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102c4c:	b480      	push	{r7}
 8102c4e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102c50:	4b07      	ldr	r3, [pc, #28]	@ (8102c70 <HAL_GetCurrentCPUID+0x24>)
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	091b      	lsrs	r3, r3, #4
 8102c56:	f003 030f 	and.w	r3, r3, #15
 8102c5a:	2b07      	cmp	r3, #7
 8102c5c:	d101      	bne.n	8102c62 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102c5e:	2303      	movs	r3, #3
 8102c60:	e000      	b.n	8102c64 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102c62:	2301      	movs	r3, #1
  }
}
 8102c64:	4618      	mov	r0, r3
 8102c66:	46bd      	mov	sp, r7
 8102c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c6c:	4770      	bx	lr
 8102c6e:	bf00      	nop
 8102c70:	e000ed00 	.word	0xe000ed00

08102c74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8102c74:	b580      	push	{r7, lr}
 8102c76:	b086      	sub	sp, #24
 8102c78:	af00      	add	r7, sp, #0
 8102c7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8102c7c:	f7fe fe36 	bl	81018ec <HAL_GetTick>
 8102c80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	2b00      	cmp	r3, #0
 8102c86:	d101      	bne.n	8102c8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8102c88:	2301      	movs	r3, #1
 8102c8a:	e314      	b.n	81032b6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	681b      	ldr	r3, [r3, #0]
 8102c90:	4a66      	ldr	r2, [pc, #408]	@ (8102e2c <HAL_DMA_Init+0x1b8>)
 8102c92:	4293      	cmp	r3, r2
 8102c94:	d04a      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102c96:	687b      	ldr	r3, [r7, #4]
 8102c98:	681b      	ldr	r3, [r3, #0]
 8102c9a:	4a65      	ldr	r2, [pc, #404]	@ (8102e30 <HAL_DMA_Init+0x1bc>)
 8102c9c:	4293      	cmp	r3, r2
 8102c9e:	d045      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	681b      	ldr	r3, [r3, #0]
 8102ca4:	4a63      	ldr	r2, [pc, #396]	@ (8102e34 <HAL_DMA_Init+0x1c0>)
 8102ca6:	4293      	cmp	r3, r2
 8102ca8:	d040      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	681b      	ldr	r3, [r3, #0]
 8102cae:	4a62      	ldr	r2, [pc, #392]	@ (8102e38 <HAL_DMA_Init+0x1c4>)
 8102cb0:	4293      	cmp	r3, r2
 8102cb2:	d03b      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	681b      	ldr	r3, [r3, #0]
 8102cb8:	4a60      	ldr	r2, [pc, #384]	@ (8102e3c <HAL_DMA_Init+0x1c8>)
 8102cba:	4293      	cmp	r3, r2
 8102cbc:	d036      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102cbe:	687b      	ldr	r3, [r7, #4]
 8102cc0:	681b      	ldr	r3, [r3, #0]
 8102cc2:	4a5f      	ldr	r2, [pc, #380]	@ (8102e40 <HAL_DMA_Init+0x1cc>)
 8102cc4:	4293      	cmp	r3, r2
 8102cc6:	d031      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102cc8:	687b      	ldr	r3, [r7, #4]
 8102cca:	681b      	ldr	r3, [r3, #0]
 8102ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8102e44 <HAL_DMA_Init+0x1d0>)
 8102cce:	4293      	cmp	r3, r2
 8102cd0:	d02c      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102cd2:	687b      	ldr	r3, [r7, #4]
 8102cd4:	681b      	ldr	r3, [r3, #0]
 8102cd6:	4a5c      	ldr	r2, [pc, #368]	@ (8102e48 <HAL_DMA_Init+0x1d4>)
 8102cd8:	4293      	cmp	r3, r2
 8102cda:	d027      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102cdc:	687b      	ldr	r3, [r7, #4]
 8102cde:	681b      	ldr	r3, [r3, #0]
 8102ce0:	4a5a      	ldr	r2, [pc, #360]	@ (8102e4c <HAL_DMA_Init+0x1d8>)
 8102ce2:	4293      	cmp	r3, r2
 8102ce4:	d022      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	681b      	ldr	r3, [r3, #0]
 8102cea:	4a59      	ldr	r2, [pc, #356]	@ (8102e50 <HAL_DMA_Init+0x1dc>)
 8102cec:	4293      	cmp	r3, r2
 8102cee:	d01d      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102cf0:	687b      	ldr	r3, [r7, #4]
 8102cf2:	681b      	ldr	r3, [r3, #0]
 8102cf4:	4a57      	ldr	r2, [pc, #348]	@ (8102e54 <HAL_DMA_Init+0x1e0>)
 8102cf6:	4293      	cmp	r3, r2
 8102cf8:	d018      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	4a56      	ldr	r2, [pc, #344]	@ (8102e58 <HAL_DMA_Init+0x1e4>)
 8102d00:	4293      	cmp	r3, r2
 8102d02:	d013      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	681b      	ldr	r3, [r3, #0]
 8102d08:	4a54      	ldr	r2, [pc, #336]	@ (8102e5c <HAL_DMA_Init+0x1e8>)
 8102d0a:	4293      	cmp	r3, r2
 8102d0c:	d00e      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	4a53      	ldr	r2, [pc, #332]	@ (8102e60 <HAL_DMA_Init+0x1ec>)
 8102d14:	4293      	cmp	r3, r2
 8102d16:	d009      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	681b      	ldr	r3, [r3, #0]
 8102d1c:	4a51      	ldr	r2, [pc, #324]	@ (8102e64 <HAL_DMA_Init+0x1f0>)
 8102d1e:	4293      	cmp	r3, r2
 8102d20:	d004      	beq.n	8102d2c <HAL_DMA_Init+0xb8>
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	4a50      	ldr	r2, [pc, #320]	@ (8102e68 <HAL_DMA_Init+0x1f4>)
 8102d28:	4293      	cmp	r3, r2
 8102d2a:	d101      	bne.n	8102d30 <HAL_DMA_Init+0xbc>
 8102d2c:	2301      	movs	r3, #1
 8102d2e:	e000      	b.n	8102d32 <HAL_DMA_Init+0xbe>
 8102d30:	2300      	movs	r3, #0
 8102d32:	2b00      	cmp	r3, #0
 8102d34:	f000 813b 	beq.w	8102fae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102d38:	687b      	ldr	r3, [r7, #4]
 8102d3a:	2202      	movs	r2, #2
 8102d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	2200      	movs	r2, #0
 8102d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102d48:	687b      	ldr	r3, [r7, #4]
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	4a37      	ldr	r2, [pc, #220]	@ (8102e2c <HAL_DMA_Init+0x1b8>)
 8102d4e:	4293      	cmp	r3, r2
 8102d50:	d04a      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102d52:	687b      	ldr	r3, [r7, #4]
 8102d54:	681b      	ldr	r3, [r3, #0]
 8102d56:	4a36      	ldr	r2, [pc, #216]	@ (8102e30 <HAL_DMA_Init+0x1bc>)
 8102d58:	4293      	cmp	r3, r2
 8102d5a:	d045      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102d5c:	687b      	ldr	r3, [r7, #4]
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	4a34      	ldr	r2, [pc, #208]	@ (8102e34 <HAL_DMA_Init+0x1c0>)
 8102d62:	4293      	cmp	r3, r2
 8102d64:	d040      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	681b      	ldr	r3, [r3, #0]
 8102d6a:	4a33      	ldr	r2, [pc, #204]	@ (8102e38 <HAL_DMA_Init+0x1c4>)
 8102d6c:	4293      	cmp	r3, r2
 8102d6e:	d03b      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102d70:	687b      	ldr	r3, [r7, #4]
 8102d72:	681b      	ldr	r3, [r3, #0]
 8102d74:	4a31      	ldr	r2, [pc, #196]	@ (8102e3c <HAL_DMA_Init+0x1c8>)
 8102d76:	4293      	cmp	r3, r2
 8102d78:	d036      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102d7a:	687b      	ldr	r3, [r7, #4]
 8102d7c:	681b      	ldr	r3, [r3, #0]
 8102d7e:	4a30      	ldr	r2, [pc, #192]	@ (8102e40 <HAL_DMA_Init+0x1cc>)
 8102d80:	4293      	cmp	r3, r2
 8102d82:	d031      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	4a2e      	ldr	r2, [pc, #184]	@ (8102e44 <HAL_DMA_Init+0x1d0>)
 8102d8a:	4293      	cmp	r3, r2
 8102d8c:	d02c      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102d8e:	687b      	ldr	r3, [r7, #4]
 8102d90:	681b      	ldr	r3, [r3, #0]
 8102d92:	4a2d      	ldr	r2, [pc, #180]	@ (8102e48 <HAL_DMA_Init+0x1d4>)
 8102d94:	4293      	cmp	r3, r2
 8102d96:	d027      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102d98:	687b      	ldr	r3, [r7, #4]
 8102d9a:	681b      	ldr	r3, [r3, #0]
 8102d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8102e4c <HAL_DMA_Init+0x1d8>)
 8102d9e:	4293      	cmp	r3, r2
 8102da0:	d022      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	681b      	ldr	r3, [r3, #0]
 8102da6:	4a2a      	ldr	r2, [pc, #168]	@ (8102e50 <HAL_DMA_Init+0x1dc>)
 8102da8:	4293      	cmp	r3, r2
 8102daa:	d01d      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102dac:	687b      	ldr	r3, [r7, #4]
 8102dae:	681b      	ldr	r3, [r3, #0]
 8102db0:	4a28      	ldr	r2, [pc, #160]	@ (8102e54 <HAL_DMA_Init+0x1e0>)
 8102db2:	4293      	cmp	r3, r2
 8102db4:	d018      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	4a27      	ldr	r2, [pc, #156]	@ (8102e58 <HAL_DMA_Init+0x1e4>)
 8102dbc:	4293      	cmp	r3, r2
 8102dbe:	d013      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102dc0:	687b      	ldr	r3, [r7, #4]
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	4a25      	ldr	r2, [pc, #148]	@ (8102e5c <HAL_DMA_Init+0x1e8>)
 8102dc6:	4293      	cmp	r3, r2
 8102dc8:	d00e      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	681b      	ldr	r3, [r3, #0]
 8102dce:	4a24      	ldr	r2, [pc, #144]	@ (8102e60 <HAL_DMA_Init+0x1ec>)
 8102dd0:	4293      	cmp	r3, r2
 8102dd2:	d009      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102dd4:	687b      	ldr	r3, [r7, #4]
 8102dd6:	681b      	ldr	r3, [r3, #0]
 8102dd8:	4a22      	ldr	r2, [pc, #136]	@ (8102e64 <HAL_DMA_Init+0x1f0>)
 8102dda:	4293      	cmp	r3, r2
 8102ddc:	d004      	beq.n	8102de8 <HAL_DMA_Init+0x174>
 8102dde:	687b      	ldr	r3, [r7, #4]
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	4a21      	ldr	r2, [pc, #132]	@ (8102e68 <HAL_DMA_Init+0x1f4>)
 8102de4:	4293      	cmp	r3, r2
 8102de6:	d108      	bne.n	8102dfa <HAL_DMA_Init+0x186>
 8102de8:	687b      	ldr	r3, [r7, #4]
 8102dea:	681b      	ldr	r3, [r3, #0]
 8102dec:	681a      	ldr	r2, [r3, #0]
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	681b      	ldr	r3, [r3, #0]
 8102df2:	f022 0201 	bic.w	r2, r2, #1
 8102df6:	601a      	str	r2, [r3, #0]
 8102df8:	e007      	b.n	8102e0a <HAL_DMA_Init+0x196>
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	681b      	ldr	r3, [r3, #0]
 8102dfe:	681a      	ldr	r2, [r3, #0]
 8102e00:	687b      	ldr	r3, [r7, #4]
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	f022 0201 	bic.w	r2, r2, #1
 8102e08:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102e0a:	e02f      	b.n	8102e6c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102e0c:	f7fe fd6e 	bl	81018ec <HAL_GetTick>
 8102e10:	4602      	mov	r2, r0
 8102e12:	693b      	ldr	r3, [r7, #16]
 8102e14:	1ad3      	subs	r3, r2, r3
 8102e16:	2b05      	cmp	r3, #5
 8102e18:	d928      	bls.n	8102e6c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102e1a:	687b      	ldr	r3, [r7, #4]
 8102e1c:	2220      	movs	r2, #32
 8102e1e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	2203      	movs	r2, #3
 8102e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8102e28:	2301      	movs	r3, #1
 8102e2a:	e244      	b.n	81032b6 <HAL_DMA_Init+0x642>
 8102e2c:	40020010 	.word	0x40020010
 8102e30:	40020028 	.word	0x40020028
 8102e34:	40020040 	.word	0x40020040
 8102e38:	40020058 	.word	0x40020058
 8102e3c:	40020070 	.word	0x40020070
 8102e40:	40020088 	.word	0x40020088
 8102e44:	400200a0 	.word	0x400200a0
 8102e48:	400200b8 	.word	0x400200b8
 8102e4c:	40020410 	.word	0x40020410
 8102e50:	40020428 	.word	0x40020428
 8102e54:	40020440 	.word	0x40020440
 8102e58:	40020458 	.word	0x40020458
 8102e5c:	40020470 	.word	0x40020470
 8102e60:	40020488 	.word	0x40020488
 8102e64:	400204a0 	.word	0x400204a0
 8102e68:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102e6c:	687b      	ldr	r3, [r7, #4]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	681b      	ldr	r3, [r3, #0]
 8102e72:	f003 0301 	and.w	r3, r3, #1
 8102e76:	2b00      	cmp	r3, #0
 8102e78:	d1c8      	bne.n	8102e0c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	681b      	ldr	r3, [r3, #0]
 8102e80:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8102e82:	697a      	ldr	r2, [r7, #20]
 8102e84:	4b84      	ldr	r3, [pc, #528]	@ (8103098 <HAL_DMA_Init+0x424>)
 8102e86:	4013      	ands	r3, r2
 8102e88:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8102e92:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	691b      	ldr	r3, [r3, #16]
 8102e98:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102e9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102ea0:	687b      	ldr	r3, [r7, #4]
 8102ea2:	699b      	ldr	r3, [r3, #24]
 8102ea4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102eaa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	6a1b      	ldr	r3, [r3, #32]
 8102eb0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8102eb2:	697a      	ldr	r2, [r7, #20]
 8102eb4:	4313      	orrs	r3, r2
 8102eb6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102eb8:	687b      	ldr	r3, [r7, #4]
 8102eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102ebc:	2b04      	cmp	r3, #4
 8102ebe:	d107      	bne.n	8102ed0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102ec4:	687b      	ldr	r3, [r7, #4]
 8102ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102ec8:	4313      	orrs	r3, r2
 8102eca:	697a      	ldr	r2, [r7, #20]
 8102ecc:	4313      	orrs	r3, r2
 8102ece:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102ed0:	4b72      	ldr	r3, [pc, #456]	@ (810309c <HAL_DMA_Init+0x428>)
 8102ed2:	681b      	ldr	r3, [r3, #0]
 8102ed4:	0c1b      	lsrs	r3, r3, #16
 8102ed6:	041b      	lsls	r3, r3, #16
 8102ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102edc:	d328      	bcc.n	8102f30 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102ede:	687b      	ldr	r3, [r7, #4]
 8102ee0:	685b      	ldr	r3, [r3, #4]
 8102ee2:	2b28      	cmp	r3, #40	@ 0x28
 8102ee4:	d903      	bls.n	8102eee <HAL_DMA_Init+0x27a>
 8102ee6:	687b      	ldr	r3, [r7, #4]
 8102ee8:	685b      	ldr	r3, [r3, #4]
 8102eea:	2b2e      	cmp	r3, #46	@ 0x2e
 8102eec:	d917      	bls.n	8102f1e <HAL_DMA_Init+0x2aa>
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	685b      	ldr	r3, [r3, #4]
 8102ef2:	2b3e      	cmp	r3, #62	@ 0x3e
 8102ef4:	d903      	bls.n	8102efe <HAL_DMA_Init+0x28a>
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	685b      	ldr	r3, [r3, #4]
 8102efa:	2b42      	cmp	r3, #66	@ 0x42
 8102efc:	d90f      	bls.n	8102f1e <HAL_DMA_Init+0x2aa>
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	685b      	ldr	r3, [r3, #4]
 8102f02:	2b46      	cmp	r3, #70	@ 0x46
 8102f04:	d903      	bls.n	8102f0e <HAL_DMA_Init+0x29a>
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	685b      	ldr	r3, [r3, #4]
 8102f0a:	2b48      	cmp	r3, #72	@ 0x48
 8102f0c:	d907      	bls.n	8102f1e <HAL_DMA_Init+0x2aa>
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	685b      	ldr	r3, [r3, #4]
 8102f12:	2b4e      	cmp	r3, #78	@ 0x4e
 8102f14:	d905      	bls.n	8102f22 <HAL_DMA_Init+0x2ae>
 8102f16:	687b      	ldr	r3, [r7, #4]
 8102f18:	685b      	ldr	r3, [r3, #4]
 8102f1a:	2b52      	cmp	r3, #82	@ 0x52
 8102f1c:	d801      	bhi.n	8102f22 <HAL_DMA_Init+0x2ae>
 8102f1e:	2301      	movs	r3, #1
 8102f20:	e000      	b.n	8102f24 <HAL_DMA_Init+0x2b0>
 8102f22:	2300      	movs	r3, #0
 8102f24:	2b00      	cmp	r3, #0
 8102f26:	d003      	beq.n	8102f30 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102f28:	697b      	ldr	r3, [r7, #20]
 8102f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8102f2e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8102f30:	687b      	ldr	r3, [r7, #4]
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	697a      	ldr	r2, [r7, #20]
 8102f36:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	695b      	ldr	r3, [r3, #20]
 8102f3e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102f40:	697b      	ldr	r3, [r7, #20]
 8102f42:	f023 0307 	bic.w	r3, r3, #7
 8102f46:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102f4c:	697a      	ldr	r2, [r7, #20]
 8102f4e:	4313      	orrs	r3, r2
 8102f50:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102f52:	687b      	ldr	r3, [r7, #4]
 8102f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102f56:	2b04      	cmp	r3, #4
 8102f58:	d117      	bne.n	8102f8a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102f5e:	697a      	ldr	r2, [r7, #20]
 8102f60:	4313      	orrs	r3, r2
 8102f62:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f68:	2b00      	cmp	r3, #0
 8102f6a:	d00e      	beq.n	8102f8a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8102f6c:	6878      	ldr	r0, [r7, #4]
 8102f6e:	f001 fbfd 	bl	810476c <DMA_CheckFifoParam>
 8102f72:	4603      	mov	r3, r0
 8102f74:	2b00      	cmp	r3, #0
 8102f76:	d008      	beq.n	8102f8a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	2240      	movs	r2, #64	@ 0x40
 8102f7c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	2201      	movs	r2, #1
 8102f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8102f86:	2301      	movs	r3, #1
 8102f88:	e195      	b.n	81032b6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	681b      	ldr	r3, [r3, #0]
 8102f8e:	697a      	ldr	r2, [r7, #20]
 8102f90:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102f92:	6878      	ldr	r0, [r7, #4]
 8102f94:	f001 fb38 	bl	8104608 <DMA_CalcBaseAndBitshift>
 8102f98:	4603      	mov	r3, r0
 8102f9a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102fa0:	f003 031f 	and.w	r3, r3, #31
 8102fa4:	223f      	movs	r2, #63	@ 0x3f
 8102fa6:	409a      	lsls	r2, r3
 8102fa8:	68bb      	ldr	r3, [r7, #8]
 8102faa:	609a      	str	r2, [r3, #8]
 8102fac:	e0cb      	b.n	8103146 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102fae:	687b      	ldr	r3, [r7, #4]
 8102fb0:	681b      	ldr	r3, [r3, #0]
 8102fb2:	4a3b      	ldr	r2, [pc, #236]	@ (81030a0 <HAL_DMA_Init+0x42c>)
 8102fb4:	4293      	cmp	r3, r2
 8102fb6:	d022      	beq.n	8102ffe <HAL_DMA_Init+0x38a>
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	4a39      	ldr	r2, [pc, #228]	@ (81030a4 <HAL_DMA_Init+0x430>)
 8102fbe:	4293      	cmp	r3, r2
 8102fc0:	d01d      	beq.n	8102ffe <HAL_DMA_Init+0x38a>
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	4a38      	ldr	r2, [pc, #224]	@ (81030a8 <HAL_DMA_Init+0x434>)
 8102fc8:	4293      	cmp	r3, r2
 8102fca:	d018      	beq.n	8102ffe <HAL_DMA_Init+0x38a>
 8102fcc:	687b      	ldr	r3, [r7, #4]
 8102fce:	681b      	ldr	r3, [r3, #0]
 8102fd0:	4a36      	ldr	r2, [pc, #216]	@ (81030ac <HAL_DMA_Init+0x438>)
 8102fd2:	4293      	cmp	r3, r2
 8102fd4:	d013      	beq.n	8102ffe <HAL_DMA_Init+0x38a>
 8102fd6:	687b      	ldr	r3, [r7, #4]
 8102fd8:	681b      	ldr	r3, [r3, #0]
 8102fda:	4a35      	ldr	r2, [pc, #212]	@ (81030b0 <HAL_DMA_Init+0x43c>)
 8102fdc:	4293      	cmp	r3, r2
 8102fde:	d00e      	beq.n	8102ffe <HAL_DMA_Init+0x38a>
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	681b      	ldr	r3, [r3, #0]
 8102fe4:	4a33      	ldr	r2, [pc, #204]	@ (81030b4 <HAL_DMA_Init+0x440>)
 8102fe6:	4293      	cmp	r3, r2
 8102fe8:	d009      	beq.n	8102ffe <HAL_DMA_Init+0x38a>
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	681b      	ldr	r3, [r3, #0]
 8102fee:	4a32      	ldr	r2, [pc, #200]	@ (81030b8 <HAL_DMA_Init+0x444>)
 8102ff0:	4293      	cmp	r3, r2
 8102ff2:	d004      	beq.n	8102ffe <HAL_DMA_Init+0x38a>
 8102ff4:	687b      	ldr	r3, [r7, #4]
 8102ff6:	681b      	ldr	r3, [r3, #0]
 8102ff8:	4a30      	ldr	r2, [pc, #192]	@ (81030bc <HAL_DMA_Init+0x448>)
 8102ffa:	4293      	cmp	r3, r2
 8102ffc:	d101      	bne.n	8103002 <HAL_DMA_Init+0x38e>
 8102ffe:	2301      	movs	r3, #1
 8103000:	e000      	b.n	8103004 <HAL_DMA_Init+0x390>
 8103002:	2300      	movs	r3, #0
 8103004:	2b00      	cmp	r3, #0
 8103006:	f000 8095 	beq.w	8103134 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	681b      	ldr	r3, [r3, #0]
 810300e:	4a24      	ldr	r2, [pc, #144]	@ (81030a0 <HAL_DMA_Init+0x42c>)
 8103010:	4293      	cmp	r3, r2
 8103012:	d021      	beq.n	8103058 <HAL_DMA_Init+0x3e4>
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	681b      	ldr	r3, [r3, #0]
 8103018:	4a22      	ldr	r2, [pc, #136]	@ (81030a4 <HAL_DMA_Init+0x430>)
 810301a:	4293      	cmp	r3, r2
 810301c:	d01c      	beq.n	8103058 <HAL_DMA_Init+0x3e4>
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	681b      	ldr	r3, [r3, #0]
 8103022:	4a21      	ldr	r2, [pc, #132]	@ (81030a8 <HAL_DMA_Init+0x434>)
 8103024:	4293      	cmp	r3, r2
 8103026:	d017      	beq.n	8103058 <HAL_DMA_Init+0x3e4>
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	681b      	ldr	r3, [r3, #0]
 810302c:	4a1f      	ldr	r2, [pc, #124]	@ (81030ac <HAL_DMA_Init+0x438>)
 810302e:	4293      	cmp	r3, r2
 8103030:	d012      	beq.n	8103058 <HAL_DMA_Init+0x3e4>
 8103032:	687b      	ldr	r3, [r7, #4]
 8103034:	681b      	ldr	r3, [r3, #0]
 8103036:	4a1e      	ldr	r2, [pc, #120]	@ (81030b0 <HAL_DMA_Init+0x43c>)
 8103038:	4293      	cmp	r3, r2
 810303a:	d00d      	beq.n	8103058 <HAL_DMA_Init+0x3e4>
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	4a1c      	ldr	r2, [pc, #112]	@ (81030b4 <HAL_DMA_Init+0x440>)
 8103042:	4293      	cmp	r3, r2
 8103044:	d008      	beq.n	8103058 <HAL_DMA_Init+0x3e4>
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	681b      	ldr	r3, [r3, #0]
 810304a:	4a1b      	ldr	r2, [pc, #108]	@ (81030b8 <HAL_DMA_Init+0x444>)
 810304c:	4293      	cmp	r3, r2
 810304e:	d003      	beq.n	8103058 <HAL_DMA_Init+0x3e4>
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	681b      	ldr	r3, [r3, #0]
 8103054:	4a19      	ldr	r2, [pc, #100]	@ (81030bc <HAL_DMA_Init+0x448>)
 8103056:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	2202      	movs	r2, #2
 810305c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	2200      	movs	r2, #0
 8103064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8103068:	687b      	ldr	r3, [r7, #4]
 810306a:	681b      	ldr	r3, [r3, #0]
 810306c:	681b      	ldr	r3, [r3, #0]
 810306e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103070:	697b      	ldr	r3, [r7, #20]
 8103072:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8103076:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 810307a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	689b      	ldr	r3, [r3, #8]
 8103080:	2b40      	cmp	r3, #64	@ 0x40
 8103082:	d01d      	beq.n	81030c0 <HAL_DMA_Init+0x44c>
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	689b      	ldr	r3, [r3, #8]
 8103088:	2b80      	cmp	r3, #128	@ 0x80
 810308a:	d102      	bne.n	8103092 <HAL_DMA_Init+0x41e>
 810308c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8103090:	e017      	b.n	81030c2 <HAL_DMA_Init+0x44e>
 8103092:	2300      	movs	r3, #0
 8103094:	e015      	b.n	81030c2 <HAL_DMA_Init+0x44e>
 8103096:	bf00      	nop
 8103098:	fe10803f 	.word	0xfe10803f
 810309c:	5c001000 	.word	0x5c001000
 81030a0:	58025408 	.word	0x58025408
 81030a4:	5802541c 	.word	0x5802541c
 81030a8:	58025430 	.word	0x58025430
 81030ac:	58025444 	.word	0x58025444
 81030b0:	58025458 	.word	0x58025458
 81030b4:	5802546c 	.word	0x5802546c
 81030b8:	58025480 	.word	0x58025480
 81030bc:	58025494 	.word	0x58025494
 81030c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81030c2:	687a      	ldr	r2, [r7, #4]
 81030c4:	68d2      	ldr	r2, [r2, #12]
 81030c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81030c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	691b      	ldr	r3, [r3, #16]
 81030ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81030d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81030d2:	687b      	ldr	r3, [r7, #4]
 81030d4:	695b      	ldr	r3, [r3, #20]
 81030d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81030d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	699b      	ldr	r3, [r3, #24]
 81030de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81030e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	69db      	ldr	r3, [r3, #28]
 81030e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81030e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	6a1b      	ldr	r3, [r3, #32]
 81030ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81030f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81030f2:	697a      	ldr	r2, [r7, #20]
 81030f4:	4313      	orrs	r3, r2
 81030f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	681b      	ldr	r3, [r3, #0]
 81030fc:	697a      	ldr	r2, [r7, #20]
 81030fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	461a      	mov	r2, r3
 8103106:	4b6e      	ldr	r3, [pc, #440]	@ (81032c0 <HAL_DMA_Init+0x64c>)
 8103108:	4413      	add	r3, r2
 810310a:	4a6e      	ldr	r2, [pc, #440]	@ (81032c4 <HAL_DMA_Init+0x650>)
 810310c:	fba2 2303 	umull	r2, r3, r2, r3
 8103110:	091b      	lsrs	r3, r3, #4
 8103112:	009a      	lsls	r2, r3, #2
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103118:	6878      	ldr	r0, [r7, #4]
 810311a:	f001 fa75 	bl	8104608 <DMA_CalcBaseAndBitshift>
 810311e:	4603      	mov	r3, r0
 8103120:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103126:	f003 031f 	and.w	r3, r3, #31
 810312a:	2201      	movs	r2, #1
 810312c:	409a      	lsls	r2, r3
 810312e:	68fb      	ldr	r3, [r7, #12]
 8103130:	605a      	str	r2, [r3, #4]
 8103132:	e008      	b.n	8103146 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	2240      	movs	r2, #64	@ 0x40
 8103138:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	2203      	movs	r2, #3
 810313e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8103142:	2301      	movs	r3, #1
 8103144:	e0b7      	b.n	81032b6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103146:	687b      	ldr	r3, [r7, #4]
 8103148:	681b      	ldr	r3, [r3, #0]
 810314a:	4a5f      	ldr	r2, [pc, #380]	@ (81032c8 <HAL_DMA_Init+0x654>)
 810314c:	4293      	cmp	r3, r2
 810314e:	d072      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	681b      	ldr	r3, [r3, #0]
 8103154:	4a5d      	ldr	r2, [pc, #372]	@ (81032cc <HAL_DMA_Init+0x658>)
 8103156:	4293      	cmp	r3, r2
 8103158:	d06d      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	681b      	ldr	r3, [r3, #0]
 810315e:	4a5c      	ldr	r2, [pc, #368]	@ (81032d0 <HAL_DMA_Init+0x65c>)
 8103160:	4293      	cmp	r3, r2
 8103162:	d068      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	4a5a      	ldr	r2, [pc, #360]	@ (81032d4 <HAL_DMA_Init+0x660>)
 810316a:	4293      	cmp	r3, r2
 810316c:	d063      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 810316e:	687b      	ldr	r3, [r7, #4]
 8103170:	681b      	ldr	r3, [r3, #0]
 8103172:	4a59      	ldr	r2, [pc, #356]	@ (81032d8 <HAL_DMA_Init+0x664>)
 8103174:	4293      	cmp	r3, r2
 8103176:	d05e      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 8103178:	687b      	ldr	r3, [r7, #4]
 810317a:	681b      	ldr	r3, [r3, #0]
 810317c:	4a57      	ldr	r2, [pc, #348]	@ (81032dc <HAL_DMA_Init+0x668>)
 810317e:	4293      	cmp	r3, r2
 8103180:	d059      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 8103182:	687b      	ldr	r3, [r7, #4]
 8103184:	681b      	ldr	r3, [r3, #0]
 8103186:	4a56      	ldr	r2, [pc, #344]	@ (81032e0 <HAL_DMA_Init+0x66c>)
 8103188:	4293      	cmp	r3, r2
 810318a:	d054      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	681b      	ldr	r3, [r3, #0]
 8103190:	4a54      	ldr	r2, [pc, #336]	@ (81032e4 <HAL_DMA_Init+0x670>)
 8103192:	4293      	cmp	r3, r2
 8103194:	d04f      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	681b      	ldr	r3, [r3, #0]
 810319a:	4a53      	ldr	r2, [pc, #332]	@ (81032e8 <HAL_DMA_Init+0x674>)
 810319c:	4293      	cmp	r3, r2
 810319e:	d04a      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 81031a0:	687b      	ldr	r3, [r7, #4]
 81031a2:	681b      	ldr	r3, [r3, #0]
 81031a4:	4a51      	ldr	r2, [pc, #324]	@ (81032ec <HAL_DMA_Init+0x678>)
 81031a6:	4293      	cmp	r3, r2
 81031a8:	d045      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	681b      	ldr	r3, [r3, #0]
 81031ae:	4a50      	ldr	r2, [pc, #320]	@ (81032f0 <HAL_DMA_Init+0x67c>)
 81031b0:	4293      	cmp	r3, r2
 81031b2:	d040      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	681b      	ldr	r3, [r3, #0]
 81031b8:	4a4e      	ldr	r2, [pc, #312]	@ (81032f4 <HAL_DMA_Init+0x680>)
 81031ba:	4293      	cmp	r3, r2
 81031bc:	d03b      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 81031be:	687b      	ldr	r3, [r7, #4]
 81031c0:	681b      	ldr	r3, [r3, #0]
 81031c2:	4a4d      	ldr	r2, [pc, #308]	@ (81032f8 <HAL_DMA_Init+0x684>)
 81031c4:	4293      	cmp	r3, r2
 81031c6:	d036      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 81031c8:	687b      	ldr	r3, [r7, #4]
 81031ca:	681b      	ldr	r3, [r3, #0]
 81031cc:	4a4b      	ldr	r2, [pc, #300]	@ (81032fc <HAL_DMA_Init+0x688>)
 81031ce:	4293      	cmp	r3, r2
 81031d0:	d031      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	681b      	ldr	r3, [r3, #0]
 81031d6:	4a4a      	ldr	r2, [pc, #296]	@ (8103300 <HAL_DMA_Init+0x68c>)
 81031d8:	4293      	cmp	r3, r2
 81031da:	d02c      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	681b      	ldr	r3, [r3, #0]
 81031e0:	4a48      	ldr	r2, [pc, #288]	@ (8103304 <HAL_DMA_Init+0x690>)
 81031e2:	4293      	cmp	r3, r2
 81031e4:	d027      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	4a47      	ldr	r2, [pc, #284]	@ (8103308 <HAL_DMA_Init+0x694>)
 81031ec:	4293      	cmp	r3, r2
 81031ee:	d022      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	681b      	ldr	r3, [r3, #0]
 81031f4:	4a45      	ldr	r2, [pc, #276]	@ (810330c <HAL_DMA_Init+0x698>)
 81031f6:	4293      	cmp	r3, r2
 81031f8:	d01d      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	681b      	ldr	r3, [r3, #0]
 81031fe:	4a44      	ldr	r2, [pc, #272]	@ (8103310 <HAL_DMA_Init+0x69c>)
 8103200:	4293      	cmp	r3, r2
 8103202:	d018      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	681b      	ldr	r3, [r3, #0]
 8103208:	4a42      	ldr	r2, [pc, #264]	@ (8103314 <HAL_DMA_Init+0x6a0>)
 810320a:	4293      	cmp	r3, r2
 810320c:	d013      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 810320e:	687b      	ldr	r3, [r7, #4]
 8103210:	681b      	ldr	r3, [r3, #0]
 8103212:	4a41      	ldr	r2, [pc, #260]	@ (8103318 <HAL_DMA_Init+0x6a4>)
 8103214:	4293      	cmp	r3, r2
 8103216:	d00e      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	681b      	ldr	r3, [r3, #0]
 810321c:	4a3f      	ldr	r2, [pc, #252]	@ (810331c <HAL_DMA_Init+0x6a8>)
 810321e:	4293      	cmp	r3, r2
 8103220:	d009      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	681b      	ldr	r3, [r3, #0]
 8103226:	4a3e      	ldr	r2, [pc, #248]	@ (8103320 <HAL_DMA_Init+0x6ac>)
 8103228:	4293      	cmp	r3, r2
 810322a:	d004      	beq.n	8103236 <HAL_DMA_Init+0x5c2>
 810322c:	687b      	ldr	r3, [r7, #4]
 810322e:	681b      	ldr	r3, [r3, #0]
 8103230:	4a3c      	ldr	r2, [pc, #240]	@ (8103324 <HAL_DMA_Init+0x6b0>)
 8103232:	4293      	cmp	r3, r2
 8103234:	d101      	bne.n	810323a <HAL_DMA_Init+0x5c6>
 8103236:	2301      	movs	r3, #1
 8103238:	e000      	b.n	810323c <HAL_DMA_Init+0x5c8>
 810323a:	2300      	movs	r3, #0
 810323c:	2b00      	cmp	r3, #0
 810323e:	d032      	beq.n	81032a6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103240:	6878      	ldr	r0, [r7, #4]
 8103242:	f001 fb0f 	bl	8104864 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	689b      	ldr	r3, [r3, #8]
 810324a:	2b80      	cmp	r3, #128	@ 0x80
 810324c:	d102      	bne.n	8103254 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 810324e:	687b      	ldr	r3, [r7, #4]
 8103250:	2200      	movs	r2, #0
 8103252:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	685a      	ldr	r2, [r3, #4]
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810325c:	b2d2      	uxtb	r2, r2
 810325e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103264:	687a      	ldr	r2, [r7, #4]
 8103266:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8103268:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810326a:	687b      	ldr	r3, [r7, #4]
 810326c:	685b      	ldr	r3, [r3, #4]
 810326e:	2b00      	cmp	r3, #0
 8103270:	d010      	beq.n	8103294 <HAL_DMA_Init+0x620>
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	685b      	ldr	r3, [r3, #4]
 8103276:	2b08      	cmp	r3, #8
 8103278:	d80c      	bhi.n	8103294 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 810327a:	6878      	ldr	r0, [r7, #4]
 810327c:	f001 fb8c 	bl	8104998 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8103280:	687b      	ldr	r3, [r7, #4]
 8103282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103284:	2200      	movs	r2, #0
 8103286:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103288:	687b      	ldr	r3, [r7, #4]
 810328a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810328c:	687a      	ldr	r2, [r7, #4]
 810328e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8103290:	605a      	str	r2, [r3, #4]
 8103292:	e008      	b.n	81032a6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	2200      	movs	r2, #0
 8103298:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	2200      	movs	r2, #0
 810329e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	2200      	movs	r2, #0
 81032a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81032a6:	687b      	ldr	r3, [r7, #4]
 81032a8:	2200      	movs	r2, #0
 81032aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	2201      	movs	r2, #1
 81032b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 81032b4:	2300      	movs	r3, #0
}
 81032b6:	4618      	mov	r0, r3
 81032b8:	3718      	adds	r7, #24
 81032ba:	46bd      	mov	sp, r7
 81032bc:	bd80      	pop	{r7, pc}
 81032be:	bf00      	nop
 81032c0:	a7fdabf8 	.word	0xa7fdabf8
 81032c4:	cccccccd 	.word	0xcccccccd
 81032c8:	40020010 	.word	0x40020010
 81032cc:	40020028 	.word	0x40020028
 81032d0:	40020040 	.word	0x40020040
 81032d4:	40020058 	.word	0x40020058
 81032d8:	40020070 	.word	0x40020070
 81032dc:	40020088 	.word	0x40020088
 81032e0:	400200a0 	.word	0x400200a0
 81032e4:	400200b8 	.word	0x400200b8
 81032e8:	40020410 	.word	0x40020410
 81032ec:	40020428 	.word	0x40020428
 81032f0:	40020440 	.word	0x40020440
 81032f4:	40020458 	.word	0x40020458
 81032f8:	40020470 	.word	0x40020470
 81032fc:	40020488 	.word	0x40020488
 8103300:	400204a0 	.word	0x400204a0
 8103304:	400204b8 	.word	0x400204b8
 8103308:	58025408 	.word	0x58025408
 810330c:	5802541c 	.word	0x5802541c
 8103310:	58025430 	.word	0x58025430
 8103314:	58025444 	.word	0x58025444
 8103318:	58025458 	.word	0x58025458
 810331c:	5802546c 	.word	0x5802546c
 8103320:	58025480 	.word	0x58025480
 8103324:	58025494 	.word	0x58025494

08103328 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8103328:	b580      	push	{r7, lr}
 810332a:	b084      	sub	sp, #16
 810332c:	af00      	add	r7, sp, #0
 810332e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	2b00      	cmp	r3, #0
 8103334:	d101      	bne.n	810333a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8103336:	2301      	movs	r3, #1
 8103338:	e237      	b.n	81037aa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8103340:	b2db      	uxtb	r3, r3
 8103342:	2b02      	cmp	r3, #2
 8103344:	d004      	beq.n	8103350 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	2280      	movs	r2, #128	@ 0x80
 810334a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 810334c:	2301      	movs	r3, #1
 810334e:	e22c      	b.n	81037aa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	681b      	ldr	r3, [r3, #0]
 8103354:	4a5c      	ldr	r2, [pc, #368]	@ (81034c8 <HAL_DMA_Abort_IT+0x1a0>)
 8103356:	4293      	cmp	r3, r2
 8103358:	d04a      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	681b      	ldr	r3, [r3, #0]
 810335e:	4a5b      	ldr	r2, [pc, #364]	@ (81034cc <HAL_DMA_Abort_IT+0x1a4>)
 8103360:	4293      	cmp	r3, r2
 8103362:	d045      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	681b      	ldr	r3, [r3, #0]
 8103368:	4a59      	ldr	r2, [pc, #356]	@ (81034d0 <HAL_DMA_Abort_IT+0x1a8>)
 810336a:	4293      	cmp	r3, r2
 810336c:	d040      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 810336e:	687b      	ldr	r3, [r7, #4]
 8103370:	681b      	ldr	r3, [r3, #0]
 8103372:	4a58      	ldr	r2, [pc, #352]	@ (81034d4 <HAL_DMA_Abort_IT+0x1ac>)
 8103374:	4293      	cmp	r3, r2
 8103376:	d03b      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	681b      	ldr	r3, [r3, #0]
 810337c:	4a56      	ldr	r2, [pc, #344]	@ (81034d8 <HAL_DMA_Abort_IT+0x1b0>)
 810337e:	4293      	cmp	r3, r2
 8103380:	d036      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 8103382:	687b      	ldr	r3, [r7, #4]
 8103384:	681b      	ldr	r3, [r3, #0]
 8103386:	4a55      	ldr	r2, [pc, #340]	@ (81034dc <HAL_DMA_Abort_IT+0x1b4>)
 8103388:	4293      	cmp	r3, r2
 810338a:	d031      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	681b      	ldr	r3, [r3, #0]
 8103390:	4a53      	ldr	r2, [pc, #332]	@ (81034e0 <HAL_DMA_Abort_IT+0x1b8>)
 8103392:	4293      	cmp	r3, r2
 8103394:	d02c      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 8103396:	687b      	ldr	r3, [r7, #4]
 8103398:	681b      	ldr	r3, [r3, #0]
 810339a:	4a52      	ldr	r2, [pc, #328]	@ (81034e4 <HAL_DMA_Abort_IT+0x1bc>)
 810339c:	4293      	cmp	r3, r2
 810339e:	d027      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	681b      	ldr	r3, [r3, #0]
 81033a4:	4a50      	ldr	r2, [pc, #320]	@ (81034e8 <HAL_DMA_Abort_IT+0x1c0>)
 81033a6:	4293      	cmp	r3, r2
 81033a8:	d022      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 81033aa:	687b      	ldr	r3, [r7, #4]
 81033ac:	681b      	ldr	r3, [r3, #0]
 81033ae:	4a4f      	ldr	r2, [pc, #316]	@ (81034ec <HAL_DMA_Abort_IT+0x1c4>)
 81033b0:	4293      	cmp	r3, r2
 81033b2:	d01d      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	681b      	ldr	r3, [r3, #0]
 81033b8:	4a4d      	ldr	r2, [pc, #308]	@ (81034f0 <HAL_DMA_Abort_IT+0x1c8>)
 81033ba:	4293      	cmp	r3, r2
 81033bc:	d018      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 81033be:	687b      	ldr	r3, [r7, #4]
 81033c0:	681b      	ldr	r3, [r3, #0]
 81033c2:	4a4c      	ldr	r2, [pc, #304]	@ (81034f4 <HAL_DMA_Abort_IT+0x1cc>)
 81033c4:	4293      	cmp	r3, r2
 81033c6:	d013      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 81033c8:	687b      	ldr	r3, [r7, #4]
 81033ca:	681b      	ldr	r3, [r3, #0]
 81033cc:	4a4a      	ldr	r2, [pc, #296]	@ (81034f8 <HAL_DMA_Abort_IT+0x1d0>)
 81033ce:	4293      	cmp	r3, r2
 81033d0:	d00e      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 81033d2:	687b      	ldr	r3, [r7, #4]
 81033d4:	681b      	ldr	r3, [r3, #0]
 81033d6:	4a49      	ldr	r2, [pc, #292]	@ (81034fc <HAL_DMA_Abort_IT+0x1d4>)
 81033d8:	4293      	cmp	r3, r2
 81033da:	d009      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 81033dc:	687b      	ldr	r3, [r7, #4]
 81033de:	681b      	ldr	r3, [r3, #0]
 81033e0:	4a47      	ldr	r2, [pc, #284]	@ (8103500 <HAL_DMA_Abort_IT+0x1d8>)
 81033e2:	4293      	cmp	r3, r2
 81033e4:	d004      	beq.n	81033f0 <HAL_DMA_Abort_IT+0xc8>
 81033e6:	687b      	ldr	r3, [r7, #4]
 81033e8:	681b      	ldr	r3, [r3, #0]
 81033ea:	4a46      	ldr	r2, [pc, #280]	@ (8103504 <HAL_DMA_Abort_IT+0x1dc>)
 81033ec:	4293      	cmp	r3, r2
 81033ee:	d101      	bne.n	81033f4 <HAL_DMA_Abort_IT+0xcc>
 81033f0:	2301      	movs	r3, #1
 81033f2:	e000      	b.n	81033f6 <HAL_DMA_Abort_IT+0xce>
 81033f4:	2300      	movs	r3, #0
 81033f6:	2b00      	cmp	r3, #0
 81033f8:	f000 8086 	beq.w	8103508 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	2204      	movs	r2, #4
 8103400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	681b      	ldr	r3, [r3, #0]
 8103408:	4a2f      	ldr	r2, [pc, #188]	@ (81034c8 <HAL_DMA_Abort_IT+0x1a0>)
 810340a:	4293      	cmp	r3, r2
 810340c:	d04a      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	681b      	ldr	r3, [r3, #0]
 8103412:	4a2e      	ldr	r2, [pc, #184]	@ (81034cc <HAL_DMA_Abort_IT+0x1a4>)
 8103414:	4293      	cmp	r3, r2
 8103416:	d045      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 8103418:	687b      	ldr	r3, [r7, #4]
 810341a:	681b      	ldr	r3, [r3, #0]
 810341c:	4a2c      	ldr	r2, [pc, #176]	@ (81034d0 <HAL_DMA_Abort_IT+0x1a8>)
 810341e:	4293      	cmp	r3, r2
 8103420:	d040      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	681b      	ldr	r3, [r3, #0]
 8103426:	4a2b      	ldr	r2, [pc, #172]	@ (81034d4 <HAL_DMA_Abort_IT+0x1ac>)
 8103428:	4293      	cmp	r3, r2
 810342a:	d03b      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	4a29      	ldr	r2, [pc, #164]	@ (81034d8 <HAL_DMA_Abort_IT+0x1b0>)
 8103432:	4293      	cmp	r3, r2
 8103434:	d036      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	681b      	ldr	r3, [r3, #0]
 810343a:	4a28      	ldr	r2, [pc, #160]	@ (81034dc <HAL_DMA_Abort_IT+0x1b4>)
 810343c:	4293      	cmp	r3, r2
 810343e:	d031      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	681b      	ldr	r3, [r3, #0]
 8103444:	4a26      	ldr	r2, [pc, #152]	@ (81034e0 <HAL_DMA_Abort_IT+0x1b8>)
 8103446:	4293      	cmp	r3, r2
 8103448:	d02c      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	681b      	ldr	r3, [r3, #0]
 810344e:	4a25      	ldr	r2, [pc, #148]	@ (81034e4 <HAL_DMA_Abort_IT+0x1bc>)
 8103450:	4293      	cmp	r3, r2
 8103452:	d027      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	681b      	ldr	r3, [r3, #0]
 8103458:	4a23      	ldr	r2, [pc, #140]	@ (81034e8 <HAL_DMA_Abort_IT+0x1c0>)
 810345a:	4293      	cmp	r3, r2
 810345c:	d022      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	681b      	ldr	r3, [r3, #0]
 8103462:	4a22      	ldr	r2, [pc, #136]	@ (81034ec <HAL_DMA_Abort_IT+0x1c4>)
 8103464:	4293      	cmp	r3, r2
 8103466:	d01d      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	681b      	ldr	r3, [r3, #0]
 810346c:	4a20      	ldr	r2, [pc, #128]	@ (81034f0 <HAL_DMA_Abort_IT+0x1c8>)
 810346e:	4293      	cmp	r3, r2
 8103470:	d018      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	681b      	ldr	r3, [r3, #0]
 8103476:	4a1f      	ldr	r2, [pc, #124]	@ (81034f4 <HAL_DMA_Abort_IT+0x1cc>)
 8103478:	4293      	cmp	r3, r2
 810347a:	d013      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	681b      	ldr	r3, [r3, #0]
 8103480:	4a1d      	ldr	r2, [pc, #116]	@ (81034f8 <HAL_DMA_Abort_IT+0x1d0>)
 8103482:	4293      	cmp	r3, r2
 8103484:	d00e      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	681b      	ldr	r3, [r3, #0]
 810348a:	4a1c      	ldr	r2, [pc, #112]	@ (81034fc <HAL_DMA_Abort_IT+0x1d4>)
 810348c:	4293      	cmp	r3, r2
 810348e:	d009      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	681b      	ldr	r3, [r3, #0]
 8103494:	4a1a      	ldr	r2, [pc, #104]	@ (8103500 <HAL_DMA_Abort_IT+0x1d8>)
 8103496:	4293      	cmp	r3, r2
 8103498:	d004      	beq.n	81034a4 <HAL_DMA_Abort_IT+0x17c>
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	681b      	ldr	r3, [r3, #0]
 810349e:	4a19      	ldr	r2, [pc, #100]	@ (8103504 <HAL_DMA_Abort_IT+0x1dc>)
 81034a0:	4293      	cmp	r3, r2
 81034a2:	d108      	bne.n	81034b6 <HAL_DMA_Abort_IT+0x18e>
 81034a4:	687b      	ldr	r3, [r7, #4]
 81034a6:	681b      	ldr	r3, [r3, #0]
 81034a8:	681a      	ldr	r2, [r3, #0]
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	681b      	ldr	r3, [r3, #0]
 81034ae:	f022 0201 	bic.w	r2, r2, #1
 81034b2:	601a      	str	r2, [r3, #0]
 81034b4:	e178      	b.n	81037a8 <HAL_DMA_Abort_IT+0x480>
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	681b      	ldr	r3, [r3, #0]
 81034ba:	681a      	ldr	r2, [r3, #0]
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	681b      	ldr	r3, [r3, #0]
 81034c0:	f022 0201 	bic.w	r2, r2, #1
 81034c4:	601a      	str	r2, [r3, #0]
 81034c6:	e16f      	b.n	81037a8 <HAL_DMA_Abort_IT+0x480>
 81034c8:	40020010 	.word	0x40020010
 81034cc:	40020028 	.word	0x40020028
 81034d0:	40020040 	.word	0x40020040
 81034d4:	40020058 	.word	0x40020058
 81034d8:	40020070 	.word	0x40020070
 81034dc:	40020088 	.word	0x40020088
 81034e0:	400200a0 	.word	0x400200a0
 81034e4:	400200b8 	.word	0x400200b8
 81034e8:	40020410 	.word	0x40020410
 81034ec:	40020428 	.word	0x40020428
 81034f0:	40020440 	.word	0x40020440
 81034f4:	40020458 	.word	0x40020458
 81034f8:	40020470 	.word	0x40020470
 81034fc:	40020488 	.word	0x40020488
 8103500:	400204a0 	.word	0x400204a0
 8103504:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	681a      	ldr	r2, [r3, #0]
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	f022 020e 	bic.w	r2, r2, #14
 8103516:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	4a6c      	ldr	r2, [pc, #432]	@ (81036d0 <HAL_DMA_Abort_IT+0x3a8>)
 810351e:	4293      	cmp	r3, r2
 8103520:	d04a      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	681b      	ldr	r3, [r3, #0]
 8103526:	4a6b      	ldr	r2, [pc, #428]	@ (81036d4 <HAL_DMA_Abort_IT+0x3ac>)
 8103528:	4293      	cmp	r3, r2
 810352a:	d045      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	4a69      	ldr	r2, [pc, #420]	@ (81036d8 <HAL_DMA_Abort_IT+0x3b0>)
 8103532:	4293      	cmp	r3, r2
 8103534:	d040      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	681b      	ldr	r3, [r3, #0]
 810353a:	4a68      	ldr	r2, [pc, #416]	@ (81036dc <HAL_DMA_Abort_IT+0x3b4>)
 810353c:	4293      	cmp	r3, r2
 810353e:	d03b      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	681b      	ldr	r3, [r3, #0]
 8103544:	4a66      	ldr	r2, [pc, #408]	@ (81036e0 <HAL_DMA_Abort_IT+0x3b8>)
 8103546:	4293      	cmp	r3, r2
 8103548:	d036      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	4a65      	ldr	r2, [pc, #404]	@ (81036e4 <HAL_DMA_Abort_IT+0x3bc>)
 8103550:	4293      	cmp	r3, r2
 8103552:	d031      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	681b      	ldr	r3, [r3, #0]
 8103558:	4a63      	ldr	r2, [pc, #396]	@ (81036e8 <HAL_DMA_Abort_IT+0x3c0>)
 810355a:	4293      	cmp	r3, r2
 810355c:	d02c      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	4a62      	ldr	r2, [pc, #392]	@ (81036ec <HAL_DMA_Abort_IT+0x3c4>)
 8103564:	4293      	cmp	r3, r2
 8103566:	d027      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	681b      	ldr	r3, [r3, #0]
 810356c:	4a60      	ldr	r2, [pc, #384]	@ (81036f0 <HAL_DMA_Abort_IT+0x3c8>)
 810356e:	4293      	cmp	r3, r2
 8103570:	d022      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	681b      	ldr	r3, [r3, #0]
 8103576:	4a5f      	ldr	r2, [pc, #380]	@ (81036f4 <HAL_DMA_Abort_IT+0x3cc>)
 8103578:	4293      	cmp	r3, r2
 810357a:	d01d      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	681b      	ldr	r3, [r3, #0]
 8103580:	4a5d      	ldr	r2, [pc, #372]	@ (81036f8 <HAL_DMA_Abort_IT+0x3d0>)
 8103582:	4293      	cmp	r3, r2
 8103584:	d018      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	4a5c      	ldr	r2, [pc, #368]	@ (81036fc <HAL_DMA_Abort_IT+0x3d4>)
 810358c:	4293      	cmp	r3, r2
 810358e:	d013      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	4a5a      	ldr	r2, [pc, #360]	@ (8103700 <HAL_DMA_Abort_IT+0x3d8>)
 8103596:	4293      	cmp	r3, r2
 8103598:	d00e      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	4a59      	ldr	r2, [pc, #356]	@ (8103704 <HAL_DMA_Abort_IT+0x3dc>)
 81035a0:	4293      	cmp	r3, r2
 81035a2:	d009      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 81035a4:	687b      	ldr	r3, [r7, #4]
 81035a6:	681b      	ldr	r3, [r3, #0]
 81035a8:	4a57      	ldr	r2, [pc, #348]	@ (8103708 <HAL_DMA_Abort_IT+0x3e0>)
 81035aa:	4293      	cmp	r3, r2
 81035ac:	d004      	beq.n	81035b8 <HAL_DMA_Abort_IT+0x290>
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	4a56      	ldr	r2, [pc, #344]	@ (810370c <HAL_DMA_Abort_IT+0x3e4>)
 81035b4:	4293      	cmp	r3, r2
 81035b6:	d108      	bne.n	81035ca <HAL_DMA_Abort_IT+0x2a2>
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	681b      	ldr	r3, [r3, #0]
 81035bc:	681a      	ldr	r2, [r3, #0]
 81035be:	687b      	ldr	r3, [r7, #4]
 81035c0:	681b      	ldr	r3, [r3, #0]
 81035c2:	f022 0201 	bic.w	r2, r2, #1
 81035c6:	601a      	str	r2, [r3, #0]
 81035c8:	e007      	b.n	81035da <HAL_DMA_Abort_IT+0x2b2>
 81035ca:	687b      	ldr	r3, [r7, #4]
 81035cc:	681b      	ldr	r3, [r3, #0]
 81035ce:	681a      	ldr	r2, [r3, #0]
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	681b      	ldr	r3, [r3, #0]
 81035d4:	f022 0201 	bic.w	r2, r2, #1
 81035d8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	681b      	ldr	r3, [r3, #0]
 81035de:	4a3c      	ldr	r2, [pc, #240]	@ (81036d0 <HAL_DMA_Abort_IT+0x3a8>)
 81035e0:	4293      	cmp	r3, r2
 81035e2:	d072      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	4a3a      	ldr	r2, [pc, #232]	@ (81036d4 <HAL_DMA_Abort_IT+0x3ac>)
 81035ea:	4293      	cmp	r3, r2
 81035ec:	d06d      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	681b      	ldr	r3, [r3, #0]
 81035f2:	4a39      	ldr	r2, [pc, #228]	@ (81036d8 <HAL_DMA_Abort_IT+0x3b0>)
 81035f4:	4293      	cmp	r3, r2
 81035f6:	d068      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	4a37      	ldr	r2, [pc, #220]	@ (81036dc <HAL_DMA_Abort_IT+0x3b4>)
 81035fe:	4293      	cmp	r3, r2
 8103600:	d063      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	681b      	ldr	r3, [r3, #0]
 8103606:	4a36      	ldr	r2, [pc, #216]	@ (81036e0 <HAL_DMA_Abort_IT+0x3b8>)
 8103608:	4293      	cmp	r3, r2
 810360a:	d05e      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	4a34      	ldr	r2, [pc, #208]	@ (81036e4 <HAL_DMA_Abort_IT+0x3bc>)
 8103612:	4293      	cmp	r3, r2
 8103614:	d059      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	4a33      	ldr	r2, [pc, #204]	@ (81036e8 <HAL_DMA_Abort_IT+0x3c0>)
 810361c:	4293      	cmp	r3, r2
 810361e:	d054      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	681b      	ldr	r3, [r3, #0]
 8103624:	4a31      	ldr	r2, [pc, #196]	@ (81036ec <HAL_DMA_Abort_IT+0x3c4>)
 8103626:	4293      	cmp	r3, r2
 8103628:	d04f      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	4a30      	ldr	r2, [pc, #192]	@ (81036f0 <HAL_DMA_Abort_IT+0x3c8>)
 8103630:	4293      	cmp	r3, r2
 8103632:	d04a      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	4a2e      	ldr	r2, [pc, #184]	@ (81036f4 <HAL_DMA_Abort_IT+0x3cc>)
 810363a:	4293      	cmp	r3, r2
 810363c:	d045      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	4a2d      	ldr	r2, [pc, #180]	@ (81036f8 <HAL_DMA_Abort_IT+0x3d0>)
 8103644:	4293      	cmp	r3, r2
 8103646:	d040      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	4a2b      	ldr	r2, [pc, #172]	@ (81036fc <HAL_DMA_Abort_IT+0x3d4>)
 810364e:	4293      	cmp	r3, r2
 8103650:	d03b      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 8103652:	687b      	ldr	r3, [r7, #4]
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	4a2a      	ldr	r2, [pc, #168]	@ (8103700 <HAL_DMA_Abort_IT+0x3d8>)
 8103658:	4293      	cmp	r3, r2
 810365a:	d036      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	4a28      	ldr	r2, [pc, #160]	@ (8103704 <HAL_DMA_Abort_IT+0x3dc>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d031      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	681b      	ldr	r3, [r3, #0]
 810366a:	4a27      	ldr	r2, [pc, #156]	@ (8103708 <HAL_DMA_Abort_IT+0x3e0>)
 810366c:	4293      	cmp	r3, r2
 810366e:	d02c      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	681b      	ldr	r3, [r3, #0]
 8103674:	4a25      	ldr	r2, [pc, #148]	@ (810370c <HAL_DMA_Abort_IT+0x3e4>)
 8103676:	4293      	cmp	r3, r2
 8103678:	d027      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	681b      	ldr	r3, [r3, #0]
 810367e:	4a24      	ldr	r2, [pc, #144]	@ (8103710 <HAL_DMA_Abort_IT+0x3e8>)
 8103680:	4293      	cmp	r3, r2
 8103682:	d022      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	4a22      	ldr	r2, [pc, #136]	@ (8103714 <HAL_DMA_Abort_IT+0x3ec>)
 810368a:	4293      	cmp	r3, r2
 810368c:	d01d      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	681b      	ldr	r3, [r3, #0]
 8103692:	4a21      	ldr	r2, [pc, #132]	@ (8103718 <HAL_DMA_Abort_IT+0x3f0>)
 8103694:	4293      	cmp	r3, r2
 8103696:	d018      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	4a1f      	ldr	r2, [pc, #124]	@ (810371c <HAL_DMA_Abort_IT+0x3f4>)
 810369e:	4293      	cmp	r3, r2
 81036a0:	d013      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	4a1e      	ldr	r2, [pc, #120]	@ (8103720 <HAL_DMA_Abort_IT+0x3f8>)
 81036a8:	4293      	cmp	r3, r2
 81036aa:	d00e      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	4a1c      	ldr	r2, [pc, #112]	@ (8103724 <HAL_DMA_Abort_IT+0x3fc>)
 81036b2:	4293      	cmp	r3, r2
 81036b4:	d009      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	681b      	ldr	r3, [r3, #0]
 81036ba:	4a1b      	ldr	r2, [pc, #108]	@ (8103728 <HAL_DMA_Abort_IT+0x400>)
 81036bc:	4293      	cmp	r3, r2
 81036be:	d004      	beq.n	81036ca <HAL_DMA_Abort_IT+0x3a2>
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	4a19      	ldr	r2, [pc, #100]	@ (810372c <HAL_DMA_Abort_IT+0x404>)
 81036c6:	4293      	cmp	r3, r2
 81036c8:	d132      	bne.n	8103730 <HAL_DMA_Abort_IT+0x408>
 81036ca:	2301      	movs	r3, #1
 81036cc:	e031      	b.n	8103732 <HAL_DMA_Abort_IT+0x40a>
 81036ce:	bf00      	nop
 81036d0:	40020010 	.word	0x40020010
 81036d4:	40020028 	.word	0x40020028
 81036d8:	40020040 	.word	0x40020040
 81036dc:	40020058 	.word	0x40020058
 81036e0:	40020070 	.word	0x40020070
 81036e4:	40020088 	.word	0x40020088
 81036e8:	400200a0 	.word	0x400200a0
 81036ec:	400200b8 	.word	0x400200b8
 81036f0:	40020410 	.word	0x40020410
 81036f4:	40020428 	.word	0x40020428
 81036f8:	40020440 	.word	0x40020440
 81036fc:	40020458 	.word	0x40020458
 8103700:	40020470 	.word	0x40020470
 8103704:	40020488 	.word	0x40020488
 8103708:	400204a0 	.word	0x400204a0
 810370c:	400204b8 	.word	0x400204b8
 8103710:	58025408 	.word	0x58025408
 8103714:	5802541c 	.word	0x5802541c
 8103718:	58025430 	.word	0x58025430
 810371c:	58025444 	.word	0x58025444
 8103720:	58025458 	.word	0x58025458
 8103724:	5802546c 	.word	0x5802546c
 8103728:	58025480 	.word	0x58025480
 810372c:	58025494 	.word	0x58025494
 8103730:	2300      	movs	r3, #0
 8103732:	2b00      	cmp	r3, #0
 8103734:	d028      	beq.n	8103788 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810373a:	681a      	ldr	r2, [r3, #0]
 810373c:	687b      	ldr	r3, [r7, #4]
 810373e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103744:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103746:	687b      	ldr	r3, [r7, #4]
 8103748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810374a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103750:	f003 031f 	and.w	r3, r3, #31
 8103754:	2201      	movs	r2, #1
 8103756:	409a      	lsls	r2, r3
 8103758:	68fb      	ldr	r3, [r7, #12]
 810375a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810375c:	687b      	ldr	r3, [r7, #4]
 810375e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103760:	687a      	ldr	r2, [r7, #4]
 8103762:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8103764:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8103766:	687b      	ldr	r3, [r7, #4]
 8103768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810376a:	2b00      	cmp	r3, #0
 810376c:	d00c      	beq.n	8103788 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103772:	681a      	ldr	r2, [r3, #0]
 8103774:	687b      	ldr	r3, [r7, #4]
 8103776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810377c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810377e:	687b      	ldr	r3, [r7, #4]
 8103780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103782:	687a      	ldr	r2, [r7, #4]
 8103784:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8103786:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	2201      	movs	r2, #1
 810378c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	2200      	movs	r2, #0
 8103794:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810379c:	2b00      	cmp	r3, #0
 810379e:	d003      	beq.n	81037a8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81037a4:	6878      	ldr	r0, [r7, #4]
 81037a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81037a8:	2300      	movs	r3, #0
}
 81037aa:	4618      	mov	r0, r3
 81037ac:	3710      	adds	r7, #16
 81037ae:	46bd      	mov	sp, r7
 81037b0:	bd80      	pop	{r7, pc}
 81037b2:	bf00      	nop

081037b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81037b4:	b580      	push	{r7, lr}
 81037b6:	b08a      	sub	sp, #40	@ 0x28
 81037b8:	af00      	add	r7, sp, #0
 81037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81037bc:	2300      	movs	r3, #0
 81037be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81037c0:	4b67      	ldr	r3, [pc, #412]	@ (8103960 <HAL_DMA_IRQHandler+0x1ac>)
 81037c2:	681b      	ldr	r3, [r3, #0]
 81037c4:	4a67      	ldr	r2, [pc, #412]	@ (8103964 <HAL_DMA_IRQHandler+0x1b0>)
 81037c6:	fba2 2303 	umull	r2, r3, r2, r3
 81037ca:	0a9b      	lsrs	r3, r3, #10
 81037cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81037d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81037d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 81037da:	6a3b      	ldr	r3, [r7, #32]
 81037dc:	681b      	ldr	r3, [r3, #0]
 81037de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 81037e0:	69fb      	ldr	r3, [r7, #28]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	681b      	ldr	r3, [r3, #0]
 81037ea:	4a5f      	ldr	r2, [pc, #380]	@ (8103968 <HAL_DMA_IRQHandler+0x1b4>)
 81037ec:	4293      	cmp	r3, r2
 81037ee:	d04a      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	4a5d      	ldr	r2, [pc, #372]	@ (810396c <HAL_DMA_IRQHandler+0x1b8>)
 81037f6:	4293      	cmp	r3, r2
 81037f8:	d045      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	681b      	ldr	r3, [r3, #0]
 81037fe:	4a5c      	ldr	r2, [pc, #368]	@ (8103970 <HAL_DMA_IRQHandler+0x1bc>)
 8103800:	4293      	cmp	r3, r2
 8103802:	d040      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	681b      	ldr	r3, [r3, #0]
 8103808:	4a5a      	ldr	r2, [pc, #360]	@ (8103974 <HAL_DMA_IRQHandler+0x1c0>)
 810380a:	4293      	cmp	r3, r2
 810380c:	d03b      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	681b      	ldr	r3, [r3, #0]
 8103812:	4a59      	ldr	r2, [pc, #356]	@ (8103978 <HAL_DMA_IRQHandler+0x1c4>)
 8103814:	4293      	cmp	r3, r2
 8103816:	d036      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	681b      	ldr	r3, [r3, #0]
 810381c:	4a57      	ldr	r2, [pc, #348]	@ (810397c <HAL_DMA_IRQHandler+0x1c8>)
 810381e:	4293      	cmp	r3, r2
 8103820:	d031      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	681b      	ldr	r3, [r3, #0]
 8103826:	4a56      	ldr	r2, [pc, #344]	@ (8103980 <HAL_DMA_IRQHandler+0x1cc>)
 8103828:	4293      	cmp	r3, r2
 810382a:	d02c      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	4a54      	ldr	r2, [pc, #336]	@ (8103984 <HAL_DMA_IRQHandler+0x1d0>)
 8103832:	4293      	cmp	r3, r2
 8103834:	d027      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 8103836:	687b      	ldr	r3, [r7, #4]
 8103838:	681b      	ldr	r3, [r3, #0]
 810383a:	4a53      	ldr	r2, [pc, #332]	@ (8103988 <HAL_DMA_IRQHandler+0x1d4>)
 810383c:	4293      	cmp	r3, r2
 810383e:	d022      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 8103840:	687b      	ldr	r3, [r7, #4]
 8103842:	681b      	ldr	r3, [r3, #0]
 8103844:	4a51      	ldr	r2, [pc, #324]	@ (810398c <HAL_DMA_IRQHandler+0x1d8>)
 8103846:	4293      	cmp	r3, r2
 8103848:	d01d      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 810384a:	687b      	ldr	r3, [r7, #4]
 810384c:	681b      	ldr	r3, [r3, #0]
 810384e:	4a50      	ldr	r2, [pc, #320]	@ (8103990 <HAL_DMA_IRQHandler+0x1dc>)
 8103850:	4293      	cmp	r3, r2
 8103852:	d018      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	681b      	ldr	r3, [r3, #0]
 8103858:	4a4e      	ldr	r2, [pc, #312]	@ (8103994 <HAL_DMA_IRQHandler+0x1e0>)
 810385a:	4293      	cmp	r3, r2
 810385c:	d013      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 810385e:	687b      	ldr	r3, [r7, #4]
 8103860:	681b      	ldr	r3, [r3, #0]
 8103862:	4a4d      	ldr	r2, [pc, #308]	@ (8103998 <HAL_DMA_IRQHandler+0x1e4>)
 8103864:	4293      	cmp	r3, r2
 8103866:	d00e      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	681b      	ldr	r3, [r3, #0]
 810386c:	4a4b      	ldr	r2, [pc, #300]	@ (810399c <HAL_DMA_IRQHandler+0x1e8>)
 810386e:	4293      	cmp	r3, r2
 8103870:	d009      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	681b      	ldr	r3, [r3, #0]
 8103876:	4a4a      	ldr	r2, [pc, #296]	@ (81039a0 <HAL_DMA_IRQHandler+0x1ec>)
 8103878:	4293      	cmp	r3, r2
 810387a:	d004      	beq.n	8103886 <HAL_DMA_IRQHandler+0xd2>
 810387c:	687b      	ldr	r3, [r7, #4]
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	4a48      	ldr	r2, [pc, #288]	@ (81039a4 <HAL_DMA_IRQHandler+0x1f0>)
 8103882:	4293      	cmp	r3, r2
 8103884:	d101      	bne.n	810388a <HAL_DMA_IRQHandler+0xd6>
 8103886:	2301      	movs	r3, #1
 8103888:	e000      	b.n	810388c <HAL_DMA_IRQHandler+0xd8>
 810388a:	2300      	movs	r3, #0
 810388c:	2b00      	cmp	r3, #0
 810388e:	f000 842b 	beq.w	81040e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103896:	f003 031f 	and.w	r3, r3, #31
 810389a:	2208      	movs	r2, #8
 810389c:	409a      	lsls	r2, r3
 810389e:	69bb      	ldr	r3, [r7, #24]
 81038a0:	4013      	ands	r3, r2
 81038a2:	2b00      	cmp	r3, #0
 81038a4:	f000 80a2 	beq.w	81039ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	4a2e      	ldr	r2, [pc, #184]	@ (8103968 <HAL_DMA_IRQHandler+0x1b4>)
 81038ae:	4293      	cmp	r3, r2
 81038b0:	d04a      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	681b      	ldr	r3, [r3, #0]
 81038b6:	4a2d      	ldr	r2, [pc, #180]	@ (810396c <HAL_DMA_IRQHandler+0x1b8>)
 81038b8:	4293      	cmp	r3, r2
 81038ba:	d045      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	4a2b      	ldr	r2, [pc, #172]	@ (8103970 <HAL_DMA_IRQHandler+0x1bc>)
 81038c2:	4293      	cmp	r3, r2
 81038c4:	d040      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	4a2a      	ldr	r2, [pc, #168]	@ (8103974 <HAL_DMA_IRQHandler+0x1c0>)
 81038cc:	4293      	cmp	r3, r2
 81038ce:	d03b      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	681b      	ldr	r3, [r3, #0]
 81038d4:	4a28      	ldr	r2, [pc, #160]	@ (8103978 <HAL_DMA_IRQHandler+0x1c4>)
 81038d6:	4293      	cmp	r3, r2
 81038d8:	d036      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	681b      	ldr	r3, [r3, #0]
 81038de:	4a27      	ldr	r2, [pc, #156]	@ (810397c <HAL_DMA_IRQHandler+0x1c8>)
 81038e0:	4293      	cmp	r3, r2
 81038e2:	d031      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	681b      	ldr	r3, [r3, #0]
 81038e8:	4a25      	ldr	r2, [pc, #148]	@ (8103980 <HAL_DMA_IRQHandler+0x1cc>)
 81038ea:	4293      	cmp	r3, r2
 81038ec:	d02c      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	681b      	ldr	r3, [r3, #0]
 81038f2:	4a24      	ldr	r2, [pc, #144]	@ (8103984 <HAL_DMA_IRQHandler+0x1d0>)
 81038f4:	4293      	cmp	r3, r2
 81038f6:	d027      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	681b      	ldr	r3, [r3, #0]
 81038fc:	4a22      	ldr	r2, [pc, #136]	@ (8103988 <HAL_DMA_IRQHandler+0x1d4>)
 81038fe:	4293      	cmp	r3, r2
 8103900:	d022      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	681b      	ldr	r3, [r3, #0]
 8103906:	4a21      	ldr	r2, [pc, #132]	@ (810398c <HAL_DMA_IRQHandler+0x1d8>)
 8103908:	4293      	cmp	r3, r2
 810390a:	d01d      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	681b      	ldr	r3, [r3, #0]
 8103910:	4a1f      	ldr	r2, [pc, #124]	@ (8103990 <HAL_DMA_IRQHandler+0x1dc>)
 8103912:	4293      	cmp	r3, r2
 8103914:	d018      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	4a1e      	ldr	r2, [pc, #120]	@ (8103994 <HAL_DMA_IRQHandler+0x1e0>)
 810391c:	4293      	cmp	r3, r2
 810391e:	d013      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	681b      	ldr	r3, [r3, #0]
 8103924:	4a1c      	ldr	r2, [pc, #112]	@ (8103998 <HAL_DMA_IRQHandler+0x1e4>)
 8103926:	4293      	cmp	r3, r2
 8103928:	d00e      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	681b      	ldr	r3, [r3, #0]
 810392e:	4a1b      	ldr	r2, [pc, #108]	@ (810399c <HAL_DMA_IRQHandler+0x1e8>)
 8103930:	4293      	cmp	r3, r2
 8103932:	d009      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	681b      	ldr	r3, [r3, #0]
 8103938:	4a19      	ldr	r2, [pc, #100]	@ (81039a0 <HAL_DMA_IRQHandler+0x1ec>)
 810393a:	4293      	cmp	r3, r2
 810393c:	d004      	beq.n	8103948 <HAL_DMA_IRQHandler+0x194>
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	4a18      	ldr	r2, [pc, #96]	@ (81039a4 <HAL_DMA_IRQHandler+0x1f0>)
 8103944:	4293      	cmp	r3, r2
 8103946:	d12f      	bne.n	81039a8 <HAL_DMA_IRQHandler+0x1f4>
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	681b      	ldr	r3, [r3, #0]
 810394c:	681b      	ldr	r3, [r3, #0]
 810394e:	f003 0304 	and.w	r3, r3, #4
 8103952:	2b00      	cmp	r3, #0
 8103954:	bf14      	ite	ne
 8103956:	2301      	movne	r3, #1
 8103958:	2300      	moveq	r3, #0
 810395a:	b2db      	uxtb	r3, r3
 810395c:	e02e      	b.n	81039bc <HAL_DMA_IRQHandler+0x208>
 810395e:	bf00      	nop
 8103960:	10000000 	.word	0x10000000
 8103964:	1b4e81b5 	.word	0x1b4e81b5
 8103968:	40020010 	.word	0x40020010
 810396c:	40020028 	.word	0x40020028
 8103970:	40020040 	.word	0x40020040
 8103974:	40020058 	.word	0x40020058
 8103978:	40020070 	.word	0x40020070
 810397c:	40020088 	.word	0x40020088
 8103980:	400200a0 	.word	0x400200a0
 8103984:	400200b8 	.word	0x400200b8
 8103988:	40020410 	.word	0x40020410
 810398c:	40020428 	.word	0x40020428
 8103990:	40020440 	.word	0x40020440
 8103994:	40020458 	.word	0x40020458
 8103998:	40020470 	.word	0x40020470
 810399c:	40020488 	.word	0x40020488
 81039a0:	400204a0 	.word	0x400204a0
 81039a4:	400204b8 	.word	0x400204b8
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	681b      	ldr	r3, [r3, #0]
 81039ae:	f003 0308 	and.w	r3, r3, #8
 81039b2:	2b00      	cmp	r3, #0
 81039b4:	bf14      	ite	ne
 81039b6:	2301      	movne	r3, #1
 81039b8:	2300      	moveq	r3, #0
 81039ba:	b2db      	uxtb	r3, r3
 81039bc:	2b00      	cmp	r3, #0
 81039be:	d015      	beq.n	81039ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	681a      	ldr	r2, [r3, #0]
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	681b      	ldr	r3, [r3, #0]
 81039ca:	f022 0204 	bic.w	r2, r2, #4
 81039ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81039d4:	f003 031f 	and.w	r3, r3, #31
 81039d8:	2208      	movs	r2, #8
 81039da:	409a      	lsls	r2, r3
 81039dc:	6a3b      	ldr	r3, [r7, #32]
 81039de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81039e4:	f043 0201 	orr.w	r2, r3, #1
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81039f0:	f003 031f 	and.w	r3, r3, #31
 81039f4:	69ba      	ldr	r2, [r7, #24]
 81039f6:	fa22 f303 	lsr.w	r3, r2, r3
 81039fa:	f003 0301 	and.w	r3, r3, #1
 81039fe:	2b00      	cmp	r3, #0
 8103a00:	d06e      	beq.n	8103ae0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	681b      	ldr	r3, [r3, #0]
 8103a06:	4a69      	ldr	r2, [pc, #420]	@ (8103bac <HAL_DMA_IRQHandler+0x3f8>)
 8103a08:	4293      	cmp	r3, r2
 8103a0a:	d04a      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	681b      	ldr	r3, [r3, #0]
 8103a10:	4a67      	ldr	r2, [pc, #412]	@ (8103bb0 <HAL_DMA_IRQHandler+0x3fc>)
 8103a12:	4293      	cmp	r3, r2
 8103a14:	d045      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	4a66      	ldr	r2, [pc, #408]	@ (8103bb4 <HAL_DMA_IRQHandler+0x400>)
 8103a1c:	4293      	cmp	r3, r2
 8103a1e:	d040      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	4a64      	ldr	r2, [pc, #400]	@ (8103bb8 <HAL_DMA_IRQHandler+0x404>)
 8103a26:	4293      	cmp	r3, r2
 8103a28:	d03b      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	681b      	ldr	r3, [r3, #0]
 8103a2e:	4a63      	ldr	r2, [pc, #396]	@ (8103bbc <HAL_DMA_IRQHandler+0x408>)
 8103a30:	4293      	cmp	r3, r2
 8103a32:	d036      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	681b      	ldr	r3, [r3, #0]
 8103a38:	4a61      	ldr	r2, [pc, #388]	@ (8103bc0 <HAL_DMA_IRQHandler+0x40c>)
 8103a3a:	4293      	cmp	r3, r2
 8103a3c:	d031      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	681b      	ldr	r3, [r3, #0]
 8103a42:	4a60      	ldr	r2, [pc, #384]	@ (8103bc4 <HAL_DMA_IRQHandler+0x410>)
 8103a44:	4293      	cmp	r3, r2
 8103a46:	d02c      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	681b      	ldr	r3, [r3, #0]
 8103a4c:	4a5e      	ldr	r2, [pc, #376]	@ (8103bc8 <HAL_DMA_IRQHandler+0x414>)
 8103a4e:	4293      	cmp	r3, r2
 8103a50:	d027      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	681b      	ldr	r3, [r3, #0]
 8103a56:	4a5d      	ldr	r2, [pc, #372]	@ (8103bcc <HAL_DMA_IRQHandler+0x418>)
 8103a58:	4293      	cmp	r3, r2
 8103a5a:	d022      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	4a5b      	ldr	r2, [pc, #364]	@ (8103bd0 <HAL_DMA_IRQHandler+0x41c>)
 8103a62:	4293      	cmp	r3, r2
 8103a64:	d01d      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	681b      	ldr	r3, [r3, #0]
 8103a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8103bd4 <HAL_DMA_IRQHandler+0x420>)
 8103a6c:	4293      	cmp	r3, r2
 8103a6e:	d018      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	4a58      	ldr	r2, [pc, #352]	@ (8103bd8 <HAL_DMA_IRQHandler+0x424>)
 8103a76:	4293      	cmp	r3, r2
 8103a78:	d013      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	4a57      	ldr	r2, [pc, #348]	@ (8103bdc <HAL_DMA_IRQHandler+0x428>)
 8103a80:	4293      	cmp	r3, r2
 8103a82:	d00e      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	4a55      	ldr	r2, [pc, #340]	@ (8103be0 <HAL_DMA_IRQHandler+0x42c>)
 8103a8a:	4293      	cmp	r3, r2
 8103a8c:	d009      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	681b      	ldr	r3, [r3, #0]
 8103a92:	4a54      	ldr	r2, [pc, #336]	@ (8103be4 <HAL_DMA_IRQHandler+0x430>)
 8103a94:	4293      	cmp	r3, r2
 8103a96:	d004      	beq.n	8103aa2 <HAL_DMA_IRQHandler+0x2ee>
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	681b      	ldr	r3, [r3, #0]
 8103a9c:	4a52      	ldr	r2, [pc, #328]	@ (8103be8 <HAL_DMA_IRQHandler+0x434>)
 8103a9e:	4293      	cmp	r3, r2
 8103aa0:	d10a      	bne.n	8103ab8 <HAL_DMA_IRQHandler+0x304>
 8103aa2:	687b      	ldr	r3, [r7, #4]
 8103aa4:	681b      	ldr	r3, [r3, #0]
 8103aa6:	695b      	ldr	r3, [r3, #20]
 8103aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103aac:	2b00      	cmp	r3, #0
 8103aae:	bf14      	ite	ne
 8103ab0:	2301      	movne	r3, #1
 8103ab2:	2300      	moveq	r3, #0
 8103ab4:	b2db      	uxtb	r3, r3
 8103ab6:	e003      	b.n	8103ac0 <HAL_DMA_IRQHandler+0x30c>
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	681b      	ldr	r3, [r3, #0]
 8103abc:	681b      	ldr	r3, [r3, #0]
 8103abe:	2300      	movs	r3, #0
 8103ac0:	2b00      	cmp	r3, #0
 8103ac2:	d00d      	beq.n	8103ae0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103ac8:	f003 031f 	and.w	r3, r3, #31
 8103acc:	2201      	movs	r2, #1
 8103ace:	409a      	lsls	r2, r3
 8103ad0:	6a3b      	ldr	r3, [r7, #32]
 8103ad2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ad8:	f043 0202 	orr.w	r2, r3, #2
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103ae0:	687b      	ldr	r3, [r7, #4]
 8103ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103ae4:	f003 031f 	and.w	r3, r3, #31
 8103ae8:	2204      	movs	r2, #4
 8103aea:	409a      	lsls	r2, r3
 8103aec:	69bb      	ldr	r3, [r7, #24]
 8103aee:	4013      	ands	r3, r2
 8103af0:	2b00      	cmp	r3, #0
 8103af2:	f000 808f 	beq.w	8103c14 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	681b      	ldr	r3, [r3, #0]
 8103afa:	4a2c      	ldr	r2, [pc, #176]	@ (8103bac <HAL_DMA_IRQHandler+0x3f8>)
 8103afc:	4293      	cmp	r3, r2
 8103afe:	d04a      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	681b      	ldr	r3, [r3, #0]
 8103b04:	4a2a      	ldr	r2, [pc, #168]	@ (8103bb0 <HAL_DMA_IRQHandler+0x3fc>)
 8103b06:	4293      	cmp	r3, r2
 8103b08:	d045      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	681b      	ldr	r3, [r3, #0]
 8103b0e:	4a29      	ldr	r2, [pc, #164]	@ (8103bb4 <HAL_DMA_IRQHandler+0x400>)
 8103b10:	4293      	cmp	r3, r2
 8103b12:	d040      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	681b      	ldr	r3, [r3, #0]
 8103b18:	4a27      	ldr	r2, [pc, #156]	@ (8103bb8 <HAL_DMA_IRQHandler+0x404>)
 8103b1a:	4293      	cmp	r3, r2
 8103b1c:	d03b      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	681b      	ldr	r3, [r3, #0]
 8103b22:	4a26      	ldr	r2, [pc, #152]	@ (8103bbc <HAL_DMA_IRQHandler+0x408>)
 8103b24:	4293      	cmp	r3, r2
 8103b26:	d036      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b28:	687b      	ldr	r3, [r7, #4]
 8103b2a:	681b      	ldr	r3, [r3, #0]
 8103b2c:	4a24      	ldr	r2, [pc, #144]	@ (8103bc0 <HAL_DMA_IRQHandler+0x40c>)
 8103b2e:	4293      	cmp	r3, r2
 8103b30:	d031      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	681b      	ldr	r3, [r3, #0]
 8103b36:	4a23      	ldr	r2, [pc, #140]	@ (8103bc4 <HAL_DMA_IRQHandler+0x410>)
 8103b38:	4293      	cmp	r3, r2
 8103b3a:	d02c      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	4a21      	ldr	r2, [pc, #132]	@ (8103bc8 <HAL_DMA_IRQHandler+0x414>)
 8103b42:	4293      	cmp	r3, r2
 8103b44:	d027      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	4a20      	ldr	r2, [pc, #128]	@ (8103bcc <HAL_DMA_IRQHandler+0x418>)
 8103b4c:	4293      	cmp	r3, r2
 8103b4e:	d022      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b50:	687b      	ldr	r3, [r7, #4]
 8103b52:	681b      	ldr	r3, [r3, #0]
 8103b54:	4a1e      	ldr	r2, [pc, #120]	@ (8103bd0 <HAL_DMA_IRQHandler+0x41c>)
 8103b56:	4293      	cmp	r3, r2
 8103b58:	d01d      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b5a:	687b      	ldr	r3, [r7, #4]
 8103b5c:	681b      	ldr	r3, [r3, #0]
 8103b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8103bd4 <HAL_DMA_IRQHandler+0x420>)
 8103b60:	4293      	cmp	r3, r2
 8103b62:	d018      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	681b      	ldr	r3, [r3, #0]
 8103b68:	4a1b      	ldr	r2, [pc, #108]	@ (8103bd8 <HAL_DMA_IRQHandler+0x424>)
 8103b6a:	4293      	cmp	r3, r2
 8103b6c:	d013      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b6e:	687b      	ldr	r3, [r7, #4]
 8103b70:	681b      	ldr	r3, [r3, #0]
 8103b72:	4a1a      	ldr	r2, [pc, #104]	@ (8103bdc <HAL_DMA_IRQHandler+0x428>)
 8103b74:	4293      	cmp	r3, r2
 8103b76:	d00e      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	681b      	ldr	r3, [r3, #0]
 8103b7c:	4a18      	ldr	r2, [pc, #96]	@ (8103be0 <HAL_DMA_IRQHandler+0x42c>)
 8103b7e:	4293      	cmp	r3, r2
 8103b80:	d009      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b82:	687b      	ldr	r3, [r7, #4]
 8103b84:	681b      	ldr	r3, [r3, #0]
 8103b86:	4a17      	ldr	r2, [pc, #92]	@ (8103be4 <HAL_DMA_IRQHandler+0x430>)
 8103b88:	4293      	cmp	r3, r2
 8103b8a:	d004      	beq.n	8103b96 <HAL_DMA_IRQHandler+0x3e2>
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	681b      	ldr	r3, [r3, #0]
 8103b90:	4a15      	ldr	r2, [pc, #84]	@ (8103be8 <HAL_DMA_IRQHandler+0x434>)
 8103b92:	4293      	cmp	r3, r2
 8103b94:	d12a      	bne.n	8103bec <HAL_DMA_IRQHandler+0x438>
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	681b      	ldr	r3, [r3, #0]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	f003 0302 	and.w	r3, r3, #2
 8103ba0:	2b00      	cmp	r3, #0
 8103ba2:	bf14      	ite	ne
 8103ba4:	2301      	movne	r3, #1
 8103ba6:	2300      	moveq	r3, #0
 8103ba8:	b2db      	uxtb	r3, r3
 8103baa:	e023      	b.n	8103bf4 <HAL_DMA_IRQHandler+0x440>
 8103bac:	40020010 	.word	0x40020010
 8103bb0:	40020028 	.word	0x40020028
 8103bb4:	40020040 	.word	0x40020040
 8103bb8:	40020058 	.word	0x40020058
 8103bbc:	40020070 	.word	0x40020070
 8103bc0:	40020088 	.word	0x40020088
 8103bc4:	400200a0 	.word	0x400200a0
 8103bc8:	400200b8 	.word	0x400200b8
 8103bcc:	40020410 	.word	0x40020410
 8103bd0:	40020428 	.word	0x40020428
 8103bd4:	40020440 	.word	0x40020440
 8103bd8:	40020458 	.word	0x40020458
 8103bdc:	40020470 	.word	0x40020470
 8103be0:	40020488 	.word	0x40020488
 8103be4:	400204a0 	.word	0x400204a0
 8103be8:	400204b8 	.word	0x400204b8
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	681b      	ldr	r3, [r3, #0]
 8103bf2:	2300      	movs	r3, #0
 8103bf4:	2b00      	cmp	r3, #0
 8103bf6:	d00d      	beq.n	8103c14 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103bfc:	f003 031f 	and.w	r3, r3, #31
 8103c00:	2204      	movs	r2, #4
 8103c02:	409a      	lsls	r2, r3
 8103c04:	6a3b      	ldr	r3, [r7, #32]
 8103c06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c0c:	f043 0204 	orr.w	r2, r3, #4
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103c14:	687b      	ldr	r3, [r7, #4]
 8103c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103c18:	f003 031f 	and.w	r3, r3, #31
 8103c1c:	2210      	movs	r2, #16
 8103c1e:	409a      	lsls	r2, r3
 8103c20:	69bb      	ldr	r3, [r7, #24]
 8103c22:	4013      	ands	r3, r2
 8103c24:	2b00      	cmp	r3, #0
 8103c26:	f000 80a6 	beq.w	8103d76 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	681b      	ldr	r3, [r3, #0]
 8103c2e:	4a85      	ldr	r2, [pc, #532]	@ (8103e44 <HAL_DMA_IRQHandler+0x690>)
 8103c30:	4293      	cmp	r3, r2
 8103c32:	d04a      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103c34:	687b      	ldr	r3, [r7, #4]
 8103c36:	681b      	ldr	r3, [r3, #0]
 8103c38:	4a83      	ldr	r2, [pc, #524]	@ (8103e48 <HAL_DMA_IRQHandler+0x694>)
 8103c3a:	4293      	cmp	r3, r2
 8103c3c:	d045      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	681b      	ldr	r3, [r3, #0]
 8103c42:	4a82      	ldr	r2, [pc, #520]	@ (8103e4c <HAL_DMA_IRQHandler+0x698>)
 8103c44:	4293      	cmp	r3, r2
 8103c46:	d040      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103c48:	687b      	ldr	r3, [r7, #4]
 8103c4a:	681b      	ldr	r3, [r3, #0]
 8103c4c:	4a80      	ldr	r2, [pc, #512]	@ (8103e50 <HAL_DMA_IRQHandler+0x69c>)
 8103c4e:	4293      	cmp	r3, r2
 8103c50:	d03b      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	681b      	ldr	r3, [r3, #0]
 8103c56:	4a7f      	ldr	r2, [pc, #508]	@ (8103e54 <HAL_DMA_IRQHandler+0x6a0>)
 8103c58:	4293      	cmp	r3, r2
 8103c5a:	d036      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	681b      	ldr	r3, [r3, #0]
 8103c60:	4a7d      	ldr	r2, [pc, #500]	@ (8103e58 <HAL_DMA_IRQHandler+0x6a4>)
 8103c62:	4293      	cmp	r3, r2
 8103c64:	d031      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	681b      	ldr	r3, [r3, #0]
 8103c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8103e5c <HAL_DMA_IRQHandler+0x6a8>)
 8103c6c:	4293      	cmp	r3, r2
 8103c6e:	d02c      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	681b      	ldr	r3, [r3, #0]
 8103c74:	4a7a      	ldr	r2, [pc, #488]	@ (8103e60 <HAL_DMA_IRQHandler+0x6ac>)
 8103c76:	4293      	cmp	r3, r2
 8103c78:	d027      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	681b      	ldr	r3, [r3, #0]
 8103c7e:	4a79      	ldr	r2, [pc, #484]	@ (8103e64 <HAL_DMA_IRQHandler+0x6b0>)
 8103c80:	4293      	cmp	r3, r2
 8103c82:	d022      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	681b      	ldr	r3, [r3, #0]
 8103c88:	4a77      	ldr	r2, [pc, #476]	@ (8103e68 <HAL_DMA_IRQHandler+0x6b4>)
 8103c8a:	4293      	cmp	r3, r2
 8103c8c:	d01d      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	681b      	ldr	r3, [r3, #0]
 8103c92:	4a76      	ldr	r2, [pc, #472]	@ (8103e6c <HAL_DMA_IRQHandler+0x6b8>)
 8103c94:	4293      	cmp	r3, r2
 8103c96:	d018      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	681b      	ldr	r3, [r3, #0]
 8103c9c:	4a74      	ldr	r2, [pc, #464]	@ (8103e70 <HAL_DMA_IRQHandler+0x6bc>)
 8103c9e:	4293      	cmp	r3, r2
 8103ca0:	d013      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103ca2:	687b      	ldr	r3, [r7, #4]
 8103ca4:	681b      	ldr	r3, [r3, #0]
 8103ca6:	4a73      	ldr	r2, [pc, #460]	@ (8103e74 <HAL_DMA_IRQHandler+0x6c0>)
 8103ca8:	4293      	cmp	r3, r2
 8103caa:	d00e      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103cac:	687b      	ldr	r3, [r7, #4]
 8103cae:	681b      	ldr	r3, [r3, #0]
 8103cb0:	4a71      	ldr	r2, [pc, #452]	@ (8103e78 <HAL_DMA_IRQHandler+0x6c4>)
 8103cb2:	4293      	cmp	r3, r2
 8103cb4:	d009      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103cb6:	687b      	ldr	r3, [r7, #4]
 8103cb8:	681b      	ldr	r3, [r3, #0]
 8103cba:	4a70      	ldr	r2, [pc, #448]	@ (8103e7c <HAL_DMA_IRQHandler+0x6c8>)
 8103cbc:	4293      	cmp	r3, r2
 8103cbe:	d004      	beq.n	8103cca <HAL_DMA_IRQHandler+0x516>
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	681b      	ldr	r3, [r3, #0]
 8103cc4:	4a6e      	ldr	r2, [pc, #440]	@ (8103e80 <HAL_DMA_IRQHandler+0x6cc>)
 8103cc6:	4293      	cmp	r3, r2
 8103cc8:	d10a      	bne.n	8103ce0 <HAL_DMA_IRQHandler+0x52c>
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	681b      	ldr	r3, [r3, #0]
 8103cce:	681b      	ldr	r3, [r3, #0]
 8103cd0:	f003 0308 	and.w	r3, r3, #8
 8103cd4:	2b00      	cmp	r3, #0
 8103cd6:	bf14      	ite	ne
 8103cd8:	2301      	movne	r3, #1
 8103cda:	2300      	moveq	r3, #0
 8103cdc:	b2db      	uxtb	r3, r3
 8103cde:	e009      	b.n	8103cf4 <HAL_DMA_IRQHandler+0x540>
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	681b      	ldr	r3, [r3, #0]
 8103ce4:	681b      	ldr	r3, [r3, #0]
 8103ce6:	f003 0304 	and.w	r3, r3, #4
 8103cea:	2b00      	cmp	r3, #0
 8103cec:	bf14      	ite	ne
 8103cee:	2301      	movne	r3, #1
 8103cf0:	2300      	moveq	r3, #0
 8103cf2:	b2db      	uxtb	r3, r3
 8103cf4:	2b00      	cmp	r3, #0
 8103cf6:	d03e      	beq.n	8103d76 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103cfc:	f003 031f 	and.w	r3, r3, #31
 8103d00:	2210      	movs	r2, #16
 8103d02:	409a      	lsls	r2, r3
 8103d04:	6a3b      	ldr	r3, [r7, #32]
 8103d06:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	681b      	ldr	r3, [r3, #0]
 8103d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103d12:	2b00      	cmp	r3, #0
 8103d14:	d018      	beq.n	8103d48 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103d16:	687b      	ldr	r3, [r7, #4]
 8103d18:	681b      	ldr	r3, [r3, #0]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8103d20:	2b00      	cmp	r3, #0
 8103d22:	d108      	bne.n	8103d36 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103d28:	2b00      	cmp	r3, #0
 8103d2a:	d024      	beq.n	8103d76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103d30:	6878      	ldr	r0, [r7, #4]
 8103d32:	4798      	blx	r3
 8103d34:	e01f      	b.n	8103d76 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103d3a:	2b00      	cmp	r3, #0
 8103d3c:	d01b      	beq.n	8103d76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103d42:	6878      	ldr	r0, [r7, #4]
 8103d44:	4798      	blx	r3
 8103d46:	e016      	b.n	8103d76 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	681b      	ldr	r3, [r3, #0]
 8103d4c:	681b      	ldr	r3, [r3, #0]
 8103d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103d52:	2b00      	cmp	r3, #0
 8103d54:	d107      	bne.n	8103d66 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103d56:	687b      	ldr	r3, [r7, #4]
 8103d58:	681b      	ldr	r3, [r3, #0]
 8103d5a:	681a      	ldr	r2, [r3, #0]
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	681b      	ldr	r3, [r3, #0]
 8103d60:	f022 0208 	bic.w	r2, r2, #8
 8103d64:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103d6a:	2b00      	cmp	r3, #0
 8103d6c:	d003      	beq.n	8103d76 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103d72:	6878      	ldr	r0, [r7, #4]
 8103d74:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103d7a:	f003 031f 	and.w	r3, r3, #31
 8103d7e:	2220      	movs	r2, #32
 8103d80:	409a      	lsls	r2, r3
 8103d82:	69bb      	ldr	r3, [r7, #24]
 8103d84:	4013      	ands	r3, r2
 8103d86:	2b00      	cmp	r3, #0
 8103d88:	f000 8110 	beq.w	8103fac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103d8c:	687b      	ldr	r3, [r7, #4]
 8103d8e:	681b      	ldr	r3, [r3, #0]
 8103d90:	4a2c      	ldr	r2, [pc, #176]	@ (8103e44 <HAL_DMA_IRQHandler+0x690>)
 8103d92:	4293      	cmp	r3, r2
 8103d94:	d04a      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103d96:	687b      	ldr	r3, [r7, #4]
 8103d98:	681b      	ldr	r3, [r3, #0]
 8103d9a:	4a2b      	ldr	r2, [pc, #172]	@ (8103e48 <HAL_DMA_IRQHandler+0x694>)
 8103d9c:	4293      	cmp	r3, r2
 8103d9e:	d045      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	681b      	ldr	r3, [r3, #0]
 8103da4:	4a29      	ldr	r2, [pc, #164]	@ (8103e4c <HAL_DMA_IRQHandler+0x698>)
 8103da6:	4293      	cmp	r3, r2
 8103da8:	d040      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103daa:	687b      	ldr	r3, [r7, #4]
 8103dac:	681b      	ldr	r3, [r3, #0]
 8103dae:	4a28      	ldr	r2, [pc, #160]	@ (8103e50 <HAL_DMA_IRQHandler+0x69c>)
 8103db0:	4293      	cmp	r3, r2
 8103db2:	d03b      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	681b      	ldr	r3, [r3, #0]
 8103db8:	4a26      	ldr	r2, [pc, #152]	@ (8103e54 <HAL_DMA_IRQHandler+0x6a0>)
 8103dba:	4293      	cmp	r3, r2
 8103dbc:	d036      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	681b      	ldr	r3, [r3, #0]
 8103dc2:	4a25      	ldr	r2, [pc, #148]	@ (8103e58 <HAL_DMA_IRQHandler+0x6a4>)
 8103dc4:	4293      	cmp	r3, r2
 8103dc6:	d031      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103dc8:	687b      	ldr	r3, [r7, #4]
 8103dca:	681b      	ldr	r3, [r3, #0]
 8103dcc:	4a23      	ldr	r2, [pc, #140]	@ (8103e5c <HAL_DMA_IRQHandler+0x6a8>)
 8103dce:	4293      	cmp	r3, r2
 8103dd0:	d02c      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	4a22      	ldr	r2, [pc, #136]	@ (8103e60 <HAL_DMA_IRQHandler+0x6ac>)
 8103dd8:	4293      	cmp	r3, r2
 8103dda:	d027      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	681b      	ldr	r3, [r3, #0]
 8103de0:	4a20      	ldr	r2, [pc, #128]	@ (8103e64 <HAL_DMA_IRQHandler+0x6b0>)
 8103de2:	4293      	cmp	r3, r2
 8103de4:	d022      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103de6:	687b      	ldr	r3, [r7, #4]
 8103de8:	681b      	ldr	r3, [r3, #0]
 8103dea:	4a1f      	ldr	r2, [pc, #124]	@ (8103e68 <HAL_DMA_IRQHandler+0x6b4>)
 8103dec:	4293      	cmp	r3, r2
 8103dee:	d01d      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103df0:	687b      	ldr	r3, [r7, #4]
 8103df2:	681b      	ldr	r3, [r3, #0]
 8103df4:	4a1d      	ldr	r2, [pc, #116]	@ (8103e6c <HAL_DMA_IRQHandler+0x6b8>)
 8103df6:	4293      	cmp	r3, r2
 8103df8:	d018      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103dfa:	687b      	ldr	r3, [r7, #4]
 8103dfc:	681b      	ldr	r3, [r3, #0]
 8103dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8103e70 <HAL_DMA_IRQHandler+0x6bc>)
 8103e00:	4293      	cmp	r3, r2
 8103e02:	d013      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103e04:	687b      	ldr	r3, [r7, #4]
 8103e06:	681b      	ldr	r3, [r3, #0]
 8103e08:	4a1a      	ldr	r2, [pc, #104]	@ (8103e74 <HAL_DMA_IRQHandler+0x6c0>)
 8103e0a:	4293      	cmp	r3, r2
 8103e0c:	d00e      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	681b      	ldr	r3, [r3, #0]
 8103e12:	4a19      	ldr	r2, [pc, #100]	@ (8103e78 <HAL_DMA_IRQHandler+0x6c4>)
 8103e14:	4293      	cmp	r3, r2
 8103e16:	d009      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	681b      	ldr	r3, [r3, #0]
 8103e1c:	4a17      	ldr	r2, [pc, #92]	@ (8103e7c <HAL_DMA_IRQHandler+0x6c8>)
 8103e1e:	4293      	cmp	r3, r2
 8103e20:	d004      	beq.n	8103e2c <HAL_DMA_IRQHandler+0x678>
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	681b      	ldr	r3, [r3, #0]
 8103e26:	4a16      	ldr	r2, [pc, #88]	@ (8103e80 <HAL_DMA_IRQHandler+0x6cc>)
 8103e28:	4293      	cmp	r3, r2
 8103e2a:	d12b      	bne.n	8103e84 <HAL_DMA_IRQHandler+0x6d0>
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	681b      	ldr	r3, [r3, #0]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	f003 0310 	and.w	r3, r3, #16
 8103e36:	2b00      	cmp	r3, #0
 8103e38:	bf14      	ite	ne
 8103e3a:	2301      	movne	r3, #1
 8103e3c:	2300      	moveq	r3, #0
 8103e3e:	b2db      	uxtb	r3, r3
 8103e40:	e02a      	b.n	8103e98 <HAL_DMA_IRQHandler+0x6e4>
 8103e42:	bf00      	nop
 8103e44:	40020010 	.word	0x40020010
 8103e48:	40020028 	.word	0x40020028
 8103e4c:	40020040 	.word	0x40020040
 8103e50:	40020058 	.word	0x40020058
 8103e54:	40020070 	.word	0x40020070
 8103e58:	40020088 	.word	0x40020088
 8103e5c:	400200a0 	.word	0x400200a0
 8103e60:	400200b8 	.word	0x400200b8
 8103e64:	40020410 	.word	0x40020410
 8103e68:	40020428 	.word	0x40020428
 8103e6c:	40020440 	.word	0x40020440
 8103e70:	40020458 	.word	0x40020458
 8103e74:	40020470 	.word	0x40020470
 8103e78:	40020488 	.word	0x40020488
 8103e7c:	400204a0 	.word	0x400204a0
 8103e80:	400204b8 	.word	0x400204b8
 8103e84:	687b      	ldr	r3, [r7, #4]
 8103e86:	681b      	ldr	r3, [r3, #0]
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	f003 0302 	and.w	r3, r3, #2
 8103e8e:	2b00      	cmp	r3, #0
 8103e90:	bf14      	ite	ne
 8103e92:	2301      	movne	r3, #1
 8103e94:	2300      	moveq	r3, #0
 8103e96:	b2db      	uxtb	r3, r3
 8103e98:	2b00      	cmp	r3, #0
 8103e9a:	f000 8087 	beq.w	8103fac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103e9e:	687b      	ldr	r3, [r7, #4]
 8103ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103ea2:	f003 031f 	and.w	r3, r3, #31
 8103ea6:	2220      	movs	r2, #32
 8103ea8:	409a      	lsls	r2, r3
 8103eaa:	6a3b      	ldr	r3, [r7, #32]
 8103eac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8103eae:	687b      	ldr	r3, [r7, #4]
 8103eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8103eb4:	b2db      	uxtb	r3, r3
 8103eb6:	2b04      	cmp	r3, #4
 8103eb8:	d139      	bne.n	8103f2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	681b      	ldr	r3, [r3, #0]
 8103ebe:	681a      	ldr	r2, [r3, #0]
 8103ec0:	687b      	ldr	r3, [r7, #4]
 8103ec2:	681b      	ldr	r3, [r3, #0]
 8103ec4:	f022 0216 	bic.w	r2, r2, #22
 8103ec8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103eca:	687b      	ldr	r3, [r7, #4]
 8103ecc:	681b      	ldr	r3, [r3, #0]
 8103ece:	695a      	ldr	r2, [r3, #20]
 8103ed0:	687b      	ldr	r3, [r7, #4]
 8103ed2:	681b      	ldr	r3, [r3, #0]
 8103ed4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8103ed8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103ede:	2b00      	cmp	r3, #0
 8103ee0:	d103      	bne.n	8103eea <HAL_DMA_IRQHandler+0x736>
 8103ee2:	687b      	ldr	r3, [r7, #4]
 8103ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103ee6:	2b00      	cmp	r3, #0
 8103ee8:	d007      	beq.n	8103efa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	681b      	ldr	r3, [r3, #0]
 8103eee:	681a      	ldr	r2, [r3, #0]
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	f022 0208 	bic.w	r2, r2, #8
 8103ef8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103efe:	f003 031f 	and.w	r3, r3, #31
 8103f02:	223f      	movs	r2, #63	@ 0x3f
 8103f04:	409a      	lsls	r2, r3
 8103f06:	6a3b      	ldr	r3, [r7, #32]
 8103f08:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103f0a:	687b      	ldr	r3, [r7, #4]
 8103f0c:	2201      	movs	r2, #1
 8103f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	2200      	movs	r2, #0
 8103f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f1e:	2b00      	cmp	r3, #0
 8103f20:	f000 834a 	beq.w	81045b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f28:	6878      	ldr	r0, [r7, #4]
 8103f2a:	4798      	blx	r3
          }
          return;
 8103f2c:	e344      	b.n	81045b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103f2e:	687b      	ldr	r3, [r7, #4]
 8103f30:	681b      	ldr	r3, [r3, #0]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103f38:	2b00      	cmp	r3, #0
 8103f3a:	d018      	beq.n	8103f6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	681b      	ldr	r3, [r3, #0]
 8103f40:	681b      	ldr	r3, [r3, #0]
 8103f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8103f46:	2b00      	cmp	r3, #0
 8103f48:	d108      	bne.n	8103f5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103f4e:	2b00      	cmp	r3, #0
 8103f50:	d02c      	beq.n	8103fac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103f56:	6878      	ldr	r0, [r7, #4]
 8103f58:	4798      	blx	r3
 8103f5a:	e027      	b.n	8103fac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103f60:	2b00      	cmp	r3, #0
 8103f62:	d023      	beq.n	8103fac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103f68:	6878      	ldr	r0, [r7, #4]
 8103f6a:	4798      	blx	r3
 8103f6c:	e01e      	b.n	8103fac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	681b      	ldr	r3, [r3, #0]
 8103f72:	681b      	ldr	r3, [r3, #0]
 8103f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103f78:	2b00      	cmp	r3, #0
 8103f7a:	d10f      	bne.n	8103f9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	681a      	ldr	r2, [r3, #0]
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	f022 0210 	bic.w	r2, r2, #16
 8103f8a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	2201      	movs	r2, #1
 8103f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	2200      	movs	r2, #0
 8103f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103fa0:	2b00      	cmp	r3, #0
 8103fa2:	d003      	beq.n	8103fac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103fa8:	6878      	ldr	r0, [r7, #4]
 8103faa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8103fac:	687b      	ldr	r3, [r7, #4]
 8103fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103fb0:	2b00      	cmp	r3, #0
 8103fb2:	f000 8306 	beq.w	81045c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8103fb6:	687b      	ldr	r3, [r7, #4]
 8103fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103fba:	f003 0301 	and.w	r3, r3, #1
 8103fbe:	2b00      	cmp	r3, #0
 8103fc0:	f000 8088 	beq.w	81040d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8103fc4:	687b      	ldr	r3, [r7, #4]
 8103fc6:	2204      	movs	r2, #4
 8103fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	681b      	ldr	r3, [r3, #0]
 8103fd0:	4a7a      	ldr	r2, [pc, #488]	@ (81041bc <HAL_DMA_IRQHandler+0xa08>)
 8103fd2:	4293      	cmp	r3, r2
 8103fd4:	d04a      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8103fd6:	687b      	ldr	r3, [r7, #4]
 8103fd8:	681b      	ldr	r3, [r3, #0]
 8103fda:	4a79      	ldr	r2, [pc, #484]	@ (81041c0 <HAL_DMA_IRQHandler+0xa0c>)
 8103fdc:	4293      	cmp	r3, r2
 8103fde:	d045      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8103fe0:	687b      	ldr	r3, [r7, #4]
 8103fe2:	681b      	ldr	r3, [r3, #0]
 8103fe4:	4a77      	ldr	r2, [pc, #476]	@ (81041c4 <HAL_DMA_IRQHandler+0xa10>)
 8103fe6:	4293      	cmp	r3, r2
 8103fe8:	d040      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	681b      	ldr	r3, [r3, #0]
 8103fee:	4a76      	ldr	r2, [pc, #472]	@ (81041c8 <HAL_DMA_IRQHandler+0xa14>)
 8103ff0:	4293      	cmp	r3, r2
 8103ff2:	d03b      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	4a74      	ldr	r2, [pc, #464]	@ (81041cc <HAL_DMA_IRQHandler+0xa18>)
 8103ffa:	4293      	cmp	r3, r2
 8103ffc:	d036      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8103ffe:	687b      	ldr	r3, [r7, #4]
 8104000:	681b      	ldr	r3, [r3, #0]
 8104002:	4a73      	ldr	r2, [pc, #460]	@ (81041d0 <HAL_DMA_IRQHandler+0xa1c>)
 8104004:	4293      	cmp	r3, r2
 8104006:	d031      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	4a71      	ldr	r2, [pc, #452]	@ (81041d4 <HAL_DMA_IRQHandler+0xa20>)
 810400e:	4293      	cmp	r3, r2
 8104010:	d02c      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8104012:	687b      	ldr	r3, [r7, #4]
 8104014:	681b      	ldr	r3, [r3, #0]
 8104016:	4a70      	ldr	r2, [pc, #448]	@ (81041d8 <HAL_DMA_IRQHandler+0xa24>)
 8104018:	4293      	cmp	r3, r2
 810401a:	d027      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 810401c:	687b      	ldr	r3, [r7, #4]
 810401e:	681b      	ldr	r3, [r3, #0]
 8104020:	4a6e      	ldr	r2, [pc, #440]	@ (81041dc <HAL_DMA_IRQHandler+0xa28>)
 8104022:	4293      	cmp	r3, r2
 8104024:	d022      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	681b      	ldr	r3, [r3, #0]
 810402a:	4a6d      	ldr	r2, [pc, #436]	@ (81041e0 <HAL_DMA_IRQHandler+0xa2c>)
 810402c:	4293      	cmp	r3, r2
 810402e:	d01d      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8104030:	687b      	ldr	r3, [r7, #4]
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	4a6b      	ldr	r2, [pc, #428]	@ (81041e4 <HAL_DMA_IRQHandler+0xa30>)
 8104036:	4293      	cmp	r3, r2
 8104038:	d018      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 810403a:	687b      	ldr	r3, [r7, #4]
 810403c:	681b      	ldr	r3, [r3, #0]
 810403e:	4a6a      	ldr	r2, [pc, #424]	@ (81041e8 <HAL_DMA_IRQHandler+0xa34>)
 8104040:	4293      	cmp	r3, r2
 8104042:	d013      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8104044:	687b      	ldr	r3, [r7, #4]
 8104046:	681b      	ldr	r3, [r3, #0]
 8104048:	4a68      	ldr	r2, [pc, #416]	@ (81041ec <HAL_DMA_IRQHandler+0xa38>)
 810404a:	4293      	cmp	r3, r2
 810404c:	d00e      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 810404e:	687b      	ldr	r3, [r7, #4]
 8104050:	681b      	ldr	r3, [r3, #0]
 8104052:	4a67      	ldr	r2, [pc, #412]	@ (81041f0 <HAL_DMA_IRQHandler+0xa3c>)
 8104054:	4293      	cmp	r3, r2
 8104056:	d009      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	681b      	ldr	r3, [r3, #0]
 810405c:	4a65      	ldr	r2, [pc, #404]	@ (81041f4 <HAL_DMA_IRQHandler+0xa40>)
 810405e:	4293      	cmp	r3, r2
 8104060:	d004      	beq.n	810406c <HAL_DMA_IRQHandler+0x8b8>
 8104062:	687b      	ldr	r3, [r7, #4]
 8104064:	681b      	ldr	r3, [r3, #0]
 8104066:	4a64      	ldr	r2, [pc, #400]	@ (81041f8 <HAL_DMA_IRQHandler+0xa44>)
 8104068:	4293      	cmp	r3, r2
 810406a:	d108      	bne.n	810407e <HAL_DMA_IRQHandler+0x8ca>
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	681b      	ldr	r3, [r3, #0]
 8104070:	681a      	ldr	r2, [r3, #0]
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	681b      	ldr	r3, [r3, #0]
 8104076:	f022 0201 	bic.w	r2, r2, #1
 810407a:	601a      	str	r2, [r3, #0]
 810407c:	e007      	b.n	810408e <HAL_DMA_IRQHandler+0x8da>
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	681b      	ldr	r3, [r3, #0]
 8104082:	681a      	ldr	r2, [r3, #0]
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	681b      	ldr	r3, [r3, #0]
 8104088:	f022 0201 	bic.w	r2, r2, #1
 810408c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810408e:	68fb      	ldr	r3, [r7, #12]
 8104090:	3301      	adds	r3, #1
 8104092:	60fb      	str	r3, [r7, #12]
 8104094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104096:	429a      	cmp	r2, r3
 8104098:	d307      	bcc.n	81040aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810409a:	687b      	ldr	r3, [r7, #4]
 810409c:	681b      	ldr	r3, [r3, #0]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	f003 0301 	and.w	r3, r3, #1
 81040a4:	2b00      	cmp	r3, #0
 81040a6:	d1f2      	bne.n	810408e <HAL_DMA_IRQHandler+0x8da>
 81040a8:	e000      	b.n	81040ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 81040aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81040ac:	687b      	ldr	r3, [r7, #4]
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	681b      	ldr	r3, [r3, #0]
 81040b2:	f003 0301 	and.w	r3, r3, #1
 81040b6:	2b00      	cmp	r3, #0
 81040b8:	d004      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	2203      	movs	r2, #3
 81040be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 81040c2:	e003      	b.n	81040cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	2201      	movs	r2, #1
 81040c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81040cc:	687b      	ldr	r3, [r7, #4]
 81040ce:	2200      	movs	r2, #0
 81040d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81040d8:	2b00      	cmp	r3, #0
 81040da:	f000 8272 	beq.w	81045c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81040de:	687b      	ldr	r3, [r7, #4]
 81040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81040e2:	6878      	ldr	r0, [r7, #4]
 81040e4:	4798      	blx	r3
 81040e6:	e26c      	b.n	81045c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	681b      	ldr	r3, [r3, #0]
 81040ec:	4a43      	ldr	r2, [pc, #268]	@ (81041fc <HAL_DMA_IRQHandler+0xa48>)
 81040ee:	4293      	cmp	r3, r2
 81040f0:	d022      	beq.n	8104138 <HAL_DMA_IRQHandler+0x984>
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	681b      	ldr	r3, [r3, #0]
 81040f6:	4a42      	ldr	r2, [pc, #264]	@ (8104200 <HAL_DMA_IRQHandler+0xa4c>)
 81040f8:	4293      	cmp	r3, r2
 81040fa:	d01d      	beq.n	8104138 <HAL_DMA_IRQHandler+0x984>
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	681b      	ldr	r3, [r3, #0]
 8104100:	4a40      	ldr	r2, [pc, #256]	@ (8104204 <HAL_DMA_IRQHandler+0xa50>)
 8104102:	4293      	cmp	r3, r2
 8104104:	d018      	beq.n	8104138 <HAL_DMA_IRQHandler+0x984>
 8104106:	687b      	ldr	r3, [r7, #4]
 8104108:	681b      	ldr	r3, [r3, #0]
 810410a:	4a3f      	ldr	r2, [pc, #252]	@ (8104208 <HAL_DMA_IRQHandler+0xa54>)
 810410c:	4293      	cmp	r3, r2
 810410e:	d013      	beq.n	8104138 <HAL_DMA_IRQHandler+0x984>
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	681b      	ldr	r3, [r3, #0]
 8104114:	4a3d      	ldr	r2, [pc, #244]	@ (810420c <HAL_DMA_IRQHandler+0xa58>)
 8104116:	4293      	cmp	r3, r2
 8104118:	d00e      	beq.n	8104138 <HAL_DMA_IRQHandler+0x984>
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	681b      	ldr	r3, [r3, #0]
 810411e:	4a3c      	ldr	r2, [pc, #240]	@ (8104210 <HAL_DMA_IRQHandler+0xa5c>)
 8104120:	4293      	cmp	r3, r2
 8104122:	d009      	beq.n	8104138 <HAL_DMA_IRQHandler+0x984>
 8104124:	687b      	ldr	r3, [r7, #4]
 8104126:	681b      	ldr	r3, [r3, #0]
 8104128:	4a3a      	ldr	r2, [pc, #232]	@ (8104214 <HAL_DMA_IRQHandler+0xa60>)
 810412a:	4293      	cmp	r3, r2
 810412c:	d004      	beq.n	8104138 <HAL_DMA_IRQHandler+0x984>
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	681b      	ldr	r3, [r3, #0]
 8104132:	4a39      	ldr	r2, [pc, #228]	@ (8104218 <HAL_DMA_IRQHandler+0xa64>)
 8104134:	4293      	cmp	r3, r2
 8104136:	d101      	bne.n	810413c <HAL_DMA_IRQHandler+0x988>
 8104138:	2301      	movs	r3, #1
 810413a:	e000      	b.n	810413e <HAL_DMA_IRQHandler+0x98a>
 810413c:	2300      	movs	r3, #0
 810413e:	2b00      	cmp	r3, #0
 8104140:	f000 823f 	beq.w	81045c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	681b      	ldr	r3, [r3, #0]
 8104148:	681b      	ldr	r3, [r3, #0]
 810414a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 810414c:	687b      	ldr	r3, [r7, #4]
 810414e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104150:	f003 031f 	and.w	r3, r3, #31
 8104154:	2204      	movs	r2, #4
 8104156:	409a      	lsls	r2, r3
 8104158:	697b      	ldr	r3, [r7, #20]
 810415a:	4013      	ands	r3, r2
 810415c:	2b00      	cmp	r3, #0
 810415e:	f000 80cd 	beq.w	81042fc <HAL_DMA_IRQHandler+0xb48>
 8104162:	693b      	ldr	r3, [r7, #16]
 8104164:	f003 0304 	and.w	r3, r3, #4
 8104168:	2b00      	cmp	r3, #0
 810416a:	f000 80c7 	beq.w	81042fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104172:	f003 031f 	and.w	r3, r3, #31
 8104176:	2204      	movs	r2, #4
 8104178:	409a      	lsls	r2, r3
 810417a:	69fb      	ldr	r3, [r7, #28]
 810417c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810417e:	693b      	ldr	r3, [r7, #16]
 8104180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8104184:	2b00      	cmp	r3, #0
 8104186:	d049      	beq.n	810421c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104188:	693b      	ldr	r3, [r7, #16]
 810418a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810418e:	2b00      	cmp	r3, #0
 8104190:	d109      	bne.n	81041a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8104192:	687b      	ldr	r3, [r7, #4]
 8104194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104196:	2b00      	cmp	r3, #0
 8104198:	f000 8210 	beq.w	81045bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 810419c:	687b      	ldr	r3, [r7, #4]
 810419e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81041a0:	6878      	ldr	r0, [r7, #4]
 81041a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81041a4:	e20a      	b.n	81045bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81041aa:	2b00      	cmp	r3, #0
 81041ac:	f000 8206 	beq.w	81045bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 81041b0:	687b      	ldr	r3, [r7, #4]
 81041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81041b4:	6878      	ldr	r0, [r7, #4]
 81041b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81041b8:	e200      	b.n	81045bc <HAL_DMA_IRQHandler+0xe08>
 81041ba:	bf00      	nop
 81041bc:	40020010 	.word	0x40020010
 81041c0:	40020028 	.word	0x40020028
 81041c4:	40020040 	.word	0x40020040
 81041c8:	40020058 	.word	0x40020058
 81041cc:	40020070 	.word	0x40020070
 81041d0:	40020088 	.word	0x40020088
 81041d4:	400200a0 	.word	0x400200a0
 81041d8:	400200b8 	.word	0x400200b8
 81041dc:	40020410 	.word	0x40020410
 81041e0:	40020428 	.word	0x40020428
 81041e4:	40020440 	.word	0x40020440
 81041e8:	40020458 	.word	0x40020458
 81041ec:	40020470 	.word	0x40020470
 81041f0:	40020488 	.word	0x40020488
 81041f4:	400204a0 	.word	0x400204a0
 81041f8:	400204b8 	.word	0x400204b8
 81041fc:	58025408 	.word	0x58025408
 8104200:	5802541c 	.word	0x5802541c
 8104204:	58025430 	.word	0x58025430
 8104208:	58025444 	.word	0x58025444
 810420c:	58025458 	.word	0x58025458
 8104210:	5802546c 	.word	0x5802546c
 8104214:	58025480 	.word	0x58025480
 8104218:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810421c:	693b      	ldr	r3, [r7, #16]
 810421e:	f003 0320 	and.w	r3, r3, #32
 8104222:	2b00      	cmp	r3, #0
 8104224:	d160      	bne.n	81042e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	4a7f      	ldr	r2, [pc, #508]	@ (8104428 <HAL_DMA_IRQHandler+0xc74>)
 810422c:	4293      	cmp	r3, r2
 810422e:	d04a      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	681b      	ldr	r3, [r3, #0]
 8104234:	4a7d      	ldr	r2, [pc, #500]	@ (810442c <HAL_DMA_IRQHandler+0xc78>)
 8104236:	4293      	cmp	r3, r2
 8104238:	d045      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 810423a:	687b      	ldr	r3, [r7, #4]
 810423c:	681b      	ldr	r3, [r3, #0]
 810423e:	4a7c      	ldr	r2, [pc, #496]	@ (8104430 <HAL_DMA_IRQHandler+0xc7c>)
 8104240:	4293      	cmp	r3, r2
 8104242:	d040      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 8104244:	687b      	ldr	r3, [r7, #4]
 8104246:	681b      	ldr	r3, [r3, #0]
 8104248:	4a7a      	ldr	r2, [pc, #488]	@ (8104434 <HAL_DMA_IRQHandler+0xc80>)
 810424a:	4293      	cmp	r3, r2
 810424c:	d03b      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	681b      	ldr	r3, [r3, #0]
 8104252:	4a79      	ldr	r2, [pc, #484]	@ (8104438 <HAL_DMA_IRQHandler+0xc84>)
 8104254:	4293      	cmp	r3, r2
 8104256:	d036      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	681b      	ldr	r3, [r3, #0]
 810425c:	4a77      	ldr	r2, [pc, #476]	@ (810443c <HAL_DMA_IRQHandler+0xc88>)
 810425e:	4293      	cmp	r3, r2
 8104260:	d031      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 8104262:	687b      	ldr	r3, [r7, #4]
 8104264:	681b      	ldr	r3, [r3, #0]
 8104266:	4a76      	ldr	r2, [pc, #472]	@ (8104440 <HAL_DMA_IRQHandler+0xc8c>)
 8104268:	4293      	cmp	r3, r2
 810426a:	d02c      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	681b      	ldr	r3, [r3, #0]
 8104270:	4a74      	ldr	r2, [pc, #464]	@ (8104444 <HAL_DMA_IRQHandler+0xc90>)
 8104272:	4293      	cmp	r3, r2
 8104274:	d027      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 8104276:	687b      	ldr	r3, [r7, #4]
 8104278:	681b      	ldr	r3, [r3, #0]
 810427a:	4a73      	ldr	r2, [pc, #460]	@ (8104448 <HAL_DMA_IRQHandler+0xc94>)
 810427c:	4293      	cmp	r3, r2
 810427e:	d022      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 8104280:	687b      	ldr	r3, [r7, #4]
 8104282:	681b      	ldr	r3, [r3, #0]
 8104284:	4a71      	ldr	r2, [pc, #452]	@ (810444c <HAL_DMA_IRQHandler+0xc98>)
 8104286:	4293      	cmp	r3, r2
 8104288:	d01d      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 810428a:	687b      	ldr	r3, [r7, #4]
 810428c:	681b      	ldr	r3, [r3, #0]
 810428e:	4a70      	ldr	r2, [pc, #448]	@ (8104450 <HAL_DMA_IRQHandler+0xc9c>)
 8104290:	4293      	cmp	r3, r2
 8104292:	d018      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 8104294:	687b      	ldr	r3, [r7, #4]
 8104296:	681b      	ldr	r3, [r3, #0]
 8104298:	4a6e      	ldr	r2, [pc, #440]	@ (8104454 <HAL_DMA_IRQHandler+0xca0>)
 810429a:	4293      	cmp	r3, r2
 810429c:	d013      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	4a6d      	ldr	r2, [pc, #436]	@ (8104458 <HAL_DMA_IRQHandler+0xca4>)
 81042a4:	4293      	cmp	r3, r2
 81042a6:	d00e      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	681b      	ldr	r3, [r3, #0]
 81042ac:	4a6b      	ldr	r2, [pc, #428]	@ (810445c <HAL_DMA_IRQHandler+0xca8>)
 81042ae:	4293      	cmp	r3, r2
 81042b0:	d009      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 81042b2:	687b      	ldr	r3, [r7, #4]
 81042b4:	681b      	ldr	r3, [r3, #0]
 81042b6:	4a6a      	ldr	r2, [pc, #424]	@ (8104460 <HAL_DMA_IRQHandler+0xcac>)
 81042b8:	4293      	cmp	r3, r2
 81042ba:	d004      	beq.n	81042c6 <HAL_DMA_IRQHandler+0xb12>
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	681b      	ldr	r3, [r3, #0]
 81042c0:	4a68      	ldr	r2, [pc, #416]	@ (8104464 <HAL_DMA_IRQHandler+0xcb0>)
 81042c2:	4293      	cmp	r3, r2
 81042c4:	d108      	bne.n	81042d8 <HAL_DMA_IRQHandler+0xb24>
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	681a      	ldr	r2, [r3, #0]
 81042cc:	687b      	ldr	r3, [r7, #4]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	f022 0208 	bic.w	r2, r2, #8
 81042d4:	601a      	str	r2, [r3, #0]
 81042d6:	e007      	b.n	81042e8 <HAL_DMA_IRQHandler+0xb34>
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	681a      	ldr	r2, [r3, #0]
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	681b      	ldr	r3, [r3, #0]
 81042e2:	f022 0204 	bic.w	r2, r2, #4
 81042e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 81042e8:	687b      	ldr	r3, [r7, #4]
 81042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81042ec:	2b00      	cmp	r3, #0
 81042ee:	f000 8165 	beq.w	81045bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81042f6:	6878      	ldr	r0, [r7, #4]
 81042f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81042fa:	e15f      	b.n	81045bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104300:	f003 031f 	and.w	r3, r3, #31
 8104304:	2202      	movs	r2, #2
 8104306:	409a      	lsls	r2, r3
 8104308:	697b      	ldr	r3, [r7, #20]
 810430a:	4013      	ands	r3, r2
 810430c:	2b00      	cmp	r3, #0
 810430e:	f000 80c5 	beq.w	810449c <HAL_DMA_IRQHandler+0xce8>
 8104312:	693b      	ldr	r3, [r7, #16]
 8104314:	f003 0302 	and.w	r3, r3, #2
 8104318:	2b00      	cmp	r3, #0
 810431a:	f000 80bf 	beq.w	810449c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104322:	f003 031f 	and.w	r3, r3, #31
 8104326:	2202      	movs	r2, #2
 8104328:	409a      	lsls	r2, r3
 810432a:	69fb      	ldr	r3, [r7, #28]
 810432c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810432e:	693b      	ldr	r3, [r7, #16]
 8104330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8104334:	2b00      	cmp	r3, #0
 8104336:	d018      	beq.n	810436a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104338:	693b      	ldr	r3, [r7, #16]
 810433a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810433e:	2b00      	cmp	r3, #0
 8104340:	d109      	bne.n	8104356 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104346:	2b00      	cmp	r3, #0
 8104348:	f000 813a 	beq.w	81045c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104350:	6878      	ldr	r0, [r7, #4]
 8104352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104354:	e134      	b.n	81045c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810435a:	2b00      	cmp	r3, #0
 810435c:	f000 8130 	beq.w	81045c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104364:	6878      	ldr	r0, [r7, #4]
 8104366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104368:	e12a      	b.n	81045c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810436a:	693b      	ldr	r3, [r7, #16]
 810436c:	f003 0320 	and.w	r3, r3, #32
 8104370:	2b00      	cmp	r3, #0
 8104372:	f040 8089 	bne.w	8104488 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	681b      	ldr	r3, [r3, #0]
 810437a:	4a2b      	ldr	r2, [pc, #172]	@ (8104428 <HAL_DMA_IRQHandler+0xc74>)
 810437c:	4293      	cmp	r3, r2
 810437e:	d04a      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	681b      	ldr	r3, [r3, #0]
 8104384:	4a29      	ldr	r2, [pc, #164]	@ (810442c <HAL_DMA_IRQHandler+0xc78>)
 8104386:	4293      	cmp	r3, r2
 8104388:	d045      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 810438a:	687b      	ldr	r3, [r7, #4]
 810438c:	681b      	ldr	r3, [r3, #0]
 810438e:	4a28      	ldr	r2, [pc, #160]	@ (8104430 <HAL_DMA_IRQHandler+0xc7c>)
 8104390:	4293      	cmp	r3, r2
 8104392:	d040      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 8104394:	687b      	ldr	r3, [r7, #4]
 8104396:	681b      	ldr	r3, [r3, #0]
 8104398:	4a26      	ldr	r2, [pc, #152]	@ (8104434 <HAL_DMA_IRQHandler+0xc80>)
 810439a:	4293      	cmp	r3, r2
 810439c:	d03b      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	681b      	ldr	r3, [r3, #0]
 81043a2:	4a25      	ldr	r2, [pc, #148]	@ (8104438 <HAL_DMA_IRQHandler+0xc84>)
 81043a4:	4293      	cmp	r3, r2
 81043a6:	d036      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	681b      	ldr	r3, [r3, #0]
 81043ac:	4a23      	ldr	r2, [pc, #140]	@ (810443c <HAL_DMA_IRQHandler+0xc88>)
 81043ae:	4293      	cmp	r3, r2
 81043b0:	d031      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 81043b2:	687b      	ldr	r3, [r7, #4]
 81043b4:	681b      	ldr	r3, [r3, #0]
 81043b6:	4a22      	ldr	r2, [pc, #136]	@ (8104440 <HAL_DMA_IRQHandler+0xc8c>)
 81043b8:	4293      	cmp	r3, r2
 81043ba:	d02c      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	681b      	ldr	r3, [r3, #0]
 81043c0:	4a20      	ldr	r2, [pc, #128]	@ (8104444 <HAL_DMA_IRQHandler+0xc90>)
 81043c2:	4293      	cmp	r3, r2
 81043c4:	d027      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 81043c6:	687b      	ldr	r3, [r7, #4]
 81043c8:	681b      	ldr	r3, [r3, #0]
 81043ca:	4a1f      	ldr	r2, [pc, #124]	@ (8104448 <HAL_DMA_IRQHandler+0xc94>)
 81043cc:	4293      	cmp	r3, r2
 81043ce:	d022      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	681b      	ldr	r3, [r3, #0]
 81043d4:	4a1d      	ldr	r2, [pc, #116]	@ (810444c <HAL_DMA_IRQHandler+0xc98>)
 81043d6:	4293      	cmp	r3, r2
 81043d8:	d01d      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	681b      	ldr	r3, [r3, #0]
 81043de:	4a1c      	ldr	r2, [pc, #112]	@ (8104450 <HAL_DMA_IRQHandler+0xc9c>)
 81043e0:	4293      	cmp	r3, r2
 81043e2:	d018      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	681b      	ldr	r3, [r3, #0]
 81043e8:	4a1a      	ldr	r2, [pc, #104]	@ (8104454 <HAL_DMA_IRQHandler+0xca0>)
 81043ea:	4293      	cmp	r3, r2
 81043ec:	d013      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 81043ee:	687b      	ldr	r3, [r7, #4]
 81043f0:	681b      	ldr	r3, [r3, #0]
 81043f2:	4a19      	ldr	r2, [pc, #100]	@ (8104458 <HAL_DMA_IRQHandler+0xca4>)
 81043f4:	4293      	cmp	r3, r2
 81043f6:	d00e      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 81043f8:	687b      	ldr	r3, [r7, #4]
 81043fa:	681b      	ldr	r3, [r3, #0]
 81043fc:	4a17      	ldr	r2, [pc, #92]	@ (810445c <HAL_DMA_IRQHandler+0xca8>)
 81043fe:	4293      	cmp	r3, r2
 8104400:	d009      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	4a16      	ldr	r2, [pc, #88]	@ (8104460 <HAL_DMA_IRQHandler+0xcac>)
 8104408:	4293      	cmp	r3, r2
 810440a:	d004      	beq.n	8104416 <HAL_DMA_IRQHandler+0xc62>
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	4a14      	ldr	r2, [pc, #80]	@ (8104464 <HAL_DMA_IRQHandler+0xcb0>)
 8104412:	4293      	cmp	r3, r2
 8104414:	d128      	bne.n	8104468 <HAL_DMA_IRQHandler+0xcb4>
 8104416:	687b      	ldr	r3, [r7, #4]
 8104418:	681b      	ldr	r3, [r3, #0]
 810441a:	681a      	ldr	r2, [r3, #0]
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	f022 0214 	bic.w	r2, r2, #20
 8104424:	601a      	str	r2, [r3, #0]
 8104426:	e027      	b.n	8104478 <HAL_DMA_IRQHandler+0xcc4>
 8104428:	40020010 	.word	0x40020010
 810442c:	40020028 	.word	0x40020028
 8104430:	40020040 	.word	0x40020040
 8104434:	40020058 	.word	0x40020058
 8104438:	40020070 	.word	0x40020070
 810443c:	40020088 	.word	0x40020088
 8104440:	400200a0 	.word	0x400200a0
 8104444:	400200b8 	.word	0x400200b8
 8104448:	40020410 	.word	0x40020410
 810444c:	40020428 	.word	0x40020428
 8104450:	40020440 	.word	0x40020440
 8104454:	40020458 	.word	0x40020458
 8104458:	40020470 	.word	0x40020470
 810445c:	40020488 	.word	0x40020488
 8104460:	400204a0 	.word	0x400204a0
 8104464:	400204b8 	.word	0x400204b8
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	681b      	ldr	r3, [r3, #0]
 810446c:	681a      	ldr	r2, [r3, #0]
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	681b      	ldr	r3, [r3, #0]
 8104472:	f022 020a 	bic.w	r2, r2, #10
 8104476:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104478:	687b      	ldr	r3, [r7, #4]
 810447a:	2201      	movs	r2, #1
 810447c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	2200      	movs	r2, #0
 8104484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8104488:	687b      	ldr	r3, [r7, #4]
 810448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810448c:	2b00      	cmp	r3, #0
 810448e:	f000 8097 	beq.w	81045c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8104492:	687b      	ldr	r3, [r7, #4]
 8104494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104496:	6878      	ldr	r0, [r7, #4]
 8104498:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810449a:	e091      	b.n	81045c0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810449c:	687b      	ldr	r3, [r7, #4]
 810449e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81044a0:	f003 031f 	and.w	r3, r3, #31
 81044a4:	2208      	movs	r2, #8
 81044a6:	409a      	lsls	r2, r3
 81044a8:	697b      	ldr	r3, [r7, #20]
 81044aa:	4013      	ands	r3, r2
 81044ac:	2b00      	cmp	r3, #0
 81044ae:	f000 8088 	beq.w	81045c2 <HAL_DMA_IRQHandler+0xe0e>
 81044b2:	693b      	ldr	r3, [r7, #16]
 81044b4:	f003 0308 	and.w	r3, r3, #8
 81044b8:	2b00      	cmp	r3, #0
 81044ba:	f000 8082 	beq.w	81045c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81044be:	687b      	ldr	r3, [r7, #4]
 81044c0:	681b      	ldr	r3, [r3, #0]
 81044c2:	4a41      	ldr	r2, [pc, #260]	@ (81045c8 <HAL_DMA_IRQHandler+0xe14>)
 81044c4:	4293      	cmp	r3, r2
 81044c6:	d04a      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 81044c8:	687b      	ldr	r3, [r7, #4]
 81044ca:	681b      	ldr	r3, [r3, #0]
 81044cc:	4a3f      	ldr	r2, [pc, #252]	@ (81045cc <HAL_DMA_IRQHandler+0xe18>)
 81044ce:	4293      	cmp	r3, r2
 81044d0:	d045      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	681b      	ldr	r3, [r3, #0]
 81044d6:	4a3e      	ldr	r2, [pc, #248]	@ (81045d0 <HAL_DMA_IRQHandler+0xe1c>)
 81044d8:	4293      	cmp	r3, r2
 81044da:	d040      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 81044dc:	687b      	ldr	r3, [r7, #4]
 81044de:	681b      	ldr	r3, [r3, #0]
 81044e0:	4a3c      	ldr	r2, [pc, #240]	@ (81045d4 <HAL_DMA_IRQHandler+0xe20>)
 81044e2:	4293      	cmp	r3, r2
 81044e4:	d03b      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 81044e6:	687b      	ldr	r3, [r7, #4]
 81044e8:	681b      	ldr	r3, [r3, #0]
 81044ea:	4a3b      	ldr	r2, [pc, #236]	@ (81045d8 <HAL_DMA_IRQHandler+0xe24>)
 81044ec:	4293      	cmp	r3, r2
 81044ee:	d036      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	681b      	ldr	r3, [r3, #0]
 81044f4:	4a39      	ldr	r2, [pc, #228]	@ (81045dc <HAL_DMA_IRQHandler+0xe28>)
 81044f6:	4293      	cmp	r3, r2
 81044f8:	d031      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	681b      	ldr	r3, [r3, #0]
 81044fe:	4a38      	ldr	r2, [pc, #224]	@ (81045e0 <HAL_DMA_IRQHandler+0xe2c>)
 8104500:	4293      	cmp	r3, r2
 8104502:	d02c      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	681b      	ldr	r3, [r3, #0]
 8104508:	4a36      	ldr	r2, [pc, #216]	@ (81045e4 <HAL_DMA_IRQHandler+0xe30>)
 810450a:	4293      	cmp	r3, r2
 810450c:	d027      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	681b      	ldr	r3, [r3, #0]
 8104512:	4a35      	ldr	r2, [pc, #212]	@ (81045e8 <HAL_DMA_IRQHandler+0xe34>)
 8104514:	4293      	cmp	r3, r2
 8104516:	d022      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	4a33      	ldr	r2, [pc, #204]	@ (81045ec <HAL_DMA_IRQHandler+0xe38>)
 810451e:	4293      	cmp	r3, r2
 8104520:	d01d      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	4a32      	ldr	r2, [pc, #200]	@ (81045f0 <HAL_DMA_IRQHandler+0xe3c>)
 8104528:	4293      	cmp	r3, r2
 810452a:	d018      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	4a30      	ldr	r2, [pc, #192]	@ (81045f4 <HAL_DMA_IRQHandler+0xe40>)
 8104532:	4293      	cmp	r3, r2
 8104534:	d013      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	681b      	ldr	r3, [r3, #0]
 810453a:	4a2f      	ldr	r2, [pc, #188]	@ (81045f8 <HAL_DMA_IRQHandler+0xe44>)
 810453c:	4293      	cmp	r3, r2
 810453e:	d00e      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 8104540:	687b      	ldr	r3, [r7, #4]
 8104542:	681b      	ldr	r3, [r3, #0]
 8104544:	4a2d      	ldr	r2, [pc, #180]	@ (81045fc <HAL_DMA_IRQHandler+0xe48>)
 8104546:	4293      	cmp	r3, r2
 8104548:	d009      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	681b      	ldr	r3, [r3, #0]
 810454e:	4a2c      	ldr	r2, [pc, #176]	@ (8104600 <HAL_DMA_IRQHandler+0xe4c>)
 8104550:	4293      	cmp	r3, r2
 8104552:	d004      	beq.n	810455e <HAL_DMA_IRQHandler+0xdaa>
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	4a2a      	ldr	r2, [pc, #168]	@ (8104604 <HAL_DMA_IRQHandler+0xe50>)
 810455a:	4293      	cmp	r3, r2
 810455c:	d108      	bne.n	8104570 <HAL_DMA_IRQHandler+0xdbc>
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	681a      	ldr	r2, [r3, #0]
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	681b      	ldr	r3, [r3, #0]
 8104568:	f022 021c 	bic.w	r2, r2, #28
 810456c:	601a      	str	r2, [r3, #0]
 810456e:	e007      	b.n	8104580 <HAL_DMA_IRQHandler+0xdcc>
 8104570:	687b      	ldr	r3, [r7, #4]
 8104572:	681b      	ldr	r3, [r3, #0]
 8104574:	681a      	ldr	r2, [r3, #0]
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	f022 020e 	bic.w	r2, r2, #14
 810457e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104584:	f003 031f 	and.w	r3, r3, #31
 8104588:	2201      	movs	r2, #1
 810458a:	409a      	lsls	r2, r3
 810458c:	69fb      	ldr	r3, [r7, #28]
 810458e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	2201      	movs	r2, #1
 8104594:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	2201      	movs	r2, #1
 810459a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	2200      	movs	r2, #0
 81045a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 81045a6:	687b      	ldr	r3, [r7, #4]
 81045a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81045aa:	2b00      	cmp	r3, #0
 81045ac:	d009      	beq.n	81045c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81045b2:	6878      	ldr	r0, [r7, #4]
 81045b4:	4798      	blx	r3
 81045b6:	e004      	b.n	81045c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 81045b8:	bf00      	nop
 81045ba:	e002      	b.n	81045c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81045bc:	bf00      	nop
 81045be:	e000      	b.n	81045c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81045c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81045c2:	3728      	adds	r7, #40	@ 0x28
 81045c4:	46bd      	mov	sp, r7
 81045c6:	bd80      	pop	{r7, pc}
 81045c8:	40020010 	.word	0x40020010
 81045cc:	40020028 	.word	0x40020028
 81045d0:	40020040 	.word	0x40020040
 81045d4:	40020058 	.word	0x40020058
 81045d8:	40020070 	.word	0x40020070
 81045dc:	40020088 	.word	0x40020088
 81045e0:	400200a0 	.word	0x400200a0
 81045e4:	400200b8 	.word	0x400200b8
 81045e8:	40020410 	.word	0x40020410
 81045ec:	40020428 	.word	0x40020428
 81045f0:	40020440 	.word	0x40020440
 81045f4:	40020458 	.word	0x40020458
 81045f8:	40020470 	.word	0x40020470
 81045fc:	40020488 	.word	0x40020488
 8104600:	400204a0 	.word	0x400204a0
 8104604:	400204b8 	.word	0x400204b8

08104608 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8104608:	b480      	push	{r7}
 810460a:	b085      	sub	sp, #20
 810460c:	af00      	add	r7, sp, #0
 810460e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	681b      	ldr	r3, [r3, #0]
 8104614:	4a43      	ldr	r2, [pc, #268]	@ (8104724 <DMA_CalcBaseAndBitshift+0x11c>)
 8104616:	4293      	cmp	r3, r2
 8104618:	d04a      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	681b      	ldr	r3, [r3, #0]
 810461e:	4a42      	ldr	r2, [pc, #264]	@ (8104728 <DMA_CalcBaseAndBitshift+0x120>)
 8104620:	4293      	cmp	r3, r2
 8104622:	d045      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	681b      	ldr	r3, [r3, #0]
 8104628:	4a40      	ldr	r2, [pc, #256]	@ (810472c <DMA_CalcBaseAndBitshift+0x124>)
 810462a:	4293      	cmp	r3, r2
 810462c:	d040      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 810462e:	687b      	ldr	r3, [r7, #4]
 8104630:	681b      	ldr	r3, [r3, #0]
 8104632:	4a3f      	ldr	r2, [pc, #252]	@ (8104730 <DMA_CalcBaseAndBitshift+0x128>)
 8104634:	4293      	cmp	r3, r2
 8104636:	d03b      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	681b      	ldr	r3, [r3, #0]
 810463c:	4a3d      	ldr	r2, [pc, #244]	@ (8104734 <DMA_CalcBaseAndBitshift+0x12c>)
 810463e:	4293      	cmp	r3, r2
 8104640:	d036      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	4a3c      	ldr	r2, [pc, #240]	@ (8104738 <DMA_CalcBaseAndBitshift+0x130>)
 8104648:	4293      	cmp	r3, r2
 810464a:	d031      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 810464c:	687b      	ldr	r3, [r7, #4]
 810464e:	681b      	ldr	r3, [r3, #0]
 8104650:	4a3a      	ldr	r2, [pc, #232]	@ (810473c <DMA_CalcBaseAndBitshift+0x134>)
 8104652:	4293      	cmp	r3, r2
 8104654:	d02c      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	4a39      	ldr	r2, [pc, #228]	@ (8104740 <DMA_CalcBaseAndBitshift+0x138>)
 810465c:	4293      	cmp	r3, r2
 810465e:	d027      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	4a37      	ldr	r2, [pc, #220]	@ (8104744 <DMA_CalcBaseAndBitshift+0x13c>)
 8104666:	4293      	cmp	r3, r2
 8104668:	d022      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	681b      	ldr	r3, [r3, #0]
 810466e:	4a36      	ldr	r2, [pc, #216]	@ (8104748 <DMA_CalcBaseAndBitshift+0x140>)
 8104670:	4293      	cmp	r3, r2
 8104672:	d01d      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	4a34      	ldr	r2, [pc, #208]	@ (810474c <DMA_CalcBaseAndBitshift+0x144>)
 810467a:	4293      	cmp	r3, r2
 810467c:	d018      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	681b      	ldr	r3, [r3, #0]
 8104682:	4a33      	ldr	r2, [pc, #204]	@ (8104750 <DMA_CalcBaseAndBitshift+0x148>)
 8104684:	4293      	cmp	r3, r2
 8104686:	d013      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	681b      	ldr	r3, [r3, #0]
 810468c:	4a31      	ldr	r2, [pc, #196]	@ (8104754 <DMA_CalcBaseAndBitshift+0x14c>)
 810468e:	4293      	cmp	r3, r2
 8104690:	d00e      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	681b      	ldr	r3, [r3, #0]
 8104696:	4a30      	ldr	r2, [pc, #192]	@ (8104758 <DMA_CalcBaseAndBitshift+0x150>)
 8104698:	4293      	cmp	r3, r2
 810469a:	d009      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 810469c:	687b      	ldr	r3, [r7, #4]
 810469e:	681b      	ldr	r3, [r3, #0]
 81046a0:	4a2e      	ldr	r2, [pc, #184]	@ (810475c <DMA_CalcBaseAndBitshift+0x154>)
 81046a2:	4293      	cmp	r3, r2
 81046a4:	d004      	beq.n	81046b0 <DMA_CalcBaseAndBitshift+0xa8>
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	4a2d      	ldr	r2, [pc, #180]	@ (8104760 <DMA_CalcBaseAndBitshift+0x158>)
 81046ac:	4293      	cmp	r3, r2
 81046ae:	d101      	bne.n	81046b4 <DMA_CalcBaseAndBitshift+0xac>
 81046b0:	2301      	movs	r3, #1
 81046b2:	e000      	b.n	81046b6 <DMA_CalcBaseAndBitshift+0xae>
 81046b4:	2300      	movs	r3, #0
 81046b6:	2b00      	cmp	r3, #0
 81046b8:	d026      	beq.n	8104708 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	681b      	ldr	r3, [r3, #0]
 81046be:	b2db      	uxtb	r3, r3
 81046c0:	3b10      	subs	r3, #16
 81046c2:	4a28      	ldr	r2, [pc, #160]	@ (8104764 <DMA_CalcBaseAndBitshift+0x15c>)
 81046c4:	fba2 2303 	umull	r2, r3, r2, r3
 81046c8:	091b      	lsrs	r3, r3, #4
 81046ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81046cc:	68fb      	ldr	r3, [r7, #12]
 81046ce:	f003 0307 	and.w	r3, r3, #7
 81046d2:	4a25      	ldr	r2, [pc, #148]	@ (8104768 <DMA_CalcBaseAndBitshift+0x160>)
 81046d4:	5cd3      	ldrb	r3, [r2, r3]
 81046d6:	461a      	mov	r2, r3
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 81046dc:	68fb      	ldr	r3, [r7, #12]
 81046de:	2b03      	cmp	r3, #3
 81046e0:	d909      	bls.n	81046f6 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	681b      	ldr	r3, [r3, #0]
 81046e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 81046ea:	f023 0303 	bic.w	r3, r3, #3
 81046ee:	1d1a      	adds	r2, r3, #4
 81046f0:	687b      	ldr	r3, [r7, #4]
 81046f2:	659a      	str	r2, [r3, #88]	@ 0x58
 81046f4:	e00e      	b.n	8104714 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	681b      	ldr	r3, [r3, #0]
 81046fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 81046fe:	f023 0303 	bic.w	r3, r3, #3
 8104702:	687a      	ldr	r2, [r7, #4]
 8104704:	6593      	str	r3, [r2, #88]	@ 0x58
 8104706:	e005      	b.n	8104714 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8104714:	687b      	ldr	r3, [r7, #4]
 8104716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8104718:	4618      	mov	r0, r3
 810471a:	3714      	adds	r7, #20
 810471c:	46bd      	mov	sp, r7
 810471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104722:	4770      	bx	lr
 8104724:	40020010 	.word	0x40020010
 8104728:	40020028 	.word	0x40020028
 810472c:	40020040 	.word	0x40020040
 8104730:	40020058 	.word	0x40020058
 8104734:	40020070 	.word	0x40020070
 8104738:	40020088 	.word	0x40020088
 810473c:	400200a0 	.word	0x400200a0
 8104740:	400200b8 	.word	0x400200b8
 8104744:	40020410 	.word	0x40020410
 8104748:	40020428 	.word	0x40020428
 810474c:	40020440 	.word	0x40020440
 8104750:	40020458 	.word	0x40020458
 8104754:	40020470 	.word	0x40020470
 8104758:	40020488 	.word	0x40020488
 810475c:	400204a0 	.word	0x400204a0
 8104760:	400204b8 	.word	0x400204b8
 8104764:	aaaaaaab 	.word	0xaaaaaaab
 8104768:	0810be3c 	.word	0x0810be3c

0810476c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 810476c:	b480      	push	{r7}
 810476e:	b085      	sub	sp, #20
 8104770:	af00      	add	r7, sp, #0
 8104772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104774:	2300      	movs	r3, #0
 8104776:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	699b      	ldr	r3, [r3, #24]
 810477c:	2b00      	cmp	r3, #0
 810477e:	d120      	bne.n	81047c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104780:	687b      	ldr	r3, [r7, #4]
 8104782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104784:	2b03      	cmp	r3, #3
 8104786:	d858      	bhi.n	810483a <DMA_CheckFifoParam+0xce>
 8104788:	a201      	add	r2, pc, #4	@ (adr r2, 8104790 <DMA_CheckFifoParam+0x24>)
 810478a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810478e:	bf00      	nop
 8104790:	081047a1 	.word	0x081047a1
 8104794:	081047b3 	.word	0x081047b3
 8104798:	081047a1 	.word	0x081047a1
 810479c:	0810483b 	.word	0x0810483b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81047a0:	687b      	ldr	r3, [r7, #4]
 81047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81047a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81047a8:	2b00      	cmp	r3, #0
 81047aa:	d048      	beq.n	810483e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 81047ac:	2301      	movs	r3, #1
 81047ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81047b0:	e045      	b.n	810483e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81047b2:	687b      	ldr	r3, [r7, #4]
 81047b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81047b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 81047ba:	d142      	bne.n	8104842 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81047bc:	2301      	movs	r3, #1
 81047be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81047c0:	e03f      	b.n	8104842 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	699b      	ldr	r3, [r3, #24]
 81047c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81047ca:	d123      	bne.n	8104814 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 81047cc:	687b      	ldr	r3, [r7, #4]
 81047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81047d0:	2b03      	cmp	r3, #3
 81047d2:	d838      	bhi.n	8104846 <DMA_CheckFifoParam+0xda>
 81047d4:	a201      	add	r2, pc, #4	@ (adr r2, 81047dc <DMA_CheckFifoParam+0x70>)
 81047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81047da:	bf00      	nop
 81047dc:	081047ed 	.word	0x081047ed
 81047e0:	081047f3 	.word	0x081047f3
 81047e4:	081047ed 	.word	0x081047ed
 81047e8:	08104805 	.word	0x08104805
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81047ec:	2301      	movs	r3, #1
 81047ee:	73fb      	strb	r3, [r7, #15]
        break;
 81047f0:	e030      	b.n	8104854 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81047f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81047fa:	2b00      	cmp	r3, #0
 81047fc:	d025      	beq.n	810484a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81047fe:	2301      	movs	r3, #1
 8104800:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104802:	e022      	b.n	810484a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104808:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 810480c:	d11f      	bne.n	810484e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 810480e:	2301      	movs	r3, #1
 8104810:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104812:	e01c      	b.n	810484e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104814:	687b      	ldr	r3, [r7, #4]
 8104816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104818:	2b02      	cmp	r3, #2
 810481a:	d902      	bls.n	8104822 <DMA_CheckFifoParam+0xb6>
 810481c:	2b03      	cmp	r3, #3
 810481e:	d003      	beq.n	8104828 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8104820:	e018      	b.n	8104854 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8104822:	2301      	movs	r3, #1
 8104824:	73fb      	strb	r3, [r7, #15]
        break;
 8104826:	e015      	b.n	8104854 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810482c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104830:	2b00      	cmp	r3, #0
 8104832:	d00e      	beq.n	8104852 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8104834:	2301      	movs	r3, #1
 8104836:	73fb      	strb	r3, [r7, #15]
    break;
 8104838:	e00b      	b.n	8104852 <DMA_CheckFifoParam+0xe6>
        break;
 810483a:	bf00      	nop
 810483c:	e00a      	b.n	8104854 <DMA_CheckFifoParam+0xe8>
        break;
 810483e:	bf00      	nop
 8104840:	e008      	b.n	8104854 <DMA_CheckFifoParam+0xe8>
        break;
 8104842:	bf00      	nop
 8104844:	e006      	b.n	8104854 <DMA_CheckFifoParam+0xe8>
        break;
 8104846:	bf00      	nop
 8104848:	e004      	b.n	8104854 <DMA_CheckFifoParam+0xe8>
        break;
 810484a:	bf00      	nop
 810484c:	e002      	b.n	8104854 <DMA_CheckFifoParam+0xe8>
        break;
 810484e:	bf00      	nop
 8104850:	e000      	b.n	8104854 <DMA_CheckFifoParam+0xe8>
    break;
 8104852:	bf00      	nop
    }
  }

  return status;
 8104854:	7bfb      	ldrb	r3, [r7, #15]
}
 8104856:	4618      	mov	r0, r3
 8104858:	3714      	adds	r7, #20
 810485a:	46bd      	mov	sp, r7
 810485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104860:	4770      	bx	lr
 8104862:	bf00      	nop

08104864 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104864:	b480      	push	{r7}
 8104866:	b085      	sub	sp, #20
 8104868:	af00      	add	r7, sp, #0
 810486a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 810486c:	687b      	ldr	r3, [r7, #4]
 810486e:	681b      	ldr	r3, [r3, #0]
 8104870:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	681b      	ldr	r3, [r3, #0]
 8104876:	4a3a      	ldr	r2, [pc, #232]	@ (8104960 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8104878:	4293      	cmp	r3, r2
 810487a:	d022      	beq.n	81048c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810487c:	687b      	ldr	r3, [r7, #4]
 810487e:	681b      	ldr	r3, [r3, #0]
 8104880:	4a38      	ldr	r2, [pc, #224]	@ (8104964 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104882:	4293      	cmp	r3, r2
 8104884:	d01d      	beq.n	81048c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104886:	687b      	ldr	r3, [r7, #4]
 8104888:	681b      	ldr	r3, [r3, #0]
 810488a:	4a37      	ldr	r2, [pc, #220]	@ (8104968 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 810488c:	4293      	cmp	r3, r2
 810488e:	d018      	beq.n	81048c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	681b      	ldr	r3, [r3, #0]
 8104894:	4a35      	ldr	r2, [pc, #212]	@ (810496c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104896:	4293      	cmp	r3, r2
 8104898:	d013      	beq.n	81048c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810489a:	687b      	ldr	r3, [r7, #4]
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	4a34      	ldr	r2, [pc, #208]	@ (8104970 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 81048a0:	4293      	cmp	r3, r2
 81048a2:	d00e      	beq.n	81048c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	681b      	ldr	r3, [r3, #0]
 81048a8:	4a32      	ldr	r2, [pc, #200]	@ (8104974 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 81048aa:	4293      	cmp	r3, r2
 81048ac:	d009      	beq.n	81048c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81048ae:	687b      	ldr	r3, [r7, #4]
 81048b0:	681b      	ldr	r3, [r3, #0]
 81048b2:	4a31      	ldr	r2, [pc, #196]	@ (8104978 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81048b4:	4293      	cmp	r3, r2
 81048b6:	d004      	beq.n	81048c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	681b      	ldr	r3, [r3, #0]
 81048bc:	4a2f      	ldr	r2, [pc, #188]	@ (810497c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81048be:	4293      	cmp	r3, r2
 81048c0:	d101      	bne.n	81048c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81048c2:	2301      	movs	r3, #1
 81048c4:	e000      	b.n	81048c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81048c6:	2300      	movs	r3, #0
 81048c8:	2b00      	cmp	r3, #0
 81048ca:	d01c      	beq.n	8104906 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81048cc:	687b      	ldr	r3, [r7, #4]
 81048ce:	681b      	ldr	r3, [r3, #0]
 81048d0:	b2db      	uxtb	r3, r3
 81048d2:	3b08      	subs	r3, #8
 81048d4:	4a2a      	ldr	r2, [pc, #168]	@ (8104980 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 81048d6:	fba2 2303 	umull	r2, r3, r2, r3
 81048da:	091b      	lsrs	r3, r3, #4
 81048dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81048de:	68fb      	ldr	r3, [r7, #12]
 81048e0:	f103 53b0 	add.w	r3, r3, #369098752	@ 0x16000000
 81048e4:	f503 4316 	add.w	r3, r3, #38400	@ 0x9600
 81048e8:	009b      	lsls	r3, r3, #2
 81048ea:	461a      	mov	r2, r3
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	4a24      	ldr	r2, [pc, #144]	@ (8104984 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81048f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81048f6:	68fb      	ldr	r3, [r7, #12]
 81048f8:	f003 031f 	and.w	r3, r3, #31
 81048fc:	2201      	movs	r2, #1
 81048fe:	409a      	lsls	r2, r3
 8104900:	687b      	ldr	r3, [r7, #4]
 8104902:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104904:	e026      	b.n	8104954 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	b2db      	uxtb	r3, r3
 810490c:	3b10      	subs	r3, #16
 810490e:	4a1e      	ldr	r2, [pc, #120]	@ (8104988 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104910:	fba2 2303 	umull	r2, r3, r2, r3
 8104914:	091b      	lsrs	r3, r3, #4
 8104916:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104918:	68bb      	ldr	r3, [r7, #8]
 810491a:	4a1c      	ldr	r2, [pc, #112]	@ (810498c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 810491c:	4293      	cmp	r3, r2
 810491e:	d806      	bhi.n	810492e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8104920:	68bb      	ldr	r3, [r7, #8]
 8104922:	4a1b      	ldr	r2, [pc, #108]	@ (8104990 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8104924:	4293      	cmp	r3, r2
 8104926:	d902      	bls.n	810492e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8104928:	68fb      	ldr	r3, [r7, #12]
 810492a:	3308      	adds	r3, #8
 810492c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 810492e:	68fb      	ldr	r3, [r7, #12]
 8104930:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8104934:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8104938:	009b      	lsls	r3, r3, #2
 810493a:	461a      	mov	r2, r3
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	4a14      	ldr	r2, [pc, #80]	@ (8104994 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8104944:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104946:	68fb      	ldr	r3, [r7, #12]
 8104948:	f003 031f 	and.w	r3, r3, #31
 810494c:	2201      	movs	r2, #1
 810494e:	409a      	lsls	r2, r3
 8104950:	687b      	ldr	r3, [r7, #4]
 8104952:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8104954:	bf00      	nop
 8104956:	3714      	adds	r7, #20
 8104958:	46bd      	mov	sp, r7
 810495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810495e:	4770      	bx	lr
 8104960:	58025408 	.word	0x58025408
 8104964:	5802541c 	.word	0x5802541c
 8104968:	58025430 	.word	0x58025430
 810496c:	58025444 	.word	0x58025444
 8104970:	58025458 	.word	0x58025458
 8104974:	5802546c 	.word	0x5802546c
 8104978:	58025480 	.word	0x58025480
 810497c:	58025494 	.word	0x58025494
 8104980:	cccccccd 	.word	0xcccccccd
 8104984:	58025880 	.word	0x58025880
 8104988:	aaaaaaab 	.word	0xaaaaaaab
 810498c:	400204b8 	.word	0x400204b8
 8104990:	4002040f 	.word	0x4002040f
 8104994:	40020880 	.word	0x40020880

08104998 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104998:	b480      	push	{r7}
 810499a:	b085      	sub	sp, #20
 810499c:	af00      	add	r7, sp, #0
 810499e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 81049a0:	687b      	ldr	r3, [r7, #4]
 81049a2:	685b      	ldr	r3, [r3, #4]
 81049a4:	b2db      	uxtb	r3, r3
 81049a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	2b00      	cmp	r3, #0
 81049ac:	d04a      	beq.n	8104a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	2b08      	cmp	r3, #8
 81049b2:	d847      	bhi.n	8104a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81049b4:	687b      	ldr	r3, [r7, #4]
 81049b6:	681b      	ldr	r3, [r3, #0]
 81049b8:	4a25      	ldr	r2, [pc, #148]	@ (8104a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 81049ba:	4293      	cmp	r3, r2
 81049bc:	d022      	beq.n	8104a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81049be:	687b      	ldr	r3, [r7, #4]
 81049c0:	681b      	ldr	r3, [r3, #0]
 81049c2:	4a24      	ldr	r2, [pc, #144]	@ (8104a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 81049c4:	4293      	cmp	r3, r2
 81049c6:	d01d      	beq.n	8104a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81049c8:	687b      	ldr	r3, [r7, #4]
 81049ca:	681b      	ldr	r3, [r3, #0]
 81049cc:	4a22      	ldr	r2, [pc, #136]	@ (8104a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 81049ce:	4293      	cmp	r3, r2
 81049d0:	d018      	beq.n	8104a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81049d2:	687b      	ldr	r3, [r7, #4]
 81049d4:	681b      	ldr	r3, [r3, #0]
 81049d6:	4a21      	ldr	r2, [pc, #132]	@ (8104a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 81049d8:	4293      	cmp	r3, r2
 81049da:	d013      	beq.n	8104a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	681b      	ldr	r3, [r3, #0]
 81049e0:	4a1f      	ldr	r2, [pc, #124]	@ (8104a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 81049e2:	4293      	cmp	r3, r2
 81049e4:	d00e      	beq.n	8104a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	681b      	ldr	r3, [r3, #0]
 81049ea:	4a1e      	ldr	r2, [pc, #120]	@ (8104a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 81049ec:	4293      	cmp	r3, r2
 81049ee:	d009      	beq.n	8104a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	4a1c      	ldr	r2, [pc, #112]	@ (8104a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 81049f6:	4293      	cmp	r3, r2
 81049f8:	d004      	beq.n	8104a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81049fa:	687b      	ldr	r3, [r7, #4]
 81049fc:	681b      	ldr	r3, [r3, #0]
 81049fe:	4a1b      	ldr	r2, [pc, #108]	@ (8104a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104a00:	4293      	cmp	r3, r2
 8104a02:	d101      	bne.n	8104a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104a04:	2301      	movs	r3, #1
 8104a06:	e000      	b.n	8104a0a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104a08:	2300      	movs	r3, #0
 8104a0a:	2b00      	cmp	r3, #0
 8104a0c:	d00a      	beq.n	8104a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8104a0e:	68fa      	ldr	r2, [r7, #12]
 8104a10:	4b17      	ldr	r3, [pc, #92]	@ (8104a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104a12:	4413      	add	r3, r2
 8104a14:	009b      	lsls	r3, r3, #2
 8104a16:	461a      	mov	r2, r3
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	4a15      	ldr	r2, [pc, #84]	@ (8104a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104a20:	671a      	str	r2, [r3, #112]	@ 0x70
 8104a22:	e009      	b.n	8104a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8104a24:	68fa      	ldr	r2, [r7, #12]
 8104a26:	4b14      	ldr	r3, [pc, #80]	@ (8104a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104a28:	4413      	add	r3, r2
 8104a2a:	009b      	lsls	r3, r3, #2
 8104a2c:	461a      	mov	r2, r3
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	4a11      	ldr	r2, [pc, #68]	@ (8104a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104a36:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104a38:	68fb      	ldr	r3, [r7, #12]
 8104a3a:	3b01      	subs	r3, #1
 8104a3c:	2201      	movs	r2, #1
 8104a3e:	409a      	lsls	r2, r3
 8104a40:	687b      	ldr	r3, [r7, #4]
 8104a42:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8104a44:	bf00      	nop
 8104a46:	3714      	adds	r7, #20
 8104a48:	46bd      	mov	sp, r7
 8104a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a4e:	4770      	bx	lr
 8104a50:	58025408 	.word	0x58025408
 8104a54:	5802541c 	.word	0x5802541c
 8104a58:	58025430 	.word	0x58025430
 8104a5c:	58025444 	.word	0x58025444
 8104a60:	58025458 	.word	0x58025458
 8104a64:	5802546c 	.word	0x5802546c
 8104a68:	58025480 	.word	0x58025480
 8104a6c:	58025494 	.word	0x58025494
 8104a70:	1600963f 	.word	0x1600963f
 8104a74:	58025940 	.word	0x58025940
 8104a78:	1000823f 	.word	0x1000823f
 8104a7c:	40020940 	.word	0x40020940

08104a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8104a80:	b480      	push	{r7}
 8104a82:	b089      	sub	sp, #36	@ 0x24
 8104a84:	af00      	add	r7, sp, #0
 8104a86:	6078      	str	r0, [r7, #4]
 8104a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104a8a:	2300      	movs	r3, #0
 8104a8c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104a8e:	4b89      	ldr	r3, [pc, #548]	@ (8104cb4 <HAL_GPIO_Init+0x234>)
 8104a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104a92:	e194      	b.n	8104dbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104a94:	683b      	ldr	r3, [r7, #0]
 8104a96:	681a      	ldr	r2, [r3, #0]
 8104a98:	2101      	movs	r1, #1
 8104a9a:	69fb      	ldr	r3, [r7, #28]
 8104a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8104aa0:	4013      	ands	r3, r2
 8104aa2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104aa4:	693b      	ldr	r3, [r7, #16]
 8104aa6:	2b00      	cmp	r3, #0
 8104aa8:	f000 8186 	beq.w	8104db8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104aac:	683b      	ldr	r3, [r7, #0]
 8104aae:	685b      	ldr	r3, [r3, #4]
 8104ab0:	f003 0303 	and.w	r3, r3, #3
 8104ab4:	2b01      	cmp	r3, #1
 8104ab6:	d005      	beq.n	8104ac4 <HAL_GPIO_Init+0x44>
 8104ab8:	683b      	ldr	r3, [r7, #0]
 8104aba:	685b      	ldr	r3, [r3, #4]
 8104abc:	f003 0303 	and.w	r3, r3, #3
 8104ac0:	2b02      	cmp	r3, #2
 8104ac2:	d130      	bne.n	8104b26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	689b      	ldr	r3, [r3, #8]
 8104ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104aca:	69fb      	ldr	r3, [r7, #28]
 8104acc:	005b      	lsls	r3, r3, #1
 8104ace:	2203      	movs	r2, #3
 8104ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8104ad4:	43db      	mvns	r3, r3
 8104ad6:	69ba      	ldr	r2, [r7, #24]
 8104ad8:	4013      	ands	r3, r2
 8104ada:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104adc:	683b      	ldr	r3, [r7, #0]
 8104ade:	68da      	ldr	r2, [r3, #12]
 8104ae0:	69fb      	ldr	r3, [r7, #28]
 8104ae2:	005b      	lsls	r3, r3, #1
 8104ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8104ae8:	69ba      	ldr	r2, [r7, #24]
 8104aea:	4313      	orrs	r3, r2
 8104aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104aee:	687b      	ldr	r3, [r7, #4]
 8104af0:	69ba      	ldr	r2, [r7, #24]
 8104af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	685b      	ldr	r3, [r3, #4]
 8104af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104afa:	2201      	movs	r2, #1
 8104afc:	69fb      	ldr	r3, [r7, #28]
 8104afe:	fa02 f303 	lsl.w	r3, r2, r3
 8104b02:	43db      	mvns	r3, r3
 8104b04:	69ba      	ldr	r2, [r7, #24]
 8104b06:	4013      	ands	r3, r2
 8104b08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104b0a:	683b      	ldr	r3, [r7, #0]
 8104b0c:	685b      	ldr	r3, [r3, #4]
 8104b0e:	091b      	lsrs	r3, r3, #4
 8104b10:	f003 0201 	and.w	r2, r3, #1
 8104b14:	69fb      	ldr	r3, [r7, #28]
 8104b16:	fa02 f303 	lsl.w	r3, r2, r3
 8104b1a:	69ba      	ldr	r2, [r7, #24]
 8104b1c:	4313      	orrs	r3, r2
 8104b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104b20:	687b      	ldr	r3, [r7, #4]
 8104b22:	69ba      	ldr	r2, [r7, #24]
 8104b24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8104b26:	683b      	ldr	r3, [r7, #0]
 8104b28:	685b      	ldr	r3, [r3, #4]
 8104b2a:	f003 0303 	and.w	r3, r3, #3
 8104b2e:	2b03      	cmp	r3, #3
 8104b30:	d017      	beq.n	8104b62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	68db      	ldr	r3, [r3, #12]
 8104b36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104b38:	69fb      	ldr	r3, [r7, #28]
 8104b3a:	005b      	lsls	r3, r3, #1
 8104b3c:	2203      	movs	r2, #3
 8104b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8104b42:	43db      	mvns	r3, r3
 8104b44:	69ba      	ldr	r2, [r7, #24]
 8104b46:	4013      	ands	r3, r2
 8104b48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104b4a:	683b      	ldr	r3, [r7, #0]
 8104b4c:	689a      	ldr	r2, [r3, #8]
 8104b4e:	69fb      	ldr	r3, [r7, #28]
 8104b50:	005b      	lsls	r3, r3, #1
 8104b52:	fa02 f303 	lsl.w	r3, r2, r3
 8104b56:	69ba      	ldr	r2, [r7, #24]
 8104b58:	4313      	orrs	r3, r2
 8104b5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	69ba      	ldr	r2, [r7, #24]
 8104b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104b62:	683b      	ldr	r3, [r7, #0]
 8104b64:	685b      	ldr	r3, [r3, #4]
 8104b66:	f003 0303 	and.w	r3, r3, #3
 8104b6a:	2b02      	cmp	r3, #2
 8104b6c:	d123      	bne.n	8104bb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104b6e:	69fb      	ldr	r3, [r7, #28]
 8104b70:	08da      	lsrs	r2, r3, #3
 8104b72:	687b      	ldr	r3, [r7, #4]
 8104b74:	3208      	adds	r2, #8
 8104b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104b7c:	69fb      	ldr	r3, [r7, #28]
 8104b7e:	f003 0307 	and.w	r3, r3, #7
 8104b82:	009b      	lsls	r3, r3, #2
 8104b84:	220f      	movs	r2, #15
 8104b86:	fa02 f303 	lsl.w	r3, r2, r3
 8104b8a:	43db      	mvns	r3, r3
 8104b8c:	69ba      	ldr	r2, [r7, #24]
 8104b8e:	4013      	ands	r3, r2
 8104b90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104b92:	683b      	ldr	r3, [r7, #0]
 8104b94:	691a      	ldr	r2, [r3, #16]
 8104b96:	69fb      	ldr	r3, [r7, #28]
 8104b98:	f003 0307 	and.w	r3, r3, #7
 8104b9c:	009b      	lsls	r3, r3, #2
 8104b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8104ba2:	69ba      	ldr	r2, [r7, #24]
 8104ba4:	4313      	orrs	r3, r2
 8104ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104ba8:	69fb      	ldr	r3, [r7, #28]
 8104baa:	08da      	lsrs	r2, r3, #3
 8104bac:	687b      	ldr	r3, [r7, #4]
 8104bae:	3208      	adds	r2, #8
 8104bb0:	69b9      	ldr	r1, [r7, #24]
 8104bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104bb6:	687b      	ldr	r3, [r7, #4]
 8104bb8:	681b      	ldr	r3, [r3, #0]
 8104bba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104bbc:	69fb      	ldr	r3, [r7, #28]
 8104bbe:	005b      	lsls	r3, r3, #1
 8104bc0:	2203      	movs	r2, #3
 8104bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8104bc6:	43db      	mvns	r3, r3
 8104bc8:	69ba      	ldr	r2, [r7, #24]
 8104bca:	4013      	ands	r3, r2
 8104bcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104bce:	683b      	ldr	r3, [r7, #0]
 8104bd0:	685b      	ldr	r3, [r3, #4]
 8104bd2:	f003 0203 	and.w	r2, r3, #3
 8104bd6:	69fb      	ldr	r3, [r7, #28]
 8104bd8:	005b      	lsls	r3, r3, #1
 8104bda:	fa02 f303 	lsl.w	r3, r2, r3
 8104bde:	69ba      	ldr	r2, [r7, #24]
 8104be0:	4313      	orrs	r3, r2
 8104be2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104be4:	687b      	ldr	r3, [r7, #4]
 8104be6:	69ba      	ldr	r2, [r7, #24]
 8104be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104bea:	683b      	ldr	r3, [r7, #0]
 8104bec:	685b      	ldr	r3, [r3, #4]
 8104bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104bf2:	2b00      	cmp	r3, #0
 8104bf4:	f000 80e0 	beq.w	8104db8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8104cb8 <HAL_GPIO_Init+0x238>)
 8104bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8104cb8 <HAL_GPIO_Init+0x238>)
 8104c00:	f043 0302 	orr.w	r3, r3, #2
 8104c04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8104c08:	4b2b      	ldr	r3, [pc, #172]	@ (8104cb8 <HAL_GPIO_Init+0x238>)
 8104c0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104c0e:	f003 0302 	and.w	r3, r3, #2
 8104c12:	60fb      	str	r3, [r7, #12]
 8104c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104c16:	4a29      	ldr	r2, [pc, #164]	@ (8104cbc <HAL_GPIO_Init+0x23c>)
 8104c18:	69fb      	ldr	r3, [r7, #28]
 8104c1a:	089b      	lsrs	r3, r3, #2
 8104c1c:	3302      	adds	r3, #2
 8104c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104c24:	69fb      	ldr	r3, [r7, #28]
 8104c26:	f003 0303 	and.w	r3, r3, #3
 8104c2a:	009b      	lsls	r3, r3, #2
 8104c2c:	220f      	movs	r2, #15
 8104c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8104c32:	43db      	mvns	r3, r3
 8104c34:	69ba      	ldr	r2, [r7, #24]
 8104c36:	4013      	ands	r3, r2
 8104c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104c3a:	687b      	ldr	r3, [r7, #4]
 8104c3c:	4a20      	ldr	r2, [pc, #128]	@ (8104cc0 <HAL_GPIO_Init+0x240>)
 8104c3e:	4293      	cmp	r3, r2
 8104c40:	d052      	beq.n	8104ce8 <HAL_GPIO_Init+0x268>
 8104c42:	687b      	ldr	r3, [r7, #4]
 8104c44:	4a1f      	ldr	r2, [pc, #124]	@ (8104cc4 <HAL_GPIO_Init+0x244>)
 8104c46:	4293      	cmp	r3, r2
 8104c48:	d031      	beq.n	8104cae <HAL_GPIO_Init+0x22e>
 8104c4a:	687b      	ldr	r3, [r7, #4]
 8104c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8104cc8 <HAL_GPIO_Init+0x248>)
 8104c4e:	4293      	cmp	r3, r2
 8104c50:	d02b      	beq.n	8104caa <HAL_GPIO_Init+0x22a>
 8104c52:	687b      	ldr	r3, [r7, #4]
 8104c54:	4a1d      	ldr	r2, [pc, #116]	@ (8104ccc <HAL_GPIO_Init+0x24c>)
 8104c56:	4293      	cmp	r3, r2
 8104c58:	d025      	beq.n	8104ca6 <HAL_GPIO_Init+0x226>
 8104c5a:	687b      	ldr	r3, [r7, #4]
 8104c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8104cd0 <HAL_GPIO_Init+0x250>)
 8104c5e:	4293      	cmp	r3, r2
 8104c60:	d01f      	beq.n	8104ca2 <HAL_GPIO_Init+0x222>
 8104c62:	687b      	ldr	r3, [r7, #4]
 8104c64:	4a1b      	ldr	r2, [pc, #108]	@ (8104cd4 <HAL_GPIO_Init+0x254>)
 8104c66:	4293      	cmp	r3, r2
 8104c68:	d019      	beq.n	8104c9e <HAL_GPIO_Init+0x21e>
 8104c6a:	687b      	ldr	r3, [r7, #4]
 8104c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8104cd8 <HAL_GPIO_Init+0x258>)
 8104c6e:	4293      	cmp	r3, r2
 8104c70:	d013      	beq.n	8104c9a <HAL_GPIO_Init+0x21a>
 8104c72:	687b      	ldr	r3, [r7, #4]
 8104c74:	4a19      	ldr	r2, [pc, #100]	@ (8104cdc <HAL_GPIO_Init+0x25c>)
 8104c76:	4293      	cmp	r3, r2
 8104c78:	d00d      	beq.n	8104c96 <HAL_GPIO_Init+0x216>
 8104c7a:	687b      	ldr	r3, [r7, #4]
 8104c7c:	4a18      	ldr	r2, [pc, #96]	@ (8104ce0 <HAL_GPIO_Init+0x260>)
 8104c7e:	4293      	cmp	r3, r2
 8104c80:	d007      	beq.n	8104c92 <HAL_GPIO_Init+0x212>
 8104c82:	687b      	ldr	r3, [r7, #4]
 8104c84:	4a17      	ldr	r2, [pc, #92]	@ (8104ce4 <HAL_GPIO_Init+0x264>)
 8104c86:	4293      	cmp	r3, r2
 8104c88:	d101      	bne.n	8104c8e <HAL_GPIO_Init+0x20e>
 8104c8a:	2309      	movs	r3, #9
 8104c8c:	e02d      	b.n	8104cea <HAL_GPIO_Init+0x26a>
 8104c8e:	230a      	movs	r3, #10
 8104c90:	e02b      	b.n	8104cea <HAL_GPIO_Init+0x26a>
 8104c92:	2308      	movs	r3, #8
 8104c94:	e029      	b.n	8104cea <HAL_GPIO_Init+0x26a>
 8104c96:	2307      	movs	r3, #7
 8104c98:	e027      	b.n	8104cea <HAL_GPIO_Init+0x26a>
 8104c9a:	2306      	movs	r3, #6
 8104c9c:	e025      	b.n	8104cea <HAL_GPIO_Init+0x26a>
 8104c9e:	2305      	movs	r3, #5
 8104ca0:	e023      	b.n	8104cea <HAL_GPIO_Init+0x26a>
 8104ca2:	2304      	movs	r3, #4
 8104ca4:	e021      	b.n	8104cea <HAL_GPIO_Init+0x26a>
 8104ca6:	2303      	movs	r3, #3
 8104ca8:	e01f      	b.n	8104cea <HAL_GPIO_Init+0x26a>
 8104caa:	2302      	movs	r3, #2
 8104cac:	e01d      	b.n	8104cea <HAL_GPIO_Init+0x26a>
 8104cae:	2301      	movs	r3, #1
 8104cb0:	e01b      	b.n	8104cea <HAL_GPIO_Init+0x26a>
 8104cb2:	bf00      	nop
 8104cb4:	580000c0 	.word	0x580000c0
 8104cb8:	58024400 	.word	0x58024400
 8104cbc:	58000400 	.word	0x58000400
 8104cc0:	58020000 	.word	0x58020000
 8104cc4:	58020400 	.word	0x58020400
 8104cc8:	58020800 	.word	0x58020800
 8104ccc:	58020c00 	.word	0x58020c00
 8104cd0:	58021000 	.word	0x58021000
 8104cd4:	58021400 	.word	0x58021400
 8104cd8:	58021800 	.word	0x58021800
 8104cdc:	58021c00 	.word	0x58021c00
 8104ce0:	58022000 	.word	0x58022000
 8104ce4:	58022400 	.word	0x58022400
 8104ce8:	2300      	movs	r3, #0
 8104cea:	69fa      	ldr	r2, [r7, #28]
 8104cec:	f002 0203 	and.w	r2, r2, #3
 8104cf0:	0092      	lsls	r2, r2, #2
 8104cf2:	4093      	lsls	r3, r2
 8104cf4:	69ba      	ldr	r2, [r7, #24]
 8104cf6:	4313      	orrs	r3, r2
 8104cf8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104cfa:	4938      	ldr	r1, [pc, #224]	@ (8104ddc <HAL_GPIO_Init+0x35c>)
 8104cfc:	69fb      	ldr	r3, [r7, #28]
 8104cfe:	089b      	lsrs	r3, r3, #2
 8104d00:	3302      	adds	r3, #2
 8104d02:	69ba      	ldr	r2, [r7, #24]
 8104d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8104d0c:	681b      	ldr	r3, [r3, #0]
 8104d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104d10:	693b      	ldr	r3, [r7, #16]
 8104d12:	43db      	mvns	r3, r3
 8104d14:	69ba      	ldr	r2, [r7, #24]
 8104d16:	4013      	ands	r3, r2
 8104d18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104d1a:	683b      	ldr	r3, [r7, #0]
 8104d1c:	685b      	ldr	r3, [r3, #4]
 8104d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8104d22:	2b00      	cmp	r3, #0
 8104d24:	d003      	beq.n	8104d2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8104d26:	69ba      	ldr	r2, [r7, #24]
 8104d28:	693b      	ldr	r3, [r7, #16]
 8104d2a:	4313      	orrs	r3, r2
 8104d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104d2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8104d32:	69bb      	ldr	r3, [r7, #24]
 8104d34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8104d3a:	685b      	ldr	r3, [r3, #4]
 8104d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104d3e:	693b      	ldr	r3, [r7, #16]
 8104d40:	43db      	mvns	r3, r3
 8104d42:	69ba      	ldr	r2, [r7, #24]
 8104d44:	4013      	ands	r3, r2
 8104d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104d48:	683b      	ldr	r3, [r7, #0]
 8104d4a:	685b      	ldr	r3, [r3, #4]
 8104d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8104d50:	2b00      	cmp	r3, #0
 8104d52:	d003      	beq.n	8104d5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104d54:	69ba      	ldr	r2, [r7, #24]
 8104d56:	693b      	ldr	r3, [r7, #16]
 8104d58:	4313      	orrs	r3, r2
 8104d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104d5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8104d60:	69bb      	ldr	r3, [r7, #24]
 8104d62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104d64:	697b      	ldr	r3, [r7, #20]
 8104d66:	685b      	ldr	r3, [r3, #4]
 8104d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104d6a:	693b      	ldr	r3, [r7, #16]
 8104d6c:	43db      	mvns	r3, r3
 8104d6e:	69ba      	ldr	r2, [r7, #24]
 8104d70:	4013      	ands	r3, r2
 8104d72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104d74:	683b      	ldr	r3, [r7, #0]
 8104d76:	685b      	ldr	r3, [r3, #4]
 8104d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104d7c:	2b00      	cmp	r3, #0
 8104d7e:	d003      	beq.n	8104d88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104d80:	69ba      	ldr	r2, [r7, #24]
 8104d82:	693b      	ldr	r3, [r7, #16]
 8104d84:	4313      	orrs	r3, r2
 8104d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104d88:	697b      	ldr	r3, [r7, #20]
 8104d8a:	69ba      	ldr	r2, [r7, #24]
 8104d8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104d8e:	697b      	ldr	r3, [r7, #20]
 8104d90:	681b      	ldr	r3, [r3, #0]
 8104d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104d94:	693b      	ldr	r3, [r7, #16]
 8104d96:	43db      	mvns	r3, r3
 8104d98:	69ba      	ldr	r2, [r7, #24]
 8104d9a:	4013      	ands	r3, r2
 8104d9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104d9e:	683b      	ldr	r3, [r7, #0]
 8104da0:	685b      	ldr	r3, [r3, #4]
 8104da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104da6:	2b00      	cmp	r3, #0
 8104da8:	d003      	beq.n	8104db2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8104daa:	69ba      	ldr	r2, [r7, #24]
 8104dac:	693b      	ldr	r3, [r7, #16]
 8104dae:	4313      	orrs	r3, r2
 8104db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104db2:	697b      	ldr	r3, [r7, #20]
 8104db4:	69ba      	ldr	r2, [r7, #24]
 8104db6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104db8:	69fb      	ldr	r3, [r7, #28]
 8104dba:	3301      	adds	r3, #1
 8104dbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104dbe:	683b      	ldr	r3, [r7, #0]
 8104dc0:	681a      	ldr	r2, [r3, #0]
 8104dc2:	69fb      	ldr	r3, [r7, #28]
 8104dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8104dc8:	2b00      	cmp	r3, #0
 8104dca:	f47f ae63 	bne.w	8104a94 <HAL_GPIO_Init+0x14>
  }
}
 8104dce:	bf00      	nop
 8104dd0:	bf00      	nop
 8104dd2:	3724      	adds	r7, #36	@ 0x24
 8104dd4:	46bd      	mov	sp, r7
 8104dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dda:	4770      	bx	lr
 8104ddc:	58000400 	.word	0x58000400

08104de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104de0:	b480      	push	{r7}
 8104de2:	b083      	sub	sp, #12
 8104de4:	af00      	add	r7, sp, #0
 8104de6:	6078      	str	r0, [r7, #4]
 8104de8:	460b      	mov	r3, r1
 8104dea:	807b      	strh	r3, [r7, #2]
 8104dec:	4613      	mov	r3, r2
 8104dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104df0:	787b      	ldrb	r3, [r7, #1]
 8104df2:	2b00      	cmp	r3, #0
 8104df4:	d003      	beq.n	8104dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104df6:	887a      	ldrh	r2, [r7, #2]
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104dfc:	e003      	b.n	8104e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104dfe:	887b      	ldrh	r3, [r7, #2]
 8104e00:	041a      	lsls	r2, r3, #16
 8104e02:	687b      	ldr	r3, [r7, #4]
 8104e04:	619a      	str	r2, [r3, #24]
}
 8104e06:	bf00      	nop
 8104e08:	370c      	adds	r7, #12
 8104e0a:	46bd      	mov	sp, r7
 8104e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e10:	4770      	bx	lr
	...

08104e14 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104e14:	b480      	push	{r7}
 8104e16:	b083      	sub	sp, #12
 8104e18:	af00      	add	r7, sp, #0
 8104e1a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104e1c:	4b05      	ldr	r3, [pc, #20]	@ (8104e34 <HAL_HSEM_ActivateNotification+0x20>)
 8104e1e:	681a      	ldr	r2, [r3, #0]
 8104e20:	4904      	ldr	r1, [pc, #16]	@ (8104e34 <HAL_HSEM_ActivateNotification+0x20>)
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	4313      	orrs	r3, r2
 8104e26:	600b      	str	r3, [r1, #0]
#endif
}
 8104e28:	bf00      	nop
 8104e2a:	370c      	adds	r7, #12
 8104e2c:	46bd      	mov	sp, r7
 8104e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e32:	4770      	bx	lr
 8104e34:	58026510 	.word	0x58026510

08104e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104e38:	b580      	push	{r7, lr}
 8104e3a:	b082      	sub	sp, #8
 8104e3c:	af00      	add	r7, sp, #0
 8104e3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104e40:	687b      	ldr	r3, [r7, #4]
 8104e42:	2b00      	cmp	r3, #0
 8104e44:	d101      	bne.n	8104e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104e46:	2301      	movs	r3, #1
 8104e48:	e08d      	b.n	8104f66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104e4a:	687b      	ldr	r3, [r7, #4]
 8104e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104e50:	b2db      	uxtb	r3, r3
 8104e52:	2b00      	cmp	r3, #0
 8104e54:	d106      	bne.n	8104e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	2200      	movs	r2, #0
 8104e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104e5e:	6878      	ldr	r0, [r7, #4]
 8104e60:	f7fb ffc0 	bl	8100de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104e64:	687b      	ldr	r3, [r7, #4]
 8104e66:	2224      	movs	r2, #36	@ 0x24
 8104e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104e6c:	687b      	ldr	r3, [r7, #4]
 8104e6e:	681b      	ldr	r3, [r3, #0]
 8104e70:	681a      	ldr	r2, [r3, #0]
 8104e72:	687b      	ldr	r3, [r7, #4]
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	f022 0201 	bic.w	r2, r2, #1
 8104e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	685a      	ldr	r2, [r3, #4]
 8104e80:	687b      	ldr	r3, [r7, #4]
 8104e82:	681b      	ldr	r3, [r3, #0]
 8104e84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8104e88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104e8a:	687b      	ldr	r3, [r7, #4]
 8104e8c:	681b      	ldr	r3, [r3, #0]
 8104e8e:	689a      	ldr	r2, [r3, #8]
 8104e90:	687b      	ldr	r3, [r7, #4]
 8104e92:	681b      	ldr	r3, [r3, #0]
 8104e94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8104e98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	68db      	ldr	r3, [r3, #12]
 8104e9e:	2b01      	cmp	r3, #1
 8104ea0:	d107      	bne.n	8104eb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	689a      	ldr	r2, [r3, #8]
 8104ea6:	687b      	ldr	r3, [r7, #4]
 8104ea8:	681b      	ldr	r3, [r3, #0]
 8104eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8104eae:	609a      	str	r2, [r3, #8]
 8104eb0:	e006      	b.n	8104ec0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	689a      	ldr	r2, [r3, #8]
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	681b      	ldr	r3, [r3, #0]
 8104eba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8104ebe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	68db      	ldr	r3, [r3, #12]
 8104ec4:	2b02      	cmp	r3, #2
 8104ec6:	d108      	bne.n	8104eda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	685a      	ldr	r2, [r3, #4]
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	681b      	ldr	r3, [r3, #0]
 8104ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8104ed6:	605a      	str	r2, [r3, #4]
 8104ed8:	e007      	b.n	8104eea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	681b      	ldr	r3, [r3, #0]
 8104ede:	685a      	ldr	r2, [r3, #4]
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	681b      	ldr	r3, [r3, #0]
 8104ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8104ee8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104eea:	687b      	ldr	r3, [r7, #4]
 8104eec:	681b      	ldr	r3, [r3, #0]
 8104eee:	685b      	ldr	r3, [r3, #4]
 8104ef0:	687a      	ldr	r2, [r7, #4]
 8104ef2:	6812      	ldr	r2, [r2, #0]
 8104ef4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8104ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8104efc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8104efe:	687b      	ldr	r3, [r7, #4]
 8104f00:	681b      	ldr	r3, [r3, #0]
 8104f02:	68da      	ldr	r2, [r3, #12]
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8104f0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	691a      	ldr	r2, [r3, #16]
 8104f12:	687b      	ldr	r3, [r7, #4]
 8104f14:	695b      	ldr	r3, [r3, #20]
 8104f16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8104f1a:	687b      	ldr	r3, [r7, #4]
 8104f1c:	699b      	ldr	r3, [r3, #24]
 8104f1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	430a      	orrs	r2, r1
 8104f26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	69d9      	ldr	r1, [r3, #28]
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	6a1a      	ldr	r2, [r3, #32]
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	430a      	orrs	r2, r1
 8104f36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8104f38:	687b      	ldr	r3, [r7, #4]
 8104f3a:	681b      	ldr	r3, [r3, #0]
 8104f3c:	681a      	ldr	r2, [r3, #0]
 8104f3e:	687b      	ldr	r3, [r7, #4]
 8104f40:	681b      	ldr	r3, [r3, #0]
 8104f42:	f042 0201 	orr.w	r2, r2, #1
 8104f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	2200      	movs	r2, #0
 8104f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8104f4e:	687b      	ldr	r3, [r7, #4]
 8104f50:	2220      	movs	r2, #32
 8104f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104f56:	687b      	ldr	r3, [r7, #4]
 8104f58:	2200      	movs	r2, #0
 8104f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	2200      	movs	r2, #0
 8104f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8104f64:	2300      	movs	r3, #0
}
 8104f66:	4618      	mov	r0, r3
 8104f68:	3708      	adds	r7, #8
 8104f6a:	46bd      	mov	sp, r7
 8104f6c:	bd80      	pop	{r7, pc}

08104f6e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8104f6e:	b480      	push	{r7}
 8104f70:	b083      	sub	sp, #12
 8104f72:	af00      	add	r7, sp, #0
 8104f74:	6078      	str	r0, [r7, #4]
 8104f76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104f7e:	b2db      	uxtb	r3, r3
 8104f80:	2b20      	cmp	r3, #32
 8104f82:	d138      	bne.n	8104ff6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8104f8a:	2b01      	cmp	r3, #1
 8104f8c:	d101      	bne.n	8104f92 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104f8e:	2302      	movs	r3, #2
 8104f90:	e032      	b.n	8104ff8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104f92:	687b      	ldr	r3, [r7, #4]
 8104f94:	2201      	movs	r2, #1
 8104f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104f9a:	687b      	ldr	r3, [r7, #4]
 8104f9c:	2224      	movs	r2, #36	@ 0x24
 8104f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104fa2:	687b      	ldr	r3, [r7, #4]
 8104fa4:	681b      	ldr	r3, [r3, #0]
 8104fa6:	681a      	ldr	r2, [r3, #0]
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	681b      	ldr	r3, [r3, #0]
 8104fac:	f022 0201 	bic.w	r2, r2, #1
 8104fb0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	681b      	ldr	r3, [r3, #0]
 8104fb6:	681a      	ldr	r2, [r3, #0]
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	681b      	ldr	r3, [r3, #0]
 8104fbc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8104fc0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8104fc2:	687b      	ldr	r3, [r7, #4]
 8104fc4:	681b      	ldr	r3, [r3, #0]
 8104fc6:	6819      	ldr	r1, [r3, #0]
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	681b      	ldr	r3, [r3, #0]
 8104fcc:	683a      	ldr	r2, [r7, #0]
 8104fce:	430a      	orrs	r2, r1
 8104fd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104fd2:	687b      	ldr	r3, [r7, #4]
 8104fd4:	681b      	ldr	r3, [r3, #0]
 8104fd6:	681a      	ldr	r2, [r3, #0]
 8104fd8:	687b      	ldr	r3, [r7, #4]
 8104fda:	681b      	ldr	r3, [r3, #0]
 8104fdc:	f042 0201 	orr.w	r2, r2, #1
 8104fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104fe2:	687b      	ldr	r3, [r7, #4]
 8104fe4:	2220      	movs	r2, #32
 8104fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	2200      	movs	r2, #0
 8104fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8104ff2:	2300      	movs	r3, #0
 8104ff4:	e000      	b.n	8104ff8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8104ff6:	2302      	movs	r3, #2
  }
}
 8104ff8:	4618      	mov	r0, r3
 8104ffa:	370c      	adds	r7, #12
 8104ffc:	46bd      	mov	sp, r7
 8104ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105002:	4770      	bx	lr

08105004 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8105004:	b480      	push	{r7}
 8105006:	b085      	sub	sp, #20
 8105008:	af00      	add	r7, sp, #0
 810500a:	6078      	str	r0, [r7, #4]
 810500c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810500e:	687b      	ldr	r3, [r7, #4]
 8105010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105014:	b2db      	uxtb	r3, r3
 8105016:	2b20      	cmp	r3, #32
 8105018:	d139      	bne.n	810508e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105020:	2b01      	cmp	r3, #1
 8105022:	d101      	bne.n	8105028 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8105024:	2302      	movs	r3, #2
 8105026:	e033      	b.n	8105090 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105028:	687b      	ldr	r3, [r7, #4]
 810502a:	2201      	movs	r2, #1
 810502c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	2224      	movs	r2, #36	@ 0x24
 8105034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	681a      	ldr	r2, [r3, #0]
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	681b      	ldr	r3, [r3, #0]
 8105042:	f022 0201 	bic.w	r2, r2, #1
 8105046:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	681b      	ldr	r3, [r3, #0]
 810504c:	681b      	ldr	r3, [r3, #0]
 810504e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8105050:	68fb      	ldr	r3, [r7, #12]
 8105052:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8105056:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8105058:	683b      	ldr	r3, [r7, #0]
 810505a:	021b      	lsls	r3, r3, #8
 810505c:	68fa      	ldr	r2, [r7, #12]
 810505e:	4313      	orrs	r3, r2
 8105060:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105062:	687b      	ldr	r3, [r7, #4]
 8105064:	681b      	ldr	r3, [r3, #0]
 8105066:	68fa      	ldr	r2, [r7, #12]
 8105068:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810506a:	687b      	ldr	r3, [r7, #4]
 810506c:	681b      	ldr	r3, [r3, #0]
 810506e:	681a      	ldr	r2, [r3, #0]
 8105070:	687b      	ldr	r3, [r7, #4]
 8105072:	681b      	ldr	r3, [r3, #0]
 8105074:	f042 0201 	orr.w	r2, r2, #1
 8105078:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810507a:	687b      	ldr	r3, [r7, #4]
 810507c:	2220      	movs	r2, #32
 810507e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105082:	687b      	ldr	r3, [r7, #4]
 8105084:	2200      	movs	r2, #0
 8105086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810508a:	2300      	movs	r3, #0
 810508c:	e000      	b.n	8105090 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810508e:	2302      	movs	r3, #2
  }
}
 8105090:	4618      	mov	r0, r3
 8105092:	3714      	adds	r7, #20
 8105094:	46bd      	mov	sp, r7
 8105096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810509a:	4770      	bx	lr

0810509c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 810509c:	b580      	push	{r7, lr}
 810509e:	b088      	sub	sp, #32
 81050a0:	af00      	add	r7, sp, #0
 81050a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 81050a4:	687b      	ldr	r3, [r7, #4]
 81050a6:	2b00      	cmp	r3, #0
 81050a8:	d101      	bne.n	81050ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 81050aa:	2301      	movs	r3, #1
 81050ac:	e10f      	b.n	81052ce <HAL_I2S_Init+0x232>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 81050ae:	687b      	ldr	r3, [r7, #4]
 81050b0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 81050b4:	b2db      	uxtb	r3, r3
 81050b6:	2b00      	cmp	r3, #0
 81050b8:	d106      	bne.n	81050c8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	2200      	movs	r2, #0
 81050be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 81050c2:	6878      	ldr	r0, [r7, #4]
 81050c4:	f7fb ff5a 	bl	8100f7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	2202      	movs	r2, #2
 81050cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	681b      	ldr	r3, [r3, #0]
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	f003 0301 	and.w	r3, r3, #1
 81050da:	2b01      	cmp	r3, #1
 81050dc:	d107      	bne.n	81050ee <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 81050de:	687b      	ldr	r3, [r7, #4]
 81050e0:	681b      	ldr	r3, [r3, #0]
 81050e2:	681a      	ldr	r2, [r3, #0]
 81050e4:	687b      	ldr	r3, [r7, #4]
 81050e6:	681b      	ldr	r3, [r3, #0]
 81050e8:	f022 0201 	bic.w	r2, r2, #1
 81050ec:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	681b      	ldr	r3, [r3, #0]
 81050f2:	2200      	movs	r2, #0
 81050f4:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	685b      	ldr	r3, [r3, #4]
 81050fa:	2b04      	cmp	r3, #4
 81050fc:	d008      	beq.n	8105110 <HAL_I2S_Init+0x74>
 81050fe:	687b      	ldr	r3, [r7, #4]
 8105100:	685b      	ldr	r3, [r3, #4]
 8105102:	2b06      	cmp	r3, #6
 8105104:	d004      	beq.n	8105110 <HAL_I2S_Init+0x74>
 8105106:	687b      	ldr	r3, [r7, #4]
 8105108:	685b      	ldr	r3, [r3, #4]
 810510a:	2b0a      	cmp	r3, #10
 810510c:	f040 8089 	bne.w	8105222 <HAL_I2S_Init+0x186>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8105110:	687b      	ldr	r3, [r7, #4]
 8105112:	695b      	ldr	r3, [r3, #20]
 8105114:	2b02      	cmp	r3, #2
 8105116:	d05a      	beq.n	81051ce <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8105118:	687b      	ldr	r3, [r7, #4]
 810511a:	68db      	ldr	r3, [r3, #12]
 810511c:	2b00      	cmp	r3, #0
 810511e:	d002      	beq.n	8105126 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8105120:	2302      	movs	r3, #2
 8105122:	617b      	str	r3, [r7, #20]
 8105124:	e001      	b.n	810512a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8105126:	2301      	movs	r3, #1
 8105128:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	689b      	ldr	r3, [r3, #8]
 810512e:	2b30      	cmp	r3, #48	@ 0x30
 8105130:	d003      	beq.n	810513a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8105136:	2bb0      	cmp	r3, #176	@ 0xb0
 8105138:	d102      	bne.n	8105140 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 810513a:	2301      	movs	r3, #1
 810513c:	60fb      	str	r3, [r7, #12]
 810513e:	e001      	b.n	8105144 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8105140:	2300      	movs	r3, #0
 8105142:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8105144:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8105148:	f04f 0100 	mov.w	r1, #0
 810514c:	f001 fe36 	bl	8106dbc <HAL_RCCEx_GetPeriphCLKFreq>
 8105150:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8105152:	687b      	ldr	r3, [r7, #4]
 8105154:	691b      	ldr	r3, [r3, #16]
 8105156:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810515a:	d113      	bne.n	8105184 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 810515c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8105160:	68fb      	ldr	r3, [r7, #12]
 8105162:	fa22 f303 	lsr.w	r3, r2, r3
 8105166:	68ba      	ldr	r2, [r7, #8]
 8105168:	fbb2 f2f3 	udiv	r2, r2, r3
 810516c:	4613      	mov	r3, r2
 810516e:	009b      	lsls	r3, r3, #2
 8105170:	4413      	add	r3, r2
 8105172:	005b      	lsls	r3, r3, #1
 8105174:	461a      	mov	r2, r3
 8105176:	687b      	ldr	r3, [r7, #4]
 8105178:	695b      	ldr	r3, [r3, #20]
 810517a:	fbb2 f3f3 	udiv	r3, r2, r3
 810517e:	3305      	adds	r3, #5
 8105180:	613b      	str	r3, [r7, #16]
 8105182:	e014      	b.n	81051ae <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8105184:	2220      	movs	r2, #32
 8105186:	68fb      	ldr	r3, [r7, #12]
 8105188:	fa22 f303 	lsr.w	r3, r2, r3
 810518c:	697a      	ldr	r2, [r7, #20]
 810518e:	fb02 f303 	mul.w	r3, r2, r3
 8105192:	68ba      	ldr	r2, [r7, #8]
 8105194:	fbb2 f2f3 	udiv	r2, r2, r3
 8105198:	4613      	mov	r3, r2
 810519a:	009b      	lsls	r3, r3, #2
 810519c:	4413      	add	r3, r2
 810519e:	005b      	lsls	r3, r3, #1
 81051a0:	461a      	mov	r2, r3
 81051a2:	687b      	ldr	r3, [r7, #4]
 81051a4:	695b      	ldr	r3, [r3, #20]
 81051a6:	fbb2 f3f3 	udiv	r3, r2, r3
 81051aa:	3305      	adds	r3, #5
 81051ac:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 81051ae:	693b      	ldr	r3, [r7, #16]
 81051b0:	4a49      	ldr	r2, [pc, #292]	@ (81052d8 <HAL_I2S_Init+0x23c>)
 81051b2:	fba2 2303 	umull	r2, r3, r2, r3
 81051b6:	08db      	lsrs	r3, r3, #3
 81051b8:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 81051ba:	693b      	ldr	r3, [r7, #16]
 81051bc:	f003 0301 	and.w	r3, r3, #1
 81051c0:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 81051c2:	693a      	ldr	r2, [r7, #16]
 81051c4:	69bb      	ldr	r3, [r7, #24]
 81051c6:	1ad3      	subs	r3, r2, r3
 81051c8:	085b      	lsrs	r3, r3, #1
 81051ca:	61fb      	str	r3, [r7, #28]
 81051cc:	e003      	b.n	81051d6 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 81051ce:	2302      	movs	r3, #2
 81051d0:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 81051d2:	2300      	movs	r3, #0
 81051d4:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 81051d6:	69bb      	ldr	r3, [r7, #24]
 81051d8:	2b01      	cmp	r3, #1
 81051da:	d102      	bne.n	81051e2 <HAL_I2S_Init+0x146>
 81051dc:	69fb      	ldr	r3, [r7, #28]
 81051de:	2b01      	cmp	r3, #1
 81051e0:	d002      	beq.n	81051e8 <HAL_I2S_Init+0x14c>
 81051e2:	69fb      	ldr	r3, [r7, #28]
 81051e4:	2bff      	cmp	r3, #255	@ 0xff
 81051e6:	d907      	bls.n	81051f8 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 81051e8:	687b      	ldr	r3, [r7, #4]
 81051ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81051ec:	f043 0210 	orr.w	r2, r3, #16
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 81051f4:	2301      	movs	r3, #1
 81051f6:	e06a      	b.n	81052ce <HAL_I2S_Init+0x232>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 81051f8:	69fb      	ldr	r3, [r7, #28]
 81051fa:	2b00      	cmp	r3, #0
 81051fc:	d101      	bne.n	8105202 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 81051fe:	2301      	movs	r3, #1
 8105200:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8105202:	687b      	ldr	r3, [r7, #4]
 8105204:	681b      	ldr	r3, [r3, #0]
 8105206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105208:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 810520c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8105210:	69fa      	ldr	r2, [r7, #28]
 8105212:	0411      	lsls	r1, r2, #16
 8105214:	69ba      	ldr	r2, [r7, #24]
 8105216:	0612      	lsls	r2, r2, #24
 8105218:	4311      	orrs	r1, r2
 810521a:	687a      	ldr	r2, [r7, #4]
 810521c:	6812      	ldr	r2, [r2, #0]
 810521e:	430b      	orrs	r3, r1
 8105220:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	681b      	ldr	r3, [r3, #0]
 8105226:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8105228:	4b2c      	ldr	r3, [pc, #176]	@ (81052dc <HAL_I2S_Init+0x240>)
 810522a:	4013      	ands	r3, r2
 810522c:	687a      	ldr	r2, [r7, #4]
 810522e:	6851      	ldr	r1, [r2, #4]
 8105230:	687a      	ldr	r2, [r7, #4]
 8105232:	6892      	ldr	r2, [r2, #8]
 8105234:	4311      	orrs	r1, r2
 8105236:	687a      	ldr	r2, [r7, #4]
 8105238:	68d2      	ldr	r2, [r2, #12]
 810523a:	4311      	orrs	r1, r2
 810523c:	687a      	ldr	r2, [r7, #4]
 810523e:	6992      	ldr	r2, [r2, #24]
 8105240:	4311      	orrs	r1, r2
 8105242:	687a      	ldr	r2, [r7, #4]
 8105244:	6a12      	ldr	r2, [r2, #32]
 8105246:	4311      	orrs	r1, r2
 8105248:	687a      	ldr	r2, [r7, #4]
 810524a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 810524c:	4311      	orrs	r1, r2
 810524e:	687a      	ldr	r2, [r7, #4]
 8105250:	6912      	ldr	r2, [r2, #16]
 8105252:	430a      	orrs	r2, r1
 8105254:	431a      	orrs	r2, r3
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	681b      	ldr	r3, [r3, #0]
 810525a:	f042 0201 	orr.w	r2, r2, #1
 810525e:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	681b      	ldr	r3, [r3, #0]
 8105264:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8105268:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	681b      	ldr	r3, [r3, #0]
 810526e:	681a      	ldr	r2, [r3, #0]
 8105270:	687b      	ldr	r3, [r7, #4]
 8105272:	681b      	ldr	r3, [r3, #0]
 8105274:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8105278:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 810527a:	687b      	ldr	r3, [r7, #4]
 810527c:	681b      	ldr	r3, [r3, #0]
 810527e:	68db      	ldr	r3, [r3, #12]
 8105280:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	69da      	ldr	r2, [r3, #28]
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	681b      	ldr	r3, [r3, #0]
 810528c:	430a      	orrs	r2, r1
 810528e:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	685b      	ldr	r3, [r3, #4]
 8105294:	2b04      	cmp	r3, #4
 8105296:	d007      	beq.n	81052a8 <HAL_I2S_Init+0x20c>
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	685b      	ldr	r3, [r3, #4]
 810529c:	2b06      	cmp	r3, #6
 810529e:	d003      	beq.n	81052a8 <HAL_I2S_Init+0x20c>
 81052a0:	687b      	ldr	r3, [r7, #4]
 81052a2:	685b      	ldr	r3, [r3, #4]
 81052a4:	2b0a      	cmp	r3, #10
 81052a6:	d10a      	bne.n	81052be <HAL_I2S_Init+0x222>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 81052a8:	687b      	ldr	r3, [r7, #4]
 81052aa:	681b      	ldr	r3, [r3, #0]
 81052ac:	68db      	ldr	r3, [r3, #12]
 81052ae:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81052b2:	687b      	ldr	r3, [r7, #4]
 81052b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	430a      	orrs	r2, r1
 81052bc:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 81052be:	687b      	ldr	r3, [r7, #4]
 81052c0:	2200      	movs	r2, #0
 81052c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	2201      	movs	r2, #1
 81052c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 81052cc:	2300      	movs	r3, #0
}
 81052ce:	4618      	mov	r0, r3
 81052d0:	3720      	adds	r7, #32
 81052d2:	46bd      	mov	sp, r7
 81052d4:	bd80      	pop	{r7, pc}
 81052d6:	bf00      	nop
 81052d8:	cccccccd 	.word	0xcccccccd
 81052dc:	fdff9040 	.word	0xfdff9040

081052e0 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 81052e0:	b580      	push	{r7, lr}
 81052e2:	b086      	sub	sp, #24
 81052e4:	af00      	add	r7, sp, #0
 81052e6:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 81052e8:	687b      	ldr	r3, [r7, #4]
 81052ea:	681b      	ldr	r3, [r3, #0]
 81052ec:	691b      	ldr	r3, [r3, #16]
 81052ee:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	681b      	ldr	r3, [r3, #0]
 81052f4:	695b      	ldr	r3, [r3, #20]
 81052f6:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 81052f8:	697a      	ldr	r2, [r7, #20]
 81052fa:	693b      	ldr	r3, [r7, #16]
 81052fc:	4013      	ands	r3, r2
 81052fe:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8105306:	b2db      	uxtb	r3, r3
 8105308:	2b04      	cmp	r3, #4
 810530a:	d131      	bne.n	8105370 <HAL_I2S_IRQHandler+0x90>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 810530c:	68fb      	ldr	r3, [r7, #12]
 810530e:	f003 0301 	and.w	r3, r3, #1
 8105312:	2b00      	cmp	r3, #0
 8105314:	d008      	beq.n	8105328 <HAL_I2S_IRQHandler+0x48>
 8105316:	68fb      	ldr	r3, [r7, #12]
 8105318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810531c:	2b00      	cmp	r3, #0
 810531e:	d103      	bne.n	8105328 <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 8105320:	687b      	ldr	r3, [r7, #4]
 8105322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105324:	6878      	ldr	r0, [r7, #4]
 8105326:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8105328:	68fb      	ldr	r3, [r7, #12]
 810532a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810532e:	2b00      	cmp	r3, #0
 8105330:	d01e      	beq.n	8105370 <HAL_I2S_IRQHandler+0x90>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	691b      	ldr	r3, [r3, #16]
 8105338:	687a      	ldr	r2, [r7, #4]
 810533a:	6812      	ldr	r2, [r2, #0]
 810533c:	f423 73b0 	bic.w	r3, r3, #352	@ 0x160
 8105340:	f023 0301 	bic.w	r3, r3, #1
 8105344:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	681b      	ldr	r3, [r3, #0]
 810534a:	699a      	ldr	r2, [r3, #24]
 810534c:	687b      	ldr	r3, [r7, #4]
 810534e:	681b      	ldr	r3, [r3, #0]
 8105350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8105354:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	2201      	movs	r2, #1
 810535a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105362:	f043 0202 	orr.w	r2, r3, #2
 8105366:	687b      	ldr	r3, [r7, #4]
 8105368:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 810536a:	6878      	ldr	r0, [r7, #4]
 810536c:	f000 f8b1 	bl	81054d2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8105370:	687b      	ldr	r3, [r7, #4]
 8105372:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8105376:	b2db      	uxtb	r3, r3
 8105378:	2b03      	cmp	r3, #3
 810537a:	d12f      	bne.n	81053dc <HAL_I2S_IRQHandler+0xfc>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 810537c:	68fb      	ldr	r3, [r7, #12]
 810537e:	f003 0302 	and.w	r3, r3, #2
 8105382:	2b00      	cmp	r3, #0
 8105384:	d008      	beq.n	8105398 <HAL_I2S_IRQHandler+0xb8>
 8105386:	68fb      	ldr	r3, [r7, #12]
 8105388:	f003 0320 	and.w	r3, r3, #32
 810538c:	2b00      	cmp	r3, #0
 810538e:	d103      	bne.n	8105398 <HAL_I2S_IRQHandler+0xb8>
    {
      hi2s->TxISR(hi2s);
 8105390:	687b      	ldr	r3, [r7, #4]
 8105392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105394:	6878      	ldr	r0, [r7, #4]
 8105396:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8105398:	68fb      	ldr	r3, [r7, #12]
 810539a:	f003 0320 	and.w	r3, r3, #32
 810539e:	2b00      	cmp	r3, #0
 81053a0:	d01c      	beq.n	81053dc <HAL_I2S_IRQHandler+0xfc>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 81053a2:	687b      	ldr	r3, [r7, #4]
 81053a4:	681b      	ldr	r3, [r3, #0]
 81053a6:	691a      	ldr	r2, [r3, #16]
 81053a8:	687b      	ldr	r3, [r7, #4]
 81053aa:	681b      	ldr	r3, [r3, #0]
 81053ac:	f422 72b1 	bic.w	r2, r2, #354	@ 0x162
 81053b0:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 81053b2:	687b      	ldr	r3, [r7, #4]
 81053b4:	681b      	ldr	r3, [r3, #0]
 81053b6:	699a      	ldr	r2, [r3, #24]
 81053b8:	687b      	ldr	r3, [r7, #4]
 81053ba:	681b      	ldr	r3, [r3, #0]
 81053bc:	f042 0220 	orr.w	r2, r2, #32
 81053c0:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	2201      	movs	r2, #1
 81053c6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81053ce:	f043 0204 	orr.w	r2, r3, #4
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 81053d6:	6878      	ldr	r0, [r7, #4]
 81053d8:	f000 f87b 	bl	81054d2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 81053dc:	687b      	ldr	r3, [r7, #4]
 81053de:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 81053e2:	b2db      	uxtb	r3, r3
 81053e4:	2b05      	cmp	r3, #5
 81053e6:	d170      	bne.n	81054ca <HAL_I2S_IRQHandler+0x1ea>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 81053e8:	68fb      	ldr	r3, [r7, #12]
 81053ea:	f003 0304 	and.w	r3, r3, #4
 81053ee:	2b00      	cmp	r3, #0
 81053f0:	d007      	beq.n	8105402 <HAL_I2S_IRQHandler+0x122>
    {
      hi2s->TxISR(hi2s);
 81053f2:	687b      	ldr	r3, [r7, #4]
 81053f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81053f6:	6878      	ldr	r0, [r7, #4]
 81053f8:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 81053fa:	687b      	ldr	r3, [r7, #4]
 81053fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81053fe:	6878      	ldr	r0, [r7, #4]
 8105400:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8105402:	68fb      	ldr	r3, [r7, #12]
 8105404:	f003 0301 	and.w	r3, r3, #1
 8105408:	2b00      	cmp	r3, #0
 810540a:	d008      	beq.n	810541e <HAL_I2S_IRQHandler+0x13e>
 810540c:	68fb      	ldr	r3, [r7, #12]
 810540e:	f003 0304 	and.w	r3, r3, #4
 8105412:	2b00      	cmp	r3, #0
 8105414:	d103      	bne.n	810541e <HAL_I2S_IRQHandler+0x13e>
    {
      hi2s->RxISR(hi2s);
 8105416:	687b      	ldr	r3, [r7, #4]
 8105418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810541a:	6878      	ldr	r0, [r7, #4]
 810541c:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 810541e:	68fb      	ldr	r3, [r7, #12]
 8105420:	f003 0302 	and.w	r3, r3, #2
 8105424:	2b00      	cmp	r3, #0
 8105426:	d008      	beq.n	810543a <HAL_I2S_IRQHandler+0x15a>
 8105428:	68fb      	ldr	r3, [r7, #12]
 810542a:	f003 0304 	and.w	r3, r3, #4
 810542e:	2b00      	cmp	r3, #0
 8105430:	d103      	bne.n	810543a <HAL_I2S_IRQHandler+0x15a>
    {
      hi2s->TxISR(hi2s);
 8105432:	687b      	ldr	r3, [r7, #4]
 8105434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105436:	6878      	ldr	r0, [r7, #4]
 8105438:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 810543a:	68fb      	ldr	r3, [r7, #12]
 810543c:	f003 0320 	and.w	r3, r3, #32
 8105440:	2b00      	cmp	r3, #0
 8105442:	d01e      	beq.n	8105482 <HAL_I2S_IRQHandler+0x1a2>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	681b      	ldr	r3, [r3, #0]
 8105448:	691b      	ldr	r3, [r3, #16]
 810544a:	687a      	ldr	r2, [r7, #4]
 810544c:	6812      	ldr	r2, [r2, #0]
 810544e:	f423 73b1 	bic.w	r3, r3, #354	@ 0x162
 8105452:	f023 0301 	bic.w	r3, r3, #1
 8105456:	6113      	str	r3, [r2, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	681b      	ldr	r3, [r3, #0]
 810545c:	699a      	ldr	r2, [r3, #24]
 810545e:	687b      	ldr	r3, [r7, #4]
 8105460:	681b      	ldr	r3, [r3, #0]
 8105462:	f042 0220 	orr.w	r2, r2, #32
 8105466:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	2201      	movs	r2, #1
 810546c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8105470:	687b      	ldr	r3, [r7, #4]
 8105472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105474:	f043 0204 	orr.w	r2, r3, #4
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 810547c:	6878      	ldr	r0, [r7, #4]
 810547e:	f000 f828 	bl	81054d2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8105482:	68fb      	ldr	r3, [r7, #12]
 8105484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105488:	2b00      	cmp	r3, #0
 810548a:	d01e      	beq.n	81054ca <HAL_I2S_IRQHandler+0x1ea>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	681b      	ldr	r3, [r3, #0]
 8105490:	691b      	ldr	r3, [r3, #16]
 8105492:	687a      	ldr	r2, [r7, #4]
 8105494:	6812      	ldr	r2, [r2, #0]
 8105496:	f423 73b1 	bic.w	r3, r3, #354	@ 0x162
 810549a:	f023 0301 	bic.w	r3, r3, #1
 810549e:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	699a      	ldr	r2, [r3, #24]
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	681b      	ldr	r3, [r3, #0]
 81054aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 81054ae:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	2201      	movs	r2, #1
 81054b4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 81054b8:	687b      	ldr	r3, [r7, #4]
 81054ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81054bc:	f043 0202 	orr.w	r2, r3, #2
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 81054c4:	6878      	ldr	r0, [r7, #4]
 81054c6:	f000 f804 	bl	81054d2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 81054ca:	bf00      	nop
 81054cc:	3718      	adds	r7, #24
 81054ce:	46bd      	mov	sp, r7
 81054d0:	bd80      	pop	{r7, pc}

081054d2 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 81054d2:	b480      	push	{r7}
 81054d4:	b083      	sub	sp, #12
 81054d6:	af00      	add	r7, sp, #0
 81054d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 81054da:	bf00      	nop
 81054dc:	370c      	adds	r7, #12
 81054de:	46bd      	mov	sp, r7
 81054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054e4:	4770      	bx	lr
	...

081054e8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81054e8:	b580      	push	{r7, lr}
 81054ea:	b084      	sub	sp, #16
 81054ec:	af00      	add	r7, sp, #0
 81054ee:	60f8      	str	r0, [r7, #12]
 81054f0:	460b      	mov	r3, r1
 81054f2:	607a      	str	r2, [r7, #4]
 81054f4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81054f6:	4b37      	ldr	r3, [pc, #220]	@ (81055d4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81054f8:	681b      	ldr	r3, [r3, #0]
 81054fa:	f023 0201 	bic.w	r2, r3, #1
 81054fe:	4935      	ldr	r1, [pc, #212]	@ (81055d4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105500:	68fb      	ldr	r3, [r7, #12]
 8105502:	4313      	orrs	r3, r2
 8105504:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	2b00      	cmp	r3, #0
 810550a:	d123      	bne.n	8105554 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810550c:	f7fd fb9e 	bl	8102c4c <HAL_GetCurrentCPUID>
 8105510:	4603      	mov	r3, r0
 8105512:	2b03      	cmp	r3, #3
 8105514:	d158      	bne.n	81055c8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105516:	4b2f      	ldr	r3, [pc, #188]	@ (81055d4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105518:	691b      	ldr	r3, [r3, #16]
 810551a:	4a2e      	ldr	r2, [pc, #184]	@ (81055d4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810551c:	f023 0301 	bic.w	r3, r3, #1
 8105520:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105522:	4b2d      	ldr	r3, [pc, #180]	@ (81055d8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105524:	691b      	ldr	r3, [r3, #16]
 8105526:	4a2c      	ldr	r2, [pc, #176]	@ (81055d8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105528:	f043 0304 	orr.w	r3, r3, #4
 810552c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810552e:	f3bf 8f4f 	dsb	sy
}
 8105532:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105534:	f3bf 8f6f 	isb	sy
}
 8105538:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810553a:	7afb      	ldrb	r3, [r7, #11]
 810553c:	2b01      	cmp	r3, #1
 810553e:	d101      	bne.n	8105544 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105540:	bf30      	wfi
 8105542:	e000      	b.n	8105546 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105544:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105546:	4b24      	ldr	r3, [pc, #144]	@ (81055d8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105548:	691b      	ldr	r3, [r3, #16]
 810554a:	4a23      	ldr	r2, [pc, #140]	@ (81055d8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810554c:	f023 0304 	bic.w	r3, r3, #4
 8105550:	6113      	str	r3, [r2, #16]
 8105552:	e03c      	b.n	81055ce <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	2b01      	cmp	r3, #1
 8105558:	d123      	bne.n	81055a2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810555a:	f7fd fb77 	bl	8102c4c <HAL_GetCurrentCPUID>
 810555e:	4603      	mov	r3, r0
 8105560:	2b01      	cmp	r3, #1
 8105562:	d133      	bne.n	81055cc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105564:	4b1b      	ldr	r3, [pc, #108]	@ (81055d4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105566:	695b      	ldr	r3, [r3, #20]
 8105568:	4a1a      	ldr	r2, [pc, #104]	@ (81055d4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810556a:	f023 0302 	bic.w	r3, r3, #2
 810556e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105570:	4b19      	ldr	r3, [pc, #100]	@ (81055d8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105572:	691b      	ldr	r3, [r3, #16]
 8105574:	4a18      	ldr	r2, [pc, #96]	@ (81055d8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105576:	f043 0304 	orr.w	r3, r3, #4
 810557a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810557c:	f3bf 8f4f 	dsb	sy
}
 8105580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105582:	f3bf 8f6f 	isb	sy
}
 8105586:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105588:	7afb      	ldrb	r3, [r7, #11]
 810558a:	2b01      	cmp	r3, #1
 810558c:	d101      	bne.n	8105592 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810558e:	bf30      	wfi
 8105590:	e000      	b.n	8105594 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105592:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105594:	4b10      	ldr	r3, [pc, #64]	@ (81055d8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105596:	691b      	ldr	r3, [r3, #16]
 8105598:	4a0f      	ldr	r2, [pc, #60]	@ (81055d8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810559a:	f023 0304 	bic.w	r3, r3, #4
 810559e:	6113      	str	r3, [r2, #16]
 81055a0:	e015      	b.n	81055ce <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81055a2:	f7fd fb53 	bl	8102c4c <HAL_GetCurrentCPUID>
 81055a6:	4603      	mov	r3, r0
 81055a8:	2b03      	cmp	r3, #3
 81055aa:	d106      	bne.n	81055ba <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81055ac:	4b09      	ldr	r3, [pc, #36]	@ (81055d4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055ae:	691b      	ldr	r3, [r3, #16]
 81055b0:	4a08      	ldr	r2, [pc, #32]	@ (81055d4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055b2:	f023 0304 	bic.w	r3, r3, #4
 81055b6:	6113      	str	r3, [r2, #16]
 81055b8:	e009      	b.n	81055ce <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81055ba:	4b06      	ldr	r3, [pc, #24]	@ (81055d4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055bc:	695b      	ldr	r3, [r3, #20]
 81055be:	4a05      	ldr	r2, [pc, #20]	@ (81055d4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055c0:	f023 0304 	bic.w	r3, r3, #4
 81055c4:	6153      	str	r3, [r2, #20]
 81055c6:	e002      	b.n	81055ce <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81055c8:	bf00      	nop
 81055ca:	e000      	b.n	81055ce <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81055cc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81055ce:	3710      	adds	r7, #16
 81055d0:	46bd      	mov	sp, r7
 81055d2:	bd80      	pop	{r7, pc}
 81055d4:	58024800 	.word	0x58024800
 81055d8:	e000ed00 	.word	0xe000ed00

081055dc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81055dc:	b580      	push	{r7, lr}
 81055de:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81055e0:	f7fd fb34 	bl	8102c4c <HAL_GetCurrentCPUID>
 81055e4:	4603      	mov	r3, r0
 81055e6:	2b03      	cmp	r3, #3
 81055e8:	d101      	bne.n	81055ee <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81055ea:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81055ec:	e001      	b.n	81055f2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81055ee:	bf40      	sev
    __WFE ();
 81055f0:	bf20      	wfe
}
 81055f2:	bf00      	nop
 81055f4:	bd80      	pop	{r7, pc}
	...

081055f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81055f8:	b480      	push	{r7}
 81055fa:	b089      	sub	sp, #36	@ 0x24
 81055fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81055fe:	4bb3      	ldr	r3, [pc, #716]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105600:	691b      	ldr	r3, [r3, #16]
 8105602:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8105606:	2b18      	cmp	r3, #24
 8105608:	f200 8155 	bhi.w	81058b6 <HAL_RCC_GetSysClockFreq+0x2be>
 810560c:	a201      	add	r2, pc, #4	@ (adr r2, 8105614 <HAL_RCC_GetSysClockFreq+0x1c>)
 810560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105612:	bf00      	nop
 8105614:	08105679 	.word	0x08105679
 8105618:	081058b7 	.word	0x081058b7
 810561c:	081058b7 	.word	0x081058b7
 8105620:	081058b7 	.word	0x081058b7
 8105624:	081058b7 	.word	0x081058b7
 8105628:	081058b7 	.word	0x081058b7
 810562c:	081058b7 	.word	0x081058b7
 8105630:	081058b7 	.word	0x081058b7
 8105634:	0810569f 	.word	0x0810569f
 8105638:	081058b7 	.word	0x081058b7
 810563c:	081058b7 	.word	0x081058b7
 8105640:	081058b7 	.word	0x081058b7
 8105644:	081058b7 	.word	0x081058b7
 8105648:	081058b7 	.word	0x081058b7
 810564c:	081058b7 	.word	0x081058b7
 8105650:	081058b7 	.word	0x081058b7
 8105654:	081056a5 	.word	0x081056a5
 8105658:	081058b7 	.word	0x081058b7
 810565c:	081058b7 	.word	0x081058b7
 8105660:	081058b7 	.word	0x081058b7
 8105664:	081058b7 	.word	0x081058b7
 8105668:	081058b7 	.word	0x081058b7
 810566c:	081058b7 	.word	0x081058b7
 8105670:	081058b7 	.word	0x081058b7
 8105674:	081056ab 	.word	0x081056ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105678:	4b94      	ldr	r3, [pc, #592]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810567a:	681b      	ldr	r3, [r3, #0]
 810567c:	f003 0320 	and.w	r3, r3, #32
 8105680:	2b00      	cmp	r3, #0
 8105682:	d009      	beq.n	8105698 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105684:	4b91      	ldr	r3, [pc, #580]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105686:	681b      	ldr	r3, [r3, #0]
 8105688:	08db      	lsrs	r3, r3, #3
 810568a:	f003 0303 	and.w	r3, r3, #3
 810568e:	4a90      	ldr	r2, [pc, #576]	@ (81058d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105690:	fa22 f303 	lsr.w	r3, r2, r3
 8105694:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8105696:	e111      	b.n	81058bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105698:	4b8d      	ldr	r3, [pc, #564]	@ (81058d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810569a:	61bb      	str	r3, [r7, #24]
      break;
 810569c:	e10e      	b.n	81058bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810569e:	4b8d      	ldr	r3, [pc, #564]	@ (81058d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81056a0:	61bb      	str	r3, [r7, #24]
      break;
 81056a2:	e10b      	b.n	81058bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81056a4:	4b8c      	ldr	r3, [pc, #560]	@ (81058d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81056a6:	61bb      	str	r3, [r7, #24]
      break;
 81056a8:	e108      	b.n	81058bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81056aa:	4b88      	ldr	r3, [pc, #544]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81056ae:	f003 0303 	and.w	r3, r3, #3
 81056b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81056b4:	4b85      	ldr	r3, [pc, #532]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81056b8:	091b      	lsrs	r3, r3, #4
 81056ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81056be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81056c0:	4b82      	ldr	r3, [pc, #520]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81056c4:	f003 0301 	and.w	r3, r3, #1
 81056c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81056ca:	4b80      	ldr	r3, [pc, #512]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81056ce:	08db      	lsrs	r3, r3, #3
 81056d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81056d4:	68fa      	ldr	r2, [r7, #12]
 81056d6:	fb02 f303 	mul.w	r3, r2, r3
 81056da:	ee07 3a90 	vmov	s15, r3
 81056de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81056e6:	693b      	ldr	r3, [r7, #16]
 81056e8:	2b00      	cmp	r3, #0
 81056ea:	f000 80e1 	beq.w	81058b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 81056ee:	697b      	ldr	r3, [r7, #20]
 81056f0:	2b02      	cmp	r3, #2
 81056f2:	f000 8083 	beq.w	81057fc <HAL_RCC_GetSysClockFreq+0x204>
 81056f6:	697b      	ldr	r3, [r7, #20]
 81056f8:	2b02      	cmp	r3, #2
 81056fa:	f200 80a1 	bhi.w	8105840 <HAL_RCC_GetSysClockFreq+0x248>
 81056fe:	697b      	ldr	r3, [r7, #20]
 8105700:	2b00      	cmp	r3, #0
 8105702:	d003      	beq.n	810570c <HAL_RCC_GetSysClockFreq+0x114>
 8105704:	697b      	ldr	r3, [r7, #20]
 8105706:	2b01      	cmp	r3, #1
 8105708:	d056      	beq.n	81057b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810570a:	e099      	b.n	8105840 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810570c:	4b6f      	ldr	r3, [pc, #444]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810570e:	681b      	ldr	r3, [r3, #0]
 8105710:	f003 0320 	and.w	r3, r3, #32
 8105714:	2b00      	cmp	r3, #0
 8105716:	d02d      	beq.n	8105774 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105718:	4b6c      	ldr	r3, [pc, #432]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810571a:	681b      	ldr	r3, [r3, #0]
 810571c:	08db      	lsrs	r3, r3, #3
 810571e:	f003 0303 	and.w	r3, r3, #3
 8105722:	4a6b      	ldr	r2, [pc, #428]	@ (81058d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105724:	fa22 f303 	lsr.w	r3, r2, r3
 8105728:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810572a:	687b      	ldr	r3, [r7, #4]
 810572c:	ee07 3a90 	vmov	s15, r3
 8105730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105734:	693b      	ldr	r3, [r7, #16]
 8105736:	ee07 3a90 	vmov	s15, r3
 810573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810573e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105742:	4b62      	ldr	r3, [pc, #392]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810574a:	ee07 3a90 	vmov	s15, r3
 810574e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105752:	ed97 6a02 	vldr	s12, [r7, #8]
 8105756:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81058dc <HAL_RCC_GetSysClockFreq+0x2e4>
 810575a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810575e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810576a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810576e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8105772:	e087      	b.n	8105884 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105774:	693b      	ldr	r3, [r7, #16]
 8105776:	ee07 3a90 	vmov	s15, r3
 810577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810577e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81058e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105786:	4b51      	ldr	r3, [pc, #324]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810578e:	ee07 3a90 	vmov	s15, r3
 8105792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105796:	ed97 6a02 	vldr	s12, [r7, #8]
 810579a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81058dc <HAL_RCC_GetSysClockFreq+0x2e4>
 810579e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81057aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81057b6:	e065      	b.n	8105884 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81057b8:	693b      	ldr	r3, [r7, #16]
 81057ba:	ee07 3a90 	vmov	s15, r3
 81057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81058e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 81057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057ca:	4b40      	ldr	r3, [pc, #256]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057d2:	ee07 3a90 	vmov	s15, r3
 81057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057da:	ed97 6a02 	vldr	s12, [r7, #8]
 81057de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81058dc <HAL_RCC_GetSysClockFreq+0x2e4>
 81057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81057fa:	e043      	b.n	8105884 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81057fc:	693b      	ldr	r3, [r7, #16]
 81057fe:	ee07 3a90 	vmov	s15, r3
 8105802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105806:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81058e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 810580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810580e:	4b2f      	ldr	r3, [pc, #188]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105816:	ee07 3a90 	vmov	s15, r3
 810581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810581e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105822:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81058dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8105826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810582e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105836:	ee67 7a27 	vmul.f32	s15, s14, s15
 810583a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810583e:	e021      	b.n	8105884 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105840:	693b      	ldr	r3, [r7, #16]
 8105842:	ee07 3a90 	vmov	s15, r3
 8105846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810584a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81058e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105852:	4b1e      	ldr	r3, [pc, #120]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810585a:	ee07 3a90 	vmov	s15, r3
 810585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105862:	ed97 6a02 	vldr	s12, [r7, #8]
 8105866:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81058dc <HAL_RCC_GetSysClockFreq+0x2e4>
 810586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810587e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105882:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8105884:	4b11      	ldr	r3, [pc, #68]	@ (81058cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105888:	0a5b      	lsrs	r3, r3, #9
 810588a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810588e:	3301      	adds	r3, #1
 8105890:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8105892:	683b      	ldr	r3, [r7, #0]
 8105894:	ee07 3a90 	vmov	s15, r3
 8105898:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810589c:	edd7 6a07 	vldr	s13, [r7, #28]
 81058a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81058a8:	ee17 3a90 	vmov	r3, s15
 81058ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81058ae:	e005      	b.n	81058bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81058b0:	2300      	movs	r3, #0
 81058b2:	61bb      	str	r3, [r7, #24]
      break;
 81058b4:	e002      	b.n	81058bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81058b6:	4b07      	ldr	r3, [pc, #28]	@ (81058d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81058b8:	61bb      	str	r3, [r7, #24]
      break;
 81058ba:	bf00      	nop
  }

  return sysclockfreq;
 81058bc:	69bb      	ldr	r3, [r7, #24]
}
 81058be:	4618      	mov	r0, r3
 81058c0:	3724      	adds	r7, #36	@ 0x24
 81058c2:	46bd      	mov	sp, r7
 81058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058c8:	4770      	bx	lr
 81058ca:	bf00      	nop
 81058cc:	58024400 	.word	0x58024400
 81058d0:	03d09000 	.word	0x03d09000
 81058d4:	003d0900 	.word	0x003d0900
 81058d8:	017d7840 	.word	0x017d7840
 81058dc:	46000000 	.word	0x46000000
 81058e0:	4c742400 	.word	0x4c742400
 81058e4:	4a742400 	.word	0x4a742400
 81058e8:	4bbebc20 	.word	0x4bbebc20

081058ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81058ec:	b580      	push	{r7, lr}
 81058ee:	b082      	sub	sp, #8
 81058f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81058f2:	f7ff fe81 	bl	81055f8 <HAL_RCC_GetSysClockFreq>
 81058f6:	4602      	mov	r2, r0
 81058f8:	4b11      	ldr	r3, [pc, #68]	@ (8105940 <HAL_RCC_GetHCLKFreq+0x54>)
 81058fa:	699b      	ldr	r3, [r3, #24]
 81058fc:	0a1b      	lsrs	r3, r3, #8
 81058fe:	f003 030f 	and.w	r3, r3, #15
 8105902:	4910      	ldr	r1, [pc, #64]	@ (8105944 <HAL_RCC_GetHCLKFreq+0x58>)
 8105904:	5ccb      	ldrb	r3, [r1, r3]
 8105906:	f003 031f 	and.w	r3, r3, #31
 810590a:	fa22 f303 	lsr.w	r3, r2, r3
 810590e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105910:	4b0b      	ldr	r3, [pc, #44]	@ (8105940 <HAL_RCC_GetHCLKFreq+0x54>)
 8105912:	699b      	ldr	r3, [r3, #24]
 8105914:	f003 030f 	and.w	r3, r3, #15
 8105918:	4a0a      	ldr	r2, [pc, #40]	@ (8105944 <HAL_RCC_GetHCLKFreq+0x58>)
 810591a:	5cd3      	ldrb	r3, [r2, r3]
 810591c:	f003 031f 	and.w	r3, r3, #31
 8105920:	687a      	ldr	r2, [r7, #4]
 8105922:	fa22 f303 	lsr.w	r3, r2, r3
 8105926:	4a08      	ldr	r2, [pc, #32]	@ (8105948 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105928:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810592a:	4b07      	ldr	r3, [pc, #28]	@ (8105948 <HAL_RCC_GetHCLKFreq+0x5c>)
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	4a07      	ldr	r2, [pc, #28]	@ (810594c <HAL_RCC_GetHCLKFreq+0x60>)
 8105930:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105932:	4b05      	ldr	r3, [pc, #20]	@ (8105948 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105934:	681b      	ldr	r3, [r3, #0]
}
 8105936:	4618      	mov	r0, r3
 8105938:	3708      	adds	r7, #8
 810593a:	46bd      	mov	sp, r7
 810593c:	bd80      	pop	{r7, pc}
 810593e:	bf00      	nop
 8105940:	58024400 	.word	0x58024400
 8105944:	0810be2c 	.word	0x0810be2c
 8105948:	10000004 	.word	0x10000004
 810594c:	10000000 	.word	0x10000000

08105950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105950:	b580      	push	{r7, lr}
 8105952:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105954:	f7ff ffca 	bl	81058ec <HAL_RCC_GetHCLKFreq>
 8105958:	4602      	mov	r2, r0
 810595a:	4b06      	ldr	r3, [pc, #24]	@ (8105974 <HAL_RCC_GetPCLK1Freq+0x24>)
 810595c:	69db      	ldr	r3, [r3, #28]
 810595e:	091b      	lsrs	r3, r3, #4
 8105960:	f003 0307 	and.w	r3, r3, #7
 8105964:	4904      	ldr	r1, [pc, #16]	@ (8105978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8105966:	5ccb      	ldrb	r3, [r1, r3]
 8105968:	f003 031f 	and.w	r3, r3, #31
 810596c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105970:	4618      	mov	r0, r3
 8105972:	bd80      	pop	{r7, pc}
 8105974:	58024400 	.word	0x58024400
 8105978:	0810be2c 	.word	0x0810be2c

0810597c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810597c:	b580      	push	{r7, lr}
 810597e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105980:	f7ff ffb4 	bl	81058ec <HAL_RCC_GetHCLKFreq>
 8105984:	4602      	mov	r2, r0
 8105986:	4b06      	ldr	r3, [pc, #24]	@ (81059a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105988:	69db      	ldr	r3, [r3, #28]
 810598a:	0a1b      	lsrs	r3, r3, #8
 810598c:	f003 0307 	and.w	r3, r3, #7
 8105990:	4904      	ldr	r1, [pc, #16]	@ (81059a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105992:	5ccb      	ldrb	r3, [r1, r3]
 8105994:	f003 031f 	and.w	r3, r3, #31
 8105998:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810599c:	4618      	mov	r0, r3
 810599e:	bd80      	pop	{r7, pc}
 81059a0:	58024400 	.word	0x58024400
 81059a4:	0810be2c 	.word	0x0810be2c

081059a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81059a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81059ac:	b0ca      	sub	sp, #296	@ 0x128
 81059ae:	af00      	add	r7, sp, #0
 81059b0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81059b4:	2300      	movs	r3, #0
 81059b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81059ba:	2300      	movs	r3, #0
 81059bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81059c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81059cc:	2500      	movs	r5, #0
 81059ce:	ea54 0305 	orrs.w	r3, r4, r5
 81059d2:	d049      	beq.n	8105a68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81059da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81059de:	d02f      	beq.n	8105a40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81059e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81059e4:	d828      	bhi.n	8105a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81059e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81059ea:	d01a      	beq.n	8105a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81059ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81059f0:	d822      	bhi.n	8105a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81059f2:	2b00      	cmp	r3, #0
 81059f4:	d003      	beq.n	81059fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 81059f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81059fa:	d007      	beq.n	8105a0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 81059fc:	e01c      	b.n	8105a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81059fe:	4bb8      	ldr	r3, [pc, #736]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a02:	4ab7      	ldr	r2, [pc, #732]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105a0a:	e01a      	b.n	8105a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a10:	3308      	adds	r3, #8
 8105a12:	2102      	movs	r1, #2
 8105a14:	4618      	mov	r0, r3
 8105a16:	f002 fb61 	bl	81080dc <RCCEx_PLL2_Config>
 8105a1a:	4603      	mov	r3, r0
 8105a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105a20:	e00f      	b.n	8105a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a26:	3328      	adds	r3, #40	@ 0x28
 8105a28:	2102      	movs	r1, #2
 8105a2a:	4618      	mov	r0, r3
 8105a2c:	f002 fc08 	bl	8108240 <RCCEx_PLL3_Config>
 8105a30:	4603      	mov	r3, r0
 8105a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105a36:	e004      	b.n	8105a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105a38:	2301      	movs	r3, #1
 8105a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105a3e:	e000      	b.n	8105a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8105a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105a46:	2b00      	cmp	r3, #0
 8105a48:	d10a      	bne.n	8105a60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105a4a:	4ba5      	ldr	r3, [pc, #660]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105a4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8105a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105a58:	4aa1      	ldr	r2, [pc, #644]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105a5a:	430b      	orrs	r3, r1
 8105a5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8105a5e:	e003      	b.n	8105a68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8105a74:	f04f 0900 	mov.w	r9, #0
 8105a78:	ea58 0309 	orrs.w	r3, r8, r9
 8105a7c:	d047      	beq.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8105a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105a84:	2b04      	cmp	r3, #4
 8105a86:	d82a      	bhi.n	8105ade <HAL_RCCEx_PeriphCLKConfig+0x136>
 8105a88:	a201      	add	r2, pc, #4	@ (adr r2, 8105a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8105a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a8e:	bf00      	nop
 8105a90:	08105aa5 	.word	0x08105aa5
 8105a94:	08105ab3 	.word	0x08105ab3
 8105a98:	08105ac9 	.word	0x08105ac9
 8105a9c:	08105ae7 	.word	0x08105ae7
 8105aa0:	08105ae7 	.word	0x08105ae7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105aa4:	4b8e      	ldr	r3, [pc, #568]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105aa8:	4a8d      	ldr	r2, [pc, #564]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105ab0:	e01a      	b.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ab6:	3308      	adds	r3, #8
 8105ab8:	2100      	movs	r1, #0
 8105aba:	4618      	mov	r0, r3
 8105abc:	f002 fb0e 	bl	81080dc <RCCEx_PLL2_Config>
 8105ac0:	4603      	mov	r3, r0
 8105ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105ac6:	e00f      	b.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105acc:	3328      	adds	r3, #40	@ 0x28
 8105ace:	2100      	movs	r1, #0
 8105ad0:	4618      	mov	r0, r3
 8105ad2:	f002 fbb5 	bl	8108240 <RCCEx_PLL3_Config>
 8105ad6:	4603      	mov	r3, r0
 8105ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105adc:	e004      	b.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105ade:	2301      	movs	r3, #1
 8105ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105ae4:	e000      	b.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8105ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105aec:	2b00      	cmp	r3, #0
 8105aee:	d10a      	bne.n	8105b06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105af0:	4b7b      	ldr	r3, [pc, #492]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105af4:	f023 0107 	bic.w	r1, r3, #7
 8105af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105afe:	4a78      	ldr	r2, [pc, #480]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b00:	430b      	orrs	r3, r1
 8105b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8105b04:	e003      	b.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b16:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8105b1a:	f04f 0b00 	mov.w	fp, #0
 8105b1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8105b22:	d04c      	beq.n	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8105b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105b2e:	d030      	beq.n	8105b92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8105b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105b34:	d829      	bhi.n	8105b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8105b38:	d02d      	beq.n	8105b96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8105b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8105b3c:	d825      	bhi.n	8105b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105b3e:	2b80      	cmp	r3, #128	@ 0x80
 8105b40:	d018      	beq.n	8105b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8105b42:	2b80      	cmp	r3, #128	@ 0x80
 8105b44:	d821      	bhi.n	8105b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105b46:	2b00      	cmp	r3, #0
 8105b48:	d002      	beq.n	8105b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8105b4a:	2b40      	cmp	r3, #64	@ 0x40
 8105b4c:	d007      	beq.n	8105b5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8105b4e:	e01c      	b.n	8105b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b50:	4b63      	ldr	r3, [pc, #396]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105b54:	4a62      	ldr	r2, [pc, #392]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105b5c:	e01c      	b.n	8105b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b62:	3308      	adds	r3, #8
 8105b64:	2100      	movs	r1, #0
 8105b66:	4618      	mov	r0, r3
 8105b68:	f002 fab8 	bl	81080dc <RCCEx_PLL2_Config>
 8105b6c:	4603      	mov	r3, r0
 8105b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105b72:	e011      	b.n	8105b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b78:	3328      	adds	r3, #40	@ 0x28
 8105b7a:	2100      	movs	r1, #0
 8105b7c:	4618      	mov	r0, r3
 8105b7e:	f002 fb5f 	bl	8108240 <RCCEx_PLL3_Config>
 8105b82:	4603      	mov	r3, r0
 8105b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105b88:	e006      	b.n	8105b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105b8a:	2301      	movs	r3, #1
 8105b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105b90:	e002      	b.n	8105b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105b92:	bf00      	nop
 8105b94:	e000      	b.n	8105b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b9c:	2b00      	cmp	r3, #0
 8105b9e:	d10a      	bne.n	8105bb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105ba0:	4b4f      	ldr	r3, [pc, #316]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105ba4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8105ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105bae:	4a4c      	ldr	r2, [pc, #304]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105bb0:	430b      	orrs	r3, r1
 8105bb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8105bb4:	e003      	b.n	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bc6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8105bca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8105bce:	2300      	movs	r3, #0
 8105bd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8105bd4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8105bd8:	460b      	mov	r3, r1
 8105bda:	4313      	orrs	r3, r2
 8105bdc:	d053      	beq.n	8105c86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8105bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105be2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8105be6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105bea:	d035      	beq.n	8105c58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8105bec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105bf0:	d82e      	bhi.n	8105c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105bf2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105bf6:	d031      	beq.n	8105c5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8105bf8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105bfc:	d828      	bhi.n	8105c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105bfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105c02:	d01a      	beq.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8105c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105c08:	d822      	bhi.n	8105c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105c0a:	2b00      	cmp	r3, #0
 8105c0c:	d003      	beq.n	8105c16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8105c0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105c12:	d007      	beq.n	8105c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8105c14:	e01c      	b.n	8105c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c16:	4b32      	ldr	r3, [pc, #200]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105c1a:	4a31      	ldr	r2, [pc, #196]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105c22:	e01c      	b.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c28:	3308      	adds	r3, #8
 8105c2a:	2100      	movs	r1, #0
 8105c2c:	4618      	mov	r0, r3
 8105c2e:	f002 fa55 	bl	81080dc <RCCEx_PLL2_Config>
 8105c32:	4603      	mov	r3, r0
 8105c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105c38:	e011      	b.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c3e:	3328      	adds	r3, #40	@ 0x28
 8105c40:	2100      	movs	r1, #0
 8105c42:	4618      	mov	r0, r3
 8105c44:	f002 fafc 	bl	8108240 <RCCEx_PLL3_Config>
 8105c48:	4603      	mov	r3, r0
 8105c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105c4e:	e006      	b.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105c50:	2301      	movs	r3, #1
 8105c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105c56:	e002      	b.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105c58:	bf00      	nop
 8105c5a:	e000      	b.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c62:	2b00      	cmp	r3, #0
 8105c64:	d10b      	bne.n	8105c7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105c66:	4b1e      	ldr	r3, [pc, #120]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105c6a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8105c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8105c76:	4a1a      	ldr	r2, [pc, #104]	@ (8105ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c78:	430b      	orrs	r3, r1
 8105c7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8105c7c:	e003      	b.n	8105c86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c8e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8105c92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8105c96:	2300      	movs	r3, #0
 8105c98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8105c9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8105ca0:	460b      	mov	r3, r1
 8105ca2:	4313      	orrs	r3, r2
 8105ca4:	d056      	beq.n	8105d54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8105ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105caa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8105cae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105cb2:	d038      	beq.n	8105d26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8105cb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105cb8:	d831      	bhi.n	8105d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105cba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8105cbe:	d034      	beq.n	8105d2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8105cc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8105cc4:	d82b      	bhi.n	8105d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105cc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105cca:	d01d      	beq.n	8105d08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8105ccc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105cd0:	d825      	bhi.n	8105d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105cd2:	2b00      	cmp	r3, #0
 8105cd4:	d006      	beq.n	8105ce4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8105cd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105cda:	d00a      	beq.n	8105cf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105cdc:	e01f      	b.n	8105d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105cde:	bf00      	nop
 8105ce0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ce4:	4ba2      	ldr	r3, [pc, #648]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105ce8:	4aa1      	ldr	r2, [pc, #644]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105cf0:	e01c      	b.n	8105d2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105cf6:	3308      	adds	r3, #8
 8105cf8:	2100      	movs	r1, #0
 8105cfa:	4618      	mov	r0, r3
 8105cfc:	f002 f9ee 	bl	81080dc <RCCEx_PLL2_Config>
 8105d00:	4603      	mov	r3, r0
 8105d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105d06:	e011      	b.n	8105d2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d0c:	3328      	adds	r3, #40	@ 0x28
 8105d0e:	2100      	movs	r1, #0
 8105d10:	4618      	mov	r0, r3
 8105d12:	f002 fa95 	bl	8108240 <RCCEx_PLL3_Config>
 8105d16:	4603      	mov	r3, r0
 8105d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105d1c:	e006      	b.n	8105d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105d1e:	2301      	movs	r3, #1
 8105d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105d24:	e002      	b.n	8105d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105d26:	bf00      	nop
 8105d28:	e000      	b.n	8105d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105d30:	2b00      	cmp	r3, #0
 8105d32:	d10b      	bne.n	8105d4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105d34:	4b8e      	ldr	r3, [pc, #568]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105d38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8105d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8105d44:	4a8a      	ldr	r2, [pc, #552]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105d46:	430b      	orrs	r3, r1
 8105d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8105d4a:	e003      	b.n	8105d54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d5c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8105d60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8105d64:	2300      	movs	r3, #0
 8105d66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8105d6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8105d6e:	460b      	mov	r3, r1
 8105d70:	4313      	orrs	r3, r2
 8105d72:	d03a      	beq.n	8105dea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8105d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105d7a:	2b30      	cmp	r3, #48	@ 0x30
 8105d7c:	d01f      	beq.n	8105dbe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8105d7e:	2b30      	cmp	r3, #48	@ 0x30
 8105d80:	d819      	bhi.n	8105db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105d82:	2b20      	cmp	r3, #32
 8105d84:	d00c      	beq.n	8105da0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8105d86:	2b20      	cmp	r3, #32
 8105d88:	d815      	bhi.n	8105db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105d8a:	2b00      	cmp	r3, #0
 8105d8c:	d019      	beq.n	8105dc2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8105d8e:	2b10      	cmp	r3, #16
 8105d90:	d111      	bne.n	8105db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d92:	4b77      	ldr	r3, [pc, #476]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105d96:	4a76      	ldr	r2, [pc, #472]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105d9e:	e011      	b.n	8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105da4:	3308      	adds	r3, #8
 8105da6:	2102      	movs	r1, #2
 8105da8:	4618      	mov	r0, r3
 8105daa:	f002 f997 	bl	81080dc <RCCEx_PLL2_Config>
 8105dae:	4603      	mov	r3, r0
 8105db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105db4:	e006      	b.n	8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105db6:	2301      	movs	r3, #1
 8105db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105dbc:	e002      	b.n	8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105dbe:	bf00      	nop
 8105dc0:	e000      	b.n	8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105dc8:	2b00      	cmp	r3, #0
 8105dca:	d10a      	bne.n	8105de2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105dcc:	4b68      	ldr	r3, [pc, #416]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105dd0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8105dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105dda:	4a65      	ldr	r2, [pc, #404]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105ddc:	430b      	orrs	r3, r1
 8105dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105de0:	e003      	b.n	8105dea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105df2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8105df6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8105dfa:	2300      	movs	r3, #0
 8105dfc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8105e00:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8105e04:	460b      	mov	r3, r1
 8105e06:	4313      	orrs	r3, r2
 8105e08:	d051      	beq.n	8105eae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8105e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105e10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105e14:	d035      	beq.n	8105e82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8105e16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105e1a:	d82e      	bhi.n	8105e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105e1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8105e20:	d031      	beq.n	8105e86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8105e22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8105e26:	d828      	bhi.n	8105e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105e2c:	d01a      	beq.n	8105e64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8105e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105e32:	d822      	bhi.n	8105e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105e34:	2b00      	cmp	r3, #0
 8105e36:	d003      	beq.n	8105e40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8105e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105e3c:	d007      	beq.n	8105e4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8105e3e:	e01c      	b.n	8105e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e40:	4b4b      	ldr	r3, [pc, #300]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e44:	4a4a      	ldr	r2, [pc, #296]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105e4c:	e01c      	b.n	8105e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e52:	3308      	adds	r3, #8
 8105e54:	2100      	movs	r1, #0
 8105e56:	4618      	mov	r0, r3
 8105e58:	f002 f940 	bl	81080dc <RCCEx_PLL2_Config>
 8105e5c:	4603      	mov	r3, r0
 8105e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105e62:	e011      	b.n	8105e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e68:	3328      	adds	r3, #40	@ 0x28
 8105e6a:	2100      	movs	r1, #0
 8105e6c:	4618      	mov	r0, r3
 8105e6e:	f002 f9e7 	bl	8108240 <RCCEx_PLL3_Config>
 8105e72:	4603      	mov	r3, r0
 8105e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105e78:	e006      	b.n	8105e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105e7a:	2301      	movs	r3, #1
 8105e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105e80:	e002      	b.n	8105e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105e82:	bf00      	nop
 8105e84:	e000      	b.n	8105e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e8c:	2b00      	cmp	r3, #0
 8105e8e:	d10a      	bne.n	8105ea6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105e90:	4b37      	ldr	r3, [pc, #220]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105e94:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8105e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105e9e:	4a34      	ldr	r2, [pc, #208]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105ea0:	430b      	orrs	r3, r1
 8105ea2:	6513      	str	r3, [r2, #80]	@ 0x50
 8105ea4:	e003      	b.n	8105eae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105eb6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8105eba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8105ebe:	2300      	movs	r3, #0
 8105ec0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8105ec4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8105ec8:	460b      	mov	r3, r1
 8105eca:	4313      	orrs	r3, r2
 8105ecc:	d056      	beq.n	8105f7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8105ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ed2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8105ed8:	d033      	beq.n	8105f42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8105eda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8105ede:	d82c      	bhi.n	8105f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105ee0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105ee4:	d02f      	beq.n	8105f46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8105ee6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105eea:	d826      	bhi.n	8105f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105eec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105ef0:	d02b      	beq.n	8105f4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8105ef2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105ef6:	d820      	bhi.n	8105f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105ef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105efc:	d012      	beq.n	8105f24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8105efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105f02:	d81a      	bhi.n	8105f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105f04:	2b00      	cmp	r3, #0
 8105f06:	d022      	beq.n	8105f4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8105f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105f0c:	d115      	bne.n	8105f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f12:	3308      	adds	r3, #8
 8105f14:	2101      	movs	r1, #1
 8105f16:	4618      	mov	r0, r3
 8105f18:	f002 f8e0 	bl	81080dc <RCCEx_PLL2_Config>
 8105f1c:	4603      	mov	r3, r0
 8105f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105f22:	e015      	b.n	8105f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f28:	3328      	adds	r3, #40	@ 0x28
 8105f2a:	2101      	movs	r1, #1
 8105f2c:	4618      	mov	r0, r3
 8105f2e:	f002 f987 	bl	8108240 <RCCEx_PLL3_Config>
 8105f32:	4603      	mov	r3, r0
 8105f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105f38:	e00a      	b.n	8105f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f3a:	2301      	movs	r3, #1
 8105f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105f40:	e006      	b.n	8105f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105f42:	bf00      	nop
 8105f44:	e004      	b.n	8105f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105f46:	bf00      	nop
 8105f48:	e002      	b.n	8105f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105f4a:	bf00      	nop
 8105f4c:	e000      	b.n	8105f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105f54:	2b00      	cmp	r3, #0
 8105f56:	d10d      	bne.n	8105f74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105f58:	4b05      	ldr	r3, [pc, #20]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105f5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8105f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105f66:	4a02      	ldr	r2, [pc, #8]	@ (8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f68:	430b      	orrs	r3, r1
 8105f6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8105f6c:	e006      	b.n	8105f7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8105f6e:	bf00      	nop
 8105f70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105f78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f84:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8105f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8105f8c:	2300      	movs	r3, #0
 8105f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8105f92:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8105f96:	460b      	mov	r3, r1
 8105f98:	4313      	orrs	r3, r2
 8105f9a:	d055      	beq.n	8106048 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8105f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105fa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8105fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105fa8:	d033      	beq.n	8106012 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8105faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105fae:	d82c      	bhi.n	810600a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105fb4:	d02f      	beq.n	8106016 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8105fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105fba:	d826      	bhi.n	810600a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105fbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105fc0:	d02b      	beq.n	810601a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8105fc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105fc6:	d820      	bhi.n	810600a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105fcc:	d012      	beq.n	8105ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8105fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105fd2:	d81a      	bhi.n	810600a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105fd4:	2b00      	cmp	r3, #0
 8105fd6:	d022      	beq.n	810601e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8105fd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105fdc:	d115      	bne.n	810600a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105fe2:	3308      	adds	r3, #8
 8105fe4:	2101      	movs	r1, #1
 8105fe6:	4618      	mov	r0, r3
 8105fe8:	f002 f878 	bl	81080dc <RCCEx_PLL2_Config>
 8105fec:	4603      	mov	r3, r0
 8105fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8105ff2:	e015      	b.n	8106020 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ff8:	3328      	adds	r3, #40	@ 0x28
 8105ffa:	2101      	movs	r1, #1
 8105ffc:	4618      	mov	r0, r3
 8105ffe:	f002 f91f 	bl	8108240 <RCCEx_PLL3_Config>
 8106002:	4603      	mov	r3, r0
 8106004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106008:	e00a      	b.n	8106020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810600a:	2301      	movs	r3, #1
 810600c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106010:	e006      	b.n	8106020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106012:	bf00      	nop
 8106014:	e004      	b.n	8106020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106016:	bf00      	nop
 8106018:	e002      	b.n	8106020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810601a:	bf00      	nop
 810601c:	e000      	b.n	8106020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810601e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106024:	2b00      	cmp	r3, #0
 8106026:	d10b      	bne.n	8106040 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106028:	4ba4      	ldr	r3, [pc, #656]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810602a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810602c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106038:	4aa0      	ldr	r2, [pc, #640]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810603a:	430b      	orrs	r3, r1
 810603c:	6593      	str	r3, [r2, #88]	@ 0x58
 810603e:	e003      	b.n	8106048 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106050:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8106054:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8106058:	2300      	movs	r3, #0
 810605a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810605e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8106062:	460b      	mov	r3, r1
 8106064:	4313      	orrs	r3, r2
 8106066:	d037      	beq.n	81060d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810606c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810606e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106072:	d00e      	beq.n	8106092 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106078:	d816      	bhi.n	81060a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 810607a:	2b00      	cmp	r3, #0
 810607c:	d018      	beq.n	81060b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 810607e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106082:	d111      	bne.n	81060a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106084:	4b8d      	ldr	r3, [pc, #564]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106088:	4a8c      	ldr	r2, [pc, #560]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810608a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810608e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106090:	e00f      	b.n	81060b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106096:	3308      	adds	r3, #8
 8106098:	2101      	movs	r1, #1
 810609a:	4618      	mov	r0, r3
 810609c:	f002 f81e 	bl	81080dc <RCCEx_PLL2_Config>
 81060a0:	4603      	mov	r3, r0
 81060a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81060a6:	e004      	b.n	81060b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81060a8:	2301      	movs	r3, #1
 81060aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81060ae:	e000      	b.n	81060b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81060b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81060b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81060b6:	2b00      	cmp	r3, #0
 81060b8:	d10a      	bne.n	81060d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81060ba:	4b80      	ldr	r3, [pc, #512]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81060bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81060be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81060c8:	4a7c      	ldr	r2, [pc, #496]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81060ca:	430b      	orrs	r3, r1
 81060cc:	6513      	str	r3, [r2, #80]	@ 0x50
 81060ce:	e003      	b.n	81060d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81060d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81060e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81060e8:	2300      	movs	r3, #0
 81060ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81060ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81060f2:	460b      	mov	r3, r1
 81060f4:	4313      	orrs	r3, r2
 81060f6:	d039      	beq.n	810616c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81060fe:	2b03      	cmp	r3, #3
 8106100:	d81c      	bhi.n	810613c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8106102:	a201      	add	r2, pc, #4	@ (adr r2, 8106108 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8106104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106108:	08106145 	.word	0x08106145
 810610c:	08106119 	.word	0x08106119
 8106110:	08106127 	.word	0x08106127
 8106114:	08106145 	.word	0x08106145
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106118:	4b68      	ldr	r3, [pc, #416]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810611c:	4a67      	ldr	r2, [pc, #412]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810611e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106124:	e00f      	b.n	8106146 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810612a:	3308      	adds	r3, #8
 810612c:	2102      	movs	r1, #2
 810612e:	4618      	mov	r0, r3
 8106130:	f001 ffd4 	bl	81080dc <RCCEx_PLL2_Config>
 8106134:	4603      	mov	r3, r0
 8106136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 810613a:	e004      	b.n	8106146 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810613c:	2301      	movs	r3, #1
 810613e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106142:	e000      	b.n	8106146 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8106144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810614a:	2b00      	cmp	r3, #0
 810614c:	d10a      	bne.n	8106164 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810614e:	4b5b      	ldr	r3, [pc, #364]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106152:	f023 0103 	bic.w	r1, r3, #3
 8106156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810615a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810615c:	4a57      	ldr	r2, [pc, #348]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810615e:	430b      	orrs	r3, r1
 8106160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106162:	e003      	b.n	810616c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810616c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106174:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8106178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810617c:	2300      	movs	r3, #0
 810617e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8106182:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8106186:	460b      	mov	r3, r1
 8106188:	4313      	orrs	r3, r2
 810618a:	f000 809f 	beq.w	81062cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810618e:	4b4c      	ldr	r3, [pc, #304]	@ (81062c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106190:	681b      	ldr	r3, [r3, #0]
 8106192:	4a4b      	ldr	r2, [pc, #300]	@ (81062c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106198:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810619a:	f7fb fba7 	bl	81018ec <HAL_GetTick>
 810619e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81061a2:	e00b      	b.n	81061bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81061a4:	f7fb fba2 	bl	81018ec <HAL_GetTick>
 81061a8:	4602      	mov	r2, r0
 81061aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81061ae:	1ad3      	subs	r3, r2, r3
 81061b0:	2b64      	cmp	r3, #100	@ 0x64
 81061b2:	d903      	bls.n	81061bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81061b4:	2303      	movs	r3, #3
 81061b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81061ba:	e005      	b.n	81061c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81061bc:	4b40      	ldr	r3, [pc, #256]	@ (81062c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81061be:	681b      	ldr	r3, [r3, #0]
 81061c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81061c4:	2b00      	cmp	r3, #0
 81061c6:	d0ed      	beq.n	81061a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81061c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81061cc:	2b00      	cmp	r3, #0
 81061ce:	d179      	bne.n	81062c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81061d0:	4b3a      	ldr	r3, [pc, #232]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81061d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81061dc:	4053      	eors	r3, r2
 81061de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81061e2:	2b00      	cmp	r3, #0
 81061e4:	d015      	beq.n	8106212 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81061e6:	4b35      	ldr	r3, [pc, #212]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81061e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81061ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81061ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81061f2:	4b32      	ldr	r3, [pc, #200]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81061f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81061f6:	4a31      	ldr	r2, [pc, #196]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81061f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81061fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81061fe:	4b2f      	ldr	r3, [pc, #188]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106202:	4a2e      	ldr	r2, [pc, #184]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106208:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810620a:	4a2c      	ldr	r2, [pc, #176]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810620c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106210:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810621a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810621e:	d118      	bne.n	8106252 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106220:	f7fb fb64 	bl	81018ec <HAL_GetTick>
 8106224:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106228:	e00d      	b.n	8106246 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810622a:	f7fb fb5f 	bl	81018ec <HAL_GetTick>
 810622e:	4602      	mov	r2, r0
 8106230:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8106234:	1ad2      	subs	r2, r2, r3
 8106236:	f241 3388 	movw	r3, #5000	@ 0x1388
 810623a:	429a      	cmp	r2, r3
 810623c:	d903      	bls.n	8106246 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810623e:	2303      	movs	r3, #3
 8106240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8106244:	e005      	b.n	8106252 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106246:	4b1d      	ldr	r3, [pc, #116]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810624a:	f003 0302 	and.w	r3, r3, #2
 810624e:	2b00      	cmp	r3, #0
 8106250:	d0eb      	beq.n	810622a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8106252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106256:	2b00      	cmp	r3, #0
 8106258:	d12b      	bne.n	81062b2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810625e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810626a:	d110      	bne.n	810628e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 810626c:	4b13      	ldr	r3, [pc, #76]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810626e:	691b      	ldr	r3, [r3, #16]
 8106270:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106278:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810627c:	091b      	lsrs	r3, r3, #4
 810627e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8106282:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106286:	4a0d      	ldr	r2, [pc, #52]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106288:	430b      	orrs	r3, r1
 810628a:	6113      	str	r3, [r2, #16]
 810628c:	e005      	b.n	810629a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810628e:	4b0b      	ldr	r3, [pc, #44]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106290:	691b      	ldr	r3, [r3, #16]
 8106292:	4a0a      	ldr	r2, [pc, #40]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106294:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106298:	6113      	str	r3, [r2, #16]
 810629a:	4b08      	ldr	r3, [pc, #32]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810629c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81062a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81062aa:	4a04      	ldr	r2, [pc, #16]	@ (81062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062ac:	430b      	orrs	r3, r1
 81062ae:	6713      	str	r3, [r2, #112]	@ 0x70
 81062b0:	e00c      	b.n	81062cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81062b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81062b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 81062ba:	e007      	b.n	81062cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 81062bc:	58024400 	.word	0x58024400
 81062c0:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81062c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81062c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062d4:	f002 0301 	and.w	r3, r2, #1
 81062d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81062dc:	2300      	movs	r3, #0
 81062de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81062e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 81062e6:	460b      	mov	r3, r1
 81062e8:	4313      	orrs	r3, r2
 81062ea:	f000 8089 	beq.w	8106400 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81062ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81062f4:	2b28      	cmp	r3, #40	@ 0x28
 81062f6:	d86b      	bhi.n	81063d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81062f8:	a201      	add	r2, pc, #4	@ (adr r2, 8106300 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062fe:	bf00      	nop
 8106300:	081063d9 	.word	0x081063d9
 8106304:	081063d1 	.word	0x081063d1
 8106308:	081063d1 	.word	0x081063d1
 810630c:	081063d1 	.word	0x081063d1
 8106310:	081063d1 	.word	0x081063d1
 8106314:	081063d1 	.word	0x081063d1
 8106318:	081063d1 	.word	0x081063d1
 810631c:	081063d1 	.word	0x081063d1
 8106320:	081063a5 	.word	0x081063a5
 8106324:	081063d1 	.word	0x081063d1
 8106328:	081063d1 	.word	0x081063d1
 810632c:	081063d1 	.word	0x081063d1
 8106330:	081063d1 	.word	0x081063d1
 8106334:	081063d1 	.word	0x081063d1
 8106338:	081063d1 	.word	0x081063d1
 810633c:	081063d1 	.word	0x081063d1
 8106340:	081063bb 	.word	0x081063bb
 8106344:	081063d1 	.word	0x081063d1
 8106348:	081063d1 	.word	0x081063d1
 810634c:	081063d1 	.word	0x081063d1
 8106350:	081063d1 	.word	0x081063d1
 8106354:	081063d1 	.word	0x081063d1
 8106358:	081063d1 	.word	0x081063d1
 810635c:	081063d1 	.word	0x081063d1
 8106360:	081063d9 	.word	0x081063d9
 8106364:	081063d1 	.word	0x081063d1
 8106368:	081063d1 	.word	0x081063d1
 810636c:	081063d1 	.word	0x081063d1
 8106370:	081063d1 	.word	0x081063d1
 8106374:	081063d1 	.word	0x081063d1
 8106378:	081063d1 	.word	0x081063d1
 810637c:	081063d1 	.word	0x081063d1
 8106380:	081063d9 	.word	0x081063d9
 8106384:	081063d1 	.word	0x081063d1
 8106388:	081063d1 	.word	0x081063d1
 810638c:	081063d1 	.word	0x081063d1
 8106390:	081063d1 	.word	0x081063d1
 8106394:	081063d1 	.word	0x081063d1
 8106398:	081063d1 	.word	0x081063d1
 810639c:	081063d1 	.word	0x081063d1
 81063a0:	081063d9 	.word	0x081063d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81063a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063a8:	3308      	adds	r3, #8
 81063aa:	2101      	movs	r1, #1
 81063ac:	4618      	mov	r0, r3
 81063ae:	f001 fe95 	bl	81080dc <RCCEx_PLL2_Config>
 81063b2:	4603      	mov	r3, r0
 81063b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81063b8:	e00f      	b.n	81063da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81063ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063be:	3328      	adds	r3, #40	@ 0x28
 81063c0:	2101      	movs	r1, #1
 81063c2:	4618      	mov	r0, r3
 81063c4:	f001 ff3c 	bl	8108240 <RCCEx_PLL3_Config>
 81063c8:	4603      	mov	r3, r0
 81063ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81063ce:	e004      	b.n	81063da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81063d0:	2301      	movs	r3, #1
 81063d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81063d6:	e000      	b.n	81063da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81063d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81063da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81063de:	2b00      	cmp	r3, #0
 81063e0:	d10a      	bne.n	81063f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81063e2:	4bbf      	ldr	r3, [pc, #764]	@ (81066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81063e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81063e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81063ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81063f0:	4abb      	ldr	r2, [pc, #748]	@ (81066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81063f2:	430b      	orrs	r3, r1
 81063f4:	6553      	str	r3, [r2, #84]	@ 0x54
 81063f6:	e003      	b.n	8106400 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81063fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106408:	f002 0302 	and.w	r3, r2, #2
 810640c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8106410:	2300      	movs	r3, #0
 8106412:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8106416:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810641a:	460b      	mov	r3, r1
 810641c:	4313      	orrs	r3, r2
 810641e:	d041      	beq.n	81064a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8106420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8106426:	2b05      	cmp	r3, #5
 8106428:	d824      	bhi.n	8106474 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 810642a:	a201      	add	r2, pc, #4	@ (adr r2, 8106430 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 810642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106430:	0810647d 	.word	0x0810647d
 8106434:	08106449 	.word	0x08106449
 8106438:	0810645f 	.word	0x0810645f
 810643c:	0810647d 	.word	0x0810647d
 8106440:	0810647d 	.word	0x0810647d
 8106444:	0810647d 	.word	0x0810647d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810644c:	3308      	adds	r3, #8
 810644e:	2101      	movs	r1, #1
 8106450:	4618      	mov	r0, r3
 8106452:	f001 fe43 	bl	81080dc <RCCEx_PLL2_Config>
 8106456:	4603      	mov	r3, r0
 8106458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810645c:	e00f      	b.n	810647e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106462:	3328      	adds	r3, #40	@ 0x28
 8106464:	2101      	movs	r1, #1
 8106466:	4618      	mov	r0, r3
 8106468:	f001 feea 	bl	8108240 <RCCEx_PLL3_Config>
 810646c:	4603      	mov	r3, r0
 810646e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106472:	e004      	b.n	810647e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106474:	2301      	movs	r3, #1
 8106476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810647a:	e000      	b.n	810647e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 810647c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810647e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106482:	2b00      	cmp	r3, #0
 8106484:	d10a      	bne.n	810649c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106486:	4b96      	ldr	r3, [pc, #600]	@ (81066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810648a:	f023 0107 	bic.w	r1, r3, #7
 810648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8106494:	4a92      	ldr	r2, [pc, #584]	@ (81066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106496:	430b      	orrs	r3, r1
 8106498:	6553      	str	r3, [r2, #84]	@ 0x54
 810649a:	e003      	b.n	81064a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810649c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81064a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064ac:	f002 0304 	and.w	r3, r2, #4
 81064b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81064b4:	2300      	movs	r3, #0
 81064b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81064ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81064be:	460b      	mov	r3, r1
 81064c0:	4313      	orrs	r3, r2
 81064c2:	d044      	beq.n	810654e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81064c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81064cc:	2b05      	cmp	r3, #5
 81064ce:	d825      	bhi.n	810651c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81064d0:	a201      	add	r2, pc, #4	@ (adr r2, 81064d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81064d6:	bf00      	nop
 81064d8:	08106525 	.word	0x08106525
 81064dc:	081064f1 	.word	0x081064f1
 81064e0:	08106507 	.word	0x08106507
 81064e4:	08106525 	.word	0x08106525
 81064e8:	08106525 	.word	0x08106525
 81064ec:	08106525 	.word	0x08106525
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064f4:	3308      	adds	r3, #8
 81064f6:	2101      	movs	r1, #1
 81064f8:	4618      	mov	r0, r3
 81064fa:	f001 fdef 	bl	81080dc <RCCEx_PLL2_Config>
 81064fe:	4603      	mov	r3, r0
 8106500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106504:	e00f      	b.n	8106526 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810650a:	3328      	adds	r3, #40	@ 0x28
 810650c:	2101      	movs	r1, #1
 810650e:	4618      	mov	r0, r3
 8106510:	f001 fe96 	bl	8108240 <RCCEx_PLL3_Config>
 8106514:	4603      	mov	r3, r0
 8106516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810651a:	e004      	b.n	8106526 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810651c:	2301      	movs	r3, #1
 810651e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106522:	e000      	b.n	8106526 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8106524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810652a:	2b00      	cmp	r3, #0
 810652c:	d10b      	bne.n	8106546 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810652e:	4b6c      	ldr	r3, [pc, #432]	@ (81066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106532:	f023 0107 	bic.w	r1, r3, #7
 8106536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810653a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810653e:	4a68      	ldr	r2, [pc, #416]	@ (81066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106540:	430b      	orrs	r3, r1
 8106542:	6593      	str	r3, [r2, #88]	@ 0x58
 8106544:	e003      	b.n	810654e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810654a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810654e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106556:	f002 0320 	and.w	r3, r2, #32
 810655a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810655e:	2300      	movs	r3, #0
 8106560:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8106564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8106568:	460b      	mov	r3, r1
 810656a:	4313      	orrs	r3, r2
 810656c:	d055      	beq.n	810661a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8106576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810657a:	d033      	beq.n	81065e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 810657c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106580:	d82c      	bhi.n	81065dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106586:	d02f      	beq.n	81065e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8106588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810658c:	d826      	bhi.n	81065dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810658e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106592:	d02b      	beq.n	81065ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8106594:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106598:	d820      	bhi.n	81065dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810659a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810659e:	d012      	beq.n	81065c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81065a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81065a4:	d81a      	bhi.n	81065dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81065a6:	2b00      	cmp	r3, #0
 81065a8:	d022      	beq.n	81065f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81065aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81065ae:	d115      	bne.n	81065dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81065b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065b4:	3308      	adds	r3, #8
 81065b6:	2100      	movs	r1, #0
 81065b8:	4618      	mov	r0, r3
 81065ba:	f001 fd8f 	bl	81080dc <RCCEx_PLL2_Config>
 81065be:	4603      	mov	r3, r0
 81065c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81065c4:	e015      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81065c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065ca:	3328      	adds	r3, #40	@ 0x28
 81065cc:	2102      	movs	r1, #2
 81065ce:	4618      	mov	r0, r3
 81065d0:	f001 fe36 	bl	8108240 <RCCEx_PLL3_Config>
 81065d4:	4603      	mov	r3, r0
 81065d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81065da:	e00a      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81065dc:	2301      	movs	r3, #1
 81065de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81065e2:	e006      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81065e4:	bf00      	nop
 81065e6:	e004      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81065e8:	bf00      	nop
 81065ea:	e002      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81065ec:	bf00      	nop
 81065ee:	e000      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81065f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81065f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81065f6:	2b00      	cmp	r3, #0
 81065f8:	d10b      	bne.n	8106612 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81065fa:	4b39      	ldr	r3, [pc, #228]	@ (81066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81065fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81065fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810660a:	4a35      	ldr	r2, [pc, #212]	@ (81066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810660c:	430b      	orrs	r3, r1
 810660e:	6553      	str	r3, [r2, #84]	@ 0x54
 8106610:	e003      	b.n	810661a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106616:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106622:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8106626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810662a:	2300      	movs	r3, #0
 810662c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8106630:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8106634:	460b      	mov	r3, r1
 8106636:	4313      	orrs	r3, r2
 8106638:	d058      	beq.n	81066ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810663e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8106642:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106646:	d033      	beq.n	81066b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8106648:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810664c:	d82c      	bhi.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810664e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106652:	d02f      	beq.n	81066b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8106654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106658:	d826      	bhi.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810665a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810665e:	d02b      	beq.n	81066b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8106660:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106664:	d820      	bhi.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106666:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810666a:	d012      	beq.n	8106692 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 810666c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106670:	d81a      	bhi.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106672:	2b00      	cmp	r3, #0
 8106674:	d022      	beq.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8106676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810667a:	d115      	bne.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106680:	3308      	adds	r3, #8
 8106682:	2100      	movs	r1, #0
 8106684:	4618      	mov	r0, r3
 8106686:	f001 fd29 	bl	81080dc <RCCEx_PLL2_Config>
 810668a:	4603      	mov	r3, r0
 810668c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106690:	e015      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106696:	3328      	adds	r3, #40	@ 0x28
 8106698:	2102      	movs	r1, #2
 810669a:	4618      	mov	r0, r3
 810669c:	f001 fdd0 	bl	8108240 <RCCEx_PLL3_Config>
 81066a0:	4603      	mov	r3, r0
 81066a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81066a6:	e00a      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81066a8:	2301      	movs	r3, #1
 81066aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81066ae:	e006      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81066b0:	bf00      	nop
 81066b2:	e004      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81066b4:	bf00      	nop
 81066b6:	e002      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81066b8:	bf00      	nop
 81066ba:	e000      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81066bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81066c2:	2b00      	cmp	r3, #0
 81066c4:	d10e      	bne.n	81066e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81066c6:	4b06      	ldr	r3, [pc, #24]	@ (81066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81066c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81066ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81066d6:	4a02      	ldr	r2, [pc, #8]	@ (81066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81066d8:	430b      	orrs	r3, r1
 81066da:	6593      	str	r3, [r2, #88]	@ 0x58
 81066dc:	e006      	b.n	81066ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81066de:	bf00      	nop
 81066e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81066e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81066ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81066f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81066fc:	2300      	movs	r3, #0
 81066fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8106702:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8106706:	460b      	mov	r3, r1
 8106708:	4313      	orrs	r3, r2
 810670a:	d055      	beq.n	81067b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810670c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106710:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106714:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106718:	d033      	beq.n	8106782 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810671a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810671e:	d82c      	bhi.n	810677a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106724:	d02f      	beq.n	8106786 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8106726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810672a:	d826      	bhi.n	810677a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810672c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106730:	d02b      	beq.n	810678a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8106732:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106736:	d820      	bhi.n	810677a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106738:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810673c:	d012      	beq.n	8106764 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810673e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106742:	d81a      	bhi.n	810677a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106744:	2b00      	cmp	r3, #0
 8106746:	d022      	beq.n	810678e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8106748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810674c:	d115      	bne.n	810677a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810674e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106752:	3308      	adds	r3, #8
 8106754:	2100      	movs	r1, #0
 8106756:	4618      	mov	r0, r3
 8106758:	f001 fcc0 	bl	81080dc <RCCEx_PLL2_Config>
 810675c:	4603      	mov	r3, r0
 810675e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106762:	e015      	b.n	8106790 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106768:	3328      	adds	r3, #40	@ 0x28
 810676a:	2102      	movs	r1, #2
 810676c:	4618      	mov	r0, r3
 810676e:	f001 fd67 	bl	8108240 <RCCEx_PLL3_Config>
 8106772:	4603      	mov	r3, r0
 8106774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106778:	e00a      	b.n	8106790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810677a:	2301      	movs	r3, #1
 810677c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106780:	e006      	b.n	8106790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106782:	bf00      	nop
 8106784:	e004      	b.n	8106790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106786:	bf00      	nop
 8106788:	e002      	b.n	8106790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810678a:	bf00      	nop
 810678c:	e000      	b.n	8106790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810678e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106794:	2b00      	cmp	r3, #0
 8106796:	d10b      	bne.n	81067b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106798:	4ba1      	ldr	r3, [pc, #644]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810679a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810679c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81067a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81067a8:	4a9d      	ldr	r2, [pc, #628]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81067aa:	430b      	orrs	r3, r1
 81067ac:	6593      	str	r3, [r2, #88]	@ 0x58
 81067ae:	e003      	b.n	81067b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81067b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067c0:	f002 0308 	and.w	r3, r2, #8
 81067c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81067c8:	2300      	movs	r3, #0
 81067ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81067ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81067d2:	460b      	mov	r3, r1
 81067d4:	4313      	orrs	r3, r2
 81067d6:	d01e      	beq.n	8106816 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81067d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81067e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81067e4:	d10c      	bne.n	8106800 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067ea:	3328      	adds	r3, #40	@ 0x28
 81067ec:	2102      	movs	r1, #2
 81067ee:	4618      	mov	r0, r3
 81067f0:	f001 fd26 	bl	8108240 <RCCEx_PLL3_Config>
 81067f4:	4603      	mov	r3, r0
 81067f6:	2b00      	cmp	r3, #0
 81067f8:	d002      	beq.n	8106800 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81067fa:	2301      	movs	r3, #1
 81067fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106800:	4b87      	ldr	r3, [pc, #540]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106804:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8106808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810680c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106810:	4a83      	ldr	r2, [pc, #524]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106812:	430b      	orrs	r3, r1
 8106814:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810681e:	f002 0310 	and.w	r3, r2, #16
 8106822:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8106826:	2300      	movs	r3, #0
 8106828:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810682c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8106830:	460b      	mov	r3, r1
 8106832:	4313      	orrs	r3, r2
 8106834:	d01e      	beq.n	8106874 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8106836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810683a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810683e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106842:	d10c      	bne.n	810685e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106848:	3328      	adds	r3, #40	@ 0x28
 810684a:	2102      	movs	r1, #2
 810684c:	4618      	mov	r0, r3
 810684e:	f001 fcf7 	bl	8108240 <RCCEx_PLL3_Config>
 8106852:	4603      	mov	r3, r0
 8106854:	2b00      	cmp	r3, #0
 8106856:	d002      	beq.n	810685e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8106858:	2301      	movs	r3, #1
 810685a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810685e:	4b70      	ldr	r3, [pc, #448]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106862:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8106866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810686a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810686e:	4a6c      	ldr	r2, [pc, #432]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106870:	430b      	orrs	r3, r1
 8106872:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106878:	e9d3 2300 	ldrd	r2, r3, [r3]
 810687c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8106880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8106884:	2300      	movs	r3, #0
 8106886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810688a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810688e:	460b      	mov	r3, r1
 8106890:	4313      	orrs	r3, r2
 8106892:	d03e      	beq.n	8106912 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8106894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106898:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810689c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81068a0:	d022      	beq.n	81068e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81068a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81068a6:	d81b      	bhi.n	81068e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81068a8:	2b00      	cmp	r3, #0
 81068aa:	d003      	beq.n	81068b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81068ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81068b0:	d00b      	beq.n	81068ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81068b2:	e015      	b.n	81068e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068b8:	3308      	adds	r3, #8
 81068ba:	2100      	movs	r1, #0
 81068bc:	4618      	mov	r0, r3
 81068be:	f001 fc0d 	bl	81080dc <RCCEx_PLL2_Config>
 81068c2:	4603      	mov	r3, r0
 81068c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81068c8:	e00f      	b.n	81068ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068ce:	3328      	adds	r3, #40	@ 0x28
 81068d0:	2102      	movs	r1, #2
 81068d2:	4618      	mov	r0, r3
 81068d4:	f001 fcb4 	bl	8108240 <RCCEx_PLL3_Config>
 81068d8:	4603      	mov	r3, r0
 81068da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81068de:	e004      	b.n	81068ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81068e0:	2301      	movs	r3, #1
 81068e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81068e6:	e000      	b.n	81068ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81068e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81068ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81068ee:	2b00      	cmp	r3, #0
 81068f0:	d10b      	bne.n	810690a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81068f2:	4b4b      	ldr	r3, [pc, #300]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81068f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81068f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81068fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8106902:	4a47      	ldr	r2, [pc, #284]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106904:	430b      	orrs	r3, r1
 8106906:	6593      	str	r3, [r2, #88]	@ 0x58
 8106908:	e003      	b.n	8106912 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810690a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810690e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106916:	e9d3 2300 	ldrd	r2, r3, [r3]
 810691a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810691e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8106920:	2300      	movs	r3, #0
 8106922:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8106924:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8106928:	460b      	mov	r3, r1
 810692a:	4313      	orrs	r3, r2
 810692c:	d03b      	beq.n	81069a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106936:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810693a:	d01f      	beq.n	810697c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 810693c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106940:	d818      	bhi.n	8106974 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8106942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106946:	d003      	beq.n	8106950 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8106948:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810694c:	d007      	beq.n	810695e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810694e:	e011      	b.n	8106974 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106950:	4b33      	ldr	r3, [pc, #204]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106954:	4a32      	ldr	r2, [pc, #200]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810695a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810695c:	e00f      	b.n	810697e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106962:	3328      	adds	r3, #40	@ 0x28
 8106964:	2101      	movs	r1, #1
 8106966:	4618      	mov	r0, r3
 8106968:	f001 fc6a 	bl	8108240 <RCCEx_PLL3_Config>
 810696c:	4603      	mov	r3, r0
 810696e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8106972:	e004      	b.n	810697e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106974:	2301      	movs	r3, #1
 8106976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810697a:	e000      	b.n	810697e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 810697c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810697e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106982:	2b00      	cmp	r3, #0
 8106984:	d10b      	bne.n	810699e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106986:	4b26      	ldr	r3, [pc, #152]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810698a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106996:	4a22      	ldr	r2, [pc, #136]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106998:	430b      	orrs	r3, r1
 810699a:	6553      	str	r3, [r2, #84]	@ 0x54
 810699c:	e003      	b.n	81069a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810699e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81069a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81069b2:	673b      	str	r3, [r7, #112]	@ 0x70
 81069b4:	2300      	movs	r3, #0
 81069b6:	677b      	str	r3, [r7, #116]	@ 0x74
 81069b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81069bc:	460b      	mov	r3, r1
 81069be:	4313      	orrs	r3, r2
 81069c0:	d034      	beq.n	8106a2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81069c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81069c8:	2b00      	cmp	r3, #0
 81069ca:	d003      	beq.n	81069d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81069cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81069d0:	d007      	beq.n	81069e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81069d2:	e011      	b.n	81069f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81069d4:	4b12      	ldr	r3, [pc, #72]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069d8:	4a11      	ldr	r2, [pc, #68]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81069da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81069de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81069e0:	e00e      	b.n	8106a00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81069e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069e6:	3308      	adds	r3, #8
 81069e8:	2102      	movs	r1, #2
 81069ea:	4618      	mov	r0, r3
 81069ec:	f001 fb76 	bl	81080dc <RCCEx_PLL2_Config>
 81069f0:	4603      	mov	r3, r0
 81069f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81069f6:	e003      	b.n	8106a00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81069f8:	2301      	movs	r3, #1
 81069fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81069fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a04:	2b00      	cmp	r3, #0
 8106a06:	d10d      	bne.n	8106a24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106a08:	4b05      	ldr	r3, [pc, #20]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106a0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8106a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106a16:	4a02      	ldr	r2, [pc, #8]	@ (8106a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a18:	430b      	orrs	r3, r1
 8106a1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106a1c:	e006      	b.n	8106a2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8106a1e:	bf00      	nop
 8106a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8106a38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8106a3a:	2300      	movs	r3, #0
 8106a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8106a3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8106a42:	460b      	mov	r3, r1
 8106a44:	4313      	orrs	r3, r2
 8106a46:	d00c      	beq.n	8106a62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a4c:	3328      	adds	r3, #40	@ 0x28
 8106a4e:	2102      	movs	r1, #2
 8106a50:	4618      	mov	r0, r3
 8106a52:	f001 fbf5 	bl	8108240 <RCCEx_PLL3_Config>
 8106a56:	4603      	mov	r3, r0
 8106a58:	2b00      	cmp	r3, #0
 8106a5a:	d002      	beq.n	8106a62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8106a5c:	2301      	movs	r3, #1
 8106a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8106a6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8106a70:	2300      	movs	r3, #0
 8106a72:	667b      	str	r3, [r7, #100]	@ 0x64
 8106a74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8106a78:	460b      	mov	r3, r1
 8106a7a:	4313      	orrs	r3, r2
 8106a7c:	d038      	beq.n	8106af0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8106a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106a86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106a8a:	d018      	beq.n	8106abe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8106a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106a90:	d811      	bhi.n	8106ab6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106a96:	d014      	beq.n	8106ac2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8106a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106a9c:	d80b      	bhi.n	8106ab6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106a9e:	2b00      	cmp	r3, #0
 8106aa0:	d011      	beq.n	8106ac6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8106aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106aa6:	d106      	bne.n	8106ab6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106aa8:	4bc3      	ldr	r3, [pc, #780]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106aac:	4ac2      	ldr	r2, [pc, #776]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8106ab4:	e008      	b.n	8106ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106ab6:	2301      	movs	r3, #1
 8106ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106abc:	e004      	b.n	8106ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106abe:	bf00      	nop
 8106ac0:	e002      	b.n	8106ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106ac2:	bf00      	nop
 8106ac4:	e000      	b.n	8106ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106acc:	2b00      	cmp	r3, #0
 8106ace:	d10b      	bne.n	8106ae8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106ad0:	4bb9      	ldr	r3, [pc, #740]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106ad4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8106ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106ae0:	4ab5      	ldr	r2, [pc, #724]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106ae2:	430b      	orrs	r3, r1
 8106ae4:	6553      	str	r3, [r2, #84]	@ 0x54
 8106ae6:	e003      	b.n	8106af0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106af8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8106afc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8106afe:	2300      	movs	r3, #0
 8106b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8106b02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8106b06:	460b      	mov	r3, r1
 8106b08:	4313      	orrs	r3, r2
 8106b0a:	d009      	beq.n	8106b20 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106b0c:	4baa      	ldr	r3, [pc, #680]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8106b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106b1a:	4aa7      	ldr	r2, [pc, #668]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b1c:	430b      	orrs	r3, r1
 8106b1e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b28:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8106b2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8106b2e:	2300      	movs	r3, #0
 8106b30:	657b      	str	r3, [r7, #84]	@ 0x54
 8106b32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8106b36:	460b      	mov	r3, r1
 8106b38:	4313      	orrs	r3, r2
 8106b3a:	d00a      	beq.n	8106b52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106b3c:	4b9e      	ldr	r3, [pc, #632]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b3e:	691b      	ldr	r3, [r3, #16]
 8106b40:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8106b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106b4c:	4a9a      	ldr	r2, [pc, #616]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b4e:	430b      	orrs	r3, r1
 8106b50:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8106b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106b60:	2300      	movs	r3, #0
 8106b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106b64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8106b68:	460b      	mov	r3, r1
 8106b6a:	4313      	orrs	r3, r2
 8106b6c:	d009      	beq.n	8106b82 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106b6e:	4b92      	ldr	r3, [pc, #584]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b72:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8106b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106b7c:	4a8e      	ldr	r2, [pc, #568]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b7e:	430b      	orrs	r3, r1
 8106b80:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b8a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8106b8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8106b90:	2300      	movs	r3, #0
 8106b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8106b94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8106b98:	460b      	mov	r3, r1
 8106b9a:	4313      	orrs	r3, r2
 8106b9c:	d00e      	beq.n	8106bbc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106b9e:	4b86      	ldr	r3, [pc, #536]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106ba0:	691b      	ldr	r3, [r3, #16]
 8106ba2:	4a85      	ldr	r2, [pc, #532]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106ba4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8106ba8:	6113      	str	r3, [r2, #16]
 8106baa:	4b83      	ldr	r3, [pc, #524]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bac:	6919      	ldr	r1, [r3, #16]
 8106bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8106bb6:	4a80      	ldr	r2, [pc, #512]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bb8:	430b      	orrs	r3, r1
 8106bba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bc4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8106bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8106bca:	2300      	movs	r3, #0
 8106bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106bce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8106bd2:	460b      	mov	r3, r1
 8106bd4:	4313      	orrs	r3, r2
 8106bd6:	d009      	beq.n	8106bec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106bd8:	4b77      	ldr	r3, [pc, #476]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106bdc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106be6:	4a74      	ldr	r2, [pc, #464]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106be8:	430b      	orrs	r3, r1
 8106bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bf4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8106bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8106bfa:	2300      	movs	r3, #0
 8106bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8106bfe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8106c02:	460b      	mov	r3, r1
 8106c04:	4313      	orrs	r3, r2
 8106c06:	d00a      	beq.n	8106c1e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106c08:	4b6b      	ldr	r3, [pc, #428]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106c0c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8106c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8106c18:	4a67      	ldr	r2, [pc, #412]	@ (8106db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c1a:	430b      	orrs	r3, r1
 8106c1c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8106c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c26:	2100      	movs	r1, #0
 8106c28:	62b9      	str	r1, [r7, #40]	@ 0x28
 8106c2a:	f003 0301 	and.w	r3, r3, #1
 8106c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8106c30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8106c34:	460b      	mov	r3, r1
 8106c36:	4313      	orrs	r3, r2
 8106c38:	d011      	beq.n	8106c5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c3e:	3308      	adds	r3, #8
 8106c40:	2100      	movs	r1, #0
 8106c42:	4618      	mov	r0, r3
 8106c44:	f001 fa4a 	bl	81080dc <RCCEx_PLL2_Config>
 8106c48:	4603      	mov	r3, r0
 8106c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8106c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c52:	2b00      	cmp	r3, #0
 8106c54:	d003      	beq.n	8106c5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8106c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c66:	2100      	movs	r1, #0
 8106c68:	6239      	str	r1, [r7, #32]
 8106c6a:	f003 0302 	and.w	r3, r3, #2
 8106c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8106c70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8106c74:	460b      	mov	r3, r1
 8106c76:	4313      	orrs	r3, r2
 8106c78:	d011      	beq.n	8106c9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c7e:	3308      	adds	r3, #8
 8106c80:	2101      	movs	r1, #1
 8106c82:	4618      	mov	r0, r3
 8106c84:	f001 fa2a 	bl	81080dc <RCCEx_PLL2_Config>
 8106c88:	4603      	mov	r3, r0
 8106c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8106c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c92:	2b00      	cmp	r3, #0
 8106c94:	d003      	beq.n	8106c9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8106c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ca6:	2100      	movs	r1, #0
 8106ca8:	61b9      	str	r1, [r7, #24]
 8106caa:	f003 0304 	and.w	r3, r3, #4
 8106cae:	61fb      	str	r3, [r7, #28]
 8106cb0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8106cb4:	460b      	mov	r3, r1
 8106cb6:	4313      	orrs	r3, r2
 8106cb8:	d011      	beq.n	8106cde <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cbe:	3308      	adds	r3, #8
 8106cc0:	2102      	movs	r1, #2
 8106cc2:	4618      	mov	r0, r3
 8106cc4:	f001 fa0a 	bl	81080dc <RCCEx_PLL2_Config>
 8106cc8:	4603      	mov	r3, r0
 8106cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8106cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106cd2:	2b00      	cmp	r3, #0
 8106cd4:	d003      	beq.n	8106cde <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106cda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8106cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ce6:	2100      	movs	r1, #0
 8106ce8:	6139      	str	r1, [r7, #16]
 8106cea:	f003 0308 	and.w	r3, r3, #8
 8106cee:	617b      	str	r3, [r7, #20]
 8106cf0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106cf4:	460b      	mov	r3, r1
 8106cf6:	4313      	orrs	r3, r2
 8106cf8:	d011      	beq.n	8106d1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cfe:	3328      	adds	r3, #40	@ 0x28
 8106d00:	2100      	movs	r1, #0
 8106d02:	4618      	mov	r0, r3
 8106d04:	f001 fa9c 	bl	8108240 <RCCEx_PLL3_Config>
 8106d08:	4603      	mov	r3, r0
 8106d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8106d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d12:	2b00      	cmp	r3, #0
 8106d14:	d003      	beq.n	8106d1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8106d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d26:	2100      	movs	r1, #0
 8106d28:	60b9      	str	r1, [r7, #8]
 8106d2a:	f003 0310 	and.w	r3, r3, #16
 8106d2e:	60fb      	str	r3, [r7, #12]
 8106d30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106d34:	460b      	mov	r3, r1
 8106d36:	4313      	orrs	r3, r2
 8106d38:	d011      	beq.n	8106d5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d3e:	3328      	adds	r3, #40	@ 0x28
 8106d40:	2101      	movs	r1, #1
 8106d42:	4618      	mov	r0, r3
 8106d44:	f001 fa7c 	bl	8108240 <RCCEx_PLL3_Config>
 8106d48:	4603      	mov	r3, r0
 8106d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8106d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d52:	2b00      	cmp	r3, #0
 8106d54:	d003      	beq.n	8106d5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8106d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d66:	2100      	movs	r1, #0
 8106d68:	6039      	str	r1, [r7, #0]
 8106d6a:	f003 0320 	and.w	r3, r3, #32
 8106d6e:	607b      	str	r3, [r7, #4]
 8106d70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8106d74:	460b      	mov	r3, r1
 8106d76:	4313      	orrs	r3, r2
 8106d78:	d011      	beq.n	8106d9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d7e:	3328      	adds	r3, #40	@ 0x28
 8106d80:	2102      	movs	r1, #2
 8106d82:	4618      	mov	r0, r3
 8106d84:	f001 fa5c 	bl	8108240 <RCCEx_PLL3_Config>
 8106d88:	4603      	mov	r3, r0
 8106d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8106d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d92:	2b00      	cmp	r3, #0
 8106d94:	d003      	beq.n	8106d9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8106d9e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8106da2:	2b00      	cmp	r3, #0
 8106da4:	d101      	bne.n	8106daa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8106da6:	2300      	movs	r3, #0
 8106da8:	e000      	b.n	8106dac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8106daa:	2301      	movs	r3, #1
}
 8106dac:	4618      	mov	r0, r3
 8106dae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8106db2:	46bd      	mov	sp, r7
 8106db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8106db8:	58024400 	.word	0x58024400

08106dbc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8106dbc:	b580      	push	{r7, lr}
 8106dbe:	b090      	sub	sp, #64	@ 0x40
 8106dc0:	af00      	add	r7, sp, #0
 8106dc2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8106dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106dca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8106dce:	430b      	orrs	r3, r1
 8106dd0:	f040 8094 	bne.w	8106efc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8106dd4:	4b9e      	ldr	r3, [pc, #632]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106dd8:	f003 0307 	and.w	r3, r3, #7
 8106ddc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8106dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106de0:	2b04      	cmp	r3, #4
 8106de2:	f200 8087 	bhi.w	8106ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8106de6:	a201      	add	r2, pc, #4	@ (adr r2, 8106dec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8106de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106dec:	08106e01 	.word	0x08106e01
 8106df0:	08106e29 	.word	0x08106e29
 8106df4:	08106e51 	.word	0x08106e51
 8106df8:	08106eed 	.word	0x08106eed
 8106dfc:	08106e79 	.word	0x08106e79
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106e00:	4b93      	ldr	r3, [pc, #588]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106e02:	681b      	ldr	r3, [r3, #0]
 8106e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106e08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106e0c:	d108      	bne.n	8106e20 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106e12:	4618      	mov	r0, r3
 8106e14:	f001 f810 	bl	8107e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106e1c:	f000 bd45 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106e20:	2300      	movs	r3, #0
 8106e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106e24:	f000 bd41 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106e28:	4b89      	ldr	r3, [pc, #548]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106e2a:	681b      	ldr	r3, [r3, #0]
 8106e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106e30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106e34:	d108      	bne.n	8106e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106e36:	f107 0318 	add.w	r3, r7, #24
 8106e3a:	4618      	mov	r0, r3
 8106e3c:	f000 fd54 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106e40:	69bb      	ldr	r3, [r7, #24]
 8106e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106e44:	f000 bd31 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106e48:	2300      	movs	r3, #0
 8106e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106e4c:	f000 bd2d 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106e50:	4b7f      	ldr	r3, [pc, #508]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106e52:	681b      	ldr	r3, [r3, #0]
 8106e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106e5c:	d108      	bne.n	8106e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106e5e:	f107 030c 	add.w	r3, r7, #12
 8106e62:	4618      	mov	r0, r3
 8106e64:	f000 fe94 	bl	8107b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106e68:	68fb      	ldr	r3, [r7, #12]
 8106e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106e6c:	f000 bd1d 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106e70:	2300      	movs	r3, #0
 8106e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106e74:	f000 bd19 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106e78:	4b75      	ldr	r3, [pc, #468]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106e7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106e80:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106e82:	4b73      	ldr	r3, [pc, #460]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106e84:	681b      	ldr	r3, [r3, #0]
 8106e86:	f003 0304 	and.w	r3, r3, #4
 8106e8a:	2b04      	cmp	r3, #4
 8106e8c:	d10c      	bne.n	8106ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8106e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106e90:	2b00      	cmp	r3, #0
 8106e92:	d109      	bne.n	8106ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106e94:	4b6e      	ldr	r3, [pc, #440]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106e96:	681b      	ldr	r3, [r3, #0]
 8106e98:	08db      	lsrs	r3, r3, #3
 8106e9a:	f003 0303 	and.w	r3, r3, #3
 8106e9e:	4a6d      	ldr	r2, [pc, #436]	@ (8107054 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8106ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8106ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106ea6:	e01f      	b.n	8106ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106ea8:	4b69      	ldr	r3, [pc, #420]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106eaa:	681b      	ldr	r3, [r3, #0]
 8106eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106eb4:	d106      	bne.n	8106ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8106eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106ebc:	d102      	bne.n	8106ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106ebe:	4b66      	ldr	r3, [pc, #408]	@ (8107058 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8106ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106ec2:	e011      	b.n	8106ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106ec4:	4b62      	ldr	r3, [pc, #392]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106ec6:	681b      	ldr	r3, [r3, #0]
 8106ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106ecc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106ed0:	d106      	bne.n	8106ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8106ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106ed8:	d102      	bne.n	8106ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106eda:	4b60      	ldr	r3, [pc, #384]	@ (810705c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8106edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106ede:	e003      	b.n	8106ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106ee0:	2300      	movs	r3, #0
 8106ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106ee4:	f000 bce1 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106ee8:	f000 bcdf 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106eec:	4b5c      	ldr	r3, [pc, #368]	@ (8107060 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8106eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106ef0:	f000 bcdb 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106ef4:	2300      	movs	r3, #0
 8106ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106ef8:	f000 bcd7 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106f00:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8106f04:	430b      	orrs	r3, r1
 8106f06:	f040 80ad 	bne.w	8107064 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8106f0a:	4b51      	ldr	r3, [pc, #324]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106f0e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8106f12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8106f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106f1a:	d056      	beq.n	8106fca <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8106f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106f22:	f200 8090 	bhi.w	8107046 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f28:	2bc0      	cmp	r3, #192	@ 0xc0
 8106f2a:	f000 8088 	beq.w	810703e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8106f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f30:	2bc0      	cmp	r3, #192	@ 0xc0
 8106f32:	f200 8088 	bhi.w	8107046 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f38:	2b80      	cmp	r3, #128	@ 0x80
 8106f3a:	d032      	beq.n	8106fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8106f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f3e:	2b80      	cmp	r3, #128	@ 0x80
 8106f40:	f200 8081 	bhi.w	8107046 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f46:	2b00      	cmp	r3, #0
 8106f48:	d003      	beq.n	8106f52 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8106f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f4c:	2b40      	cmp	r3, #64	@ 0x40
 8106f4e:	d014      	beq.n	8106f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8106f50:	e079      	b.n	8107046 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106f52:	4b3f      	ldr	r3, [pc, #252]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f54:	681b      	ldr	r3, [r3, #0]
 8106f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106f5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106f5e:	d108      	bne.n	8106f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106f64:	4618      	mov	r0, r3
 8106f66:	f000 ff67 	bl	8107e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f6e:	f000 bc9c 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f72:	2300      	movs	r3, #0
 8106f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f76:	f000 bc98 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106f7a:	4b35      	ldr	r3, [pc, #212]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f7c:	681b      	ldr	r3, [r3, #0]
 8106f7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106f82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106f86:	d108      	bne.n	8106f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f88:	f107 0318 	add.w	r3, r7, #24
 8106f8c:	4618      	mov	r0, r3
 8106f8e:	f000 fcab 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106f92:	69bb      	ldr	r3, [r7, #24]
 8106f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f96:	f000 bc88 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f9a:	2300      	movs	r3, #0
 8106f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f9e:	f000 bc84 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106fa4:	681b      	ldr	r3, [r3, #0]
 8106fa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106fae:	d108      	bne.n	8106fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106fb0:	f107 030c 	add.w	r3, r7, #12
 8106fb4:	4618      	mov	r0, r3
 8106fb6:	f000 fdeb 	bl	8107b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106fba:	68fb      	ldr	r3, [r7, #12]
 8106fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106fbe:	f000 bc74 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106fc2:	2300      	movs	r3, #0
 8106fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106fc6:	f000 bc70 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106fca:	4b21      	ldr	r3, [pc, #132]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106fce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106fd2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106fd6:	681b      	ldr	r3, [r3, #0]
 8106fd8:	f003 0304 	and.w	r3, r3, #4
 8106fdc:	2b04      	cmp	r3, #4
 8106fde:	d10c      	bne.n	8106ffa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8106fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106fe2:	2b00      	cmp	r3, #0
 8106fe4:	d109      	bne.n	8106ffa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106fe8:	681b      	ldr	r3, [r3, #0]
 8106fea:	08db      	lsrs	r3, r3, #3
 8106fec:	f003 0303 	and.w	r3, r3, #3
 8106ff0:	4a18      	ldr	r2, [pc, #96]	@ (8107054 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8106ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8106ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106ff8:	e01f      	b.n	810703a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106ffa:	4b15      	ldr	r3, [pc, #84]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106ffc:	681b      	ldr	r3, [r3, #0]
 8106ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107006:	d106      	bne.n	8107016 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8107008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810700a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810700e:	d102      	bne.n	8107016 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107010:	4b11      	ldr	r3, [pc, #68]	@ (8107058 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107014:	e011      	b.n	810703a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107016:	4b0e      	ldr	r3, [pc, #56]	@ (8107050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107018:	681b      	ldr	r3, [r3, #0]
 810701a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810701e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107022:	d106      	bne.n	8107032 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8107024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810702a:	d102      	bne.n	8107032 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810702c:	4b0b      	ldr	r3, [pc, #44]	@ (810705c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107030:	e003      	b.n	810703a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107032:	2300      	movs	r3, #0
 8107034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107036:	f000 bc38 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810703a:	f000 bc36 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810703e:	4b08      	ldr	r3, [pc, #32]	@ (8107060 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107042:	f000 bc32 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107046:	2300      	movs	r3, #0
 8107048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810704a:	f000 bc2e 	b.w	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810704e:	bf00      	nop
 8107050:	58024400 	.word	0x58024400
 8107054:	03d09000 	.word	0x03d09000
 8107058:	003d0900 	.word	0x003d0900
 810705c:	017d7840 	.word	0x017d7840
 8107060:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107068:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 810706c:	430b      	orrs	r3, r1
 810706e:	f040 809c 	bne.w	81071aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8107072:	4b9e      	ldr	r3, [pc, #632]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107076:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 810707a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810707e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107082:	d054      	beq.n	810712e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107086:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810708a:	f200 808b 	bhi.w	81071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107090:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107094:	f000 8083 	beq.w	810719e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810709a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810709e:	f200 8081 	bhi.w	81071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81070a8:	d02f      	beq.n	810710a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81070b0:	d878      	bhi.n	81071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070b4:	2b00      	cmp	r3, #0
 81070b6:	d004      	beq.n	81070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 81070b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81070be:	d012      	beq.n	81070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 81070c0:	e070      	b.n	81071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81070c2:	4b8a      	ldr	r3, [pc, #552]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81070c4:	681b      	ldr	r3, [r3, #0]
 81070c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81070ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81070ce:	d107      	bne.n	81070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81070d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81070d4:	4618      	mov	r0, r3
 81070d6:	f000 feaf 	bl	8107e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81070da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81070dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81070de:	e3e4      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81070e0:	2300      	movs	r3, #0
 81070e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81070e4:	e3e1      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81070e6:	4b81      	ldr	r3, [pc, #516]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81070e8:	681b      	ldr	r3, [r3, #0]
 81070ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81070ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81070f2:	d107      	bne.n	8107104 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81070f4:	f107 0318 	add.w	r3, r7, #24
 81070f8:	4618      	mov	r0, r3
 81070fa:	f000 fbf5 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81070fe:	69bb      	ldr	r3, [r7, #24]
 8107100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107102:	e3d2      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107104:	2300      	movs	r3, #0
 8107106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107108:	e3cf      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810710a:	4b78      	ldr	r3, [pc, #480]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810710c:	681b      	ldr	r3, [r3, #0]
 810710e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107116:	d107      	bne.n	8107128 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107118:	f107 030c 	add.w	r3, r7, #12
 810711c:	4618      	mov	r0, r3
 810711e:	f000 fd37 	bl	8107b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107122:	68fb      	ldr	r3, [r7, #12]
 8107124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107126:	e3c0      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107128:	2300      	movs	r3, #0
 810712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810712c:	e3bd      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810712e:	4b6f      	ldr	r3, [pc, #444]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107132:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107136:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107138:	4b6c      	ldr	r3, [pc, #432]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810713a:	681b      	ldr	r3, [r3, #0]
 810713c:	f003 0304 	and.w	r3, r3, #4
 8107140:	2b04      	cmp	r3, #4
 8107142:	d10c      	bne.n	810715e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8107144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107146:	2b00      	cmp	r3, #0
 8107148:	d109      	bne.n	810715e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810714a:	4b68      	ldr	r3, [pc, #416]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810714c:	681b      	ldr	r3, [r3, #0]
 810714e:	08db      	lsrs	r3, r3, #3
 8107150:	f003 0303 	and.w	r3, r3, #3
 8107154:	4a66      	ldr	r2, [pc, #408]	@ (81072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107156:	fa22 f303 	lsr.w	r3, r2, r3
 810715a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810715c:	e01e      	b.n	810719c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810715e:	4b63      	ldr	r3, [pc, #396]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107160:	681b      	ldr	r3, [r3, #0]
 8107162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810716a:	d106      	bne.n	810717a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 810716c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810716e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107172:	d102      	bne.n	810717a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107174:	4b5f      	ldr	r3, [pc, #380]	@ (81072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107178:	e010      	b.n	810719c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810717a:	4b5c      	ldr	r3, [pc, #368]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810717c:	681b      	ldr	r3, [r3, #0]
 810717e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107186:	d106      	bne.n	8107196 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810718a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810718e:	d102      	bne.n	8107196 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107190:	4b59      	ldr	r3, [pc, #356]	@ (81072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107194:	e002      	b.n	810719c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107196:	2300      	movs	r3, #0
 8107198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810719a:	e386      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810719c:	e385      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810719e:	4b57      	ldr	r3, [pc, #348]	@ (81072fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81071a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81071a2:	e382      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81071a4:	2300      	movs	r3, #0
 81071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81071a8:	e37f      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81071aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 81071ae:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 81071b2:	430b      	orrs	r3, r1
 81071b4:	f040 80a7 	bne.w	8107306 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 81071b8:	4b4c      	ldr	r3, [pc, #304]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81071bc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 81071c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81071c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81071c8:	d055      	beq.n	8107276 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 81071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81071d0:	f200 8096 	bhi.w	8107300 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81071da:	f000 8084 	beq.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 81071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81071e4:	f200 808c 	bhi.w	8107300 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81071ee:	d030      	beq.n	8107252 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81071f6:	f200 8083 	bhi.w	8107300 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071fc:	2b00      	cmp	r3, #0
 81071fe:	d004      	beq.n	810720a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8107200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107206:	d012      	beq.n	810722e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8107208:	e07a      	b.n	8107300 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810720a:	4b38      	ldr	r3, [pc, #224]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810720c:	681b      	ldr	r3, [r3, #0]
 810720e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107216:	d107      	bne.n	8107228 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810721c:	4618      	mov	r0, r3
 810721e:	f000 fe0b 	bl	8107e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107226:	e340      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107228:	2300      	movs	r3, #0
 810722a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810722c:	e33d      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810722e:	4b2f      	ldr	r3, [pc, #188]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107230:	681b      	ldr	r3, [r3, #0]
 8107232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107236:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810723a:	d107      	bne.n	810724c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810723c:	f107 0318 	add.w	r3, r7, #24
 8107240:	4618      	mov	r0, r3
 8107242:	f000 fb51 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107246:	69bb      	ldr	r3, [r7, #24]
 8107248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810724a:	e32e      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810724c:	2300      	movs	r3, #0
 810724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107250:	e32b      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107252:	4b26      	ldr	r3, [pc, #152]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107254:	681b      	ldr	r3, [r3, #0]
 8107256:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810725a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810725e:	d107      	bne.n	8107270 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107260:	f107 030c 	add.w	r3, r7, #12
 8107264:	4618      	mov	r0, r3
 8107266:	f000 fc93 	bl	8107b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810726a:	68fb      	ldr	r3, [r7, #12]
 810726c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810726e:	e31c      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107270:	2300      	movs	r3, #0
 8107272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107274:	e319      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107276:	4b1d      	ldr	r3, [pc, #116]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810727a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810727e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107280:	4b1a      	ldr	r3, [pc, #104]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107282:	681b      	ldr	r3, [r3, #0]
 8107284:	f003 0304 	and.w	r3, r3, #4
 8107288:	2b04      	cmp	r3, #4
 810728a:	d10c      	bne.n	81072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 810728c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810728e:	2b00      	cmp	r3, #0
 8107290:	d109      	bne.n	81072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107292:	4b16      	ldr	r3, [pc, #88]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107294:	681b      	ldr	r3, [r3, #0]
 8107296:	08db      	lsrs	r3, r3, #3
 8107298:	f003 0303 	and.w	r3, r3, #3
 810729c:	4a14      	ldr	r2, [pc, #80]	@ (81072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810729e:	fa22 f303 	lsr.w	r3, r2, r3
 81072a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81072a4:	e01e      	b.n	81072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81072a6:	4b11      	ldr	r3, [pc, #68]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81072a8:	681b      	ldr	r3, [r3, #0]
 81072aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81072ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81072b2:	d106      	bne.n	81072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 81072b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81072b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81072ba:	d102      	bne.n	81072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81072bc:	4b0d      	ldr	r3, [pc, #52]	@ (81072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81072be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81072c0:	e010      	b.n	81072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81072c2:	4b0a      	ldr	r3, [pc, #40]	@ (81072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81072c4:	681b      	ldr	r3, [r3, #0]
 81072c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81072ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81072ce:	d106      	bne.n	81072de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 81072d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81072d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81072d6:	d102      	bne.n	81072de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81072d8:	4b07      	ldr	r3, [pc, #28]	@ (81072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81072da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81072dc:	e002      	b.n	81072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81072de:	2300      	movs	r3, #0
 81072e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81072e2:	e2e2      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81072e4:	e2e1      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81072e6:	4b05      	ldr	r3, [pc, #20]	@ (81072fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81072e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81072ea:	e2de      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81072ec:	58024400 	.word	0x58024400
 81072f0:	03d09000 	.word	0x03d09000
 81072f4:	003d0900 	.word	0x003d0900
 81072f8:	017d7840 	.word	0x017d7840
 81072fc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8107300:	2300      	movs	r3, #0
 8107302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107304:	e2d1      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8107306:	e9d7 2300 	ldrd	r2, r3, [r7]
 810730a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810730e:	430b      	orrs	r3, r1
 8107310:	f040 809c 	bne.w	810744c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8107314:	4b93      	ldr	r3, [pc, #588]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107318:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 810731c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810731e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107324:	d054      	beq.n	81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8107326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107328:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810732c:	f200 808b 	bhi.w	8107446 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107332:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107336:	f000 8083 	beq.w	8107440 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 810733a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810733c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107340:	f200 8081 	bhi.w	8107446 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810734a:	d02f      	beq.n	81073ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 810734c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810734e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107352:	d878      	bhi.n	8107446 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107356:	2b00      	cmp	r3, #0
 8107358:	d004      	beq.n	8107364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810735a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810735c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107360:	d012      	beq.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8107362:	e070      	b.n	8107446 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107364:	4b7f      	ldr	r3, [pc, #508]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107366:	681b      	ldr	r3, [r3, #0]
 8107368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810736c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107370:	d107      	bne.n	8107382 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107376:	4618      	mov	r0, r3
 8107378:	f000 fd5e 	bl	8107e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810737c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810737e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107380:	e293      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107382:	2300      	movs	r3, #0
 8107384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107386:	e290      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107388:	4b76      	ldr	r3, [pc, #472]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810738a:	681b      	ldr	r3, [r3, #0]
 810738c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107394:	d107      	bne.n	81073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107396:	f107 0318 	add.w	r3, r7, #24
 810739a:	4618      	mov	r0, r3
 810739c:	f000 faa4 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81073a0:	69bb      	ldr	r3, [r7, #24]
 81073a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81073a4:	e281      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81073a6:	2300      	movs	r3, #0
 81073a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81073aa:	e27e      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81073ac:	4b6d      	ldr	r3, [pc, #436]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81073ae:	681b      	ldr	r3, [r3, #0]
 81073b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81073b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81073b8:	d107      	bne.n	81073ca <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81073ba:	f107 030c 	add.w	r3, r7, #12
 81073be:	4618      	mov	r0, r3
 81073c0:	f000 fbe6 	bl	8107b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81073c4:	68fb      	ldr	r3, [r7, #12]
 81073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81073c8:	e26f      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81073ca:	2300      	movs	r3, #0
 81073cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81073ce:	e26c      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81073d0:	4b64      	ldr	r3, [pc, #400]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81073d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81073d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81073d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81073da:	4b62      	ldr	r3, [pc, #392]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81073dc:	681b      	ldr	r3, [r3, #0]
 81073de:	f003 0304 	and.w	r3, r3, #4
 81073e2:	2b04      	cmp	r3, #4
 81073e4:	d10c      	bne.n	8107400 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 81073e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81073e8:	2b00      	cmp	r3, #0
 81073ea:	d109      	bne.n	8107400 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81073ec:	4b5d      	ldr	r3, [pc, #372]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81073ee:	681b      	ldr	r3, [r3, #0]
 81073f0:	08db      	lsrs	r3, r3, #3
 81073f2:	f003 0303 	and.w	r3, r3, #3
 81073f6:	4a5c      	ldr	r2, [pc, #368]	@ (8107568 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81073f8:	fa22 f303 	lsr.w	r3, r2, r3
 81073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81073fe:	e01e      	b.n	810743e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107400:	4b58      	ldr	r3, [pc, #352]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107402:	681b      	ldr	r3, [r3, #0]
 8107404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810740c:	d106      	bne.n	810741c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810740e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107414:	d102      	bne.n	810741c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107416:	4b55      	ldr	r3, [pc, #340]	@ (810756c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8107418:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810741a:	e010      	b.n	810743e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810741c:	4b51      	ldr	r3, [pc, #324]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810741e:	681b      	ldr	r3, [r3, #0]
 8107420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107428:	d106      	bne.n	8107438 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 810742a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810742c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107430:	d102      	bne.n	8107438 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107432:	4b4f      	ldr	r3, [pc, #316]	@ (8107570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107436:	e002      	b.n	810743e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107438:	2300      	movs	r3, #0
 810743a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810743c:	e235      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810743e:	e234      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107440:	4b4c      	ldr	r3, [pc, #304]	@ (8107574 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8107442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107444:	e231      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107446:	2300      	movs	r3, #0
 8107448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810744a:	e22e      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 810744c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107450:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8107454:	430b      	orrs	r3, r1
 8107456:	f040 808f 	bne.w	8107578 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810745a:	4b42      	ldr	r3, [pc, #264]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810745c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810745e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8107462:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8107464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107466:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810746a:	d06b      	beq.n	8107544 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 810746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810746e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107472:	d874      	bhi.n	810755e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107476:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810747a:	d056      	beq.n	810752a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 810747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810747e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107482:	d86c      	bhi.n	810755e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107486:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810748a:	d03b      	beq.n	8107504 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 810748c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810748e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107492:	d864      	bhi.n	810755e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107496:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810749a:	d021      	beq.n	81074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810749e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81074a2:	d85c      	bhi.n	810755e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81074a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81074a6:	2b00      	cmp	r3, #0
 81074a8:	d004      	beq.n	81074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 81074aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81074ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81074b0:	d004      	beq.n	81074bc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 81074b2:	e054      	b.n	810755e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 81074b4:	f7fe fa4c 	bl	8105950 <HAL_RCC_GetPCLK1Freq>
 81074b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81074ba:	e1f6      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81074bc:	4b29      	ldr	r3, [pc, #164]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074be:	681b      	ldr	r3, [r3, #0]
 81074c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81074c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81074c8:	d107      	bne.n	81074da <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81074ca:	f107 0318 	add.w	r3, r7, #24
 81074ce:	4618      	mov	r0, r3
 81074d0:	f000 fa0a 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81074d4:	69fb      	ldr	r3, [r7, #28]
 81074d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81074d8:	e1e7      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81074da:	2300      	movs	r3, #0
 81074dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81074de:	e1e4      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81074e0:	4b20      	ldr	r3, [pc, #128]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074e2:	681b      	ldr	r3, [r3, #0]
 81074e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81074e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81074ec:	d107      	bne.n	81074fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81074ee:	f107 030c 	add.w	r3, r7, #12
 81074f2:	4618      	mov	r0, r3
 81074f4:	f000 fb4c 	bl	8107b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81074f8:	693b      	ldr	r3, [r7, #16]
 81074fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81074fc:	e1d5      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81074fe:	2300      	movs	r3, #0
 8107500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107502:	e1d2      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107504:	4b17      	ldr	r3, [pc, #92]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107506:	681b      	ldr	r3, [r3, #0]
 8107508:	f003 0304 	and.w	r3, r3, #4
 810750c:	2b04      	cmp	r3, #4
 810750e:	d109      	bne.n	8107524 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107510:	4b14      	ldr	r3, [pc, #80]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107512:	681b      	ldr	r3, [r3, #0]
 8107514:	08db      	lsrs	r3, r3, #3
 8107516:	f003 0303 	and.w	r3, r3, #3
 810751a:	4a13      	ldr	r2, [pc, #76]	@ (8107568 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810751c:	fa22 f303 	lsr.w	r3, r2, r3
 8107520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107522:	e1c2      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107524:	2300      	movs	r3, #0
 8107526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107528:	e1bf      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810752a:	4b0e      	ldr	r3, [pc, #56]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810752c:	681b      	ldr	r3, [r3, #0]
 810752e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107536:	d102      	bne.n	810753e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8107538:	4b0c      	ldr	r3, [pc, #48]	@ (810756c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810753a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810753c:	e1b5      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810753e:	2300      	movs	r3, #0
 8107540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107542:	e1b2      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107544:	4b07      	ldr	r3, [pc, #28]	@ (8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107546:	681b      	ldr	r3, [r3, #0]
 8107548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810754c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107550:	d102      	bne.n	8107558 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8107552:	4b07      	ldr	r3, [pc, #28]	@ (8107570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107556:	e1a8      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107558:	2300      	movs	r3, #0
 810755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810755c:	e1a5      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810755e:	2300      	movs	r3, #0
 8107560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107562:	e1a2      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107564:	58024400 	.word	0x58024400
 8107568:	03d09000 	.word	0x03d09000
 810756c:	003d0900 	.word	0x003d0900
 8107570:	017d7840 	.word	0x017d7840
 8107574:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107578:	e9d7 2300 	ldrd	r2, r3, [r7]
 810757c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8107580:	430b      	orrs	r3, r1
 8107582:	d173      	bne.n	810766c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8107584:	4b9c      	ldr	r3, [pc, #624]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107588:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810758c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107590:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107594:	d02f      	beq.n	81075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8107596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107598:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810759c:	d863      	bhi.n	8107666 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810759e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81075a0:	2b00      	cmp	r3, #0
 81075a2:	d004      	beq.n	81075ae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81075a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81075a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81075aa:	d012      	beq.n	81075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 81075ac:	e05b      	b.n	8107666 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81075ae:	4b92      	ldr	r3, [pc, #584]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81075b0:	681b      	ldr	r3, [r3, #0]
 81075b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81075b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81075ba:	d107      	bne.n	81075cc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81075bc:	f107 0318 	add.w	r3, r7, #24
 81075c0:	4618      	mov	r0, r3
 81075c2:	f000 f991 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81075c6:	69bb      	ldr	r3, [r7, #24]
 81075c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075ca:	e16e      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075cc:	2300      	movs	r3, #0
 81075ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81075d0:	e16b      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81075d2:	4b89      	ldr	r3, [pc, #548]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81075d4:	681b      	ldr	r3, [r3, #0]
 81075d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81075da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81075de:	d107      	bne.n	81075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81075e0:	f107 030c 	add.w	r3, r7, #12
 81075e4:	4618      	mov	r0, r3
 81075e6:	f000 fad3 	bl	8107b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81075ea:	697b      	ldr	r3, [r7, #20]
 81075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075ee:	e15c      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075f0:	2300      	movs	r3, #0
 81075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81075f4:	e159      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81075f6:	4b80      	ldr	r3, [pc, #512]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81075f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81075fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81075fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107600:	4b7d      	ldr	r3, [pc, #500]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107602:	681b      	ldr	r3, [r3, #0]
 8107604:	f003 0304 	and.w	r3, r3, #4
 8107608:	2b04      	cmp	r3, #4
 810760a:	d10c      	bne.n	8107626 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 810760c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810760e:	2b00      	cmp	r3, #0
 8107610:	d109      	bne.n	8107626 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107612:	4b79      	ldr	r3, [pc, #484]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107614:	681b      	ldr	r3, [r3, #0]
 8107616:	08db      	lsrs	r3, r3, #3
 8107618:	f003 0303 	and.w	r3, r3, #3
 810761c:	4a77      	ldr	r2, [pc, #476]	@ (81077fc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810761e:	fa22 f303 	lsr.w	r3, r2, r3
 8107622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107624:	e01e      	b.n	8107664 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107626:	4b74      	ldr	r3, [pc, #464]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107628:	681b      	ldr	r3, [r3, #0]
 810762a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810762e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107632:	d106      	bne.n	8107642 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8107634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810763a:	d102      	bne.n	8107642 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810763c:	4b70      	ldr	r3, [pc, #448]	@ (8107800 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810763e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107640:	e010      	b.n	8107664 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107642:	4b6d      	ldr	r3, [pc, #436]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107644:	681b      	ldr	r3, [r3, #0]
 8107646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810764a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810764e:	d106      	bne.n	810765e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8107650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107656:	d102      	bne.n	810765e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107658:	4b6a      	ldr	r3, [pc, #424]	@ (8107804 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810765a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810765c:	e002      	b.n	8107664 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810765e:	2300      	movs	r3, #0
 8107660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107662:	e122      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107664:	e121      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107666:	2300      	movs	r3, #0
 8107668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810766a:	e11e      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810766c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107670:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8107674:	430b      	orrs	r3, r1
 8107676:	d133      	bne.n	81076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8107678:	4b5f      	ldr	r3, [pc, #380]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810767a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810767c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107680:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107684:	2b00      	cmp	r3, #0
 8107686:	d004      	beq.n	8107692 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8107688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810768a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810768e:	d012      	beq.n	81076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8107690:	e023      	b.n	81076da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107692:	4b59      	ldr	r3, [pc, #356]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107694:	681b      	ldr	r3, [r3, #0]
 8107696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810769a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810769e:	d107      	bne.n	81076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81076a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81076a4:	4618      	mov	r0, r3
 81076a6:	f000 fbc7 	bl	8107e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81076aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81076ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81076ae:	e0fc      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81076b0:	2300      	movs	r3, #0
 81076b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81076b4:	e0f9      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81076b6:	4b50      	ldr	r3, [pc, #320]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076b8:	681b      	ldr	r3, [r3, #0]
 81076ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81076be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81076c2:	d107      	bne.n	81076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81076c4:	f107 0318 	add.w	r3, r7, #24
 81076c8:	4618      	mov	r0, r3
 81076ca:	f000 f90d 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81076ce:	6a3b      	ldr	r3, [r7, #32]
 81076d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81076d2:	e0ea      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81076d4:	2300      	movs	r3, #0
 81076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81076d8:	e0e7      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81076da:	2300      	movs	r3, #0
 81076dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81076de:	e0e4      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81076e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81076e4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 81076e8:	430b      	orrs	r3, r1
 81076ea:	f040 808d 	bne.w	8107808 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 81076ee:	4b42      	ldr	r3, [pc, #264]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81076f2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 81076f6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81076fe:	d06b      	beq.n	81077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8107700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107706:	d874      	bhi.n	81077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810770a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810770e:	d056      	beq.n	81077be <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8107710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107716:	d86c      	bhi.n	81077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810771a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810771e:	d03b      	beq.n	8107798 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8107720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107722:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107726:	d864      	bhi.n	81077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810772a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810772e:	d021      	beq.n	8107774 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8107730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107736:	d85c      	bhi.n	81077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810773a:	2b00      	cmp	r3, #0
 810773c:	d004      	beq.n	8107748 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810773e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107744:	d004      	beq.n	8107750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8107746:	e054      	b.n	81077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8107748:	f000 f8b8 	bl	81078bc <HAL_RCCEx_GetD3PCLK1Freq>
 810774c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810774e:	e0ac      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107750:	4b29      	ldr	r3, [pc, #164]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107752:	681b      	ldr	r3, [r3, #0]
 8107754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107758:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810775c:	d107      	bne.n	810776e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810775e:	f107 0318 	add.w	r3, r7, #24
 8107762:	4618      	mov	r0, r3
 8107764:	f000 f8c0 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107768:	69fb      	ldr	r3, [r7, #28]
 810776a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810776c:	e09d      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810776e:	2300      	movs	r3, #0
 8107770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107772:	e09a      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107774:	4b20      	ldr	r3, [pc, #128]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107776:	681b      	ldr	r3, [r3, #0]
 8107778:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810777c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107780:	d107      	bne.n	8107792 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107782:	f107 030c 	add.w	r3, r7, #12
 8107786:	4618      	mov	r0, r3
 8107788:	f000 fa02 	bl	8107b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810778c:	693b      	ldr	r3, [r7, #16]
 810778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107790:	e08b      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107792:	2300      	movs	r3, #0
 8107794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107796:	e088      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107798:	4b17      	ldr	r3, [pc, #92]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810779a:	681b      	ldr	r3, [r3, #0]
 810779c:	f003 0304 	and.w	r3, r3, #4
 81077a0:	2b04      	cmp	r3, #4
 81077a2:	d109      	bne.n	81077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81077a4:	4b14      	ldr	r3, [pc, #80]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81077a6:	681b      	ldr	r3, [r3, #0]
 81077a8:	08db      	lsrs	r3, r3, #3
 81077aa:	f003 0303 	and.w	r3, r3, #3
 81077ae:	4a13      	ldr	r2, [pc, #76]	@ (81077fc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81077b0:	fa22 f303 	lsr.w	r3, r2, r3
 81077b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81077b6:	e078      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81077b8:	2300      	movs	r3, #0
 81077ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077bc:	e075      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81077be:	4b0e      	ldr	r3, [pc, #56]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81077c0:	681b      	ldr	r3, [r3, #0]
 81077c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81077c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81077ca:	d102      	bne.n	81077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81077cc:	4b0c      	ldr	r3, [pc, #48]	@ (8107800 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81077ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81077d0:	e06b      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81077d2:	2300      	movs	r3, #0
 81077d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077d6:	e068      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81077d8:	4b07      	ldr	r3, [pc, #28]	@ (81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81077da:	681b      	ldr	r3, [r3, #0]
 81077dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81077e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81077e4:	d102      	bne.n	81077ec <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81077e6:	4b07      	ldr	r3, [pc, #28]	@ (8107804 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81077e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81077ea:	e05e      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81077ec:	2300      	movs	r3, #0
 81077ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077f0:	e05b      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81077f2:	2300      	movs	r3, #0
 81077f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077f6:	e058      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81077f8:	58024400 	.word	0x58024400
 81077fc:	03d09000 	.word	0x03d09000
 8107800:	003d0900 	.word	0x003d0900
 8107804:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8107808:	e9d7 2300 	ldrd	r2, r3, [r7]
 810780c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8107810:	430b      	orrs	r3, r1
 8107812:	d148      	bne.n	81078a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8107814:	4b27      	ldr	r3, [pc, #156]	@ (81078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107818:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810781c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810781e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107824:	d02a      	beq.n	810787c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8107826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810782c:	d838      	bhi.n	81078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810782e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107830:	2b00      	cmp	r3, #0
 8107832:	d004      	beq.n	810783e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8107834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810783a:	d00d      	beq.n	8107858 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 810783c:	e030      	b.n	81078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810783e:	4b1d      	ldr	r3, [pc, #116]	@ (81078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107840:	681b      	ldr	r3, [r3, #0]
 8107842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810784a:	d102      	bne.n	8107852 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 810784c:	4b1a      	ldr	r3, [pc, #104]	@ (81078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107850:	e02b      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107852:	2300      	movs	r3, #0
 8107854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107856:	e028      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107858:	4b16      	ldr	r3, [pc, #88]	@ (81078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810785a:	681b      	ldr	r3, [r3, #0]
 810785c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107864:	d107      	bne.n	8107876 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810786a:	4618      	mov	r0, r3
 810786c:	f000 fae4 	bl	8107e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107874:	e019      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107876:	2300      	movs	r3, #0
 8107878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810787a:	e016      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810787c:	4b0d      	ldr	r3, [pc, #52]	@ (81078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810787e:	681b      	ldr	r3, [r3, #0]
 8107880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107888:	d107      	bne.n	810789a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810788a:	f107 0318 	add.w	r3, r7, #24
 810788e:	4618      	mov	r0, r3
 8107890:	f000 f82a 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107894:	69fb      	ldr	r3, [r7, #28]
 8107896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107898:	e007      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810789a:	2300      	movs	r3, #0
 810789c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810789e:	e004      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81078a0:	2300      	movs	r3, #0
 81078a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81078a4:	e001      	b.n	81078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81078a6:	2300      	movs	r3, #0
 81078a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 81078aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 81078ac:	4618      	mov	r0, r3
 81078ae:	3740      	adds	r7, #64	@ 0x40
 81078b0:	46bd      	mov	sp, r7
 81078b2:	bd80      	pop	{r7, pc}
 81078b4:	58024400 	.word	0x58024400
 81078b8:	017d7840 	.word	0x017d7840

081078bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81078bc:	b580      	push	{r7, lr}
 81078be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81078c0:	f7fe f814 	bl	81058ec <HAL_RCC_GetHCLKFreq>
 81078c4:	4602      	mov	r2, r0
 81078c6:	4b06      	ldr	r3, [pc, #24]	@ (81078e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81078c8:	6a1b      	ldr	r3, [r3, #32]
 81078ca:	091b      	lsrs	r3, r3, #4
 81078cc:	f003 0307 	and.w	r3, r3, #7
 81078d0:	4904      	ldr	r1, [pc, #16]	@ (81078e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81078d2:	5ccb      	ldrb	r3, [r1, r3]
 81078d4:	f003 031f 	and.w	r3, r3, #31
 81078d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81078dc:	4618      	mov	r0, r3
 81078de:	bd80      	pop	{r7, pc}
 81078e0:	58024400 	.word	0x58024400
 81078e4:	0810be2c 	.word	0x0810be2c

081078e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81078e8:	b480      	push	{r7}
 81078ea:	b089      	sub	sp, #36	@ 0x24
 81078ec:	af00      	add	r7, sp, #0
 81078ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81078f0:	4ba1      	ldr	r3, [pc, #644]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81078f4:	f003 0303 	and.w	r3, r3, #3
 81078f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81078fa:	4b9f      	ldr	r3, [pc, #636]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81078fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81078fe:	0b1b      	lsrs	r3, r3, #12
 8107900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107904:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8107906:	4b9c      	ldr	r3, [pc, #624]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810790a:	091b      	lsrs	r3, r3, #4
 810790c:	f003 0301 	and.w	r3, r3, #1
 8107910:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8107912:	4b99      	ldr	r3, [pc, #612]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107916:	08db      	lsrs	r3, r3, #3
 8107918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810791c:	693a      	ldr	r2, [r7, #16]
 810791e:	fb02 f303 	mul.w	r3, r2, r3
 8107922:	ee07 3a90 	vmov	s15, r3
 8107926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810792a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810792e:	697b      	ldr	r3, [r7, #20]
 8107930:	2b00      	cmp	r3, #0
 8107932:	f000 8111 	beq.w	8107b58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8107936:	69bb      	ldr	r3, [r7, #24]
 8107938:	2b02      	cmp	r3, #2
 810793a:	f000 8083 	beq.w	8107a44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810793e:	69bb      	ldr	r3, [r7, #24]
 8107940:	2b02      	cmp	r3, #2
 8107942:	f200 80a1 	bhi.w	8107a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8107946:	69bb      	ldr	r3, [r7, #24]
 8107948:	2b00      	cmp	r3, #0
 810794a:	d003      	beq.n	8107954 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810794c:	69bb      	ldr	r3, [r7, #24]
 810794e:	2b01      	cmp	r3, #1
 8107950:	d056      	beq.n	8107a00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107952:	e099      	b.n	8107a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107954:	4b88      	ldr	r3, [pc, #544]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107956:	681b      	ldr	r3, [r3, #0]
 8107958:	f003 0320 	and.w	r3, r3, #32
 810795c:	2b00      	cmp	r3, #0
 810795e:	d02d      	beq.n	81079bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107960:	4b85      	ldr	r3, [pc, #532]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107962:	681b      	ldr	r3, [r3, #0]
 8107964:	08db      	lsrs	r3, r3, #3
 8107966:	f003 0303 	and.w	r3, r3, #3
 810796a:	4a84      	ldr	r2, [pc, #528]	@ (8107b7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810796c:	fa22 f303 	lsr.w	r3, r2, r3
 8107970:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107972:	68bb      	ldr	r3, [r7, #8]
 8107974:	ee07 3a90 	vmov	s15, r3
 8107978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810797c:	697b      	ldr	r3, [r7, #20]
 810797e:	ee07 3a90 	vmov	s15, r3
 8107982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810798a:	4b7b      	ldr	r3, [pc, #492]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810798e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107992:	ee07 3a90 	vmov	s15, r3
 8107996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810799a:	ed97 6a03 	vldr	s12, [r7, #12]
 810799e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8107b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81079a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81079a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81079aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81079ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81079b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81079b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81079ba:	e087      	b.n	8107acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81079bc:	697b      	ldr	r3, [r7, #20]
 81079be:	ee07 3a90 	vmov	s15, r3
 81079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8107b84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81079ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81079ce:	4b6a      	ldr	r3, [pc, #424]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81079d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81079d6:	ee07 3a90 	vmov	s15, r3
 81079da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81079de:	ed97 6a03 	vldr	s12, [r7, #12]
 81079e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8107b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81079e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81079ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81079ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81079f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81079f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81079fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81079fe:	e065      	b.n	8107acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a00:	697b      	ldr	r3, [r7, #20]
 8107a02:	ee07 3a90 	vmov	s15, r3
 8107a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8107b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a12:	4b59      	ldr	r3, [pc, #356]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a1a:	ee07 3a90 	vmov	s15, r3
 8107a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8107b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107a42:	e043      	b.n	8107acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a44:	697b      	ldr	r3, [r7, #20]
 8107a46:	ee07 3a90 	vmov	s15, r3
 8107a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a56:	4b48      	ldr	r3, [pc, #288]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a5e:	ee07 3a90 	vmov	s15, r3
 8107a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8107b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107a86:	e021      	b.n	8107acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a88:	697b      	ldr	r3, [r7, #20]
 8107a8a:	ee07 3a90 	vmov	s15, r3
 8107a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8107b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a9a:	4b37      	ldr	r3, [pc, #220]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107aa2:	ee07 3a90 	vmov	s15, r3
 8107aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8107aae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8107b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107aca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107acc:	4b2a      	ldr	r3, [pc, #168]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107ad0:	0a5b      	lsrs	r3, r3, #9
 8107ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107ad6:	ee07 3a90 	vmov	s15, r3
 8107ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8107aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107af2:	ee17 2a90 	vmov	r2, s15
 8107af6:	687b      	ldr	r3, [r7, #4]
 8107af8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8107afa:	4b1f      	ldr	r3, [pc, #124]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107afe:	0c1b      	lsrs	r3, r3, #16
 8107b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107b04:	ee07 3a90 	vmov	s15, r3
 8107b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8107b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107b20:	ee17 2a90 	vmov	r2, s15
 8107b24:	687b      	ldr	r3, [r7, #4]
 8107b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8107b28:	4b13      	ldr	r3, [pc, #76]	@ (8107b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107b2c:	0e1b      	lsrs	r3, r3, #24
 8107b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107b32:	ee07 3a90 	vmov	s15, r3
 8107b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8107b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107b4e:	ee17 2a90 	vmov	r2, s15
 8107b52:	687b      	ldr	r3, [r7, #4]
 8107b54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107b56:	e008      	b.n	8107b6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107b58:	687b      	ldr	r3, [r7, #4]
 8107b5a:	2200      	movs	r2, #0
 8107b5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107b5e:	687b      	ldr	r3, [r7, #4]
 8107b60:	2200      	movs	r2, #0
 8107b62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107b64:	687b      	ldr	r3, [r7, #4]
 8107b66:	2200      	movs	r2, #0
 8107b68:	609a      	str	r2, [r3, #8]
}
 8107b6a:	bf00      	nop
 8107b6c:	3724      	adds	r7, #36	@ 0x24
 8107b6e:	46bd      	mov	sp, r7
 8107b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b74:	4770      	bx	lr
 8107b76:	bf00      	nop
 8107b78:	58024400 	.word	0x58024400
 8107b7c:	03d09000 	.word	0x03d09000
 8107b80:	46000000 	.word	0x46000000
 8107b84:	4c742400 	.word	0x4c742400
 8107b88:	4a742400 	.word	0x4a742400
 8107b8c:	4bbebc20 	.word	0x4bbebc20

08107b90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8107b90:	b480      	push	{r7}
 8107b92:	b089      	sub	sp, #36	@ 0x24
 8107b94:	af00      	add	r7, sp, #0
 8107b96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107b98:	4ba1      	ldr	r3, [pc, #644]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107b9c:	f003 0303 	and.w	r3, r3, #3
 8107ba0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8107ba2:	4b9f      	ldr	r3, [pc, #636]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107ba6:	0d1b      	lsrs	r3, r3, #20
 8107ba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107bac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107bae:	4b9c      	ldr	r3, [pc, #624]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107bb2:	0a1b      	lsrs	r3, r3, #8
 8107bb4:	f003 0301 	and.w	r3, r3, #1
 8107bb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8107bba:	4b99      	ldr	r3, [pc, #612]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107bbe:	08db      	lsrs	r3, r3, #3
 8107bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107bc4:	693a      	ldr	r2, [r7, #16]
 8107bc6:	fb02 f303 	mul.w	r3, r2, r3
 8107bca:	ee07 3a90 	vmov	s15, r3
 8107bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107bd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107bd6:	697b      	ldr	r3, [r7, #20]
 8107bd8:	2b00      	cmp	r3, #0
 8107bda:	f000 8111 	beq.w	8107e00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107bde:	69bb      	ldr	r3, [r7, #24]
 8107be0:	2b02      	cmp	r3, #2
 8107be2:	f000 8083 	beq.w	8107cec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8107be6:	69bb      	ldr	r3, [r7, #24]
 8107be8:	2b02      	cmp	r3, #2
 8107bea:	f200 80a1 	bhi.w	8107d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107bee:	69bb      	ldr	r3, [r7, #24]
 8107bf0:	2b00      	cmp	r3, #0
 8107bf2:	d003      	beq.n	8107bfc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107bf4:	69bb      	ldr	r3, [r7, #24]
 8107bf6:	2b01      	cmp	r3, #1
 8107bf8:	d056      	beq.n	8107ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107bfa:	e099      	b.n	8107d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107bfc:	4b88      	ldr	r3, [pc, #544]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107bfe:	681b      	ldr	r3, [r3, #0]
 8107c00:	f003 0320 	and.w	r3, r3, #32
 8107c04:	2b00      	cmp	r3, #0
 8107c06:	d02d      	beq.n	8107c64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107c08:	4b85      	ldr	r3, [pc, #532]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c0a:	681b      	ldr	r3, [r3, #0]
 8107c0c:	08db      	lsrs	r3, r3, #3
 8107c0e:	f003 0303 	and.w	r3, r3, #3
 8107c12:	4a84      	ldr	r2, [pc, #528]	@ (8107e24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107c14:	fa22 f303 	lsr.w	r3, r2, r3
 8107c18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107c1a:	68bb      	ldr	r3, [r7, #8]
 8107c1c:	ee07 3a90 	vmov	s15, r3
 8107c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107c24:	697b      	ldr	r3, [r7, #20]
 8107c26:	ee07 3a90 	vmov	s15, r3
 8107c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107c32:	4b7b      	ldr	r3, [pc, #492]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107c3a:	ee07 3a90 	vmov	s15, r3
 8107c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8107c46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8107e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107c62:	e087      	b.n	8107d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107c64:	697b      	ldr	r3, [r7, #20]
 8107c66:	ee07 3a90 	vmov	s15, r3
 8107c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107c6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8107e2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8107c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107c76:	4b6a      	ldr	r3, [pc, #424]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107c7e:	ee07 3a90 	vmov	s15, r3
 8107c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8107c8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8107e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107ca6:	e065      	b.n	8107d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107ca8:	697b      	ldr	r3, [r7, #20]
 8107caa:	ee07 3a90 	vmov	s15, r3
 8107cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107cb2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8107e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107cba:	4b59      	ldr	r3, [pc, #356]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107cc2:	ee07 3a90 	vmov	s15, r3
 8107cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8107cce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8107e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107cea:	e043      	b.n	8107d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107cec:	697b      	ldr	r3, [r7, #20]
 8107cee:	ee07 3a90 	vmov	s15, r3
 8107cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107cf6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107cfe:	4b48      	ldr	r3, [pc, #288]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d06:	ee07 3a90 	vmov	s15, r3
 8107d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8107e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107d2e:	e021      	b.n	8107d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d30:	697b      	ldr	r3, [r7, #20]
 8107d32:	ee07 3a90 	vmov	s15, r3
 8107d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8107e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d42:	4b37      	ldr	r3, [pc, #220]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d4a:	ee07 3a90 	vmov	s15, r3
 8107d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8107e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107d72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8107d74:	4b2a      	ldr	r3, [pc, #168]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107d78:	0a5b      	lsrs	r3, r3, #9
 8107d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107d7e:	ee07 3a90 	vmov	s15, r3
 8107d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107d9a:	ee17 2a90 	vmov	r2, s15
 8107d9e:	687b      	ldr	r3, [r7, #4]
 8107da0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8107da2:	4b1f      	ldr	r3, [pc, #124]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107da6:	0c1b      	lsrs	r3, r3, #16
 8107da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107dac:	ee07 3a90 	vmov	s15, r3
 8107db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107db4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107db8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8107dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107dc8:	ee17 2a90 	vmov	r2, s15
 8107dcc:	687b      	ldr	r3, [r7, #4]
 8107dce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8107dd0:	4b13      	ldr	r3, [pc, #76]	@ (8107e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107dd4:	0e1b      	lsrs	r3, r3, #24
 8107dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107dda:	ee07 3a90 	vmov	s15, r3
 8107dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8107dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107df6:	ee17 2a90 	vmov	r2, s15
 8107dfa:	687b      	ldr	r3, [r7, #4]
 8107dfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8107dfe:	e008      	b.n	8107e12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8107e00:	687b      	ldr	r3, [r7, #4]
 8107e02:	2200      	movs	r2, #0
 8107e04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8107e06:	687b      	ldr	r3, [r7, #4]
 8107e08:	2200      	movs	r2, #0
 8107e0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	2200      	movs	r2, #0
 8107e10:	609a      	str	r2, [r3, #8]
}
 8107e12:	bf00      	nop
 8107e14:	3724      	adds	r7, #36	@ 0x24
 8107e16:	46bd      	mov	sp, r7
 8107e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e1c:	4770      	bx	lr
 8107e1e:	bf00      	nop
 8107e20:	58024400 	.word	0x58024400
 8107e24:	03d09000 	.word	0x03d09000
 8107e28:	46000000 	.word	0x46000000
 8107e2c:	4c742400 	.word	0x4c742400
 8107e30:	4a742400 	.word	0x4a742400
 8107e34:	4bbebc20 	.word	0x4bbebc20

08107e38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8107e38:	b480      	push	{r7}
 8107e3a:	b089      	sub	sp, #36	@ 0x24
 8107e3c:	af00      	add	r7, sp, #0
 8107e3e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107e40:	4ba0      	ldr	r3, [pc, #640]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107e44:	f003 0303 	and.w	r3, r3, #3
 8107e48:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8107e4a:	4b9e      	ldr	r3, [pc, #632]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107e4e:	091b      	lsrs	r3, r3, #4
 8107e50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107e54:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8107e56:	4b9b      	ldr	r3, [pc, #620]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e5a:	f003 0301 	and.w	r3, r3, #1
 8107e5e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8107e60:	4b98      	ldr	r3, [pc, #608]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107e64:	08db      	lsrs	r3, r3, #3
 8107e66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107e6a:	693a      	ldr	r2, [r7, #16]
 8107e6c:	fb02 f303 	mul.w	r3, r2, r3
 8107e70:	ee07 3a90 	vmov	s15, r3
 8107e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e78:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8107e7c:	697b      	ldr	r3, [r7, #20]
 8107e7e:	2b00      	cmp	r3, #0
 8107e80:	f000 8111 	beq.w	81080a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8107e84:	69bb      	ldr	r3, [r7, #24]
 8107e86:	2b02      	cmp	r3, #2
 8107e88:	f000 8083 	beq.w	8107f92 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8107e8c:	69bb      	ldr	r3, [r7, #24]
 8107e8e:	2b02      	cmp	r3, #2
 8107e90:	f200 80a1 	bhi.w	8107fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8107e94:	69bb      	ldr	r3, [r7, #24]
 8107e96:	2b00      	cmp	r3, #0
 8107e98:	d003      	beq.n	8107ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8107e9a:	69bb      	ldr	r3, [r7, #24]
 8107e9c:	2b01      	cmp	r3, #1
 8107e9e:	d056      	beq.n	8107f4e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8107ea0:	e099      	b.n	8107fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107ea2:	4b88      	ldr	r3, [pc, #544]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107ea4:	681b      	ldr	r3, [r3, #0]
 8107ea6:	f003 0320 	and.w	r3, r3, #32
 8107eaa:	2b00      	cmp	r3, #0
 8107eac:	d02d      	beq.n	8107f0a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107eae:	4b85      	ldr	r3, [pc, #532]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107eb0:	681b      	ldr	r3, [r3, #0]
 8107eb2:	08db      	lsrs	r3, r3, #3
 8107eb4:	f003 0303 	and.w	r3, r3, #3
 8107eb8:	4a83      	ldr	r2, [pc, #524]	@ (81080c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8107eba:	fa22 f303 	lsr.w	r3, r2, r3
 8107ebe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107ec0:	68bb      	ldr	r3, [r7, #8]
 8107ec2:	ee07 3a90 	vmov	s15, r3
 8107ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107eca:	697b      	ldr	r3, [r7, #20]
 8107ecc:	ee07 3a90 	vmov	s15, r3
 8107ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107ed8:	4b7a      	ldr	r3, [pc, #488]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107ee0:	ee07 3a90 	vmov	s15, r3
 8107ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107ee8:	ed97 6a03 	vldr	s12, [r7, #12]
 8107eec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 81080cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107ef8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f04:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107f08:	e087      	b.n	810801a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107f0a:	697b      	ldr	r3, [r7, #20]
 8107f0c:	ee07 3a90 	vmov	s15, r3
 8107f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f14:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 81080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107f1c:	4b69      	ldr	r3, [pc, #420]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107f24:	ee07 3a90 	vmov	s15, r3
 8107f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107f2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8107f30:	eddf 5a66 	vldr	s11, [pc, #408]	@ 81080cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107f3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107f4c:	e065      	b.n	810801a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107f4e:	697b      	ldr	r3, [r7, #20]
 8107f50:	ee07 3a90 	vmov	s15, r3
 8107f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f58:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 81080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107f60:	4b58      	ldr	r3, [pc, #352]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107f68:	ee07 3a90 	vmov	s15, r3
 8107f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107f70:	ed97 6a03 	vldr	s12, [r7, #12]
 8107f74:	eddf 5a55 	vldr	s11, [pc, #340]	@ 81080cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107f90:	e043      	b.n	810801a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107f92:	697b      	ldr	r3, [r7, #20]
 8107f94:	ee07 3a90 	vmov	s15, r3
 8107f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f9c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 81080d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8107fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107fa4:	4b47      	ldr	r3, [pc, #284]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107fac:	ee07 3a90 	vmov	s15, r3
 8107fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107fb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8107fb8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 81080cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107fd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107fd4:	e021      	b.n	810801a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107fd6:	697b      	ldr	r3, [r7, #20]
 8107fd8:	ee07 3a90 	vmov	s15, r3
 8107fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107fe0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 81080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107fe8:	4b36      	ldr	r3, [pc, #216]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107ff0:	ee07 3a90 	vmov	s15, r3
 8107ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107ff8:	ed97 6a03 	vldr	s12, [r7, #12]
 8107ffc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 81080cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810800c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108018:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810801a:	4b2a      	ldr	r3, [pc, #168]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810801c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810801e:	0a5b      	lsrs	r3, r3, #9
 8108020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108024:	ee07 3a90 	vmov	s15, r3
 8108028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810802c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108030:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108034:	edd7 6a07 	vldr	s13, [r7, #28]
 8108038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810803c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108040:	ee17 2a90 	vmov	r2, s15
 8108044:	687b      	ldr	r3, [r7, #4]
 8108046:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8108048:	4b1e      	ldr	r3, [pc, #120]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810804a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810804c:	0c1b      	lsrs	r3, r3, #16
 810804e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108052:	ee07 3a90 	vmov	s15, r3
 8108056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810805a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810805e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108062:	edd7 6a07 	vldr	s13, [r7, #28]
 8108066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810806a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810806e:	ee17 2a90 	vmov	r2, s15
 8108072:	687b      	ldr	r3, [r7, #4]
 8108074:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8108076:	4b13      	ldr	r3, [pc, #76]	@ (81080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810807a:	0e1b      	lsrs	r3, r3, #24
 810807c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108080:	ee07 3a90 	vmov	s15, r3
 8108084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108088:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810808c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108090:	edd7 6a07 	vldr	s13, [r7, #28]
 8108094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810809c:	ee17 2a90 	vmov	r2, s15
 81080a0:	687b      	ldr	r3, [r7, #4]
 81080a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81080a4:	e008      	b.n	81080b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81080a6:	687b      	ldr	r3, [r7, #4]
 81080a8:	2200      	movs	r2, #0
 81080aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81080ac:	687b      	ldr	r3, [r7, #4]
 81080ae:	2200      	movs	r2, #0
 81080b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81080b2:	687b      	ldr	r3, [r7, #4]
 81080b4:	2200      	movs	r2, #0
 81080b6:	609a      	str	r2, [r3, #8]
}
 81080b8:	bf00      	nop
 81080ba:	3724      	adds	r7, #36	@ 0x24
 81080bc:	46bd      	mov	sp, r7
 81080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080c2:	4770      	bx	lr
 81080c4:	58024400 	.word	0x58024400
 81080c8:	03d09000 	.word	0x03d09000
 81080cc:	46000000 	.word	0x46000000
 81080d0:	4c742400 	.word	0x4c742400
 81080d4:	4a742400 	.word	0x4a742400
 81080d8:	4bbebc20 	.word	0x4bbebc20

081080dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81080dc:	b580      	push	{r7, lr}
 81080de:	b084      	sub	sp, #16
 81080e0:	af00      	add	r7, sp, #0
 81080e2:	6078      	str	r0, [r7, #4]
 81080e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81080e6:	2300      	movs	r3, #0
 81080e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81080ea:	4b54      	ldr	r3, [pc, #336]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81080ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81080ee:	f003 0303 	and.w	r3, r3, #3
 81080f2:	2b03      	cmp	r3, #3
 81080f4:	d101      	bne.n	81080fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81080f6:	2301      	movs	r3, #1
 81080f8:	e09b      	b.n	8108232 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81080fa:	4b50      	ldr	r3, [pc, #320]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81080fc:	681b      	ldr	r3, [r3, #0]
 81080fe:	4a4f      	ldr	r2, [pc, #316]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 8108100:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8108104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108106:	f7f9 fbf1 	bl	81018ec <HAL_GetTick>
 810810a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810810c:	e008      	b.n	8108120 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810810e:	f7f9 fbed 	bl	81018ec <HAL_GetTick>
 8108112:	4602      	mov	r2, r0
 8108114:	68bb      	ldr	r3, [r7, #8]
 8108116:	1ad3      	subs	r3, r2, r3
 8108118:	2b02      	cmp	r3, #2
 810811a:	d901      	bls.n	8108120 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810811c:	2303      	movs	r3, #3
 810811e:	e088      	b.n	8108232 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108120:	4b46      	ldr	r3, [pc, #280]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 8108122:	681b      	ldr	r3, [r3, #0]
 8108124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108128:	2b00      	cmp	r3, #0
 810812a:	d1f0      	bne.n	810810e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810812c:	4b43      	ldr	r3, [pc, #268]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 810812e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108130:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108134:	687b      	ldr	r3, [r7, #4]
 8108136:	681b      	ldr	r3, [r3, #0]
 8108138:	031b      	lsls	r3, r3, #12
 810813a:	4940      	ldr	r1, [pc, #256]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 810813c:	4313      	orrs	r3, r2
 810813e:	628b      	str	r3, [r1, #40]	@ 0x28
 8108140:	687b      	ldr	r3, [r7, #4]
 8108142:	685b      	ldr	r3, [r3, #4]
 8108144:	3b01      	subs	r3, #1
 8108146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810814a:	687b      	ldr	r3, [r7, #4]
 810814c:	689b      	ldr	r3, [r3, #8]
 810814e:	3b01      	subs	r3, #1
 8108150:	025b      	lsls	r3, r3, #9
 8108152:	b29b      	uxth	r3, r3
 8108154:	431a      	orrs	r2, r3
 8108156:	687b      	ldr	r3, [r7, #4]
 8108158:	68db      	ldr	r3, [r3, #12]
 810815a:	3b01      	subs	r3, #1
 810815c:	041b      	lsls	r3, r3, #16
 810815e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108162:	431a      	orrs	r2, r3
 8108164:	687b      	ldr	r3, [r7, #4]
 8108166:	691b      	ldr	r3, [r3, #16]
 8108168:	3b01      	subs	r3, #1
 810816a:	061b      	lsls	r3, r3, #24
 810816c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108170:	4932      	ldr	r1, [pc, #200]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 8108172:	4313      	orrs	r3, r2
 8108174:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108176:	4b31      	ldr	r3, [pc, #196]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 8108178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810817a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810817e:	687b      	ldr	r3, [r7, #4]
 8108180:	695b      	ldr	r3, [r3, #20]
 8108182:	492e      	ldr	r1, [pc, #184]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 8108184:	4313      	orrs	r3, r2
 8108186:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108188:	4b2c      	ldr	r3, [pc, #176]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 810818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810818c:	f023 0220 	bic.w	r2, r3, #32
 8108190:	687b      	ldr	r3, [r7, #4]
 8108192:	699b      	ldr	r3, [r3, #24]
 8108194:	4929      	ldr	r1, [pc, #164]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 8108196:	4313      	orrs	r3, r2
 8108198:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810819a:	4b28      	ldr	r3, [pc, #160]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 810819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810819e:	4a27      	ldr	r2, [pc, #156]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81081a0:	f023 0310 	bic.w	r3, r3, #16
 81081a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81081a6:	4b25      	ldr	r3, [pc, #148]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81081a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81081aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81081ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81081b2:	687a      	ldr	r2, [r7, #4]
 81081b4:	69d2      	ldr	r2, [r2, #28]
 81081b6:	00d2      	lsls	r2, r2, #3
 81081b8:	4920      	ldr	r1, [pc, #128]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81081ba:	4313      	orrs	r3, r2
 81081bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81081be:	4b1f      	ldr	r3, [pc, #124]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81081c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81081c2:	4a1e      	ldr	r2, [pc, #120]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81081c4:	f043 0310 	orr.w	r3, r3, #16
 81081c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81081ca:	683b      	ldr	r3, [r7, #0]
 81081cc:	2b00      	cmp	r3, #0
 81081ce:	d106      	bne.n	81081de <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81081d0:	4b1a      	ldr	r3, [pc, #104]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81081d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81081d4:	4a19      	ldr	r2, [pc, #100]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81081d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81081da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81081dc:	e00f      	b.n	81081fe <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81081de:	683b      	ldr	r3, [r7, #0]
 81081e0:	2b01      	cmp	r3, #1
 81081e2:	d106      	bne.n	81081f2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81081e4:	4b15      	ldr	r3, [pc, #84]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81081e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81081e8:	4a14      	ldr	r2, [pc, #80]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81081ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81081ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81081f0:	e005      	b.n	81081fe <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81081f2:	4b12      	ldr	r3, [pc, #72]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81081f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81081f6:	4a11      	ldr	r2, [pc, #68]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 81081f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81081fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81081fe:	4b0f      	ldr	r3, [pc, #60]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 8108200:	681b      	ldr	r3, [r3, #0]
 8108202:	4a0e      	ldr	r2, [pc, #56]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 8108204:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8108208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810820a:	f7f9 fb6f 	bl	81018ec <HAL_GetTick>
 810820e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108210:	e008      	b.n	8108224 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108212:	f7f9 fb6b 	bl	81018ec <HAL_GetTick>
 8108216:	4602      	mov	r2, r0
 8108218:	68bb      	ldr	r3, [r7, #8]
 810821a:	1ad3      	subs	r3, r2, r3
 810821c:	2b02      	cmp	r3, #2
 810821e:	d901      	bls.n	8108224 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108220:	2303      	movs	r3, #3
 8108222:	e006      	b.n	8108232 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108224:	4b05      	ldr	r3, [pc, #20]	@ (810823c <RCCEx_PLL2_Config+0x160>)
 8108226:	681b      	ldr	r3, [r3, #0]
 8108228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810822c:	2b00      	cmp	r3, #0
 810822e:	d0f0      	beq.n	8108212 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108230:	7bfb      	ldrb	r3, [r7, #15]
}
 8108232:	4618      	mov	r0, r3
 8108234:	3710      	adds	r7, #16
 8108236:	46bd      	mov	sp, r7
 8108238:	bd80      	pop	{r7, pc}
 810823a:	bf00      	nop
 810823c:	58024400 	.word	0x58024400

08108240 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108240:	b580      	push	{r7, lr}
 8108242:	b084      	sub	sp, #16
 8108244:	af00      	add	r7, sp, #0
 8108246:	6078      	str	r0, [r7, #4]
 8108248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810824a:	2300      	movs	r3, #0
 810824c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810824e:	4b54      	ldr	r3, [pc, #336]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108252:	f003 0303 	and.w	r3, r3, #3
 8108256:	2b03      	cmp	r3, #3
 8108258:	d101      	bne.n	810825e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810825a:	2301      	movs	r3, #1
 810825c:	e09b      	b.n	8108396 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810825e:	4b50      	ldr	r3, [pc, #320]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108260:	681b      	ldr	r3, [r3, #0]
 8108262:	4a4f      	ldr	r2, [pc, #316]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810826a:	f7f9 fb3f 	bl	81018ec <HAL_GetTick>
 810826e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108270:	e008      	b.n	8108284 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108272:	f7f9 fb3b 	bl	81018ec <HAL_GetTick>
 8108276:	4602      	mov	r2, r0
 8108278:	68bb      	ldr	r3, [r7, #8]
 810827a:	1ad3      	subs	r3, r2, r3
 810827c:	2b02      	cmp	r3, #2
 810827e:	d901      	bls.n	8108284 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108280:	2303      	movs	r3, #3
 8108282:	e088      	b.n	8108396 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108284:	4b46      	ldr	r3, [pc, #280]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108286:	681b      	ldr	r3, [r3, #0]
 8108288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810828c:	2b00      	cmp	r3, #0
 810828e:	d1f0      	bne.n	8108272 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108290:	4b43      	ldr	r3, [pc, #268]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108294:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108298:	687b      	ldr	r3, [r7, #4]
 810829a:	681b      	ldr	r3, [r3, #0]
 810829c:	051b      	lsls	r3, r3, #20
 810829e:	4940      	ldr	r1, [pc, #256]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 81082a0:	4313      	orrs	r3, r2
 81082a2:	628b      	str	r3, [r1, #40]	@ 0x28
 81082a4:	687b      	ldr	r3, [r7, #4]
 81082a6:	685b      	ldr	r3, [r3, #4]
 81082a8:	3b01      	subs	r3, #1
 81082aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81082ae:	687b      	ldr	r3, [r7, #4]
 81082b0:	689b      	ldr	r3, [r3, #8]
 81082b2:	3b01      	subs	r3, #1
 81082b4:	025b      	lsls	r3, r3, #9
 81082b6:	b29b      	uxth	r3, r3
 81082b8:	431a      	orrs	r2, r3
 81082ba:	687b      	ldr	r3, [r7, #4]
 81082bc:	68db      	ldr	r3, [r3, #12]
 81082be:	3b01      	subs	r3, #1
 81082c0:	041b      	lsls	r3, r3, #16
 81082c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81082c6:	431a      	orrs	r2, r3
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	691b      	ldr	r3, [r3, #16]
 81082cc:	3b01      	subs	r3, #1
 81082ce:	061b      	lsls	r3, r3, #24
 81082d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81082d4:	4932      	ldr	r1, [pc, #200]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 81082d6:	4313      	orrs	r3, r2
 81082d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81082da:	4b31      	ldr	r3, [pc, #196]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 81082dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81082de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81082e2:	687b      	ldr	r3, [r7, #4]
 81082e4:	695b      	ldr	r3, [r3, #20]
 81082e6:	492e      	ldr	r1, [pc, #184]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 81082e8:	4313      	orrs	r3, r2
 81082ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81082ec:	4b2c      	ldr	r3, [pc, #176]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 81082ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81082f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81082f4:	687b      	ldr	r3, [r7, #4]
 81082f6:	699b      	ldr	r3, [r3, #24]
 81082f8:	4929      	ldr	r1, [pc, #164]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 81082fa:	4313      	orrs	r3, r2
 81082fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81082fe:	4b28      	ldr	r3, [pc, #160]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108302:	4a27      	ldr	r2, [pc, #156]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8108308:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810830a:	4b25      	ldr	r3, [pc, #148]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 810830c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810830e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108312:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108316:	687a      	ldr	r2, [r7, #4]
 8108318:	69d2      	ldr	r2, [r2, #28]
 810831a:	00d2      	lsls	r2, r2, #3
 810831c:	4920      	ldr	r1, [pc, #128]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 810831e:	4313      	orrs	r3, r2
 8108320:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8108322:	4b1f      	ldr	r3, [pc, #124]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108326:	4a1e      	ldr	r2, [pc, #120]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810832c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810832e:	683b      	ldr	r3, [r7, #0]
 8108330:	2b00      	cmp	r3, #0
 8108332:	d106      	bne.n	8108342 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108334:	4b1a      	ldr	r3, [pc, #104]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108338:	4a19      	ldr	r2, [pc, #100]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 810833a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810833e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108340:	e00f      	b.n	8108362 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108342:	683b      	ldr	r3, [r7, #0]
 8108344:	2b01      	cmp	r3, #1
 8108346:	d106      	bne.n	8108356 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8108348:	4b15      	ldr	r3, [pc, #84]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 810834a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810834c:	4a14      	ldr	r2, [pc, #80]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 810834e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8108352:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108354:	e005      	b.n	8108362 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8108356:	4b12      	ldr	r3, [pc, #72]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810835a:	4a11      	ldr	r2, [pc, #68]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 810835c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8108360:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8108362:	4b0f      	ldr	r3, [pc, #60]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108364:	681b      	ldr	r3, [r3, #0]
 8108366:	4a0e      	ldr	r2, [pc, #56]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 8108368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810836c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810836e:	f7f9 fabd 	bl	81018ec <HAL_GetTick>
 8108372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108374:	e008      	b.n	8108388 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108376:	f7f9 fab9 	bl	81018ec <HAL_GetTick>
 810837a:	4602      	mov	r2, r0
 810837c:	68bb      	ldr	r3, [r7, #8]
 810837e:	1ad3      	subs	r3, r2, r3
 8108380:	2b02      	cmp	r3, #2
 8108382:	d901      	bls.n	8108388 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108384:	2303      	movs	r3, #3
 8108386:	e006      	b.n	8108396 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108388:	4b05      	ldr	r3, [pc, #20]	@ (81083a0 <RCCEx_PLL3_Config+0x160>)
 810838a:	681b      	ldr	r3, [r3, #0]
 810838c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108390:	2b00      	cmp	r3, #0
 8108392:	d0f0      	beq.n	8108376 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108394:	7bfb      	ldrb	r3, [r7, #15]
}
 8108396:	4618      	mov	r0, r3
 8108398:	3710      	adds	r7, #16
 810839a:	46bd      	mov	sp, r7
 810839c:	bd80      	pop	{r7, pc}
 810839e:	bf00      	nop
 81083a0:	58024400 	.word	0x58024400

081083a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 81083a4:	b580      	push	{r7, lr}
 81083a6:	b08a      	sub	sp, #40	@ 0x28
 81083a8:	af00      	add	r7, sp, #0
 81083aa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 81083ac:	687b      	ldr	r3, [r7, #4]
 81083ae:	2b00      	cmp	r3, #0
 81083b0:	d101      	bne.n	81083b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 81083b2:	2301      	movs	r3, #1
 81083b4:	e075      	b.n	81084a2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 81083b6:	687b      	ldr	r3, [r7, #4]
 81083b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81083bc:	b2db      	uxtb	r3, r3
 81083be:	2b00      	cmp	r3, #0
 81083c0:	d105      	bne.n	81083ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 81083c2:	687b      	ldr	r3, [r7, #4]
 81083c4:	2200      	movs	r2, #0
 81083c6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 81083c8:	6878      	ldr	r0, [r7, #4]
 81083ca:	f7f8 fea3 	bl	8101114 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 81083ce:	687b      	ldr	r3, [r7, #4]
 81083d0:	2204      	movs	r2, #4
 81083d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 81083d6:	6878      	ldr	r0, [r7, #4]
 81083d8:	f000 f868 	bl	81084ac <HAL_SD_InitCard>
 81083dc:	4603      	mov	r3, r0
 81083de:	2b00      	cmp	r3, #0
 81083e0:	d001      	beq.n	81083e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 81083e2:	2301      	movs	r3, #1
 81083e4:	e05d      	b.n	81084a2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 81083e6:	f107 0308 	add.w	r3, r7, #8
 81083ea:	4619      	mov	r1, r3
 81083ec:	6878      	ldr	r0, [r7, #4]
 81083ee:	f000 fc71 	bl	8108cd4 <HAL_SD_GetCardStatus>
 81083f2:	4603      	mov	r3, r0
 81083f4:	2b00      	cmp	r3, #0
 81083f6:	d001      	beq.n	81083fc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 81083f8:	2301      	movs	r3, #1
 81083fa:	e052      	b.n	81084a2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 81083fc:	7e3b      	ldrb	r3, [r7, #24]
 81083fe:	b2db      	uxtb	r3, r3
 8108400:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8108402:	7e7b      	ldrb	r3, [r7, #25]
 8108404:	b2db      	uxtb	r3, r3
 8108406:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8108408:	687b      	ldr	r3, [r7, #4]
 810840a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810840c:	2b01      	cmp	r3, #1
 810840e:	d10a      	bne.n	8108426 <HAL_SD_Init+0x82>
 8108410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108412:	2b00      	cmp	r3, #0
 8108414:	d102      	bne.n	810841c <HAL_SD_Init+0x78>
 8108416:	6a3b      	ldr	r3, [r7, #32]
 8108418:	2b00      	cmp	r3, #0
 810841a:	d004      	beq.n	8108426 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 810841c:	687b      	ldr	r3, [r7, #4]
 810841e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8108422:	659a      	str	r2, [r3, #88]	@ 0x58
 8108424:	e00b      	b.n	810843e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8108426:	687b      	ldr	r3, [r7, #4]
 8108428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810842a:	2b01      	cmp	r3, #1
 810842c:	d104      	bne.n	8108438 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 810842e:	687b      	ldr	r3, [r7, #4]
 8108430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8108434:	659a      	str	r2, [r3, #88]	@ 0x58
 8108436:	e002      	b.n	810843e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8108438:	687b      	ldr	r3, [r7, #4]
 810843a:	2200      	movs	r2, #0
 810843c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 810843e:	687b      	ldr	r3, [r7, #4]
 8108440:	68db      	ldr	r3, [r3, #12]
 8108442:	4619      	mov	r1, r3
 8108444:	6878      	ldr	r0, [r7, #4]
 8108446:	f000 fd03 	bl	8108e50 <HAL_SD_ConfigWideBusOperation>
 810844a:	4603      	mov	r3, r0
 810844c:	2b00      	cmp	r3, #0
 810844e:	d001      	beq.n	8108454 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8108450:	2301      	movs	r3, #1
 8108452:	e026      	b.n	81084a2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8108454:	f7f9 fa4a 	bl	81018ec <HAL_GetTick>
 8108458:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810845a:	e011      	b.n	8108480 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 810845c:	f7f9 fa46 	bl	81018ec <HAL_GetTick>
 8108460:	4602      	mov	r2, r0
 8108462:	69fb      	ldr	r3, [r7, #28]
 8108464:	1ad3      	subs	r3, r2, r3
 8108466:	f1b3 3fff 	cmp.w	r3, #4294967295
 810846a:	d109      	bne.n	8108480 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 810846c:	687b      	ldr	r3, [r7, #4]
 810846e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8108472:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	2201      	movs	r2, #1
 8108478:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 810847c:	2303      	movs	r3, #3
 810847e:	e010      	b.n	81084a2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8108480:	6878      	ldr	r0, [r7, #4]
 8108482:	f000 fdf7 	bl	8109074 <HAL_SD_GetCardState>
 8108486:	4603      	mov	r3, r0
 8108488:	2b04      	cmp	r3, #4
 810848a:	d1e7      	bne.n	810845c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810848c:	687b      	ldr	r3, [r7, #4]
 810848e:	2200      	movs	r2, #0
 8108490:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8108492:	687b      	ldr	r3, [r7, #4]
 8108494:	2200      	movs	r2, #0
 8108496:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8108498:	687b      	ldr	r3, [r7, #4]
 810849a:	2201      	movs	r2, #1
 810849c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 81084a0:	2300      	movs	r3, #0
}
 81084a2:	4618      	mov	r0, r3
 81084a4:	3728      	adds	r7, #40	@ 0x28
 81084a6:	46bd      	mov	sp, r7
 81084a8:	bd80      	pop	{r7, pc}
	...

081084ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 81084ac:	b590      	push	{r4, r7, lr}
 81084ae:	b08d      	sub	sp, #52	@ 0x34
 81084b0:	af02      	add	r7, sp, #8
 81084b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 81084b4:	2300      	movs	r3, #0
 81084b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 81084b8:	2300      	movs	r3, #0
 81084ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 81084bc:	2300      	movs	r3, #0
 81084be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 81084c0:	2300      	movs	r3, #0
 81084c2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 81084c4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 81084c8:	f04f 0100 	mov.w	r1, #0
 81084cc:	f7fe fc76 	bl	8106dbc <HAL_RCCEx_GetPeriphCLKFreq>
 81084d0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 81084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81084d4:	2b00      	cmp	r3, #0
 81084d6:	d109      	bne.n	81084ec <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 81084d8:	687b      	ldr	r3, [r7, #4]
 81084da:	2201      	movs	r2, #1
 81084dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 81084e0:	687b      	ldr	r3, [r7, #4]
 81084e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 81084e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81084e8:	2301      	movs	r3, #1
 81084ea:	e070      	b.n	81085ce <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 81084ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81084ee:	0a1b      	lsrs	r3, r3, #8
 81084f0:	4a39      	ldr	r2, [pc, #228]	@ (81085d8 <HAL_SD_InitCard+0x12c>)
 81084f2:	fba2 2303 	umull	r2, r3, r2, r3
 81084f6:	091b      	lsrs	r3, r3, #4
 81084f8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 81084fa:	687b      	ldr	r3, [r7, #4]
 81084fc:	681c      	ldr	r4, [r3, #0]
 81084fe:	466a      	mov	r2, sp
 8108500:	f107 0318 	add.w	r3, r7, #24
 8108504:	e893 0003 	ldmia.w	r3, {r0, r1}
 8108508:	e882 0003 	stmia.w	r2, {r0, r1}
 810850c:	f107 030c 	add.w	r3, r7, #12
 8108510:	cb0e      	ldmia	r3, {r1, r2, r3}
 8108512:	4620      	mov	r0, r4
 8108514:	f002 ff14 	bl	810b340 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8108518:	687b      	ldr	r3, [r7, #4]
 810851a:	681b      	ldr	r3, [r3, #0]
 810851c:	4618      	mov	r0, r3
 810851e:	f002 ff57 	bl	810b3d0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8108522:	69fb      	ldr	r3, [r7, #28]
 8108524:	2b00      	cmp	r3, #0
 8108526:	d005      	beq.n	8108534 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8108528:	69fb      	ldr	r3, [r7, #28]
 810852a:	005b      	lsls	r3, r3, #1
 810852c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810852e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108532:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8108534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108536:	2b00      	cmp	r3, #0
 8108538:	d007      	beq.n	810854a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 810853a:	4a28      	ldr	r2, [pc, #160]	@ (81085dc <HAL_SD_InitCard+0x130>)
 810853c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810853e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108542:	3301      	adds	r3, #1
 8108544:	4618      	mov	r0, r3
 8108546:	f7f9 f9dd 	bl	8101904 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 810854a:	6878      	ldr	r0, [r7, #4]
 810854c:	f000 fe80 	bl	8109250 <SD_PowerON>
 8108550:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108552:	6a3b      	ldr	r3, [r7, #32]
 8108554:	2b00      	cmp	r3, #0
 8108556:	d00b      	beq.n	8108570 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108558:	687b      	ldr	r3, [r7, #4]
 810855a:	2201      	movs	r2, #1
 810855c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8108560:	687b      	ldr	r3, [r7, #4]
 8108562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108564:	6a3b      	ldr	r3, [r7, #32]
 8108566:	431a      	orrs	r2, r3
 8108568:	687b      	ldr	r3, [r7, #4]
 810856a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 810856c:	2301      	movs	r3, #1
 810856e:	e02e      	b.n	81085ce <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8108570:	6878      	ldr	r0, [r7, #4]
 8108572:	f000 fd9f 	bl	81090b4 <SD_InitCard>
 8108576:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108578:	6a3b      	ldr	r3, [r7, #32]
 810857a:	2b00      	cmp	r3, #0
 810857c:	d00b      	beq.n	8108596 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 810857e:	687b      	ldr	r3, [r7, #4]
 8108580:	2201      	movs	r2, #1
 8108582:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8108586:	687b      	ldr	r3, [r7, #4]
 8108588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810858a:	6a3b      	ldr	r3, [r7, #32]
 810858c:	431a      	orrs	r2, r3
 810858e:	687b      	ldr	r3, [r7, #4]
 8108590:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8108592:	2301      	movs	r3, #1
 8108594:	e01b      	b.n	81085ce <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108596:	687b      	ldr	r3, [r7, #4]
 8108598:	681b      	ldr	r3, [r3, #0]
 810859a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 810859e:	4618      	mov	r0, r3
 81085a0:	f002 ffac 	bl	810b4fc <SDMMC_CmdBlockLength>
 81085a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81085a6:	6a3b      	ldr	r3, [r7, #32]
 81085a8:	2b00      	cmp	r3, #0
 81085aa:	d00f      	beq.n	81085cc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81085ac:	687b      	ldr	r3, [r7, #4]
 81085ae:	681b      	ldr	r3, [r3, #0]
 81085b0:	4a0b      	ldr	r2, [pc, #44]	@ (81085e0 <HAL_SD_InitCard+0x134>)
 81085b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 81085b4:	687b      	ldr	r3, [r7, #4]
 81085b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81085b8:	6a3b      	ldr	r3, [r7, #32]
 81085ba:	431a      	orrs	r2, r3
 81085bc:	687b      	ldr	r3, [r7, #4]
 81085be:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 81085c0:	687b      	ldr	r3, [r7, #4]
 81085c2:	2201      	movs	r2, #1
 81085c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 81085c8:	2301      	movs	r3, #1
 81085ca:	e000      	b.n	81085ce <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 81085cc:	2300      	movs	r3, #0
}
 81085ce:	4618      	mov	r0, r3
 81085d0:	372c      	adds	r7, #44	@ 0x2c
 81085d2:	46bd      	mov	sp, r7
 81085d4:	bd90      	pop	{r4, r7, pc}
 81085d6:	bf00      	nop
 81085d8:	014f8b59 	.word	0x014f8b59
 81085dc:	00012110 	.word	0x00012110
 81085e0:	1fe00fff 	.word	0x1fe00fff

081085e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 81085e4:	b580      	push	{r7, lr}
 81085e6:	b084      	sub	sp, #16
 81085e8:	af00      	add	r7, sp, #0
 81085ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 81085ec:	687b      	ldr	r3, [r7, #4]
 81085ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81085f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 81085f2:	687b      	ldr	r3, [r7, #4]
 81085f4:	681b      	ldr	r3, [r3, #0]
 81085f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81085f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81085fc:	2b00      	cmp	r3, #0
 81085fe:	d008      	beq.n	8108612 <HAL_SD_IRQHandler+0x2e>
 8108600:	68fb      	ldr	r3, [r7, #12]
 8108602:	f003 0308 	and.w	r3, r3, #8
 8108606:	2b00      	cmp	r3, #0
 8108608:	d003      	beq.n	8108612 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 810860a:	6878      	ldr	r0, [r7, #4]
 810860c:	f001 f90c 	bl	8109828 <SD_Read_IT>
 8108610:	e199      	b.n	8108946 <HAL_SD_IRQHandler+0x362>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8108612:	687b      	ldr	r3, [r7, #4]
 8108614:	681b      	ldr	r3, [r3, #0]
 8108616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810861c:	2b00      	cmp	r3, #0
 810861e:	f000 80ae 	beq.w	810877e <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8108622:	687b      	ldr	r3, [r7, #4]
 8108624:	681b      	ldr	r3, [r3, #0]
 8108626:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810862a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810862c:	687b      	ldr	r3, [r7, #4]
 810862e:	681b      	ldr	r3, [r3, #0]
 8108630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108632:	687a      	ldr	r2, [r7, #4]
 8108634:	6812      	ldr	r2, [r2, #0]
 8108636:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 810863a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 810863e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8108640:	687b      	ldr	r3, [r7, #4]
 8108642:	681b      	ldr	r3, [r3, #0]
 8108644:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8108646:	687b      	ldr	r3, [r7, #4]
 8108648:	681b      	ldr	r3, [r3, #0]
 810864a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 810864e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	681b      	ldr	r3, [r3, #0]
 8108654:	68da      	ldr	r2, [r3, #12]
 8108656:	687b      	ldr	r3, [r7, #4]
 8108658:	681b      	ldr	r3, [r3, #0]
 810865a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 810865e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8108660:	68fb      	ldr	r3, [r7, #12]
 8108662:	f003 0308 	and.w	r3, r3, #8
 8108666:	2b00      	cmp	r3, #0
 8108668:	d038      	beq.n	81086dc <HAL_SD_IRQHandler+0xf8>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810866a:	68fb      	ldr	r3, [r7, #12]
 810866c:	f003 0302 	and.w	r3, r3, #2
 8108670:	2b00      	cmp	r3, #0
 8108672:	d104      	bne.n	810867e <HAL_SD_IRQHandler+0x9a>
 8108674:	68fb      	ldr	r3, [r7, #12]
 8108676:	f003 0320 	and.w	r3, r3, #32
 810867a:	2b00      	cmp	r3, #0
 810867c:	d011      	beq.n	81086a2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 810867e:	687b      	ldr	r3, [r7, #4]
 8108680:	681b      	ldr	r3, [r3, #0]
 8108682:	4618      	mov	r0, r3
 8108684:	f002 ff5e 	bl	810b544 <SDMMC_CmdStopTransfer>
 8108688:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 810868a:	68bb      	ldr	r3, [r7, #8]
 810868c:	2b00      	cmp	r3, #0
 810868e:	d008      	beq.n	81086a2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8108690:	687b      	ldr	r3, [r7, #4]
 8108692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108694:	68bb      	ldr	r3, [r7, #8]
 8108696:	431a      	orrs	r2, r3
 8108698:	687b      	ldr	r3, [r7, #4]
 810869a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 810869c:	6878      	ldr	r0, [r7, #4]
 810869e:	f000 f96b 	bl	8108978 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 81086a2:	687b      	ldr	r3, [r7, #4]
 81086a4:	681b      	ldr	r3, [r3, #0]
 81086a6:	4a90      	ldr	r2, [pc, #576]	@ (81088e8 <HAL_SD_IRQHandler+0x304>)
 81086a8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 81086aa:	687b      	ldr	r3, [r7, #4]
 81086ac:	2201      	movs	r2, #1
 81086ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 81086b2:	687b      	ldr	r3, [r7, #4]
 81086b4:	2200      	movs	r2, #0
 81086b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 81086b8:	68fb      	ldr	r3, [r7, #12]
 81086ba:	f003 0301 	and.w	r3, r3, #1
 81086be:	2b00      	cmp	r3, #0
 81086c0:	d104      	bne.n	81086cc <HAL_SD_IRQHandler+0xe8>
 81086c2:	68fb      	ldr	r3, [r7, #12]
 81086c4:	f003 0302 	and.w	r3, r3, #2
 81086c8:	2b00      	cmp	r3, #0
 81086ca:	d003      	beq.n	81086d4 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 81086cc:	6878      	ldr	r0, [r7, #4]
 81086ce:	f000 f949 	bl	8108964 <HAL_SD_RxCpltCallback>
 81086d2:	e138      	b.n	8108946 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 81086d4:	6878      	ldr	r0, [r7, #4]
 81086d6:	f000 f93b 	bl	8108950 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 81086da:	e134      	b.n	8108946 <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 81086dc:	68fb      	ldr	r3, [r7, #12]
 81086de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81086e2:	2b00      	cmp	r3, #0
 81086e4:	f000 812f 	beq.w	8108946 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 81086e8:	687b      	ldr	r3, [r7, #4]
 81086ea:	681b      	ldr	r3, [r3, #0]
 81086ec:	2200      	movs	r2, #0
 81086ee:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 81086f0:	687b      	ldr	r3, [r7, #4]
 81086f2:	681b      	ldr	r3, [r3, #0]
 81086f4:	2200      	movs	r2, #0
 81086f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 81086f8:	687b      	ldr	r3, [r7, #4]
 81086fa:	681b      	ldr	r3, [r3, #0]
 81086fc:	2200      	movs	r2, #0
 81086fe:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8108700:	68fb      	ldr	r3, [r7, #12]
 8108702:	f003 0302 	and.w	r3, r3, #2
 8108706:	2b00      	cmp	r3, #0
 8108708:	d104      	bne.n	8108714 <HAL_SD_IRQHandler+0x130>
 810870a:	68fb      	ldr	r3, [r7, #12]
 810870c:	f003 0320 	and.w	r3, r3, #32
 8108710:	2b00      	cmp	r3, #0
 8108712:	d011      	beq.n	8108738 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8108714:	687b      	ldr	r3, [r7, #4]
 8108716:	681b      	ldr	r3, [r3, #0]
 8108718:	4618      	mov	r0, r3
 810871a:	f002 ff13 	bl	810b544 <SDMMC_CmdStopTransfer>
 810871e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8108720:	68bb      	ldr	r3, [r7, #8]
 8108722:	2b00      	cmp	r3, #0
 8108724:	d008      	beq.n	8108738 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8108726:	687b      	ldr	r3, [r7, #4]
 8108728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810872a:	68bb      	ldr	r3, [r7, #8]
 810872c:	431a      	orrs	r2, r3
 810872e:	687b      	ldr	r3, [r7, #4]
 8108730:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8108732:	6878      	ldr	r0, [r7, #4]
 8108734:	f000 f920 	bl	8108978 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8108738:	687b      	ldr	r3, [r7, #4]
 810873a:	2201      	movs	r2, #1
 810873c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8108740:	687b      	ldr	r3, [r7, #4]
 8108742:	2200      	movs	r2, #0
 8108744:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8108746:	68fb      	ldr	r3, [r7, #12]
 8108748:	f003 0310 	and.w	r3, r3, #16
 810874c:	2b00      	cmp	r3, #0
 810874e:	d104      	bne.n	810875a <HAL_SD_IRQHandler+0x176>
 8108750:	68fb      	ldr	r3, [r7, #12]
 8108752:	f003 0320 	and.w	r3, r3, #32
 8108756:	2b00      	cmp	r3, #0
 8108758:	d002      	beq.n	8108760 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 810875a:	6878      	ldr	r0, [r7, #4]
 810875c:	f000 f8f8 	bl	8108950 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8108760:	68fb      	ldr	r3, [r7, #12]
 8108762:	f003 0301 	and.w	r3, r3, #1
 8108766:	2b00      	cmp	r3, #0
 8108768:	d105      	bne.n	8108776 <HAL_SD_IRQHandler+0x192>
 810876a:	68fb      	ldr	r3, [r7, #12]
 810876c:	f003 0302 	and.w	r3, r3, #2
 8108770:	2b00      	cmp	r3, #0
 8108772:	f000 80e8 	beq.w	8108946 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8108776:	6878      	ldr	r0, [r7, #4]
 8108778:	f000 f8f4 	bl	8108964 <HAL_SD_RxCpltCallback>
}
 810877c:	e0e3      	b.n	8108946 <HAL_SD_IRQHandler+0x362>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 810877e:	687b      	ldr	r3, [r7, #4]
 8108780:	681b      	ldr	r3, [r3, #0]
 8108782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8108788:	2b00      	cmp	r3, #0
 810878a:	d008      	beq.n	810879e <HAL_SD_IRQHandler+0x1ba>
 810878c:	68fb      	ldr	r3, [r7, #12]
 810878e:	f003 0308 	and.w	r3, r3, #8
 8108792:	2b00      	cmp	r3, #0
 8108794:	d003      	beq.n	810879e <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8108796:	6878      	ldr	r0, [r7, #4]
 8108798:	f001 f88c 	bl	81098b4 <SD_Write_IT>
 810879c:	e0d3      	b.n	8108946 <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 810879e:	687b      	ldr	r3, [r7, #4]
 81087a0:	681b      	ldr	r3, [r3, #0]
 81087a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81087a4:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 81087a8:	2b00      	cmp	r3, #0
 81087aa:	f000 809f 	beq.w	81088ec <HAL_SD_IRQHandler+0x308>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 81087ae:	687b      	ldr	r3, [r7, #4]
 81087b0:	681b      	ldr	r3, [r3, #0]
 81087b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81087b4:	f003 0302 	and.w	r3, r3, #2
 81087b8:	2b00      	cmp	r3, #0
 81087ba:	d005      	beq.n	81087c8 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 81087bc:	687b      	ldr	r3, [r7, #4]
 81087be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81087c0:	f043 0202 	orr.w	r2, r3, #2
 81087c4:	687b      	ldr	r3, [r7, #4]
 81087c6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 81087c8:	687b      	ldr	r3, [r7, #4]
 81087ca:	681b      	ldr	r3, [r3, #0]
 81087cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81087ce:	f003 0308 	and.w	r3, r3, #8
 81087d2:	2b00      	cmp	r3, #0
 81087d4:	d005      	beq.n	81087e2 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 81087d6:	687b      	ldr	r3, [r7, #4]
 81087d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81087da:	f043 0208 	orr.w	r2, r3, #8
 81087de:	687b      	ldr	r3, [r7, #4]
 81087e0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 81087e2:	687b      	ldr	r3, [r7, #4]
 81087e4:	681b      	ldr	r3, [r3, #0]
 81087e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81087e8:	f003 0320 	and.w	r3, r3, #32
 81087ec:	2b00      	cmp	r3, #0
 81087ee:	d005      	beq.n	81087fc <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 81087f0:	687b      	ldr	r3, [r7, #4]
 81087f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81087f4:	f043 0220 	orr.w	r2, r3, #32
 81087f8:	687b      	ldr	r3, [r7, #4]
 81087fa:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 81087fc:	687b      	ldr	r3, [r7, #4]
 81087fe:	681b      	ldr	r3, [r3, #0]
 8108800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108802:	f003 0310 	and.w	r3, r3, #16
 8108806:	2b00      	cmp	r3, #0
 8108808:	d005      	beq.n	8108816 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 810880a:	687b      	ldr	r3, [r7, #4]
 810880c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810880e:	f043 0210 	orr.w	r2, r3, #16
 8108812:	687b      	ldr	r3, [r7, #4]
 8108814:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8108816:	687b      	ldr	r3, [r7, #4]
 8108818:	681b      	ldr	r3, [r3, #0]
 810881a:	4a33      	ldr	r2, [pc, #204]	@ (81088e8 <HAL_SD_IRQHandler+0x304>)
 810881c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810881e:	687b      	ldr	r3, [r7, #4]
 8108820:	681b      	ldr	r3, [r3, #0]
 8108822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8108824:	687b      	ldr	r3, [r7, #4]
 8108826:	681b      	ldr	r3, [r3, #0]
 8108828:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 810882c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 810882e:	687b      	ldr	r3, [r7, #4]
 8108830:	681b      	ldr	r3, [r3, #0]
 8108832:	68da      	ldr	r2, [r3, #12]
 8108834:	687b      	ldr	r3, [r7, #4]
 8108836:	681b      	ldr	r3, [r3, #0]
 8108838:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 810883c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 810883e:	687b      	ldr	r3, [r7, #4]
 8108840:	681b      	ldr	r3, [r3, #0]
 8108842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8108844:	687b      	ldr	r3, [r7, #4]
 8108846:	681b      	ldr	r3, [r3, #0]
 8108848:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 810884c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 810884e:	687b      	ldr	r3, [r7, #4]
 8108850:	681b      	ldr	r3, [r3, #0]
 8108852:	68da      	ldr	r2, [r3, #12]
 8108854:	687b      	ldr	r3, [r7, #4]
 8108856:	681b      	ldr	r3, [r3, #0]
 8108858:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 810885c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	681b      	ldr	r3, [r3, #0]
 8108862:	4618      	mov	r0, r3
 8108864:	f002 fe6e 	bl	810b544 <SDMMC_CmdStopTransfer>
 8108868:	4602      	mov	r2, r0
 810886a:	687b      	ldr	r3, [r7, #4]
 810886c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810886e:	431a      	orrs	r2, r3
 8108870:	687b      	ldr	r3, [r7, #4]
 8108872:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8108874:	687b      	ldr	r3, [r7, #4]
 8108876:	681b      	ldr	r3, [r3, #0]
 8108878:	68da      	ldr	r2, [r3, #12]
 810887a:	687b      	ldr	r3, [r7, #4]
 810887c:	681b      	ldr	r3, [r3, #0]
 810887e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8108882:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8108884:	687b      	ldr	r3, [r7, #4]
 8108886:	681b      	ldr	r3, [r3, #0]
 8108888:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810888c:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 810888e:	68fb      	ldr	r3, [r7, #12]
 8108890:	f003 0308 	and.w	r3, r3, #8
 8108894:	2b00      	cmp	r3, #0
 8108896:	d00a      	beq.n	81088ae <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8108898:	687b      	ldr	r3, [r7, #4]
 810889a:	2201      	movs	r2, #1
 810889c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 81088a0:	687b      	ldr	r3, [r7, #4]
 81088a2:	2200      	movs	r2, #0
 81088a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 81088a6:	6878      	ldr	r0, [r7, #4]
 81088a8:	f000 f866 	bl	8108978 <HAL_SD_ErrorCallback>
}
 81088ac:	e04b      	b.n	8108946 <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 81088ae:	68fb      	ldr	r3, [r7, #12]
 81088b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81088b4:	2b00      	cmp	r3, #0
 81088b6:	d046      	beq.n	8108946 <HAL_SD_IRQHandler+0x362>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 81088b8:	687b      	ldr	r3, [r7, #4]
 81088ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81088bc:	2b00      	cmp	r3, #0
 81088be:	d042      	beq.n	8108946 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 81088c0:	687b      	ldr	r3, [r7, #4]
 81088c2:	681b      	ldr	r3, [r3, #0]
 81088c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81088c6:	687b      	ldr	r3, [r7, #4]
 81088c8:	681b      	ldr	r3, [r3, #0]
 81088ca:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 81088ce:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 81088d0:	687b      	ldr	r3, [r7, #4]
 81088d2:	681b      	ldr	r3, [r3, #0]
 81088d4:	2200      	movs	r2, #0
 81088d6:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 81088d8:	687b      	ldr	r3, [r7, #4]
 81088da:	2201      	movs	r2, #1
 81088dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 81088e0:	6878      	ldr	r0, [r7, #4]
 81088e2:	f000 f849 	bl	8108978 <HAL_SD_ErrorCallback>
}
 81088e6:	e02e      	b.n	8108946 <HAL_SD_IRQHandler+0x362>
 81088e8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 81088ec:	687b      	ldr	r3, [r7, #4]
 81088ee:	681b      	ldr	r3, [r3, #0]
 81088f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81088f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81088f6:	2b00      	cmp	r3, #0
 81088f8:	d025      	beq.n	8108946 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 81088fa:	687b      	ldr	r3, [r7, #4]
 81088fc:	681b      	ldr	r3, [r3, #0]
 81088fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108902:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8108904:	687b      	ldr	r3, [r7, #4]
 8108906:	681b      	ldr	r3, [r3, #0]
 8108908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810890a:	f003 0304 	and.w	r3, r3, #4
 810890e:	2b00      	cmp	r3, #0
 8108910:	d10c      	bne.n	810892c <HAL_SD_IRQHandler+0x348>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8108912:	68fb      	ldr	r3, [r7, #12]
 8108914:	f003 0320 	and.w	r3, r3, #32
 8108918:	2b00      	cmp	r3, #0
 810891a:	d003      	beq.n	8108924 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 810891c:	6878      	ldr	r0, [r7, #4]
 810891e:	f001 f831 	bl	8109984 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8108922:	e010      	b.n	8108946 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8108924:	6878      	ldr	r0, [r7, #4]
 8108926:	f001 f819 	bl	810995c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 810892a:	e00c      	b.n	8108946 <HAL_SD_IRQHandler+0x362>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 810892c:	68fb      	ldr	r3, [r7, #12]
 810892e:	f003 0320 	and.w	r3, r3, #32
 8108932:	2b00      	cmp	r3, #0
 8108934:	d003      	beq.n	810893e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8108936:	6878      	ldr	r0, [r7, #4]
 8108938:	f001 f81a 	bl	8109970 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 810893c:	e003      	b.n	8108946 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 810893e:	6878      	ldr	r0, [r7, #4]
 8108940:	f001 f802 	bl	8109948 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8108944:	e7ff      	b.n	8108946 <HAL_SD_IRQHandler+0x362>
 8108946:	bf00      	nop
 8108948:	3710      	adds	r7, #16
 810894a:	46bd      	mov	sp, r7
 810894c:	bd80      	pop	{r7, pc}
 810894e:	bf00      	nop

08108950 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8108950:	b480      	push	{r7}
 8108952:	b083      	sub	sp, #12
 8108954:	af00      	add	r7, sp, #0
 8108956:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8108958:	bf00      	nop
 810895a:	370c      	adds	r7, #12
 810895c:	46bd      	mov	sp, r7
 810895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108962:	4770      	bx	lr

08108964 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8108964:	b480      	push	{r7}
 8108966:	b083      	sub	sp, #12
 8108968:	af00      	add	r7, sp, #0
 810896a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 810896c:	bf00      	nop
 810896e:	370c      	adds	r7, #12
 8108970:	46bd      	mov	sp, r7
 8108972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108976:	4770      	bx	lr

08108978 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8108978:	b480      	push	{r7}
 810897a:	b083      	sub	sp, #12
 810897c:	af00      	add	r7, sp, #0
 810897e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8108980:	bf00      	nop
 8108982:	370c      	adds	r7, #12
 8108984:	46bd      	mov	sp, r7
 8108986:	f85d 7b04 	ldr.w	r7, [sp], #4
 810898a:	4770      	bx	lr

0810898c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 810898c:	b480      	push	{r7}
 810898e:	b083      	sub	sp, #12
 8108990:	af00      	add	r7, sp, #0
 8108992:	6078      	str	r0, [r7, #4]
 8108994:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8108996:	687b      	ldr	r3, [r7, #4]
 8108998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810899a:	0f9b      	lsrs	r3, r3, #30
 810899c:	b2da      	uxtb	r2, r3
 810899e:	683b      	ldr	r3, [r7, #0]
 81089a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 81089a2:	687b      	ldr	r3, [r7, #4]
 81089a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81089a6:	0e9b      	lsrs	r3, r3, #26
 81089a8:	b2db      	uxtb	r3, r3
 81089aa:	f003 030f 	and.w	r3, r3, #15
 81089ae:	b2da      	uxtb	r2, r3
 81089b0:	683b      	ldr	r3, [r7, #0]
 81089b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 81089b4:	687b      	ldr	r3, [r7, #4]
 81089b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81089b8:	0e1b      	lsrs	r3, r3, #24
 81089ba:	b2db      	uxtb	r3, r3
 81089bc:	f003 0303 	and.w	r3, r3, #3
 81089c0:	b2da      	uxtb	r2, r3
 81089c2:	683b      	ldr	r3, [r7, #0]
 81089c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 81089c6:	687b      	ldr	r3, [r7, #4]
 81089c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81089ca:	0c1b      	lsrs	r3, r3, #16
 81089cc:	b2da      	uxtb	r2, r3
 81089ce:	683b      	ldr	r3, [r7, #0]
 81089d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 81089d2:	687b      	ldr	r3, [r7, #4]
 81089d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81089d6:	0a1b      	lsrs	r3, r3, #8
 81089d8:	b2da      	uxtb	r2, r3
 81089da:	683b      	ldr	r3, [r7, #0]
 81089dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 81089de:	687b      	ldr	r3, [r7, #4]
 81089e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81089e2:	b2da      	uxtb	r2, r3
 81089e4:	683b      	ldr	r3, [r7, #0]
 81089e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 81089e8:	687b      	ldr	r3, [r7, #4]
 81089ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81089ec:	0d1b      	lsrs	r3, r3, #20
 81089ee:	b29a      	uxth	r2, r3
 81089f0:	683b      	ldr	r3, [r7, #0]
 81089f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 81089f4:	687b      	ldr	r3, [r7, #4]
 81089f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81089f8:	0c1b      	lsrs	r3, r3, #16
 81089fa:	b2db      	uxtb	r3, r3
 81089fc:	f003 030f 	and.w	r3, r3, #15
 8108a00:	b2da      	uxtb	r2, r3
 8108a02:	683b      	ldr	r3, [r7, #0]
 8108a04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8108a06:	687b      	ldr	r3, [r7, #4]
 8108a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108a0a:	0bdb      	lsrs	r3, r3, #15
 8108a0c:	b2db      	uxtb	r3, r3
 8108a0e:	f003 0301 	and.w	r3, r3, #1
 8108a12:	b2da      	uxtb	r2, r3
 8108a14:	683b      	ldr	r3, [r7, #0]
 8108a16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8108a18:	687b      	ldr	r3, [r7, #4]
 8108a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108a1c:	0b9b      	lsrs	r3, r3, #14
 8108a1e:	b2db      	uxtb	r3, r3
 8108a20:	f003 0301 	and.w	r3, r3, #1
 8108a24:	b2da      	uxtb	r2, r3
 8108a26:	683b      	ldr	r3, [r7, #0]
 8108a28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8108a2a:	687b      	ldr	r3, [r7, #4]
 8108a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108a2e:	0b5b      	lsrs	r3, r3, #13
 8108a30:	b2db      	uxtb	r3, r3
 8108a32:	f003 0301 	and.w	r3, r3, #1
 8108a36:	b2da      	uxtb	r2, r3
 8108a38:	683b      	ldr	r3, [r7, #0]
 8108a3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8108a3c:	687b      	ldr	r3, [r7, #4]
 8108a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108a40:	0b1b      	lsrs	r3, r3, #12
 8108a42:	b2db      	uxtb	r3, r3
 8108a44:	f003 0301 	and.w	r3, r3, #1
 8108a48:	b2da      	uxtb	r2, r3
 8108a4a:	683b      	ldr	r3, [r7, #0]
 8108a4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8108a4e:	683b      	ldr	r3, [r7, #0]
 8108a50:	2200      	movs	r2, #0
 8108a52:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8108a54:	687b      	ldr	r3, [r7, #4]
 8108a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108a58:	2b00      	cmp	r3, #0
 8108a5a:	d163      	bne.n	8108b24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8108a5c:	687b      	ldr	r3, [r7, #4]
 8108a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108a60:	009a      	lsls	r2, r3, #2
 8108a62:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8108a66:	4013      	ands	r3, r2
 8108a68:	687a      	ldr	r2, [r7, #4]
 8108a6a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8108a6c:	0f92      	lsrs	r2, r2, #30
 8108a6e:	431a      	orrs	r2, r3
 8108a70:	683b      	ldr	r3, [r7, #0]
 8108a72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8108a74:	687b      	ldr	r3, [r7, #4]
 8108a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108a78:	0edb      	lsrs	r3, r3, #27
 8108a7a:	b2db      	uxtb	r3, r3
 8108a7c:	f003 0307 	and.w	r3, r3, #7
 8108a80:	b2da      	uxtb	r2, r3
 8108a82:	683b      	ldr	r3, [r7, #0]
 8108a84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8108a86:	687b      	ldr	r3, [r7, #4]
 8108a88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108a8a:	0e1b      	lsrs	r3, r3, #24
 8108a8c:	b2db      	uxtb	r3, r3
 8108a8e:	f003 0307 	and.w	r3, r3, #7
 8108a92:	b2da      	uxtb	r2, r3
 8108a94:	683b      	ldr	r3, [r7, #0]
 8108a96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8108a98:	687b      	ldr	r3, [r7, #4]
 8108a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108a9c:	0d5b      	lsrs	r3, r3, #21
 8108a9e:	b2db      	uxtb	r3, r3
 8108aa0:	f003 0307 	and.w	r3, r3, #7
 8108aa4:	b2da      	uxtb	r2, r3
 8108aa6:	683b      	ldr	r3, [r7, #0]
 8108aa8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8108aaa:	687b      	ldr	r3, [r7, #4]
 8108aac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108aae:	0c9b      	lsrs	r3, r3, #18
 8108ab0:	b2db      	uxtb	r3, r3
 8108ab2:	f003 0307 	and.w	r3, r3, #7
 8108ab6:	b2da      	uxtb	r2, r3
 8108ab8:	683b      	ldr	r3, [r7, #0]
 8108aba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8108abc:	687b      	ldr	r3, [r7, #4]
 8108abe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108ac0:	0bdb      	lsrs	r3, r3, #15
 8108ac2:	b2db      	uxtb	r3, r3
 8108ac4:	f003 0307 	and.w	r3, r3, #7
 8108ac8:	b2da      	uxtb	r2, r3
 8108aca:	683b      	ldr	r3, [r7, #0]
 8108acc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8108ace:	683b      	ldr	r3, [r7, #0]
 8108ad0:	691b      	ldr	r3, [r3, #16]
 8108ad2:	1c5a      	adds	r2, r3, #1
 8108ad4:	687b      	ldr	r3, [r7, #4]
 8108ad6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8108ad8:	683b      	ldr	r3, [r7, #0]
 8108ada:	7e1b      	ldrb	r3, [r3, #24]
 8108adc:	b2db      	uxtb	r3, r3
 8108ade:	f003 0307 	and.w	r3, r3, #7
 8108ae2:	3302      	adds	r3, #2
 8108ae4:	2201      	movs	r2, #1
 8108ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8108aea:	687a      	ldr	r2, [r7, #4]
 8108aec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8108aee:	fb03 f202 	mul.w	r2, r3, r2
 8108af2:	687b      	ldr	r3, [r7, #4]
 8108af4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8108af6:	683b      	ldr	r3, [r7, #0]
 8108af8:	7a1b      	ldrb	r3, [r3, #8]
 8108afa:	b2db      	uxtb	r3, r3
 8108afc:	f003 030f 	and.w	r3, r3, #15
 8108b00:	2201      	movs	r2, #1
 8108b02:	409a      	lsls	r2, r3
 8108b04:	687b      	ldr	r3, [r7, #4]
 8108b06:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8108b08:	687b      	ldr	r3, [r7, #4]
 8108b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108b0c:	687a      	ldr	r2, [r7, #4]
 8108b0e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8108b10:	0a52      	lsrs	r2, r2, #9
 8108b12:	fb03 f202 	mul.w	r2, r3, r2
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8108b1a:	687b      	ldr	r3, [r7, #4]
 8108b1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8108b20:	655a      	str	r2, [r3, #84]	@ 0x54
 8108b22:	e031      	b.n	8108b88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8108b24:	687b      	ldr	r3, [r7, #4]
 8108b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108b28:	2b01      	cmp	r3, #1
 8108b2a:	d11d      	bne.n	8108b68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8108b2c:	687b      	ldr	r3, [r7, #4]
 8108b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108b30:	041b      	lsls	r3, r3, #16
 8108b32:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8108b36:	687b      	ldr	r3, [r7, #4]
 8108b38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108b3a:	0c1b      	lsrs	r3, r3, #16
 8108b3c:	431a      	orrs	r2, r3
 8108b3e:	683b      	ldr	r3, [r7, #0]
 8108b40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8108b42:	683b      	ldr	r3, [r7, #0]
 8108b44:	691b      	ldr	r3, [r3, #16]
 8108b46:	3301      	adds	r3, #1
 8108b48:	029a      	lsls	r2, r3, #10
 8108b4a:	687b      	ldr	r3, [r7, #4]
 8108b4c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8108b4e:	687b      	ldr	r3, [r7, #4]
 8108b50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8108b52:	687b      	ldr	r3, [r7, #4]
 8108b54:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8108b56:	687b      	ldr	r3, [r7, #4]
 8108b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8108b5c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8108b5e:	687b      	ldr	r3, [r7, #4]
 8108b60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8108b62:	687b      	ldr	r3, [r7, #4]
 8108b64:	655a      	str	r2, [r3, #84]	@ 0x54
 8108b66:	e00f      	b.n	8108b88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108b68:	687b      	ldr	r3, [r7, #4]
 8108b6a:	681b      	ldr	r3, [r3, #0]
 8108b6c:	4a58      	ldr	r2, [pc, #352]	@ (8108cd0 <HAL_SD_GetCardCSD+0x344>)
 8108b6e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108b70:	687b      	ldr	r3, [r7, #4]
 8108b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108b74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8108b78:	687b      	ldr	r3, [r7, #4]
 8108b7a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108b7c:	687b      	ldr	r3, [r7, #4]
 8108b7e:	2201      	movs	r2, #1
 8108b80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8108b84:	2301      	movs	r3, #1
 8108b86:	e09d      	b.n	8108cc4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8108b88:	687b      	ldr	r3, [r7, #4]
 8108b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108b8c:	0b9b      	lsrs	r3, r3, #14
 8108b8e:	b2db      	uxtb	r3, r3
 8108b90:	f003 0301 	and.w	r3, r3, #1
 8108b94:	b2da      	uxtb	r2, r3
 8108b96:	683b      	ldr	r3, [r7, #0]
 8108b98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8108b9a:	687b      	ldr	r3, [r7, #4]
 8108b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108b9e:	09db      	lsrs	r3, r3, #7
 8108ba0:	b2db      	uxtb	r3, r3
 8108ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108ba6:	b2da      	uxtb	r2, r3
 8108ba8:	683b      	ldr	r3, [r7, #0]
 8108baa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8108bac:	687b      	ldr	r3, [r7, #4]
 8108bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108bb0:	b2db      	uxtb	r3, r3
 8108bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108bb6:	b2da      	uxtb	r2, r3
 8108bb8:	683b      	ldr	r3, [r7, #0]
 8108bba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8108bbc:	687b      	ldr	r3, [r7, #4]
 8108bbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108bc0:	0fdb      	lsrs	r3, r3, #31
 8108bc2:	b2da      	uxtb	r2, r3
 8108bc4:	683b      	ldr	r3, [r7, #0]
 8108bc6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8108bc8:	687b      	ldr	r3, [r7, #4]
 8108bca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108bcc:	0f5b      	lsrs	r3, r3, #29
 8108bce:	b2db      	uxtb	r3, r3
 8108bd0:	f003 0303 	and.w	r3, r3, #3
 8108bd4:	b2da      	uxtb	r2, r3
 8108bd6:	683b      	ldr	r3, [r7, #0]
 8108bd8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8108bda:	687b      	ldr	r3, [r7, #4]
 8108bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108bde:	0e9b      	lsrs	r3, r3, #26
 8108be0:	b2db      	uxtb	r3, r3
 8108be2:	f003 0307 	and.w	r3, r3, #7
 8108be6:	b2da      	uxtb	r2, r3
 8108be8:	683b      	ldr	r3, [r7, #0]
 8108bea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8108bec:	687b      	ldr	r3, [r7, #4]
 8108bee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108bf0:	0d9b      	lsrs	r3, r3, #22
 8108bf2:	b2db      	uxtb	r3, r3
 8108bf4:	f003 030f 	and.w	r3, r3, #15
 8108bf8:	b2da      	uxtb	r2, r3
 8108bfa:	683b      	ldr	r3, [r7, #0]
 8108bfc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8108bfe:	687b      	ldr	r3, [r7, #4]
 8108c00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108c02:	0d5b      	lsrs	r3, r3, #21
 8108c04:	b2db      	uxtb	r3, r3
 8108c06:	f003 0301 	and.w	r3, r3, #1
 8108c0a:	b2da      	uxtb	r2, r3
 8108c0c:	683b      	ldr	r3, [r7, #0]
 8108c0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8108c12:	683b      	ldr	r3, [r7, #0]
 8108c14:	2200      	movs	r2, #0
 8108c16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108c1e:	0c1b      	lsrs	r3, r3, #16
 8108c20:	b2db      	uxtb	r3, r3
 8108c22:	f003 0301 	and.w	r3, r3, #1
 8108c26:	b2da      	uxtb	r2, r3
 8108c28:	683b      	ldr	r3, [r7, #0]
 8108c2a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8108c2e:	687b      	ldr	r3, [r7, #4]
 8108c30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108c32:	0bdb      	lsrs	r3, r3, #15
 8108c34:	b2db      	uxtb	r3, r3
 8108c36:	f003 0301 	and.w	r3, r3, #1
 8108c3a:	b2da      	uxtb	r2, r3
 8108c3c:	683b      	ldr	r3, [r7, #0]
 8108c3e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8108c42:	687b      	ldr	r3, [r7, #4]
 8108c44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108c46:	0b9b      	lsrs	r3, r3, #14
 8108c48:	b2db      	uxtb	r3, r3
 8108c4a:	f003 0301 	and.w	r3, r3, #1
 8108c4e:	b2da      	uxtb	r2, r3
 8108c50:	683b      	ldr	r3, [r7, #0]
 8108c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8108c56:	687b      	ldr	r3, [r7, #4]
 8108c58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108c5a:	0b5b      	lsrs	r3, r3, #13
 8108c5c:	b2db      	uxtb	r3, r3
 8108c5e:	f003 0301 	and.w	r3, r3, #1
 8108c62:	b2da      	uxtb	r2, r3
 8108c64:	683b      	ldr	r3, [r7, #0]
 8108c66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8108c6a:	687b      	ldr	r3, [r7, #4]
 8108c6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108c6e:	0b1b      	lsrs	r3, r3, #12
 8108c70:	b2db      	uxtb	r3, r3
 8108c72:	f003 0301 	and.w	r3, r3, #1
 8108c76:	b2da      	uxtb	r2, r3
 8108c78:	683b      	ldr	r3, [r7, #0]
 8108c7a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8108c7e:	687b      	ldr	r3, [r7, #4]
 8108c80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108c82:	0a9b      	lsrs	r3, r3, #10
 8108c84:	b2db      	uxtb	r3, r3
 8108c86:	f003 0303 	and.w	r3, r3, #3
 8108c8a:	b2da      	uxtb	r2, r3
 8108c8c:	683b      	ldr	r3, [r7, #0]
 8108c8e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8108c92:	687b      	ldr	r3, [r7, #4]
 8108c94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108c96:	0a1b      	lsrs	r3, r3, #8
 8108c98:	b2db      	uxtb	r3, r3
 8108c9a:	f003 0303 	and.w	r3, r3, #3
 8108c9e:	b2da      	uxtb	r2, r3
 8108ca0:	683b      	ldr	r3, [r7, #0]
 8108ca2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8108ca6:	687b      	ldr	r3, [r7, #4]
 8108ca8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108caa:	085b      	lsrs	r3, r3, #1
 8108cac:	b2db      	uxtb	r3, r3
 8108cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108cb2:	b2da      	uxtb	r2, r3
 8108cb4:	683b      	ldr	r3, [r7, #0]
 8108cb6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8108cba:	683b      	ldr	r3, [r7, #0]
 8108cbc:	2201      	movs	r2, #1
 8108cbe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8108cc2:	2300      	movs	r3, #0
}
 8108cc4:	4618      	mov	r0, r3
 8108cc6:	370c      	adds	r7, #12
 8108cc8:	46bd      	mov	sp, r7
 8108cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cce:	4770      	bx	lr
 8108cd0:	1fe00fff 	.word	0x1fe00fff

08108cd4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8108cd4:	b580      	push	{r7, lr}
 8108cd6:	b094      	sub	sp, #80	@ 0x50
 8108cd8:	af00      	add	r7, sp, #0
 8108cda:	6078      	str	r0, [r7, #4]
 8108cdc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8108cde:	2300      	movs	r3, #0
 8108ce0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8108ce4:	687b      	ldr	r3, [r7, #4]
 8108ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8108cea:	b2db      	uxtb	r3, r3
 8108cec:	2b03      	cmp	r3, #3
 8108cee:	d101      	bne.n	8108cf4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8108cf0:	2301      	movs	r3, #1
 8108cf2:	e0a7      	b.n	8108e44 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8108cf4:	f107 0308 	add.w	r3, r7, #8
 8108cf8:	4619      	mov	r1, r3
 8108cfa:	6878      	ldr	r0, [r7, #4]
 8108cfc:	f000 fb36 	bl	810936c <SD_SendSDStatus>
 8108d00:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8108d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8108d04:	2b00      	cmp	r3, #0
 8108d06:	d011      	beq.n	8108d2c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108d08:	687b      	ldr	r3, [r7, #4]
 8108d0a:	681b      	ldr	r3, [r3, #0]
 8108d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8108e4c <HAL_SD_GetCardStatus+0x178>)
 8108d0e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8108d10:	687b      	ldr	r3, [r7, #4]
 8108d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8108d16:	431a      	orrs	r2, r3
 8108d18:	687b      	ldr	r3, [r7, #4]
 8108d1a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108d1c:	687b      	ldr	r3, [r7, #4]
 8108d1e:	2201      	movs	r2, #1
 8108d20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8108d24:	2301      	movs	r3, #1
 8108d26:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8108d2a:	e070      	b.n	8108e0e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8108d2c:	68bb      	ldr	r3, [r7, #8]
 8108d2e:	099b      	lsrs	r3, r3, #6
 8108d30:	b2db      	uxtb	r3, r3
 8108d32:	f003 0303 	and.w	r3, r3, #3
 8108d36:	b2da      	uxtb	r2, r3
 8108d38:	683b      	ldr	r3, [r7, #0]
 8108d3a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8108d3c:	68bb      	ldr	r3, [r7, #8]
 8108d3e:	095b      	lsrs	r3, r3, #5
 8108d40:	b2db      	uxtb	r3, r3
 8108d42:	f003 0301 	and.w	r3, r3, #1
 8108d46:	b2da      	uxtb	r2, r3
 8108d48:	683b      	ldr	r3, [r7, #0]
 8108d4a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8108d4c:	68bb      	ldr	r3, [r7, #8]
 8108d4e:	0a1b      	lsrs	r3, r3, #8
 8108d50:	b29b      	uxth	r3, r3
 8108d52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8108d56:	b29a      	uxth	r2, r3
 8108d58:	68bb      	ldr	r3, [r7, #8]
 8108d5a:	0e1b      	lsrs	r3, r3, #24
 8108d5c:	b29b      	uxth	r3, r3
 8108d5e:	4313      	orrs	r3, r2
 8108d60:	b29a      	uxth	r2, r3
 8108d62:	683b      	ldr	r3, [r7, #0]
 8108d64:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108d66:	68fb      	ldr	r3, [r7, #12]
 8108d68:	061a      	lsls	r2, r3, #24
 8108d6a:	68fb      	ldr	r3, [r7, #12]
 8108d6c:	021b      	lsls	r3, r3, #8
 8108d6e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8108d72:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8108d74:	68fb      	ldr	r3, [r7, #12]
 8108d76:	0a1b      	lsrs	r3, r3, #8
 8108d78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108d7c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8108d7e:	68fb      	ldr	r3, [r7, #12]
 8108d80:	0e1b      	lsrs	r3, r3, #24
 8108d82:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108d84:	683b      	ldr	r3, [r7, #0]
 8108d86:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8108d88:	693b      	ldr	r3, [r7, #16]
 8108d8a:	b2da      	uxtb	r2, r3
 8108d8c:	683b      	ldr	r3, [r7, #0]
 8108d8e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8108d90:	693b      	ldr	r3, [r7, #16]
 8108d92:	0a1b      	lsrs	r3, r3, #8
 8108d94:	b2da      	uxtb	r2, r3
 8108d96:	683b      	ldr	r3, [r7, #0]
 8108d98:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8108d9a:	693b      	ldr	r3, [r7, #16]
 8108d9c:	0d1b      	lsrs	r3, r3, #20
 8108d9e:	b2db      	uxtb	r3, r3
 8108da0:	f003 030f 	and.w	r3, r3, #15
 8108da4:	b2da      	uxtb	r2, r3
 8108da6:	683b      	ldr	r3, [r7, #0]
 8108da8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8108daa:	693b      	ldr	r3, [r7, #16]
 8108dac:	0c1b      	lsrs	r3, r3, #16
 8108dae:	b29b      	uxth	r3, r3
 8108db0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8108db4:	b29a      	uxth	r2, r3
 8108db6:	697b      	ldr	r3, [r7, #20]
 8108db8:	b29b      	uxth	r3, r3
 8108dba:	b2db      	uxtb	r3, r3
 8108dbc:	b29b      	uxth	r3, r3
 8108dbe:	4313      	orrs	r3, r2
 8108dc0:	b29a      	uxth	r2, r3
 8108dc2:	683b      	ldr	r3, [r7, #0]
 8108dc4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8108dc6:	697b      	ldr	r3, [r7, #20]
 8108dc8:	0a9b      	lsrs	r3, r3, #10
 8108dca:	b2db      	uxtb	r3, r3
 8108dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108dd0:	b2da      	uxtb	r2, r3
 8108dd2:	683b      	ldr	r3, [r7, #0]
 8108dd4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8108dd6:	697b      	ldr	r3, [r7, #20]
 8108dd8:	0a1b      	lsrs	r3, r3, #8
 8108dda:	b2db      	uxtb	r3, r3
 8108ddc:	f003 0303 	and.w	r3, r3, #3
 8108de0:	b2da      	uxtb	r2, r3
 8108de2:	683b      	ldr	r3, [r7, #0]
 8108de4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8108de6:	697b      	ldr	r3, [r7, #20]
 8108de8:	091b      	lsrs	r3, r3, #4
 8108dea:	b2db      	uxtb	r3, r3
 8108dec:	f003 030f 	and.w	r3, r3, #15
 8108df0:	b2da      	uxtb	r2, r3
 8108df2:	683b      	ldr	r3, [r7, #0]
 8108df4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8108df6:	697b      	ldr	r3, [r7, #20]
 8108df8:	b2db      	uxtb	r3, r3
 8108dfa:	f003 030f 	and.w	r3, r3, #15
 8108dfe:	b2da      	uxtb	r2, r3
 8108e00:	683b      	ldr	r3, [r7, #0]
 8108e02:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8108e04:	69bb      	ldr	r3, [r7, #24]
 8108e06:	0e1b      	lsrs	r3, r3, #24
 8108e08:	b2da      	uxtb	r2, r3
 8108e0a:	683b      	ldr	r3, [r7, #0]
 8108e0c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108e0e:	687b      	ldr	r3, [r7, #4]
 8108e10:	681b      	ldr	r3, [r3, #0]
 8108e12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8108e16:	4618      	mov	r0, r3
 8108e18:	f002 fb70 	bl	810b4fc <SDMMC_CmdBlockLength>
 8108e1c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8108e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8108e20:	2b00      	cmp	r3, #0
 8108e22:	d00d      	beq.n	8108e40 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108e24:	687b      	ldr	r3, [r7, #4]
 8108e26:	681b      	ldr	r3, [r3, #0]
 8108e28:	4a08      	ldr	r2, [pc, #32]	@ (8108e4c <HAL_SD_GetCardStatus+0x178>)
 8108e2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8108e30:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108e32:	687b      	ldr	r3, [r7, #4]
 8108e34:	2201      	movs	r2, #1
 8108e36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8108e3a:	2301      	movs	r3, #1
 8108e3c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8108e40:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8108e44:	4618      	mov	r0, r3
 8108e46:	3750      	adds	r7, #80	@ 0x50
 8108e48:	46bd      	mov	sp, r7
 8108e4a:	bd80      	pop	{r7, pc}
 8108e4c:	1fe00fff 	.word	0x1fe00fff

08108e50 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8108e50:	b590      	push	{r4, r7, lr}
 8108e52:	b08d      	sub	sp, #52	@ 0x34
 8108e54:	af02      	add	r7, sp, #8
 8108e56:	6078      	str	r0, [r7, #4]
 8108e58:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8108e5a:	2300      	movs	r3, #0
 8108e5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8108e60:	687b      	ldr	r3, [r7, #4]
 8108e62:	2203      	movs	r2, #3
 8108e64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108e68:	687b      	ldr	r3, [r7, #4]
 8108e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108e6c:	2b03      	cmp	r3, #3
 8108e6e:	d02e      	beq.n	8108ece <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8108e70:	683b      	ldr	r3, [r7, #0]
 8108e72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108e76:	d106      	bne.n	8108e86 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108e78:	687b      	ldr	r3, [r7, #4]
 8108e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108e7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8108e80:	687b      	ldr	r3, [r7, #4]
 8108e82:	635a      	str	r2, [r3, #52]	@ 0x34
 8108e84:	e029      	b.n	8108eda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8108e86:	683b      	ldr	r3, [r7, #0]
 8108e88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108e8c:	d10a      	bne.n	8108ea4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8108e8e:	6878      	ldr	r0, [r7, #4]
 8108e90:	f000 fb64 	bl	810955c <SD_WideBus_Enable>
 8108e94:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8108e96:	687b      	ldr	r3, [r7, #4]
 8108e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108e9a:	6a3b      	ldr	r3, [r7, #32]
 8108e9c:	431a      	orrs	r2, r3
 8108e9e:	687b      	ldr	r3, [r7, #4]
 8108ea0:	635a      	str	r2, [r3, #52]	@ 0x34
 8108ea2:	e01a      	b.n	8108eda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8108ea4:	683b      	ldr	r3, [r7, #0]
 8108ea6:	2b00      	cmp	r3, #0
 8108ea8:	d10a      	bne.n	8108ec0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8108eaa:	6878      	ldr	r0, [r7, #4]
 8108eac:	f000 fba1 	bl	81095f2 <SD_WideBus_Disable>
 8108eb0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8108eb2:	687b      	ldr	r3, [r7, #4]
 8108eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108eb6:	6a3b      	ldr	r3, [r7, #32]
 8108eb8:	431a      	orrs	r2, r3
 8108eba:	687b      	ldr	r3, [r7, #4]
 8108ebc:	635a      	str	r2, [r3, #52]	@ 0x34
 8108ebe:	e00c      	b.n	8108eda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8108ec0:	687b      	ldr	r3, [r7, #4]
 8108ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108ec4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8108ec8:	687b      	ldr	r3, [r7, #4]
 8108eca:	635a      	str	r2, [r3, #52]	@ 0x34
 8108ecc:	e005      	b.n	8108eda <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108ece:	687b      	ldr	r3, [r7, #4]
 8108ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108ed2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8108ed6:	687b      	ldr	r3, [r7, #4]
 8108ed8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8108eda:	687b      	ldr	r3, [r7, #4]
 8108edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108ede:	2b00      	cmp	r3, #0
 8108ee0:	d007      	beq.n	8108ef2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108ee2:	687b      	ldr	r3, [r7, #4]
 8108ee4:	681b      	ldr	r3, [r3, #0]
 8108ee6:	4a5f      	ldr	r2, [pc, #380]	@ (8109064 <HAL_SD_ConfigWideBusOperation+0x214>)
 8108ee8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8108eea:	2301      	movs	r3, #1
 8108eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8108ef0:	e096      	b.n	8109020 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8108ef2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8108ef6:	f04f 0100 	mov.w	r1, #0
 8108efa:	f7fd ff5f 	bl	8106dbc <HAL_RCCEx_GetPeriphCLKFreq>
 8108efe:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8108f00:	69fb      	ldr	r3, [r7, #28]
 8108f02:	2b00      	cmp	r3, #0
 8108f04:	f000 8083 	beq.w	810900e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8108f08:	687b      	ldr	r3, [r7, #4]
 8108f0a:	685b      	ldr	r3, [r3, #4]
 8108f0c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8108f0e:	687b      	ldr	r3, [r7, #4]
 8108f10:	689b      	ldr	r3, [r3, #8]
 8108f12:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8108f14:	683b      	ldr	r3, [r7, #0]
 8108f16:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8108f18:	687b      	ldr	r3, [r7, #4]
 8108f1a:	691b      	ldr	r3, [r3, #16]
 8108f1c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8108f1e:	687b      	ldr	r3, [r7, #4]
 8108f20:	695a      	ldr	r2, [r3, #20]
 8108f22:	69fb      	ldr	r3, [r7, #28]
 8108f24:	4950      	ldr	r1, [pc, #320]	@ (8109068 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108f26:	fba1 1303 	umull	r1, r3, r1, r3
 8108f2a:	0e1b      	lsrs	r3, r3, #24
 8108f2c:	429a      	cmp	r2, r3
 8108f2e:	d303      	bcc.n	8108f38 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	695b      	ldr	r3, [r3, #20]
 8108f34:	61bb      	str	r3, [r7, #24]
 8108f36:	e05a      	b.n	8108fee <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8108f38:	687b      	ldr	r3, [r7, #4]
 8108f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108f40:	d103      	bne.n	8108f4a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8108f42:	687b      	ldr	r3, [r7, #4]
 8108f44:	695b      	ldr	r3, [r3, #20]
 8108f46:	61bb      	str	r3, [r7, #24]
 8108f48:	e051      	b.n	8108fee <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8108f4a:	687b      	ldr	r3, [r7, #4]
 8108f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108f52:	d126      	bne.n	8108fa2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	695b      	ldr	r3, [r3, #20]
 8108f58:	2b00      	cmp	r3, #0
 8108f5a:	d10e      	bne.n	8108f7a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8108f5c:	69fb      	ldr	r3, [r7, #28]
 8108f5e:	4a43      	ldr	r2, [pc, #268]	@ (810906c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8108f60:	4293      	cmp	r3, r2
 8108f62:	d906      	bls.n	8108f72 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8108f64:	69fb      	ldr	r3, [r7, #28]
 8108f66:	4a40      	ldr	r2, [pc, #256]	@ (8109068 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108f68:	fba2 2303 	umull	r2, r3, r2, r3
 8108f6c:	0e5b      	lsrs	r3, r3, #25
 8108f6e:	61bb      	str	r3, [r7, #24]
 8108f70:	e03d      	b.n	8108fee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108f72:	687b      	ldr	r3, [r7, #4]
 8108f74:	695b      	ldr	r3, [r3, #20]
 8108f76:	61bb      	str	r3, [r7, #24]
 8108f78:	e039      	b.n	8108fee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8108f7a:	687b      	ldr	r3, [r7, #4]
 8108f7c:	695b      	ldr	r3, [r3, #20]
 8108f7e:	005b      	lsls	r3, r3, #1
 8108f80:	69fa      	ldr	r2, [r7, #28]
 8108f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8108f86:	4a39      	ldr	r2, [pc, #228]	@ (810906c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8108f88:	4293      	cmp	r3, r2
 8108f8a:	d906      	bls.n	8108f9a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8108f8c:	69fb      	ldr	r3, [r7, #28]
 8108f8e:	4a36      	ldr	r2, [pc, #216]	@ (8109068 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108f90:	fba2 2303 	umull	r2, r3, r2, r3
 8108f94:	0e5b      	lsrs	r3, r3, #25
 8108f96:	61bb      	str	r3, [r7, #24]
 8108f98:	e029      	b.n	8108fee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108f9a:	687b      	ldr	r3, [r7, #4]
 8108f9c:	695b      	ldr	r3, [r3, #20]
 8108f9e:	61bb      	str	r3, [r7, #24]
 8108fa0:	e025      	b.n	8108fee <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8108fa2:	687b      	ldr	r3, [r7, #4]
 8108fa4:	695b      	ldr	r3, [r3, #20]
 8108fa6:	2b00      	cmp	r3, #0
 8108fa8:	d10e      	bne.n	8108fc8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8108faa:	69fb      	ldr	r3, [r7, #28]
 8108fac:	4a30      	ldr	r2, [pc, #192]	@ (8109070 <HAL_SD_ConfigWideBusOperation+0x220>)
 8108fae:	4293      	cmp	r3, r2
 8108fb0:	d906      	bls.n	8108fc0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8108fb2:	69fb      	ldr	r3, [r7, #28]
 8108fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8109068 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8108fba:	0e1b      	lsrs	r3, r3, #24
 8108fbc:	61bb      	str	r3, [r7, #24]
 8108fbe:	e016      	b.n	8108fee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108fc0:	687b      	ldr	r3, [r7, #4]
 8108fc2:	695b      	ldr	r3, [r3, #20]
 8108fc4:	61bb      	str	r3, [r7, #24]
 8108fc6:	e012      	b.n	8108fee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8108fc8:	687b      	ldr	r3, [r7, #4]
 8108fca:	695b      	ldr	r3, [r3, #20]
 8108fcc:	005b      	lsls	r3, r3, #1
 8108fce:	69fa      	ldr	r2, [r7, #28]
 8108fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8108fd4:	4a26      	ldr	r2, [pc, #152]	@ (8109070 <HAL_SD_ConfigWideBusOperation+0x220>)
 8108fd6:	4293      	cmp	r3, r2
 8108fd8:	d906      	bls.n	8108fe8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8108fda:	69fb      	ldr	r3, [r7, #28]
 8108fdc:	4a22      	ldr	r2, [pc, #136]	@ (8109068 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108fde:	fba2 2303 	umull	r2, r3, r2, r3
 8108fe2:	0e1b      	lsrs	r3, r3, #24
 8108fe4:	61bb      	str	r3, [r7, #24]
 8108fe6:	e002      	b.n	8108fee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108fe8:	687b      	ldr	r3, [r7, #4]
 8108fea:	695b      	ldr	r3, [r3, #20]
 8108fec:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8108fee:	687b      	ldr	r3, [r7, #4]
 8108ff0:	681c      	ldr	r4, [r3, #0]
 8108ff2:	466a      	mov	r2, sp
 8108ff4:	f107 0314 	add.w	r3, r7, #20
 8108ff8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8108ffc:	e882 0003 	stmia.w	r2, {r0, r1}
 8109000:	f107 0308 	add.w	r3, r7, #8
 8109004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8109006:	4620      	mov	r0, r4
 8109008:	f002 f99a 	bl	810b340 <SDMMC_Init>
 810900c:	e008      	b.n	8109020 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 810900e:	687b      	ldr	r3, [r7, #4]
 8109010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109012:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8109016:	687b      	ldr	r3, [r7, #4]
 8109018:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 810901a:	2301      	movs	r3, #1
 810901c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8109020:	687b      	ldr	r3, [r7, #4]
 8109022:	681b      	ldr	r3, [r3, #0]
 8109024:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8109028:	4618      	mov	r0, r3
 810902a:	f002 fa67 	bl	810b4fc <SDMMC_CmdBlockLength>
 810902e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109030:	6a3b      	ldr	r3, [r7, #32]
 8109032:	2b00      	cmp	r3, #0
 8109034:	d00c      	beq.n	8109050 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109036:	687b      	ldr	r3, [r7, #4]
 8109038:	681b      	ldr	r3, [r3, #0]
 810903a:	4a0a      	ldr	r2, [pc, #40]	@ (8109064 <HAL_SD_ConfigWideBusOperation+0x214>)
 810903c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 810903e:	687b      	ldr	r3, [r7, #4]
 8109040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109042:	6a3b      	ldr	r3, [r7, #32]
 8109044:	431a      	orrs	r2, r3
 8109046:	687b      	ldr	r3, [r7, #4]
 8109048:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 810904a:	2301      	movs	r3, #1
 810904c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8109050:	687b      	ldr	r3, [r7, #4]
 8109052:	2201      	movs	r2, #1
 8109054:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8109058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 810905c:	4618      	mov	r0, r3
 810905e:	372c      	adds	r7, #44	@ 0x2c
 8109060:	46bd      	mov	sp, r7
 8109062:	bd90      	pop	{r4, r7, pc}
 8109064:	1fe00fff 	.word	0x1fe00fff
 8109068:	55e63b89 	.word	0x55e63b89
 810906c:	02faf080 	.word	0x02faf080
 8109070:	017d7840 	.word	0x017d7840

08109074 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8109074:	b580      	push	{r7, lr}
 8109076:	b086      	sub	sp, #24
 8109078:	af00      	add	r7, sp, #0
 810907a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 810907c:	2300      	movs	r3, #0
 810907e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8109080:	f107 030c 	add.w	r3, r7, #12
 8109084:	4619      	mov	r1, r3
 8109086:	6878      	ldr	r0, [r7, #4]
 8109088:	f000 fa40 	bl	810950c <SD_SendStatus>
 810908c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810908e:	697b      	ldr	r3, [r7, #20]
 8109090:	2b00      	cmp	r3, #0
 8109092:	d005      	beq.n	81090a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109098:	697b      	ldr	r3, [r7, #20]
 810909a:	431a      	orrs	r2, r3
 810909c:	687b      	ldr	r3, [r7, #4]
 810909e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 81090a0:	68fb      	ldr	r3, [r7, #12]
 81090a2:	0a5b      	lsrs	r3, r3, #9
 81090a4:	f003 030f 	and.w	r3, r3, #15
 81090a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 81090aa:	693b      	ldr	r3, [r7, #16]
}
 81090ac:	4618      	mov	r0, r3
 81090ae:	3718      	adds	r7, #24
 81090b0:	46bd      	mov	sp, r7
 81090b2:	bd80      	pop	{r7, pc}

081090b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 81090b4:	b580      	push	{r7, lr}
 81090b6:	b090      	sub	sp, #64	@ 0x40
 81090b8:	af00      	add	r7, sp, #0
 81090ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 81090bc:	2300      	movs	r3, #0
 81090be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 81090c0:	f7f8 fc14 	bl	81018ec <HAL_GetTick>
 81090c4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 81090c6:	687b      	ldr	r3, [r7, #4]
 81090c8:	681b      	ldr	r3, [r3, #0]
 81090ca:	4618      	mov	r0, r3
 81090cc:	f002 f991 	bl	810b3f2 <SDMMC_GetPowerState>
 81090d0:	4603      	mov	r3, r0
 81090d2:	2b00      	cmp	r3, #0
 81090d4:	d102      	bne.n	81090dc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 81090d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 81090da:	e0b5      	b.n	8109248 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 81090dc:	687b      	ldr	r3, [r7, #4]
 81090de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81090e0:	2b03      	cmp	r3, #3
 81090e2:	d02e      	beq.n	8109142 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 81090e4:	687b      	ldr	r3, [r7, #4]
 81090e6:	681b      	ldr	r3, [r3, #0]
 81090e8:	4618      	mov	r0, r3
 81090ea:	f002 fb50 	bl	810b78e <SDMMC_CmdSendCID>
 81090ee:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 81090f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81090f2:	2b00      	cmp	r3, #0
 81090f4:	d001      	beq.n	81090fa <SD_InitCard+0x46>
    {
      return errorstate;
 81090f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81090f8:	e0a6      	b.n	8109248 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 81090fa:	687b      	ldr	r3, [r7, #4]
 81090fc:	681b      	ldr	r3, [r3, #0]
 81090fe:	2100      	movs	r1, #0
 8109100:	4618      	mov	r0, r3
 8109102:	f002 f9bc 	bl	810b47e <SDMMC_GetResponse>
 8109106:	4602      	mov	r2, r0
 8109108:	687b      	ldr	r3, [r7, #4]
 810910a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810910c:	687b      	ldr	r3, [r7, #4]
 810910e:	681b      	ldr	r3, [r3, #0]
 8109110:	2104      	movs	r1, #4
 8109112:	4618      	mov	r0, r3
 8109114:	f002 f9b3 	bl	810b47e <SDMMC_GetResponse>
 8109118:	4602      	mov	r2, r0
 810911a:	687b      	ldr	r3, [r7, #4]
 810911c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810911e:	687b      	ldr	r3, [r7, #4]
 8109120:	681b      	ldr	r3, [r3, #0]
 8109122:	2108      	movs	r1, #8
 8109124:	4618      	mov	r0, r3
 8109126:	f002 f9aa 	bl	810b47e <SDMMC_GetResponse>
 810912a:	4602      	mov	r2, r0
 810912c:	687b      	ldr	r3, [r7, #4]
 810912e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8109130:	687b      	ldr	r3, [r7, #4]
 8109132:	681b      	ldr	r3, [r3, #0]
 8109134:	210c      	movs	r1, #12
 8109136:	4618      	mov	r0, r3
 8109138:	f002 f9a1 	bl	810b47e <SDMMC_GetResponse>
 810913c:	4602      	mov	r2, r0
 810913e:	687b      	ldr	r3, [r7, #4]
 8109140:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8109142:	687b      	ldr	r3, [r7, #4]
 8109144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109146:	2b03      	cmp	r3, #3
 8109148:	d01d      	beq.n	8109186 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 810914a:	e019      	b.n	8109180 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 810914c:	687b      	ldr	r3, [r7, #4]
 810914e:	681b      	ldr	r3, [r3, #0]
 8109150:	f107 020a 	add.w	r2, r7, #10
 8109154:	4611      	mov	r1, r2
 8109156:	4618      	mov	r0, r3
 8109158:	f002 fb58 	bl	810b80c <SDMMC_CmdSetRelAdd>
 810915c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 810915e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109160:	2b00      	cmp	r3, #0
 8109162:	d001      	beq.n	8109168 <SD_InitCard+0xb4>
      {
        return errorstate;
 8109164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109166:	e06f      	b.n	8109248 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8109168:	f7f8 fbc0 	bl	81018ec <HAL_GetTick>
 810916c:	4602      	mov	r2, r0
 810916e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109170:	1ad3      	subs	r3, r2, r3
 8109172:	f241 3287 	movw	r2, #4999	@ 0x1387
 8109176:	4293      	cmp	r3, r2
 8109178:	d902      	bls.n	8109180 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 810917a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810917e:	e063      	b.n	8109248 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8109180:	897b      	ldrh	r3, [r7, #10]
 8109182:	2b00      	cmp	r3, #0
 8109184:	d0e2      	beq.n	810914c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8109186:	687b      	ldr	r3, [r7, #4]
 8109188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810918a:	2b03      	cmp	r3, #3
 810918c:	d036      	beq.n	81091fc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 810918e:	897b      	ldrh	r3, [r7, #10]
 8109190:	461a      	mov	r2, r3
 8109192:	687b      	ldr	r3, [r7, #4]
 8109194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109196:	687b      	ldr	r3, [r7, #4]
 8109198:	681a      	ldr	r2, [r3, #0]
 810919a:	687b      	ldr	r3, [r7, #4]
 810919c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810919e:	041b      	lsls	r3, r3, #16
 81091a0:	4619      	mov	r1, r3
 81091a2:	4610      	mov	r0, r2
 81091a4:	f002 fb12 	bl	810b7cc <SDMMC_CmdSendCSD>
 81091a8:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 81091aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81091ac:	2b00      	cmp	r3, #0
 81091ae:	d001      	beq.n	81091b4 <SD_InitCard+0x100>
    {
      return errorstate;
 81091b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81091b2:	e049      	b.n	8109248 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	681b      	ldr	r3, [r3, #0]
 81091b8:	2100      	movs	r1, #0
 81091ba:	4618      	mov	r0, r3
 81091bc:	f002 f95f 	bl	810b47e <SDMMC_GetResponse>
 81091c0:	4602      	mov	r2, r0
 81091c2:	687b      	ldr	r3, [r7, #4]
 81091c4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 81091c6:	687b      	ldr	r3, [r7, #4]
 81091c8:	681b      	ldr	r3, [r3, #0]
 81091ca:	2104      	movs	r1, #4
 81091cc:	4618      	mov	r0, r3
 81091ce:	f002 f956 	bl	810b47e <SDMMC_GetResponse>
 81091d2:	4602      	mov	r2, r0
 81091d4:	687b      	ldr	r3, [r7, #4]
 81091d6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 81091d8:	687b      	ldr	r3, [r7, #4]
 81091da:	681b      	ldr	r3, [r3, #0]
 81091dc:	2108      	movs	r1, #8
 81091de:	4618      	mov	r0, r3
 81091e0:	f002 f94d 	bl	810b47e <SDMMC_GetResponse>
 81091e4:	4602      	mov	r2, r0
 81091e6:	687b      	ldr	r3, [r7, #4]
 81091e8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 81091ea:	687b      	ldr	r3, [r7, #4]
 81091ec:	681b      	ldr	r3, [r3, #0]
 81091ee:	210c      	movs	r1, #12
 81091f0:	4618      	mov	r0, r3
 81091f2:	f002 f944 	bl	810b47e <SDMMC_GetResponse>
 81091f6:	4602      	mov	r2, r0
 81091f8:	687b      	ldr	r3, [r7, #4]
 81091fa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 81091fc:	687b      	ldr	r3, [r7, #4]
 81091fe:	681b      	ldr	r3, [r3, #0]
 8109200:	2104      	movs	r1, #4
 8109202:	4618      	mov	r0, r3
 8109204:	f002 f93b 	bl	810b47e <SDMMC_GetResponse>
 8109208:	4603      	mov	r3, r0
 810920a:	0d1a      	lsrs	r2, r3, #20
 810920c:	687b      	ldr	r3, [r7, #4]
 810920e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8109210:	f107 030c 	add.w	r3, r7, #12
 8109214:	4619      	mov	r1, r3
 8109216:	6878      	ldr	r0, [r7, #4]
 8109218:	f7ff fbb8 	bl	810898c <HAL_SD_GetCardCSD>
 810921c:	4603      	mov	r3, r0
 810921e:	2b00      	cmp	r3, #0
 8109220:	d002      	beq.n	8109228 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109222:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8109226:	e00f      	b.n	8109248 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8109228:	687b      	ldr	r3, [r7, #4]
 810922a:	681a      	ldr	r2, [r3, #0]
 810922c:	687b      	ldr	r3, [r7, #4]
 810922e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109230:	041b      	lsls	r3, r3, #16
 8109232:	4619      	mov	r1, r3
 8109234:	4610      	mov	r0, r2
 8109236:	f002 f9c1 	bl	810b5bc <SDMMC_CmdSelDesel>
 810923a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 810923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810923e:	2b00      	cmp	r3, #0
 8109240:	d001      	beq.n	8109246 <SD_InitCard+0x192>
  {
    return errorstate;
 8109242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109244:	e000      	b.n	8109248 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8109246:	2300      	movs	r3, #0
}
 8109248:	4618      	mov	r0, r3
 810924a:	3740      	adds	r7, #64	@ 0x40
 810924c:	46bd      	mov	sp, r7
 810924e:	bd80      	pop	{r7, pc}

08109250 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8109250:	b580      	push	{r7, lr}
 8109252:	b086      	sub	sp, #24
 8109254:	af00      	add	r7, sp, #0
 8109256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8109258:	2300      	movs	r3, #0
 810925a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 810925c:	2300      	movs	r3, #0
 810925e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8109260:	2300      	movs	r3, #0
 8109262:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8109264:	687b      	ldr	r3, [r7, #4]
 8109266:	681b      	ldr	r3, [r3, #0]
 8109268:	4618      	mov	r0, r3
 810926a:	f002 f9ca 	bl	810b602 <SDMMC_CmdGoIdleState>
 810926e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109270:	68fb      	ldr	r3, [r7, #12]
 8109272:	2b00      	cmp	r3, #0
 8109274:	d001      	beq.n	810927a <SD_PowerON+0x2a>
  {
    return errorstate;
 8109276:	68fb      	ldr	r3, [r7, #12]
 8109278:	e072      	b.n	8109360 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 810927a:	687b      	ldr	r3, [r7, #4]
 810927c:	681b      	ldr	r3, [r3, #0]
 810927e:	4618      	mov	r0, r3
 8109280:	f002 f9dd 	bl	810b63e <SDMMC_CmdOperCond>
 8109284:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8109286:	68fb      	ldr	r3, [r7, #12]
 8109288:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810928c:	d10d      	bne.n	81092aa <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 810928e:	687b      	ldr	r3, [r7, #4]
 8109290:	2200      	movs	r2, #0
 8109292:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8109294:	687b      	ldr	r3, [r7, #4]
 8109296:	681b      	ldr	r3, [r3, #0]
 8109298:	4618      	mov	r0, r3
 810929a:	f002 f9b2 	bl	810b602 <SDMMC_CmdGoIdleState>
 810929e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 81092a0:	68fb      	ldr	r3, [r7, #12]
 81092a2:	2b00      	cmp	r3, #0
 81092a4:	d004      	beq.n	81092b0 <SD_PowerON+0x60>
    {
      return errorstate;
 81092a6:	68fb      	ldr	r3, [r7, #12]
 81092a8:	e05a      	b.n	8109360 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 81092aa:	687b      	ldr	r3, [r7, #4]
 81092ac:	2201      	movs	r2, #1
 81092ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 81092b0:	687b      	ldr	r3, [r7, #4]
 81092b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81092b4:	2b01      	cmp	r3, #1
 81092b6:	d137      	bne.n	8109328 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 81092b8:	687b      	ldr	r3, [r7, #4]
 81092ba:	681b      	ldr	r3, [r3, #0]
 81092bc:	2100      	movs	r1, #0
 81092be:	4618      	mov	r0, r3
 81092c0:	f002 f9dd 	bl	810b67e <SDMMC_CmdAppCommand>
 81092c4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 81092c6:	68fb      	ldr	r3, [r7, #12]
 81092c8:	2b00      	cmp	r3, #0
 81092ca:	d02d      	beq.n	8109328 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81092cc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 81092d0:	e046      	b.n	8109360 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 81092d2:	687b      	ldr	r3, [r7, #4]
 81092d4:	681b      	ldr	r3, [r3, #0]
 81092d6:	2100      	movs	r1, #0
 81092d8:	4618      	mov	r0, r3
 81092da:	f002 f9d0 	bl	810b67e <SDMMC_CmdAppCommand>
 81092de:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 81092e0:	68fb      	ldr	r3, [r7, #12]
 81092e2:	2b00      	cmp	r3, #0
 81092e4:	d001      	beq.n	81092ea <SD_PowerON+0x9a>
    {
      return errorstate;
 81092e6:	68fb      	ldr	r3, [r7, #12]
 81092e8:	e03a      	b.n	8109360 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 81092ea:	687b      	ldr	r3, [r7, #4]
 81092ec:	681b      	ldr	r3, [r3, #0]
 81092ee:	491e      	ldr	r1, [pc, #120]	@ (8109368 <SD_PowerON+0x118>)
 81092f0:	4618      	mov	r0, r3
 81092f2:	f002 f9e7 	bl	810b6c4 <SDMMC_CmdAppOperCommand>
 81092f6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 81092f8:	68fb      	ldr	r3, [r7, #12]
 81092fa:	2b00      	cmp	r3, #0
 81092fc:	d002      	beq.n	8109304 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81092fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8109302:	e02d      	b.n	8109360 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8109304:	687b      	ldr	r3, [r7, #4]
 8109306:	681b      	ldr	r3, [r3, #0]
 8109308:	2100      	movs	r1, #0
 810930a:	4618      	mov	r0, r3
 810930c:	f002 f8b7 	bl	810b47e <SDMMC_GetResponse>
 8109310:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8109312:	697b      	ldr	r3, [r7, #20]
 8109314:	0fdb      	lsrs	r3, r3, #31
 8109316:	2b01      	cmp	r3, #1
 8109318:	d101      	bne.n	810931e <SD_PowerON+0xce>
 810931a:	2301      	movs	r3, #1
 810931c:	e000      	b.n	8109320 <SD_PowerON+0xd0>
 810931e:	2300      	movs	r3, #0
 8109320:	613b      	str	r3, [r7, #16]

    count++;
 8109322:	68bb      	ldr	r3, [r7, #8]
 8109324:	3301      	adds	r3, #1
 8109326:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8109328:	68bb      	ldr	r3, [r7, #8]
 810932a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 810932e:	4293      	cmp	r3, r2
 8109330:	d802      	bhi.n	8109338 <SD_PowerON+0xe8>
 8109332:	693b      	ldr	r3, [r7, #16]
 8109334:	2b00      	cmp	r3, #0
 8109336:	d0cc      	beq.n	81092d2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8109338:	68bb      	ldr	r3, [r7, #8]
 810933a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 810933e:	4293      	cmp	r3, r2
 8109340:	d902      	bls.n	8109348 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8109342:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8109346:	e00b      	b.n	8109360 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8109348:	687b      	ldr	r3, [r7, #4]
 810934a:	2200      	movs	r2, #0
 810934c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 810934e:	697b      	ldr	r3, [r7, #20]
 8109350:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8109354:	2b00      	cmp	r3, #0
 8109356:	d002      	beq.n	810935e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8109358:	687b      	ldr	r3, [r7, #4]
 810935a:	2201      	movs	r2, #1
 810935c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 810935e:	2300      	movs	r3, #0
}
 8109360:	4618      	mov	r0, r3
 8109362:	3718      	adds	r7, #24
 8109364:	46bd      	mov	sp, r7
 8109366:	bd80      	pop	{r7, pc}
 8109368:	c1100000 	.word	0xc1100000

0810936c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 810936c:	b580      	push	{r7, lr}
 810936e:	b08c      	sub	sp, #48	@ 0x30
 8109370:	af00      	add	r7, sp, #0
 8109372:	6078      	str	r0, [r7, #4]
 8109374:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8109376:	f7f8 fab9 	bl	81018ec <HAL_GetTick>
 810937a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 810937c:	683b      	ldr	r3, [r7, #0]
 810937e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109380:	687b      	ldr	r3, [r7, #4]
 8109382:	681b      	ldr	r3, [r3, #0]
 8109384:	2100      	movs	r1, #0
 8109386:	4618      	mov	r0, r3
 8109388:	f002 f879 	bl	810b47e <SDMMC_GetResponse>
 810938c:	4603      	mov	r3, r0
 810938e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109396:	d102      	bne.n	810939e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109398:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810939c:	e0b0      	b.n	8109500 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 810939e:	687b      	ldr	r3, [r7, #4]
 81093a0:	681b      	ldr	r3, [r3, #0]
 81093a2:	2140      	movs	r1, #64	@ 0x40
 81093a4:	4618      	mov	r0, r3
 81093a6:	f002 f8a9 	bl	810b4fc <SDMMC_CmdBlockLength>
 81093aa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81093ac:	6a3b      	ldr	r3, [r7, #32]
 81093ae:	2b00      	cmp	r3, #0
 81093b0:	d005      	beq.n	81093be <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 81093b2:	687b      	ldr	r3, [r7, #4]
 81093b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81093b6:	687b      	ldr	r3, [r7, #4]
 81093b8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 81093ba:	6a3b      	ldr	r3, [r7, #32]
 81093bc:	e0a0      	b.n	8109500 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81093be:	687b      	ldr	r3, [r7, #4]
 81093c0:	681a      	ldr	r2, [r3, #0]
 81093c2:	687b      	ldr	r3, [r7, #4]
 81093c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81093c6:	041b      	lsls	r3, r3, #16
 81093c8:	4619      	mov	r1, r3
 81093ca:	4610      	mov	r0, r2
 81093cc:	f002 f957 	bl	810b67e <SDMMC_CmdAppCommand>
 81093d0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81093d2:	6a3b      	ldr	r3, [r7, #32]
 81093d4:	2b00      	cmp	r3, #0
 81093d6:	d005      	beq.n	81093e4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 81093d8:	687b      	ldr	r3, [r7, #4]
 81093da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81093dc:	687b      	ldr	r3, [r7, #4]
 81093de:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 81093e0:	6a3b      	ldr	r3, [r7, #32]
 81093e2:	e08d      	b.n	8109500 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81093e4:	f04f 33ff 	mov.w	r3, #4294967295
 81093e8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 81093ea:	2340      	movs	r3, #64	@ 0x40
 81093ec:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 81093ee:	2360      	movs	r3, #96	@ 0x60
 81093f0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 81093f2:	2302      	movs	r3, #2
 81093f4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 81093f6:	2300      	movs	r3, #0
 81093f8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 81093fa:	2301      	movs	r3, #1
 81093fc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 81093fe:	687b      	ldr	r3, [r7, #4]
 8109400:	681b      	ldr	r3, [r3, #0]
 8109402:	f107 0208 	add.w	r2, r7, #8
 8109406:	4611      	mov	r1, r2
 8109408:	4618      	mov	r0, r3
 810940a:	f002 f84b 	bl	810b4a4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 810940e:	687b      	ldr	r3, [r7, #4]
 8109410:	681b      	ldr	r3, [r3, #0]
 8109412:	4618      	mov	r0, r3
 8109414:	f002 fa3f 	bl	810b896 <SDMMC_CmdStatusRegister>
 8109418:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810941a:	6a3b      	ldr	r3, [r7, #32]
 810941c:	2b00      	cmp	r3, #0
 810941e:	d02b      	beq.n	8109478 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8109420:	687b      	ldr	r3, [r7, #4]
 8109422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109424:	687b      	ldr	r3, [r7, #4]
 8109426:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8109428:	6a3b      	ldr	r3, [r7, #32]
 810942a:	e069      	b.n	8109500 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 810942c:	687b      	ldr	r3, [r7, #4]
 810942e:	681b      	ldr	r3, [r3, #0]
 8109430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8109436:	2b00      	cmp	r3, #0
 8109438:	d013      	beq.n	8109462 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 810943a:	2300      	movs	r3, #0
 810943c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810943e:	e00d      	b.n	810945c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8109440:	687b      	ldr	r3, [r7, #4]
 8109442:	681b      	ldr	r3, [r3, #0]
 8109444:	4618      	mov	r0, r3
 8109446:	f001 ffa5 	bl	810b394 <SDMMC_ReadFIFO>
 810944a:	4602      	mov	r2, r0
 810944c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810944e:	601a      	str	r2, [r3, #0]
        pData++;
 8109450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109452:	3304      	adds	r3, #4
 8109454:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8109456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109458:	3301      	adds	r3, #1
 810945a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810945c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810945e:	2b07      	cmp	r3, #7
 8109460:	d9ee      	bls.n	8109440 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8109462:	f7f8 fa43 	bl	81018ec <HAL_GetTick>
 8109466:	4602      	mov	r2, r0
 8109468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810946a:	1ad3      	subs	r3, r2, r3
 810946c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109470:	d102      	bne.n	8109478 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109472:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8109476:	e043      	b.n	8109500 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8109478:	687b      	ldr	r3, [r7, #4]
 810947a:	681b      	ldr	r3, [r3, #0]
 810947c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810947e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8109482:	2b00      	cmp	r3, #0
 8109484:	d0d2      	beq.n	810942c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8109486:	687b      	ldr	r3, [r7, #4]
 8109488:	681b      	ldr	r3, [r3, #0]
 810948a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810948c:	f003 0308 	and.w	r3, r3, #8
 8109490:	2b00      	cmp	r3, #0
 8109492:	d001      	beq.n	8109498 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8109494:	2308      	movs	r3, #8
 8109496:	e033      	b.n	8109500 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8109498:	687b      	ldr	r3, [r7, #4]
 810949a:	681b      	ldr	r3, [r3, #0]
 810949c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810949e:	f003 0302 	and.w	r3, r3, #2
 81094a2:	2b00      	cmp	r3, #0
 81094a4:	d001      	beq.n	81094aa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 81094a6:	2302      	movs	r3, #2
 81094a8:	e02a      	b.n	8109500 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 81094aa:	687b      	ldr	r3, [r7, #4]
 81094ac:	681b      	ldr	r3, [r3, #0]
 81094ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81094b0:	f003 0320 	and.w	r3, r3, #32
 81094b4:	2b00      	cmp	r3, #0
 81094b6:	d017      	beq.n	81094e8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 81094b8:	2320      	movs	r3, #32
 81094ba:	e021      	b.n	8109500 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 81094bc:	687b      	ldr	r3, [r7, #4]
 81094be:	681b      	ldr	r3, [r3, #0]
 81094c0:	4618      	mov	r0, r3
 81094c2:	f001 ff67 	bl	810b394 <SDMMC_ReadFIFO>
 81094c6:	4602      	mov	r2, r0
 81094c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81094ca:	601a      	str	r2, [r3, #0]
    pData++;
 81094cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81094ce:	3304      	adds	r3, #4
 81094d0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 81094d2:	f7f8 fa0b 	bl	81018ec <HAL_GetTick>
 81094d6:	4602      	mov	r2, r0
 81094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81094da:	1ad3      	subs	r3, r2, r3
 81094dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81094e0:	d102      	bne.n	81094e8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 81094e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81094e6:	e00b      	b.n	8109500 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 81094e8:	687b      	ldr	r3, [r7, #4]
 81094ea:	681b      	ldr	r3, [r3, #0]
 81094ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81094ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81094f2:	2b00      	cmp	r3, #0
 81094f4:	d1e2      	bne.n	81094bc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 81094f6:	687b      	ldr	r3, [r7, #4]
 81094f8:	681b      	ldr	r3, [r3, #0]
 81094fa:	4a03      	ldr	r2, [pc, #12]	@ (8109508 <SD_SendSDStatus+0x19c>)
 81094fc:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 81094fe:	2300      	movs	r3, #0
}
 8109500:	4618      	mov	r0, r3
 8109502:	3730      	adds	r7, #48	@ 0x30
 8109504:	46bd      	mov	sp, r7
 8109506:	bd80      	pop	{r7, pc}
 8109508:	18000f3a 	.word	0x18000f3a

0810950c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 810950c:	b580      	push	{r7, lr}
 810950e:	b084      	sub	sp, #16
 8109510:	af00      	add	r7, sp, #0
 8109512:	6078      	str	r0, [r7, #4]
 8109514:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8109516:	683b      	ldr	r3, [r7, #0]
 8109518:	2b00      	cmp	r3, #0
 810951a:	d102      	bne.n	8109522 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 810951c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8109520:	e018      	b.n	8109554 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109522:	687b      	ldr	r3, [r7, #4]
 8109524:	681a      	ldr	r2, [r3, #0]
 8109526:	687b      	ldr	r3, [r7, #4]
 8109528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810952a:	041b      	lsls	r3, r3, #16
 810952c:	4619      	mov	r1, r3
 810952e:	4610      	mov	r0, r2
 8109530:	f002 f98e 	bl	810b850 <SDMMC_CmdSendStatus>
 8109534:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109536:	68fb      	ldr	r3, [r7, #12]
 8109538:	2b00      	cmp	r3, #0
 810953a:	d001      	beq.n	8109540 <SD_SendStatus+0x34>
  {
    return errorstate;
 810953c:	68fb      	ldr	r3, [r7, #12]
 810953e:	e009      	b.n	8109554 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	681b      	ldr	r3, [r3, #0]
 8109544:	2100      	movs	r1, #0
 8109546:	4618      	mov	r0, r3
 8109548:	f001 ff99 	bl	810b47e <SDMMC_GetResponse>
 810954c:	4602      	mov	r2, r0
 810954e:	683b      	ldr	r3, [r7, #0]
 8109550:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8109552:	2300      	movs	r3, #0
}
 8109554:	4618      	mov	r0, r3
 8109556:	3710      	adds	r7, #16
 8109558:	46bd      	mov	sp, r7
 810955a:	bd80      	pop	{r7, pc}

0810955c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 810955c:	b580      	push	{r7, lr}
 810955e:	b086      	sub	sp, #24
 8109560:	af00      	add	r7, sp, #0
 8109562:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8109564:	2300      	movs	r3, #0
 8109566:	60fb      	str	r3, [r7, #12]
 8109568:	2300      	movs	r3, #0
 810956a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810956c:	687b      	ldr	r3, [r7, #4]
 810956e:	681b      	ldr	r3, [r3, #0]
 8109570:	2100      	movs	r1, #0
 8109572:	4618      	mov	r0, r3
 8109574:	f001 ff83 	bl	810b47e <SDMMC_GetResponse>
 8109578:	4603      	mov	r3, r0
 810957a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810957e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109582:	d102      	bne.n	810958a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109584:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8109588:	e02f      	b.n	81095ea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810958a:	f107 030c 	add.w	r3, r7, #12
 810958e:	4619      	mov	r1, r3
 8109590:	6878      	ldr	r0, [r7, #4]
 8109592:	f000 f879 	bl	8109688 <SD_FindSCR>
 8109596:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109598:	697b      	ldr	r3, [r7, #20]
 810959a:	2b00      	cmp	r3, #0
 810959c:	d001      	beq.n	81095a2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 810959e:	697b      	ldr	r3, [r7, #20]
 81095a0:	e023      	b.n	81095ea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 81095a2:	693b      	ldr	r3, [r7, #16]
 81095a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81095a8:	2b00      	cmp	r3, #0
 81095aa:	d01c      	beq.n	81095e6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81095ac:	687b      	ldr	r3, [r7, #4]
 81095ae:	681a      	ldr	r2, [r3, #0]
 81095b0:	687b      	ldr	r3, [r7, #4]
 81095b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81095b4:	041b      	lsls	r3, r3, #16
 81095b6:	4619      	mov	r1, r3
 81095b8:	4610      	mov	r0, r2
 81095ba:	f002 f860 	bl	810b67e <SDMMC_CmdAppCommand>
 81095be:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81095c0:	697b      	ldr	r3, [r7, #20]
 81095c2:	2b00      	cmp	r3, #0
 81095c4:	d001      	beq.n	81095ca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 81095c6:	697b      	ldr	r3, [r7, #20]
 81095c8:	e00f      	b.n	81095ea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 81095ca:	687b      	ldr	r3, [r7, #4]
 81095cc:	681b      	ldr	r3, [r3, #0]
 81095ce:	2102      	movs	r1, #2
 81095d0:	4618      	mov	r0, r3
 81095d2:	f002 f897 	bl	810b704 <SDMMC_CmdBusWidth>
 81095d6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81095d8:	697b      	ldr	r3, [r7, #20]
 81095da:	2b00      	cmp	r3, #0
 81095dc:	d001      	beq.n	81095e2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 81095de:	697b      	ldr	r3, [r7, #20]
 81095e0:	e003      	b.n	81095ea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 81095e2:	2300      	movs	r3, #0
 81095e4:	e001      	b.n	81095ea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 81095e6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 81095ea:	4618      	mov	r0, r3
 81095ec:	3718      	adds	r7, #24
 81095ee:	46bd      	mov	sp, r7
 81095f0:	bd80      	pop	{r7, pc}

081095f2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 81095f2:	b580      	push	{r7, lr}
 81095f4:	b086      	sub	sp, #24
 81095f6:	af00      	add	r7, sp, #0
 81095f8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 81095fa:	2300      	movs	r3, #0
 81095fc:	60fb      	str	r3, [r7, #12]
 81095fe:	2300      	movs	r3, #0
 8109600:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109602:	687b      	ldr	r3, [r7, #4]
 8109604:	681b      	ldr	r3, [r3, #0]
 8109606:	2100      	movs	r1, #0
 8109608:	4618      	mov	r0, r3
 810960a:	f001 ff38 	bl	810b47e <SDMMC_GetResponse>
 810960e:	4603      	mov	r3, r0
 8109610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109614:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109618:	d102      	bne.n	8109620 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810961a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810961e:	e02f      	b.n	8109680 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8109620:	f107 030c 	add.w	r3, r7, #12
 8109624:	4619      	mov	r1, r3
 8109626:	6878      	ldr	r0, [r7, #4]
 8109628:	f000 f82e 	bl	8109688 <SD_FindSCR>
 810962c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810962e:	697b      	ldr	r3, [r7, #20]
 8109630:	2b00      	cmp	r3, #0
 8109632:	d001      	beq.n	8109638 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8109634:	697b      	ldr	r3, [r7, #20]
 8109636:	e023      	b.n	8109680 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8109638:	693b      	ldr	r3, [r7, #16]
 810963a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810963e:	2b00      	cmp	r3, #0
 8109640:	d01c      	beq.n	810967c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109642:	687b      	ldr	r3, [r7, #4]
 8109644:	681a      	ldr	r2, [r3, #0]
 8109646:	687b      	ldr	r3, [r7, #4]
 8109648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810964a:	041b      	lsls	r3, r3, #16
 810964c:	4619      	mov	r1, r3
 810964e:	4610      	mov	r0, r2
 8109650:	f002 f815 	bl	810b67e <SDMMC_CmdAppCommand>
 8109654:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109656:	697b      	ldr	r3, [r7, #20]
 8109658:	2b00      	cmp	r3, #0
 810965a:	d001      	beq.n	8109660 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 810965c:	697b      	ldr	r3, [r7, #20]
 810965e:	e00f      	b.n	8109680 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8109660:	687b      	ldr	r3, [r7, #4]
 8109662:	681b      	ldr	r3, [r3, #0]
 8109664:	2100      	movs	r1, #0
 8109666:	4618      	mov	r0, r3
 8109668:	f002 f84c 	bl	810b704 <SDMMC_CmdBusWidth>
 810966c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810966e:	697b      	ldr	r3, [r7, #20]
 8109670:	2b00      	cmp	r3, #0
 8109672:	d001      	beq.n	8109678 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8109674:	697b      	ldr	r3, [r7, #20]
 8109676:	e003      	b.n	8109680 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8109678:	2300      	movs	r3, #0
 810967a:	e001      	b.n	8109680 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810967c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8109680:	4618      	mov	r0, r3
 8109682:	3718      	adds	r7, #24
 8109684:	46bd      	mov	sp, r7
 8109686:	bd80      	pop	{r7, pc}

08109688 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8109688:	b580      	push	{r7, lr}
 810968a:	b08e      	sub	sp, #56	@ 0x38
 810968c:	af00      	add	r7, sp, #0
 810968e:	6078      	str	r0, [r7, #4]
 8109690:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8109692:	f7f8 f92b 	bl	81018ec <HAL_GetTick>
 8109696:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8109698:	2300      	movs	r3, #0
 810969a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 810969c:	2300      	movs	r3, #0
 810969e:	60bb      	str	r3, [r7, #8]
 81096a0:	2300      	movs	r3, #0
 81096a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 81096a4:	683b      	ldr	r3, [r7, #0]
 81096a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 81096a8:	687b      	ldr	r3, [r7, #4]
 81096aa:	681b      	ldr	r3, [r3, #0]
 81096ac:	2108      	movs	r1, #8
 81096ae:	4618      	mov	r0, r3
 81096b0:	f001 ff24 	bl	810b4fc <SDMMC_CmdBlockLength>
 81096b4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81096b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81096b8:	2b00      	cmp	r3, #0
 81096ba:	d001      	beq.n	81096c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 81096bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81096be:	e0ad      	b.n	810981c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 81096c0:	687b      	ldr	r3, [r7, #4]
 81096c2:	681a      	ldr	r2, [r3, #0]
 81096c4:	687b      	ldr	r3, [r7, #4]
 81096c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81096c8:	041b      	lsls	r3, r3, #16
 81096ca:	4619      	mov	r1, r3
 81096cc:	4610      	mov	r0, r2
 81096ce:	f001 ffd6 	bl	810b67e <SDMMC_CmdAppCommand>
 81096d2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81096d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81096d6:	2b00      	cmp	r3, #0
 81096d8:	d001      	beq.n	81096de <SD_FindSCR+0x56>
  {
    return errorstate;
 81096da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81096dc:	e09e      	b.n	810981c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81096de:	f04f 33ff 	mov.w	r3, #4294967295
 81096e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 81096e4:	2308      	movs	r3, #8
 81096e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 81096e8:	2330      	movs	r3, #48	@ 0x30
 81096ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 81096ec:	2302      	movs	r3, #2
 81096ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 81096f0:	2300      	movs	r3, #0
 81096f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 81096f4:	2301      	movs	r3, #1
 81096f6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 81096f8:	687b      	ldr	r3, [r7, #4]
 81096fa:	681b      	ldr	r3, [r3, #0]
 81096fc:	f107 0210 	add.w	r2, r7, #16
 8109700:	4611      	mov	r1, r2
 8109702:	4618      	mov	r0, r3
 8109704:	f001 fece 	bl	810b4a4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8109708:	687b      	ldr	r3, [r7, #4]
 810970a:	681b      	ldr	r3, [r3, #0]
 810970c:	4618      	mov	r0, r3
 810970e:	f002 f81c 	bl	810b74a <SDMMC_CmdSendSCR>
 8109712:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8109714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109716:	2b00      	cmp	r3, #0
 8109718:	d027      	beq.n	810976a <SD_FindSCR+0xe2>
  {
    return errorstate;
 810971a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810971c:	e07e      	b.n	810981c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 810971e:	687b      	ldr	r3, [r7, #4]
 8109720:	681b      	ldr	r3, [r3, #0]
 8109722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109724:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8109728:	2b00      	cmp	r3, #0
 810972a:	d113      	bne.n	8109754 <SD_FindSCR+0xcc>
 810972c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810972e:	2b00      	cmp	r3, #0
 8109730:	d110      	bne.n	8109754 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8109732:	687b      	ldr	r3, [r7, #4]
 8109734:	681b      	ldr	r3, [r3, #0]
 8109736:	4618      	mov	r0, r3
 8109738:	f001 fe2c 	bl	810b394 <SDMMC_ReadFIFO>
 810973c:	4603      	mov	r3, r0
 810973e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8109740:	687b      	ldr	r3, [r7, #4]
 8109742:	681b      	ldr	r3, [r3, #0]
 8109744:	4618      	mov	r0, r3
 8109746:	f001 fe25 	bl	810b394 <SDMMC_ReadFIFO>
 810974a:	4603      	mov	r3, r0
 810974c:	60fb      	str	r3, [r7, #12]
      index++;
 810974e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109750:	3301      	adds	r3, #1
 8109752:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8109754:	f7f8 f8ca 	bl	81018ec <HAL_GetTick>
 8109758:	4602      	mov	r2, r0
 810975a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810975c:	1ad3      	subs	r3, r2, r3
 810975e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109762:	d102      	bne.n	810976a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109764:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8109768:	e058      	b.n	810981c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 810976a:	687b      	ldr	r3, [r7, #4]
 810976c:	681b      	ldr	r3, [r3, #0]
 810976e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109770:	f240 532a 	movw	r3, #1322	@ 0x52a
 8109774:	4013      	ands	r3, r2
 8109776:	2b00      	cmp	r3, #0
 8109778:	d0d1      	beq.n	810971e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810977a:	687b      	ldr	r3, [r7, #4]
 810977c:	681b      	ldr	r3, [r3, #0]
 810977e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109780:	f003 0308 	and.w	r3, r3, #8
 8109784:	2b00      	cmp	r3, #0
 8109786:	d005      	beq.n	8109794 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8109788:	687b      	ldr	r3, [r7, #4]
 810978a:	681b      	ldr	r3, [r3, #0]
 810978c:	2208      	movs	r2, #8
 810978e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8109790:	2308      	movs	r3, #8
 8109792:	e043      	b.n	810981c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8109794:	687b      	ldr	r3, [r7, #4]
 8109796:	681b      	ldr	r3, [r3, #0]
 8109798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810979a:	f003 0302 	and.w	r3, r3, #2
 810979e:	2b00      	cmp	r3, #0
 81097a0:	d005      	beq.n	81097ae <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 81097a2:	687b      	ldr	r3, [r7, #4]
 81097a4:	681b      	ldr	r3, [r3, #0]
 81097a6:	2202      	movs	r2, #2
 81097a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 81097aa:	2302      	movs	r3, #2
 81097ac:	e036      	b.n	810981c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 81097ae:	687b      	ldr	r3, [r7, #4]
 81097b0:	681b      	ldr	r3, [r3, #0]
 81097b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81097b4:	f003 0320 	and.w	r3, r3, #32
 81097b8:	2b00      	cmp	r3, #0
 81097ba:	d005      	beq.n	81097c8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 81097bc:	687b      	ldr	r3, [r7, #4]
 81097be:	681b      	ldr	r3, [r3, #0]
 81097c0:	2220      	movs	r2, #32
 81097c2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 81097c4:	2320      	movs	r3, #32
 81097c6:	e029      	b.n	810981c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 81097c8:	687b      	ldr	r3, [r7, #4]
 81097ca:	681b      	ldr	r3, [r3, #0]
 81097cc:	4a15      	ldr	r2, [pc, #84]	@ (8109824 <SD_FindSCR+0x19c>)
 81097ce:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 81097d0:	68fb      	ldr	r3, [r7, #12]
 81097d2:	061a      	lsls	r2, r3, #24
 81097d4:	68fb      	ldr	r3, [r7, #12]
 81097d6:	021b      	lsls	r3, r3, #8
 81097d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 81097dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 81097de:	68fb      	ldr	r3, [r7, #12]
 81097e0:	0a1b      	lsrs	r3, r3, #8
 81097e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 81097e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 81097e8:	68fb      	ldr	r3, [r7, #12]
 81097ea:	0e1b      	lsrs	r3, r3, #24
 81097ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 81097ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81097f0:	601a      	str	r2, [r3, #0]
    scr++;
 81097f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81097f4:	3304      	adds	r3, #4
 81097f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 81097f8:	68bb      	ldr	r3, [r7, #8]
 81097fa:	061a      	lsls	r2, r3, #24
 81097fc:	68bb      	ldr	r3, [r7, #8]
 81097fe:	021b      	lsls	r3, r3, #8
 8109800:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8109804:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8109806:	68bb      	ldr	r3, [r7, #8]
 8109808:	0a1b      	lsrs	r3, r3, #8
 810980a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 810980e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8109810:	68bb      	ldr	r3, [r7, #8]
 8109812:	0e1b      	lsrs	r3, r3, #24
 8109814:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8109816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109818:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810981a:	2300      	movs	r3, #0
}
 810981c:	4618      	mov	r0, r3
 810981e:	3738      	adds	r7, #56	@ 0x38
 8109820:	46bd      	mov	sp, r7
 8109822:	bd80      	pop	{r7, pc}
 8109824:	18000f3a 	.word	0x18000f3a

08109828 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8109828:	b580      	push	{r7, lr}
 810982a:	b086      	sub	sp, #24
 810982c:	af00      	add	r7, sp, #0
 810982e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8109830:	687b      	ldr	r3, [r7, #4]
 8109832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109834:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 8109836:	687b      	ldr	r3, [r7, #4]
 8109838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810983a:	2b1f      	cmp	r3, #31
 810983c:	d936      	bls.n	81098ac <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 810983e:	2300      	movs	r3, #0
 8109840:	617b      	str	r3, [r7, #20]
 8109842:	e027      	b.n	8109894 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8109844:	687b      	ldr	r3, [r7, #4]
 8109846:	681b      	ldr	r3, [r3, #0]
 8109848:	4618      	mov	r0, r3
 810984a:	f001 fda3 	bl	810b394 <SDMMC_ReadFIFO>
 810984e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8109850:	68fb      	ldr	r3, [r7, #12]
 8109852:	b2da      	uxtb	r2, r3
 8109854:	693b      	ldr	r3, [r7, #16]
 8109856:	701a      	strb	r2, [r3, #0]
      tmp++;
 8109858:	693b      	ldr	r3, [r7, #16]
 810985a:	3301      	adds	r3, #1
 810985c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 810985e:	68fb      	ldr	r3, [r7, #12]
 8109860:	0a1b      	lsrs	r3, r3, #8
 8109862:	b2da      	uxtb	r2, r3
 8109864:	693b      	ldr	r3, [r7, #16]
 8109866:	701a      	strb	r2, [r3, #0]
      tmp++;
 8109868:	693b      	ldr	r3, [r7, #16]
 810986a:	3301      	adds	r3, #1
 810986c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 810986e:	68fb      	ldr	r3, [r7, #12]
 8109870:	0c1b      	lsrs	r3, r3, #16
 8109872:	b2da      	uxtb	r2, r3
 8109874:	693b      	ldr	r3, [r7, #16]
 8109876:	701a      	strb	r2, [r3, #0]
      tmp++;
 8109878:	693b      	ldr	r3, [r7, #16]
 810987a:	3301      	adds	r3, #1
 810987c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 810987e:	68fb      	ldr	r3, [r7, #12]
 8109880:	0e1b      	lsrs	r3, r3, #24
 8109882:	b2da      	uxtb	r2, r3
 8109884:	693b      	ldr	r3, [r7, #16]
 8109886:	701a      	strb	r2, [r3, #0]
      tmp++;
 8109888:	693b      	ldr	r3, [r7, #16]
 810988a:	3301      	adds	r3, #1
 810988c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 810988e:	697b      	ldr	r3, [r7, #20]
 8109890:	3301      	adds	r3, #1
 8109892:	617b      	str	r3, [r7, #20]
 8109894:	697b      	ldr	r3, [r7, #20]
 8109896:	2b07      	cmp	r3, #7
 8109898:	d9d4      	bls.n	8109844 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 810989a:	687b      	ldr	r3, [r7, #4]
 810989c:	693a      	ldr	r2, [r7, #16]
 810989e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 81098a0:	687b      	ldr	r3, [r7, #4]
 81098a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81098a4:	f1a3 0220 	sub.w	r2, r3, #32
 81098a8:	687b      	ldr	r3, [r7, #4]
 81098aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 81098ac:	bf00      	nop
 81098ae:	3718      	adds	r7, #24
 81098b0:	46bd      	mov	sp, r7
 81098b2:	bd80      	pop	{r7, pc}

081098b4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 81098b4:	b580      	push	{r7, lr}
 81098b6:	b086      	sub	sp, #24
 81098b8:	af00      	add	r7, sp, #0
 81098ba:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 81098bc:	687b      	ldr	r3, [r7, #4]
 81098be:	69db      	ldr	r3, [r3, #28]
 81098c0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 81098c2:	687b      	ldr	r3, [r7, #4]
 81098c4:	6a1b      	ldr	r3, [r3, #32]
 81098c6:	2b1f      	cmp	r3, #31
 81098c8:	d93a      	bls.n	8109940 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 81098ca:	2300      	movs	r3, #0
 81098cc:	617b      	str	r3, [r7, #20]
 81098ce:	e02b      	b.n	8109928 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 81098d0:	693b      	ldr	r3, [r7, #16]
 81098d2:	781b      	ldrb	r3, [r3, #0]
 81098d4:	60fb      	str	r3, [r7, #12]
      tmp++;
 81098d6:	693b      	ldr	r3, [r7, #16]
 81098d8:	3301      	adds	r3, #1
 81098da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 81098dc:	693b      	ldr	r3, [r7, #16]
 81098de:	781b      	ldrb	r3, [r3, #0]
 81098e0:	021a      	lsls	r2, r3, #8
 81098e2:	68fb      	ldr	r3, [r7, #12]
 81098e4:	4313      	orrs	r3, r2
 81098e6:	60fb      	str	r3, [r7, #12]
      tmp++;
 81098e8:	693b      	ldr	r3, [r7, #16]
 81098ea:	3301      	adds	r3, #1
 81098ec:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 81098ee:	693b      	ldr	r3, [r7, #16]
 81098f0:	781b      	ldrb	r3, [r3, #0]
 81098f2:	041a      	lsls	r2, r3, #16
 81098f4:	68fb      	ldr	r3, [r7, #12]
 81098f6:	4313      	orrs	r3, r2
 81098f8:	60fb      	str	r3, [r7, #12]
      tmp++;
 81098fa:	693b      	ldr	r3, [r7, #16]
 81098fc:	3301      	adds	r3, #1
 81098fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8109900:	693b      	ldr	r3, [r7, #16]
 8109902:	781b      	ldrb	r3, [r3, #0]
 8109904:	061a      	lsls	r2, r3, #24
 8109906:	68fb      	ldr	r3, [r7, #12]
 8109908:	4313      	orrs	r3, r2
 810990a:	60fb      	str	r3, [r7, #12]
      tmp++;
 810990c:	693b      	ldr	r3, [r7, #16]
 810990e:	3301      	adds	r3, #1
 8109910:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8109912:	687b      	ldr	r3, [r7, #4]
 8109914:	681b      	ldr	r3, [r3, #0]
 8109916:	f107 020c 	add.w	r2, r7, #12
 810991a:	4611      	mov	r1, r2
 810991c:	4618      	mov	r0, r3
 810991e:	f001 fd46 	bl	810b3ae <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8109922:	697b      	ldr	r3, [r7, #20]
 8109924:	3301      	adds	r3, #1
 8109926:	617b      	str	r3, [r7, #20]
 8109928:	697b      	ldr	r3, [r7, #20]
 810992a:	2b07      	cmp	r3, #7
 810992c:	d9d0      	bls.n	81098d0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 810992e:	687b      	ldr	r3, [r7, #4]
 8109930:	693a      	ldr	r2, [r7, #16]
 8109932:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 8109934:	687b      	ldr	r3, [r7, #4]
 8109936:	6a1b      	ldr	r3, [r3, #32]
 8109938:	f1a3 0220 	sub.w	r2, r3, #32
 810993c:	687b      	ldr	r3, [r7, #4]
 810993e:	621a      	str	r2, [r3, #32]
  }
}
 8109940:	bf00      	nop
 8109942:	3718      	adds	r7, #24
 8109944:	46bd      	mov	sp, r7
 8109946:	bd80      	pop	{r7, pc}

08109948 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8109948:	b480      	push	{r7}
 810994a:	b083      	sub	sp, #12
 810994c:	af00      	add	r7, sp, #0
 810994e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8109950:	bf00      	nop
 8109952:	370c      	adds	r7, #12
 8109954:	46bd      	mov	sp, r7
 8109956:	f85d 7b04 	ldr.w	r7, [sp], #4
 810995a:	4770      	bx	lr

0810995c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 810995c:	b480      	push	{r7}
 810995e:	b083      	sub	sp, #12
 8109960:	af00      	add	r7, sp, #0
 8109962:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8109964:	bf00      	nop
 8109966:	370c      	adds	r7, #12
 8109968:	46bd      	mov	sp, r7
 810996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810996e:	4770      	bx	lr

08109970 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8109970:	b480      	push	{r7}
 8109972:	b083      	sub	sp, #12
 8109974:	af00      	add	r7, sp, #0
 8109976:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8109978:	bf00      	nop
 810997a:	370c      	adds	r7, #12
 810997c:	46bd      	mov	sp, r7
 810997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109982:	4770      	bx	lr

08109984 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8109984:	b480      	push	{r7}
 8109986:	b083      	sub	sp, #12
 8109988:	af00      	add	r7, sp, #0
 810998a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 810998c:	bf00      	nop
 810998e:	370c      	adds	r7, #12
 8109990:	46bd      	mov	sp, r7
 8109992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109996:	4770      	bx	lr

08109998 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8109998:	b580      	push	{r7, lr}
 810999a:	b084      	sub	sp, #16
 810999c:	af00      	add	r7, sp, #0
 810999e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81099a0:	687b      	ldr	r3, [r7, #4]
 81099a2:	2b00      	cmp	r3, #0
 81099a4:	d101      	bne.n	81099aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 81099a6:	2301      	movs	r3, #1
 81099a8:	e10f      	b.n	8109bca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81099aa:	687b      	ldr	r3, [r7, #4]
 81099ac:	2200      	movs	r2, #0
 81099ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81099b0:	687b      	ldr	r3, [r7, #4]
 81099b2:	681b      	ldr	r3, [r3, #0]
 81099b4:	4a87      	ldr	r2, [pc, #540]	@ (8109bd4 <HAL_SPI_Init+0x23c>)
 81099b6:	4293      	cmp	r3, r2
 81099b8:	d00f      	beq.n	81099da <HAL_SPI_Init+0x42>
 81099ba:	687b      	ldr	r3, [r7, #4]
 81099bc:	681b      	ldr	r3, [r3, #0]
 81099be:	4a86      	ldr	r2, [pc, #536]	@ (8109bd8 <HAL_SPI_Init+0x240>)
 81099c0:	4293      	cmp	r3, r2
 81099c2:	d00a      	beq.n	81099da <HAL_SPI_Init+0x42>
 81099c4:	687b      	ldr	r3, [r7, #4]
 81099c6:	681b      	ldr	r3, [r3, #0]
 81099c8:	4a84      	ldr	r2, [pc, #528]	@ (8109bdc <HAL_SPI_Init+0x244>)
 81099ca:	4293      	cmp	r3, r2
 81099cc:	d005      	beq.n	81099da <HAL_SPI_Init+0x42>
 81099ce:	687b      	ldr	r3, [r7, #4]
 81099d0:	68db      	ldr	r3, [r3, #12]
 81099d2:	2b0f      	cmp	r3, #15
 81099d4:	d901      	bls.n	81099da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81099d6:	2301      	movs	r3, #1
 81099d8:	e0f7      	b.n	8109bca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81099da:	6878      	ldr	r0, [r7, #4]
 81099dc:	f000 fbba 	bl	810a154 <SPI_GetPacketSize>
 81099e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81099e2:	687b      	ldr	r3, [r7, #4]
 81099e4:	681b      	ldr	r3, [r3, #0]
 81099e6:	4a7b      	ldr	r2, [pc, #492]	@ (8109bd4 <HAL_SPI_Init+0x23c>)
 81099e8:	4293      	cmp	r3, r2
 81099ea:	d00c      	beq.n	8109a06 <HAL_SPI_Init+0x6e>
 81099ec:	687b      	ldr	r3, [r7, #4]
 81099ee:	681b      	ldr	r3, [r3, #0]
 81099f0:	4a79      	ldr	r2, [pc, #484]	@ (8109bd8 <HAL_SPI_Init+0x240>)
 81099f2:	4293      	cmp	r3, r2
 81099f4:	d007      	beq.n	8109a06 <HAL_SPI_Init+0x6e>
 81099f6:	687b      	ldr	r3, [r7, #4]
 81099f8:	681b      	ldr	r3, [r3, #0]
 81099fa:	4a78      	ldr	r2, [pc, #480]	@ (8109bdc <HAL_SPI_Init+0x244>)
 81099fc:	4293      	cmp	r3, r2
 81099fe:	d002      	beq.n	8109a06 <HAL_SPI_Init+0x6e>
 8109a00:	68fb      	ldr	r3, [r7, #12]
 8109a02:	2b08      	cmp	r3, #8
 8109a04:	d811      	bhi.n	8109a2a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109a06:	687b      	ldr	r3, [r7, #4]
 8109a08:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8109a0a:	4a72      	ldr	r2, [pc, #456]	@ (8109bd4 <HAL_SPI_Init+0x23c>)
 8109a0c:	4293      	cmp	r3, r2
 8109a0e:	d009      	beq.n	8109a24 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109a10:	687b      	ldr	r3, [r7, #4]
 8109a12:	681b      	ldr	r3, [r3, #0]
 8109a14:	4a70      	ldr	r2, [pc, #448]	@ (8109bd8 <HAL_SPI_Init+0x240>)
 8109a16:	4293      	cmp	r3, r2
 8109a18:	d004      	beq.n	8109a24 <HAL_SPI_Init+0x8c>
 8109a1a:	687b      	ldr	r3, [r7, #4]
 8109a1c:	681b      	ldr	r3, [r3, #0]
 8109a1e:	4a6f      	ldr	r2, [pc, #444]	@ (8109bdc <HAL_SPI_Init+0x244>)
 8109a20:	4293      	cmp	r3, r2
 8109a22:	d104      	bne.n	8109a2e <HAL_SPI_Init+0x96>
 8109a24:	68fb      	ldr	r3, [r7, #12]
 8109a26:	2b10      	cmp	r3, #16
 8109a28:	d901      	bls.n	8109a2e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8109a2a:	2301      	movs	r3, #1
 8109a2c:	e0cd      	b.n	8109bca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8109a2e:	687b      	ldr	r3, [r7, #4]
 8109a30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8109a34:	b2db      	uxtb	r3, r3
 8109a36:	2b00      	cmp	r3, #0
 8109a38:	d106      	bne.n	8109a48 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8109a3a:	687b      	ldr	r3, [r7, #4]
 8109a3c:	2200      	movs	r2, #0
 8109a3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8109a42:	6878      	ldr	r0, [r7, #4]
 8109a44:	f7f7 fbfc 	bl	8101240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8109a48:	687b      	ldr	r3, [r7, #4]
 8109a4a:	2202      	movs	r2, #2
 8109a4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8109a50:	687b      	ldr	r3, [r7, #4]
 8109a52:	681b      	ldr	r3, [r3, #0]
 8109a54:	681a      	ldr	r2, [r3, #0]
 8109a56:	687b      	ldr	r3, [r7, #4]
 8109a58:	681b      	ldr	r3, [r3, #0]
 8109a5a:	f022 0201 	bic.w	r2, r2, #1
 8109a5e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8109a60:	687b      	ldr	r3, [r7, #4]
 8109a62:	681b      	ldr	r3, [r3, #0]
 8109a64:	689b      	ldr	r3, [r3, #8]
 8109a66:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8109a6a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8109a6c:	687b      	ldr	r3, [r7, #4]
 8109a6e:	699b      	ldr	r3, [r3, #24]
 8109a70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8109a74:	d119      	bne.n	8109aaa <HAL_SPI_Init+0x112>
 8109a76:	687b      	ldr	r3, [r7, #4]
 8109a78:	685b      	ldr	r3, [r3, #4]
 8109a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8109a7e:	d103      	bne.n	8109a88 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109a80:	687b      	ldr	r3, [r7, #4]
 8109a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8109a84:	2b00      	cmp	r3, #0
 8109a86:	d008      	beq.n	8109a9a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8109a88:	687b      	ldr	r3, [r7, #4]
 8109a8a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109a8c:	2b00      	cmp	r3, #0
 8109a8e:	d10c      	bne.n	8109aaa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8109a90:	687b      	ldr	r3, [r7, #4]
 8109a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8109a94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109a98:	d107      	bne.n	8109aaa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8109a9a:	687b      	ldr	r3, [r7, #4]
 8109a9c:	681b      	ldr	r3, [r3, #0]
 8109a9e:	681a      	ldr	r2, [r3, #0]
 8109aa0:	687b      	ldr	r3, [r7, #4]
 8109aa2:	681b      	ldr	r3, [r3, #0]
 8109aa4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8109aa8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8109aaa:	687b      	ldr	r3, [r7, #4]
 8109aac:	685b      	ldr	r3, [r3, #4]
 8109aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109ab2:	2b00      	cmp	r3, #0
 8109ab4:	d00f      	beq.n	8109ad6 <HAL_SPI_Init+0x13e>
 8109ab6:	687b      	ldr	r3, [r7, #4]
 8109ab8:	68db      	ldr	r3, [r3, #12]
 8109aba:	2b06      	cmp	r3, #6
 8109abc:	d90b      	bls.n	8109ad6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8109abe:	687b      	ldr	r3, [r7, #4]
 8109ac0:	681b      	ldr	r3, [r3, #0]
 8109ac2:	681b      	ldr	r3, [r3, #0]
 8109ac4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8109ac8:	687b      	ldr	r3, [r7, #4]
 8109aca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8109acc:	687b      	ldr	r3, [r7, #4]
 8109ace:	681b      	ldr	r3, [r3, #0]
 8109ad0:	430a      	orrs	r2, r1
 8109ad2:	601a      	str	r2, [r3, #0]
 8109ad4:	e007      	b.n	8109ae6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8109ad6:	687b      	ldr	r3, [r7, #4]
 8109ad8:	681b      	ldr	r3, [r3, #0]
 8109ada:	681a      	ldr	r2, [r3, #0]
 8109adc:	687b      	ldr	r3, [r7, #4]
 8109ade:	681b      	ldr	r3, [r3, #0]
 8109ae0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8109ae4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8109ae6:	687b      	ldr	r3, [r7, #4]
 8109ae8:	69da      	ldr	r2, [r3, #28]
 8109aea:	687b      	ldr	r3, [r7, #4]
 8109aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109aee:	431a      	orrs	r2, r3
 8109af0:	68bb      	ldr	r3, [r7, #8]
 8109af2:	431a      	orrs	r2, r3
 8109af4:	687b      	ldr	r3, [r7, #4]
 8109af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109af8:	ea42 0103 	orr.w	r1, r2, r3
 8109afc:	687b      	ldr	r3, [r7, #4]
 8109afe:	68da      	ldr	r2, [r3, #12]
 8109b00:	687b      	ldr	r3, [r7, #4]
 8109b02:	681b      	ldr	r3, [r3, #0]
 8109b04:	430a      	orrs	r2, r1
 8109b06:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8109b08:	687b      	ldr	r3, [r7, #4]
 8109b0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109b0c:	687b      	ldr	r3, [r7, #4]
 8109b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109b10:	431a      	orrs	r2, r3
 8109b12:	687b      	ldr	r3, [r7, #4]
 8109b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109b16:	431a      	orrs	r2, r3
 8109b18:	687b      	ldr	r3, [r7, #4]
 8109b1a:	699b      	ldr	r3, [r3, #24]
 8109b1c:	431a      	orrs	r2, r3
 8109b1e:	687b      	ldr	r3, [r7, #4]
 8109b20:	691b      	ldr	r3, [r3, #16]
 8109b22:	431a      	orrs	r2, r3
 8109b24:	687b      	ldr	r3, [r7, #4]
 8109b26:	695b      	ldr	r3, [r3, #20]
 8109b28:	431a      	orrs	r2, r3
 8109b2a:	687b      	ldr	r3, [r7, #4]
 8109b2c:	6a1b      	ldr	r3, [r3, #32]
 8109b2e:	431a      	orrs	r2, r3
 8109b30:	687b      	ldr	r3, [r7, #4]
 8109b32:	685b      	ldr	r3, [r3, #4]
 8109b34:	431a      	orrs	r2, r3
 8109b36:	687b      	ldr	r3, [r7, #4]
 8109b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109b3a:	431a      	orrs	r2, r3
 8109b3c:	687b      	ldr	r3, [r7, #4]
 8109b3e:	689b      	ldr	r3, [r3, #8]
 8109b40:	431a      	orrs	r2, r3
 8109b42:	687b      	ldr	r3, [r7, #4]
 8109b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8109b46:	ea42 0103 	orr.w	r1, r2, r3
 8109b4a:	687b      	ldr	r3, [r7, #4]
 8109b4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8109b4e:	687b      	ldr	r3, [r7, #4]
 8109b50:	681b      	ldr	r3, [r3, #0]
 8109b52:	430a      	orrs	r2, r1
 8109b54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8109b56:	687b      	ldr	r3, [r7, #4]
 8109b58:	685b      	ldr	r3, [r3, #4]
 8109b5a:	2b00      	cmp	r3, #0
 8109b5c:	d113      	bne.n	8109b86 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8109b5e:	687b      	ldr	r3, [r7, #4]
 8109b60:	681b      	ldr	r3, [r3, #0]
 8109b62:	689b      	ldr	r3, [r3, #8]
 8109b64:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8109b68:	687b      	ldr	r3, [r7, #4]
 8109b6a:	681b      	ldr	r3, [r3, #0]
 8109b6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8109b70:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8109b72:	687b      	ldr	r3, [r7, #4]
 8109b74:	681b      	ldr	r3, [r3, #0]
 8109b76:	689b      	ldr	r3, [r3, #8]
 8109b78:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8109b7c:	687b      	ldr	r3, [r7, #4]
 8109b7e:	681b      	ldr	r3, [r3, #0]
 8109b80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8109b84:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8109b86:	687b      	ldr	r3, [r7, #4]
 8109b88:	681b      	ldr	r3, [r3, #0]
 8109b8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8109b8c:	687b      	ldr	r3, [r7, #4]
 8109b8e:	681b      	ldr	r3, [r3, #0]
 8109b90:	f022 0201 	bic.w	r2, r2, #1
 8109b94:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8109b96:	687b      	ldr	r3, [r7, #4]
 8109b98:	685b      	ldr	r3, [r3, #4]
 8109b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109b9e:	2b00      	cmp	r3, #0
 8109ba0:	d00a      	beq.n	8109bb8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8109ba2:	687b      	ldr	r3, [r7, #4]
 8109ba4:	681b      	ldr	r3, [r3, #0]
 8109ba6:	68db      	ldr	r3, [r3, #12]
 8109ba8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8109bac:	687b      	ldr	r3, [r7, #4]
 8109bae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8109bb0:	687b      	ldr	r3, [r7, #4]
 8109bb2:	681b      	ldr	r3, [r3, #0]
 8109bb4:	430a      	orrs	r2, r1
 8109bb6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8109bb8:	687b      	ldr	r3, [r7, #4]
 8109bba:	2200      	movs	r2, #0
 8109bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8109bc0:	687b      	ldr	r3, [r7, #4]
 8109bc2:	2201      	movs	r2, #1
 8109bc4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8109bc8:	2300      	movs	r3, #0
}
 8109bca:	4618      	mov	r0, r3
 8109bcc:	3710      	adds	r7, #16
 8109bce:	46bd      	mov	sp, r7
 8109bd0:	bd80      	pop	{r7, pc}
 8109bd2:	bf00      	nop
 8109bd4:	40013000 	.word	0x40013000
 8109bd8:	40003800 	.word	0x40003800
 8109bdc:	40003c00 	.word	0x40003c00

08109be0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8109be0:	b580      	push	{r7, lr}
 8109be2:	b08a      	sub	sp, #40	@ 0x28
 8109be4:	af00      	add	r7, sp, #0
 8109be6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8109be8:	687b      	ldr	r3, [r7, #4]
 8109bea:	681b      	ldr	r3, [r3, #0]
 8109bec:	691b      	ldr	r3, [r3, #16]
 8109bee:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8109bf0:	687b      	ldr	r3, [r7, #4]
 8109bf2:	681b      	ldr	r3, [r3, #0]
 8109bf4:	695b      	ldr	r3, [r3, #20]
 8109bf6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8109bf8:	6a3a      	ldr	r2, [r7, #32]
 8109bfa:	69fb      	ldr	r3, [r7, #28]
 8109bfc:	4013      	ands	r3, r2
 8109bfe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8109c00:	687b      	ldr	r3, [r7, #4]
 8109c02:	681b      	ldr	r3, [r3, #0]
 8109c04:	689b      	ldr	r3, [r3, #8]
 8109c06:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8109c08:	2300      	movs	r3, #0
 8109c0a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8109c0c:	687b      	ldr	r3, [r7, #4]
 8109c0e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8109c12:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8109c14:	687b      	ldr	r3, [r7, #4]
 8109c16:	681b      	ldr	r3, [r3, #0]
 8109c18:	3330      	adds	r3, #48	@ 0x30
 8109c1a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8109c1c:	69fb      	ldr	r3, [r7, #28]
 8109c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8109c22:	2b00      	cmp	r3, #0
 8109c24:	d010      	beq.n	8109c48 <HAL_SPI_IRQHandler+0x68>
 8109c26:	6a3b      	ldr	r3, [r7, #32]
 8109c28:	f003 0308 	and.w	r3, r3, #8
 8109c2c:	2b00      	cmp	r3, #0
 8109c2e:	d00b      	beq.n	8109c48 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8109c30:	687b      	ldr	r3, [r7, #4]
 8109c32:	681b      	ldr	r3, [r3, #0]
 8109c34:	699a      	ldr	r2, [r3, #24]
 8109c36:	687b      	ldr	r3, [r7, #4]
 8109c38:	681b      	ldr	r3, [r3, #0]
 8109c3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8109c3e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8109c40:	6878      	ldr	r0, [r7, #4]
 8109c42:	f000 f9c3 	bl	8109fcc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8109c46:	e194      	b.n	8109f72 <HAL_SPI_IRQHandler+0x392>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8109c48:	69bb      	ldr	r3, [r7, #24]
 8109c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109c4e:	2b00      	cmp	r3, #0
 8109c50:	d113      	bne.n	8109c7a <HAL_SPI_IRQHandler+0x9a>
 8109c52:	69bb      	ldr	r3, [r7, #24]
 8109c54:	f003 0320 	and.w	r3, r3, #32
 8109c58:	2b00      	cmp	r3, #0
 8109c5a:	d10e      	bne.n	8109c7a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8109c5c:	69bb      	ldr	r3, [r7, #24]
 8109c5e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8109c62:	2b00      	cmp	r3, #0
 8109c64:	d009      	beq.n	8109c7a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8109c66:	687b      	ldr	r3, [r7, #4]
 8109c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109c6a:	6878      	ldr	r0, [r7, #4]
 8109c6c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8109c6e:	687b      	ldr	r3, [r7, #4]
 8109c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109c72:	6878      	ldr	r0, [r7, #4]
 8109c74:	4798      	blx	r3
    handled = 1UL;
 8109c76:	2301      	movs	r3, #1
 8109c78:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8109c7a:	69bb      	ldr	r3, [r7, #24]
 8109c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109c80:	2b00      	cmp	r3, #0
 8109c82:	d10f      	bne.n	8109ca4 <HAL_SPI_IRQHandler+0xc4>
 8109c84:	69bb      	ldr	r3, [r7, #24]
 8109c86:	f003 0301 	and.w	r3, r3, #1
 8109c8a:	2b00      	cmp	r3, #0
 8109c8c:	d00a      	beq.n	8109ca4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8109c8e:	69bb      	ldr	r3, [r7, #24]
 8109c90:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8109c94:	2b00      	cmp	r3, #0
 8109c96:	d105      	bne.n	8109ca4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8109c98:	687b      	ldr	r3, [r7, #4]
 8109c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109c9c:	6878      	ldr	r0, [r7, #4]
 8109c9e:	4798      	blx	r3
    handled = 1UL;
 8109ca0:	2301      	movs	r3, #1
 8109ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8109ca4:	69bb      	ldr	r3, [r7, #24]
 8109ca6:	f003 0320 	and.w	r3, r3, #32
 8109caa:	2b00      	cmp	r3, #0
 8109cac:	d10f      	bne.n	8109cce <HAL_SPI_IRQHandler+0xee>
 8109cae:	69bb      	ldr	r3, [r7, #24]
 8109cb0:	f003 0302 	and.w	r3, r3, #2
 8109cb4:	2b00      	cmp	r3, #0
 8109cb6:	d00a      	beq.n	8109cce <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8109cb8:	69bb      	ldr	r3, [r7, #24]
 8109cba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8109cbe:	2b00      	cmp	r3, #0
 8109cc0:	d105      	bne.n	8109cce <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8109cc2:	687b      	ldr	r3, [r7, #4]
 8109cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109cc6:	6878      	ldr	r0, [r7, #4]
 8109cc8:	4798      	blx	r3
    handled = 1UL;
 8109cca:	2301      	movs	r3, #1
 8109ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8109cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109cd0:	2b00      	cmp	r3, #0
 8109cd2:	f040 8149 	bne.w	8109f68 <HAL_SPI_IRQHandler+0x388>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8109cd6:	69bb      	ldr	r3, [r7, #24]
 8109cd8:	f003 0308 	and.w	r3, r3, #8
 8109cdc:	2b00      	cmp	r3, #0
 8109cde:	f000 808b 	beq.w	8109df8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8109ce2:	687b      	ldr	r3, [r7, #4]
 8109ce4:	681b      	ldr	r3, [r3, #0]
 8109ce6:	699a      	ldr	r2, [r3, #24]
 8109ce8:	687b      	ldr	r3, [r7, #4]
 8109cea:	681b      	ldr	r3, [r3, #0]
 8109cec:	f042 0208 	orr.w	r2, r2, #8
 8109cf0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8109cf2:	687b      	ldr	r3, [r7, #4]
 8109cf4:	681b      	ldr	r3, [r3, #0]
 8109cf6:	699a      	ldr	r2, [r3, #24]
 8109cf8:	687b      	ldr	r3, [r7, #4]
 8109cfa:	681b      	ldr	r3, [r3, #0]
 8109cfc:	f042 0210 	orr.w	r2, r2, #16
 8109d00:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8109d02:	687b      	ldr	r3, [r7, #4]
 8109d04:	681b      	ldr	r3, [r3, #0]
 8109d06:	699a      	ldr	r2, [r3, #24]
 8109d08:	687b      	ldr	r3, [r7, #4]
 8109d0a:	681b      	ldr	r3, [r3, #0]
 8109d0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8109d10:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8109d12:	687b      	ldr	r3, [r7, #4]
 8109d14:	681b      	ldr	r3, [r3, #0]
 8109d16:	691a      	ldr	r2, [r3, #16]
 8109d18:	687b      	ldr	r3, [r7, #4]
 8109d1a:	681b      	ldr	r3, [r3, #0]
 8109d1c:	f022 0208 	bic.w	r2, r2, #8
 8109d20:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8109d22:	687b      	ldr	r3, [r7, #4]
 8109d24:	681b      	ldr	r3, [r3, #0]
 8109d26:	689b      	ldr	r3, [r3, #8]
 8109d28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8109d2c:	2b00      	cmp	r3, #0
 8109d2e:	d13d      	bne.n	8109dac <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8109d30:	e036      	b.n	8109da0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8109d32:	687b      	ldr	r3, [r7, #4]
 8109d34:	68db      	ldr	r3, [r3, #12]
 8109d36:	2b0f      	cmp	r3, #15
 8109d38:	d90b      	bls.n	8109d52 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8109d3a:	687b      	ldr	r3, [r7, #4]
 8109d3c:	681a      	ldr	r2, [r3, #0]
 8109d3e:	687b      	ldr	r3, [r7, #4]
 8109d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109d42:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8109d44:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8109d46:	687b      	ldr	r3, [r7, #4]
 8109d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109d4a:	1d1a      	adds	r2, r3, #4
 8109d4c:	687b      	ldr	r3, [r7, #4]
 8109d4e:	665a      	str	r2, [r3, #100]	@ 0x64
 8109d50:	e01d      	b.n	8109d8e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8109d52:	687b      	ldr	r3, [r7, #4]
 8109d54:	68db      	ldr	r3, [r3, #12]
 8109d56:	2b07      	cmp	r3, #7
 8109d58:	d90b      	bls.n	8109d72 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8109d5a:	687b      	ldr	r3, [r7, #4]
 8109d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109d5e:	68fa      	ldr	r2, [r7, #12]
 8109d60:	8812      	ldrh	r2, [r2, #0]
 8109d62:	b292      	uxth	r2, r2
 8109d64:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8109d66:	687b      	ldr	r3, [r7, #4]
 8109d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109d6a:	1c9a      	adds	r2, r3, #2
 8109d6c:	687b      	ldr	r3, [r7, #4]
 8109d6e:	665a      	str	r2, [r3, #100]	@ 0x64
 8109d70:	e00d      	b.n	8109d8e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8109d72:	687b      	ldr	r3, [r7, #4]
 8109d74:	681b      	ldr	r3, [r3, #0]
 8109d76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8109d7a:	687b      	ldr	r3, [r7, #4]
 8109d7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109d7e:	7812      	ldrb	r2, [r2, #0]
 8109d80:	b2d2      	uxtb	r2, r2
 8109d82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8109d84:	687b      	ldr	r3, [r7, #4]
 8109d86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109d88:	1c5a      	adds	r2, r3, #1
 8109d8a:	687b      	ldr	r3, [r7, #4]
 8109d8c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8109d8e:	687b      	ldr	r3, [r7, #4]
 8109d90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8109d94:	b29b      	uxth	r3, r3
 8109d96:	3b01      	subs	r3, #1
 8109d98:	b29a      	uxth	r2, r3
 8109d9a:	687b      	ldr	r3, [r7, #4]
 8109d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8109da0:	687b      	ldr	r3, [r7, #4]
 8109da2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8109da6:	b29b      	uxth	r3, r3
 8109da8:	2b00      	cmp	r3, #0
 8109daa:	d1c2      	bne.n	8109d32 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8109dac:	6878      	ldr	r0, [r7, #4]
 8109dae:	f000 f931 	bl	810a014 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8109db2:	687b      	ldr	r3, [r7, #4]
 8109db4:	2201      	movs	r2, #1
 8109db6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8109dba:	687b      	ldr	r3, [r7, #4]
 8109dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109dc0:	2b00      	cmp	r3, #0
 8109dc2:	d003      	beq.n	8109dcc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8109dc4:	6878      	ldr	r0, [r7, #4]
 8109dc6:	f000 f8f7 	bl	8109fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8109dca:	e0d2      	b.n	8109f72 <HAL_SPI_IRQHandler+0x392>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8109dcc:	7cfb      	ldrb	r3, [r7, #19]
 8109dce:	2b05      	cmp	r3, #5
 8109dd0:	d103      	bne.n	8109dda <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8109dd2:	6878      	ldr	r0, [r7, #4]
 8109dd4:	f000 f8e6 	bl	8109fa4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8109dd8:	e0c8      	b.n	8109f6c <HAL_SPI_IRQHandler+0x38c>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8109dda:	7cfb      	ldrb	r3, [r7, #19]
 8109ddc:	2b04      	cmp	r3, #4
 8109dde:	d103      	bne.n	8109de8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8109de0:	6878      	ldr	r0, [r7, #4]
 8109de2:	f000 f8d5 	bl	8109f90 <HAL_SPI_RxCpltCallback>
    return;
 8109de6:	e0c1      	b.n	8109f6c <HAL_SPI_IRQHandler+0x38c>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8109de8:	7cfb      	ldrb	r3, [r7, #19]
 8109dea:	2b03      	cmp	r3, #3
 8109dec:	f040 80be 	bne.w	8109f6c <HAL_SPI_IRQHandler+0x38c>
      HAL_SPI_TxCpltCallback(hspi);
 8109df0:	6878      	ldr	r0, [r7, #4]
 8109df2:	f000 f8c3 	bl	8109f7c <HAL_SPI_TxCpltCallback>
    return;
 8109df6:	e0b9      	b.n	8109f6c <HAL_SPI_IRQHandler+0x38c>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8109df8:	69bb      	ldr	r3, [r7, #24]
 8109dfa:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8109dfe:	2b00      	cmp	r3, #0
 8109e00:	f000 80b7 	beq.w	8109f72 <HAL_SPI_IRQHandler+0x392>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8109e04:	69bb      	ldr	r3, [r7, #24]
 8109e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109e0a:	2b00      	cmp	r3, #0
 8109e0c:	d00f      	beq.n	8109e2e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8109e0e:	687b      	ldr	r3, [r7, #4]
 8109e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109e14:	f043 0204 	orr.w	r2, r3, #4
 8109e18:	687b      	ldr	r3, [r7, #4]
 8109e1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8109e1e:	687b      	ldr	r3, [r7, #4]
 8109e20:	681b      	ldr	r3, [r3, #0]
 8109e22:	699a      	ldr	r2, [r3, #24]
 8109e24:	687b      	ldr	r3, [r7, #4]
 8109e26:	681b      	ldr	r3, [r3, #0]
 8109e28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8109e2c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8109e2e:	69bb      	ldr	r3, [r7, #24]
 8109e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8109e34:	2b00      	cmp	r3, #0
 8109e36:	d00f      	beq.n	8109e58 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8109e38:	687b      	ldr	r3, [r7, #4]
 8109e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109e3e:	f043 0201 	orr.w	r2, r3, #1
 8109e42:	687b      	ldr	r3, [r7, #4]
 8109e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8109e48:	687b      	ldr	r3, [r7, #4]
 8109e4a:	681b      	ldr	r3, [r3, #0]
 8109e4c:	699a      	ldr	r2, [r3, #24]
 8109e4e:	687b      	ldr	r3, [r7, #4]
 8109e50:	681b      	ldr	r3, [r3, #0]
 8109e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8109e56:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8109e58:	69bb      	ldr	r3, [r7, #24]
 8109e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109e5e:	2b00      	cmp	r3, #0
 8109e60:	d00f      	beq.n	8109e82 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8109e62:	687b      	ldr	r3, [r7, #4]
 8109e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109e68:	f043 0208 	orr.w	r2, r3, #8
 8109e6c:	687b      	ldr	r3, [r7, #4]
 8109e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8109e72:	687b      	ldr	r3, [r7, #4]
 8109e74:	681b      	ldr	r3, [r3, #0]
 8109e76:	699a      	ldr	r2, [r3, #24]
 8109e78:	687b      	ldr	r3, [r7, #4]
 8109e7a:	681b      	ldr	r3, [r3, #0]
 8109e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8109e80:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8109e82:	69bb      	ldr	r3, [r7, #24]
 8109e84:	f003 0320 	and.w	r3, r3, #32
 8109e88:	2b00      	cmp	r3, #0
 8109e8a:	d00f      	beq.n	8109eac <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8109e8c:	687b      	ldr	r3, [r7, #4]
 8109e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109e92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8109e96:	687b      	ldr	r3, [r7, #4]
 8109e98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8109e9c:	687b      	ldr	r3, [r7, #4]
 8109e9e:	681b      	ldr	r3, [r3, #0]
 8109ea0:	699a      	ldr	r2, [r3, #24]
 8109ea2:	687b      	ldr	r3, [r7, #4]
 8109ea4:	681b      	ldr	r3, [r3, #0]
 8109ea6:	f042 0220 	orr.w	r2, r2, #32
 8109eaa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8109eac:	687b      	ldr	r3, [r7, #4]
 8109eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109eb2:	2b00      	cmp	r3, #0
 8109eb4:	d05c      	beq.n	8109f70 <HAL_SPI_IRQHandler+0x390>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8109eb6:	687b      	ldr	r3, [r7, #4]
 8109eb8:	681b      	ldr	r3, [r3, #0]
 8109eba:	681a      	ldr	r2, [r3, #0]
 8109ebc:	687b      	ldr	r3, [r7, #4]
 8109ebe:	681b      	ldr	r3, [r3, #0]
 8109ec0:	f022 0201 	bic.w	r2, r2, #1
 8109ec4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8109ec6:	687b      	ldr	r3, [r7, #4]
 8109ec8:	681b      	ldr	r3, [r3, #0]
 8109eca:	691b      	ldr	r3, [r3, #16]
 8109ecc:	687a      	ldr	r2, [r7, #4]
 8109ece:	6812      	ldr	r2, [r2, #0]
 8109ed0:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8109ed4:	f023 0303 	bic.w	r3, r3, #3
 8109ed8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8109eda:	697b      	ldr	r3, [r7, #20]
 8109edc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8109ee0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8109ee4:	d138      	bne.n	8109f58 <HAL_SPI_IRQHandler+0x378>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8109ee6:	687b      	ldr	r3, [r7, #4]
 8109ee8:	681b      	ldr	r3, [r3, #0]
 8109eea:	689a      	ldr	r2, [r3, #8]
 8109eec:	687b      	ldr	r3, [r7, #4]
 8109eee:	681b      	ldr	r3, [r3, #0]
 8109ef0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8109ef4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8109ef6:	687b      	ldr	r3, [r7, #4]
 8109ef8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109efa:	2b00      	cmp	r3, #0
 8109efc:	d013      	beq.n	8109f26 <HAL_SPI_IRQHandler+0x346>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8109efe:	687b      	ldr	r3, [r7, #4]
 8109f00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109f02:	4a1d      	ldr	r2, [pc, #116]	@ (8109f78 <HAL_SPI_IRQHandler+0x398>)
 8109f04:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8109f06:	687b      	ldr	r3, [r7, #4]
 8109f08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109f0a:	4618      	mov	r0, r3
 8109f0c:	f7f9 fa0c 	bl	8103328 <HAL_DMA_Abort_IT>
 8109f10:	4603      	mov	r3, r0
 8109f12:	2b00      	cmp	r3, #0
 8109f14:	d007      	beq.n	8109f26 <HAL_SPI_IRQHandler+0x346>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8109f16:	687b      	ldr	r3, [r7, #4]
 8109f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109f1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8109f20:	687b      	ldr	r3, [r7, #4]
 8109f22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8109f26:	687b      	ldr	r3, [r7, #4]
 8109f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109f2a:	2b00      	cmp	r3, #0
 8109f2c:	d020      	beq.n	8109f70 <HAL_SPI_IRQHandler+0x390>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8109f2e:	687b      	ldr	r3, [r7, #4]
 8109f30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109f32:	4a11      	ldr	r2, [pc, #68]	@ (8109f78 <HAL_SPI_IRQHandler+0x398>)
 8109f34:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8109f36:	687b      	ldr	r3, [r7, #4]
 8109f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8109f3a:	4618      	mov	r0, r3
 8109f3c:	f7f9 f9f4 	bl	8103328 <HAL_DMA_Abort_IT>
 8109f40:	4603      	mov	r3, r0
 8109f42:	2b00      	cmp	r3, #0
 8109f44:	d014      	beq.n	8109f70 <HAL_SPI_IRQHandler+0x390>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8109f46:	687b      	ldr	r3, [r7, #4]
 8109f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109f4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8109f50:	687b      	ldr	r3, [r7, #4]
 8109f52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8109f56:	e00b      	b.n	8109f70 <HAL_SPI_IRQHandler+0x390>
        hspi->State = HAL_SPI_STATE_READY;
 8109f58:	687b      	ldr	r3, [r7, #4]
 8109f5a:	2201      	movs	r2, #1
 8109f5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8109f60:	6878      	ldr	r0, [r7, #4]
 8109f62:	f000 f829 	bl	8109fb8 <HAL_SPI_ErrorCallback>
    return;
 8109f66:	e003      	b.n	8109f70 <HAL_SPI_IRQHandler+0x390>
    return;
 8109f68:	bf00      	nop
 8109f6a:	e002      	b.n	8109f72 <HAL_SPI_IRQHandler+0x392>
    return;
 8109f6c:	bf00      	nop
 8109f6e:	e000      	b.n	8109f72 <HAL_SPI_IRQHandler+0x392>
    return;
 8109f70:	bf00      	nop
  }
}
 8109f72:	3728      	adds	r7, #40	@ 0x28
 8109f74:	46bd      	mov	sp, r7
 8109f76:	bd80      	pop	{r7, pc}
 8109f78:	08109fe1 	.word	0x08109fe1

08109f7c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8109f7c:	b480      	push	{r7}
 8109f7e:	b083      	sub	sp, #12
 8109f80:	af00      	add	r7, sp, #0
 8109f82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8109f84:	bf00      	nop
 8109f86:	370c      	adds	r7, #12
 8109f88:	46bd      	mov	sp, r7
 8109f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f8e:	4770      	bx	lr

08109f90 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8109f90:	b480      	push	{r7}
 8109f92:	b083      	sub	sp, #12
 8109f94:	af00      	add	r7, sp, #0
 8109f96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8109f98:	bf00      	nop
 8109f9a:	370c      	adds	r7, #12
 8109f9c:	46bd      	mov	sp, r7
 8109f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fa2:	4770      	bx	lr

08109fa4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8109fa4:	b480      	push	{r7}
 8109fa6:	b083      	sub	sp, #12
 8109fa8:	af00      	add	r7, sp, #0
 8109faa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8109fac:	bf00      	nop
 8109fae:	370c      	adds	r7, #12
 8109fb0:	46bd      	mov	sp, r7
 8109fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fb6:	4770      	bx	lr

08109fb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8109fb8:	b480      	push	{r7}
 8109fba:	b083      	sub	sp, #12
 8109fbc:	af00      	add	r7, sp, #0
 8109fbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8109fc0:	bf00      	nop
 8109fc2:	370c      	adds	r7, #12
 8109fc4:	46bd      	mov	sp, r7
 8109fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fca:	4770      	bx	lr

08109fcc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8109fcc:	b480      	push	{r7}
 8109fce:	b083      	sub	sp, #12
 8109fd0:	af00      	add	r7, sp, #0
 8109fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8109fd4:	bf00      	nop
 8109fd6:	370c      	adds	r7, #12
 8109fd8:	46bd      	mov	sp, r7
 8109fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fde:	4770      	bx	lr

08109fe0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8109fe0:	b580      	push	{r7, lr}
 8109fe2:	b084      	sub	sp, #16
 8109fe4:	af00      	add	r7, sp, #0
 8109fe6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8109fe8:	687b      	ldr	r3, [r7, #4]
 8109fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109fec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8109fee:	68fb      	ldr	r3, [r7, #12]
 8109ff0:	2200      	movs	r2, #0
 8109ff2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8109ff6:	68fb      	ldr	r3, [r7, #12]
 8109ff8:	2200      	movs	r2, #0
 8109ffa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8109ffe:	68fb      	ldr	r3, [r7, #12]
 810a000:	2201      	movs	r2, #1
 810a002:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810a006:	68f8      	ldr	r0, [r7, #12]
 810a008:	f7ff ffd6 	bl	8109fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810a00c:	bf00      	nop
 810a00e:	3710      	adds	r7, #16
 810a010:	46bd      	mov	sp, r7
 810a012:	bd80      	pop	{r7, pc}

0810a014 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810a014:	b480      	push	{r7}
 810a016:	b085      	sub	sp, #20
 810a018:	af00      	add	r7, sp, #0
 810a01a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810a01c:	687b      	ldr	r3, [r7, #4]
 810a01e:	681b      	ldr	r3, [r3, #0]
 810a020:	695b      	ldr	r3, [r3, #20]
 810a022:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810a024:	687b      	ldr	r3, [r7, #4]
 810a026:	681b      	ldr	r3, [r3, #0]
 810a028:	699a      	ldr	r2, [r3, #24]
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	681b      	ldr	r3, [r3, #0]
 810a02e:	f042 0208 	orr.w	r2, r2, #8
 810a032:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810a034:	687b      	ldr	r3, [r7, #4]
 810a036:	681b      	ldr	r3, [r3, #0]
 810a038:	699a      	ldr	r2, [r3, #24]
 810a03a:	687b      	ldr	r3, [r7, #4]
 810a03c:	681b      	ldr	r3, [r3, #0]
 810a03e:	f042 0210 	orr.w	r2, r2, #16
 810a042:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a044:	687b      	ldr	r3, [r7, #4]
 810a046:	681b      	ldr	r3, [r3, #0]
 810a048:	681a      	ldr	r2, [r3, #0]
 810a04a:	687b      	ldr	r3, [r7, #4]
 810a04c:	681b      	ldr	r3, [r3, #0]
 810a04e:	f022 0201 	bic.w	r2, r2, #1
 810a052:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 810a054:	687b      	ldr	r3, [r7, #4]
 810a056:	681b      	ldr	r3, [r3, #0]
 810a058:	691b      	ldr	r3, [r3, #16]
 810a05a:	687a      	ldr	r2, [r7, #4]
 810a05c:	6812      	ldr	r2, [r2, #0]
 810a05e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 810a062:	f023 0303 	bic.w	r3, r3, #3
 810a066:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a068:	687b      	ldr	r3, [r7, #4]
 810a06a:	681b      	ldr	r3, [r3, #0]
 810a06c:	689a      	ldr	r2, [r3, #8]
 810a06e:	687b      	ldr	r3, [r7, #4]
 810a070:	681b      	ldr	r3, [r3, #0]
 810a072:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 810a076:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810a078:	687b      	ldr	r3, [r7, #4]
 810a07a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810a07e:	b2db      	uxtb	r3, r3
 810a080:	2b04      	cmp	r3, #4
 810a082:	d014      	beq.n	810a0ae <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810a084:	68fb      	ldr	r3, [r7, #12]
 810a086:	f003 0320 	and.w	r3, r3, #32
 810a08a:	2b00      	cmp	r3, #0
 810a08c:	d00f      	beq.n	810a0ae <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810a08e:	687b      	ldr	r3, [r7, #4]
 810a090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810a094:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810a098:	687b      	ldr	r3, [r7, #4]
 810a09a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810a09e:	687b      	ldr	r3, [r7, #4]
 810a0a0:	681b      	ldr	r3, [r3, #0]
 810a0a2:	699a      	ldr	r2, [r3, #24]
 810a0a4:	687b      	ldr	r3, [r7, #4]
 810a0a6:	681b      	ldr	r3, [r3, #0]
 810a0a8:	f042 0220 	orr.w	r2, r2, #32
 810a0ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810a0ae:	687b      	ldr	r3, [r7, #4]
 810a0b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810a0b4:	b2db      	uxtb	r3, r3
 810a0b6:	2b03      	cmp	r3, #3
 810a0b8:	d014      	beq.n	810a0e4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810a0ba:	68fb      	ldr	r3, [r7, #12]
 810a0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a0c0:	2b00      	cmp	r3, #0
 810a0c2:	d00f      	beq.n	810a0e4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810a0c4:	687b      	ldr	r3, [r7, #4]
 810a0c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810a0ca:	f043 0204 	orr.w	r2, r3, #4
 810a0ce:	687b      	ldr	r3, [r7, #4]
 810a0d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810a0d4:	687b      	ldr	r3, [r7, #4]
 810a0d6:	681b      	ldr	r3, [r3, #0]
 810a0d8:	699a      	ldr	r2, [r3, #24]
 810a0da:	687b      	ldr	r3, [r7, #4]
 810a0dc:	681b      	ldr	r3, [r3, #0]
 810a0de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810a0e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810a0e4:	68fb      	ldr	r3, [r7, #12]
 810a0e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810a0ea:	2b00      	cmp	r3, #0
 810a0ec:	d00f      	beq.n	810a10e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810a0ee:	687b      	ldr	r3, [r7, #4]
 810a0f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810a0f4:	f043 0201 	orr.w	r2, r3, #1
 810a0f8:	687b      	ldr	r3, [r7, #4]
 810a0fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810a0fe:	687b      	ldr	r3, [r7, #4]
 810a100:	681b      	ldr	r3, [r3, #0]
 810a102:	699a      	ldr	r2, [r3, #24]
 810a104:	687b      	ldr	r3, [r7, #4]
 810a106:	681b      	ldr	r3, [r3, #0]
 810a108:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 810a10c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810a10e:	68fb      	ldr	r3, [r7, #12]
 810a110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810a114:	2b00      	cmp	r3, #0
 810a116:	d00f      	beq.n	810a138 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810a118:	687b      	ldr	r3, [r7, #4]
 810a11a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810a11e:	f043 0208 	orr.w	r2, r3, #8
 810a122:	687b      	ldr	r3, [r7, #4]
 810a124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810a128:	687b      	ldr	r3, [r7, #4]
 810a12a:	681b      	ldr	r3, [r3, #0]
 810a12c:	699a      	ldr	r2, [r3, #24]
 810a12e:	687b      	ldr	r3, [r7, #4]
 810a130:	681b      	ldr	r3, [r3, #0]
 810a132:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810a136:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810a138:	687b      	ldr	r3, [r7, #4]
 810a13a:	2200      	movs	r2, #0
 810a13c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810a140:	687b      	ldr	r3, [r7, #4]
 810a142:	2200      	movs	r2, #0
 810a144:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 810a148:	bf00      	nop
 810a14a:	3714      	adds	r7, #20
 810a14c:	46bd      	mov	sp, r7
 810a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a152:	4770      	bx	lr

0810a154 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 810a154:	b480      	push	{r7}
 810a156:	b085      	sub	sp, #20
 810a158:	af00      	add	r7, sp, #0
 810a15a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810a15c:	687b      	ldr	r3, [r7, #4]
 810a15e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a160:	095b      	lsrs	r3, r3, #5
 810a162:	3301      	adds	r3, #1
 810a164:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810a166:	687b      	ldr	r3, [r7, #4]
 810a168:	68db      	ldr	r3, [r3, #12]
 810a16a:	3301      	adds	r3, #1
 810a16c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810a16e:	68bb      	ldr	r3, [r7, #8]
 810a170:	3307      	adds	r3, #7
 810a172:	08db      	lsrs	r3, r3, #3
 810a174:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810a176:	68bb      	ldr	r3, [r7, #8]
 810a178:	68fa      	ldr	r2, [r7, #12]
 810a17a:	fb02 f303 	mul.w	r3, r2, r3
}
 810a17e:	4618      	mov	r0, r3
 810a180:	3714      	adds	r7, #20
 810a182:	46bd      	mov	sp, r7
 810a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a188:	4770      	bx	lr

0810a18a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810a18a:	b580      	push	{r7, lr}
 810a18c:	b082      	sub	sp, #8
 810a18e:	af00      	add	r7, sp, #0
 810a190:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810a192:	687b      	ldr	r3, [r7, #4]
 810a194:	2b00      	cmp	r3, #0
 810a196:	d101      	bne.n	810a19c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810a198:	2301      	movs	r3, #1
 810a19a:	e042      	b.n	810a222 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810a19c:	687b      	ldr	r3, [r7, #4]
 810a19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810a1a2:	2b00      	cmp	r3, #0
 810a1a4:	d106      	bne.n	810a1b4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810a1a6:	687b      	ldr	r3, [r7, #4]
 810a1a8:	2200      	movs	r2, #0
 810a1aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810a1ae:	6878      	ldr	r0, [r7, #4]
 810a1b0:	f7f7 f968 	bl	8101484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810a1b4:	687b      	ldr	r3, [r7, #4]
 810a1b6:	2224      	movs	r2, #36	@ 0x24
 810a1b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810a1bc:	687b      	ldr	r3, [r7, #4]
 810a1be:	681b      	ldr	r3, [r3, #0]
 810a1c0:	681a      	ldr	r2, [r3, #0]
 810a1c2:	687b      	ldr	r3, [r7, #4]
 810a1c4:	681b      	ldr	r3, [r3, #0]
 810a1c6:	f022 0201 	bic.w	r2, r2, #1
 810a1ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810a1cc:	687b      	ldr	r3, [r7, #4]
 810a1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a1d0:	2b00      	cmp	r3, #0
 810a1d2:	d002      	beq.n	810a1da <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810a1d4:	6878      	ldr	r0, [r7, #4]
 810a1d6:	f000 fd91 	bl	810acfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810a1da:	6878      	ldr	r0, [r7, #4]
 810a1dc:	f000 f826 	bl	810a22c <UART_SetConfig>
 810a1e0:	4603      	mov	r3, r0
 810a1e2:	2b01      	cmp	r3, #1
 810a1e4:	d101      	bne.n	810a1ea <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810a1e6:	2301      	movs	r3, #1
 810a1e8:	e01b      	b.n	810a222 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810a1ea:	687b      	ldr	r3, [r7, #4]
 810a1ec:	681b      	ldr	r3, [r3, #0]
 810a1ee:	685a      	ldr	r2, [r3, #4]
 810a1f0:	687b      	ldr	r3, [r7, #4]
 810a1f2:	681b      	ldr	r3, [r3, #0]
 810a1f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810a1f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810a1fa:	687b      	ldr	r3, [r7, #4]
 810a1fc:	681b      	ldr	r3, [r3, #0]
 810a1fe:	689a      	ldr	r2, [r3, #8]
 810a200:	687b      	ldr	r3, [r7, #4]
 810a202:	681b      	ldr	r3, [r3, #0]
 810a204:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810a208:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810a20a:	687b      	ldr	r3, [r7, #4]
 810a20c:	681b      	ldr	r3, [r3, #0]
 810a20e:	681a      	ldr	r2, [r3, #0]
 810a210:	687b      	ldr	r3, [r7, #4]
 810a212:	681b      	ldr	r3, [r3, #0]
 810a214:	f042 0201 	orr.w	r2, r2, #1
 810a218:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810a21a:	6878      	ldr	r0, [r7, #4]
 810a21c:	f000 fe10 	bl	810ae40 <UART_CheckIdleState>
 810a220:	4603      	mov	r3, r0
}
 810a222:	4618      	mov	r0, r3
 810a224:	3708      	adds	r7, #8
 810a226:	46bd      	mov	sp, r7
 810a228:	bd80      	pop	{r7, pc}
	...

0810a22c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810a22c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810a230:	b092      	sub	sp, #72	@ 0x48
 810a232:	af00      	add	r7, sp, #0
 810a234:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810a236:	2300      	movs	r3, #0
 810a238:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810a23c:	697b      	ldr	r3, [r7, #20]
 810a23e:	689a      	ldr	r2, [r3, #8]
 810a240:	697b      	ldr	r3, [r7, #20]
 810a242:	691b      	ldr	r3, [r3, #16]
 810a244:	431a      	orrs	r2, r3
 810a246:	697b      	ldr	r3, [r7, #20]
 810a248:	695b      	ldr	r3, [r3, #20]
 810a24a:	431a      	orrs	r2, r3
 810a24c:	697b      	ldr	r3, [r7, #20]
 810a24e:	69db      	ldr	r3, [r3, #28]
 810a250:	4313      	orrs	r3, r2
 810a252:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810a254:	697b      	ldr	r3, [r7, #20]
 810a256:	681b      	ldr	r3, [r3, #0]
 810a258:	681a      	ldr	r2, [r3, #0]
 810a25a:	4bbd      	ldr	r3, [pc, #756]	@ (810a550 <UART_SetConfig+0x324>)
 810a25c:	4013      	ands	r3, r2
 810a25e:	697a      	ldr	r2, [r7, #20]
 810a260:	6812      	ldr	r2, [r2, #0]
 810a262:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810a264:	430b      	orrs	r3, r1
 810a266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810a268:	697b      	ldr	r3, [r7, #20]
 810a26a:	681b      	ldr	r3, [r3, #0]
 810a26c:	685b      	ldr	r3, [r3, #4]
 810a26e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810a272:	697b      	ldr	r3, [r7, #20]
 810a274:	68da      	ldr	r2, [r3, #12]
 810a276:	697b      	ldr	r3, [r7, #20]
 810a278:	681b      	ldr	r3, [r3, #0]
 810a27a:	430a      	orrs	r2, r1
 810a27c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810a27e:	697b      	ldr	r3, [r7, #20]
 810a280:	699b      	ldr	r3, [r3, #24]
 810a282:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810a284:	697b      	ldr	r3, [r7, #20]
 810a286:	681b      	ldr	r3, [r3, #0]
 810a288:	4ab2      	ldr	r2, [pc, #712]	@ (810a554 <UART_SetConfig+0x328>)
 810a28a:	4293      	cmp	r3, r2
 810a28c:	d004      	beq.n	810a298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810a28e:	697b      	ldr	r3, [r7, #20]
 810a290:	6a1b      	ldr	r3, [r3, #32]
 810a292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810a294:	4313      	orrs	r3, r2
 810a296:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810a298:	697b      	ldr	r3, [r7, #20]
 810a29a:	681b      	ldr	r3, [r3, #0]
 810a29c:	689b      	ldr	r3, [r3, #8]
 810a29e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810a2a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810a2a6:	697a      	ldr	r2, [r7, #20]
 810a2a8:	6812      	ldr	r2, [r2, #0]
 810a2aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810a2ac:	430b      	orrs	r3, r1
 810a2ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810a2b0:	697b      	ldr	r3, [r7, #20]
 810a2b2:	681b      	ldr	r3, [r3, #0]
 810a2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a2b6:	f023 010f 	bic.w	r1, r3, #15
 810a2ba:	697b      	ldr	r3, [r7, #20]
 810a2bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810a2be:	697b      	ldr	r3, [r7, #20]
 810a2c0:	681b      	ldr	r3, [r3, #0]
 810a2c2:	430a      	orrs	r2, r1
 810a2c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810a2c6:	697b      	ldr	r3, [r7, #20]
 810a2c8:	681b      	ldr	r3, [r3, #0]
 810a2ca:	4aa3      	ldr	r2, [pc, #652]	@ (810a558 <UART_SetConfig+0x32c>)
 810a2cc:	4293      	cmp	r3, r2
 810a2ce:	d177      	bne.n	810a3c0 <UART_SetConfig+0x194>
 810a2d0:	4ba2      	ldr	r3, [pc, #648]	@ (810a55c <UART_SetConfig+0x330>)
 810a2d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a2d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810a2d8:	2b28      	cmp	r3, #40	@ 0x28
 810a2da:	d86d      	bhi.n	810a3b8 <UART_SetConfig+0x18c>
 810a2dc:	a201      	add	r2, pc, #4	@ (adr r2, 810a2e4 <UART_SetConfig+0xb8>)
 810a2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a2e2:	bf00      	nop
 810a2e4:	0810a389 	.word	0x0810a389
 810a2e8:	0810a3b9 	.word	0x0810a3b9
 810a2ec:	0810a3b9 	.word	0x0810a3b9
 810a2f0:	0810a3b9 	.word	0x0810a3b9
 810a2f4:	0810a3b9 	.word	0x0810a3b9
 810a2f8:	0810a3b9 	.word	0x0810a3b9
 810a2fc:	0810a3b9 	.word	0x0810a3b9
 810a300:	0810a3b9 	.word	0x0810a3b9
 810a304:	0810a391 	.word	0x0810a391
 810a308:	0810a3b9 	.word	0x0810a3b9
 810a30c:	0810a3b9 	.word	0x0810a3b9
 810a310:	0810a3b9 	.word	0x0810a3b9
 810a314:	0810a3b9 	.word	0x0810a3b9
 810a318:	0810a3b9 	.word	0x0810a3b9
 810a31c:	0810a3b9 	.word	0x0810a3b9
 810a320:	0810a3b9 	.word	0x0810a3b9
 810a324:	0810a399 	.word	0x0810a399
 810a328:	0810a3b9 	.word	0x0810a3b9
 810a32c:	0810a3b9 	.word	0x0810a3b9
 810a330:	0810a3b9 	.word	0x0810a3b9
 810a334:	0810a3b9 	.word	0x0810a3b9
 810a338:	0810a3b9 	.word	0x0810a3b9
 810a33c:	0810a3b9 	.word	0x0810a3b9
 810a340:	0810a3b9 	.word	0x0810a3b9
 810a344:	0810a3a1 	.word	0x0810a3a1
 810a348:	0810a3b9 	.word	0x0810a3b9
 810a34c:	0810a3b9 	.word	0x0810a3b9
 810a350:	0810a3b9 	.word	0x0810a3b9
 810a354:	0810a3b9 	.word	0x0810a3b9
 810a358:	0810a3b9 	.word	0x0810a3b9
 810a35c:	0810a3b9 	.word	0x0810a3b9
 810a360:	0810a3b9 	.word	0x0810a3b9
 810a364:	0810a3a9 	.word	0x0810a3a9
 810a368:	0810a3b9 	.word	0x0810a3b9
 810a36c:	0810a3b9 	.word	0x0810a3b9
 810a370:	0810a3b9 	.word	0x0810a3b9
 810a374:	0810a3b9 	.word	0x0810a3b9
 810a378:	0810a3b9 	.word	0x0810a3b9
 810a37c:	0810a3b9 	.word	0x0810a3b9
 810a380:	0810a3b9 	.word	0x0810a3b9
 810a384:	0810a3b1 	.word	0x0810a3b1
 810a388:	2301      	movs	r3, #1
 810a38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a38e:	e220      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a390:	2304      	movs	r3, #4
 810a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a396:	e21c      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a398:	2308      	movs	r3, #8
 810a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a39e:	e218      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a3a0:	2310      	movs	r3, #16
 810a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3a6:	e214      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a3a8:	2320      	movs	r3, #32
 810a3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3ae:	e210      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a3b0:	2340      	movs	r3, #64	@ 0x40
 810a3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3b6:	e20c      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a3b8:	2380      	movs	r3, #128	@ 0x80
 810a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3be:	e208      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a3c0:	697b      	ldr	r3, [r7, #20]
 810a3c2:	681b      	ldr	r3, [r3, #0]
 810a3c4:	4a66      	ldr	r2, [pc, #408]	@ (810a560 <UART_SetConfig+0x334>)
 810a3c6:	4293      	cmp	r3, r2
 810a3c8:	d130      	bne.n	810a42c <UART_SetConfig+0x200>
 810a3ca:	4b64      	ldr	r3, [pc, #400]	@ (810a55c <UART_SetConfig+0x330>)
 810a3cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a3ce:	f003 0307 	and.w	r3, r3, #7
 810a3d2:	2b05      	cmp	r3, #5
 810a3d4:	d826      	bhi.n	810a424 <UART_SetConfig+0x1f8>
 810a3d6:	a201      	add	r2, pc, #4	@ (adr r2, 810a3dc <UART_SetConfig+0x1b0>)
 810a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a3dc:	0810a3f5 	.word	0x0810a3f5
 810a3e0:	0810a3fd 	.word	0x0810a3fd
 810a3e4:	0810a405 	.word	0x0810a405
 810a3e8:	0810a40d 	.word	0x0810a40d
 810a3ec:	0810a415 	.word	0x0810a415
 810a3f0:	0810a41d 	.word	0x0810a41d
 810a3f4:	2300      	movs	r3, #0
 810a3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3fa:	e1ea      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a3fc:	2304      	movs	r3, #4
 810a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a402:	e1e6      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a404:	2308      	movs	r3, #8
 810a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a40a:	e1e2      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a40c:	2310      	movs	r3, #16
 810a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a412:	e1de      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a414:	2320      	movs	r3, #32
 810a416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a41a:	e1da      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a41c:	2340      	movs	r3, #64	@ 0x40
 810a41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a422:	e1d6      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a424:	2380      	movs	r3, #128	@ 0x80
 810a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a42a:	e1d2      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a42c:	697b      	ldr	r3, [r7, #20]
 810a42e:	681b      	ldr	r3, [r3, #0]
 810a430:	4a4c      	ldr	r2, [pc, #304]	@ (810a564 <UART_SetConfig+0x338>)
 810a432:	4293      	cmp	r3, r2
 810a434:	d130      	bne.n	810a498 <UART_SetConfig+0x26c>
 810a436:	4b49      	ldr	r3, [pc, #292]	@ (810a55c <UART_SetConfig+0x330>)
 810a438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a43a:	f003 0307 	and.w	r3, r3, #7
 810a43e:	2b05      	cmp	r3, #5
 810a440:	d826      	bhi.n	810a490 <UART_SetConfig+0x264>
 810a442:	a201      	add	r2, pc, #4	@ (adr r2, 810a448 <UART_SetConfig+0x21c>)
 810a444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a448:	0810a461 	.word	0x0810a461
 810a44c:	0810a469 	.word	0x0810a469
 810a450:	0810a471 	.word	0x0810a471
 810a454:	0810a479 	.word	0x0810a479
 810a458:	0810a481 	.word	0x0810a481
 810a45c:	0810a489 	.word	0x0810a489
 810a460:	2300      	movs	r3, #0
 810a462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a466:	e1b4      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a468:	2304      	movs	r3, #4
 810a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a46e:	e1b0      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a470:	2308      	movs	r3, #8
 810a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a476:	e1ac      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a478:	2310      	movs	r3, #16
 810a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a47e:	e1a8      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a480:	2320      	movs	r3, #32
 810a482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a486:	e1a4      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a488:	2340      	movs	r3, #64	@ 0x40
 810a48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a48e:	e1a0      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a490:	2380      	movs	r3, #128	@ 0x80
 810a492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a496:	e19c      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a498:	697b      	ldr	r3, [r7, #20]
 810a49a:	681b      	ldr	r3, [r3, #0]
 810a49c:	4a32      	ldr	r2, [pc, #200]	@ (810a568 <UART_SetConfig+0x33c>)
 810a49e:	4293      	cmp	r3, r2
 810a4a0:	d130      	bne.n	810a504 <UART_SetConfig+0x2d8>
 810a4a2:	4b2e      	ldr	r3, [pc, #184]	@ (810a55c <UART_SetConfig+0x330>)
 810a4a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a4a6:	f003 0307 	and.w	r3, r3, #7
 810a4aa:	2b05      	cmp	r3, #5
 810a4ac:	d826      	bhi.n	810a4fc <UART_SetConfig+0x2d0>
 810a4ae:	a201      	add	r2, pc, #4	@ (adr r2, 810a4b4 <UART_SetConfig+0x288>)
 810a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a4b4:	0810a4cd 	.word	0x0810a4cd
 810a4b8:	0810a4d5 	.word	0x0810a4d5
 810a4bc:	0810a4dd 	.word	0x0810a4dd
 810a4c0:	0810a4e5 	.word	0x0810a4e5
 810a4c4:	0810a4ed 	.word	0x0810a4ed
 810a4c8:	0810a4f5 	.word	0x0810a4f5
 810a4cc:	2300      	movs	r3, #0
 810a4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4d2:	e17e      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a4d4:	2304      	movs	r3, #4
 810a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4da:	e17a      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a4dc:	2308      	movs	r3, #8
 810a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4e2:	e176      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a4e4:	2310      	movs	r3, #16
 810a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4ea:	e172      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a4ec:	2320      	movs	r3, #32
 810a4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4f2:	e16e      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a4f4:	2340      	movs	r3, #64	@ 0x40
 810a4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4fa:	e16a      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a4fc:	2380      	movs	r3, #128	@ 0x80
 810a4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a502:	e166      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a504:	697b      	ldr	r3, [r7, #20]
 810a506:	681b      	ldr	r3, [r3, #0]
 810a508:	4a18      	ldr	r2, [pc, #96]	@ (810a56c <UART_SetConfig+0x340>)
 810a50a:	4293      	cmp	r3, r2
 810a50c:	d140      	bne.n	810a590 <UART_SetConfig+0x364>
 810a50e:	4b13      	ldr	r3, [pc, #76]	@ (810a55c <UART_SetConfig+0x330>)
 810a510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a512:	f003 0307 	and.w	r3, r3, #7
 810a516:	2b05      	cmp	r3, #5
 810a518:	d836      	bhi.n	810a588 <UART_SetConfig+0x35c>
 810a51a:	a201      	add	r2, pc, #4	@ (adr r2, 810a520 <UART_SetConfig+0x2f4>)
 810a51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a520:	0810a539 	.word	0x0810a539
 810a524:	0810a541 	.word	0x0810a541
 810a528:	0810a549 	.word	0x0810a549
 810a52c:	0810a571 	.word	0x0810a571
 810a530:	0810a579 	.word	0x0810a579
 810a534:	0810a581 	.word	0x0810a581
 810a538:	2300      	movs	r3, #0
 810a53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a53e:	e148      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a540:	2304      	movs	r3, #4
 810a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a546:	e144      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a548:	2308      	movs	r3, #8
 810a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a54e:	e140      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a550:	cfff69f3 	.word	0xcfff69f3
 810a554:	58000c00 	.word	0x58000c00
 810a558:	40011000 	.word	0x40011000
 810a55c:	58024400 	.word	0x58024400
 810a560:	40004400 	.word	0x40004400
 810a564:	40004800 	.word	0x40004800
 810a568:	40004c00 	.word	0x40004c00
 810a56c:	40005000 	.word	0x40005000
 810a570:	2310      	movs	r3, #16
 810a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a576:	e12c      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a578:	2320      	movs	r3, #32
 810a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a57e:	e128      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a580:	2340      	movs	r3, #64	@ 0x40
 810a582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a586:	e124      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a588:	2380      	movs	r3, #128	@ 0x80
 810a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a58e:	e120      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a590:	697b      	ldr	r3, [r7, #20]
 810a592:	681b      	ldr	r3, [r3, #0]
 810a594:	4acb      	ldr	r2, [pc, #812]	@ (810a8c4 <UART_SetConfig+0x698>)
 810a596:	4293      	cmp	r3, r2
 810a598:	d176      	bne.n	810a688 <UART_SetConfig+0x45c>
 810a59a:	4bcb      	ldr	r3, [pc, #812]	@ (810a8c8 <UART_SetConfig+0x69c>)
 810a59c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a59e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810a5a2:	2b28      	cmp	r3, #40	@ 0x28
 810a5a4:	d86c      	bhi.n	810a680 <UART_SetConfig+0x454>
 810a5a6:	a201      	add	r2, pc, #4	@ (adr r2, 810a5ac <UART_SetConfig+0x380>)
 810a5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a5ac:	0810a651 	.word	0x0810a651
 810a5b0:	0810a681 	.word	0x0810a681
 810a5b4:	0810a681 	.word	0x0810a681
 810a5b8:	0810a681 	.word	0x0810a681
 810a5bc:	0810a681 	.word	0x0810a681
 810a5c0:	0810a681 	.word	0x0810a681
 810a5c4:	0810a681 	.word	0x0810a681
 810a5c8:	0810a681 	.word	0x0810a681
 810a5cc:	0810a659 	.word	0x0810a659
 810a5d0:	0810a681 	.word	0x0810a681
 810a5d4:	0810a681 	.word	0x0810a681
 810a5d8:	0810a681 	.word	0x0810a681
 810a5dc:	0810a681 	.word	0x0810a681
 810a5e0:	0810a681 	.word	0x0810a681
 810a5e4:	0810a681 	.word	0x0810a681
 810a5e8:	0810a681 	.word	0x0810a681
 810a5ec:	0810a661 	.word	0x0810a661
 810a5f0:	0810a681 	.word	0x0810a681
 810a5f4:	0810a681 	.word	0x0810a681
 810a5f8:	0810a681 	.word	0x0810a681
 810a5fc:	0810a681 	.word	0x0810a681
 810a600:	0810a681 	.word	0x0810a681
 810a604:	0810a681 	.word	0x0810a681
 810a608:	0810a681 	.word	0x0810a681
 810a60c:	0810a669 	.word	0x0810a669
 810a610:	0810a681 	.word	0x0810a681
 810a614:	0810a681 	.word	0x0810a681
 810a618:	0810a681 	.word	0x0810a681
 810a61c:	0810a681 	.word	0x0810a681
 810a620:	0810a681 	.word	0x0810a681
 810a624:	0810a681 	.word	0x0810a681
 810a628:	0810a681 	.word	0x0810a681
 810a62c:	0810a671 	.word	0x0810a671
 810a630:	0810a681 	.word	0x0810a681
 810a634:	0810a681 	.word	0x0810a681
 810a638:	0810a681 	.word	0x0810a681
 810a63c:	0810a681 	.word	0x0810a681
 810a640:	0810a681 	.word	0x0810a681
 810a644:	0810a681 	.word	0x0810a681
 810a648:	0810a681 	.word	0x0810a681
 810a64c:	0810a679 	.word	0x0810a679
 810a650:	2301      	movs	r3, #1
 810a652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a656:	e0bc      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a658:	2304      	movs	r3, #4
 810a65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a65e:	e0b8      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a660:	2308      	movs	r3, #8
 810a662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a666:	e0b4      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a668:	2310      	movs	r3, #16
 810a66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a66e:	e0b0      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a670:	2320      	movs	r3, #32
 810a672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a676:	e0ac      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a678:	2340      	movs	r3, #64	@ 0x40
 810a67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a67e:	e0a8      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a680:	2380      	movs	r3, #128	@ 0x80
 810a682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a686:	e0a4      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a688:	697b      	ldr	r3, [r7, #20]
 810a68a:	681b      	ldr	r3, [r3, #0]
 810a68c:	4a8f      	ldr	r2, [pc, #572]	@ (810a8cc <UART_SetConfig+0x6a0>)
 810a68e:	4293      	cmp	r3, r2
 810a690:	d130      	bne.n	810a6f4 <UART_SetConfig+0x4c8>
 810a692:	4b8d      	ldr	r3, [pc, #564]	@ (810a8c8 <UART_SetConfig+0x69c>)
 810a694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a696:	f003 0307 	and.w	r3, r3, #7
 810a69a:	2b05      	cmp	r3, #5
 810a69c:	d826      	bhi.n	810a6ec <UART_SetConfig+0x4c0>
 810a69e:	a201      	add	r2, pc, #4	@ (adr r2, 810a6a4 <UART_SetConfig+0x478>)
 810a6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a6a4:	0810a6bd 	.word	0x0810a6bd
 810a6a8:	0810a6c5 	.word	0x0810a6c5
 810a6ac:	0810a6cd 	.word	0x0810a6cd
 810a6b0:	0810a6d5 	.word	0x0810a6d5
 810a6b4:	0810a6dd 	.word	0x0810a6dd
 810a6b8:	0810a6e5 	.word	0x0810a6e5
 810a6bc:	2300      	movs	r3, #0
 810a6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6c2:	e086      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a6c4:	2304      	movs	r3, #4
 810a6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6ca:	e082      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a6cc:	2308      	movs	r3, #8
 810a6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6d2:	e07e      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a6d4:	2310      	movs	r3, #16
 810a6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6da:	e07a      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a6dc:	2320      	movs	r3, #32
 810a6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6e2:	e076      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a6e4:	2340      	movs	r3, #64	@ 0x40
 810a6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6ea:	e072      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a6ec:	2380      	movs	r3, #128	@ 0x80
 810a6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6f2:	e06e      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a6f4:	697b      	ldr	r3, [r7, #20]
 810a6f6:	681b      	ldr	r3, [r3, #0]
 810a6f8:	4a75      	ldr	r2, [pc, #468]	@ (810a8d0 <UART_SetConfig+0x6a4>)
 810a6fa:	4293      	cmp	r3, r2
 810a6fc:	d130      	bne.n	810a760 <UART_SetConfig+0x534>
 810a6fe:	4b72      	ldr	r3, [pc, #456]	@ (810a8c8 <UART_SetConfig+0x69c>)
 810a700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a702:	f003 0307 	and.w	r3, r3, #7
 810a706:	2b05      	cmp	r3, #5
 810a708:	d826      	bhi.n	810a758 <UART_SetConfig+0x52c>
 810a70a:	a201      	add	r2, pc, #4	@ (adr r2, 810a710 <UART_SetConfig+0x4e4>)
 810a70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a710:	0810a729 	.word	0x0810a729
 810a714:	0810a731 	.word	0x0810a731
 810a718:	0810a739 	.word	0x0810a739
 810a71c:	0810a741 	.word	0x0810a741
 810a720:	0810a749 	.word	0x0810a749
 810a724:	0810a751 	.word	0x0810a751
 810a728:	2300      	movs	r3, #0
 810a72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a72e:	e050      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a730:	2304      	movs	r3, #4
 810a732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a736:	e04c      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a738:	2308      	movs	r3, #8
 810a73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a73e:	e048      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a740:	2310      	movs	r3, #16
 810a742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a746:	e044      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a748:	2320      	movs	r3, #32
 810a74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a74e:	e040      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a750:	2340      	movs	r3, #64	@ 0x40
 810a752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a756:	e03c      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a758:	2380      	movs	r3, #128	@ 0x80
 810a75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a75e:	e038      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a760:	697b      	ldr	r3, [r7, #20]
 810a762:	681b      	ldr	r3, [r3, #0]
 810a764:	4a5b      	ldr	r2, [pc, #364]	@ (810a8d4 <UART_SetConfig+0x6a8>)
 810a766:	4293      	cmp	r3, r2
 810a768:	d130      	bne.n	810a7cc <UART_SetConfig+0x5a0>
 810a76a:	4b57      	ldr	r3, [pc, #348]	@ (810a8c8 <UART_SetConfig+0x69c>)
 810a76c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a76e:	f003 0307 	and.w	r3, r3, #7
 810a772:	2b05      	cmp	r3, #5
 810a774:	d826      	bhi.n	810a7c4 <UART_SetConfig+0x598>
 810a776:	a201      	add	r2, pc, #4	@ (adr r2, 810a77c <UART_SetConfig+0x550>)
 810a778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a77c:	0810a795 	.word	0x0810a795
 810a780:	0810a79d 	.word	0x0810a79d
 810a784:	0810a7a5 	.word	0x0810a7a5
 810a788:	0810a7ad 	.word	0x0810a7ad
 810a78c:	0810a7b5 	.word	0x0810a7b5
 810a790:	0810a7bd 	.word	0x0810a7bd
 810a794:	2302      	movs	r3, #2
 810a796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a79a:	e01a      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a79c:	2304      	movs	r3, #4
 810a79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7a2:	e016      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a7a4:	2308      	movs	r3, #8
 810a7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7aa:	e012      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a7ac:	2310      	movs	r3, #16
 810a7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7b2:	e00e      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a7b4:	2320      	movs	r3, #32
 810a7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7ba:	e00a      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a7bc:	2340      	movs	r3, #64	@ 0x40
 810a7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7c2:	e006      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a7c4:	2380      	movs	r3, #128	@ 0x80
 810a7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7ca:	e002      	b.n	810a7d2 <UART_SetConfig+0x5a6>
 810a7cc:	2380      	movs	r3, #128	@ 0x80
 810a7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a7d2:	697b      	ldr	r3, [r7, #20]
 810a7d4:	681b      	ldr	r3, [r3, #0]
 810a7d6:	4a3f      	ldr	r2, [pc, #252]	@ (810a8d4 <UART_SetConfig+0x6a8>)
 810a7d8:	4293      	cmp	r3, r2
 810a7da:	f040 80f8 	bne.w	810a9ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810a7de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a7e2:	2b20      	cmp	r3, #32
 810a7e4:	dc46      	bgt.n	810a874 <UART_SetConfig+0x648>
 810a7e6:	2b02      	cmp	r3, #2
 810a7e8:	f2c0 8082 	blt.w	810a8f0 <UART_SetConfig+0x6c4>
 810a7ec:	3b02      	subs	r3, #2
 810a7ee:	2b1e      	cmp	r3, #30
 810a7f0:	d87e      	bhi.n	810a8f0 <UART_SetConfig+0x6c4>
 810a7f2:	a201      	add	r2, pc, #4	@ (adr r2, 810a7f8 <UART_SetConfig+0x5cc>)
 810a7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a7f8:	0810a87b 	.word	0x0810a87b
 810a7fc:	0810a8f1 	.word	0x0810a8f1
 810a800:	0810a883 	.word	0x0810a883
 810a804:	0810a8f1 	.word	0x0810a8f1
 810a808:	0810a8f1 	.word	0x0810a8f1
 810a80c:	0810a8f1 	.word	0x0810a8f1
 810a810:	0810a893 	.word	0x0810a893
 810a814:	0810a8f1 	.word	0x0810a8f1
 810a818:	0810a8f1 	.word	0x0810a8f1
 810a81c:	0810a8f1 	.word	0x0810a8f1
 810a820:	0810a8f1 	.word	0x0810a8f1
 810a824:	0810a8f1 	.word	0x0810a8f1
 810a828:	0810a8f1 	.word	0x0810a8f1
 810a82c:	0810a8f1 	.word	0x0810a8f1
 810a830:	0810a8a3 	.word	0x0810a8a3
 810a834:	0810a8f1 	.word	0x0810a8f1
 810a838:	0810a8f1 	.word	0x0810a8f1
 810a83c:	0810a8f1 	.word	0x0810a8f1
 810a840:	0810a8f1 	.word	0x0810a8f1
 810a844:	0810a8f1 	.word	0x0810a8f1
 810a848:	0810a8f1 	.word	0x0810a8f1
 810a84c:	0810a8f1 	.word	0x0810a8f1
 810a850:	0810a8f1 	.word	0x0810a8f1
 810a854:	0810a8f1 	.word	0x0810a8f1
 810a858:	0810a8f1 	.word	0x0810a8f1
 810a85c:	0810a8f1 	.word	0x0810a8f1
 810a860:	0810a8f1 	.word	0x0810a8f1
 810a864:	0810a8f1 	.word	0x0810a8f1
 810a868:	0810a8f1 	.word	0x0810a8f1
 810a86c:	0810a8f1 	.word	0x0810a8f1
 810a870:	0810a8e3 	.word	0x0810a8e3
 810a874:	2b40      	cmp	r3, #64	@ 0x40
 810a876:	d037      	beq.n	810a8e8 <UART_SetConfig+0x6bc>
 810a878:	e03a      	b.n	810a8f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810a87a:	f7fd f81f 	bl	81078bc <HAL_RCCEx_GetD3PCLK1Freq>
 810a87e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a880:	e03c      	b.n	810a8fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a886:	4618      	mov	r0, r3
 810a888:	f7fd f82e 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a890:	e034      	b.n	810a8fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a892:	f107 0318 	add.w	r3, r7, #24
 810a896:	4618      	mov	r0, r3
 810a898:	f7fd f97a 	bl	8107b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a89c:	69fb      	ldr	r3, [r7, #28]
 810a89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a8a0:	e02c      	b.n	810a8fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a8a2:	4b09      	ldr	r3, [pc, #36]	@ (810a8c8 <UART_SetConfig+0x69c>)
 810a8a4:	681b      	ldr	r3, [r3, #0]
 810a8a6:	f003 0320 	and.w	r3, r3, #32
 810a8aa:	2b00      	cmp	r3, #0
 810a8ac:	d016      	beq.n	810a8dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a8ae:	4b06      	ldr	r3, [pc, #24]	@ (810a8c8 <UART_SetConfig+0x69c>)
 810a8b0:	681b      	ldr	r3, [r3, #0]
 810a8b2:	08db      	lsrs	r3, r3, #3
 810a8b4:	f003 0303 	and.w	r3, r3, #3
 810a8b8:	4a07      	ldr	r2, [pc, #28]	@ (810a8d8 <UART_SetConfig+0x6ac>)
 810a8ba:	fa22 f303 	lsr.w	r3, r2, r3
 810a8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a8c0:	e01c      	b.n	810a8fc <UART_SetConfig+0x6d0>
 810a8c2:	bf00      	nop
 810a8c4:	40011400 	.word	0x40011400
 810a8c8:	58024400 	.word	0x58024400
 810a8cc:	40007800 	.word	0x40007800
 810a8d0:	40007c00 	.word	0x40007c00
 810a8d4:	58000c00 	.word	0x58000c00
 810a8d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810a8dc:	4b9d      	ldr	r3, [pc, #628]	@ (810ab54 <UART_SetConfig+0x928>)
 810a8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a8e0:	e00c      	b.n	810a8fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a8e2:	4b9d      	ldr	r3, [pc, #628]	@ (810ab58 <UART_SetConfig+0x92c>)
 810a8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a8e6:	e009      	b.n	810a8fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a8e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a8ee:	e005      	b.n	810a8fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810a8f0:	2300      	movs	r3, #0
 810a8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a8f4:	2301      	movs	r3, #1
 810a8f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a8fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810a8fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a8fe:	2b00      	cmp	r3, #0
 810a900:	f000 81de 	beq.w	810acc0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810a904:	697b      	ldr	r3, [r7, #20]
 810a906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a908:	4a94      	ldr	r2, [pc, #592]	@ (810ab5c <UART_SetConfig+0x930>)
 810a90a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a90e:	461a      	mov	r2, r3
 810a910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a912:	fbb3 f3f2 	udiv	r3, r3, r2
 810a916:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a918:	697b      	ldr	r3, [r7, #20]
 810a91a:	685a      	ldr	r2, [r3, #4]
 810a91c:	4613      	mov	r3, r2
 810a91e:	005b      	lsls	r3, r3, #1
 810a920:	4413      	add	r3, r2
 810a922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a924:	429a      	cmp	r2, r3
 810a926:	d305      	bcc.n	810a934 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810a928:	697b      	ldr	r3, [r7, #20]
 810a92a:	685b      	ldr	r3, [r3, #4]
 810a92c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a92e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a930:	429a      	cmp	r2, r3
 810a932:	d903      	bls.n	810a93c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810a934:	2301      	movs	r3, #1
 810a936:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a93a:	e1c1      	b.n	810acc0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a93c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a93e:	2200      	movs	r2, #0
 810a940:	60bb      	str	r3, [r7, #8]
 810a942:	60fa      	str	r2, [r7, #12]
 810a944:	697b      	ldr	r3, [r7, #20]
 810a946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a948:	4a84      	ldr	r2, [pc, #528]	@ (810ab5c <UART_SetConfig+0x930>)
 810a94a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a94e:	b29b      	uxth	r3, r3
 810a950:	2200      	movs	r2, #0
 810a952:	603b      	str	r3, [r7, #0]
 810a954:	607a      	str	r2, [r7, #4]
 810a956:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a95a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810a95e:	f7f5 fcbb 	bl	81002d8 <__aeabi_uldivmod>
 810a962:	4602      	mov	r2, r0
 810a964:	460b      	mov	r3, r1
 810a966:	4610      	mov	r0, r2
 810a968:	4619      	mov	r1, r3
 810a96a:	f04f 0200 	mov.w	r2, #0
 810a96e:	f04f 0300 	mov.w	r3, #0
 810a972:	020b      	lsls	r3, r1, #8
 810a974:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810a978:	0202      	lsls	r2, r0, #8
 810a97a:	6979      	ldr	r1, [r7, #20]
 810a97c:	6849      	ldr	r1, [r1, #4]
 810a97e:	0849      	lsrs	r1, r1, #1
 810a980:	2000      	movs	r0, #0
 810a982:	460c      	mov	r4, r1
 810a984:	4605      	mov	r5, r0
 810a986:	eb12 0804 	adds.w	r8, r2, r4
 810a98a:	eb43 0905 	adc.w	r9, r3, r5
 810a98e:	697b      	ldr	r3, [r7, #20]
 810a990:	685b      	ldr	r3, [r3, #4]
 810a992:	2200      	movs	r2, #0
 810a994:	469a      	mov	sl, r3
 810a996:	4693      	mov	fp, r2
 810a998:	4652      	mov	r2, sl
 810a99a:	465b      	mov	r3, fp
 810a99c:	4640      	mov	r0, r8
 810a99e:	4649      	mov	r1, r9
 810a9a0:	f7f5 fc9a 	bl	81002d8 <__aeabi_uldivmod>
 810a9a4:	4602      	mov	r2, r0
 810a9a6:	460b      	mov	r3, r1
 810a9a8:	4613      	mov	r3, r2
 810a9aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810a9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a9ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810a9b2:	d308      	bcc.n	810a9c6 <UART_SetConfig+0x79a>
 810a9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a9b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a9ba:	d204      	bcs.n	810a9c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810a9bc:	697b      	ldr	r3, [r7, #20]
 810a9be:	681b      	ldr	r3, [r3, #0]
 810a9c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810a9c2:	60da      	str	r2, [r3, #12]
 810a9c4:	e17c      	b.n	810acc0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810a9c6:	2301      	movs	r3, #1
 810a9c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a9cc:	e178      	b.n	810acc0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810a9ce:	697b      	ldr	r3, [r7, #20]
 810a9d0:	69db      	ldr	r3, [r3, #28]
 810a9d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a9d6:	f040 80c5 	bne.w	810ab64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810a9da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a9de:	2b20      	cmp	r3, #32
 810a9e0:	dc48      	bgt.n	810aa74 <UART_SetConfig+0x848>
 810a9e2:	2b00      	cmp	r3, #0
 810a9e4:	db7b      	blt.n	810aade <UART_SetConfig+0x8b2>
 810a9e6:	2b20      	cmp	r3, #32
 810a9e8:	d879      	bhi.n	810aade <UART_SetConfig+0x8b2>
 810a9ea:	a201      	add	r2, pc, #4	@ (adr r2, 810a9f0 <UART_SetConfig+0x7c4>)
 810a9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a9f0:	0810aa7b 	.word	0x0810aa7b
 810a9f4:	0810aa83 	.word	0x0810aa83
 810a9f8:	0810aadf 	.word	0x0810aadf
 810a9fc:	0810aadf 	.word	0x0810aadf
 810aa00:	0810aa8b 	.word	0x0810aa8b
 810aa04:	0810aadf 	.word	0x0810aadf
 810aa08:	0810aadf 	.word	0x0810aadf
 810aa0c:	0810aadf 	.word	0x0810aadf
 810aa10:	0810aa9b 	.word	0x0810aa9b
 810aa14:	0810aadf 	.word	0x0810aadf
 810aa18:	0810aadf 	.word	0x0810aadf
 810aa1c:	0810aadf 	.word	0x0810aadf
 810aa20:	0810aadf 	.word	0x0810aadf
 810aa24:	0810aadf 	.word	0x0810aadf
 810aa28:	0810aadf 	.word	0x0810aadf
 810aa2c:	0810aadf 	.word	0x0810aadf
 810aa30:	0810aaab 	.word	0x0810aaab
 810aa34:	0810aadf 	.word	0x0810aadf
 810aa38:	0810aadf 	.word	0x0810aadf
 810aa3c:	0810aadf 	.word	0x0810aadf
 810aa40:	0810aadf 	.word	0x0810aadf
 810aa44:	0810aadf 	.word	0x0810aadf
 810aa48:	0810aadf 	.word	0x0810aadf
 810aa4c:	0810aadf 	.word	0x0810aadf
 810aa50:	0810aadf 	.word	0x0810aadf
 810aa54:	0810aadf 	.word	0x0810aadf
 810aa58:	0810aadf 	.word	0x0810aadf
 810aa5c:	0810aadf 	.word	0x0810aadf
 810aa60:	0810aadf 	.word	0x0810aadf
 810aa64:	0810aadf 	.word	0x0810aadf
 810aa68:	0810aadf 	.word	0x0810aadf
 810aa6c:	0810aadf 	.word	0x0810aadf
 810aa70:	0810aad1 	.word	0x0810aad1
 810aa74:	2b40      	cmp	r3, #64	@ 0x40
 810aa76:	d02e      	beq.n	810aad6 <UART_SetConfig+0x8aa>
 810aa78:	e031      	b.n	810aade <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810aa7a:	f7fa ff69 	bl	8105950 <HAL_RCC_GetPCLK1Freq>
 810aa7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810aa80:	e033      	b.n	810aaea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810aa82:	f7fa ff7b 	bl	810597c <HAL_RCC_GetPCLK2Freq>
 810aa86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810aa88:	e02f      	b.n	810aaea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810aa8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810aa8e:	4618      	mov	r0, r3
 810aa90:	f7fc ff2a 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810aa94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810aa96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aa98:	e027      	b.n	810aaea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810aa9a:	f107 0318 	add.w	r3, r7, #24
 810aa9e:	4618      	mov	r0, r3
 810aaa0:	f7fd f876 	bl	8107b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810aaa4:	69fb      	ldr	r3, [r7, #28]
 810aaa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aaa8:	e01f      	b.n	810aaea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810aaaa:	4b2d      	ldr	r3, [pc, #180]	@ (810ab60 <UART_SetConfig+0x934>)
 810aaac:	681b      	ldr	r3, [r3, #0]
 810aaae:	f003 0320 	and.w	r3, r3, #32
 810aab2:	2b00      	cmp	r3, #0
 810aab4:	d009      	beq.n	810aaca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810aab6:	4b2a      	ldr	r3, [pc, #168]	@ (810ab60 <UART_SetConfig+0x934>)
 810aab8:	681b      	ldr	r3, [r3, #0]
 810aaba:	08db      	lsrs	r3, r3, #3
 810aabc:	f003 0303 	and.w	r3, r3, #3
 810aac0:	4a24      	ldr	r2, [pc, #144]	@ (810ab54 <UART_SetConfig+0x928>)
 810aac2:	fa22 f303 	lsr.w	r3, r2, r3
 810aac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810aac8:	e00f      	b.n	810aaea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810aaca:	4b22      	ldr	r3, [pc, #136]	@ (810ab54 <UART_SetConfig+0x928>)
 810aacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aace:	e00c      	b.n	810aaea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810aad0:	4b21      	ldr	r3, [pc, #132]	@ (810ab58 <UART_SetConfig+0x92c>)
 810aad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aad4:	e009      	b.n	810aaea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810aad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810aada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aadc:	e005      	b.n	810aaea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810aade:	2300      	movs	r3, #0
 810aae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810aae2:	2301      	movs	r3, #1
 810aae4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810aae8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810aaea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810aaec:	2b00      	cmp	r3, #0
 810aaee:	f000 80e7 	beq.w	810acc0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810aaf2:	697b      	ldr	r3, [r7, #20]
 810aaf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aaf6:	4a19      	ldr	r2, [pc, #100]	@ (810ab5c <UART_SetConfig+0x930>)
 810aaf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810aafc:	461a      	mov	r2, r3
 810aafe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ab00:	fbb3 f3f2 	udiv	r3, r3, r2
 810ab04:	005a      	lsls	r2, r3, #1
 810ab06:	697b      	ldr	r3, [r7, #20]
 810ab08:	685b      	ldr	r3, [r3, #4]
 810ab0a:	085b      	lsrs	r3, r3, #1
 810ab0c:	441a      	add	r2, r3
 810ab0e:	697b      	ldr	r3, [r7, #20]
 810ab10:	685b      	ldr	r3, [r3, #4]
 810ab12:	fbb2 f3f3 	udiv	r3, r2, r3
 810ab16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810ab18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ab1a:	2b0f      	cmp	r3, #15
 810ab1c:	d916      	bls.n	810ab4c <UART_SetConfig+0x920>
 810ab1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ab20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810ab24:	d212      	bcs.n	810ab4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810ab26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ab28:	b29b      	uxth	r3, r3
 810ab2a:	f023 030f 	bic.w	r3, r3, #15
 810ab2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810ab30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ab32:	085b      	lsrs	r3, r3, #1
 810ab34:	b29b      	uxth	r3, r3
 810ab36:	f003 0307 	and.w	r3, r3, #7
 810ab3a:	b29a      	uxth	r2, r3
 810ab3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810ab3e:	4313      	orrs	r3, r2
 810ab40:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810ab42:	697b      	ldr	r3, [r7, #20]
 810ab44:	681b      	ldr	r3, [r3, #0]
 810ab46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810ab48:	60da      	str	r2, [r3, #12]
 810ab4a:	e0b9      	b.n	810acc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810ab4c:	2301      	movs	r3, #1
 810ab4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810ab52:	e0b5      	b.n	810acc0 <UART_SetConfig+0xa94>
 810ab54:	03d09000 	.word	0x03d09000
 810ab58:	003d0900 	.word	0x003d0900
 810ab5c:	0810be44 	.word	0x0810be44
 810ab60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810ab64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810ab68:	2b20      	cmp	r3, #32
 810ab6a:	dc49      	bgt.n	810ac00 <UART_SetConfig+0x9d4>
 810ab6c:	2b00      	cmp	r3, #0
 810ab6e:	db7c      	blt.n	810ac6a <UART_SetConfig+0xa3e>
 810ab70:	2b20      	cmp	r3, #32
 810ab72:	d87a      	bhi.n	810ac6a <UART_SetConfig+0xa3e>
 810ab74:	a201      	add	r2, pc, #4	@ (adr r2, 810ab7c <UART_SetConfig+0x950>)
 810ab76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ab7a:	bf00      	nop
 810ab7c:	0810ac07 	.word	0x0810ac07
 810ab80:	0810ac0f 	.word	0x0810ac0f
 810ab84:	0810ac6b 	.word	0x0810ac6b
 810ab88:	0810ac6b 	.word	0x0810ac6b
 810ab8c:	0810ac17 	.word	0x0810ac17
 810ab90:	0810ac6b 	.word	0x0810ac6b
 810ab94:	0810ac6b 	.word	0x0810ac6b
 810ab98:	0810ac6b 	.word	0x0810ac6b
 810ab9c:	0810ac27 	.word	0x0810ac27
 810aba0:	0810ac6b 	.word	0x0810ac6b
 810aba4:	0810ac6b 	.word	0x0810ac6b
 810aba8:	0810ac6b 	.word	0x0810ac6b
 810abac:	0810ac6b 	.word	0x0810ac6b
 810abb0:	0810ac6b 	.word	0x0810ac6b
 810abb4:	0810ac6b 	.word	0x0810ac6b
 810abb8:	0810ac6b 	.word	0x0810ac6b
 810abbc:	0810ac37 	.word	0x0810ac37
 810abc0:	0810ac6b 	.word	0x0810ac6b
 810abc4:	0810ac6b 	.word	0x0810ac6b
 810abc8:	0810ac6b 	.word	0x0810ac6b
 810abcc:	0810ac6b 	.word	0x0810ac6b
 810abd0:	0810ac6b 	.word	0x0810ac6b
 810abd4:	0810ac6b 	.word	0x0810ac6b
 810abd8:	0810ac6b 	.word	0x0810ac6b
 810abdc:	0810ac6b 	.word	0x0810ac6b
 810abe0:	0810ac6b 	.word	0x0810ac6b
 810abe4:	0810ac6b 	.word	0x0810ac6b
 810abe8:	0810ac6b 	.word	0x0810ac6b
 810abec:	0810ac6b 	.word	0x0810ac6b
 810abf0:	0810ac6b 	.word	0x0810ac6b
 810abf4:	0810ac6b 	.word	0x0810ac6b
 810abf8:	0810ac6b 	.word	0x0810ac6b
 810abfc:	0810ac5d 	.word	0x0810ac5d
 810ac00:	2b40      	cmp	r3, #64	@ 0x40
 810ac02:	d02e      	beq.n	810ac62 <UART_SetConfig+0xa36>
 810ac04:	e031      	b.n	810ac6a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810ac06:	f7fa fea3 	bl	8105950 <HAL_RCC_GetPCLK1Freq>
 810ac0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810ac0c:	e033      	b.n	810ac76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810ac0e:	f7fa feb5 	bl	810597c <HAL_RCC_GetPCLK2Freq>
 810ac12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810ac14:	e02f      	b.n	810ac76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ac16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810ac1a:	4618      	mov	r0, r3
 810ac1c:	f7fc fe64 	bl	81078e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810ac20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ac22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac24:	e027      	b.n	810ac76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ac26:	f107 0318 	add.w	r3, r7, #24
 810ac2a:	4618      	mov	r0, r3
 810ac2c:	f7fc ffb0 	bl	8107b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810ac30:	69fb      	ldr	r3, [r7, #28]
 810ac32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac34:	e01f      	b.n	810ac76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810ac36:	4b2d      	ldr	r3, [pc, #180]	@ (810acec <UART_SetConfig+0xac0>)
 810ac38:	681b      	ldr	r3, [r3, #0]
 810ac3a:	f003 0320 	and.w	r3, r3, #32
 810ac3e:	2b00      	cmp	r3, #0
 810ac40:	d009      	beq.n	810ac56 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810ac42:	4b2a      	ldr	r3, [pc, #168]	@ (810acec <UART_SetConfig+0xac0>)
 810ac44:	681b      	ldr	r3, [r3, #0]
 810ac46:	08db      	lsrs	r3, r3, #3
 810ac48:	f003 0303 	and.w	r3, r3, #3
 810ac4c:	4a28      	ldr	r2, [pc, #160]	@ (810acf0 <UART_SetConfig+0xac4>)
 810ac4e:	fa22 f303 	lsr.w	r3, r2, r3
 810ac52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810ac54:	e00f      	b.n	810ac76 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810ac56:	4b26      	ldr	r3, [pc, #152]	@ (810acf0 <UART_SetConfig+0xac4>)
 810ac58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac5a:	e00c      	b.n	810ac76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810ac5c:	4b25      	ldr	r3, [pc, #148]	@ (810acf4 <UART_SetConfig+0xac8>)
 810ac5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac60:	e009      	b.n	810ac76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810ac62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810ac66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac68:	e005      	b.n	810ac76 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810ac6a:	2300      	movs	r3, #0
 810ac6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810ac6e:	2301      	movs	r3, #1
 810ac70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810ac74:	bf00      	nop
    }

    if (pclk != 0U)
 810ac76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ac78:	2b00      	cmp	r3, #0
 810ac7a:	d021      	beq.n	810acc0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810ac7c:	697b      	ldr	r3, [r7, #20]
 810ac7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ac80:	4a1d      	ldr	r2, [pc, #116]	@ (810acf8 <UART_SetConfig+0xacc>)
 810ac82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ac86:	461a      	mov	r2, r3
 810ac88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ac8a:	fbb3 f2f2 	udiv	r2, r3, r2
 810ac8e:	697b      	ldr	r3, [r7, #20]
 810ac90:	685b      	ldr	r3, [r3, #4]
 810ac92:	085b      	lsrs	r3, r3, #1
 810ac94:	441a      	add	r2, r3
 810ac96:	697b      	ldr	r3, [r7, #20]
 810ac98:	685b      	ldr	r3, [r3, #4]
 810ac9a:	fbb2 f3f3 	udiv	r3, r2, r3
 810ac9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810aca2:	2b0f      	cmp	r3, #15
 810aca4:	d909      	bls.n	810acba <UART_SetConfig+0xa8e>
 810aca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810aca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810acac:	d205      	bcs.n	810acba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810acae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810acb0:	b29a      	uxth	r2, r3
 810acb2:	697b      	ldr	r3, [r7, #20]
 810acb4:	681b      	ldr	r3, [r3, #0]
 810acb6:	60da      	str	r2, [r3, #12]
 810acb8:	e002      	b.n	810acc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810acba:	2301      	movs	r3, #1
 810acbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810acc0:	697b      	ldr	r3, [r7, #20]
 810acc2:	2201      	movs	r2, #1
 810acc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810acc8:	697b      	ldr	r3, [r7, #20]
 810acca:	2201      	movs	r2, #1
 810accc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810acd0:	697b      	ldr	r3, [r7, #20]
 810acd2:	2200      	movs	r2, #0
 810acd4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810acd6:	697b      	ldr	r3, [r7, #20]
 810acd8:	2200      	movs	r2, #0
 810acda:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810acdc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810ace0:	4618      	mov	r0, r3
 810ace2:	3748      	adds	r7, #72	@ 0x48
 810ace4:	46bd      	mov	sp, r7
 810ace6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810acea:	bf00      	nop
 810acec:	58024400 	.word	0x58024400
 810acf0:	03d09000 	.word	0x03d09000
 810acf4:	003d0900 	.word	0x003d0900
 810acf8:	0810be44 	.word	0x0810be44

0810acfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810acfc:	b480      	push	{r7}
 810acfe:	b083      	sub	sp, #12
 810ad00:	af00      	add	r7, sp, #0
 810ad02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810ad04:	687b      	ldr	r3, [r7, #4]
 810ad06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ad08:	f003 0308 	and.w	r3, r3, #8
 810ad0c:	2b00      	cmp	r3, #0
 810ad0e:	d00a      	beq.n	810ad26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810ad10:	687b      	ldr	r3, [r7, #4]
 810ad12:	681b      	ldr	r3, [r3, #0]
 810ad14:	685b      	ldr	r3, [r3, #4]
 810ad16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810ad1a:	687b      	ldr	r3, [r7, #4]
 810ad1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810ad1e:	687b      	ldr	r3, [r7, #4]
 810ad20:	681b      	ldr	r3, [r3, #0]
 810ad22:	430a      	orrs	r2, r1
 810ad24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810ad26:	687b      	ldr	r3, [r7, #4]
 810ad28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ad2a:	f003 0301 	and.w	r3, r3, #1
 810ad2e:	2b00      	cmp	r3, #0
 810ad30:	d00a      	beq.n	810ad48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810ad32:	687b      	ldr	r3, [r7, #4]
 810ad34:	681b      	ldr	r3, [r3, #0]
 810ad36:	685b      	ldr	r3, [r3, #4]
 810ad38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810ad3c:	687b      	ldr	r3, [r7, #4]
 810ad3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ad40:	687b      	ldr	r3, [r7, #4]
 810ad42:	681b      	ldr	r3, [r3, #0]
 810ad44:	430a      	orrs	r2, r1
 810ad46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810ad48:	687b      	ldr	r3, [r7, #4]
 810ad4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ad4c:	f003 0302 	and.w	r3, r3, #2
 810ad50:	2b00      	cmp	r3, #0
 810ad52:	d00a      	beq.n	810ad6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810ad54:	687b      	ldr	r3, [r7, #4]
 810ad56:	681b      	ldr	r3, [r3, #0]
 810ad58:	685b      	ldr	r3, [r3, #4]
 810ad5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810ad5e:	687b      	ldr	r3, [r7, #4]
 810ad60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810ad62:	687b      	ldr	r3, [r7, #4]
 810ad64:	681b      	ldr	r3, [r3, #0]
 810ad66:	430a      	orrs	r2, r1
 810ad68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810ad6a:	687b      	ldr	r3, [r7, #4]
 810ad6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ad6e:	f003 0304 	and.w	r3, r3, #4
 810ad72:	2b00      	cmp	r3, #0
 810ad74:	d00a      	beq.n	810ad8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810ad76:	687b      	ldr	r3, [r7, #4]
 810ad78:	681b      	ldr	r3, [r3, #0]
 810ad7a:	685b      	ldr	r3, [r3, #4]
 810ad7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810ad80:	687b      	ldr	r3, [r7, #4]
 810ad82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810ad84:	687b      	ldr	r3, [r7, #4]
 810ad86:	681b      	ldr	r3, [r3, #0]
 810ad88:	430a      	orrs	r2, r1
 810ad8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810ad8c:	687b      	ldr	r3, [r7, #4]
 810ad8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ad90:	f003 0310 	and.w	r3, r3, #16
 810ad94:	2b00      	cmp	r3, #0
 810ad96:	d00a      	beq.n	810adae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810ad98:	687b      	ldr	r3, [r7, #4]
 810ad9a:	681b      	ldr	r3, [r3, #0]
 810ad9c:	689b      	ldr	r3, [r3, #8]
 810ad9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810ada2:	687b      	ldr	r3, [r7, #4]
 810ada4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810ada6:	687b      	ldr	r3, [r7, #4]
 810ada8:	681b      	ldr	r3, [r3, #0]
 810adaa:	430a      	orrs	r2, r1
 810adac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810adae:	687b      	ldr	r3, [r7, #4]
 810adb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810adb2:	f003 0320 	and.w	r3, r3, #32
 810adb6:	2b00      	cmp	r3, #0
 810adb8:	d00a      	beq.n	810add0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810adba:	687b      	ldr	r3, [r7, #4]
 810adbc:	681b      	ldr	r3, [r3, #0]
 810adbe:	689b      	ldr	r3, [r3, #8]
 810adc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810adc4:	687b      	ldr	r3, [r7, #4]
 810adc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810adc8:	687b      	ldr	r3, [r7, #4]
 810adca:	681b      	ldr	r3, [r3, #0]
 810adcc:	430a      	orrs	r2, r1
 810adce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810add0:	687b      	ldr	r3, [r7, #4]
 810add2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810add4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810add8:	2b00      	cmp	r3, #0
 810adda:	d01a      	beq.n	810ae12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810addc:	687b      	ldr	r3, [r7, #4]
 810adde:	681b      	ldr	r3, [r3, #0]
 810ade0:	685b      	ldr	r3, [r3, #4]
 810ade2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810ade6:	687b      	ldr	r3, [r7, #4]
 810ade8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810adea:	687b      	ldr	r3, [r7, #4]
 810adec:	681b      	ldr	r3, [r3, #0]
 810adee:	430a      	orrs	r2, r1
 810adf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810adf2:	687b      	ldr	r3, [r7, #4]
 810adf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810adf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810adfa:	d10a      	bne.n	810ae12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810adfc:	687b      	ldr	r3, [r7, #4]
 810adfe:	681b      	ldr	r3, [r3, #0]
 810ae00:	685b      	ldr	r3, [r3, #4]
 810ae02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810ae06:	687b      	ldr	r3, [r7, #4]
 810ae08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810ae0a:	687b      	ldr	r3, [r7, #4]
 810ae0c:	681b      	ldr	r3, [r3, #0]
 810ae0e:	430a      	orrs	r2, r1
 810ae10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810ae12:	687b      	ldr	r3, [r7, #4]
 810ae14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ae16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810ae1a:	2b00      	cmp	r3, #0
 810ae1c:	d00a      	beq.n	810ae34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810ae1e:	687b      	ldr	r3, [r7, #4]
 810ae20:	681b      	ldr	r3, [r3, #0]
 810ae22:	685b      	ldr	r3, [r3, #4]
 810ae24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810ae28:	687b      	ldr	r3, [r7, #4]
 810ae2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810ae2c:	687b      	ldr	r3, [r7, #4]
 810ae2e:	681b      	ldr	r3, [r3, #0]
 810ae30:	430a      	orrs	r2, r1
 810ae32:	605a      	str	r2, [r3, #4]
  }
}
 810ae34:	bf00      	nop
 810ae36:	370c      	adds	r7, #12
 810ae38:	46bd      	mov	sp, r7
 810ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae3e:	4770      	bx	lr

0810ae40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810ae40:	b580      	push	{r7, lr}
 810ae42:	b098      	sub	sp, #96	@ 0x60
 810ae44:	af02      	add	r7, sp, #8
 810ae46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810ae48:	687b      	ldr	r3, [r7, #4]
 810ae4a:	2200      	movs	r2, #0
 810ae4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810ae50:	f7f6 fd4c 	bl	81018ec <HAL_GetTick>
 810ae54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810ae56:	687b      	ldr	r3, [r7, #4]
 810ae58:	681b      	ldr	r3, [r3, #0]
 810ae5a:	681b      	ldr	r3, [r3, #0]
 810ae5c:	f003 0308 	and.w	r3, r3, #8
 810ae60:	2b08      	cmp	r3, #8
 810ae62:	d12f      	bne.n	810aec4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810ae64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810ae68:	9300      	str	r3, [sp, #0]
 810ae6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810ae6c:	2200      	movs	r2, #0
 810ae6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810ae72:	6878      	ldr	r0, [r7, #4]
 810ae74:	f000 f88e 	bl	810af94 <UART_WaitOnFlagUntilTimeout>
 810ae78:	4603      	mov	r3, r0
 810ae7a:	2b00      	cmp	r3, #0
 810ae7c:	d022      	beq.n	810aec4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810ae7e:	687b      	ldr	r3, [r7, #4]
 810ae80:	681b      	ldr	r3, [r3, #0]
 810ae82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ae84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae86:	e853 3f00 	ldrex	r3, [r3]
 810ae8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810ae8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ae8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810ae92:	653b      	str	r3, [r7, #80]	@ 0x50
 810ae94:	687b      	ldr	r3, [r7, #4]
 810ae96:	681b      	ldr	r3, [r3, #0]
 810ae98:	461a      	mov	r2, r3
 810ae9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ae9c:	647b      	str	r3, [r7, #68]	@ 0x44
 810ae9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aea0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810aea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810aea4:	e841 2300 	strex	r3, r2, [r1]
 810aea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810aeaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810aeac:	2b00      	cmp	r3, #0
 810aeae:	d1e6      	bne.n	810ae7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810aeb0:	687b      	ldr	r3, [r7, #4]
 810aeb2:	2220      	movs	r2, #32
 810aeb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810aeb8:	687b      	ldr	r3, [r7, #4]
 810aeba:	2200      	movs	r2, #0
 810aebc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810aec0:	2303      	movs	r3, #3
 810aec2:	e063      	b.n	810af8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810aec4:	687b      	ldr	r3, [r7, #4]
 810aec6:	681b      	ldr	r3, [r3, #0]
 810aec8:	681b      	ldr	r3, [r3, #0]
 810aeca:	f003 0304 	and.w	r3, r3, #4
 810aece:	2b04      	cmp	r3, #4
 810aed0:	d149      	bne.n	810af66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810aed2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810aed6:	9300      	str	r3, [sp, #0]
 810aed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810aeda:	2200      	movs	r2, #0
 810aedc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810aee0:	6878      	ldr	r0, [r7, #4]
 810aee2:	f000 f857 	bl	810af94 <UART_WaitOnFlagUntilTimeout>
 810aee6:	4603      	mov	r3, r0
 810aee8:	2b00      	cmp	r3, #0
 810aeea:	d03c      	beq.n	810af66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810aeec:	687b      	ldr	r3, [r7, #4]
 810aeee:	681b      	ldr	r3, [r3, #0]
 810aef0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810aef4:	e853 3f00 	ldrex	r3, [r3]
 810aef8:	623b      	str	r3, [r7, #32]
   return(result);
 810aefa:	6a3b      	ldr	r3, [r7, #32]
 810aefc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810af00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810af02:	687b      	ldr	r3, [r7, #4]
 810af04:	681b      	ldr	r3, [r3, #0]
 810af06:	461a      	mov	r2, r3
 810af08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810af0a:	633b      	str	r3, [r7, #48]	@ 0x30
 810af0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810af10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810af12:	e841 2300 	strex	r3, r2, [r1]
 810af16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810af18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810af1a:	2b00      	cmp	r3, #0
 810af1c:	d1e6      	bne.n	810aeec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810af1e:	687b      	ldr	r3, [r7, #4]
 810af20:	681b      	ldr	r3, [r3, #0]
 810af22:	3308      	adds	r3, #8
 810af24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810af26:	693b      	ldr	r3, [r7, #16]
 810af28:	e853 3f00 	ldrex	r3, [r3]
 810af2c:	60fb      	str	r3, [r7, #12]
   return(result);
 810af2e:	68fb      	ldr	r3, [r7, #12]
 810af30:	f023 0301 	bic.w	r3, r3, #1
 810af34:	64bb      	str	r3, [r7, #72]	@ 0x48
 810af36:	687b      	ldr	r3, [r7, #4]
 810af38:	681b      	ldr	r3, [r3, #0]
 810af3a:	3308      	adds	r3, #8
 810af3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810af3e:	61fa      	str	r2, [r7, #28]
 810af40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af42:	69b9      	ldr	r1, [r7, #24]
 810af44:	69fa      	ldr	r2, [r7, #28]
 810af46:	e841 2300 	strex	r3, r2, [r1]
 810af4a:	617b      	str	r3, [r7, #20]
   return(result);
 810af4c:	697b      	ldr	r3, [r7, #20]
 810af4e:	2b00      	cmp	r3, #0
 810af50:	d1e5      	bne.n	810af1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810af52:	687b      	ldr	r3, [r7, #4]
 810af54:	2220      	movs	r2, #32
 810af56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810af5a:	687b      	ldr	r3, [r7, #4]
 810af5c:	2200      	movs	r2, #0
 810af5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810af62:	2303      	movs	r3, #3
 810af64:	e012      	b.n	810af8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810af66:	687b      	ldr	r3, [r7, #4]
 810af68:	2220      	movs	r2, #32
 810af6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810af6e:	687b      	ldr	r3, [r7, #4]
 810af70:	2220      	movs	r2, #32
 810af72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810af76:	687b      	ldr	r3, [r7, #4]
 810af78:	2200      	movs	r2, #0
 810af7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810af7c:	687b      	ldr	r3, [r7, #4]
 810af7e:	2200      	movs	r2, #0
 810af80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810af82:	687b      	ldr	r3, [r7, #4]
 810af84:	2200      	movs	r2, #0
 810af86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810af8a:	2300      	movs	r3, #0
}
 810af8c:	4618      	mov	r0, r3
 810af8e:	3758      	adds	r7, #88	@ 0x58
 810af90:	46bd      	mov	sp, r7
 810af92:	bd80      	pop	{r7, pc}

0810af94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810af94:	b580      	push	{r7, lr}
 810af96:	b084      	sub	sp, #16
 810af98:	af00      	add	r7, sp, #0
 810af9a:	60f8      	str	r0, [r7, #12]
 810af9c:	60b9      	str	r1, [r7, #8]
 810af9e:	603b      	str	r3, [r7, #0]
 810afa0:	4613      	mov	r3, r2
 810afa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810afa4:	e04f      	b.n	810b046 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810afa6:	69bb      	ldr	r3, [r7, #24]
 810afa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810afac:	d04b      	beq.n	810b046 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810afae:	f7f6 fc9d 	bl	81018ec <HAL_GetTick>
 810afb2:	4602      	mov	r2, r0
 810afb4:	683b      	ldr	r3, [r7, #0]
 810afb6:	1ad3      	subs	r3, r2, r3
 810afb8:	69ba      	ldr	r2, [r7, #24]
 810afba:	429a      	cmp	r2, r3
 810afbc:	d302      	bcc.n	810afc4 <UART_WaitOnFlagUntilTimeout+0x30>
 810afbe:	69bb      	ldr	r3, [r7, #24]
 810afc0:	2b00      	cmp	r3, #0
 810afc2:	d101      	bne.n	810afc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810afc4:	2303      	movs	r3, #3
 810afc6:	e04e      	b.n	810b066 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810afc8:	68fb      	ldr	r3, [r7, #12]
 810afca:	681b      	ldr	r3, [r3, #0]
 810afcc:	681b      	ldr	r3, [r3, #0]
 810afce:	f003 0304 	and.w	r3, r3, #4
 810afd2:	2b00      	cmp	r3, #0
 810afd4:	d037      	beq.n	810b046 <UART_WaitOnFlagUntilTimeout+0xb2>
 810afd6:	68bb      	ldr	r3, [r7, #8]
 810afd8:	2b80      	cmp	r3, #128	@ 0x80
 810afda:	d034      	beq.n	810b046 <UART_WaitOnFlagUntilTimeout+0xb2>
 810afdc:	68bb      	ldr	r3, [r7, #8]
 810afde:	2b40      	cmp	r3, #64	@ 0x40
 810afe0:	d031      	beq.n	810b046 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810afe2:	68fb      	ldr	r3, [r7, #12]
 810afe4:	681b      	ldr	r3, [r3, #0]
 810afe6:	69db      	ldr	r3, [r3, #28]
 810afe8:	f003 0308 	and.w	r3, r3, #8
 810afec:	2b08      	cmp	r3, #8
 810afee:	d110      	bne.n	810b012 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810aff0:	68fb      	ldr	r3, [r7, #12]
 810aff2:	681b      	ldr	r3, [r3, #0]
 810aff4:	2208      	movs	r2, #8
 810aff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810aff8:	68f8      	ldr	r0, [r7, #12]
 810affa:	f000 f838 	bl	810b06e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810affe:	68fb      	ldr	r3, [r7, #12]
 810b000:	2208      	movs	r2, #8
 810b002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b006:	68fb      	ldr	r3, [r7, #12]
 810b008:	2200      	movs	r2, #0
 810b00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810b00e:	2301      	movs	r3, #1
 810b010:	e029      	b.n	810b066 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810b012:	68fb      	ldr	r3, [r7, #12]
 810b014:	681b      	ldr	r3, [r3, #0]
 810b016:	69db      	ldr	r3, [r3, #28]
 810b018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810b01c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810b020:	d111      	bne.n	810b046 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810b022:	68fb      	ldr	r3, [r7, #12]
 810b024:	681b      	ldr	r3, [r3, #0]
 810b026:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810b02a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810b02c:	68f8      	ldr	r0, [r7, #12]
 810b02e:	f000 f81e 	bl	810b06e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810b032:	68fb      	ldr	r3, [r7, #12]
 810b034:	2220      	movs	r2, #32
 810b036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b03a:	68fb      	ldr	r3, [r7, #12]
 810b03c:	2200      	movs	r2, #0
 810b03e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810b042:	2303      	movs	r3, #3
 810b044:	e00f      	b.n	810b066 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b046:	68fb      	ldr	r3, [r7, #12]
 810b048:	681b      	ldr	r3, [r3, #0]
 810b04a:	69da      	ldr	r2, [r3, #28]
 810b04c:	68bb      	ldr	r3, [r7, #8]
 810b04e:	4013      	ands	r3, r2
 810b050:	68ba      	ldr	r2, [r7, #8]
 810b052:	429a      	cmp	r2, r3
 810b054:	bf0c      	ite	eq
 810b056:	2301      	moveq	r3, #1
 810b058:	2300      	movne	r3, #0
 810b05a:	b2db      	uxtb	r3, r3
 810b05c:	461a      	mov	r2, r3
 810b05e:	79fb      	ldrb	r3, [r7, #7]
 810b060:	429a      	cmp	r2, r3
 810b062:	d0a0      	beq.n	810afa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810b064:	2300      	movs	r3, #0
}
 810b066:	4618      	mov	r0, r3
 810b068:	3710      	adds	r7, #16
 810b06a:	46bd      	mov	sp, r7
 810b06c:	bd80      	pop	{r7, pc}

0810b06e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810b06e:	b480      	push	{r7}
 810b070:	b095      	sub	sp, #84	@ 0x54
 810b072:	af00      	add	r7, sp, #0
 810b074:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b076:	687b      	ldr	r3, [r7, #4]
 810b078:	681b      	ldr	r3, [r3, #0]
 810b07a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b07e:	e853 3f00 	ldrex	r3, [r3]
 810b082:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810b084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b086:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810b08a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b08c:	687b      	ldr	r3, [r7, #4]
 810b08e:	681b      	ldr	r3, [r3, #0]
 810b090:	461a      	mov	r2, r3
 810b092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b094:	643b      	str	r3, [r7, #64]	@ 0x40
 810b096:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b098:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810b09a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810b09c:	e841 2300 	strex	r3, r2, [r1]
 810b0a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810b0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0a4:	2b00      	cmp	r3, #0
 810b0a6:	d1e6      	bne.n	810b076 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b0a8:	687b      	ldr	r3, [r7, #4]
 810b0aa:	681b      	ldr	r3, [r3, #0]
 810b0ac:	3308      	adds	r3, #8
 810b0ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b0b0:	6a3b      	ldr	r3, [r7, #32]
 810b0b2:	e853 3f00 	ldrex	r3, [r3]
 810b0b6:	61fb      	str	r3, [r7, #28]
   return(result);
 810b0b8:	69fb      	ldr	r3, [r7, #28]
 810b0ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b0be:	f023 0301 	bic.w	r3, r3, #1
 810b0c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b0c4:	687b      	ldr	r3, [r7, #4]
 810b0c6:	681b      	ldr	r3, [r3, #0]
 810b0c8:	3308      	adds	r3, #8
 810b0ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810b0cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810b0ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b0d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b0d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b0d4:	e841 2300 	strex	r3, r2, [r1]
 810b0d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b0dc:	2b00      	cmp	r3, #0
 810b0de:	d1e3      	bne.n	810b0a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b0e0:	687b      	ldr	r3, [r7, #4]
 810b0e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b0e4:	2b01      	cmp	r3, #1
 810b0e6:	d118      	bne.n	810b11a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b0e8:	687b      	ldr	r3, [r7, #4]
 810b0ea:	681b      	ldr	r3, [r3, #0]
 810b0ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b0ee:	68fb      	ldr	r3, [r7, #12]
 810b0f0:	e853 3f00 	ldrex	r3, [r3]
 810b0f4:	60bb      	str	r3, [r7, #8]
   return(result);
 810b0f6:	68bb      	ldr	r3, [r7, #8]
 810b0f8:	f023 0310 	bic.w	r3, r3, #16
 810b0fc:	647b      	str	r3, [r7, #68]	@ 0x44
 810b0fe:	687b      	ldr	r3, [r7, #4]
 810b100:	681b      	ldr	r3, [r3, #0]
 810b102:	461a      	mov	r2, r3
 810b104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b106:	61bb      	str	r3, [r7, #24]
 810b108:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b10a:	6979      	ldr	r1, [r7, #20]
 810b10c:	69ba      	ldr	r2, [r7, #24]
 810b10e:	e841 2300 	strex	r3, r2, [r1]
 810b112:	613b      	str	r3, [r7, #16]
   return(result);
 810b114:	693b      	ldr	r3, [r7, #16]
 810b116:	2b00      	cmp	r3, #0
 810b118:	d1e6      	bne.n	810b0e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810b11a:	687b      	ldr	r3, [r7, #4]
 810b11c:	2220      	movs	r2, #32
 810b11e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b122:	687b      	ldr	r3, [r7, #4]
 810b124:	2200      	movs	r2, #0
 810b126:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810b128:	687b      	ldr	r3, [r7, #4]
 810b12a:	2200      	movs	r2, #0
 810b12c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810b12e:	bf00      	nop
 810b130:	3754      	adds	r7, #84	@ 0x54
 810b132:	46bd      	mov	sp, r7
 810b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b138:	4770      	bx	lr

0810b13a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810b13a:	b480      	push	{r7}
 810b13c:	b085      	sub	sp, #20
 810b13e:	af00      	add	r7, sp, #0
 810b140:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b142:	687b      	ldr	r3, [r7, #4]
 810b144:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b148:	2b01      	cmp	r3, #1
 810b14a:	d101      	bne.n	810b150 <HAL_UARTEx_DisableFifoMode+0x16>
 810b14c:	2302      	movs	r3, #2
 810b14e:	e027      	b.n	810b1a0 <HAL_UARTEx_DisableFifoMode+0x66>
 810b150:	687b      	ldr	r3, [r7, #4]
 810b152:	2201      	movs	r2, #1
 810b154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b158:	687b      	ldr	r3, [r7, #4]
 810b15a:	2224      	movs	r2, #36	@ 0x24
 810b15c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b160:	687b      	ldr	r3, [r7, #4]
 810b162:	681b      	ldr	r3, [r3, #0]
 810b164:	681b      	ldr	r3, [r3, #0]
 810b166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b168:	687b      	ldr	r3, [r7, #4]
 810b16a:	681b      	ldr	r3, [r3, #0]
 810b16c:	681a      	ldr	r2, [r3, #0]
 810b16e:	687b      	ldr	r3, [r7, #4]
 810b170:	681b      	ldr	r3, [r3, #0]
 810b172:	f022 0201 	bic.w	r2, r2, #1
 810b176:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810b178:	68fb      	ldr	r3, [r7, #12]
 810b17a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810b17e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810b180:	687b      	ldr	r3, [r7, #4]
 810b182:	2200      	movs	r2, #0
 810b184:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b186:	687b      	ldr	r3, [r7, #4]
 810b188:	681b      	ldr	r3, [r3, #0]
 810b18a:	68fa      	ldr	r2, [r7, #12]
 810b18c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b18e:	687b      	ldr	r3, [r7, #4]
 810b190:	2220      	movs	r2, #32
 810b192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b196:	687b      	ldr	r3, [r7, #4]
 810b198:	2200      	movs	r2, #0
 810b19a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b19e:	2300      	movs	r3, #0
}
 810b1a0:	4618      	mov	r0, r3
 810b1a2:	3714      	adds	r7, #20
 810b1a4:	46bd      	mov	sp, r7
 810b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1aa:	4770      	bx	lr

0810b1ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b1ac:	b580      	push	{r7, lr}
 810b1ae:	b084      	sub	sp, #16
 810b1b0:	af00      	add	r7, sp, #0
 810b1b2:	6078      	str	r0, [r7, #4]
 810b1b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b1b6:	687b      	ldr	r3, [r7, #4]
 810b1b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b1bc:	2b01      	cmp	r3, #1
 810b1be:	d101      	bne.n	810b1c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810b1c0:	2302      	movs	r3, #2
 810b1c2:	e02d      	b.n	810b220 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810b1c4:	687b      	ldr	r3, [r7, #4]
 810b1c6:	2201      	movs	r2, #1
 810b1c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b1cc:	687b      	ldr	r3, [r7, #4]
 810b1ce:	2224      	movs	r2, #36	@ 0x24
 810b1d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b1d4:	687b      	ldr	r3, [r7, #4]
 810b1d6:	681b      	ldr	r3, [r3, #0]
 810b1d8:	681b      	ldr	r3, [r3, #0]
 810b1da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b1dc:	687b      	ldr	r3, [r7, #4]
 810b1de:	681b      	ldr	r3, [r3, #0]
 810b1e0:	681a      	ldr	r2, [r3, #0]
 810b1e2:	687b      	ldr	r3, [r7, #4]
 810b1e4:	681b      	ldr	r3, [r3, #0]
 810b1e6:	f022 0201 	bic.w	r2, r2, #1
 810b1ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810b1ec:	687b      	ldr	r3, [r7, #4]
 810b1ee:	681b      	ldr	r3, [r3, #0]
 810b1f0:	689b      	ldr	r3, [r3, #8]
 810b1f2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810b1f6:	687b      	ldr	r3, [r7, #4]
 810b1f8:	681b      	ldr	r3, [r3, #0]
 810b1fa:	683a      	ldr	r2, [r7, #0]
 810b1fc:	430a      	orrs	r2, r1
 810b1fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b200:	6878      	ldr	r0, [r7, #4]
 810b202:	f000 f84f 	bl	810b2a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b206:	687b      	ldr	r3, [r7, #4]
 810b208:	681b      	ldr	r3, [r3, #0]
 810b20a:	68fa      	ldr	r2, [r7, #12]
 810b20c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b20e:	687b      	ldr	r3, [r7, #4]
 810b210:	2220      	movs	r2, #32
 810b212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b216:	687b      	ldr	r3, [r7, #4]
 810b218:	2200      	movs	r2, #0
 810b21a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b21e:	2300      	movs	r3, #0
}
 810b220:	4618      	mov	r0, r3
 810b222:	3710      	adds	r7, #16
 810b224:	46bd      	mov	sp, r7
 810b226:	bd80      	pop	{r7, pc}

0810b228 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b228:	b580      	push	{r7, lr}
 810b22a:	b084      	sub	sp, #16
 810b22c:	af00      	add	r7, sp, #0
 810b22e:	6078      	str	r0, [r7, #4]
 810b230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b232:	687b      	ldr	r3, [r7, #4]
 810b234:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b238:	2b01      	cmp	r3, #1
 810b23a:	d101      	bne.n	810b240 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810b23c:	2302      	movs	r3, #2
 810b23e:	e02d      	b.n	810b29c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810b240:	687b      	ldr	r3, [r7, #4]
 810b242:	2201      	movs	r2, #1
 810b244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b248:	687b      	ldr	r3, [r7, #4]
 810b24a:	2224      	movs	r2, #36	@ 0x24
 810b24c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b250:	687b      	ldr	r3, [r7, #4]
 810b252:	681b      	ldr	r3, [r3, #0]
 810b254:	681b      	ldr	r3, [r3, #0]
 810b256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b258:	687b      	ldr	r3, [r7, #4]
 810b25a:	681b      	ldr	r3, [r3, #0]
 810b25c:	681a      	ldr	r2, [r3, #0]
 810b25e:	687b      	ldr	r3, [r7, #4]
 810b260:	681b      	ldr	r3, [r3, #0]
 810b262:	f022 0201 	bic.w	r2, r2, #1
 810b266:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810b268:	687b      	ldr	r3, [r7, #4]
 810b26a:	681b      	ldr	r3, [r3, #0]
 810b26c:	689b      	ldr	r3, [r3, #8]
 810b26e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810b272:	687b      	ldr	r3, [r7, #4]
 810b274:	681b      	ldr	r3, [r3, #0]
 810b276:	683a      	ldr	r2, [r7, #0]
 810b278:	430a      	orrs	r2, r1
 810b27a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b27c:	6878      	ldr	r0, [r7, #4]
 810b27e:	f000 f811 	bl	810b2a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b282:	687b      	ldr	r3, [r7, #4]
 810b284:	681b      	ldr	r3, [r3, #0]
 810b286:	68fa      	ldr	r2, [r7, #12]
 810b288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b28a:	687b      	ldr	r3, [r7, #4]
 810b28c:	2220      	movs	r2, #32
 810b28e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b292:	687b      	ldr	r3, [r7, #4]
 810b294:	2200      	movs	r2, #0
 810b296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b29a:	2300      	movs	r3, #0
}
 810b29c:	4618      	mov	r0, r3
 810b29e:	3710      	adds	r7, #16
 810b2a0:	46bd      	mov	sp, r7
 810b2a2:	bd80      	pop	{r7, pc}

0810b2a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810b2a4:	b480      	push	{r7}
 810b2a6:	b085      	sub	sp, #20
 810b2a8:	af00      	add	r7, sp, #0
 810b2aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810b2ac:	687b      	ldr	r3, [r7, #4]
 810b2ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b2b0:	2b00      	cmp	r3, #0
 810b2b2:	d108      	bne.n	810b2c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810b2b4:	687b      	ldr	r3, [r7, #4]
 810b2b6:	2201      	movs	r2, #1
 810b2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810b2bc:	687b      	ldr	r3, [r7, #4]
 810b2be:	2201      	movs	r2, #1
 810b2c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810b2c4:	e031      	b.n	810b32a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810b2c6:	2310      	movs	r3, #16
 810b2c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810b2ca:	2310      	movs	r3, #16
 810b2cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810b2ce:	687b      	ldr	r3, [r7, #4]
 810b2d0:	681b      	ldr	r3, [r3, #0]
 810b2d2:	689b      	ldr	r3, [r3, #8]
 810b2d4:	0e5b      	lsrs	r3, r3, #25
 810b2d6:	b2db      	uxtb	r3, r3
 810b2d8:	f003 0307 	and.w	r3, r3, #7
 810b2dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810b2de:	687b      	ldr	r3, [r7, #4]
 810b2e0:	681b      	ldr	r3, [r3, #0]
 810b2e2:	689b      	ldr	r3, [r3, #8]
 810b2e4:	0f5b      	lsrs	r3, r3, #29
 810b2e6:	b2db      	uxtb	r3, r3
 810b2e8:	f003 0307 	and.w	r3, r3, #7
 810b2ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b2ee:	7bbb      	ldrb	r3, [r7, #14]
 810b2f0:	7b3a      	ldrb	r2, [r7, #12]
 810b2f2:	4911      	ldr	r1, [pc, #68]	@ (810b338 <UARTEx_SetNbDataToProcess+0x94>)
 810b2f4:	5c8a      	ldrb	r2, [r1, r2]
 810b2f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810b2fa:	7b3a      	ldrb	r2, [r7, #12]
 810b2fc:	490f      	ldr	r1, [pc, #60]	@ (810b33c <UARTEx_SetNbDataToProcess+0x98>)
 810b2fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b300:	fb93 f3f2 	sdiv	r3, r3, r2
 810b304:	b29a      	uxth	r2, r3
 810b306:	687b      	ldr	r3, [r7, #4]
 810b308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b30c:	7bfb      	ldrb	r3, [r7, #15]
 810b30e:	7b7a      	ldrb	r2, [r7, #13]
 810b310:	4909      	ldr	r1, [pc, #36]	@ (810b338 <UARTEx_SetNbDataToProcess+0x94>)
 810b312:	5c8a      	ldrb	r2, [r1, r2]
 810b314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810b318:	7b7a      	ldrb	r2, [r7, #13]
 810b31a:	4908      	ldr	r1, [pc, #32]	@ (810b33c <UARTEx_SetNbDataToProcess+0x98>)
 810b31c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b31e:	fb93 f3f2 	sdiv	r3, r3, r2
 810b322:	b29a      	uxth	r2, r3
 810b324:	687b      	ldr	r3, [r7, #4]
 810b326:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810b32a:	bf00      	nop
 810b32c:	3714      	adds	r7, #20
 810b32e:	46bd      	mov	sp, r7
 810b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b334:	4770      	bx	lr
 810b336:	bf00      	nop
 810b338:	0810be5c 	.word	0x0810be5c
 810b33c:	0810be64 	.word	0x0810be64

0810b340 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 810b340:	b084      	sub	sp, #16
 810b342:	b480      	push	{r7}
 810b344:	b085      	sub	sp, #20
 810b346:	af00      	add	r7, sp, #0
 810b348:	6078      	str	r0, [r7, #4]
 810b34a:	f107 001c 	add.w	r0, r7, #28
 810b34e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810b352:	2300      	movs	r3, #0
 810b354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 810b356:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 810b358:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 810b35a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 810b35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 810b35e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 810b360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 810b362:	431a      	orrs	r2, r3
             Init.ClockDiv
 810b364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 810b366:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 810b368:	68fa      	ldr	r2, [r7, #12]
 810b36a:	4313      	orrs	r3, r2
 810b36c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810b36e:	687b      	ldr	r3, [r7, #4]
 810b370:	685a      	ldr	r2, [r3, #4]
 810b372:	4b07      	ldr	r3, [pc, #28]	@ (810b390 <SDMMC_Init+0x50>)
 810b374:	4013      	ands	r3, r2
 810b376:	68fa      	ldr	r2, [r7, #12]
 810b378:	431a      	orrs	r2, r3
 810b37a:	687b      	ldr	r3, [r7, #4]
 810b37c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810b37e:	2300      	movs	r3, #0
}
 810b380:	4618      	mov	r0, r3
 810b382:	3714      	adds	r7, #20
 810b384:	46bd      	mov	sp, r7
 810b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b38a:	b004      	add	sp, #16
 810b38c:	4770      	bx	lr
 810b38e:	bf00      	nop
 810b390:	ffc02c00 	.word	0xffc02c00

0810b394 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 810b394:	b480      	push	{r7}
 810b396:	b083      	sub	sp, #12
 810b398:	af00      	add	r7, sp, #0
 810b39a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810b39c:	687b      	ldr	r3, [r7, #4]
 810b39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 810b3a2:	4618      	mov	r0, r3
 810b3a4:	370c      	adds	r7, #12
 810b3a6:	46bd      	mov	sp, r7
 810b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3ac:	4770      	bx	lr

0810b3ae <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 810b3ae:	b480      	push	{r7}
 810b3b0:	b083      	sub	sp, #12
 810b3b2:	af00      	add	r7, sp, #0
 810b3b4:	6078      	str	r0, [r7, #4]
 810b3b6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 810b3b8:	683b      	ldr	r3, [r7, #0]
 810b3ba:	681a      	ldr	r2, [r3, #0]
 810b3bc:	687b      	ldr	r3, [r7, #4]
 810b3be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 810b3c2:	2300      	movs	r3, #0
}
 810b3c4:	4618      	mov	r0, r3
 810b3c6:	370c      	adds	r7, #12
 810b3c8:	46bd      	mov	sp, r7
 810b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3ce:	4770      	bx	lr

0810b3d0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810b3d0:	b480      	push	{r7}
 810b3d2:	b083      	sub	sp, #12
 810b3d4:	af00      	add	r7, sp, #0
 810b3d6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810b3d8:	687b      	ldr	r3, [r7, #4]
 810b3da:	681b      	ldr	r3, [r3, #0]
 810b3dc:	f043 0203 	orr.w	r2, r3, #3
 810b3e0:	687b      	ldr	r3, [r7, #4]
 810b3e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810b3e4:	2300      	movs	r3, #0
}
 810b3e6:	4618      	mov	r0, r3
 810b3e8:	370c      	adds	r7, #12
 810b3ea:	46bd      	mov	sp, r7
 810b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3f0:	4770      	bx	lr

0810b3f2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 810b3f2:	b480      	push	{r7}
 810b3f4:	b083      	sub	sp, #12
 810b3f6:	af00      	add	r7, sp, #0
 810b3f8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810b3fa:	687b      	ldr	r3, [r7, #4]
 810b3fc:	681b      	ldr	r3, [r3, #0]
 810b3fe:	f003 0303 	and.w	r3, r3, #3
}
 810b402:	4618      	mov	r0, r3
 810b404:	370c      	adds	r7, #12
 810b406:	46bd      	mov	sp, r7
 810b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b40c:	4770      	bx	lr
	...

0810b410 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 810b410:	b480      	push	{r7}
 810b412:	b085      	sub	sp, #20
 810b414:	af00      	add	r7, sp, #0
 810b416:	6078      	str	r0, [r7, #4]
 810b418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810b41a:	2300      	movs	r3, #0
 810b41c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810b41e:	683b      	ldr	r3, [r7, #0]
 810b420:	681a      	ldr	r2, [r3, #0]
 810b422:	687b      	ldr	r3, [r7, #4]
 810b424:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810b426:	683b      	ldr	r3, [r7, #0]
 810b428:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 810b42a:	683b      	ldr	r3, [r7, #0]
 810b42c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810b42e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 810b430:	683b      	ldr	r3, [r7, #0]
 810b432:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 810b434:	431a      	orrs	r2, r3
                       Command->CPSM);
 810b436:	683b      	ldr	r3, [r7, #0]
 810b438:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 810b43a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810b43c:	68fa      	ldr	r2, [r7, #12]
 810b43e:	4313      	orrs	r3, r2
 810b440:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 810b442:	687b      	ldr	r3, [r7, #4]
 810b444:	68da      	ldr	r2, [r3, #12]
 810b446:	4b06      	ldr	r3, [pc, #24]	@ (810b460 <SDMMC_SendCommand+0x50>)
 810b448:	4013      	ands	r3, r2
 810b44a:	68fa      	ldr	r2, [r7, #12]
 810b44c:	431a      	orrs	r2, r3
 810b44e:	687b      	ldr	r3, [r7, #4]
 810b450:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810b452:	2300      	movs	r3, #0
}
 810b454:	4618      	mov	r0, r3
 810b456:	3714      	adds	r7, #20
 810b458:	46bd      	mov	sp, r7
 810b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b45e:	4770      	bx	lr
 810b460:	fffee0c0 	.word	0xfffee0c0

0810b464 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 810b464:	b480      	push	{r7}
 810b466:	b083      	sub	sp, #12
 810b468:	af00      	add	r7, sp, #0
 810b46a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 810b46c:	687b      	ldr	r3, [r7, #4]
 810b46e:	691b      	ldr	r3, [r3, #16]
 810b470:	b2db      	uxtb	r3, r3
}
 810b472:	4618      	mov	r0, r3
 810b474:	370c      	adds	r7, #12
 810b476:	46bd      	mov	sp, r7
 810b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b47c:	4770      	bx	lr

0810b47e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810b47e:	b480      	push	{r7}
 810b480:	b085      	sub	sp, #20
 810b482:	af00      	add	r7, sp, #0
 810b484:	6078      	str	r0, [r7, #4]
 810b486:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810b488:	687b      	ldr	r3, [r7, #4]
 810b48a:	3314      	adds	r3, #20
 810b48c:	461a      	mov	r2, r3
 810b48e:	683b      	ldr	r3, [r7, #0]
 810b490:	4413      	add	r3, r2
 810b492:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 810b494:	68fb      	ldr	r3, [r7, #12]
 810b496:	681b      	ldr	r3, [r3, #0]
}
 810b498:	4618      	mov	r0, r3
 810b49a:	3714      	adds	r7, #20
 810b49c:	46bd      	mov	sp, r7
 810b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4a2:	4770      	bx	lr

0810b4a4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 810b4a4:	b480      	push	{r7}
 810b4a6:	b085      	sub	sp, #20
 810b4a8:	af00      	add	r7, sp, #0
 810b4aa:	6078      	str	r0, [r7, #4]
 810b4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810b4ae:	2300      	movs	r3, #0
 810b4b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810b4b2:	683b      	ldr	r3, [r7, #0]
 810b4b4:	681a      	ldr	r2, [r3, #0]
 810b4b6:	687b      	ldr	r3, [r7, #4]
 810b4b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810b4ba:	683b      	ldr	r3, [r7, #0]
 810b4bc:	685a      	ldr	r2, [r3, #4]
 810b4be:	687b      	ldr	r3, [r7, #4]
 810b4c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810b4c2:	683b      	ldr	r3, [r7, #0]
 810b4c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 810b4c6:	683b      	ldr	r3, [r7, #0]
 810b4c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810b4ca:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 810b4cc:	683b      	ldr	r3, [r7, #0]
 810b4ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 810b4d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 810b4d2:	683b      	ldr	r3, [r7, #0]
 810b4d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 810b4d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810b4d8:	68fa      	ldr	r2, [r7, #12]
 810b4da:	4313      	orrs	r3, r2
 810b4dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810b4de:	687b      	ldr	r3, [r7, #4]
 810b4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b4e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810b4e6:	68fb      	ldr	r3, [r7, #12]
 810b4e8:	431a      	orrs	r2, r3
 810b4ea:	687b      	ldr	r3, [r7, #4]
 810b4ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 810b4ee:	2300      	movs	r3, #0

}
 810b4f0:	4618      	mov	r0, r3
 810b4f2:	3714      	adds	r7, #20
 810b4f4:	46bd      	mov	sp, r7
 810b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4fa:	4770      	bx	lr

0810b4fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810b4fc:	b580      	push	{r7, lr}
 810b4fe:	b088      	sub	sp, #32
 810b500:	af00      	add	r7, sp, #0
 810b502:	6078      	str	r0, [r7, #4]
 810b504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 810b506:	683b      	ldr	r3, [r7, #0]
 810b508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810b50a:	2310      	movs	r3, #16
 810b50c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b50e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b514:	2300      	movs	r3, #0
 810b516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b518:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b51c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b51e:	f107 0308 	add.w	r3, r7, #8
 810b522:	4619      	mov	r1, r3
 810b524:	6878      	ldr	r0, [r7, #4]
 810b526:	f7ff ff73 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 810b52a:	f241 3288 	movw	r2, #5000	@ 0x1388
 810b52e:	2110      	movs	r1, #16
 810b530:	6878      	ldr	r0, [r7, #4]
 810b532:	f000 f9d3 	bl	810b8dc <SDMMC_GetCmdResp1>
 810b536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b538:	69fb      	ldr	r3, [r7, #28]
}
 810b53a:	4618      	mov	r0, r3
 810b53c:	3720      	adds	r7, #32
 810b53e:	46bd      	mov	sp, r7
 810b540:	bd80      	pop	{r7, pc}
	...

0810b544 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 810b544:	b580      	push	{r7, lr}
 810b546:	b088      	sub	sp, #32
 810b548:	af00      	add	r7, sp, #0
 810b54a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 810b54c:	2300      	movs	r3, #0
 810b54e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 810b550:	230c      	movs	r3, #12
 810b552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b55a:	2300      	movs	r3, #0
 810b55c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b55e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b562:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 810b564:	687b      	ldr	r3, [r7, #4]
 810b566:	68db      	ldr	r3, [r3, #12]
 810b568:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810b56c:	687b      	ldr	r3, [r7, #4]
 810b56e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 810b570:	687b      	ldr	r3, [r7, #4]
 810b572:	68db      	ldr	r3, [r3, #12]
 810b574:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 810b578:	687b      	ldr	r3, [r7, #4]
 810b57a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b57c:	f107 0308 	add.w	r3, r7, #8
 810b580:	4619      	mov	r1, r3
 810b582:	6878      	ldr	r0, [r7, #4]
 810b584:	f7ff ff44 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 810b588:	4a0b      	ldr	r2, [pc, #44]	@ (810b5b8 <SDMMC_CmdStopTransfer+0x74>)
 810b58a:	210c      	movs	r1, #12
 810b58c:	6878      	ldr	r0, [r7, #4]
 810b58e:	f000 f9a5 	bl	810b8dc <SDMMC_GetCmdResp1>
 810b592:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 810b594:	687b      	ldr	r3, [r7, #4]
 810b596:	68db      	ldr	r3, [r3, #12]
 810b598:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810b59c:	687b      	ldr	r3, [r7, #4]
 810b59e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 810b5a0:	69fb      	ldr	r3, [r7, #28]
 810b5a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b5a6:	d101      	bne.n	810b5ac <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 810b5a8:	2300      	movs	r3, #0
 810b5aa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 810b5ac:	69fb      	ldr	r3, [r7, #28]
}
 810b5ae:	4618      	mov	r0, r3
 810b5b0:	3720      	adds	r7, #32
 810b5b2:	46bd      	mov	sp, r7
 810b5b4:	bd80      	pop	{r7, pc}
 810b5b6:	bf00      	nop
 810b5b8:	05f5e100 	.word	0x05f5e100

0810b5bc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 810b5bc:	b580      	push	{r7, lr}
 810b5be:	b088      	sub	sp, #32
 810b5c0:	af00      	add	r7, sp, #0
 810b5c2:	6078      	str	r0, [r7, #4]
 810b5c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810b5c6:	683b      	ldr	r3, [r7, #0]
 810b5c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810b5ca:	2307      	movs	r3, #7
 810b5cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b5ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b5d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b5d4:	2300      	movs	r3, #0
 810b5d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b5d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b5dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b5de:	f107 0308 	add.w	r3, r7, #8
 810b5e2:	4619      	mov	r1, r3
 810b5e4:	6878      	ldr	r0, [r7, #4]
 810b5e6:	f7ff ff13 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810b5ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 810b5ee:	2107      	movs	r1, #7
 810b5f0:	6878      	ldr	r0, [r7, #4]
 810b5f2:	f000 f973 	bl	810b8dc <SDMMC_GetCmdResp1>
 810b5f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b5f8:	69fb      	ldr	r3, [r7, #28]
}
 810b5fa:	4618      	mov	r0, r3
 810b5fc:	3720      	adds	r7, #32
 810b5fe:	46bd      	mov	sp, r7
 810b600:	bd80      	pop	{r7, pc}

0810b602 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810b602:	b580      	push	{r7, lr}
 810b604:	b088      	sub	sp, #32
 810b606:	af00      	add	r7, sp, #0
 810b608:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810b60a:	2300      	movs	r3, #0
 810b60c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810b60e:	2300      	movs	r3, #0
 810b610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810b612:	2300      	movs	r3, #0
 810b614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b616:	2300      	movs	r3, #0
 810b618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b61a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b61e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b620:	f107 0308 	add.w	r3, r7, #8
 810b624:	4619      	mov	r1, r3
 810b626:	6878      	ldr	r0, [r7, #4]
 810b628:	f7ff fef2 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810b62c:	6878      	ldr	r0, [r7, #4]
 810b62e:	f000 fb97 	bl	810bd60 <SDMMC_GetCmdError>
 810b632:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b634:	69fb      	ldr	r3, [r7, #28]
}
 810b636:	4618      	mov	r0, r3
 810b638:	3720      	adds	r7, #32
 810b63a:	46bd      	mov	sp, r7
 810b63c:	bd80      	pop	{r7, pc}

0810b63e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810b63e:	b580      	push	{r7, lr}
 810b640:	b088      	sub	sp, #32
 810b642:	af00      	add	r7, sp, #0
 810b644:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 810b646:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 810b64a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810b64c:	2308      	movs	r3, #8
 810b64e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b650:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b656:	2300      	movs	r3, #0
 810b658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b65a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b65e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b660:	f107 0308 	add.w	r3, r7, #8
 810b664:	4619      	mov	r1, r3
 810b666:	6878      	ldr	r0, [r7, #4]
 810b668:	f7ff fed2 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810b66c:	6878      	ldr	r0, [r7, #4]
 810b66e:	f000 fb29 	bl	810bcc4 <SDMMC_GetCmdResp7>
 810b672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b674:	69fb      	ldr	r3, [r7, #28]
}
 810b676:	4618      	mov	r0, r3
 810b678:	3720      	adds	r7, #32
 810b67a:	46bd      	mov	sp, r7
 810b67c:	bd80      	pop	{r7, pc}

0810b67e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810b67e:	b580      	push	{r7, lr}
 810b680:	b088      	sub	sp, #32
 810b682:	af00      	add	r7, sp, #0
 810b684:	6078      	str	r0, [r7, #4]
 810b686:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 810b688:	683b      	ldr	r3, [r7, #0]
 810b68a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 810b68c:	2337      	movs	r3, #55	@ 0x37
 810b68e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b696:	2300      	movs	r3, #0
 810b698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b69a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b69e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b6a0:	f107 0308 	add.w	r3, r7, #8
 810b6a4:	4619      	mov	r1, r3
 810b6a6:	6878      	ldr	r0, [r7, #4]
 810b6a8:	f7ff feb2 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 810b6ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 810b6b0:	2137      	movs	r1, #55	@ 0x37
 810b6b2:	6878      	ldr	r0, [r7, #4]
 810b6b4:	f000 f912 	bl	810b8dc <SDMMC_GetCmdResp1>
 810b6b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b6ba:	69fb      	ldr	r3, [r7, #28]
}
 810b6bc:	4618      	mov	r0, r3
 810b6be:	3720      	adds	r7, #32
 810b6c0:	46bd      	mov	sp, r7
 810b6c2:	bd80      	pop	{r7, pc}

0810b6c4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810b6c4:	b580      	push	{r7, lr}
 810b6c6:	b088      	sub	sp, #32
 810b6c8:	af00      	add	r7, sp, #0
 810b6ca:	6078      	str	r0, [r7, #4]
 810b6cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810b6ce:	683b      	ldr	r3, [r7, #0]
 810b6d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 810b6d2:	2329      	movs	r3, #41	@ 0x29
 810b6d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b6d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b6da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b6dc:	2300      	movs	r3, #0
 810b6de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b6e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b6e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b6e6:	f107 0308 	add.w	r3, r7, #8
 810b6ea:	4619      	mov	r1, r3
 810b6ec:	6878      	ldr	r0, [r7, #4]
 810b6ee:	f7ff fe8f 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810b6f2:	6878      	ldr	r0, [r7, #4]
 810b6f4:	f000 fa2e 	bl	810bb54 <SDMMC_GetCmdResp3>
 810b6f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b6fa:	69fb      	ldr	r3, [r7, #28]
}
 810b6fc:	4618      	mov	r0, r3
 810b6fe:	3720      	adds	r7, #32
 810b700:	46bd      	mov	sp, r7
 810b702:	bd80      	pop	{r7, pc}

0810b704 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 810b704:	b580      	push	{r7, lr}
 810b706:	b088      	sub	sp, #32
 810b708:	af00      	add	r7, sp, #0
 810b70a:	6078      	str	r0, [r7, #4]
 810b70c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810b70e:	683b      	ldr	r3, [r7, #0]
 810b710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 810b712:	2306      	movs	r3, #6
 810b714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b716:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b71a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b71c:	2300      	movs	r3, #0
 810b71e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b726:	f107 0308 	add.w	r3, r7, #8
 810b72a:	4619      	mov	r1, r3
 810b72c:	6878      	ldr	r0, [r7, #4]
 810b72e:	f7ff fe6f 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 810b732:	f241 3288 	movw	r2, #5000	@ 0x1388
 810b736:	2106      	movs	r1, #6
 810b738:	6878      	ldr	r0, [r7, #4]
 810b73a:	f000 f8cf 	bl	810b8dc <SDMMC_GetCmdResp1>
 810b73e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b740:	69fb      	ldr	r3, [r7, #28]
}
 810b742:	4618      	mov	r0, r3
 810b744:	3720      	adds	r7, #32
 810b746:	46bd      	mov	sp, r7
 810b748:	bd80      	pop	{r7, pc}

0810b74a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 810b74a:	b580      	push	{r7, lr}
 810b74c:	b088      	sub	sp, #32
 810b74e:	af00      	add	r7, sp, #0
 810b750:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 810b752:	2300      	movs	r3, #0
 810b754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 810b756:	2333      	movs	r3, #51	@ 0x33
 810b758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b75a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b75e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b760:	2300      	movs	r3, #0
 810b762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b768:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b76a:	f107 0308 	add.w	r3, r7, #8
 810b76e:	4619      	mov	r1, r3
 810b770:	6878      	ldr	r0, [r7, #4]
 810b772:	f7ff fe4d 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 810b776:	f241 3288 	movw	r2, #5000	@ 0x1388
 810b77a:	2133      	movs	r1, #51	@ 0x33
 810b77c:	6878      	ldr	r0, [r7, #4]
 810b77e:	f000 f8ad 	bl	810b8dc <SDMMC_GetCmdResp1>
 810b782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b784:	69fb      	ldr	r3, [r7, #28]
}
 810b786:	4618      	mov	r0, r3
 810b788:	3720      	adds	r7, #32
 810b78a:	46bd      	mov	sp, r7
 810b78c:	bd80      	pop	{r7, pc}

0810b78e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810b78e:	b580      	push	{r7, lr}
 810b790:	b088      	sub	sp, #32
 810b792:	af00      	add	r7, sp, #0
 810b794:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810b796:	2300      	movs	r3, #0
 810b798:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810b79a:	2302      	movs	r3, #2
 810b79c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810b79e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810b7a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b7a4:	2300      	movs	r3, #0
 810b7a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b7a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b7ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b7ae:	f107 0308 	add.w	r3, r7, #8
 810b7b2:	4619      	mov	r1, r3
 810b7b4:	6878      	ldr	r0, [r7, #4]
 810b7b6:	f7ff fe2b 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810b7ba:	6878      	ldr	r0, [r7, #4]
 810b7bc:	f000 f980 	bl	810bac0 <SDMMC_GetCmdResp2>
 810b7c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b7c2:	69fb      	ldr	r3, [r7, #28]
}
 810b7c4:	4618      	mov	r0, r3
 810b7c6:	3720      	adds	r7, #32
 810b7c8:	46bd      	mov	sp, r7
 810b7ca:	bd80      	pop	{r7, pc}

0810b7cc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810b7cc:	b580      	push	{r7, lr}
 810b7ce:	b088      	sub	sp, #32
 810b7d0:	af00      	add	r7, sp, #0
 810b7d2:	6078      	str	r0, [r7, #4]
 810b7d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810b7d6:	683b      	ldr	r3, [r7, #0]
 810b7d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810b7da:	2309      	movs	r3, #9
 810b7dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810b7de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810b7e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b7e4:	2300      	movs	r3, #0
 810b7e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b7e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b7ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b7ee:	f107 0308 	add.w	r3, r7, #8
 810b7f2:	4619      	mov	r1, r3
 810b7f4:	6878      	ldr	r0, [r7, #4]
 810b7f6:	f7ff fe0b 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810b7fa:	6878      	ldr	r0, [r7, #4]
 810b7fc:	f000 f960 	bl	810bac0 <SDMMC_GetCmdResp2>
 810b800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b802:	69fb      	ldr	r3, [r7, #28]
}
 810b804:	4618      	mov	r0, r3
 810b806:	3720      	adds	r7, #32
 810b808:	46bd      	mov	sp, r7
 810b80a:	bd80      	pop	{r7, pc}

0810b80c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810b80c:	b580      	push	{r7, lr}
 810b80e:	b088      	sub	sp, #32
 810b810:	af00      	add	r7, sp, #0
 810b812:	6078      	str	r0, [r7, #4]
 810b814:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810b816:	2300      	movs	r3, #0
 810b818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810b81a:	2303      	movs	r3, #3
 810b81c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b81e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b824:	2300      	movs	r3, #0
 810b826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b82c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b82e:	f107 0308 	add.w	r3, r7, #8
 810b832:	4619      	mov	r1, r3
 810b834:	6878      	ldr	r0, [r7, #4]
 810b836:	f7ff fdeb 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810b83a:	683a      	ldr	r2, [r7, #0]
 810b83c:	2103      	movs	r1, #3
 810b83e:	6878      	ldr	r0, [r7, #4]
 810b840:	f000 f9c8 	bl	810bbd4 <SDMMC_GetCmdResp6>
 810b844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b846:	69fb      	ldr	r3, [r7, #28]
}
 810b848:	4618      	mov	r0, r3
 810b84a:	3720      	adds	r7, #32
 810b84c:	46bd      	mov	sp, r7
 810b84e:	bd80      	pop	{r7, pc}

0810b850 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810b850:	b580      	push	{r7, lr}
 810b852:	b088      	sub	sp, #32
 810b854:	af00      	add	r7, sp, #0
 810b856:	6078      	str	r0, [r7, #4]
 810b858:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810b85a:	683b      	ldr	r3, [r7, #0]
 810b85c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810b85e:	230d      	movs	r3, #13
 810b860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b868:	2300      	movs	r3, #0
 810b86a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b86c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b870:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b872:	f107 0308 	add.w	r3, r7, #8
 810b876:	4619      	mov	r1, r3
 810b878:	6878      	ldr	r0, [r7, #4]
 810b87a:	f7ff fdc9 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810b87e:	f241 3288 	movw	r2, #5000	@ 0x1388
 810b882:	210d      	movs	r1, #13
 810b884:	6878      	ldr	r0, [r7, #4]
 810b886:	f000 f829 	bl	810b8dc <SDMMC_GetCmdResp1>
 810b88a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b88c:	69fb      	ldr	r3, [r7, #28]
}
 810b88e:	4618      	mov	r0, r3
 810b890:	3720      	adds	r7, #32
 810b892:	46bd      	mov	sp, r7
 810b894:	bd80      	pop	{r7, pc}

0810b896 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 810b896:	b580      	push	{r7, lr}
 810b898:	b088      	sub	sp, #32
 810b89a:	af00      	add	r7, sp, #0
 810b89c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810b89e:	2300      	movs	r3, #0
 810b8a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 810b8a2:	230d      	movs	r3, #13
 810b8a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810b8a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b8aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810b8ac:	2300      	movs	r3, #0
 810b8ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810b8b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b8b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810b8b6:	f107 0308 	add.w	r3, r7, #8
 810b8ba:	4619      	mov	r1, r3
 810b8bc:	6878      	ldr	r0, [r7, #4]
 810b8be:	f7ff fda7 	bl	810b410 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 810b8c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 810b8c6:	210d      	movs	r1, #13
 810b8c8:	6878      	ldr	r0, [r7, #4]
 810b8ca:	f000 f807 	bl	810b8dc <SDMMC_GetCmdResp1>
 810b8ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810b8d0:	69fb      	ldr	r3, [r7, #28]
}
 810b8d2:	4618      	mov	r0, r3
 810b8d4:	3720      	adds	r7, #32
 810b8d6:	46bd      	mov	sp, r7
 810b8d8:	bd80      	pop	{r7, pc}
	...

0810b8dc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810b8dc:	b580      	push	{r7, lr}
 810b8de:	b088      	sub	sp, #32
 810b8e0:	af00      	add	r7, sp, #0
 810b8e2:	60f8      	str	r0, [r7, #12]
 810b8e4:	460b      	mov	r3, r1
 810b8e6:	607a      	str	r2, [r7, #4]
 810b8e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810b8ea:	4b70      	ldr	r3, [pc, #448]	@ (810baac <SDMMC_GetCmdResp1+0x1d0>)
 810b8ec:	681b      	ldr	r3, [r3, #0]
 810b8ee:	4a70      	ldr	r2, [pc, #448]	@ (810bab0 <SDMMC_GetCmdResp1+0x1d4>)
 810b8f0:	fba2 2303 	umull	r2, r3, r2, r3
 810b8f4:	0a5a      	lsrs	r2, r3, #9
 810b8f6:	687b      	ldr	r3, [r7, #4]
 810b8f8:	fb02 f303 	mul.w	r3, r2, r3
 810b8fc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810b8fe:	69fb      	ldr	r3, [r7, #28]
 810b900:	1e5a      	subs	r2, r3, #1
 810b902:	61fa      	str	r2, [r7, #28]
 810b904:	2b00      	cmp	r3, #0
 810b906:	d102      	bne.n	810b90e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810b908:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810b90c:	e0c9      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810b90e:	68fb      	ldr	r3, [r7, #12]
 810b910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810b912:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810b914:	69ba      	ldr	r2, [r7, #24]
 810b916:	4b67      	ldr	r3, [pc, #412]	@ (810bab4 <SDMMC_GetCmdResp1+0x1d8>)
 810b918:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810b91a:	2b00      	cmp	r3, #0
 810b91c:	d0ef      	beq.n	810b8fe <SDMMC_GetCmdResp1+0x22>
 810b91e:	69bb      	ldr	r3, [r7, #24]
 810b920:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810b924:	2b00      	cmp	r3, #0
 810b926:	d1ea      	bne.n	810b8fe <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810b928:	68fb      	ldr	r3, [r7, #12]
 810b92a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810b92c:	f003 0304 	and.w	r3, r3, #4
 810b930:	2b00      	cmp	r3, #0
 810b932:	d004      	beq.n	810b93e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810b934:	68fb      	ldr	r3, [r7, #12]
 810b936:	2204      	movs	r2, #4
 810b938:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810b93a:	2304      	movs	r3, #4
 810b93c:	e0b1      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810b93e:	68fb      	ldr	r3, [r7, #12]
 810b940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810b942:	f003 0301 	and.w	r3, r3, #1
 810b946:	2b00      	cmp	r3, #0
 810b948:	d004      	beq.n	810b954 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810b94a:	68fb      	ldr	r3, [r7, #12]
 810b94c:	2201      	movs	r2, #1
 810b94e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810b950:	2301      	movs	r3, #1
 810b952:	e0a6      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810b954:	68fb      	ldr	r3, [r7, #12]
 810b956:	4a58      	ldr	r2, [pc, #352]	@ (810bab8 <SDMMC_GetCmdResp1+0x1dc>)
 810b958:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810b95a:	68f8      	ldr	r0, [r7, #12]
 810b95c:	f7ff fd82 	bl	810b464 <SDMMC_GetCommandResponse>
 810b960:	4603      	mov	r3, r0
 810b962:	461a      	mov	r2, r3
 810b964:	7afb      	ldrb	r3, [r7, #11]
 810b966:	4293      	cmp	r3, r2
 810b968:	d001      	beq.n	810b96e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810b96a:	2301      	movs	r3, #1
 810b96c:	e099      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810b96e:	2100      	movs	r1, #0
 810b970:	68f8      	ldr	r0, [r7, #12]
 810b972:	f7ff fd84 	bl	810b47e <SDMMC_GetResponse>
 810b976:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810b978:	697a      	ldr	r2, [r7, #20]
 810b97a:	4b50      	ldr	r3, [pc, #320]	@ (810babc <SDMMC_GetCmdResp1+0x1e0>)
 810b97c:	4013      	ands	r3, r2
 810b97e:	2b00      	cmp	r3, #0
 810b980:	d101      	bne.n	810b986 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810b982:	2300      	movs	r3, #0
 810b984:	e08d      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810b986:	697b      	ldr	r3, [r7, #20]
 810b988:	2b00      	cmp	r3, #0
 810b98a:	da02      	bge.n	810b992 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810b98c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810b990:	e087      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810b992:	697b      	ldr	r3, [r7, #20]
 810b994:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810b998:	2b00      	cmp	r3, #0
 810b99a:	d001      	beq.n	810b9a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810b99c:	2340      	movs	r3, #64	@ 0x40
 810b99e:	e080      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810b9a0:	697b      	ldr	r3, [r7, #20]
 810b9a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b9a6:	2b00      	cmp	r3, #0
 810b9a8:	d001      	beq.n	810b9ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810b9aa:	2380      	movs	r3, #128	@ 0x80
 810b9ac:	e079      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810b9ae:	697b      	ldr	r3, [r7, #20]
 810b9b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810b9b4:	2b00      	cmp	r3, #0
 810b9b6:	d002      	beq.n	810b9be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810b9b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810b9bc:	e071      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810b9be:	697b      	ldr	r3, [r7, #20]
 810b9c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b9c4:	2b00      	cmp	r3, #0
 810b9c6:	d002      	beq.n	810b9ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810b9c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810b9cc:	e069      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810b9ce:	697b      	ldr	r3, [r7, #20]
 810b9d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810b9d4:	2b00      	cmp	r3, #0
 810b9d6:	d002      	beq.n	810b9de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810b9d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810b9dc:	e061      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810b9de:	697b      	ldr	r3, [r7, #20]
 810b9e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810b9e4:	2b00      	cmp	r3, #0
 810b9e6:	d002      	beq.n	810b9ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810b9e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810b9ec:	e059      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810b9ee:	697b      	ldr	r3, [r7, #20]
 810b9f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810b9f4:	2b00      	cmp	r3, #0
 810b9f6:	d002      	beq.n	810b9fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810b9f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810b9fc:	e051      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810b9fe:	697b      	ldr	r3, [r7, #20]
 810ba00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810ba04:	2b00      	cmp	r3, #0
 810ba06:	d002      	beq.n	810ba0e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810ba08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810ba0c:	e049      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810ba0e:	697b      	ldr	r3, [r7, #20]
 810ba10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810ba14:	2b00      	cmp	r3, #0
 810ba16:	d002      	beq.n	810ba1e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810ba18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810ba1c:	e041      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810ba1e:	697b      	ldr	r3, [r7, #20]
 810ba20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810ba24:	2b00      	cmp	r3, #0
 810ba26:	d002      	beq.n	810ba2e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810ba28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810ba2c:	e039      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810ba2e:	697b      	ldr	r3, [r7, #20]
 810ba30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810ba34:	2b00      	cmp	r3, #0
 810ba36:	d002      	beq.n	810ba3e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810ba38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 810ba3c:	e031      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810ba3e:	697b      	ldr	r3, [r7, #20]
 810ba40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810ba44:	2b00      	cmp	r3, #0
 810ba46:	d002      	beq.n	810ba4e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810ba48:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 810ba4c:	e029      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810ba4e:	697b      	ldr	r3, [r7, #20]
 810ba50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810ba54:	2b00      	cmp	r3, #0
 810ba56:	d002      	beq.n	810ba5e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810ba58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810ba5c:	e021      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810ba5e:	697b      	ldr	r3, [r7, #20]
 810ba60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810ba64:	2b00      	cmp	r3, #0
 810ba66:	d002      	beq.n	810ba6e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810ba68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810ba6c:	e019      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810ba6e:	697b      	ldr	r3, [r7, #20]
 810ba70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810ba74:	2b00      	cmp	r3, #0
 810ba76:	d002      	beq.n	810ba7e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810ba78:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810ba7c:	e011      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810ba7e:	697b      	ldr	r3, [r7, #20]
 810ba80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810ba84:	2b00      	cmp	r3, #0
 810ba86:	d002      	beq.n	810ba8e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810ba88:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 810ba8c:	e009      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810ba8e:	697b      	ldr	r3, [r7, #20]
 810ba90:	f003 0308 	and.w	r3, r3, #8
 810ba94:	2b00      	cmp	r3, #0
 810ba96:	d002      	beq.n	810ba9e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810ba98:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 810ba9c:	e001      	b.n	810baa2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810ba9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810baa2:	4618      	mov	r0, r3
 810baa4:	3720      	adds	r7, #32
 810baa6:	46bd      	mov	sp, r7
 810baa8:	bd80      	pop	{r7, pc}
 810baaa:	bf00      	nop
 810baac:	10000000 	.word	0x10000000
 810bab0:	10624dd3 	.word	0x10624dd3
 810bab4:	00200045 	.word	0x00200045
 810bab8:	002000c5 	.word	0x002000c5
 810babc:	fdffe008 	.word	0xfdffe008

0810bac0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810bac0:	b480      	push	{r7}
 810bac2:	b085      	sub	sp, #20
 810bac4:	af00      	add	r7, sp, #0
 810bac6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810bac8:	4b1f      	ldr	r3, [pc, #124]	@ (810bb48 <SDMMC_GetCmdResp2+0x88>)
 810baca:	681b      	ldr	r3, [r3, #0]
 810bacc:	4a1f      	ldr	r2, [pc, #124]	@ (810bb4c <SDMMC_GetCmdResp2+0x8c>)
 810bace:	fba2 2303 	umull	r2, r3, r2, r3
 810bad2:	0a5b      	lsrs	r3, r3, #9
 810bad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bad8:	fb02 f303 	mul.w	r3, r2, r3
 810badc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810bade:	68fb      	ldr	r3, [r7, #12]
 810bae0:	1e5a      	subs	r2, r3, #1
 810bae2:	60fa      	str	r2, [r7, #12]
 810bae4:	2b00      	cmp	r3, #0
 810bae6:	d102      	bne.n	810baee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810bae8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810baec:	e026      	b.n	810bb3c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810baee:	687b      	ldr	r3, [r7, #4]
 810baf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810baf2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810baf4:	68bb      	ldr	r3, [r7, #8]
 810baf6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810bafa:	2b00      	cmp	r3, #0
 810bafc:	d0ef      	beq.n	810bade <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810bafe:	68bb      	ldr	r3, [r7, #8]
 810bb00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810bb04:	2b00      	cmp	r3, #0
 810bb06:	d1ea      	bne.n	810bade <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810bb08:	687b      	ldr	r3, [r7, #4]
 810bb0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bb0c:	f003 0304 	and.w	r3, r3, #4
 810bb10:	2b00      	cmp	r3, #0
 810bb12:	d004      	beq.n	810bb1e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810bb14:	687b      	ldr	r3, [r7, #4]
 810bb16:	2204      	movs	r2, #4
 810bb18:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810bb1a:	2304      	movs	r3, #4
 810bb1c:	e00e      	b.n	810bb3c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810bb1e:	687b      	ldr	r3, [r7, #4]
 810bb20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bb22:	f003 0301 	and.w	r3, r3, #1
 810bb26:	2b00      	cmp	r3, #0
 810bb28:	d004      	beq.n	810bb34 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810bb2a:	687b      	ldr	r3, [r7, #4]
 810bb2c:	2201      	movs	r2, #1
 810bb2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810bb30:	2301      	movs	r3, #1
 810bb32:	e003      	b.n	810bb3c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810bb34:	687b      	ldr	r3, [r7, #4]
 810bb36:	4a06      	ldr	r2, [pc, #24]	@ (810bb50 <SDMMC_GetCmdResp2+0x90>)
 810bb38:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810bb3a:	2300      	movs	r3, #0
}
 810bb3c:	4618      	mov	r0, r3
 810bb3e:	3714      	adds	r7, #20
 810bb40:	46bd      	mov	sp, r7
 810bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb46:	4770      	bx	lr
 810bb48:	10000000 	.word	0x10000000
 810bb4c:	10624dd3 	.word	0x10624dd3
 810bb50:	002000c5 	.word	0x002000c5

0810bb54 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810bb54:	b480      	push	{r7}
 810bb56:	b085      	sub	sp, #20
 810bb58:	af00      	add	r7, sp, #0
 810bb5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810bb5c:	4b1a      	ldr	r3, [pc, #104]	@ (810bbc8 <SDMMC_GetCmdResp3+0x74>)
 810bb5e:	681b      	ldr	r3, [r3, #0]
 810bb60:	4a1a      	ldr	r2, [pc, #104]	@ (810bbcc <SDMMC_GetCmdResp3+0x78>)
 810bb62:	fba2 2303 	umull	r2, r3, r2, r3
 810bb66:	0a5b      	lsrs	r3, r3, #9
 810bb68:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bb6c:	fb02 f303 	mul.w	r3, r2, r3
 810bb70:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810bb72:	68fb      	ldr	r3, [r7, #12]
 810bb74:	1e5a      	subs	r2, r3, #1
 810bb76:	60fa      	str	r2, [r7, #12]
 810bb78:	2b00      	cmp	r3, #0
 810bb7a:	d102      	bne.n	810bb82 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810bb7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810bb80:	e01b      	b.n	810bbba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810bb82:	687b      	ldr	r3, [r7, #4]
 810bb84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bb86:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810bb88:	68bb      	ldr	r3, [r7, #8]
 810bb8a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810bb8e:	2b00      	cmp	r3, #0
 810bb90:	d0ef      	beq.n	810bb72 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810bb92:	68bb      	ldr	r3, [r7, #8]
 810bb94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810bb98:	2b00      	cmp	r3, #0
 810bb9a:	d1ea      	bne.n	810bb72 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810bb9c:	687b      	ldr	r3, [r7, #4]
 810bb9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bba0:	f003 0304 	and.w	r3, r3, #4
 810bba4:	2b00      	cmp	r3, #0
 810bba6:	d004      	beq.n	810bbb2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810bba8:	687b      	ldr	r3, [r7, #4]
 810bbaa:	2204      	movs	r2, #4
 810bbac:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810bbae:	2304      	movs	r3, #4
 810bbb0:	e003      	b.n	810bbba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810bbb2:	687b      	ldr	r3, [r7, #4]
 810bbb4:	4a06      	ldr	r2, [pc, #24]	@ (810bbd0 <SDMMC_GetCmdResp3+0x7c>)
 810bbb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810bbb8:	2300      	movs	r3, #0
}
 810bbba:	4618      	mov	r0, r3
 810bbbc:	3714      	adds	r7, #20
 810bbbe:	46bd      	mov	sp, r7
 810bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbc4:	4770      	bx	lr
 810bbc6:	bf00      	nop
 810bbc8:	10000000 	.word	0x10000000
 810bbcc:	10624dd3 	.word	0x10624dd3
 810bbd0:	002000c5 	.word	0x002000c5

0810bbd4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810bbd4:	b580      	push	{r7, lr}
 810bbd6:	b088      	sub	sp, #32
 810bbd8:	af00      	add	r7, sp, #0
 810bbda:	60f8      	str	r0, [r7, #12]
 810bbdc:	460b      	mov	r3, r1
 810bbde:	607a      	str	r2, [r7, #4]
 810bbe0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810bbe2:	4b35      	ldr	r3, [pc, #212]	@ (810bcb8 <SDMMC_GetCmdResp6+0xe4>)
 810bbe4:	681b      	ldr	r3, [r3, #0]
 810bbe6:	4a35      	ldr	r2, [pc, #212]	@ (810bcbc <SDMMC_GetCmdResp6+0xe8>)
 810bbe8:	fba2 2303 	umull	r2, r3, r2, r3
 810bbec:	0a5b      	lsrs	r3, r3, #9
 810bbee:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bbf2:	fb02 f303 	mul.w	r3, r2, r3
 810bbf6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810bbf8:	69fb      	ldr	r3, [r7, #28]
 810bbfa:	1e5a      	subs	r2, r3, #1
 810bbfc:	61fa      	str	r2, [r7, #28]
 810bbfe:	2b00      	cmp	r3, #0
 810bc00:	d102      	bne.n	810bc08 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810bc02:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810bc06:	e052      	b.n	810bcae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 810bc08:	68fb      	ldr	r3, [r7, #12]
 810bc0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bc0c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810bc0e:	69bb      	ldr	r3, [r7, #24]
 810bc10:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810bc14:	2b00      	cmp	r3, #0
 810bc16:	d0ef      	beq.n	810bbf8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810bc18:	69bb      	ldr	r3, [r7, #24]
 810bc1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810bc1e:	2b00      	cmp	r3, #0
 810bc20:	d1ea      	bne.n	810bbf8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810bc22:	68fb      	ldr	r3, [r7, #12]
 810bc24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bc26:	f003 0304 	and.w	r3, r3, #4
 810bc2a:	2b00      	cmp	r3, #0
 810bc2c:	d004      	beq.n	810bc38 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810bc2e:	68fb      	ldr	r3, [r7, #12]
 810bc30:	2204      	movs	r2, #4
 810bc32:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810bc34:	2304      	movs	r3, #4
 810bc36:	e03a      	b.n	810bcae <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810bc38:	68fb      	ldr	r3, [r7, #12]
 810bc3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bc3c:	f003 0301 	and.w	r3, r3, #1
 810bc40:	2b00      	cmp	r3, #0
 810bc42:	d004      	beq.n	810bc4e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810bc44:	68fb      	ldr	r3, [r7, #12]
 810bc46:	2201      	movs	r2, #1
 810bc48:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810bc4a:	2301      	movs	r3, #1
 810bc4c:	e02f      	b.n	810bcae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810bc4e:	68f8      	ldr	r0, [r7, #12]
 810bc50:	f7ff fc08 	bl	810b464 <SDMMC_GetCommandResponse>
 810bc54:	4603      	mov	r3, r0
 810bc56:	461a      	mov	r2, r3
 810bc58:	7afb      	ldrb	r3, [r7, #11]
 810bc5a:	4293      	cmp	r3, r2
 810bc5c:	d001      	beq.n	810bc62 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810bc5e:	2301      	movs	r3, #1
 810bc60:	e025      	b.n	810bcae <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810bc62:	68fb      	ldr	r3, [r7, #12]
 810bc64:	4a16      	ldr	r2, [pc, #88]	@ (810bcc0 <SDMMC_GetCmdResp6+0xec>)
 810bc66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810bc68:	2100      	movs	r1, #0
 810bc6a:	68f8      	ldr	r0, [r7, #12]
 810bc6c:	f7ff fc07 	bl	810b47e <SDMMC_GetResponse>
 810bc70:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810bc72:	697b      	ldr	r3, [r7, #20]
 810bc74:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 810bc78:	2b00      	cmp	r3, #0
 810bc7a:	d106      	bne.n	810bc8a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 810bc7c:	697b      	ldr	r3, [r7, #20]
 810bc7e:	0c1b      	lsrs	r3, r3, #16
 810bc80:	b29a      	uxth	r2, r3
 810bc82:	687b      	ldr	r3, [r7, #4]
 810bc84:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810bc86:	2300      	movs	r3, #0
 810bc88:	e011      	b.n	810bcae <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810bc8a:	697b      	ldr	r3, [r7, #20]
 810bc8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810bc90:	2b00      	cmp	r3, #0
 810bc92:	d002      	beq.n	810bc9a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810bc94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810bc98:	e009      	b.n	810bcae <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810bc9a:	697b      	ldr	r3, [r7, #20]
 810bc9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810bca0:	2b00      	cmp	r3, #0
 810bca2:	d002      	beq.n	810bcaa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810bca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bca8:	e001      	b.n	810bcae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810bcaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810bcae:	4618      	mov	r0, r3
 810bcb0:	3720      	adds	r7, #32
 810bcb2:	46bd      	mov	sp, r7
 810bcb4:	bd80      	pop	{r7, pc}
 810bcb6:	bf00      	nop
 810bcb8:	10000000 	.word	0x10000000
 810bcbc:	10624dd3 	.word	0x10624dd3
 810bcc0:	002000c5 	.word	0x002000c5

0810bcc4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810bcc4:	b480      	push	{r7}
 810bcc6:	b085      	sub	sp, #20
 810bcc8:	af00      	add	r7, sp, #0
 810bcca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810bccc:	4b22      	ldr	r3, [pc, #136]	@ (810bd58 <SDMMC_GetCmdResp7+0x94>)
 810bcce:	681b      	ldr	r3, [r3, #0]
 810bcd0:	4a22      	ldr	r2, [pc, #136]	@ (810bd5c <SDMMC_GetCmdResp7+0x98>)
 810bcd2:	fba2 2303 	umull	r2, r3, r2, r3
 810bcd6:	0a5b      	lsrs	r3, r3, #9
 810bcd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bcdc:	fb02 f303 	mul.w	r3, r2, r3
 810bce0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810bce2:	68fb      	ldr	r3, [r7, #12]
 810bce4:	1e5a      	subs	r2, r3, #1
 810bce6:	60fa      	str	r2, [r7, #12]
 810bce8:	2b00      	cmp	r3, #0
 810bcea:	d102      	bne.n	810bcf2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810bcec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810bcf0:	e02c      	b.n	810bd4c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810bcf2:	687b      	ldr	r3, [r7, #4]
 810bcf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bcf6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810bcf8:	68bb      	ldr	r3, [r7, #8]
 810bcfa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810bcfe:	2b00      	cmp	r3, #0
 810bd00:	d0ef      	beq.n	810bce2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810bd02:	68bb      	ldr	r3, [r7, #8]
 810bd04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810bd08:	2b00      	cmp	r3, #0
 810bd0a:	d1ea      	bne.n	810bce2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810bd0c:	687b      	ldr	r3, [r7, #4]
 810bd0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bd10:	f003 0304 	and.w	r3, r3, #4
 810bd14:	2b00      	cmp	r3, #0
 810bd16:	d004      	beq.n	810bd22 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810bd18:	687b      	ldr	r3, [r7, #4]
 810bd1a:	2204      	movs	r2, #4
 810bd1c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810bd1e:	2304      	movs	r3, #4
 810bd20:	e014      	b.n	810bd4c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810bd22:	687b      	ldr	r3, [r7, #4]
 810bd24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bd26:	f003 0301 	and.w	r3, r3, #1
 810bd2a:	2b00      	cmp	r3, #0
 810bd2c:	d004      	beq.n	810bd38 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810bd2e:	687b      	ldr	r3, [r7, #4]
 810bd30:	2201      	movs	r2, #1
 810bd32:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810bd34:	2301      	movs	r3, #1
 810bd36:	e009      	b.n	810bd4c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 810bd38:	687b      	ldr	r3, [r7, #4]
 810bd3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bd3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810bd40:	2b00      	cmp	r3, #0
 810bd42:	d002      	beq.n	810bd4a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 810bd44:	687b      	ldr	r3, [r7, #4]
 810bd46:	2240      	movs	r2, #64	@ 0x40
 810bd48:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810bd4a:	2300      	movs	r3, #0

}
 810bd4c:	4618      	mov	r0, r3
 810bd4e:	3714      	adds	r7, #20
 810bd50:	46bd      	mov	sp, r7
 810bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd56:	4770      	bx	lr
 810bd58:	10000000 	.word	0x10000000
 810bd5c:	10624dd3 	.word	0x10624dd3

0810bd60 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810bd60:	b480      	push	{r7}
 810bd62:	b085      	sub	sp, #20
 810bd64:	af00      	add	r7, sp, #0
 810bd66:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810bd68:	4b11      	ldr	r3, [pc, #68]	@ (810bdb0 <SDMMC_GetCmdError+0x50>)
 810bd6a:	681b      	ldr	r3, [r3, #0]
 810bd6c:	4a11      	ldr	r2, [pc, #68]	@ (810bdb4 <SDMMC_GetCmdError+0x54>)
 810bd6e:	fba2 2303 	umull	r2, r3, r2, r3
 810bd72:	0a5b      	lsrs	r3, r3, #9
 810bd74:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bd78:	fb02 f303 	mul.w	r3, r2, r3
 810bd7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810bd7e:	68fb      	ldr	r3, [r7, #12]
 810bd80:	1e5a      	subs	r2, r3, #1
 810bd82:	60fa      	str	r2, [r7, #12]
 810bd84:	2b00      	cmp	r3, #0
 810bd86:	d102      	bne.n	810bd8e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810bd88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810bd8c:	e009      	b.n	810bda2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810bd8e:	687b      	ldr	r3, [r7, #4]
 810bd90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bd92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bd96:	2b00      	cmp	r3, #0
 810bd98:	d0f1      	beq.n	810bd7e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810bd9a:	687b      	ldr	r3, [r7, #4]
 810bd9c:	4a06      	ldr	r2, [pc, #24]	@ (810bdb8 <SDMMC_GetCmdError+0x58>)
 810bd9e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 810bda0:	2300      	movs	r3, #0
}
 810bda2:	4618      	mov	r0, r3
 810bda4:	3714      	adds	r7, #20
 810bda6:	46bd      	mov	sp, r7
 810bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bdac:	4770      	bx	lr
 810bdae:	bf00      	nop
 810bdb0:	10000000 	.word	0x10000000
 810bdb4:	10624dd3 	.word	0x10624dd3
 810bdb8:	002000c5 	.word	0x002000c5

0810bdbc <memset>:
 810bdbc:	4402      	add	r2, r0
 810bdbe:	4603      	mov	r3, r0
 810bdc0:	4293      	cmp	r3, r2
 810bdc2:	d100      	bne.n	810bdc6 <memset+0xa>
 810bdc4:	4770      	bx	lr
 810bdc6:	f803 1b01 	strb.w	r1, [r3], #1
 810bdca:	e7f9      	b.n	810bdc0 <memset+0x4>

0810bdcc <__libc_init_array>:
 810bdcc:	b570      	push	{r4, r5, r6, lr}
 810bdce:	4d0d      	ldr	r5, [pc, #52]	@ (810be04 <__libc_init_array+0x38>)
 810bdd0:	4c0d      	ldr	r4, [pc, #52]	@ (810be08 <__libc_init_array+0x3c>)
 810bdd2:	1b64      	subs	r4, r4, r5
 810bdd4:	10a4      	asrs	r4, r4, #2
 810bdd6:	2600      	movs	r6, #0
 810bdd8:	42a6      	cmp	r6, r4
 810bdda:	d109      	bne.n	810bdf0 <__libc_init_array+0x24>
 810bddc:	4d0b      	ldr	r5, [pc, #44]	@ (810be0c <__libc_init_array+0x40>)
 810bdde:	4c0c      	ldr	r4, [pc, #48]	@ (810be10 <__libc_init_array+0x44>)
 810bde0:	f000 f818 	bl	810be14 <_init>
 810bde4:	1b64      	subs	r4, r4, r5
 810bde6:	10a4      	asrs	r4, r4, #2
 810bde8:	2600      	movs	r6, #0
 810bdea:	42a6      	cmp	r6, r4
 810bdec:	d105      	bne.n	810bdfa <__libc_init_array+0x2e>
 810bdee:	bd70      	pop	{r4, r5, r6, pc}
 810bdf0:	f855 3b04 	ldr.w	r3, [r5], #4
 810bdf4:	4798      	blx	r3
 810bdf6:	3601      	adds	r6, #1
 810bdf8:	e7ee      	b.n	810bdd8 <__libc_init_array+0xc>
 810bdfa:	f855 3b04 	ldr.w	r3, [r5], #4
 810bdfe:	4798      	blx	r3
 810be00:	3601      	adds	r6, #1
 810be02:	e7f2      	b.n	810bdea <__libc_init_array+0x1e>
 810be04:	0810be74 	.word	0x0810be74
 810be08:	0810be74 	.word	0x0810be74
 810be0c:	0810be74 	.word	0x0810be74
 810be10:	0810be78 	.word	0x0810be78

0810be14 <_init>:
 810be14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810be16:	bf00      	nop
 810be18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810be1a:	bc08      	pop	{r3}
 810be1c:	469e      	mov	lr, r3
 810be1e:	4770      	bx	lr

0810be20 <_fini>:
 810be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810be22:	bf00      	nop
 810be24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810be26:	bc08      	pop	{r3}
 810be28:	469e      	mov	lr, r3
 810be2a:	4770      	bx	lr
