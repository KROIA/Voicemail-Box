
CodecTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a38  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08011bf8  08011bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ca8  08011ca8  00013080  2**0
                  CONTENTS
  4 .ARM          00000008  08011ca8  08011ca8  00012ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011cb0  08011cb0  00013080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011cb0  08011cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011cb4  08011cb4  00012cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08011cb8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013080  2**0
                  CONTENTS
 10 .bss          000091c4  20000080  20000080  00013080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20009244  20009244  00013080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003478d  00000000  00000000  000130b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007551  00000000  00000000  0004783d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b30  00000000  00000000  0004ed90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002161  00000000  00000000  000518c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034ff4  00000000  00000000  00053a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a1f4  00000000  00000000  00088a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f511  00000000  00000000  000c2c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001e211a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ba9c  00000000  00000000  001e2160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  001edbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011be0 	.word	0x08011be0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	08011be0 	.word	0x08011be0

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	@ (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	@ (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	@ 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	2000009c 	.word	0x2000009c
 8000554:	200000f4 	.word	0x200000f4

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f001 fbd3 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f83b 	bl	80005dc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000566:	f000 f8ab 	bl	80006c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 fc8b 	bl	8000e84 <MX_GPIO_Init>
  MX_DMA_Init();
 800056e:	f000 fc19 	bl	8000da4 <MX_DMA_Init>
  MX_CRC_Init();
 8000572:	f000 f8cf 	bl	8000714 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000576:	f000 f8e1 	bl	800073c <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800057a:	f000 f911 	bl	80007a0 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800057e:	f000 fc31 	bl	8000de4 <MX_FMC_Init>
  MX_I2C1_Init();
 8000582:	f000 fa0d 	bl	80009a0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000586:	f000 fa39 	bl	80009fc <MX_I2C2_Init>
  MX_LTDC_Init();
 800058a:	f000 fa65 	bl	8000a58 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800058e:	f000 fae1 	bl	8000b54 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000592:	f000 fb0b 	bl	8000bac <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8000596:	f000 fb3f 	bl	8000c18 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 800059a:	f000 fb5f 	bl	8000c5c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800059e:	f000 fbad 	bl	8000cfc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80005a2:	f000 fbd5 	bl	8000d50 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80005a6:	f00b fe25 	bl	800c1f4 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <main+0x7c>)
 80005ac:	1d3c      	adds	r4, r7, #4
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f00e fbed 	bl	800eda0 <osThreadCreate>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a03      	ldr	r2, [pc, #12]	@ (80005d8 <main+0x80>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005cc:	f00e fbc5 	bl	800ed5a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <main+0x78>
 80005d4:	08011c04 	.word	0x08011c04
 80005d8:	2000076c 	.word	0x2000076c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2234      	movs	r2, #52	@ 0x34
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f011 fa5c 	bl	8011aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b2c      	ldr	r3, [pc, #176]	@ (80006b8 <SystemClock_Config+0xdc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a2b      	ldr	r2, [pc, #172]	@ (80006b8 <SystemClock_Config+0xdc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000610:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <SystemClock_Config+0xdc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <SystemClock_Config+0xe0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a25      	ldr	r2, [pc, #148]	@ (80006bc <SystemClock_Config+0xe0>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <SystemClock_Config+0xe0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000640:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800064a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000650:	23b4      	movs	r3, #180	@ 0xb4
 8000652:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000658:	2306      	movs	r3, #6
 800065a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 800065c:	2306      	movs	r3, #6
 800065e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4618      	mov	r0, r3
 8000666:	f006 fe15 	bl	8007294 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000670:	f000 fdb0 	bl	80011d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000674:	f006 f86c 	bl	8006750 <HAL_PWREx_EnableOverDrive>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800067e:	f000 fda9 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000698:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2105      	movs	r1, #5
 80006a0:	4618      	mov	r0, r3
 80006a2:	f006 f967 	bl	8006974 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006ac:	f000 fd92 	bl	80011d4 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	@ 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b090      	sub	sp, #64	@ 0x40
 80006c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	223c      	movs	r2, #60	@ 0x3c
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f011 f9eb 	bl	8011aa8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 80006d2:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 80006d6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 80006d8:	2390      	movs	r3, #144	@ 0x90
 80006da:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 80006e4:	2306      	movs	r3, #6
 80006e6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80006f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80006f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80006f6:	2300      	movs	r3, #0
 80006f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4618      	mov	r0, r3
 80006fe:	f006 fb8b 	bl	8006e18 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000708:	f000 fd64 	bl	80011d4 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3740      	adds	r7, #64	@ 0x40
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_CRC_Init+0x20>)
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <MX_CRC_Init+0x24>)
 800071c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_CRC_Init+0x20>)
 8000720:	f001 fc3a 	bl	8001f98 <HAL_CRC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800072a:	f000 fd53 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200002f4 	.word	0x200002f4
 8000738:	40023000 	.word	0x40023000

0800073c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_DMA2D_Init+0x5c>)
 8000742:	4a16      	ldr	r2, [pc, #88]	@ (800079c <MX_DMA2D_Init+0x60>)
 8000744:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_DMA2D_Init+0x5c>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_DMA2D_Init+0x5c>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_DMA2D_Init+0x5c>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_DMA2D_Init+0x5c>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_DMA2D_Init+0x5c>)
 8000760:	2200      	movs	r2, #0
 8000762:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_DMA2D_Init+0x5c>)
 8000766:	2200      	movs	r2, #0
 8000768:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_DMA2D_Init+0x5c>)
 800076c:	2200      	movs	r2, #0
 800076e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000770:	4809      	ldr	r0, [pc, #36]	@ (8000798 <MX_DMA2D_Init+0x5c>)
 8000772:	f002 f83b 	bl	80027ec <HAL_DMA2D_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800077c:	f000 fd2a 	bl	80011d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000780:	2101      	movs	r1, #1
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_DMA2D_Init+0x5c>)
 8000784:	f002 f98c 	bl	8002aa0 <HAL_DMA2D_ConfigLayer>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800078e:	f000 fd21 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200002fc 	.word	0x200002fc
 800079c:	4002b000 	.word	0x4002b000

080007a0 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0aa      	sub	sp, #168	@ 0xa8
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80007a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80007b2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80007b6:	2224      	movs	r2, #36	@ 0x24
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f011 f974 	bl	8011aa8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80007c0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80007d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007d6:	2234      	movs	r2, #52	@ 0x34
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f011 f964 	bl	8011aa8 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	222c      	movs	r2, #44	@ 0x2c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f011 f95e 	bl	8011aa8 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80007ec:	4b6a      	ldr	r3, [pc, #424]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 80007ee:	4a6b      	ldr	r2, [pc, #428]	@ (800099c <MX_DSIHOST_DSI_Init+0x1fc>)
 80007f0:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80007f2:	4b69      	ldr	r3, [pc, #420]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80007f8:	4b67      	ldr	r3, [pc, #412]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80007fe:	4b66      	ldr	r3, [pc, #408]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000800:	2201      	movs	r2, #1
 8000802:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000804:	237d      	movs	r3, #125	@ 0x7d
 8000806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 800080a:	2302      	movs	r3, #2
 800080c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000816:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800081a:	4619      	mov	r1, r3
 800081c:	485e      	ldr	r0, [pc, #376]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 800081e:	f002 f9d1 	bl	8002bc4 <HAL_DSI_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000828:	f000 fcd4 	bl	80011d4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800082c:	2301      	movs	r3, #1
 800082e:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800085e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000862:	4619      	mov	r1, r3
 8000864:	484c      	ldr	r0, [pc, #304]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000866:	f002 fec1 	bl	80035ec <HAL_DSI_ConfigHostTimeouts>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000870:	f000 fcb0 	bl	80011d4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000874:	231c      	movs	r3, #28
 8000876:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000878:	2321      	movs	r3, #33	@ 0x21
 800087a:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800087c:	230f      	movs	r3, #15
 800087e:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000880:	2319      	movs	r3, #25
 8000882:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8000888:	230a      	movs	r3, #10
 800088a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800088c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000890:	4619      	mov	r1, r3
 8000892:	4841      	ldr	r0, [pc, #260]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000894:	f002 fe40 	bl	8003518 <HAL_DSI_ConfigPhyTimer>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800089e:	f000 fc99 	bl	80011d4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80008a2:	2104      	movs	r1, #4
 80008a4:	483c      	ldr	r0, [pc, #240]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008a6:	f002 fe0f 	bl	80034c8 <HAL_DSI_ConfigFlowControl>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80008b0:	f000 fc90 	bl	80011d4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80008b4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80008b8:	4837      	ldr	r0, [pc, #220]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008ba:	f002 ff5d 	bl	8003778 <HAL_DSI_SetLowPowerRXFilter>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80008c4:	f000 fc86 	bl	80011d4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	4833      	ldr	r0, [pc, #204]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008cc:	f002 fafa 	bl	8002ec4 <HAL_DSI_ConfigErrorMonitor>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80008d6:	f000 fc7d 	bl	80011d4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 80008da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80008e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008e4:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 80008e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ea:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80008ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 80008f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80008f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fc:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 80008fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000902:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000904:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000908:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800090a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800090e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000910:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000914:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000916:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800091a:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800091c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000920:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000926:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800092a:	4619      	mov	r1, r3
 800092c:	481a      	ldr	r0, [pc, #104]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 800092e:	f002 fd6d 	bl	800340c <HAL_DSI_ConfigCommand>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000938:	f000 fc4c 	bl	80011d4 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000940:	2305      	movs	r3, #5
 8000942:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000944:	23c8      	movs	r3, #200	@ 0xc8
 8000946:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000948:	2310      	movs	r3, #16
 800094a:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000950:	2304      	movs	r3, #4
 8000952:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000960:	2340      	movs	r3, #64	@ 0x40
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	480a      	ldr	r0, [pc, #40]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 800096e:	f002 fc75 	bl	800325c <HAL_DSI_ConfigAdaptedCommandMode>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000978:	f000 fc2c 	bl	80011d4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	4806      	ldr	r0, [pc, #24]	@ (8000998 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000980:	f002 fc44 	bl	800320c <HAL_DSI_SetGenericVCID>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 800098a:	f000 fc23 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	37a8      	adds	r7, #168	@ 0xa8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000033c 	.word	0x2000033c
 800099c:	40016c00 	.word	0x40016c00

080009a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009a6:	4a13      	ldr	r2, [pc, #76]	@ (80009f4 <MX_I2C1_Init+0x54>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009ac:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <MX_I2C1_Init+0x58>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_I2C1_Init+0x50>)
 80009de:	f005 fa0b 	bl	8005df8 <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 fbf4 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000358 	.word	0x20000358
 80009f4:	40005400 	.word	0x40005400
 80009f8:	000186a0 	.word	0x000186a0

080009fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_I2C2_Init+0x50>)
 8000a02:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <MX_I2C2_Init+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_I2C2_Init+0x50>)
 8000a08:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <MX_I2C2_Init+0x58>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_I2C2_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_I2C2_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_I2C2_Init+0x50>)
 8000a1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <MX_I2C2_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_I2C2_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <MX_I2C2_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_I2C2_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_I2C2_Init+0x50>)
 8000a3a:	f005 f9dd 	bl	8005df8 <HAL_I2C_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 fbc6 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200003ac 	.word	0x200003ac
 8000a50:	40005800 	.word	0x40005800
 8000a54:	000186a0 	.word	0x000186a0

08000a58 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	@ 0x38
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2234      	movs	r2, #52	@ 0x34
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f011 f81f 	bl	8011aa8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a6a:	4b38      	ldr	r3, [pc, #224]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000a6c:	4a38      	ldr	r2, [pc, #224]	@ (8000b50 <MX_LTDC_Init+0xf8>)
 8000a6e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a70:	4b36      	ldr	r3, [pc, #216]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a76:	4b35      	ldr	r3, [pc, #212]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a7c:	4b33      	ldr	r3, [pc, #204]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a82:	4b32      	ldr	r3, [pc, #200]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000a88:	4b30      	ldr	r3, [pc, #192]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000a94:	4b2d      	ldr	r3, [pc, #180]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000aa2:	22c9      	movs	r2, #201	@ 0xc9
 8000aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000aa6:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000aa8:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000aac:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8000aae:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000ab0:	22ca      	movs	r2, #202	@ 0xca
 8000ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000ab4:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000ab6:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000aba:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000abc:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ad4:	481d      	ldr	r0, [pc, #116]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000ad6:	f005 fad3 	bl	8006080 <HAL_LTDC_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000ae0:	f000 fb78 	bl	80011d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000ae8:	23c8      	movs	r3, #200	@ 0xc8
 8000aea:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000af0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000af4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000af6:	2302      	movs	r3, #2
 8000af8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000afa:	23ff      	movs	r3, #255	@ 0xff
 8000afc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b02:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b06:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b0c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000b12:	23c8      	movs	r3, #200	@ 0xc8
 8000b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000b16:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_LTDC_Init+0xf4>)
 8000b36:	f005 fc35 	bl	80063a4 <HAL_LTDC_ConfigLayer>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000b40:	f000 fb48 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3738      	adds	r7, #56	@ 0x38
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000400 	.word	0x20000400
 8000b50:	40016800 	.word	0x40016800

08000b54 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ba8 <MX_QUADSPI_Init+0x54>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b72:	2218      	movs	r2, #24
 8000b74:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b7c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_QUADSPI_Init+0x50>)
 8000b92:	f005 fe2d 	bl	80067f0 <HAL_QSPI_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000b9c:	f000 fb1a 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200004a8 	.word	0x200004a8
 8000ba8:	a0001000 	.word	0xa0001000

08000bac <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000bb2:	4a18      	ldr	r2, [pc, #96]	@ (8000c14 <MX_SAI1_Init+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000bdc:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000be0:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_SAI1_Init+0x64>)
 8000bfc:	f006 fdce 	bl	800779c <HAL_SAI_InitProtocol>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000c06:	f000 fae5 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200004f4 	.word	0x200004f4
 8000c14:	40015804 	.word	0x40015804

08000c18 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <MX_SDIO_SD_Init+0x3c>)
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c58 <MX_SDIO_SD_Init+0x40>)
 8000c20:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <MX_SDIO_SD_Init+0x3c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <MX_SDIO_SD_Init+0x3c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <MX_SDIO_SD_Init+0x3c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <MX_SDIO_SD_Init+0x3c>)
 8000c36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c3a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <MX_SDIO_SD_Init+0x3c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000c42:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <MX_SDIO_SD_Init+0x3c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	200005dc 	.word	0x200005dc
 8000c58:	40012c00 	.word	0x40012c00

08000c5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf8 <MX_TIM1_Init+0x9c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c98:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ca4:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000ca6:	f008 fbe2 	bl	800946e <HAL_TIM_Base_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cb0:	f000 fa90 	bl	80011d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000cc2:	f008 fd83 	bl	80097cc <HAL_TIM_ConfigClockSource>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ccc:	f000 fa82 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_TIM1_Init+0x98>)
 8000cde:	f008 ffab 	bl	8009c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ce8:	f000 fa74 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000660 	.word	0x20000660
 8000cf8:	40010000 	.word	0x40010000

08000cfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <MX_USART3_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d34:	f009 f810 	bl	8009d58 <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d3e:	f000 fa49 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200006a8 	.word	0x200006a8
 8000d4c:	40004800 	.word	0x40004800

08000d50 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <MX_USART6_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_USART6_UART_Init+0x4c>)
 8000d88:	f008 ffe6 	bl	8009d58 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f000 fa1f 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200006f0 	.word	0x200006f0
 8000da0:	40011400 	.word	0x40011400

08000da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_DMA_Init+0x3c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a0b      	ldr	r2, [pc, #44]	@ (8000de0 <MX_DMA_Init+0x3c>)
 8000db4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_DMA_Init+0x3c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2105      	movs	r1, #5
 8000dca:	2039      	movs	r0, #57	@ 0x39
 8000dcc:	f001 f8ba 	bl	8001f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000dd0:	2039      	movs	r0, #57	@ 0x39
 8000dd2:	f001 f8d3 	bl	8001f7c <HAL_NVIC_EnableIRQ>

}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000dfe:	4a20      	ldr	r2, [pc, #128]	@ (8000e80 <MX_FMC_Init+0x9c>)
 8000e00:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000e02:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e14:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000e16:	2220      	movs	r2, #32
 8000e18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000e1c:	2240      	movs	r2, #64	@ 0x40
 8000e1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000e22:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000e26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000e30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e34:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000e38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000e50:	2307      	movs	r3, #7
 8000e52:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000e54:	2303      	movs	r3, #3
 8000e56:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <MX_FMC_Init+0x98>)
 8000e66:	f008 face 	bl	8009406 <HAL_SDRAM_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000e70:	f000 f9b0 	bl	80011d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000738 	.word	0x20000738
 8000e80:	a0000140 	.word	0xa0000140

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b090      	sub	sp, #64	@ 0x40
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e9e:	4bae      	ldr	r3, [pc, #696]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4aad      	ldr	r2, [pc, #692]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000ea4:	f043 0310 	orr.w	r3, r3, #16
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4bab      	ldr	r3, [pc, #684]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0310 	and.w	r3, r3, #16
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eba:	4ba7      	ldr	r3, [pc, #668]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4aa6      	ldr	r2, [pc, #664]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4ba4      	ldr	r3, [pc, #656]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
 8000ed6:	4ba0      	ldr	r3, [pc, #640]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a9f      	ldr	r2, [pc, #636]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b9d      	ldr	r3, [pc, #628]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	4b99      	ldr	r3, [pc, #612]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a98      	ldr	r2, [pc, #608]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b96      	ldr	r3, [pc, #600]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
 8000f0e:	4b92      	ldr	r3, [pc, #584]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a91      	ldr	r2, [pc, #580]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b8f      	ldr	r3, [pc, #572]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a8a      	ldr	r2, [pc, #552]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b88      	ldr	r3, [pc, #544]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b84      	ldr	r3, [pc, #528]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a83      	ldr	r2, [pc, #524]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b81      	ldr	r3, [pc, #516]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b7d      	ldr	r3, [pc, #500]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a7c      	ldr	r2, [pc, #496]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0320 	and.w	r3, r3, #32
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b76      	ldr	r3, [pc, #472]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a75      	ldr	r2, [pc, #468]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b73      	ldr	r3, [pc, #460]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b6c      	ldr	r3, [pc, #432]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b68      	ldr	r3, [pc, #416]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a67      	ldr	r2, [pc, #412]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000fbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b65      	ldr	r3, [pc, #404]	@ (8001158 <MX_GPIO_Init+0x2d4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	210c      	movs	r1, #12
 8000fd2:	4862      	ldr	r0, [pc, #392]	@ (800115c <MX_GPIO_Init+0x2d8>)
 8000fd4:	f002 fdc2 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2130      	movs	r1, #48	@ 0x30
 8000fdc:	4860      	ldr	r0, [pc, #384]	@ (8001160 <MX_GPIO_Init+0x2dc>)
 8000fde:	f002 fdbd 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	485f      	ldr	r0, [pc, #380]	@ (8001164 <MX_GPIO_Init+0x2e0>)
 8000fe8:	f002 fdb8 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2140      	movs	r1, #64	@ 0x40
 8000ff0:	485d      	ldr	r0, [pc, #372]	@ (8001168 <MX_GPIO_Init+0x2e4>)
 8000ff2:	f002 fdb3 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2105      	movs	r1, #5
 8000ffa:	485c      	ldr	r0, [pc, #368]	@ (800116c <MX_GPIO_Init+0x2e8>)
 8000ffc:	f002 fdae 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2180      	movs	r1, #128	@ 0x80
 8001004:	485a      	ldr	r0, [pc, #360]	@ (8001170 <MX_GPIO_Init+0x2ec>)
 8001006:	f002 fda9 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2108      	movs	r1, #8
 800100e:	4859      	ldr	r0, [pc, #356]	@ (8001174 <MX_GPIO_Init+0x2f0>)
 8001010:	f002 fda4 	bl	8003b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8001014:	230c      	movs	r3, #12
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001028:	4619      	mov	r1, r3
 800102a:	484c      	ldr	r0, [pc, #304]	@ (800115c <MX_GPIO_Init+0x2d8>)
 800102c:	f002 fbd2 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8001030:	2308      	movs	r3, #8
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001040:	2306      	movs	r3, #6
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001048:	4619      	mov	r1, r3
 800104a:	4848      	ldr	r0, [pc, #288]	@ (800116c <MX_GPIO_Init+0x2e8>)
 800104c:	f002 fbc2 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001054:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001058:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001062:	4619      	mov	r1, r3
 8001064:	4841      	ldr	r0, [pc, #260]	@ (800116c <MX_GPIO_Init+0x2e8>)
 8001066:	f002 fbb5 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800106a:	2330      	movs	r3, #48	@ 0x30
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800106e:	2311      	movs	r3, #17
 8001070:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800107e:	4619      	mov	r1, r3
 8001080:	4837      	ldr	r0, [pc, #220]	@ (8001160 <MX_GPIO_Init+0x2dc>)
 8001082:	f002 fba7 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001086:	2308      	movs	r3, #8
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800108a:	2311      	movs	r3, #17
 800108c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800109a:	4619      	mov	r1, r3
 800109c:	4831      	ldr	r0, [pc, #196]	@ (8001164 <MX_GPIO_Init+0x2e0>)
 800109e:	f002 fb99 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80010a2:	2340      	movs	r3, #64	@ 0x40
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010a6:	2311      	movs	r3, #17
 80010a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b6:	4619      	mov	r1, r3
 80010b8:	482b      	ldr	r0, [pc, #172]	@ (8001168 <MX_GPIO_Init+0x2e4>)
 80010ba:	f002 fb8b 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 80010be:	2305      	movs	r3, #5
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d2:	4619      	mov	r1, r3
 80010d4:	4825      	ldr	r0, [pc, #148]	@ (800116c <MX_GPIO_Init+0x2e8>)
 80010d6:	f002 fb7d 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80010da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010ec:	2302      	movs	r3, #2
 80010ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f4:	4619      	mov	r1, r3
 80010f6:	481a      	ldr	r0, [pc, #104]	@ (8001160 <MX_GPIO_Init+0x2dc>)
 80010f8:	f002 fb6c 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80010fc:	2304      	movs	r3, #4
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110c:	4619      	mov	r1, r3
 800110e:	4816      	ldr	r0, [pc, #88]	@ (8001168 <MX_GPIO_Init+0x2e4>)
 8001110:	f002 fb60 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001114:	2320      	movs	r3, #32
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001118:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4813      	ldr	r0, [pc, #76]	@ (8001178 <MX_GPIO_Init+0x2f4>)
 800112a:	f002 fb53 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800113e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001142:	4619      	mov	r1, r3
 8001144:	480a      	ldr	r0, [pc, #40]	@ (8001170 <MX_GPIO_Init+0x2ec>)
 8001146:	f002 fb45 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800114a:	2308      	movs	r3, #8
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	e012      	b.n	800117c <MX_GPIO_Init+0x2f8>
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40021000 	.word	0x40021000
 8001160:	40020c00 	.word	0x40020c00
 8001164:	40022800 	.word	0x40022800
 8001168:	40021800 	.word	0x40021800
 800116c:	40020400 	.word	0x40020400
 8001170:	40021c00 	.word	0x40021c00
 8001174:	40020000 	.word	0x40020000
 8001178:	40022400 	.word	0x40022400
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001186:	4619      	mov	r1, r3
 8001188:	4803      	ldr	r0, [pc, #12]	@ (8001198 <MX_GPIO_Init+0x314>)
 800118a:	f002 fb23 	bl	80037d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800118e:	bf00      	nop
 8001190:	3740      	adds	r7, #64	@ 0x40
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020000 	.word	0x40020000

0800119c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80011a4:	f010 f8be 	bl	8011324 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f00d fe45 	bl	800ee38 <osDelay>
 80011ae:	e7fb      	b.n	80011a8 <StartDefaultTask+0xc>

080011b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011c2:	f000 fdc3 	bl	8001d4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40001000 	.word	0x40001000

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <Error_Handler+0x8>

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_MspInit+0x54>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	4a11      	ldr	r2, [pc, #68]	@ (8001234 <HAL_MspInit+0x54>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <HAL_MspInit+0x54>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_MspInit+0x54>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <HAL_MspInit+0x54>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	@ 0x40
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <HAL_MspInit+0x54>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	210f      	movs	r1, #15
 8001222:	f06f 0001 	mvn.w	r0, #1
 8001226:	f000 fe8d 	bl	8001f44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0b      	ldr	r2, [pc, #44]	@ (8001274 <HAL_CRC_MspInit+0x3c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d10d      	bne.n	8001266 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_CRC_MspInit+0x40>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a09      	ldr	r2, [pc, #36]	@ (8001278 <HAL_CRC_MspInit+0x40>)
 8001254:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <HAL_CRC_MspInit+0x40>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023000 	.word	0x40023000
 8001278:	40023800 	.word	0x40023800

0800127c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <HAL_DMA2D_MspInit+0x48>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d115      	bne.n	80012ba <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HAL_DMA2D_MspInit+0x4c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a0c      	ldr	r2, [pc, #48]	@ (80012c8 <HAL_DMA2D_MspInit+0x4c>)
 8001298:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_DMA2D_MspInit+0x4c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2105      	movs	r1, #5
 80012ae:	205a      	movs	r0, #90	@ 0x5a
 80012b0:	f000 fe48 	bl	8001f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80012b4:	205a      	movs	r0, #90	@ 0x5a
 80012b6:	f000 fe61 	bl	8001f7c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	4002b000 	.word	0x4002b000
 80012c8:	40023800 	.word	0x40023800

080012cc <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001360 <HAL_DSI_MspInit+0x94>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d133      	bne.n	8001356 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <HAL_DSI_MspInit+0x98>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001364 <HAL_DSI_MspInit+0x98>)
 80012f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <HAL_DSI_MspInit+0x98>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <HAL_DSI_MspInit+0x98>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <HAL_DSI_MspInit+0x98>)
 8001314:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_DSI_MspInit+0x98>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8001326:	2304      	movs	r3, #4
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001336:	230d      	movs	r3, #13
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4809      	ldr	r0, [pc, #36]	@ (8001368 <HAL_DSI_MspInit+0x9c>)
 8001342:	f002 fa47 	bl	80037d4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2105      	movs	r1, #5
 800134a:	205c      	movs	r0, #92	@ 0x5c
 800134c:	f000 fdfa 	bl	8001f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001350:	205c      	movs	r0, #92	@ 0x5c
 8001352:	f000 fe13 	bl	8001f7c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	@ 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40016c00 	.word	0x40016c00
 8001364:	40023800 	.word	0x40023800
 8001368:	40022400 	.word	0x40022400

0800136c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	@ 0x30
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a32      	ldr	r2, [pc, #200]	@ (8001454 <HAL_I2C_MspInit+0xe8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12d      	bne.n	80013ea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	4b31      	ldr	r3, [pc, #196]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a30      	ldr	r2, [pc, #192]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80013aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b0:	2312      	movs	r3, #18
 80013b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013bc:	2304      	movs	r3, #4
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4825      	ldr	r0, [pc, #148]	@ (800145c <HAL_I2C_MspInit+0xf0>)
 80013c8:	f002 fa04 	bl	80037d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d4:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 80013d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013da:	6413      	str	r3, [r2, #64]	@ 0x40
 80013dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013e8:	e030      	b.n	800144c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <HAL_I2C_MspInit+0xf4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d12b      	bne.n	800144c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fc:	4a16      	ldr	r2, [pc, #88]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 80013fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001402:	6313      	str	r3, [r2, #48]	@ 0x30
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8001410:	2330      	movs	r3, #48	@ 0x30
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001414:	2312      	movs	r3, #18
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001420:	2304      	movs	r3, #4
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	480e      	ldr	r0, [pc, #56]	@ (8001464 <HAL_I2C_MspInit+0xf8>)
 800142c:	f002 f9d2 	bl	80037d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 800143a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800143e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_I2C_MspInit+0xec>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	@ 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40005400 	.word	0x40005400
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400
 8001460:	40005800 	.word	0x40005800
 8001464:	40021c00 	.word	0x40021c00

08001468 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <HAL_LTDC_MspInit+0x48>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d115      	bne.n	80014a6 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <HAL_LTDC_MspInit+0x4c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a0c      	ldr	r2, [pc, #48]	@ (80014b4 <HAL_LTDC_MspInit+0x4c>)
 8001484:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <HAL_LTDC_MspInit+0x4c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	2058      	movs	r0, #88	@ 0x58
 800149c:	f000 fd52 	bl	8001f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80014a0:	2058      	movs	r0, #88	@ 0x58
 80014a2:	f000 fd6b 	bl	8001f7c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40016800 	.word	0x40016800
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a31      	ldr	r2, [pc, #196]	@ (800159c <HAL_QSPI_MspInit+0xe4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d15b      	bne.n	8001592 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <HAL_QSPI_MspInit+0xe8>)
 80014e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014e2:	4a2f      	ldr	r2, [pc, #188]	@ (80015a0 <HAL_QSPI_MspInit+0xe8>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6393      	str	r3, [r2, #56]	@ 0x38
 80014ea:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_QSPI_MspInit+0xe8>)
 80014ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <HAL_QSPI_MspInit+0xe8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a28      	ldr	r2, [pc, #160]	@ (80015a0 <HAL_QSPI_MspInit+0xe8>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <HAL_QSPI_MspInit+0xe8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <HAL_QSPI_MspInit+0xe8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <HAL_QSPI_MspInit+0xe8>)
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <HAL_QSPI_MspInit+0xe8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800152e:	2340      	movs	r3, #64	@ 0x40
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800153e:	230a      	movs	r3, #10
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4816      	ldr	r0, [pc, #88]	@ (80015a4 <HAL_QSPI_MspInit+0xec>)
 800154a:	f002 f943 	bl	80037d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800154e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001560:	2309      	movs	r3, #9
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	480f      	ldr	r0, [pc, #60]	@ (80015a8 <HAL_QSPI_MspInit+0xf0>)
 800156c:	f002 f932 	bl	80037d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001570:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001582:	230a      	movs	r3, #10
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <HAL_QSPI_MspInit+0xf0>)
 800158e:	f002 f921 	bl	80037d4 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	a0001000 	.word	0xa0001000
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40021400 	.word	0x40021400

080015ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	@ 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a28      	ldr	r2, [pc, #160]	@ (800166c <HAL_SD_MspInit+0xc0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d14a      	bne.n	8001664 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	4b27      	ldr	r3, [pc, #156]	@ (8001670 <HAL_SD_MspInit+0xc4>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	4a26      	ldr	r2, [pc, #152]	@ (8001670 <HAL_SD_MspInit+0xc4>)
 80015d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015de:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <HAL_SD_MspInit+0xc4>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <HAL_SD_MspInit+0xc4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001670 <HAL_SD_MspInit+0xc4>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <HAL_SD_MspInit+0xc4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <HAL_SD_MspInit+0xc4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <HAL_SD_MspInit+0xc4>)
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <HAL_SD_MspInit+0xc4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8001622:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001626:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001634:	230c      	movs	r3, #12
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	480d      	ldr	r0, [pc, #52]	@ (8001674 <HAL_SD_MspInit+0xc8>)
 8001640:	f002 f8c8 	bl	80037d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001644:	2304      	movs	r3, #4
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001654:	230c      	movs	r3, #12
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	@ (8001678 <HAL_SD_MspInit+0xcc>)
 8001660:	f002 f8b8 	bl	80037d4 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	@ 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40012c00 	.word	0x40012c00
 8001670:	40023800 	.word	0x40023800
 8001674:	40020800 	.word	0x40020800
 8001678:	40020c00 	.word	0x40020c00

0800167c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0b      	ldr	r2, [pc, #44]	@ (80016b8 <HAL_TIM_Base_MspInit+0x3c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d10d      	bne.n	80016aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_TIM_Base_MspInit+0x40>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <HAL_TIM_Base_MspInit+0x40>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6453      	str	r3, [r2, #68]	@ 0x44
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <HAL_TIM_Base_MspInit+0x40>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	@ 0x30
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a33      	ldr	r2, [pc, #204]	@ (80017ac <HAL_UART_MspInit+0xec>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d12d      	bne.n	800173e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	4b32      	ldr	r3, [pc, #200]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a31      	ldr	r2, [pc, #196]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b2f      	ldr	r3, [pc, #188]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016fa:	61bb      	str	r3, [r7, #24]
 80016fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a2a      	ldr	r2, [pc, #168]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b28      	ldr	r3, [pc, #160]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800171a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001724:	2301      	movs	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800172c:	2307      	movs	r3, #7
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	481f      	ldr	r0, [pc, #124]	@ (80017b4 <HAL_UART_MspInit+0xf4>)
 8001738:	f002 f84c 	bl	80037d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800173c:	e031      	b.n	80017a2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1d      	ldr	r2, [pc, #116]	@ (80017b8 <HAL_UART_MspInit+0xf8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d12c      	bne.n	80017a2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001750:	4a17      	ldr	r2, [pc, #92]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	6453      	str	r3, [r2, #68]	@ 0x44
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 800175a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176c:	4a10      	ldr	r2, [pc, #64]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 800176e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001772:	6313      	str	r3, [r2, #48]	@ 0x30
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <HAL_UART_MspInit+0xf0>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001780:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001792:	2308      	movs	r3, #8
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4807      	ldr	r0, [pc, #28]	@ (80017bc <HAL_UART_MspInit+0xfc>)
 800179e:	f002 f819 	bl	80037d4 <HAL_GPIO_Init>
}
 80017a2:	bf00      	nop
 80017a4:	3730      	adds	r7, #48	@ 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40004800 	.word	0x40004800
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40011400 	.word	0x40011400
 80017bc:	40021800 	.word	0x40021800

080017c0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80017d4:	4b44      	ldr	r3, [pc, #272]	@ (80018e8 <HAL_FMC_MspInit+0x128>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 8081 	bne.w	80018e0 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 80017de:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <HAL_FMC_MspInit+0x128>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	4b40      	ldr	r3, [pc, #256]	@ (80018ec <HAL_FMC_MspInit+0x12c>)
 80017ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ec:	4a3f      	ldr	r2, [pc, #252]	@ (80018ec <HAL_FMC_MspInit+0x12c>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6393      	str	r3, [r2, #56]	@ 0x38
 80017f4:	4b3d      	ldr	r3, [pc, #244]	@ (80018ec <HAL_FMC_MspInit+0x12c>)
 80017f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8001800:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001804:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001812:	230c      	movs	r3, #12
 8001814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	4619      	mov	r1, r3
 800181a:	4835      	ldr	r0, [pc, #212]	@ (80018f0 <HAL_FMC_MspInit+0x130>)
 800181c:	f001 ffda 	bl	80037d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8001820:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001824:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001832:	230c      	movs	r3, #12
 8001834:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	482e      	ldr	r0, [pc, #184]	@ (80018f4 <HAL_FMC_MspInit+0x134>)
 800183c:	f001 ffca 	bl	80037d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001840:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001844:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001852:	230c      	movs	r3, #12
 8001854:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4619      	mov	r1, r3
 800185a:	4827      	ldr	r0, [pc, #156]	@ (80018f8 <HAL_FMC_MspInit+0x138>)
 800185c:	f001 ffba 	bl	80037d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001860:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8001864:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001872:	230c      	movs	r3, #12
 8001874:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4619      	mov	r1, r3
 800187a:	4820      	ldr	r0, [pc, #128]	@ (80018fc <HAL_FMC_MspInit+0x13c>)
 800187c:	f001 ffaa 	bl	80037d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001880:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001884:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001892:	230c      	movs	r3, #12
 8001894:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	4619      	mov	r1, r3
 800189a:	4819      	ldr	r0, [pc, #100]	@ (8001900 <HAL_FMC_MspInit+0x140>)
 800189c:	f001 ff9a 	bl	80037d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 80018a0:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 80018a4:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018b2:	230c      	movs	r3, #12
 80018b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4812      	ldr	r0, [pc, #72]	@ (8001904 <HAL_FMC_MspInit+0x144>)
 80018bc:	f001 ff8a 	bl	80037d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80018c0:	2301      	movs	r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018d0:	230c      	movs	r3, #12
 80018d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	480b      	ldr	r0, [pc, #44]	@ (8001908 <HAL_FMC_MspInit+0x148>)
 80018da:	f001 ff7b 	bl	80037d4 <HAL_GPIO_Init>
 80018de:	e000      	b.n	80018e2 <HAL_FMC_MspInit+0x122>
    return;
 80018e0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000770 	.word	0x20000770
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40021800 	.word	0x40021800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40022000 	.word	0x40022000
 8001900:	40021400 	.word	0x40021400
 8001904:	40021c00 	.word	0x40021c00
 8001908:	40020800 	.word	0x40020800

0800190c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001914:	f7ff ff54 	bl	80017c0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a46      	ldr	r2, [pc, #280]	@ (8001a48 <HAL_SAI_MspInit+0x128>)
 800192e:	4293      	cmp	r3, r2
 8001930:	f040 8085 	bne.w	8001a3e <HAL_SAI_MspInit+0x11e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001934:	4b45      	ldr	r3, [pc, #276]	@ (8001a4c <HAL_SAI_MspInit+0x12c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d115      	bne.n	8001968 <HAL_SAI_MspInit+0x48>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	4b43      	ldr	r3, [pc, #268]	@ (8001a50 <HAL_SAI_MspInit+0x130>)
 8001942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001944:	4a42      	ldr	r2, [pc, #264]	@ (8001a50 <HAL_SAI_MspInit+0x130>)
 8001946:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800194a:	6453      	str	r3, [r2, #68]	@ 0x44
 800194c:	4b40      	ldr	r3, [pc, #256]	@ (8001a50 <HAL_SAI_MspInit+0x130>)
 800194e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 5, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2105      	movs	r1, #5
 800195c:	2057      	movs	r0, #87	@ 0x57
 800195e:	f000 faf1 	bl	8001f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001962:	2057      	movs	r0, #87	@ 0x57
 8001964:	f000 fb0a 	bl	8001f7c <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001968:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <HAL_SAI_MspInit+0x12c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	4a37      	ldr	r2, [pc, #220]	@ (8001a4c <HAL_SAI_MspInit+0x12c>)
 8001970:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001972:	2330      	movs	r3, #48	@ 0x30
 8001974:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001982:	2306      	movs	r3, #6
 8001984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	4619      	mov	r1, r3
 800198c:	4831      	ldr	r0, [pc, #196]	@ (8001a54 <HAL_SAI_MspInit+0x134>)
 800198e:	f001 ff21 	bl	80037d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001992:	2340      	movs	r3, #64	@ 0x40
 8001994:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80019a2:	2306      	movs	r3, #6
 80019a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4619      	mov	r1, r3
 80019ac:	482a      	ldr	r0, [pc, #168]	@ (8001a58 <HAL_SAI_MspInit+0x138>)
 80019ae:	f001 ff11 	bl	80037d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80019b2:	2380      	movs	r3, #128	@ 0x80
 80019b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80019c2:	2306      	movs	r3, #6
 80019c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	4619      	mov	r1, r3
 80019cc:	4823      	ldr	r0, [pc, #140]	@ (8001a5c <HAL_SAI_MspInit+0x13c>)
 80019ce:	f001 ff01 	bl	80037d4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 80019d2:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 80019d4:	4a23      	ldr	r2, [pc, #140]	@ (8001a64 <HAL_SAI_MspInit+0x144>)
 80019d6:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80019d8:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 80019ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019f0:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 80019f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019f8:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 80019fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a00:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001a02:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 8001a04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a08:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001a16:	4812      	ldr	r0, [pc, #72]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 8001a18:	f000 fada 	bl	8001fd0 <HAL_DMA_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_SAI_MspInit+0x106>
    {
      Error_Handler();
 8001a22:	f7ff fbd7 	bl	80011d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 8001a2a:	675a      	str	r2, [r3, #116]	@ 0x74
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 8001a36:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a38:	4a09      	ldr	r2, [pc, #36]	@ (8001a60 <HAL_SAI_MspInit+0x140>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6393      	str	r3, [r2, #56]	@ 0x38

    }
}
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40015804 	.word	0x40015804
 8001a4c:	20000774 	.word	0x20000774
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	40021800 	.word	0x40021800
 8001a60:	2000057c 	.word	0x2000057c
 8001a64:	40026428 	.word	0x40026428

08001a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	@ 0x38
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4b33      	ldr	r3, [pc, #204]	@ (8001b4c <HAL_InitTick+0xe4>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	4a32      	ldr	r2, [pc, #200]	@ (8001b4c <HAL_InitTick+0xe4>)
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a88:	4b30      	ldr	r3, [pc, #192]	@ (8001b4c <HAL_InitTick+0xe4>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a94:	f107 0210 	add.w	r2, r7, #16
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f005 f988 	bl	8006db4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d103      	bne.n	8001ab6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001aae:	f005 f959 	bl	8006d64 <HAL_RCC_GetPCLK1Freq>
 8001ab2:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ab4:	e004      	b.n	8001ac0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ab6:	f005 f955 	bl	8006d64 <HAL_RCC_GetPCLK1Freq>
 8001aba:	4603      	mov	r3, r0
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac2:	4a23      	ldr	r2, [pc, #140]	@ (8001b50 <HAL_InitTick+0xe8>)
 8001ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac8:	0c9b      	lsrs	r3, r3, #18
 8001aca:	3b01      	subs	r3, #1
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ace:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <HAL_InitTick+0xec>)
 8001ad0:	4a21      	ldr	r2, [pc, #132]	@ (8001b58 <HAL_InitTick+0xf0>)
 8001ad2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <HAL_InitTick+0xec>)
 8001ad6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ada:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001adc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b54 <HAL_InitTick+0xec>)
 8001ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <HAL_InitTick+0xec>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <HAL_InitTick+0xec>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <HAL_InitTick+0xec>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001af4:	4817      	ldr	r0, [pc, #92]	@ (8001b54 <HAL_InitTick+0xec>)
 8001af6:	f007 fcba 	bl	800946e <HAL_TIM_Base_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001b00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d11b      	bne.n	8001b40 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b08:	4812      	ldr	r0, [pc, #72]	@ (8001b54 <HAL_InitTick+0xec>)
 8001b0a:	f007 fcff 	bl	800950c <HAL_TIM_Base_Start_IT>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001b14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d111      	bne.n	8001b40 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b1c:	2036      	movs	r0, #54	@ 0x36
 8001b1e:	f000 fa2d 	bl	8001f7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b0f      	cmp	r3, #15
 8001b26:	d808      	bhi.n	8001b3a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	2036      	movs	r0, #54	@ 0x36
 8001b2e:	f000 fa09 	bl	8001f44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <HAL_InitTick+0xf4>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e002      	b.n	8001b40 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3738      	adds	r7, #56	@ 0x38
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	431bde83 	.word	0x431bde83
 8001b54:	20000778 	.word	0x20000778
 8001b58:	40001000 	.word	0x40001000
 8001b5c:	20000004 	.word	0x20000004

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <NMI_Handler+0x4>

08001b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <HardFault_Handler+0x4>

08001b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <MemManage_Handler+0x4>

08001b78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <TIM6_DAC_IRQHandler+0x10>)
 8001b9e:	f007 fd25 	bl	80095ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000778 	.word	0x20000778

08001bac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <DMA2_Stream1_IRQHandler+0x10>)
 8001bb2:	f000 fba5 	bl	8002300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000057c 	.word	0x2000057c

08001bc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001bc4:	4802      	ldr	r0, [pc, #8]	@ (8001bd0 <OTG_FS_IRQHandler+0x10>)
 8001bc6:	f002 fac3 	bl	8004150 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20008d1c 	.word	0x20008d1c

08001bd4 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <SAI1_IRQHandler+0x10>)
 8001bda:	f005 ffbf 	bl	8007b5c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200004f4 	.word	0x200004f4

08001be8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <LTDC_IRQHandler+0x10>)
 8001bee:	f004 fb17 	bl	8006220 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000400 	.word	0x20000400

08001bfc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001c00:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <DMA2D_IRQHandler+0x10>)
 8001c02:	f000 fe3c 	bl	800287e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200002fc 	.word	0x200002fc

08001c10 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001c14:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <DSI_IRQHandler+0x10>)
 8001c16:	f001 fa12 	bl	800303e <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000033c 	.word	0x2000033c

08001c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	@ (8001c80 <_sbrk+0x5c>)
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <_sbrk+0x60>)
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c40:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <_sbrk+0x64>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	@ (8001c8c <_sbrk+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d207      	bcs.n	8001c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c54:	f00f ff40 	bl	8011ad8 <__errno>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	e009      	b.n	8001c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a05      	ldr	r2, [pc, #20]	@ (8001c88 <_sbrk+0x64>)
 8001c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20050000 	.word	0x20050000
 8001c84:	00000400 	.word	0x00000400
 8001c88:	200007c0 	.word	0x200007c0
 8001c8c:	20009248 	.word	0x20009248

08001c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <SystemInit+0x20>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9a:	4a05      	ldr	r2, [pc, #20]	@ (8001cb0 <SystemInit+0x20>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cb8:	f7ff ffea 	bl	8001c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cbe:	490d      	ldr	r1, [pc, #52]	@ (8001cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f00f feff 	bl	8011ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce6:	f7fe fc37 	bl	8000558 <main>
  bx  lr    
 8001cea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001cf8:	08011cb8 	.word	0x08011cb8
  ldr r2, =_sbss
 8001cfc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001d00:	20009244 	.word	0x20009244

08001d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	@ (8001d48 <HAL_Init+0x40>)
 8001d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <HAL_Init+0x40>)
 8001d1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d24:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a07      	ldr	r2, [pc, #28]	@ (8001d48 <HAL_Init+0x40>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 f8fc 	bl	8001f2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fe96 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3c:	f7ff fa50 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	200007c4 	.word	0x200007c4

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	200007c4 	.word	0x200007c4

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	@ (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	@ (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	@ (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	@ 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ff4c 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f56:	f7ff ff61 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	6978      	ldr	r0, [r7, #20]
 8001f62:	f7ff ffb1 	bl	8001ec8 <NVIC_EncodePriority>
 8001f66:	4602      	mov	r2, r0
 8001f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff80 	bl	8001e74 <__NVIC_SetPriority>
}
 8001f74:	bf00      	nop
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff54 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00e      	b.n	8001fc8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	795b      	ldrb	r3, [r3, #5]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff f93c 	bl	8001238 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff feca 	bl	8001d74 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e099      	b.n	8002120 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200c:	e00f      	b.n	800202e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200e:	f7ff feb1 	bl	8001d74 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b05      	cmp	r3, #5
 800201a:	d908      	bls.n	800202e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e078      	b.n	8002120 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e8      	bne.n	800200e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4b38      	ldr	r3, [pc, #224]	@ (8002128 <HAL_DMA_Init+0x158>)
 8002048:	4013      	ands	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	2b04      	cmp	r3, #4
 8002086:	d107      	bne.n	8002098 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	4313      	orrs	r3, r2
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f023 0307 	bic.w	r3, r3, #7
 80020ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d117      	bne.n	80020f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00e      	beq.n	80020f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fb0d 	bl	80026f4 <DMA_CheckFifoParam>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2240      	movs	r2, #64	@ 0x40
 80020e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020ee:	2301      	movs	r3, #1
 80020f0:	e016      	b.n	8002120 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fac4 	bl	8002688 <DMA_CalcBaseAndBitshift>
 8002100:	4603      	mov	r3, r0
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002108:	223f      	movs	r2, #63	@ 0x3f
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	f010803f 	.word	0xf010803f

0800212c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002142:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_DMA_Start_IT+0x26>
 800214e:	2302      	movs	r3, #2
 8002150:	e040      	b.n	80021d4 <HAL_DMA_Start_IT+0xa8>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d12f      	bne.n	80021c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2202      	movs	r2, #2
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fa56 	bl	800262c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002184:	223f      	movs	r2, #63	@ 0x3f
 8002186:	409a      	lsls	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0216 	orr.w	r2, r2, #22
 800219a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0208 	orr.w	r2, r2, #8
 80021b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e005      	b.n	80021d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
 80021d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021ea:	f7ff fdc3 	bl	8001d74 <HAL_GetTick>
 80021ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d008      	beq.n	800220e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2280      	movs	r2, #128	@ 0x80
 8002200:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e052      	b.n	80022b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0216 	bic.w	r2, r2, #22
 800221c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800222c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <HAL_DMA_Abort+0x62>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0208 	bic.w	r2, r2, #8
 800224c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225e:	e013      	b.n	8002288 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002260:	f7ff fd88 	bl	8001d74 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b05      	cmp	r3, #5
 800226c:	d90c      	bls.n	8002288 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2220      	movs	r2, #32
 8002272:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2203      	movs	r2, #3
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e015      	b.n	80022b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e4      	bne.n	8002260 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229a:	223f      	movs	r2, #63	@ 0x3f
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d004      	beq.n	80022da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2280      	movs	r2, #128	@ 0x80
 80022d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00c      	b.n	80022f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2205      	movs	r2, #5
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0201 	bic.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800230c:	4b8e      	ldr	r3, [pc, #568]	@ (8002548 <HAL_DMA_IRQHandler+0x248>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a8e      	ldr	r2, [pc, #568]	@ (800254c <HAL_DMA_IRQHandler+0x24c>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0a9b      	lsrs	r3, r3, #10
 8002318:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232a:	2208      	movs	r2, #8
 800232c:	409a      	lsls	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01a      	beq.n	800236c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d013      	beq.n	800236c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0204 	bic.w	r2, r2, #4
 8002352:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002358:	2208      	movs	r2, #8
 800235a:	409a      	lsls	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002370:	2201      	movs	r2, #1
 8002372:	409a      	lsls	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d012      	beq.n	80023a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238e:	2201      	movs	r2, #1
 8002390:	409a      	lsls	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239a:	f043 0202 	orr.w	r2, r3, #2
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a6:	2204      	movs	r2, #4
 80023a8:	409a      	lsls	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d012      	beq.n	80023d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00b      	beq.n	80023d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c4:	2204      	movs	r2, #4
 80023c6:	409a      	lsls	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d0:	f043 0204 	orr.w	r2, r3, #4
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023dc:	2210      	movs	r2, #16
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d043      	beq.n	8002470 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d03c      	beq.n	8002470 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	2210      	movs	r2, #16
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d018      	beq.n	8002442 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d108      	bne.n	8002430 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d024      	beq.n	8002470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
 800242e:	e01f      	b.n	8002470 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
 8002440:	e016      	b.n	8002470 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0208 	bic.w	r2, r2, #8
 800245e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002474:	2220      	movs	r2, #32
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 808f 	beq.w	80025a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8087 	beq.w	80025a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002496:	2220      	movs	r2, #32
 8002498:	409a      	lsls	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d136      	bne.n	8002518 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0216 	bic.w	r2, r2, #22
 80024b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <HAL_DMA_IRQHandler+0x1da>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0208 	bic.w	r2, r2, #8
 80024e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ee:	223f      	movs	r2, #63	@ 0x3f
 80024f0:	409a      	lsls	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800250a:	2b00      	cmp	r3, #0
 800250c:	d07e      	beq.n	800260c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
        }
        return;
 8002516:	e079      	b.n	800260c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01d      	beq.n	8002562 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10d      	bne.n	8002550 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002538:	2b00      	cmp	r3, #0
 800253a:	d031      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4798      	blx	r3
 8002544:	e02c      	b.n	80025a0 <HAL_DMA_IRQHandler+0x2a0>
 8002546:	bf00      	nop
 8002548:	20000000 	.word	0x20000000
 800254c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d023      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
 8002560:	e01e      	b.n	80025a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10f      	bne.n	8002590 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0210 	bic.w	r2, r2, #16
 800257e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d032      	beq.n	800260e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d022      	beq.n	80025fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2205      	movs	r2, #5
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	3301      	adds	r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d307      	bcc.n	80025e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f2      	bne.n	80025cc <HAL_DMA_IRQHandler+0x2cc>
 80025e6:	e000      	b.n	80025ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
 800260a:	e000      	b.n	800260e <HAL_DMA_IRQHandler+0x30e>
        return;
 800260c:	bf00      	nop
    }
  }
}
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002648:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b40      	cmp	r3, #64	@ 0x40
 8002658:	d108      	bne.n	800266c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800266a:	e007      	b.n	800267c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	60da      	str	r2, [r3, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	3b10      	subs	r3, #16
 8002698:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <DMA_CalcBaseAndBitshift+0x64>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026a2:	4a13      	ldr	r2, [pc, #76]	@ (80026f0 <DMA_CalcBaseAndBitshift+0x68>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d909      	bls.n	80026ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026be:	f023 0303 	bic.w	r3, r3, #3
 80026c2:	1d1a      	adds	r2, r3, #4
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80026c8:	e007      	b.n	80026da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026d2:	f023 0303 	bic.w	r3, r3, #3
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	aaaaaaab 	.word	0xaaaaaaab
 80026f0:	08011c8c 	.word	0x08011c8c

080026f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d11f      	bne.n	800274e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d856      	bhi.n	80027c2 <DMA_CheckFifoParam+0xce>
 8002714:	a201      	add	r2, pc, #4	@ (adr r2, 800271c <DMA_CheckFifoParam+0x28>)
 8002716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271a:	bf00      	nop
 800271c:	0800272d 	.word	0x0800272d
 8002720:	0800273f 	.word	0x0800273f
 8002724:	0800272d 	.word	0x0800272d
 8002728:	080027c3 	.word	0x080027c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d046      	beq.n	80027c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800273c:	e043      	b.n	80027c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002742:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002746:	d140      	bne.n	80027ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274c:	e03d      	b.n	80027ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002756:	d121      	bne.n	800279c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d837      	bhi.n	80027ce <DMA_CheckFifoParam+0xda>
 800275e:	a201      	add	r2, pc, #4	@ (adr r2, 8002764 <DMA_CheckFifoParam+0x70>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	08002775 	.word	0x08002775
 8002768:	0800277b 	.word	0x0800277b
 800276c:	08002775 	.word	0x08002775
 8002770:	0800278d 	.word	0x0800278d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      break;
 8002778:	e030      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d025      	beq.n	80027d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278a:	e022      	b.n	80027d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002794:	d11f      	bne.n	80027d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800279a:	e01c      	b.n	80027d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d903      	bls.n	80027aa <DMA_CheckFifoParam+0xb6>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d003      	beq.n	80027b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027a8:	e018      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
      break;
 80027ae:	e015      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00e      	beq.n	80027da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      break;
 80027c0:	e00b      	b.n	80027da <DMA_CheckFifoParam+0xe6>
      break;
 80027c2:	bf00      	nop
 80027c4:	e00a      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;
 80027c6:	bf00      	nop
 80027c8:	e008      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;
 80027ca:	bf00      	nop
 80027cc:	e006      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;
 80027ce:	bf00      	nop
 80027d0:	e004      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;   
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <DMA_CheckFifoParam+0xe8>
      break;
 80027da:	bf00      	nop
    }
  } 
  
  return status; 
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop

080027ec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e03b      	b.n	8002876 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe fd32 	bl	800127c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283c:	f023 0107 	bic.w	r1, r3, #7
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002856:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68d1      	ldr	r1, [r2, #12]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	430b      	orrs	r3, r1
 8002864:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d026      	beq.n	80028ee <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d021      	beq.n	80028ee <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028b8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2204      	movs	r2, #4
 80028d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d026      	beq.n	8002946 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d021      	beq.n	8002946 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002910:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2220      	movs	r2, #32
 8002918:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291e:	f043 0202 	orr.w	r2, r3, #2
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2204      	movs	r2, #4
 800292a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d026      	beq.n	800299e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002956:	2b00      	cmp	r3, #0
 8002958:	d021      	beq.n	800299e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002968:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2208      	movs	r2, #8
 8002970:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002976:	f043 0204 	orr.w	r2, r3, #4
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2204      	movs	r2, #4
 8002982:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00e      	beq.n	80029d0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2204      	movs	r2, #4
 80029c8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f853 	bl	8002a76 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d024      	beq.n	8002a24 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01f      	beq.n	8002a24 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029f2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2202      	movs	r2, #2
 80029fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01f      	beq.n	8002a6e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01a      	beq.n	8002a6e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a46:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f80e 	bl	8002a8a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_DMA2D_ConfigLayer+0x20>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e079      	b.n	8002bb4 <HAL_DMA2D_ConfigLayer+0x114>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	3318      	adds	r3, #24
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002aea:	4b35      	ldr	r3, [pc, #212]	@ (8002bc0 <HAL_DMA2D_ConfigLayer+0x120>)
 8002aec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b0a      	cmp	r3, #10
 8002af4:	d003      	beq.n	8002afe <HAL_DMA2D_ConfigLayer+0x5e>
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	d107      	bne.n	8002b0e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e005      	b.n	8002b1a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	061b      	lsls	r3, r3, #24
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d120      	bne.n	8002b62 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	ea02 0103 	and.w	r1, r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b0a      	cmp	r3, #10
 8002b48:	d003      	beq.n	8002b52 <HAL_DMA2D_ConfigLayer+0xb2>
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b09      	cmp	r3, #9
 8002b50:	d127      	bne.n	8002ba2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b60:	e01f      	b.n	8002ba2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69da      	ldr	r2, [r3, #28]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	ea02 0103 	and.w	r1, r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b0a      	cmp	r3, #10
 8002b8a:	d003      	beq.n	8002b94 <HAL_DMA2D_ConfigLayer+0xf4>
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b09      	cmp	r3, #9
 8002b92:	d106      	bne.n	8002ba2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002ba0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	ff03000f 	.word	0xff03000f

08002bc4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	@ 0x28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e16e      	b.n	8002eb6 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7c5b      	ldrb	r3, [r3, #17]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d102      	bne.n	8002be8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fe fb72 	bl	80012cc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2203      	movs	r2, #3
 8002bec:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002c02:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002c0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c16:	f7ff f8ad 	bl	8001d74 <HAL_GetTick>
 8002c1a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002c1c:	e009      	b.n	8002c32 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002c1e:	f7ff f8a9 	bl	8001d74 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c2c:	d901      	bls.n	8002c32 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e141      	b.n	8002eb6 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0ed      	beq.n	8002c1e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8002c52:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8002c56:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002c6e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002c76:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002caa:	2001      	movs	r0, #1
 8002cac:	f7ff f86e 	bl	8001d8c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb0:	f7ff f860 	bl	8001d74 <HAL_GetTick>
 8002cb4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002cb6:	e009      	b.n	8002ccc <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002cb8:	f7ff f85c 	bl	8001d74 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cc6:	d901      	bls.n	8002ccc <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0f4      	b.n	8002eb6 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ed      	beq.n	8002cb8 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d0c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6899      	ldr	r1, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0202 	orr.w	r2, r2, #2
 8002d30:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0204 	orr.w	r2, r2, #4
 8002d44:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0203 	bic.w	r2, r2, #3
 8002d58:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d72:	f7fe ffff 	bl	8001d74 <HAL_GetTick>
 8002d76:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d123      	bne.n	8002dd0 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002d88:	e00c      	b.n	8002da4 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002d8a:	f7fe fff3 	bl	8001d74 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d98:	d904      	bls.n	8002da4 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e088      	b.n	8002eb6 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002dac:	f003 0314 	and.w	r3, r3, #20
 8002db0:	2b14      	cmp	r3, #20
 8002db2:	d1ea      	bne.n	8002d8a <HAL_DSI_Init+0x1c6>
 8002db4:	e014      	b.n	8002de0 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002db6:	f7fe ffdd 	bl	8001d74 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dc4:	d904      	bls.n	8002dd0 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e072      	b.n	8002eb6 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002dd8:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8002ddc:	2b94      	cmp	r3, #148	@ 0x94
 8002dde:	d1ea      	bne.n	8002db6 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <HAL_DSI_Init+0x22a>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	e000      	b.n	8002df0 <HAL_DSI_Init+0x22c>
 8002dee:	2301      	movs	r3, #1
 8002df0:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	4a32      	ldr	r2, [pc, #200]	@ (8002ec0 <HAL_DSI_Init+0x2fc>)
 8002df6:	fb03 f202 	mul.w	r2, r3, r2
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	409a      	lsls	r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002e26:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0203 	bic.w	r2, r2, #3
 8002e8a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3728      	adds	r7, #40	@ 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	003d0900 	.word	0x003d0900

08002ec4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7c1b      	ldrb	r3, [r3, #16]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_DSI_ConfigErrorMonitor+0x16>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e0ab      	b.n	8003032 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002f14:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002f18:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8002f36:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0202 	orr.w	r2, r2, #2
 8002f72:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 020c 	orr.w	r2, r2, #12
 8002f90:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0210 	orr.w	r2, r2, #16
 8002fae:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0220 	orr.w	r2, r2, #32
 8002fcc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fea:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d009      	beq.n	800300c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003008:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8003026:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00f      	beq.n	8003076 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2201      	movs	r2, #1
 800306c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8ad 	bl	80031d0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00f      	beq.n	80030a6 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2202      	movs	r2, #2
 800309c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f89f 	bl	80031e4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 808c 	beq.w	80031c8 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80030b8:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4013      	ands	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030d0:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	4013      	ands	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f043 0202 	orr.w	r2, r3, #2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f043 0204 	orr.w	r2, r3, #4
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f043 0208 	orr.w	r2, r3, #8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f043 0210 	orr.w	r2, r3, #16
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f818 	bl	80031f8 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7c1b      	ldrb	r3, [r3, #16]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_DSI_SetGenericVCID+0x16>
 800321e:	2302      	movs	r3, #2
 8003220:	e016      	b.n	8003250 <HAL_DSI_SetGenericVCID+0x44>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0203 	bic.w	r2, r2, #3
 8003236:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7c1b      	ldrb	r3, [r3, #16]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800326e:	2302      	movs	r3, #2
 8003270:	e0c5      	b.n	80033fe <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0203 	bic.w	r2, r2, #3
 80032be:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68d9      	ldr	r1, [r3, #12]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0207 	bic.w	r2, r2, #7
 80032e0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6959      	ldr	r1, [r3, #20]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 020f 	bic.w	r2, r2, #15
 800330e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6919      	ldr	r1, [r3, #16]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 020e 	bic.w	r2, r2, #14
 8003332:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	005a      	lsls	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	041b      	lsls	r3, r3, #16
 800335c:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003380:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	431a      	orrs	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0202 	orr.w	r2, r2, #2
 80033f2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	7c1b      	ldrb	r3, [r3, #16]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_DSI_ConfigCommand+0x16>
 800341e:	2302      	movs	r3, #2
 8003420:	e049      	b.n	80034b6 <HAL_DSI_ConfigCommand+0xaa>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <HAL_DSI_ConfigCommand+0xb8>)
 8003434:	400b      	ands	r3, r1
 8003436:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003446:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800344c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8003452:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003458:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800345e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003464:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800346a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003470:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003476:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800347c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003482:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0202 	bic.w	r2, r2, #2
 800349a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	fef080ff 	.word	0xfef080ff

080034c8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7c1b      	ldrb	r3, [r3, #16]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_DSI_ConfigFlowControl+0x16>
 80034da:	2302      	movs	r3, #2
 80034dc:	e016      	b.n	800350c <HAL_DSI_ConfigFlowControl+0x44>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 021f 	bic.w	r2, r2, #31
 80034f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7c1b      	ldrb	r3, [r3, #16]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_DSI_ConfigPhyTimer+0x16>
 800352a:	2302      	movs	r3, #2
 800352c:	e058      	b.n	80035e0 <HAL_DSI_ConfigPhyTimer+0xc8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4293      	cmp	r3, r2
 800353e:	bf38      	it	cc
 8003540:	4613      	movcc	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8003554:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	041a      	lsls	r2, r3, #16
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8003582:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	041b      	lsls	r3, r3, #16
 8003598:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80035bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	021a      	lsls	r2, r3, #8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7c1b      	ldrb	r3, [r3, #16]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_DSI_ConfigHostTimeouts+0x16>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0b4      	b.n	800376c <HAL_DSI_ConfigHostTimeouts+0x180>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003616:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	b292      	uxth	r2, r2
 8003638:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	041a      	lsls	r2, r3, #16
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	041b      	lsls	r3, r3, #16
 800365c:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	041b      	lsls	r3, r3, #16
 800367e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	0c1b      	lsrs	r3, r3, #16
 80036ca:	041b      	lsls	r3, r3, #16
 80036cc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80036f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	0c1b      	lsrs	r3, r3, #16
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6a1a      	ldr	r2, [r3, #32]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	7c1b      	ldrb	r3, [r3, #16]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_DSI_SetLowPowerRXFilter+0x16>
 800378a:	2302      	movs	r3, #2
 800378c:	e01b      	b.n	80037c6 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 80037a4:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	065a      	lsls	r2, r3, #25
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	@ 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	e177      	b.n	8003ae0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037f0:	2201      	movs	r2, #1
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	429a      	cmp	r2, r3
 800380a:	f040 8166 	bne.w	8003ada <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d005      	beq.n	8003826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003822:	2b02      	cmp	r3, #2
 8003824:	d130      	bne.n	8003888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	2203      	movs	r2, #3
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 0201 	and.w	r2, r3, #1
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	2b03      	cmp	r3, #3
 8003892:	d017      	beq.n	80038c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	2203      	movs	r2, #3
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d123      	bne.n	8003918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	08da      	lsrs	r2, r3, #3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3208      	adds	r2, #8
 80038d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	220f      	movs	r2, #15
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	08da      	lsrs	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3208      	adds	r2, #8
 8003912:	69b9      	ldr	r1, [r7, #24]
 8003914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0203 	and.w	r2, r3, #3
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80c0 	beq.w	8003ada <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	4b66      	ldr	r3, [pc, #408]	@ (8003af8 <HAL_GPIO_Init+0x324>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	4a65      	ldr	r2, [pc, #404]	@ (8003af8 <HAL_GPIO_Init+0x324>)
 8003964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003968:	6453      	str	r3, [r2, #68]	@ 0x44
 800396a:	4b63      	ldr	r3, [pc, #396]	@ (8003af8 <HAL_GPIO_Init+0x324>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003976:	4a61      	ldr	r2, [pc, #388]	@ (8003afc <HAL_GPIO_Init+0x328>)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	3302      	adds	r3, #2
 800397e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	220f      	movs	r2, #15
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a58      	ldr	r2, [pc, #352]	@ (8003b00 <HAL_GPIO_Init+0x32c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d037      	beq.n	8003a12 <HAL_GPIO_Init+0x23e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a57      	ldr	r2, [pc, #348]	@ (8003b04 <HAL_GPIO_Init+0x330>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d031      	beq.n	8003a0e <HAL_GPIO_Init+0x23a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a56      	ldr	r2, [pc, #344]	@ (8003b08 <HAL_GPIO_Init+0x334>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d02b      	beq.n	8003a0a <HAL_GPIO_Init+0x236>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a55      	ldr	r2, [pc, #340]	@ (8003b0c <HAL_GPIO_Init+0x338>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d025      	beq.n	8003a06 <HAL_GPIO_Init+0x232>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a54      	ldr	r2, [pc, #336]	@ (8003b10 <HAL_GPIO_Init+0x33c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01f      	beq.n	8003a02 <HAL_GPIO_Init+0x22e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a53      	ldr	r2, [pc, #332]	@ (8003b14 <HAL_GPIO_Init+0x340>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d019      	beq.n	80039fe <HAL_GPIO_Init+0x22a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a52      	ldr	r2, [pc, #328]	@ (8003b18 <HAL_GPIO_Init+0x344>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <HAL_GPIO_Init+0x226>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a51      	ldr	r2, [pc, #324]	@ (8003b1c <HAL_GPIO_Init+0x348>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00d      	beq.n	80039f6 <HAL_GPIO_Init+0x222>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a50      	ldr	r2, [pc, #320]	@ (8003b20 <HAL_GPIO_Init+0x34c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <HAL_GPIO_Init+0x21e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003b24 <HAL_GPIO_Init+0x350>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_GPIO_Init+0x21a>
 80039ea:	2309      	movs	r3, #9
 80039ec:	e012      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 80039ee:	230a      	movs	r3, #10
 80039f0:	e010      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 80039f2:	2308      	movs	r3, #8
 80039f4:	e00e      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 80039f6:	2307      	movs	r3, #7
 80039f8:	e00c      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 80039fa:	2306      	movs	r3, #6
 80039fc:	e00a      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 80039fe:	2305      	movs	r3, #5
 8003a00:	e008      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 8003a02:	2304      	movs	r3, #4
 8003a04:	e006      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 8003a06:	2303      	movs	r3, #3
 8003a08:	e004      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e002      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_GPIO_Init+0x240>
 8003a12:	2300      	movs	r3, #0
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	f002 0203 	and.w	r2, r2, #3
 8003a1a:	0092      	lsls	r2, r2, #2
 8003a1c:	4093      	lsls	r3, r2
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a24:	4935      	ldr	r1, [pc, #212]	@ (8003afc <HAL_GPIO_Init+0x328>)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a32:	4b3d      	ldr	r3, [pc, #244]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a56:	4a34      	ldr	r2, [pc, #208]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a5c:	4b32      	ldr	r3, [pc, #200]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a80:	4a29      	ldr	r2, [pc, #164]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a86:	4b28      	ldr	r3, [pc, #160]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ad4:	4a14      	ldr	r2, [pc, #80]	@ (8003b28 <HAL_GPIO_Init+0x354>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3301      	adds	r3, #1
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b0f      	cmp	r3, #15
 8003ae4:	f67f ae84 	bls.w	80037f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3724      	adds	r7, #36	@ 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40013800 	.word	0x40013800
 8003b00:	40020000 	.word	0x40020000
 8003b04:	40020400 	.word	0x40020400
 8003b08:	40020800 	.word	0x40020800
 8003b0c:	40020c00 	.word	0x40020c00
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40021400 	.word	0x40021400
 8003b18:	40021800 	.word	0x40021800
 8003b1c:	40021c00 	.word	0x40021c00
 8003b20:	40022000 	.word	0x40022000
 8003b24:	40022400 	.word	0x40022400
 8003b28:	40013c00 	.word	0x40013c00

08003b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	e001      	b.n	8003b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b6c:	787b      	ldrb	r3, [r7, #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b78:	e003      	b.n	8003b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	041a      	lsls	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	619a      	str	r2, [r3, #24]
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b086      	sub	sp, #24
 8003b92:	af02      	add	r7, sp, #8
 8003b94:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e059      	b.n	8003c54 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f00d fc06 	bl	80113cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bce:	d102      	bne.n	8003bd6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f007 fa1d 	bl	800b01a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	7c1a      	ldrb	r2, [r3, #16]
 8003be8:	f88d 2000 	strb.w	r2, [sp]
 8003bec:	3304      	adds	r3, #4
 8003bee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bf0:	f007 f99e 	bl	800af30 <USB_CoreInit>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e026      	b.n	8003c54 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f007 fa15 	bl	800b03c <USB_SetCurrentMode>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e017      	b.n	8003c54 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7c1a      	ldrb	r2, [r3, #16]
 8003c2c:	f88d 2000 	strb.w	r2, [sp]
 8003c30:	3304      	adds	r3, #4
 8003c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c34:	f007 fbb8 	bl	800b3a8 <USB_HostInit>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e004      	b.n	8003c54 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b08b      	sub	sp, #44	@ 0x2c
 8003c60:	af04      	add	r7, sp, #16
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	70fb      	strb	r3, [r7, #3]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	70bb      	strb	r3, [r7, #2]
 8003c72:	4613      	mov	r3, r2
 8003c74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003c76:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003c78:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_HCD_HC_Init+0x2c>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e09d      	b.n	8003dc4 <HAL_HCD_HC_Init+0x168>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3319      	adds	r3, #25
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3314      	adds	r3, #20
 8003cb4:	787a      	ldrb	r2, [r7, #1]
 8003cb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3315      	adds	r3, #21
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3326      	adds	r3, #38	@ 0x26
 8003cdc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003ce0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	78bb      	ldrb	r3, [r7, #2]
 8003ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cea:	b2d8      	uxtb	r0, r3
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	3316      	adds	r3, #22
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fbc8 	bl	8004498 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003d08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	da0a      	bge.n	8003d26 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3317      	adds	r3, #23
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	e009      	b.n	8003d3a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3317      	adds	r3, #23
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f007 fc8a 	bl	800b658 <USB_GetHostSpeed>
 8003d44:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003d46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d10b      	bne.n	8003d66 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003d4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <HAL_HCD_HC_Init+0x10a>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2bbc      	cmp	r3, #188	@ 0xbc
 8003d60:	d901      	bls.n	8003d66 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003d62:	23bc      	movs	r3, #188	@ 0xbc
 8003d64:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3318      	adds	r3, #24
 8003d76:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003d7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	b298      	uxth	r0, r3
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3328      	adds	r3, #40	@ 0x28
 8003d90:	4602      	mov	r2, r0
 8003d92:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	787c      	ldrb	r4, [r7, #1]
 8003d9e:	78ba      	ldrb	r2, [r7, #2]
 8003da0:	78f9      	ldrb	r1, [r7, #3]
 8003da2:	9302      	str	r3, [sp, #8]
 8003da4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4623      	mov	r3, r4
 8003db2:	f007 fc79 	bl	800b6a8 <USB_HC_Init>
 8003db6:	4603      	mov	r3, r0
 8003db8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd90      	pop	{r4, r7, pc}

08003dcc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_HCD_HC_Halt+0x1e>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e00f      	b.n	8003e0a <HAL_HCD_HC_Halt+0x3e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	4611      	mov	r1, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f008 f80b 	bl	800be16 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	4611      	mov	r1, r2
 8003e20:	461a      	mov	r2, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	70fb      	strb	r3, [r7, #3]
 8003e26:	460b      	mov	r3, r1
 8003e28:	70bb      	strb	r3, [r7, #2]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	3317      	adds	r3, #23
 8003e3e:	78ba      	ldrb	r2, [r7, #2]
 8003e40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	3326      	adds	r3, #38	@ 0x26
 8003e52:	787a      	ldrb	r2, [r7, #1]
 8003e54:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003e56:	7c3b      	ldrb	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d114      	bne.n	8003e86 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	332a      	adds	r3, #42	@ 0x2a
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3319      	adds	r3, #25
 8003e80:	7f3a      	ldrb	r2, [r7, #28]
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e009      	b.n	8003e9a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	332a      	adds	r3, #42	@ 0x2a
 8003e96:	2202      	movs	r2, #2
 8003e98:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003e9a:	787b      	ldrb	r3, [r7, #1]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	f200 8102 	bhi.w	80040a6 <HAL_HCD_HC_SubmitRequest+0x292>
 8003ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003eb9 	.word	0x08003eb9
 8003eac:	08004091 	.word	0x08004091
 8003eb0:	08003f7d 	.word	0x08003f7d
 8003eb4:	08004007 	.word	0x08004007
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003eb8:	7c3b      	ldrb	r3, [r7, #16]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	f040 80f5 	bne.w	80040aa <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003ec0:	78bb      	ldrb	r3, [r7, #2]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d12d      	bne.n	8003f22 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003ec6:	8b3b      	ldrh	r3, [r7, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	333d      	adds	r3, #61	@ 0x3d
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	333d      	adds	r3, #61	@ 0x3d
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	332a      	adds	r3, #42	@ 0x2a
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003f0a:	e0ce      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	332a      	adds	r3, #42	@ 0x2a
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	701a      	strb	r2, [r3, #0]
      break;
 8003f20:	e0c3      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	331a      	adds	r3, #26
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	f040 80b8 	bne.w	80040aa <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	333c      	adds	r3, #60	@ 0x3c
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	332a      	adds	r3, #42	@ 0x2a
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
      break;
 8003f64:	e0a1      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	332a      	adds	r3, #42	@ 0x2a
 8003f76:	2202      	movs	r2, #2
 8003f78:	701a      	strb	r2, [r3, #0]
      break;
 8003f7a:	e096      	b.n	80040aa <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003f7c:	78bb      	ldrb	r3, [r7, #2]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d120      	bne.n	8003fc4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	333d      	adds	r3, #61	@ 0x3d
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	332a      	adds	r3, #42	@ 0x2a
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003fac:	e07e      	b.n	80040ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	332a      	adds	r3, #42	@ 0x2a
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	701a      	strb	r2, [r3, #0]
      break;
 8003fc2:	e073      	b.n	80040ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	333c      	adds	r3, #60	@ 0x3c
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	332a      	adds	r3, #42	@ 0x2a
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
      break;
 8003fee:	e05d      	b.n	80040ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	332a      	adds	r3, #42	@ 0x2a
 8004000:	2202      	movs	r2, #2
 8004002:	701a      	strb	r2, [r3, #0]
      break;
 8004004:	e052      	b.n	80040ac <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004006:	78bb      	ldrb	r3, [r7, #2]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d120      	bne.n	800404e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	333d      	adds	r3, #61	@ 0x3d
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	332a      	adds	r3, #42	@ 0x2a
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004036:	e039      	b.n	80040ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	332a      	adds	r3, #42	@ 0x2a
 8004048:	2202      	movs	r2, #2
 800404a:	701a      	strb	r2, [r3, #0]
      break;
 800404c:	e02e      	b.n	80040ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	333c      	adds	r3, #60	@ 0x3c
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	332a      	adds	r3, #42	@ 0x2a
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
      break;
 8004078:	e018      	b.n	80040ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	332a      	adds	r3, #42	@ 0x2a
 800408a:	2202      	movs	r2, #2
 800408c:	701a      	strb	r2, [r3, #0]
      break;
 800408e:	e00d      	b.n	80040ac <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	332a      	adds	r3, #42	@ 0x2a
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
      break;
 80040a4:	e002      	b.n	80040ac <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80040a6:	bf00      	nop
 80040a8:	e000      	b.n	80040ac <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80040aa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	332c      	adds	r3, #44	@ 0x2c
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	8b39      	ldrh	r1, [r7, #24]
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4403      	add	r3, r0
 80040d0:	3334      	adds	r3, #52	@ 0x34
 80040d2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80040d4:	78fa      	ldrb	r2, [r7, #3]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	334c      	adds	r3, #76	@ 0x4c
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	3338      	adds	r3, #56	@ 0x38
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	3315      	adds	r3, #21
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	334d      	adds	r3, #77	@ 0x4d
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	3310      	adds	r3, #16
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	1d19      	adds	r1, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	799b      	ldrb	r3, [r3, #6]
 800413e:	461a      	mov	r2, r3
 8004140:	f007 fbde 	bl	800b900 <USB_HC_StartXfer>
 8004144:	4603      	mov	r3, r0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop

08004150 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f007 f8de 	bl	800b328 <USB_GetMode>
 800416c:	4603      	mov	r3, r0
 800416e:	2b01      	cmp	r3, #1
 8004170:	f040 80fb 	bne.w	800436a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f007 f8a1 	bl	800b2c0 <USB_ReadInterrupts>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80f1 	beq.w	8004368 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f007 f898 	bl	800b2c0 <USB_ReadInterrupts>
 8004190:	4603      	mov	r3, r0
 8004192:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004196:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800419a:	d104      	bne.n	80041a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80041a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f007 f888 	bl	800b2c0 <USB_ReadInterrupts>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ba:	d104      	bne.n	80041c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80041c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f007 f878 	bl	800b2c0 <USB_ReadInterrupts>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041da:	d104      	bne.n	80041e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80041e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f007 f868 	bl	800b2c0 <USB_ReadInterrupts>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d103      	bne.n	8004202 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2202      	movs	r2, #2
 8004200:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f007 f85a 	bl	800b2c0 <USB_ReadInterrupts>
 800420c:	4603      	mov	r3, r0
 800420e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004216:	d120      	bne.n	800425a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004220:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d113      	bne.n	800425a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004232:	2110      	movs	r1, #16
 8004234:	6938      	ldr	r0, [r7, #16]
 8004236:	f006 ff4d 	bl	800b0d4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800423a:	6938      	ldr	r0, [r7, #16]
 800423c:	f006 ff7c 	bl	800b138 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	7a5b      	ldrb	r3, [r3, #9]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d105      	bne.n	8004254 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2101      	movs	r1, #1
 800424e:	4618      	mov	r0, r3
 8004250:	f007 f962 	bl	800b518 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f00d f937 	bl	80114c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f007 f82e 	bl	800b2c0 <USB_ReadInterrupts>
 8004264:	4603      	mov	r3, r0
 8004266:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800426a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800426e:	d102      	bne.n	8004276 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f001 fd4d 	bl	8005d10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f007 f820 	bl	800b2c0 <USB_ReadInterrupts>
 8004280:	4603      	mov	r3, r0
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b08      	cmp	r3, #8
 8004288:	d106      	bne.n	8004298 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f00d f900 	bl	8011490 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2208      	movs	r2, #8
 8004296:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f007 f80f 	bl	800b2c0 <USB_ReadInterrupts>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042ac:	d139      	bne.n	8004322 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f007 fd9e 	bl	800bdf4 <USB_HC_ReadInterrupt>
 80042b8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e025      	b.n	800430c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d018      	beq.n	8004306 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ea:	d106      	bne.n	80042fa <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	4619      	mov	r1, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f905 	bl	8004502 <HCD_HC_IN_IRQHandler>
 80042f8:	e005      	b.n	8004306 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	4619      	mov	r1, r3
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 ff67 	bl	80051d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3301      	adds	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	795b      	ldrb	r3, [r3, #5]
 8004310:	461a      	mov	r2, r3
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	4293      	cmp	r3, r2
 8004316:	d3d3      	bcc.n	80042c0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f006 ffca 	bl	800b2c0 <USB_ReadInterrupts>
 800432c:	4603      	mov	r3, r0
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	2b10      	cmp	r3, #16
 8004334:	d101      	bne.n	800433a <HAL_HCD_IRQHandler+0x1ea>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <HAL_HCD_IRQHandler+0x1ec>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d014      	beq.n	800436a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0210 	bic.w	r2, r2, #16
 800434e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f001 fbfe 	bl	8005b52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0210 	orr.w	r2, r2, #16
 8004364:	619a      	str	r2, [r3, #24]
 8004366:	e000      	b.n	800436a <HAL_HCD_IRQHandler+0x21a>
      return;
 8004368:	bf00      	nop
    }
  }
}
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_HCD_Start+0x16>
 8004382:	2302      	movs	r3, #2
 8004384:	e013      	b.n	80043ae <HAL_HCD_Start+0x3e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2101      	movs	r1, #1
 8004394:	4618      	mov	r0, r3
 8004396:	f007 f926 	bl	800b5e6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f006 fe2a 	bl	800aff8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_HCD_Stop+0x16>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e00d      	b.n	80043e8 <HAL_HCD_Stop+0x32>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f007 fe79 	bl	800c0d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f007 f8c8 	bl	800b592 <USB_ResetPort>
 8004402:	4603      	mov	r3, r0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334c      	adds	r3, #76	@ 0x4c
 8004428:	781b      	ldrb	r3, [r3, #0]
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	460b      	mov	r3, r1
 8004440:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	3338      	adds	r3, #56	@ 0x38
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f007 f90a 	bl	800b686 <USB_GetCurrentFrame>
 8004472:	4603      	mov	r3, r0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f007 f8e5 	bl	800b658 <USB_GetHostSpeed>
 800448e:	4603      	mov	r3, r0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80044a4:	78fa      	ldrb	r2, [r7, #3]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	331a      	adds	r3, #26
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80044b8:	78fa      	ldrb	r2, [r7, #3]
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	331b      	adds	r3, #27
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	3325      	adds	r3, #37	@ 0x25
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	3324      	adds	r3, #36	@ 0x24
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b086      	sub	sp, #24
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	4611      	mov	r1, r2
 8004520:	4618      	mov	r0, r3
 8004522:	f006 fee0 	bl	800b2e6 <USB_ReadChInterrupts>
 8004526:	4603      	mov	r3, r0
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d11a      	bne.n	8004566 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800453c:	461a      	mov	r2, r3
 800453e:	2304      	movs	r3, #4
 8004540:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004542:	78fa      	ldrb	r2, [r7, #3]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	334d      	adds	r3, #77	@ 0x4d
 8004552:	2207      	movs	r2, #7
 8004554:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f007 fc59 	bl	800be16 <USB_HC_Halt>
 8004564:	e09e      	b.n	80046a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f006 feb9 	bl	800b2e6 <USB_ReadChInterrupts>
 8004574:	4603      	mov	r3, r0
 8004576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800457e:	d11b      	bne.n	80045b8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4413      	add	r3, r2
 8004588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800458c:	461a      	mov	r2, r3
 800458e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004592:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004594:	78fa      	ldrb	r2, [r7, #3]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	334d      	adds	r3, #77	@ 0x4d
 80045a4:	2208      	movs	r2, #8
 80045a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	4611      	mov	r1, r2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f007 fc30 	bl	800be16 <USB_HC_Halt>
 80045b6:	e075      	b.n	80046a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f006 fe90 	bl	800b2e6 <USB_ReadChInterrupts>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d11a      	bne.n	8004606 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045dc:	461a      	mov	r2, r3
 80045de:	2308      	movs	r3, #8
 80045e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	334d      	adds	r3, #77	@ 0x4d
 80045f2:	2206      	movs	r2, #6
 80045f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f007 fc09 	bl	800be16 <USB_HC_Halt>
 8004604:	e04e      	b.n	80046a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f006 fe69 	bl	800b2e6 <USB_ReadChInterrupts>
 8004614:	4603      	mov	r3, r0
 8004616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800461e:	d11b      	bne.n	8004658 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800462c:	461a      	mov	r2, r3
 800462e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004632:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	334d      	adds	r3, #77	@ 0x4d
 8004644:	2209      	movs	r2, #9
 8004646:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f007 fbe0 	bl	800be16 <USB_HC_Halt>
 8004656:	e025      	b.n	80046a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f006 fe40 	bl	800b2e6 <USB_ReadChInterrupts>
 8004666:	4603      	mov	r3, r0
 8004668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466c:	2b80      	cmp	r3, #128	@ 0x80
 800466e:	d119      	bne.n	80046a4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800467c:	461a      	mov	r2, r3
 800467e:	2380      	movs	r3, #128	@ 0x80
 8004680:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	334d      	adds	r3, #77	@ 0x4d
 8004692:	2207      	movs	r2, #7
 8004694:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	78fa      	ldrb	r2, [r7, #3]
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f007 fbb9 	bl	800be16 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	78fa      	ldrb	r2, [r7, #3]
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f006 fe1a 	bl	800b2e6 <USB_ReadChInterrupts>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046bc:	d112      	bne.n	80046e4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f007 fba5 	bl	800be16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d8:	461a      	mov	r2, r3
 80046da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046de:	6093      	str	r3, [r2, #8]
 80046e0:	f000 bd75 	b.w	80051ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f006 fdfa 	bl	800b2e6 <USB_ReadChInterrupts>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	f040 8128 	bne.w	800494e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800470a:	461a      	mov	r2, r3
 800470c:	2320      	movs	r3, #32
 800470e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004710:	78fa      	ldrb	r2, [r7, #3]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	331b      	adds	r3, #27
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d119      	bne.n	800475a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004726:	78fa      	ldrb	r2, [r7, #3]
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	331b      	adds	r3, #27
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4413      	add	r3, r2
 8004742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	78fa      	ldrb	r2, [r7, #3]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	440a      	add	r2, r1
 8004750:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004758:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	799b      	ldrb	r3, [r3, #6]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01b      	beq.n	800479a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	3330      	adds	r3, #48	@ 0x30
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4413      	add	r3, r2
 800477c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004786:	78fa      	ldrb	r2, [r7, #3]
 8004788:	1ac9      	subs	r1, r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4403      	add	r3, r0
 8004796:	3338      	adds	r3, #56	@ 0x38
 8004798:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	334d      	adds	r3, #77	@ 0x4d
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	3344      	adds	r3, #68	@ 0x44
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ce:	461a      	mov	r2, r3
 80047d0:	2301      	movs	r3, #1
 80047d2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	3326      	adds	r3, #38	@ 0x26
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	3326      	adds	r3, #38	@ 0x26
 80047fa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d110      	bne.n	8004822 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f007 fb04 	bl	800be16 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4413      	add	r3, r2
 8004816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800481a:	461a      	mov	r2, r3
 800481c:	2310      	movs	r3, #16
 800481e:	6093      	str	r3, [r2, #8]
 8004820:	e03d      	b.n	800489e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	3326      	adds	r3, #38	@ 0x26
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d00a      	beq.n	800484e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	3326      	adds	r3, #38	@ 0x26
 8004848:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800484a:	2b01      	cmp	r3, #1
 800484c:	d127      	bne.n	800489e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4413      	add	r3, r2
 8004856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	0151      	lsls	r1, r2, #5
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	440a      	add	r2, r1
 8004864:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004868:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800486c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	334c      	adds	r3, #76	@ 0x4c
 800487e:	2201      	movs	r2, #1
 8004880:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	334c      	adds	r3, #76	@ 0x4c
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f00c fe23 	bl	80114e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	799b      	ldrb	r3, [r3, #6]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d13b      	bne.n	800491e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	3338      	adds	r3, #56	@ 0x38
 80048b6:	6819      	ldr	r1, [r3, #0]
 80048b8:	78fa      	ldrb	r2, [r7, #3]
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4613      	mov	r3, r2
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4403      	add	r3, r0
 80048c6:	3328      	adds	r3, #40	@ 0x28
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	440b      	add	r3, r1
 80048cc:	1e59      	subs	r1, r3, #1
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4403      	add	r3, r0
 80048dc:	3328      	adds	r3, #40	@ 0x28
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8470 	beq.w	80051ce <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	333c      	adds	r3, #60	@ 0x3c
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	f083 0301 	eor.w	r3, r3, #1
 8004906:	b2d8      	uxtb	r0, r3
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	333c      	adds	r3, #60	@ 0x3c
 8004916:	4602      	mov	r2, r0
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	f000 bc58 	b.w	80051ce <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	333c      	adds	r3, #60	@ 0x3c
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	f083 0301 	eor.w	r3, r3, #1
 8004936:	b2d8      	uxtb	r0, r3
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	333c      	adds	r3, #60	@ 0x3c
 8004946:	4602      	mov	r2, r0
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	f000 bc40 	b.w	80051ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	4611      	mov	r1, r2
 8004956:	4618      	mov	r0, r3
 8004958:	f006 fcc5 	bl	800b2e6 <USB_ReadChInterrupts>
 800495c:	4603      	mov	r3, r0
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b20      	cmp	r3, #32
 8004964:	d131      	bne.n	80049ca <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004972:	461a      	mov	r2, r3
 8004974:	2320      	movs	r3, #32
 8004976:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	331a      	adds	r3, #26
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b01      	cmp	r3, #1
 800498c:	f040 841f 	bne.w	80051ce <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	331b      	adds	r3, #27
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	334d      	adds	r3, #77	@ 0x4d
 80049b4:	2203      	movs	r2, #3
 80049b6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f007 fa28 	bl	800be16 <USB_HC_Halt>
 80049c6:	f000 bc02 	b.w	80051ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f006 fc87 	bl	800b2e6 <USB_ReadChInterrupts>
 80049d8:	4603      	mov	r3, r0
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	f040 8305 	bne.w	8004fee <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049f0:	461a      	mov	r2, r3
 80049f2:	2302      	movs	r3, #2
 80049f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	334d      	adds	r3, #77	@ 0x4d
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d114      	bne.n	8004a36 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a0c:	78fa      	ldrb	r2, [r7, #3]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	334d      	adds	r3, #77	@ 0x4d
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	334c      	adds	r3, #76	@ 0x4c
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e2cc      	b.n	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	334d      	adds	r3, #77	@ 0x4d
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b06      	cmp	r3, #6
 8004a4a:	d114      	bne.n	8004a76 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	334d      	adds	r3, #77	@ 0x4d
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004a60:	78fa      	ldrb	r2, [r7, #3]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	334c      	adds	r3, #76	@ 0x4c
 8004a70:	2205      	movs	r2, #5
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	e2ac      	b.n	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	334d      	adds	r3, #77	@ 0x4d
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b07      	cmp	r3, #7
 8004a8a:	d00b      	beq.n	8004aa4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	334d      	adds	r3, #77	@ 0x4d
 8004a9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a9e:	2b09      	cmp	r3, #9
 8004aa0:	f040 80a6 	bne.w	8004bf0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004aa4:	78fa      	ldrb	r2, [r7, #3]
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	334d      	adds	r3, #77	@ 0x4d
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004ab8:	78fa      	ldrb	r2, [r7, #3]
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	1a9b      	subs	r3, r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3344      	adds	r3, #68	@ 0x44
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	1c59      	adds	r1, r3, #1
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4403      	add	r3, r0
 8004ad8:	3344      	adds	r3, #68	@ 0x44
 8004ada:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	3344      	adds	r3, #68	@ 0x44
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d943      	bls.n	8004b7a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	440b      	add	r3, r1
 8004b00:	3344      	adds	r3, #68	@ 0x44
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004b06:	78fa      	ldrb	r2, [r7, #3]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	331a      	adds	r3, #26
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d123      	bne.n	8004b64 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004b1c:	78fa      	ldrb	r2, [r7, #3]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	331b      	adds	r3, #27
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	331c      	adds	r3, #28
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	0151      	lsls	r1, r2, #5
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	440a      	add	r2, r1
 8004b5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b62:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b64:	78fa      	ldrb	r2, [r7, #3]
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	334c      	adds	r3, #76	@ 0x4c
 8004b74:	2204      	movs	r2, #4
 8004b76:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b78:	e229      	b.n	8004fce <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	334c      	adds	r3, #76	@ 0x4c
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	3326      	adds	r3, #38	@ 0x26
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ba4:	78fa      	ldrb	r2, [r7, #3]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	3326      	adds	r3, #38	@ 0x26
 8004bb4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	f040 8209 	bne.w	8004fce <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bd2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bda:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be8:	461a      	mov	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bee:	e1ee      	b.n	8004fce <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	334d      	adds	r3, #77	@ 0x4d
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	f040 80c8 	bne.w	8004d98 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c08:	78fa      	ldrb	r2, [r7, #3]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	334d      	adds	r3, #77	@ 0x4d
 8004c18:	2202      	movs	r2, #2
 8004c1a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	331b      	adds	r3, #27
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	f040 81ce 	bne.w	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	3326      	adds	r3, #38	@ 0x26
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d16b      	bne.n	8004d22 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	3348      	adds	r3, #72	@ 0x48
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	1c59      	adds	r1, r3, #1
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4403      	add	r3, r0
 8004c6a:	3348      	adds	r3, #72	@ 0x48
 8004c6c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	4613      	mov	r3, r2
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	3348      	adds	r3, #72	@ 0x48
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d943      	bls.n	8004d0c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004c84:	78fa      	ldrb	r2, [r7, #3]
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	3348      	adds	r3, #72	@ 0x48
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	331b      	adds	r3, #27
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	3344      	adds	r3, #68	@ 0x44
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d809      	bhi.n	8004cd6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	331c      	adds	r3, #28
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	334c      	adds	r3, #76	@ 0x4c
 8004d06:	2204      	movs	r2, #4
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e014      	b.n	8004d36 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	334c      	adds	r3, #76	@ 0x4c
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	e009      	b.n	8004d36 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	334c      	adds	r3, #76	@ 0x4c
 8004d32:	2202      	movs	r2, #2
 8004d34:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	3326      	adds	r3, #38	@ 0x26
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00b      	beq.n	8004d64 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3326      	adds	r3, #38	@ 0x26
 8004d5c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	f040 8136 	bne.w	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d7a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d82:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d90:	461a      	mov	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e11b      	b.n	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004d98:	78fa      	ldrb	r2, [r7, #3]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	334d      	adds	r3, #77	@ 0x4d
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	f040 8081 	bne.w	8004eb2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	334d      	adds	r3, #77	@ 0x4d
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	1a9b      	subs	r3, r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	331b      	adds	r3, #27
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	f040 80fa 	bne.w	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	334c      	adds	r3, #76	@ 0x4c
 8004dec:	2202      	movs	r2, #2
 8004dee:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e0e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e2e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e4a:	f023 0320 	bic.w	r3, r3, #32
 8004e4e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e50:	78fa      	ldrb	r2, [r7, #3]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3326      	adds	r3, #38	@ 0x26
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00b      	beq.n	8004e7e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004e66:	78fa      	ldrb	r2, [r7, #3]
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	3326      	adds	r3, #38	@ 0x26
 8004e76:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	f040 80a9 	bne.w	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e94:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e9c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	e08e      	b.n	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	334d      	adds	r3, #77	@ 0x4d
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d143      	bne.n	8004f50 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ec8:	78fa      	ldrb	r2, [r7, #3]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	1a9b      	subs	r3, r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	334d      	adds	r3, #77	@ 0x4d
 8004ed8:	2202      	movs	r2, #2
 8004eda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004edc:	78fa      	ldrb	r2, [r7, #3]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	334c      	adds	r3, #76	@ 0x4c
 8004eec:	2202      	movs	r2, #2
 8004eee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	3326      	adds	r3, #38	@ 0x26
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	3326      	adds	r3, #38	@ 0x26
 8004f16:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d159      	bne.n	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f32:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f3a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e03f      	b.n	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	334d      	adds	r3, #77	@ 0x4d
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d126      	bne.n	8004fb4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	334d      	adds	r3, #77	@ 0x4d
 8004f76:	2202      	movs	r2, #2
 8004f78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	3344      	adds	r3, #68	@ 0x44
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	1c59      	adds	r1, r3, #1
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4403      	add	r3, r0
 8004f9a:	3344      	adds	r3, #68	@ 0x44
 8004f9c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	334c      	adds	r3, #76	@ 0x4c
 8004fae:	2204      	movs	r2, #4
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	e00d      	b.n	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	334d      	adds	r3, #77	@ 0x4d
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	f000 8100 	beq.w	80051cc <HCD_HC_IN_IRQHandler+0xcca>
 8004fcc:	e000      	b.n	8004fd0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	334c      	adds	r3, #76	@ 0x4c
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f00c fa7c 	bl	80114e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004fec:	e0ef      	b.n	80051ce <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f006 f975 	bl	800b2e6 <USB_ReadChInterrupts>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005002:	2b40      	cmp	r3, #64	@ 0x40
 8005004:	d12f      	bne.n	8005066 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4413      	add	r3, r2
 800500e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005012:	461a      	mov	r2, r3
 8005014:	2340      	movs	r3, #64	@ 0x40
 8005016:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	334d      	adds	r3, #77	@ 0x4d
 8005028:	2205      	movs	r2, #5
 800502a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	331a      	adds	r3, #26
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	3344      	adds	r3, #68	@ 0x44
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f006 fed9 	bl	800be16 <USB_HC_Halt>
 8005064:	e0b3      	b.n	80051ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	4611      	mov	r1, r2
 800506e:	4618      	mov	r0, r3
 8005070:	f006 f939 	bl	800b2e6 <USB_ReadChInterrupts>
 8005074:	4603      	mov	r3, r0
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b10      	cmp	r3, #16
 800507c:	f040 80a7 	bne.w	80051ce <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	3326      	adds	r3, #38	@ 0x26
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b03      	cmp	r3, #3
 8005094:	d11b      	bne.n	80050ce <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	3344      	adds	r3, #68	@ 0x44
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	334d      	adds	r3, #77	@ 0x4d
 80050ba:	2204      	movs	r2, #4
 80050bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	4611      	mov	r1, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f006 fea5 	bl	800be16 <USB_HC_Halt>
 80050cc:	e03f      	b.n	800514e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	3326      	adds	r3, #38	@ 0x26
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	3326      	adds	r3, #38	@ 0x26
 80050f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d129      	bne.n	800514e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	3344      	adds	r3, #68	@ 0x44
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	799b      	ldrb	r3, [r3, #6]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HCD_HC_IN_IRQHandler+0xc2a>
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	331b      	adds	r3, #27
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d110      	bne.n	800514e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800512c:	78fa      	ldrb	r2, [r7, #3]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	334d      	adds	r3, #77	@ 0x4d
 800513c:	2204      	movs	r2, #4
 800513e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	78fa      	ldrb	r2, [r7, #3]
 8005146:	4611      	mov	r1, r2
 8005148:	4618      	mov	r0, r3
 800514a:	f006 fe64 	bl	800be16 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800514e:	78fa      	ldrb	r2, [r7, #3]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	331b      	adds	r3, #27
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d129      	bne.n	80051b8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	331b      	adds	r3, #27
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4413      	add	r3, r2
 8005180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	78fa      	ldrb	r2, [r7, #3]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	440a      	add	r2, r1
 800518e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005196:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051b2:	f043 0320 	orr.w	r3, r3, #32
 80051b6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051c4:	461a      	mov	r2, r3
 80051c6:	2310      	movs	r3, #16
 80051c8:	6093      	str	r3, [r2, #8]
 80051ca:	e000      	b.n	80051ce <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80051cc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f006 f877 	bl	800b2e6 <USB_ReadChInterrupts>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d11b      	bne.n	800523a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005202:	78fb      	ldrb	r3, [r7, #3]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800520e:	461a      	mov	r2, r3
 8005210:	2304      	movs	r3, #4
 8005212:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	1a9b      	subs	r3, r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	334d      	adds	r3, #77	@ 0x4d
 8005224:	2207      	movs	r2, #7
 8005226:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	4611      	mov	r1, r2
 8005230:	4618      	mov	r0, r3
 8005232:	f006 fdf0 	bl	800be16 <USB_HC_Halt>
 8005236:	f000 bc89 	b.w	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	78fa      	ldrb	r2, [r7, #3]
 8005240:	4611      	mov	r1, r2
 8005242:	4618      	mov	r0, r3
 8005244:	f006 f84f 	bl	800b2e6 <USB_ReadChInterrupts>
 8005248:	4603      	mov	r3, r0
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b20      	cmp	r3, #32
 8005250:	f040 8082 	bne.w	8005358 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005260:	461a      	mov	r2, r3
 8005262:	2320      	movs	r3, #32
 8005264:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005266:	78fa      	ldrb	r2, [r7, #3]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	3319      	adds	r3, #25
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d124      	bne.n	80052c6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800527c:	78fa      	ldrb	r2, [r7, #3]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3319      	adds	r3, #25
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005290:	78fa      	ldrb	r2, [r7, #3]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	334c      	adds	r3, #76	@ 0x4c
 80052a0:	2202      	movs	r2, #2
 80052a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80052a4:	78fa      	ldrb	r2, [r7, #3]
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	334d      	adds	r3, #77	@ 0x4d
 80052b4:	2203      	movs	r2, #3
 80052b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	78fa      	ldrb	r2, [r7, #3]
 80052be:	4611      	mov	r1, r2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f006 fda8 	bl	800be16 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	331a      	adds	r3, #26
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	f040 8437 	bne.w	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	331b      	adds	r3, #27
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f040 842b 	bne.w	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	3326      	adds	r3, #38	@ 0x26
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d009      	beq.n	8005320 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800530c:	78fa      	ldrb	r2, [r7, #3]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	331b      	adds	r3, #27
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	334d      	adds	r3, #77	@ 0x4d
 8005330:	2203      	movs	r2, #3
 8005332:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f006 fd6a 	bl	800be16 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	3344      	adds	r3, #68	@ 0x44
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e3f9      	b.n	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f005 ffc0 	bl	800b2e6 <USB_ReadChInterrupts>
 8005366:	4603      	mov	r3, r0
 8005368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800536c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005370:	d111      	bne.n	8005396 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4413      	add	r3, r2
 800537a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800537e:	461a      	mov	r2, r3
 8005380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005384:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f006 fd41 	bl	800be16 <USB_HC_Halt>
 8005394:	e3da      	b.n	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	4611      	mov	r1, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	f005 ffa1 	bl	800b2e6 <USB_ReadChInterrupts>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d168      	bne.n	8005480 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80053ae:	78fa      	ldrb	r2, [r7, #3]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	3344      	adds	r3, #68	@ 0x44
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f005 ff8b 	bl	800b2e6 <USB_ReadChInterrupts>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d6:	2b40      	cmp	r3, #64	@ 0x40
 80053d8:	d112      	bne.n	8005400 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	3319      	adds	r3, #25
 80053ea:	2201      	movs	r2, #1
 80053ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053fa:	461a      	mov	r2, r3
 80053fc:	2340      	movs	r3, #64	@ 0x40
 80053fe:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	331b      	adds	r3, #27
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d019      	beq.n	800544a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	331b      	adds	r3, #27
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	440a      	add	r2, r1
 8005440:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005448:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4413      	add	r3, r2
 8005452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005456:	461a      	mov	r2, r3
 8005458:	2301      	movs	r3, #1
 800545a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	334d      	adds	r3, #77	@ 0x4d
 800546c:	2201      	movs	r2, #1
 800546e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	4611      	mov	r1, r2
 8005478:	4618      	mov	r0, r3
 800547a:	f006 fccc 	bl	800be16 <USB_HC_Halt>
 800547e:	e365      	b.n	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	78fa      	ldrb	r2, [r7, #3]
 8005486:	4611      	mov	r1, r2
 8005488:	4618      	mov	r0, r3
 800548a:	f005 ff2c 	bl	800b2e6 <USB_ReadChInterrupts>
 800548e:	4603      	mov	r3, r0
 8005490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005494:	2b40      	cmp	r3, #64	@ 0x40
 8005496:	d139      	bne.n	800550c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	334d      	adds	r3, #77	@ 0x4d
 80054a8:	2205      	movs	r2, #5
 80054aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	331a      	adds	r3, #26
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	3319      	adds	r3, #25
 80054d2:	2201      	movs	r2, #1
 80054d4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80054d6:	78fa      	ldrb	r2, [r7, #3]
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	4613      	mov	r3, r2
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	440b      	add	r3, r1
 80054e4:	3344      	adds	r3, #68	@ 0x44
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	78fa      	ldrb	r2, [r7, #3]
 80054f0:	4611      	mov	r1, r2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f006 fc8f 	bl	800be16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005504:	461a      	mov	r2, r3
 8005506:	2340      	movs	r3, #64	@ 0x40
 8005508:	6093      	str	r3, [r2, #8]
 800550a:	e31f      	b.n	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f005 fee6 	bl	800b2e6 <USB_ReadChInterrupts>
 800551a:	4603      	mov	r3, r0
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b08      	cmp	r3, #8
 8005522:	d11a      	bne.n	800555a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4413      	add	r3, r2
 800552c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005530:	461a      	mov	r2, r3
 8005532:	2308      	movs	r3, #8
 8005534:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005536:	78fa      	ldrb	r2, [r7, #3]
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	334d      	adds	r3, #77	@ 0x4d
 8005546:	2206      	movs	r2, #6
 8005548:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	4611      	mov	r1, r2
 8005552:	4618      	mov	r0, r3
 8005554:	f006 fc5f 	bl	800be16 <USB_HC_Halt>
 8005558:	e2f8      	b.n	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	4611      	mov	r1, r2
 8005562:	4618      	mov	r0, r3
 8005564:	f005 febf 	bl	800b2e6 <USB_ReadChInterrupts>
 8005568:	4603      	mov	r3, r0
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b10      	cmp	r3, #16
 8005570:	d144      	bne.n	80055fc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005572:	78fa      	ldrb	r2, [r7, #3]
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	3344      	adds	r3, #68	@ 0x44
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005586:	78fa      	ldrb	r2, [r7, #3]
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	4613      	mov	r3, r2
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	440b      	add	r3, r1
 8005594:	334d      	adds	r3, #77	@ 0x4d
 8005596:	2204      	movs	r2, #4
 8005598:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800559a:	78fa      	ldrb	r2, [r7, #3]
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	3319      	adds	r3, #25
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d114      	bne.n	80055da <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	3318      	adds	r3, #24
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80055c6:	78fa      	ldrb	r2, [r7, #3]
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	3319      	adds	r3, #25
 80055d6:	2201      	movs	r2, #1
 80055d8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	4611      	mov	r1, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f006 fc17 	bl	800be16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f4:	461a      	mov	r2, r3
 80055f6:	2310      	movs	r3, #16
 80055f8:	6093      	str	r3, [r2, #8]
 80055fa:	e2a7      	b.n	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	78fa      	ldrb	r2, [r7, #3]
 8005602:	4611      	mov	r1, r2
 8005604:	4618      	mov	r0, r3
 8005606:	f005 fe6e 	bl	800b2e6 <USB_ReadChInterrupts>
 800560a:	4603      	mov	r3, r0
 800560c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005610:	2b80      	cmp	r3, #128	@ 0x80
 8005612:	f040 8083 	bne.w	800571c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	799b      	ldrb	r3, [r3, #6]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d111      	bne.n	8005642 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	334d      	adds	r3, #77	@ 0x4d
 800562e:	2207      	movs	r2, #7
 8005630:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f006 fbeb 	bl	800be16 <USB_HC_Halt>
 8005640:	e062      	b.n	8005708 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005642:	78fa      	ldrb	r2, [r7, #3]
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	440b      	add	r3, r1
 8005650:	3344      	adds	r3, #68	@ 0x44
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	1c59      	adds	r1, r3, #1
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4613      	mov	r3, r2
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	1a9b      	subs	r3, r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4403      	add	r3, r0
 8005662:	3344      	adds	r3, #68	@ 0x44
 8005664:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3344      	adds	r3, #68	@ 0x44
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b02      	cmp	r3, #2
 800567a:	d922      	bls.n	80056c2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	3344      	adds	r3, #68	@ 0x44
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005690:	78fa      	ldrb	r2, [r7, #3]
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	334c      	adds	r3, #76	@ 0x4c
 80056a0:	2204      	movs	r2, #4
 80056a2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	334c      	adds	r3, #76	@ 0x4c
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	4619      	mov	r1, r3
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f00b ff12 	bl	80114e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80056c0:	e022      	b.n	8005708 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056c2:	78fa      	ldrb	r2, [r7, #3]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	1a9b      	subs	r3, r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	334c      	adds	r3, #76	@ 0x4c
 80056d2:	2202      	movs	r2, #2
 80056d4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056ec:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056f4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005702:	461a      	mov	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4413      	add	r3, r2
 8005710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005714:	461a      	mov	r2, r3
 8005716:	2380      	movs	r3, #128	@ 0x80
 8005718:	6093      	str	r3, [r2, #8]
 800571a:	e217      	b.n	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	4611      	mov	r1, r2
 8005724:	4618      	mov	r0, r3
 8005726:	f005 fdde 	bl	800b2e6 <USB_ReadChInterrupts>
 800572a:	4603      	mov	r3, r0
 800572c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005734:	d11b      	bne.n	800576e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005736:	78fa      	ldrb	r2, [r7, #3]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	334d      	adds	r3, #77	@ 0x4d
 8005746:	2209      	movs	r2, #9
 8005748:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	78fa      	ldrb	r2, [r7, #3]
 8005750:	4611      	mov	r1, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f006 fb5f 	bl	800be16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005764:	461a      	mov	r2, r3
 8005766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800576a:	6093      	str	r3, [r2, #8]
 800576c:	e1ee      	b.n	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	78fa      	ldrb	r2, [r7, #3]
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f005 fdb5 	bl	800b2e6 <USB_ReadChInterrupts>
 800577c:	4603      	mov	r3, r0
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	f040 81df 	bne.w	8005b46 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4413      	add	r3, r2
 8005790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005794:	461a      	mov	r2, r3
 8005796:	2302      	movs	r3, #2
 8005798:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800579a:	78fa      	ldrb	r2, [r7, #3]
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	334d      	adds	r3, #77	@ 0x4d
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	f040 8093 	bne.w	80058d8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	334d      	adds	r3, #77	@ 0x4d
 80057c2:	2202      	movs	r2, #2
 80057c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80057c6:	78fa      	ldrb	r2, [r7, #3]
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	334c      	adds	r3, #76	@ 0x4c
 80057d6:	2201      	movs	r2, #1
 80057d8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	3326      	adds	r3, #38	@ 0x26
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d00b      	beq.n	8005808 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80057f0:	78fa      	ldrb	r2, [r7, #3]
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	4613      	mov	r3, r2
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	3326      	adds	r3, #38	@ 0x26
 8005800:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005802:	2b03      	cmp	r3, #3
 8005804:	f040 8190 	bne.w	8005b28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	799b      	ldrb	r3, [r3, #6]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d115      	bne.n	800583c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4613      	mov	r3, r2
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	333d      	adds	r3, #61	@ 0x3d
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	78fa      	ldrb	r2, [r7, #3]
 8005824:	f083 0301 	eor.w	r3, r3, #1
 8005828:	b2d8      	uxtb	r0, r3
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	333d      	adds	r3, #61	@ 0x3d
 8005838:	4602      	mov	r2, r0
 800583a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	799b      	ldrb	r3, [r3, #6]
 8005840:	2b01      	cmp	r3, #1
 8005842:	f040 8171 	bne.w	8005b28 <HCD_HC_OUT_IRQHandler+0x954>
 8005846:	78fa      	ldrb	r2, [r7, #3]
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	1a9b      	subs	r3, r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	3334      	adds	r3, #52	@ 0x34
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8165 	beq.w	8005b28 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	3334      	adds	r3, #52	@ 0x34
 800586e:	6819      	ldr	r1, [r3, #0]
 8005870:	78fa      	ldrb	r2, [r7, #3]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	1a9b      	subs	r3, r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4403      	add	r3, r0
 800587e:	3328      	adds	r3, #40	@ 0x28
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	440b      	add	r3, r1
 8005884:	1e59      	subs	r1, r3, #1
 8005886:	78fa      	ldrb	r2, [r7, #3]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	1a9b      	subs	r3, r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4403      	add	r3, r0
 8005894:	3328      	adds	r3, #40	@ 0x28
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	fbb1 f3f3 	udiv	r3, r1, r3
 800589c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 813f 	beq.w	8005b28 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80058aa:	78fa      	ldrb	r2, [r7, #3]
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	333d      	adds	r3, #61	@ 0x3d
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	78fa      	ldrb	r2, [r7, #3]
 80058be:	f083 0301 	eor.w	r3, r3, #1
 80058c2:	b2d8      	uxtb	r0, r3
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	333d      	adds	r3, #61	@ 0x3d
 80058d2:	4602      	mov	r2, r0
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	e127      	b.n	8005b28 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80058d8:	78fa      	ldrb	r2, [r7, #3]
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	334d      	adds	r3, #77	@ 0x4d
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d120      	bne.n	8005930 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	4613      	mov	r3, r2
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	334d      	adds	r3, #77	@ 0x4d
 80058fe:	2202      	movs	r2, #2
 8005900:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005902:	78fa      	ldrb	r2, [r7, #3]
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	331b      	adds	r3, #27
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	f040 8107 	bne.w	8005b28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800591a:	78fa      	ldrb	r2, [r7, #3]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	334c      	adds	r3, #76	@ 0x4c
 800592a:	2202      	movs	r2, #2
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	e0fb      	b.n	8005b28 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005930:	78fa      	ldrb	r2, [r7, #3]
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	4613      	mov	r3, r2
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	1a9b      	subs	r3, r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	334d      	adds	r3, #77	@ 0x4d
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b04      	cmp	r3, #4
 8005944:	d13a      	bne.n	80059bc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005946:	78fa      	ldrb	r2, [r7, #3]
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	334d      	adds	r3, #77	@ 0x4d
 8005956:	2202      	movs	r2, #2
 8005958:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800595a:	78fa      	ldrb	r2, [r7, #3]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	334c      	adds	r3, #76	@ 0x4c
 800596a:	2202      	movs	r2, #2
 800596c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800596e:	78fa      	ldrb	r2, [r7, #3]
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	331b      	adds	r3, #27
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	f040 80d1 	bne.w	8005b28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005986:	78fa      	ldrb	r2, [r7, #3]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	331b      	adds	r3, #27
 8005996:	2200      	movs	r2, #0
 8005998:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800599a:	78fb      	ldrb	r3, [r7, #3]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059b8:	6053      	str	r3, [r2, #4]
 80059ba:	e0b5      	b.n	8005b28 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80059bc:	78fa      	ldrb	r2, [r7, #3]
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4613      	mov	r3, r2
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	334d      	adds	r3, #77	@ 0x4d
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	d114      	bne.n	80059fc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80059d2:	78fa      	ldrb	r2, [r7, #3]
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	334d      	adds	r3, #77	@ 0x4d
 80059e2:	2202      	movs	r2, #2
 80059e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80059e6:	78fa      	ldrb	r2, [r7, #3]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	334c      	adds	r3, #76	@ 0x4c
 80059f6:	2202      	movs	r2, #2
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	e095      	b.n	8005b28 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80059fc:	78fa      	ldrb	r2, [r7, #3]
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	334d      	adds	r3, #77	@ 0x4d
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d114      	bne.n	8005a3c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a12:	78fa      	ldrb	r2, [r7, #3]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	334d      	adds	r3, #77	@ 0x4d
 8005a22:	2202      	movs	r2, #2
 8005a24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005a26:	78fa      	ldrb	r2, [r7, #3]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	334c      	adds	r3, #76	@ 0x4c
 8005a36:	2205      	movs	r2, #5
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	e075      	b.n	8005b28 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005a3c:	78fa      	ldrb	r2, [r7, #3]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	334d      	adds	r3, #77	@ 0x4d
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b07      	cmp	r3, #7
 8005a50:	d00a      	beq.n	8005a68 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005a52:	78fa      	ldrb	r2, [r7, #3]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	1a9b      	subs	r3, r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	334d      	adds	r3, #77	@ 0x4d
 8005a62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005a64:	2b09      	cmp	r3, #9
 8005a66:	d170      	bne.n	8005b4a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a68:	78fa      	ldrb	r2, [r7, #3]
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	334d      	adds	r3, #77	@ 0x4d
 8005a78:	2202      	movs	r2, #2
 8005a7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	4613      	mov	r3, r2
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	440b      	add	r3, r1
 8005a8a:	3344      	adds	r3, #68	@ 0x44
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	1c59      	adds	r1, r3, #1
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	1a9b      	subs	r3, r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4403      	add	r3, r0
 8005a9c:	3344      	adds	r3, #68	@ 0x44
 8005a9e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	3344      	adds	r3, #68	@ 0x44
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d914      	bls.n	8005ae0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	4613      	mov	r3, r2
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	3344      	adds	r3, #68	@ 0x44
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	334c      	adds	r3, #76	@ 0x4c
 8005ada:	2204      	movs	r2, #4
 8005adc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005ade:	e022      	b.n	8005b26 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	1a9b      	subs	r3, r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	334c      	adds	r3, #76	@ 0x4c
 8005af0:	2202      	movs	r2, #2
 8005af2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b0a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b12:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b20:	461a      	mov	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b26:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005b28:	78fa      	ldrb	r2, [r7, #3]
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	334c      	adds	r3, #76	@ 0x4c
 8005b38:	781a      	ldrb	r2, [r3, #0]
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f00b fcd0 	bl	80114e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b44:	e002      	b.n	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005b46:	bf00      	nop
 8005b48:	e000      	b.n	8005b4c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005b4a:	bf00      	nop
  }
}
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b08a      	sub	sp, #40	@ 0x28
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	0c5b      	lsrs	r3, r3, #17
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	091b      	lsrs	r3, r3, #4
 8005b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d004      	beq.n	8005b98 <HCD_RXQLVL_IRQHandler+0x46>
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b05      	cmp	r3, #5
 8005b92:	f000 80b6 	beq.w	8005d02 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005b96:	e0b7      	b.n	8005d08 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80b3 	beq.w	8005d06 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	332c      	adds	r3, #44	@ 0x2c
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 80a7 	beq.w	8005d06 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005bb8:	6879      	ldr	r1, [r7, #4]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	3338      	adds	r3, #56	@ 0x38
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	18d1      	adds	r1, r2, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4403      	add	r3, r0
 8005bdc:	3334      	adds	r3, #52	@ 0x34
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4299      	cmp	r1, r3
 8005be2:	f200 8083 	bhi.w	8005cec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	332c      	adds	r3, #44	@ 0x2c
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	b292      	uxth	r2, r2
 8005c00:	4619      	mov	r1, r3
 8005c02:	f005 fb05 	bl	800b210 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	440b      	add	r3, r1
 8005c14:	332c      	adds	r3, #44	@ 0x2c
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	18d1      	adds	r1, r2, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	4613      	mov	r3, r2
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4403      	add	r3, r0
 8005c2a:	332c      	adds	r3, #44	@ 0x2c
 8005c2c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	4613      	mov	r3, r2
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	3338      	adds	r3, #56	@ 0x38
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	18d1      	adds	r1, r2, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4403      	add	r3, r0
 8005c52:	3338      	adds	r3, #56	@ 0x38
 8005c54:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	0cdb      	lsrs	r3, r3, #19
 8005c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c6a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	4613      	mov	r3, r2
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	3328      	adds	r3, #40	@ 0x28
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d13f      	bne.n	8005d06 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d03c      	beq.n	8005d06 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ca2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005caa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb8:	461a      	mov	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	333c      	adds	r3, #60	@ 0x3c
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f083 0301 	eor.w	r3, r3, #1
 8005cd4:	b2d8      	uxtb	r0, r3
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	333c      	adds	r3, #60	@ 0x3c
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	701a      	strb	r2, [r3, #0]
      break;
 8005cea:	e00c      	b.n	8005d06 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	334c      	adds	r3, #76	@ 0x4c
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	701a      	strb	r2, [r3, #0]
      break;
 8005d00:	e001      	b.n	8005d06 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005d02:	bf00      	nop
 8005d04:	e000      	b.n	8005d08 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005d06:	bf00      	nop
  }
}
 8005d08:	bf00      	nop
 8005d0a:	3728      	adds	r7, #40	@ 0x28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005d3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d10b      	bne.n	8005d60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d102      	bne.n	8005d58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f00b fbaa 	bl	80114ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f043 0302 	orr.w	r3, r3, #2
 8005d5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d132      	bne.n	8005dd0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f043 0308 	orr.w	r3, r3, #8
 8005d70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d126      	bne.n	8005dca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	7a5b      	ldrb	r3, [r3, #9]
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d113      	bne.n	8005dac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005d8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d8e:	d106      	bne.n	8005d9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2102      	movs	r1, #2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f005 fbbe 	bl	800b518 <USB_InitFSLSPClkSel>
 8005d9c:	e011      	b.n	8005dc2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2101      	movs	r1, #1
 8005da4:	4618      	mov	r0, r3
 8005da6:	f005 fbb7 	bl	800b518 <USB_InitFSLSPClkSel>
 8005daa:	e00a      	b.n	8005dc2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	79db      	ldrb	r3, [r3, #7]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d106      	bne.n	8005dc2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005dc0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f00b fba0 	bl	8011508 <HAL_HCD_PortEnabled_Callback>
 8005dc8:	e002      	b.n	8005dd0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f00b fbaa 	bl	8011524 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d103      	bne.n	8005de2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f043 0320 	orr.w	r3, r3, #32
 8005de0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005de8:	461a      	mov	r2, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6013      	str	r3, [r2, #0]
}
 8005dee:	bf00      	nop
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e12b      	b.n	8006062 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fb faa4 	bl	800136c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2224      	movs	r2, #36	@ 0x24
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e5c:	f000 ff82 	bl	8006d64 <HAL_RCC_GetPCLK1Freq>
 8005e60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	4a81      	ldr	r2, [pc, #516]	@ (800606c <HAL_I2C_Init+0x274>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d807      	bhi.n	8005e7c <HAL_I2C_Init+0x84>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4a80      	ldr	r2, [pc, #512]	@ (8006070 <HAL_I2C_Init+0x278>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	bf94      	ite	ls
 8005e74:	2301      	movls	r3, #1
 8005e76:	2300      	movhi	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	e006      	b.n	8005e8a <HAL_I2C_Init+0x92>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4a7d      	ldr	r2, [pc, #500]	@ (8006074 <HAL_I2C_Init+0x27c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	bf94      	ite	ls
 8005e84:	2301      	movls	r3, #1
 8005e86:	2300      	movhi	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e0e7      	b.n	8006062 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a78      	ldr	r2, [pc, #480]	@ (8006078 <HAL_I2C_Init+0x280>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	0c9b      	lsrs	r3, r3, #18
 8005e9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4a6a      	ldr	r2, [pc, #424]	@ (800606c <HAL_I2C_Init+0x274>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d802      	bhi.n	8005ecc <HAL_I2C_Init+0xd4>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	e009      	b.n	8005ee0 <HAL_I2C_Init+0xe8>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	4a69      	ldr	r2, [pc, #420]	@ (800607c <HAL_I2C_Init+0x284>)
 8005ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8005edc:	099b      	lsrs	r3, r3, #6
 8005ede:	3301      	adds	r3, #1
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005ef2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	495c      	ldr	r1, [pc, #368]	@ (800606c <HAL_I2C_Init+0x274>)
 8005efc:	428b      	cmp	r3, r1
 8005efe:	d819      	bhi.n	8005f34 <HAL_I2C_Init+0x13c>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	1e59      	subs	r1, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f0e:	1c59      	adds	r1, r3, #1
 8005f10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005f14:	400b      	ands	r3, r1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <HAL_I2C_Init+0x138>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1e59      	subs	r1, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f28:	3301      	adds	r3, #1
 8005f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f2e:	e051      	b.n	8005fd4 <HAL_I2C_Init+0x1dc>
 8005f30:	2304      	movs	r3, #4
 8005f32:	e04f      	b.n	8005fd4 <HAL_I2C_Init+0x1dc>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d111      	bne.n	8005f60 <HAL_I2C_Init+0x168>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	1e58      	subs	r0, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6859      	ldr	r1, [r3, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	440b      	add	r3, r1
 8005f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f4e:	3301      	adds	r3, #1
 8005f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf0c      	ite	eq
 8005f58:	2301      	moveq	r3, #1
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e012      	b.n	8005f86 <HAL_I2C_Init+0x18e>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	1e58      	subs	r0, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6859      	ldr	r1, [r3, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	0099      	lsls	r1, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f76:	3301      	adds	r3, #1
 8005f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bf0c      	ite	eq
 8005f80:	2301      	moveq	r3, #1
 8005f82:	2300      	movne	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_I2C_Init+0x196>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e022      	b.n	8005fd4 <HAL_I2C_Init+0x1dc>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10e      	bne.n	8005fb4 <HAL_I2C_Init+0x1bc>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1e58      	subs	r0, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6859      	ldr	r1, [r3, #4]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	440b      	add	r3, r1
 8005fa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fa8:	3301      	adds	r3, #1
 8005faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb2:	e00f      	b.n	8005fd4 <HAL_I2C_Init+0x1dc>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	1e58      	subs	r0, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6859      	ldr	r1, [r3, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	0099      	lsls	r1, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fca:	3301      	adds	r3, #1
 8005fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	6809      	ldr	r1, [r1, #0]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69da      	ldr	r2, [r3, #28]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006002:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6911      	ldr	r1, [r2, #16]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68d2      	ldr	r2, [r2, #12]
 800600e:	4311      	orrs	r1, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	430b      	orrs	r3, r1
 8006016:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695a      	ldr	r2, [r3, #20]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	000186a0 	.word	0x000186a0
 8006070:	001e847f 	.word	0x001e847f
 8006074:	003d08ff 	.word	0x003d08ff
 8006078:	431bde83 	.word	0x431bde83
 800607c:	10624dd3 	.word	0x10624dd3

08006080 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e0bf      	b.n	8006212 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fb f9de 	bl	8001468 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80060c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6999      	ldr	r1, [r3, #24]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060d8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6899      	ldr	r1, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b4a      	ldr	r3, [pc, #296]	@ (800621c <HAL_LTDC_Init+0x19c>)
 80060f4:	400b      	ands	r3, r1
 80060f6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	041b      	lsls	r3, r3, #16
 80060fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6899      	ldr	r1, [r3, #8]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699a      	ldr	r2, [r3, #24]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68d9      	ldr	r1, [r3, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	4b3e      	ldr	r3, [pc, #248]	@ (800621c <HAL_LTDC_Init+0x19c>)
 8006122:	400b      	ands	r3, r1
 8006124:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68d9      	ldr	r1, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1a      	ldr	r2, [r3, #32]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6919      	ldr	r1, [r3, #16]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b33      	ldr	r3, [pc, #204]	@ (800621c <HAL_LTDC_Init+0x19c>)
 8006150:	400b      	ands	r3, r1
 8006152:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006158:	041b      	lsls	r3, r3, #16
 800615a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6919      	ldr	r1, [r3, #16]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6959      	ldr	r1, [r3, #20]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	4b27      	ldr	r3, [pc, #156]	@ (800621c <HAL_LTDC_Init+0x19c>)
 800617e:	400b      	ands	r3, r1
 8006180:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006186:	041b      	lsls	r3, r3, #16
 8006188:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6959      	ldr	r1, [r3, #20]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80061b0:	041b      	lsls	r3, r3, #16
 80061b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80061c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0206 	orr.w	r2, r2, #6
 80061ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	f000f800 	.word	0xf000f800

08006220 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006236:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d023      	beq.n	800628a <HAL_LTDC_IRQHandler+0x6a>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01e      	beq.n	800628a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0204 	bic.w	r2, r2, #4
 800625a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2204      	movs	r2, #4
 8006262:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800626a:	f043 0201 	orr.w	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2204      	movs	r2, #4
 8006278:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f86f 	bl	8006368 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d023      	beq.n	80062dc <HAL_LTDC_IRQHandler+0xbc>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01e      	beq.n	80062dc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0202 	bic.w	r2, r2, #2
 80062ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2202      	movs	r2, #2
 80062b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062bc:	f043 0202 	orr.w	r2, r3, #2
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2204      	movs	r2, #4
 80062ca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f846 	bl	8006368 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01b      	beq.n	800631e <HAL_LTDC_IRQHandler+0xfe>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d016      	beq.n	800631e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0201 	bic.w	r2, r2, #1
 80062fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2201      	movs	r2, #1
 8006306:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f82f 	bl	800637c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01b      	beq.n	8006360 <HAL_LTDC_IRQHandler+0x140>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d016      	beq.n	8006360 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0208 	bic.w	r2, r2, #8
 8006340:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2208      	movs	r2, #8
 8006348:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f818 	bl	8006390 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006360:	bf00      	nop
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80063a4:	b5b0      	push	{r4, r5, r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_LTDC_ConfigLayer+0x1a>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e02c      	b.n	8006418 <HAL_LTDC_ConfigLayer+0x74>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2202      	movs	r2, #2
 80063ca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2134      	movs	r1, #52	@ 0x34
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	4413      	add	r3, r2
 80063da:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	4614      	mov	r4, r2
 80063e2:	461d      	mov	r5, r3
 80063e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f811 	bl	8006420 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2201      	movs	r2, #1
 8006404:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bdb0      	pop	{r4, r5, r7, pc}

08006420 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006420:	b480      	push	{r7}
 8006422:	b089      	sub	sp, #36	@ 0x24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	0c1b      	lsrs	r3, r3, #16
 8006438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800643c:	4413      	add	r3, r2
 800643e:	041b      	lsls	r3, r3, #16
 8006440:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	01db      	lsls	r3, r3, #7
 800644c:	4413      	add	r3, r2
 800644e:	3384      	adds	r3, #132	@ 0x84
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	4611      	mov	r1, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	01d2      	lsls	r2, r2, #7
 800645c:	440a      	add	r2, r1
 800645e:	3284      	adds	r2, #132	@ 0x84
 8006460:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006464:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	0c1b      	lsrs	r3, r3, #16
 8006472:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006476:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006478:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4619      	mov	r1, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	01db      	lsls	r3, r3, #7
 8006484:	440b      	add	r3, r1
 8006486:	3384      	adds	r3, #132	@ 0x84
 8006488:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800648e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800649e:	4413      	add	r3, r2
 80064a0:	041b      	lsls	r3, r3, #16
 80064a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	01db      	lsls	r3, r3, #7
 80064ae:	4413      	add	r3, r2
 80064b0:	3384      	adds	r3, #132	@ 0x84
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	4611      	mov	r1, r2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	01d2      	lsls	r2, r2, #7
 80064be:	440a      	add	r2, r1
 80064c0:	3284      	adds	r2, #132	@ 0x84
 80064c2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80064c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064d6:	4413      	add	r3, r2
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4619      	mov	r1, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	01db      	lsls	r3, r3, #7
 80064e4:	440b      	add	r3, r1
 80064e6:	3384      	adds	r3, #132	@ 0x84
 80064e8:	4619      	mov	r1, r3
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	01db      	lsls	r3, r3, #7
 80064fa:	4413      	add	r3, r2
 80064fc:	3384      	adds	r3, #132	@ 0x84
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	4611      	mov	r1, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	01d2      	lsls	r2, r2, #7
 800650a:	440a      	add	r2, r1
 800650c:	3284      	adds	r2, #132	@ 0x84
 800650e:	f023 0307 	bic.w	r3, r3, #7
 8006512:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	01db      	lsls	r3, r3, #7
 800651e:	4413      	add	r3, r2
 8006520:	3384      	adds	r3, #132	@ 0x84
 8006522:	461a      	mov	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800653a:	041b      	lsls	r3, r3, #16
 800653c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	061b      	lsls	r3, r3, #24
 8006544:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	01db      	lsls	r3, r3, #7
 8006550:	4413      	add	r3, r2
 8006552:	3384      	adds	r3, #132	@ 0x84
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	01db      	lsls	r3, r3, #7
 8006560:	4413      	add	r3, r2
 8006562:	3384      	adds	r3, #132	@ 0x84
 8006564:	461a      	mov	r2, r3
 8006566:	2300      	movs	r3, #0
 8006568:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006570:	461a      	mov	r2, r3
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	431a      	orrs	r2, r3
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	431a      	orrs	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4619      	mov	r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	01db      	lsls	r3, r3, #7
 8006584:	440b      	add	r3, r1
 8006586:	3384      	adds	r3, #132	@ 0x84
 8006588:	4619      	mov	r1, r3
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	461a      	mov	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	01db      	lsls	r3, r3, #7
 800659a:	4413      	add	r3, r2
 800659c:	3384      	adds	r3, #132	@ 0x84
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	4611      	mov	r1, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	01d2      	lsls	r2, r2, #7
 80065aa:	440a      	add	r2, r1
 80065ac:	3284      	adds	r2, #132	@ 0x84
 80065ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80065b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	01db      	lsls	r3, r3, #7
 80065be:	4413      	add	r3, r2
 80065c0:	3384      	adds	r3, #132	@ 0x84
 80065c2:	461a      	mov	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	01db      	lsls	r3, r3, #7
 80065d4:	4413      	add	r3, r2
 80065d6:	3384      	adds	r3, #132	@ 0x84
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	6812      	ldr	r2, [r2, #0]
 80065de:	4611      	mov	r1, r2
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	01d2      	lsls	r2, r2, #7
 80065e4:	440a      	add	r2, r1
 80065e6:	3284      	adds	r2, #132	@ 0x84
 80065e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80065ec:	f023 0307 	bic.w	r3, r3, #7
 80065f0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	69da      	ldr	r2, [r3, #28]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	6809      	ldr	r1, [r1, #0]
 80065fe:	4608      	mov	r0, r1
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	01c9      	lsls	r1, r1, #7
 8006604:	4401      	add	r1, r0
 8006606:	3184      	adds	r1, #132	@ 0x84
 8006608:	4313      	orrs	r3, r2
 800660a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	01db      	lsls	r3, r3, #7
 8006616:	4413      	add	r3, r2
 8006618:	3384      	adds	r3, #132	@ 0x84
 800661a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	01db      	lsls	r3, r3, #7
 8006626:	4413      	add	r3, r2
 8006628:	3384      	adds	r3, #132	@ 0x84
 800662a:	461a      	mov	r2, r3
 800662c:	2300      	movs	r3, #0
 800662e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	01db      	lsls	r3, r3, #7
 800663a:	4413      	add	r3, r2
 800663c:	3384      	adds	r3, #132	@ 0x84
 800663e:	461a      	mov	r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006644:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d102      	bne.n	8006654 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800664e:	2304      	movs	r3, #4
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	e01b      	b.n	800668c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d102      	bne.n	8006662 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800665c:	2303      	movs	r3, #3
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	e014      	b.n	800668c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b04      	cmp	r3, #4
 8006668:	d00b      	beq.n	8006682 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800666e:	2b02      	cmp	r3, #2
 8006670:	d007      	beq.n	8006682 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006676:	2b03      	cmp	r3, #3
 8006678:	d003      	beq.n	8006682 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800667e:	2b07      	cmp	r3, #7
 8006680:	d102      	bne.n	8006688 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006682:	2302      	movs	r3, #2
 8006684:	61fb      	str	r3, [r7, #28]
 8006686:	e001      	b.n	800668c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006688:	2301      	movs	r3, #1
 800668a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	01db      	lsls	r3, r3, #7
 8006696:	4413      	add	r3, r2
 8006698:	3384      	adds	r3, #132	@ 0x84
 800669a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	4611      	mov	r1, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	01d2      	lsls	r2, r2, #7
 80066a6:	440a      	add	r2, r1
 80066a8:	3284      	adds	r2, #132	@ 0x84
 80066aa:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80066ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	fb02 f303 	mul.w	r3, r2, r3
 80066ba:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6859      	ldr	r1, [r3, #4]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	1acb      	subs	r3, r1, r3
 80066c6:	69f9      	ldr	r1, [r7, #28]
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	6809      	ldr	r1, [r1, #0]
 80066d2:	4608      	mov	r0, r1
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	01c9      	lsls	r1, r1, #7
 80066d8:	4401      	add	r1, r0
 80066da:	3184      	adds	r1, #132	@ 0x84
 80066dc:	4313      	orrs	r3, r2
 80066de:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	01db      	lsls	r3, r3, #7
 80066ea:	4413      	add	r3, r2
 80066ec:	3384      	adds	r3, #132	@ 0x84
 80066ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	4611      	mov	r1, r2
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	01d2      	lsls	r2, r2, #7
 80066fa:	440a      	add	r2, r1
 80066fc:	3284      	adds	r2, #132	@ 0x84
 80066fe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006702:	f023 0307 	bic.w	r3, r3, #7
 8006706:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	461a      	mov	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	01db      	lsls	r3, r3, #7
 8006712:	4413      	add	r3, r2
 8006714:	3384      	adds	r3, #132	@ 0x84
 8006716:	461a      	mov	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	01db      	lsls	r3, r3, #7
 8006728:	4413      	add	r3, r2
 800672a:	3384      	adds	r3, #132	@ 0x84
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	6812      	ldr	r2, [r2, #0]
 8006732:	4611      	mov	r1, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	01d2      	lsls	r2, r2, #7
 8006738:	440a      	add	r2, r1
 800673a:	3284      	adds	r2, #132	@ 0x84
 800673c:	f043 0301 	orr.w	r3, r3, #1
 8006740:	6013      	str	r3, [r2, #0]
}
 8006742:	bf00      	nop
 8006744:	3724      	adds	r7, #36	@ 0x24
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	4b20      	ldr	r3, [pc, #128]	@ (80067e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006762:	4a1f      	ldr	r2, [pc, #124]	@ (80067e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006768:	6413      	str	r3, [r2, #64]	@ 0x40
 800676a:	4b1d      	ldr	r3, [pc, #116]	@ (80067e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006776:	4b1b      	ldr	r3, [pc, #108]	@ (80067e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800677c:	f7fb fafa 	bl	8001d74 <HAL_GetTick>
 8006780:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006782:	e009      	b.n	8006798 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006784:	f7fb faf6 	bl	8001d74 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006792:	d901      	bls.n	8006798 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e01f      	b.n	80067d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006798:	4b13      	ldr	r3, [pc, #76]	@ (80067e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a4:	d1ee      	bne.n	8006784 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067a6:	4b11      	ldr	r3, [pc, #68]	@ (80067ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067ac:	f7fb fae2 	bl	8001d74 <HAL_GetTick>
 80067b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067b2:	e009      	b.n	80067c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067b4:	f7fb fade 	bl	8001d74 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067c2:	d901      	bls.n	80067c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e007      	b.n	80067d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067c8:	4b07      	ldr	r3, [pc, #28]	@ (80067e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067d4:	d1ee      	bne.n	80067b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40023800 	.word	0x40023800
 80067e4:	420e0040 	.word	0x420e0040
 80067e8:	40007000 	.word	0x40007000
 80067ec:	420e0044 	.word	0x420e0044

080067f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80067f8:	f7fb fabc 	bl	8001d74 <HAL_GetTick>
 80067fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e069      	b.n	80068dc <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10b      	bne.n	800682c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7fa fe4b 	bl	80014b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006822:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f85e 	bl	80068e8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	3b01      	subs	r3, #1
 800683c:	021a      	lsls	r2, r3, #8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	2120      	movs	r1, #32
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f856 	bl	8006904 <QSPI_WaitFlagStateUntilTimeout>
 8006858:	4603      	mov	r3, r0
 800685a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800685c:	7afb      	ldrb	r3, [r7, #11]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d137      	bne.n	80068d2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800686c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6852      	ldr	r2, [r2, #4]
 8006874:	0611      	lsls	r1, r2, #24
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68d2      	ldr	r2, [r2, #12]
 800687a:	4311      	orrs	r1, r2
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	69d2      	ldr	r2, [r2, #28]
 8006880:	4311      	orrs	r1, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6a12      	ldr	r2, [r2, #32]
 8006886:	4311      	orrs	r1, r2
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	430b      	orrs	r3, r1
 800688e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	4b13      	ldr	r3, [pc, #76]	@ (80068e4 <HAL_QSPI_Init+0xf4>)
 8006898:	4013      	ands	r3, r2
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6912      	ldr	r2, [r2, #16]
 800689e:	0411      	lsls	r1, r2, #16
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6952      	ldr	r2, [r2, #20]
 80068a4:	4311      	orrs	r1, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6992      	ldr	r2, [r2, #24]
 80068aa:	4311      	orrs	r1, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	430b      	orrs	r3, r1
 80068b2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0201 	orr.w	r2, r2, #1
 80068c2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80068da:	7afb      	ldrb	r3, [r7, #11]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	ffe0f8fe 	.word	0xffe0f8fe

080068e8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006914:	e01a      	b.n	800694c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d016      	beq.n	800694c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691e:	f7fb fa29 	bl	8001d74 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	429a      	cmp	r2, r3
 800692c:	d302      	bcc.n	8006934 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10b      	bne.n	800694c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2204      	movs	r2, #4
 8006938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006940:	f043 0201 	orr.w	r2, r3, #1
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e00e      	b.n	800696a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4013      	ands	r3, r2
 8006956:	2b00      	cmp	r3, #0
 8006958:	bf14      	ite	ne
 800695a:	2301      	movne	r3, #1
 800695c:	2300      	moveq	r3, #0
 800695e:	b2db      	uxtb	r3, r3
 8006960:	461a      	mov	r2, r3
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	429a      	cmp	r2, r3
 8006966:	d1d6      	bne.n	8006916 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e0cc      	b.n	8006b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006988:	4b68      	ldr	r3, [pc, #416]	@ (8006b2c <HAL_RCC_ClockConfig+0x1b8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 030f 	and.w	r3, r3, #15
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d90c      	bls.n	80069b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006996:	4b65      	ldr	r3, [pc, #404]	@ (8006b2c <HAL_RCC_ClockConfig+0x1b8>)
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699e:	4b63      	ldr	r3, [pc, #396]	@ (8006b2c <HAL_RCC_ClockConfig+0x1b8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d001      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0b8      	b.n	8006b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d020      	beq.n	80069fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069c8:	4b59      	ldr	r3, [pc, #356]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	4a58      	ldr	r2, [pc, #352]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 80069ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80069d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0308 	and.w	r3, r3, #8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069e0:	4b53      	ldr	r3, [pc, #332]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	4a52      	ldr	r2, [pc, #328]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 80069e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80069ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ec:	4b50      	ldr	r3, [pc, #320]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	494d      	ldr	r1, [pc, #308]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d044      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d107      	bne.n	8006a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a12:	4b47      	ldr	r3, [pc, #284]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d119      	bne.n	8006a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e07f      	b.n	8006b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d003      	beq.n	8006a32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d107      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a32:	4b3f      	ldr	r3, [pc, #252]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e06f      	b.n	8006b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a42:	4b3b      	ldr	r3, [pc, #236]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e067      	b.n	8006b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a52:	4b37      	ldr	r3, [pc, #220]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f023 0203 	bic.w	r2, r3, #3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	4934      	ldr	r1, [pc, #208]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a64:	f7fb f986 	bl	8001d74 <HAL_GetTick>
 8006a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a6a:	e00a      	b.n	8006a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a6c:	f7fb f982 	bl	8001d74 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e04f      	b.n	8006b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a82:	4b2b      	ldr	r3, [pc, #172]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 020c 	and.w	r2, r3, #12
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d1eb      	bne.n	8006a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a94:	4b25      	ldr	r3, [pc, #148]	@ (8006b2c <HAL_RCC_ClockConfig+0x1b8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d20c      	bcs.n	8006abc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa2:	4b22      	ldr	r3, [pc, #136]	@ (8006b2c <HAL_RCC_ClockConfig+0x1b8>)
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aaa:	4b20      	ldr	r3, [pc, #128]	@ (8006b2c <HAL_RCC_ClockConfig+0x1b8>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 030f 	and.w	r3, r3, #15
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d001      	beq.n	8006abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e032      	b.n	8006b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d008      	beq.n	8006ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ac8:	4b19      	ldr	r3, [pc, #100]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	4916      	ldr	r1, [pc, #88]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d009      	beq.n	8006afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ae6:	4b12      	ldr	r3, [pc, #72]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	490e      	ldr	r1, [pc, #56]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006afa:	f000 f821 	bl	8006b40 <HAL_RCC_GetSysClockFreq>
 8006afe:	4602      	mov	r2, r0
 8006b00:	4b0b      	ldr	r3, [pc, #44]	@ (8006b30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	091b      	lsrs	r3, r3, #4
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	490a      	ldr	r1, [pc, #40]	@ (8006b34 <HAL_RCC_ClockConfig+0x1c0>)
 8006b0c:	5ccb      	ldrb	r3, [r1, r3]
 8006b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b12:	4a09      	ldr	r2, [pc, #36]	@ (8006b38 <HAL_RCC_ClockConfig+0x1c4>)
 8006b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006b16:	4b09      	ldr	r3, [pc, #36]	@ (8006b3c <HAL_RCC_ClockConfig+0x1c8>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fa ffa4 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40023c00 	.word	0x40023c00
 8006b30:	40023800 	.word	0x40023800
 8006b34:	08011c74 	.word	0x08011c74
 8006b38:	20000000 	.word	0x20000000
 8006b3c:	20000004 	.word	0x20000004

08006b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b44:	b094      	sub	sp, #80	@ 0x50
 8006b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b58:	4b79      	ldr	r3, [pc, #484]	@ (8006d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 030c 	and.w	r3, r3, #12
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d00d      	beq.n	8006b80 <HAL_RCC_GetSysClockFreq+0x40>
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	f200 80e1 	bhi.w	8006d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_RCC_GetSysClockFreq+0x34>
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d003      	beq.n	8006b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8006b72:	e0db      	b.n	8006d2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b74:	4b73      	ldr	r3, [pc, #460]	@ (8006d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b78:	e0db      	b.n	8006d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b7a:	4b73      	ldr	r3, [pc, #460]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b7e:	e0d8      	b.n	8006d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b80:	4b6f      	ldr	r3, [pc, #444]	@ (8006d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8006d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d063      	beq.n	8006c5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b96:	4b6a      	ldr	r3, [pc, #424]	@ (8006d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	099b      	lsrs	r3, r3, #6
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ba0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006baa:	2300      	movs	r3, #0
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	f04f 0000 	mov.w	r0, #0
 8006bba:	f04f 0100 	mov.w	r1, #0
 8006bbe:	0159      	lsls	r1, r3, #5
 8006bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bc4:	0150      	lsls	r0, r2, #5
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4621      	mov	r1, r4
 8006bcc:	1a51      	subs	r1, r2, r1
 8006bce:	6139      	str	r1, [r7, #16]
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	f04f 0200 	mov.w	r2, #0
 8006bdc:	f04f 0300 	mov.w	r3, #0
 8006be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006be4:	4659      	mov	r1, fp
 8006be6:	018b      	lsls	r3, r1, #6
 8006be8:	4651      	mov	r1, sl
 8006bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bee:	4651      	mov	r1, sl
 8006bf0:	018a      	lsls	r2, r1, #6
 8006bf2:	4651      	mov	r1, sl
 8006bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c12:	4690      	mov	r8, r2
 8006c14:	4699      	mov	r9, r3
 8006c16:	4623      	mov	r3, r4
 8006c18:	eb18 0303 	adds.w	r3, r8, r3
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	462b      	mov	r3, r5
 8006c20:	eb49 0303 	adc.w	r3, r9, r3
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	f04f 0200 	mov.w	r2, #0
 8006c2a:	f04f 0300 	mov.w	r3, #0
 8006c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c32:	4629      	mov	r1, r5
 8006c34:	024b      	lsls	r3, r1, #9
 8006c36:	4621      	mov	r1, r4
 8006c38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	024a      	lsls	r2, r1, #9
 8006c40:	4610      	mov	r0, r2
 8006c42:	4619      	mov	r1, r3
 8006c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c46:	2200      	movs	r2, #0
 8006c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c50:	f7f9 fad6 	bl	8000200 <__aeabi_uldivmod>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4613      	mov	r3, r2
 8006c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c5c:	e058      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c5e:	4b38      	ldr	r3, [pc, #224]	@ (8006d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	099b      	lsrs	r3, r3, #6
 8006c64:	2200      	movs	r2, #0
 8006c66:	4618      	mov	r0, r3
 8006c68:	4611      	mov	r1, r2
 8006c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c6e:	623b      	str	r3, [r7, #32]
 8006c70:	2300      	movs	r3, #0
 8006c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c78:	4642      	mov	r2, r8
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	f04f 0000 	mov.w	r0, #0
 8006c80:	f04f 0100 	mov.w	r1, #0
 8006c84:	0159      	lsls	r1, r3, #5
 8006c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c8a:	0150      	lsls	r0, r2, #5
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4641      	mov	r1, r8
 8006c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c96:	4649      	mov	r1, r9
 8006c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8006cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	00eb      	lsls	r3, r5, #3
 8006cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cc6:	00e2      	lsls	r2, r4, #3
 8006cc8:	4614      	mov	r4, r2
 8006cca:	461d      	mov	r5, r3
 8006ccc:	4643      	mov	r3, r8
 8006cce:	18e3      	adds	r3, r4, r3
 8006cd0:	603b      	str	r3, [r7, #0]
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	eb45 0303 	adc.w	r3, r5, r3
 8006cd8:	607b      	str	r3, [r7, #4]
 8006cda:	f04f 0200 	mov.w	r2, #0
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	028b      	lsls	r3, r1, #10
 8006cea:	4621      	mov	r1, r4
 8006cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	028a      	lsls	r2, r1, #10
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	61fa      	str	r2, [r7, #28]
 8006d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d04:	f7f9 fa7c 	bl	8000200 <__aeabi_uldivmod>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d10:	4b0b      	ldr	r3, [pc, #44]	@ (8006d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	0c1b      	lsrs	r3, r3, #16
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d2a:	e002      	b.n	8006d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d2c:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3750      	adds	r7, #80	@ 0x50
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d3e:	bf00      	nop
 8006d40:	40023800 	.word	0x40023800
 8006d44:	00f42400 	.word	0x00f42400
 8006d48:	007a1200 	.word	0x007a1200

08006d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d50:	4b03      	ldr	r3, [pc, #12]	@ (8006d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d52:	681b      	ldr	r3, [r3, #0]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	20000000 	.word	0x20000000

08006d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d68:	f7ff fff0 	bl	8006d4c <HAL_RCC_GetHCLKFreq>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	0a9b      	lsrs	r3, r3, #10
 8006d74:	f003 0307 	and.w	r3, r3, #7
 8006d78:	4903      	ldr	r1, [pc, #12]	@ (8006d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d7a:	5ccb      	ldrb	r3, [r1, r3]
 8006d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40023800 	.word	0x40023800
 8006d88:	08011c84 	.word	0x08011c84

08006d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d90:	f7ff ffdc 	bl	8006d4c <HAL_RCC_GetHCLKFreq>
 8006d94:	4602      	mov	r2, r0
 8006d96:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	0b5b      	lsrs	r3, r3, #13
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	4903      	ldr	r1, [pc, #12]	@ (8006db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006da2:	5ccb      	ldrb	r3, [r1, r3]
 8006da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	40023800 	.word	0x40023800
 8006db0:	08011c84 	.word	0x08011c84

08006db4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	220f      	movs	r2, #15
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006dc4:	4b12      	ldr	r3, [pc, #72]	@ (8006e10 <HAL_RCC_GetClockConfig+0x5c>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0203 	and.w	r2, r3, #3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006e10 <HAL_RCC_GetClockConfig+0x5c>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e10 <HAL_RCC_GetClockConfig+0x5c>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006de8:	4b09      	ldr	r3, [pc, #36]	@ (8006e10 <HAL_RCC_GetClockConfig+0x5c>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	08db      	lsrs	r3, r3, #3
 8006dee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006df6:	4b07      	ldr	r3, [pc, #28]	@ (8006e14 <HAL_RCC_GetClockConfig+0x60>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 020f 	and.w	r2, r3, #15
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	601a      	str	r2, [r3, #0]
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40023800 	.word	0x40023800
 8006e14:	40023c00 	.word	0x40023c00

08006e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006e40:	4b66      	ldr	r3, [pc, #408]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e46:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4e:	4963      	ldr	r1, [pc, #396]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006e62:	4b5e      	ldr	r3, [pc, #376]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e68:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e70:	495a      	ldr	r1, [pc, #360]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10b      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d105      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d075      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e9c:	4b50      	ldr	r3, [pc, #320]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ea2:	f7fa ff67 	bl	8001d74 <HAL_GetTick>
 8006ea6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006eaa:	f7fa ff63 	bl	8001d74 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e1dc      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ebc:	4b47      	ldr	r3, [pc, #284]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f0      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d009      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	019a      	lsls	r2, r3, #6
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	071b      	lsls	r3, r3, #28
 8006ee0:	493e      	ldr	r1, [pc, #248]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d01f      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ef4:	4b39      	ldr	r3, [pc, #228]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006efa:	0f1b      	lsrs	r3, r3, #28
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	019a      	lsls	r2, r3, #6
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	061b      	lsls	r3, r3, #24
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	071b      	lsls	r3, r3, #28
 8006f14:	4931      	ldr	r1, [pc, #196]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f22:	f023 021f 	bic.w	r2, r3, #31
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	492b      	ldr	r1, [pc, #172]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00d      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	019a      	lsls	r2, r3, #6
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	061b      	lsls	r3, r3, #24
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	071b      	lsls	r3, r3, #28
 8006f54:	4921      	ldr	r1, [pc, #132]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f5c:	4b20      	ldr	r3, [pc, #128]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f62:	f7fa ff07 	bl	8001d74 <HAL_GetTick>
 8006f66:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f68:	e008      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f6a:	f7fa ff03 	bl	8001d74 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e17c      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f7c:	4b17      	ldr	r3, [pc, #92]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0f0      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d112      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10c      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80ce 	beq.w	800714a <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006fb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fb6:	f040 80c8 	bne.w	800714a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006fba:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fc0:	f7fa fed8 	bl	8001d74 <HAL_GetTick>
 8006fc4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fc6:	e00f      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006fc8:	f7fa fed4 	bl	8001d74 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d908      	bls.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e14d      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8006fda:	bf00      	nop
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	42470068 	.word	0x42470068
 8006fe4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fe8:	4ba5      	ldr	r3, [pc, #660]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ff4:	d0e8      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0304 	and.w	r3, r3, #4
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d02e      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007002:	4b9f      	ldr	r3, [pc, #636]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007008:	0c1b      	lsrs	r3, r3, #16
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	3301      	adds	r3, #1
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007014:	4b9a      	ldr	r3, [pc, #616]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701a:	0f1b      	lsrs	r3, r3, #28
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	019a      	lsls	r2, r3, #6
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	085b      	lsrs	r3, r3, #1
 800702c:	3b01      	subs	r3, #1
 800702e:	041b      	lsls	r3, r3, #16
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	061b      	lsls	r3, r3, #24
 8007038:	431a      	orrs	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	071b      	lsls	r3, r3, #28
 800703e:	4990      	ldr	r1, [pc, #576]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007040:	4313      	orrs	r3, r2
 8007042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007046:	4b8e      	ldr	r3, [pc, #568]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800704c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007054:	3b01      	subs	r3, #1
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	4989      	ldr	r1, [pc, #548]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800705a:	4313      	orrs	r3, r2
 800705c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d02c      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800706c:	4b84      	ldr	r3, [pc, #528]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800706e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	f003 0303 	and.w	r3, r3, #3
 8007078:	3301      	adds	r3, #1
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800707e:	4b80      	ldr	r3, [pc, #512]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007084:	0e1b      	lsrs	r3, r3, #24
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	019a      	lsls	r2, r3, #6
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	085b      	lsrs	r3, r3, #1
 8007096:	3b01      	subs	r3, #1
 8007098:	041b      	lsls	r3, r3, #16
 800709a:	431a      	orrs	r2, r3
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	061b      	lsls	r3, r3, #24
 80070a0:	431a      	orrs	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	071b      	lsls	r3, r3, #28
 80070a8:	4975      	ldr	r1, [pc, #468]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80070b0:	4b73      	ldr	r3, [pc, #460]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070be:	4970      	ldr	r1, [pc, #448]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d024      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80070d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070da:	d11f      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070dc:	4b68      	ldr	r3, [pc, #416]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e2:	0e1b      	lsrs	r3, r3, #24
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070ea:	4b65      	ldr	r3, [pc, #404]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f0:	0f1b      	lsrs	r3, r3, #28
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	019a      	lsls	r2, r3, #6
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	085b      	lsrs	r3, r3, #1
 8007104:	3b01      	subs	r3, #1
 8007106:	041b      	lsls	r3, r3, #16
 8007108:	431a      	orrs	r2, r3
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	061b      	lsls	r3, r3, #24
 800710e:	431a      	orrs	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	071b      	lsls	r3, r3, #28
 8007114:	495a      	ldr	r1, [pc, #360]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007116:	4313      	orrs	r3, r2
 8007118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800711c:	4b59      	ldr	r3, [pc, #356]	@ (8007284 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800711e:	2201      	movs	r2, #1
 8007120:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007122:	f7fa fe27 	bl	8001d74 <HAL_GetTick>
 8007126:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007128:	e008      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800712a:	f7fa fe23 	bl	8001d74 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d901      	bls.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e09c      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800713c:	4b50      	ldr	r3, [pc, #320]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007148:	d1ef      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 8083 	beq.w	800725e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007158:	2300      	movs	r3, #0
 800715a:	60bb      	str	r3, [r7, #8]
 800715c:	4b48      	ldr	r3, [pc, #288]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800715e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007160:	4a47      	ldr	r2, [pc, #284]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007166:	6413      	str	r3, [r2, #64]	@ 0x40
 8007168:	4b45      	ldr	r3, [pc, #276]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800716a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007170:	60bb      	str	r3, [r7, #8]
 8007172:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007174:	4b44      	ldr	r3, [pc, #272]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a43      	ldr	r2, [pc, #268]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800717a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800717e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007180:	f7fa fdf8 	bl	8001d74 <HAL_GetTick>
 8007184:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007186:	e008      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007188:	f7fa fdf4 	bl	8001d74 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e06d      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800719a:	4b3b      	ldr	r3, [pc, #236]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0f0      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071a6:	4b36      	ldr	r3, [pc, #216]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ae:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d02f      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d028      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071cc:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071ce:	4b2f      	ldr	r3, [pc, #188]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071d4:	4b2d      	ldr	r3, [pc, #180]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80071da:	4a29      	ldr	r2, [pc, #164]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80071e0:	4b27      	ldr	r3, [pc, #156]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d114      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80071ec:	f7fa fdc2 	bl	8001d74 <HAL_GetTick>
 80071f0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f2:	e00a      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071f4:	f7fa fdbe 	bl	8001d74 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007202:	4293      	cmp	r3, r2
 8007204:	d901      	bls.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e035      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800720a:	4b1d      	ldr	r3, [pc, #116]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800720c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0ee      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800721e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007222:	d10d      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007224:	4b16      	ldr	r3, [pc, #88]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007230:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007238:	4911      	ldr	r1, [pc, #68]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800723a:	4313      	orrs	r3, r2
 800723c:	608b      	str	r3, [r1, #8]
 800723e:	e005      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007240:	4b0f      	ldr	r3, [pc, #60]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	4a0e      	ldr	r2, [pc, #56]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007246:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800724a:	6093      	str	r3, [r2, #8]
 800724c:	4b0c      	ldr	r3, [pc, #48]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800724e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007258:	4909      	ldr	r1, [pc, #36]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800725a:	4313      	orrs	r3, r2
 800725c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0310 	and.w	r3, r3, #16
 8007266:	2b00      	cmp	r3, #0
 8007268:	d004      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007270:	4b07      	ldr	r3, [pc, #28]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8007272:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	40023800 	.word	0x40023800
 8007284:	42470070 	.word	0x42470070
 8007288:	40007000 	.word	0x40007000
 800728c:	42470e40 	.word	0x42470e40
 8007290:	424711e0 	.word	0x424711e0

08007294 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e273      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d075      	beq.n	800739e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80072b2:	4b88      	ldr	r3, [pc, #544]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 030c 	and.w	r3, r3, #12
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d00c      	beq.n	80072d8 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072be:	4b85      	ldr	r3, [pc, #532]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 030c 	and.w	r3, r3, #12
        || \
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	d112      	bne.n	80072f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ca:	4b82      	ldr	r3, [pc, #520]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072d6:	d10b      	bne.n	80072f0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d8:	4b7e      	ldr	r3, [pc, #504]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d05b      	beq.n	800739c <HAL_RCC_OscConfig+0x108>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d157      	bne.n	800739c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e24e      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072f8:	d106      	bne.n	8007308 <HAL_RCC_OscConfig+0x74>
 80072fa:	4b76      	ldr	r3, [pc, #472]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a75      	ldr	r2, [pc, #468]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	e01d      	b.n	8007344 <HAL_RCC_OscConfig+0xb0>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007310:	d10c      	bne.n	800732c <HAL_RCC_OscConfig+0x98>
 8007312:	4b70      	ldr	r3, [pc, #448]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a6f      	ldr	r2, [pc, #444]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	4b6d      	ldr	r3, [pc, #436]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a6c      	ldr	r2, [pc, #432]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	e00b      	b.n	8007344 <HAL_RCC_OscConfig+0xb0>
 800732c:	4b69      	ldr	r3, [pc, #420]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a68      	ldr	r2, [pc, #416]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	4b66      	ldr	r3, [pc, #408]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a65      	ldr	r2, [pc, #404]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 800733e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d013      	beq.n	8007374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7fa fd12 	bl	8001d74 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007354:	f7fa fd0e 	bl	8001d74 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b64      	cmp	r3, #100	@ 0x64
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e213      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007366:	4b5b      	ldr	r3, [pc, #364]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0f0      	beq.n	8007354 <HAL_RCC_OscConfig+0xc0>
 8007372:	e014      	b.n	800739e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007374:	f7fa fcfe 	bl	8001d74 <HAL_GetTick>
 8007378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800737c:	f7fa fcfa 	bl	8001d74 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b64      	cmp	r3, #100	@ 0x64
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e1ff      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800738e:	4b51      	ldr	r3, [pc, #324]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1f0      	bne.n	800737c <HAL_RCC_OscConfig+0xe8>
 800739a:	e000      	b.n	800739e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800739c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d063      	beq.n	8007472 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80073aa:	4b4a      	ldr	r3, [pc, #296]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f003 030c 	and.w	r3, r3, #12
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00b      	beq.n	80073ce <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073b6:	4b47      	ldr	r3, [pc, #284]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 030c 	and.w	r3, r3, #12
        || \
 80073be:	2b08      	cmp	r3, #8
 80073c0:	d11c      	bne.n	80073fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073c2:	4b44      	ldr	r3, [pc, #272]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d116      	bne.n	80073fc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ce:	4b41      	ldr	r3, [pc, #260]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <HAL_RCC_OscConfig+0x152>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d001      	beq.n	80073e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e1d3      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073e6:	4b3b      	ldr	r3, [pc, #236]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	4937      	ldr	r1, [pc, #220]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073fa:	e03a      	b.n	8007472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d020      	beq.n	8007446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007404:	4b34      	ldr	r3, [pc, #208]	@ (80074d8 <HAL_RCC_OscConfig+0x244>)
 8007406:	2201      	movs	r2, #1
 8007408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740a:	f7fa fcb3 	bl	8001d74 <HAL_GetTick>
 800740e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007410:	e008      	b.n	8007424 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007412:	f7fa fcaf 	bl	8001d74 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b02      	cmp	r3, #2
 800741e:	d901      	bls.n	8007424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e1b4      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007424:	4b2b      	ldr	r3, [pc, #172]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0f0      	beq.n	8007412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007430:	4b28      	ldr	r3, [pc, #160]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	4925      	ldr	r1, [pc, #148]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007440:	4313      	orrs	r3, r2
 8007442:	600b      	str	r3, [r1, #0]
 8007444:	e015      	b.n	8007472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007446:	4b24      	ldr	r3, [pc, #144]	@ (80074d8 <HAL_RCC_OscConfig+0x244>)
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744c:	f7fa fc92 	bl	8001d74 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007454:	f7fa fc8e 	bl	8001d74 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e193      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007466:	4b1b      	ldr	r3, [pc, #108]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f0      	bne.n	8007454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d036      	beq.n	80074ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d016      	beq.n	80074b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007486:	4b15      	ldr	r3, [pc, #84]	@ (80074dc <HAL_RCC_OscConfig+0x248>)
 8007488:	2201      	movs	r2, #1
 800748a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748c:	f7fa fc72 	bl	8001d74 <HAL_GetTick>
 8007490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007492:	e008      	b.n	80074a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007494:	f7fa fc6e 	bl	8001d74 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e173      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074a6:	4b0b      	ldr	r3, [pc, #44]	@ (80074d4 <HAL_RCC_OscConfig+0x240>)
 80074a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f0      	beq.n	8007494 <HAL_RCC_OscConfig+0x200>
 80074b2:	e01b      	b.n	80074ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074b4:	4b09      	ldr	r3, [pc, #36]	@ (80074dc <HAL_RCC_OscConfig+0x248>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ba:	f7fa fc5b 	bl	8001d74 <HAL_GetTick>
 80074be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074c0:	e00e      	b.n	80074e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074c2:	f7fa fc57 	bl	8001d74 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d907      	bls.n	80074e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e15c      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
 80074d4:	40023800 	.word	0x40023800
 80074d8:	42470000 	.word	0x42470000
 80074dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e0:	4b8a      	ldr	r3, [pc, #552]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 80074e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1ea      	bne.n	80074c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8097 	beq.w	8007628 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074fe:	4b83      	ldr	r3, [pc, #524]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10f      	bne.n	800752a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800750a:	2300      	movs	r3, #0
 800750c:	60bb      	str	r3, [r7, #8]
 800750e:	4b7f      	ldr	r3, [pc, #508]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007512:	4a7e      	ldr	r2, [pc, #504]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007518:	6413      	str	r3, [r2, #64]	@ 0x40
 800751a:	4b7c      	ldr	r3, [pc, #496]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007522:	60bb      	str	r3, [r7, #8]
 8007524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007526:	2301      	movs	r3, #1
 8007528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800752a:	4b79      	ldr	r3, [pc, #484]	@ (8007710 <HAL_RCC_OscConfig+0x47c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007532:	2b00      	cmp	r3, #0
 8007534:	d118      	bne.n	8007568 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007536:	4b76      	ldr	r3, [pc, #472]	@ (8007710 <HAL_RCC_OscConfig+0x47c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a75      	ldr	r2, [pc, #468]	@ (8007710 <HAL_RCC_OscConfig+0x47c>)
 800753c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007542:	f7fa fc17 	bl	8001d74 <HAL_GetTick>
 8007546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007548:	e008      	b.n	800755c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800754a:	f7fa fc13 	bl	8001d74 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d901      	bls.n	800755c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e118      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800755c:	4b6c      	ldr	r3, [pc, #432]	@ (8007710 <HAL_RCC_OscConfig+0x47c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0f0      	beq.n	800754a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d106      	bne.n	800757e <HAL_RCC_OscConfig+0x2ea>
 8007570:	4b66      	ldr	r3, [pc, #408]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007574:	4a65      	ldr	r2, [pc, #404]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007576:	f043 0301 	orr.w	r3, r3, #1
 800757a:	6713      	str	r3, [r2, #112]	@ 0x70
 800757c:	e01c      	b.n	80075b8 <HAL_RCC_OscConfig+0x324>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2b05      	cmp	r3, #5
 8007584:	d10c      	bne.n	80075a0 <HAL_RCC_OscConfig+0x30c>
 8007586:	4b61      	ldr	r3, [pc, #388]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758a:	4a60      	ldr	r2, [pc, #384]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 800758c:	f043 0304 	orr.w	r3, r3, #4
 8007590:	6713      	str	r3, [r2, #112]	@ 0x70
 8007592:	4b5e      	ldr	r3, [pc, #376]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007596:	4a5d      	ldr	r2, [pc, #372]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007598:	f043 0301 	orr.w	r3, r3, #1
 800759c:	6713      	str	r3, [r2, #112]	@ 0x70
 800759e:	e00b      	b.n	80075b8 <HAL_RCC_OscConfig+0x324>
 80075a0:	4b5a      	ldr	r3, [pc, #360]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a4:	4a59      	ldr	r2, [pc, #356]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 80075a6:	f023 0301 	bic.w	r3, r3, #1
 80075aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80075ac:	4b57      	ldr	r3, [pc, #348]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b0:	4a56      	ldr	r2, [pc, #344]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 80075b2:	f023 0304 	bic.w	r3, r3, #4
 80075b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d015      	beq.n	80075ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c0:	f7fa fbd8 	bl	8001d74 <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075c6:	e00a      	b.n	80075de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075c8:	f7fa fbd4 	bl	8001d74 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e0d7      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075de:	4b4b      	ldr	r3, [pc, #300]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0ee      	beq.n	80075c8 <HAL_RCC_OscConfig+0x334>
 80075ea:	e014      	b.n	8007616 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ec:	f7fa fbc2 	bl	8001d74 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075f2:	e00a      	b.n	800760a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075f4:	f7fa fbbe 	bl	8001d74 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007602:	4293      	cmp	r3, r2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e0c1      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800760a:	4b40      	ldr	r3, [pc, #256]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 800760c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1ee      	bne.n	80075f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d105      	bne.n	8007628 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800761c:	4b3b      	ldr	r3, [pc, #236]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	4a3a      	ldr	r2, [pc, #232]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007626:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 80ad 	beq.w	800778c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007632:	4b36      	ldr	r3, [pc, #216]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 030c 	and.w	r3, r3, #12
 800763a:	2b08      	cmp	r3, #8
 800763c:	d060      	beq.n	8007700 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d145      	bne.n	80076d2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007646:	4b33      	ldr	r3, [pc, #204]	@ (8007714 <HAL_RCC_OscConfig+0x480>)
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764c:	f7fa fb92 	bl	8001d74 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007654:	f7fa fb8e 	bl	8001d74 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e093      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007666:	4b29      	ldr	r3, [pc, #164]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f0      	bne.n	8007654 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	69da      	ldr	r2, [r3, #28]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007680:	019b      	lsls	r3, r3, #6
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	085b      	lsrs	r3, r3, #1
 800768a:	3b01      	subs	r3, #1
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007694:	061b      	lsls	r3, r3, #24
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769c:	071b      	lsls	r3, r3, #28
 800769e:	491b      	ldr	r1, [pc, #108]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007714 <HAL_RCC_OscConfig+0x480>)
 80076a6:	2201      	movs	r2, #1
 80076a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076aa:	f7fa fb63 	bl	8001d74 <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076b0:	e008      	b.n	80076c4 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b2:	f7fa fb5f 	bl	8001d74 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e064      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076c4:	4b11      	ldr	r3, [pc, #68]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0f0      	beq.n	80076b2 <HAL_RCC_OscConfig+0x41e>
 80076d0:	e05c      	b.n	800778c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076d2:	4b10      	ldr	r3, [pc, #64]	@ (8007714 <HAL_RCC_OscConfig+0x480>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d8:	f7fa fb4c 	bl	8001d74 <HAL_GetTick>
 80076dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076de:	e008      	b.n	80076f2 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076e0:	f7fa fb48 	bl	8001d74 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e04d      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076f2:	4b06      	ldr	r3, [pc, #24]	@ (800770c <HAL_RCC_OscConfig+0x478>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1f0      	bne.n	80076e0 <HAL_RCC_OscConfig+0x44c>
 80076fe:	e045      	b.n	800778c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d107      	bne.n	8007718 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e040      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
 800770c:	40023800 	.word	0x40023800
 8007710:	40007000 	.word	0x40007000
 8007714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007718:	4b1f      	ldr	r3, [pc, #124]	@ (8007798 <HAL_RCC_OscConfig+0x504>)
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d030      	beq.n	8007788 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007730:	429a      	cmp	r2, r3
 8007732:	d129      	bne.n	8007788 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800773e:	429a      	cmp	r2, r3
 8007740:	d122      	bne.n	8007788 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007748:	4013      	ands	r3, r2
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800774e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007750:	4293      	cmp	r3, r2
 8007752:	d119      	bne.n	8007788 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775e:	085b      	lsrs	r3, r3, #1
 8007760:	3b01      	subs	r3, #1
 8007762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007764:	429a      	cmp	r2, r3
 8007766:	d10f      	bne.n	8007788 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007774:	429a      	cmp	r2, r3
 8007776:	d107      	bne.n	8007788 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007782:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007784:	429a      	cmp	r2, r3
 8007786:	d001      	beq.n	800778c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	40023800 	.word	0x40023800

0800779c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d904      	bls.n	80077be <HAL_SAI_InitProtocol+0x22>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	3b03      	subs	r3, #3
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d812      	bhi.n	80077e2 <HAL_SAI_InitProtocol+0x46>
 80077bc:	e008      	b.n	80077d0 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 fb23 	bl	8007e10 <SAI_InitI2S>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]
      break;
 80077ce:	e00b      	b.n	80077e8 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 fbc8 	bl	8007f6c <SAI_InitPCM>
 80077dc:	4603      	mov	r3, r0
 80077de:	75fb      	strb	r3, [r7, #23]
      break;
 80077e0:	e002      	b.n	80077e8 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	75fb      	strb	r3, [r7, #23]
      break;
 80077e6:	bf00      	nop
  }

  if (status == HAL_OK)
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 f808 	bl	8007804 <HAL_SAI_Init>
 80077f4:	4603      	mov	r3, r0
 80077f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e10c      	b.n	8007a40 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d106      	bne.n	8007840 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fa f870 	bl	8001920 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fc0f 	bl	800806c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fc7c 	bl	800814c <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d030      	beq.n	80078be <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fc9b 	bl	8008198 <SAI_GetInputClock>
 8007862:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	025b      	lsls	r3, r3, #9
 8007876:	fbb2 f3f3 	udiv	r3, r2, r3
 800787a:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4a72      	ldr	r2, [pc, #456]	@ (8007a48 <HAL_SAI_Init+0x244>)
 8007880:	fba2 2303 	umull	r2, r3, r2, r3
 8007884:	08da      	lsrs	r2, r3, #3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	4b6e      	ldr	r3, [pc, #440]	@ (8007a48 <HAL_SAI_Init+0x244>)
 800788e:	fba3 2301 	umull	r2, r3, r3, r1
 8007892:	08da      	lsrs	r2, r3, #3
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	1aca      	subs	r2, r1, r3
 800789e:	2a08      	cmp	r2, #8
 80078a0:	d904      	bls.n	80078ac <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d104      	bne.n	80078be <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b8:	085a      	lsrs	r2, r3, #1
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_SAI_Init+0xca>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d109      	bne.n	80078e2 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d101      	bne.n	80078da <HAL_SAI_Init+0xd6>
 80078d6:	2300      	movs	r3, #0
 80078d8:	e001      	b.n	80078de <HAL_SAI_Init+0xda>
 80078da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	e008      	b.n	80078f4 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d102      	bne.n	80078f0 <HAL_SAI_Init+0xec>
 80078ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078ee:	e000      	b.n	80078f2 <HAL_SAI_Init+0xee>
 80078f0:	2300      	movs	r3, #0
 80078f2:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d811      	bhi.n	8007920 <HAL_SAI_Init+0x11c>
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d20b      	bcs.n	8007918 <HAL_SAI_Init+0x114>
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <HAL_SAI_Init+0x106>
 8007904:	2b01      	cmp	r3, #1
 8007906:	d003      	beq.n	8007910 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007908:	e00a      	b.n	8007920 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	613b      	str	r3, [r7, #16]
    break;
 800790e:	e008      	b.n	8007922 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007914:	613b      	str	r3, [r7, #16]
    break;
 8007916:	e004      	b.n	8007922 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007918:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800791c:	613b      	str	r3, [r7, #16]
    break;
 800791e:	e000      	b.n	8007922 <HAL_SAI_Init+0x11e>
      break;
 8007920:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6819      	ldr	r1, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	4b47      	ldr	r3, [pc, #284]	@ (8007a4c <HAL_SAI_Init+0x248>)
 800792e:	400b      	ands	r3, r1
 8007930:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6819      	ldr	r1, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007940:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007946:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800794c:	431a      	orrs	r2, r3
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800795a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007966:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796c:	051b      	lsls	r3, r3, #20
 800796e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6812      	ldr	r2, [r2, #0]
 8007982:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007986:	f023 030f 	bic.w	r3, r3, #15
 800798a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6859      	ldr	r1, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699a      	ldr	r2, [r3, #24]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a0:	431a      	orrs	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6899      	ldr	r1, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	4b26      	ldr	r3, [pc, #152]	@ (8007a50 <HAL_SAI_Init+0x24c>)
 80079b6:	400b      	ands	r3, r1
 80079b8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6899      	ldr	r1, [r3, #8]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079ca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 80079d0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 80079d6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079dc:	3b01      	subs	r3, #1
 80079de:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80079e0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68d9      	ldr	r1, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80079f8:	400b      	ands	r3, r1
 80079fa:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68d9      	ldr	r1, [r3, #12]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a0a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a10:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007a12:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	021b      	lsls	r3, r3, #8
 8007a1c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	cccccccd 	.word	0xcccccccd
 8007a4c:	ff05c010 	.word	0xff05c010
 8007a50:	fff88000 	.word	0xfff88000

08007a54 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_SAI_Abort+0x1a>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e072      	b.n	8007b54 <HAL_SAI_Abort+0x100>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 faf8 	bl	800806c <SAI_Disable>

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a8a:	d149      	bne.n	8007b20 <HAL_SAI_Abort+0xcc>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007a9a:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01c      	beq.n	8007ade <HAL_SAI_Abort+0x8a>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b12      	cmp	r3, #18
 8007aae:	d116      	bne.n	8007ade <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fa fb91 	bl	80021dc <HAL_DMA_Abort>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00e      	beq.n	8007ade <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac6:	2b80      	cmp	r3, #128	@ 0x80
 8007ac8:	d009      	beq.n	8007ade <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ad4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d01c      	beq.n	8007b20 <HAL_SAI_Abort+0xcc>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b22      	cmp	r3, #34	@ 0x22
 8007af0:	d116      	bne.n	8007b20 <HAL_SAI_Abort+0xcc>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fa fb70 	bl	80021dc <HAL_DMA_Abort>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00e      	beq.n	8007b20 <HAL_SAI_Abort+0xcc>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b08:	2b80      	cmp	r3, #128	@ 0x80
 8007b0a:	d009      	beq.n	8007b20 <HAL_SAI_Abort+0xcc>
        {
          status = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2200      	movs	r2, #0
 8007b26:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b30:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0208 	orr.w	r2, r2, #8
 8007b40:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 813e 	beq.w	8007dee <HAL_SAI_IRQHandler+0x292>
  {
    uint32_t itflags = hsai->Instance->SR;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f003 0308 	and.w	r3, r3, #8
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d009      	beq.n	8007ba8 <HAL_SAI_IRQHandler+0x4c>
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f003 0308 	and.w	r3, r3, #8
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
 8007ba6:	e122      	b.n	8007dee <HAL_SAI_IRQHandler+0x292>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d01e      	beq.n	8007bf0 <HAL_SAI_IRQHandler+0x94>
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d019      	beq.n	8007bf0 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	619a      	str	r2, [r3, #24]

      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b22      	cmp	r3, #34	@ 0x22
 8007bce:	d101      	bne.n	8007bd4 <HAL_SAI_IRQHandler+0x78>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <HAL_SAI_IRQHandler+0x7a>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	60bb      	str	r3, [r7, #8]

      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	431a      	orrs	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f907 	bl	8007dfc <HAL_SAI_ErrorCallback>
 8007bee:	e0fe      	b.n	8007dee <HAL_SAI_IRQHandler+0x292>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d011      	beq.n	8007c1e <HAL_SAI_IRQHandler+0xc2>
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00c      	beq.n	8007c1e <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2202      	movs	r2, #2
 8007c0a:	619a      	str	r2, [r3, #24]

      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80ec 	beq.w	8007dee <HAL_SAI_IRQHandler+0x292>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c1a:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 8007c1c:	e0e7      	b.n	8007dee <HAL_SAI_IRQHandler+0x292>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f003 0320 	and.w	r3, r3, #32
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d039      	beq.n	8007c9c <HAL_SAI_IRQHandler+0x140>
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d034      	beq.n	8007c9c <HAL_SAI_IRQHandler+0x140>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2220      	movs	r2, #32
 8007c38:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c40:	f043 0204 	orr.w	r2, r3, #4
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d01c      	beq.n	8007c8e <HAL_SAI_IRQHandler+0x132>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d009      	beq.n	8007c70 <HAL_SAI_IRQHandler+0x114>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c60:	4a65      	ldr	r2, [pc, #404]	@ (8007df8 <HAL_SAI_IRQHandler+0x29c>)
 8007c62:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fa fb27 	bl	80022bc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007c6e:	e0b9      	b.n	8007de4 <HAL_SAI_IRQHandler+0x288>
        }
        else if (hsai->hdmarx != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 80b5 	beq.w	8007de4 <HAL_SAI_IRQHandler+0x288>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c7e:	4a5e      	ldr	r2, [pc, #376]	@ (8007df8 <HAL_SAI_IRQHandler+0x29c>)
 8007c80:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fa fb18 	bl	80022bc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007c8c:	e0aa      	b.n	8007de4 <HAL_SAI_IRQHandler+0x288>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff fee0 	bl	8007a54 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f8b1 	bl	8007dfc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007c9a:	e0a3      	b.n	8007de4 <HAL_SAI_IRQHandler+0x288>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d038      	beq.n	8007d18 <HAL_SAI_IRQHandler+0x1bc>
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d033      	beq.n	8007d18 <HAL_SAI_IRQHandler+0x1bc>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2240      	movs	r2, #64	@ 0x40
 8007cb6:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cbe:	f043 0208 	orr.w	r2, r3, #8
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01b      	beq.n	8007d0a <HAL_SAI_IRQHandler+0x1ae>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <HAL_SAI_IRQHandler+0x192>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cde:	4a46      	ldr	r2, [pc, #280]	@ (8007df8 <HAL_SAI_IRQHandler+0x29c>)
 8007ce0:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fa fae8 	bl	80022bc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007cec:	e07c      	b.n	8007de8 <HAL_SAI_IRQHandler+0x28c>
        }
        else if (hsai->hdmarx != NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d078      	beq.n	8007de8 <HAL_SAI_IRQHandler+0x28c>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8007df8 <HAL_SAI_IRQHandler+0x29c>)
 8007cfc:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fa fada 	bl	80022bc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007d08:	e06e      	b.n	8007de8 <HAL_SAI_IRQHandler+0x28c>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff fea2 	bl	8007a54 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f873 	bl	8007dfc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007d16:	e067      	b.n	8007de8 <HAL_SAI_IRQHandler+0x28c>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f003 0304 	and.w	r3, r3, #4
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d046      	beq.n	8007db0 <HAL_SAI_IRQHandler+0x254>
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d041      	beq.n	8007db0 <HAL_SAI_IRQHandler+0x254>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2204      	movs	r2, #4
 8007d32:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d3a:	f043 0220 	orr.w	r2, r3, #32
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01b      	beq.n	8007d86 <HAL_SAI_IRQHandler+0x22a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d009      	beq.n	8007d6a <HAL_SAI_IRQHandler+0x20e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d5a:	4a27      	ldr	r2, [pc, #156]	@ (8007df8 <HAL_SAI_IRQHandler+0x29c>)
 8007d5c:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fa faaa 	bl	80022bc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007d68:	e040      	b.n	8007dec <HAL_SAI_IRQHandler+0x290>
        }
        else if (hsai->hdmarx != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d03c      	beq.n	8007dec <HAL_SAI_IRQHandler+0x290>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d76:	4a20      	ldr	r2, [pc, #128]	@ (8007df8 <HAL_SAI_IRQHandler+0x29c>)
 8007d78:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fa fa9c 	bl	80022bc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007d84:	e032      	b.n	8007dec <HAL_SAI_IRQHandler+0x290>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f04f 32ff 	mov.w	r2, #4294967295
 8007d96:	619a      	str	r2, [r3, #24]

        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f827 	bl	8007dfc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007dae:	e01d      	b.n	8007dec <HAL_SAI_IRQHandler+0x290>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f003 0310 	and.w	r3, r3, #16
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d019      	beq.n	8007dee <HAL_SAI_IRQHandler+0x292>
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d014      	beq.n	8007dee <HAL_SAI_IRQHandler+0x292>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2210      	movs	r2, #16
 8007dca:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dd2:	f043 0210 	orr.w	r2, r3, #16
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f80d 	bl	8007dfc <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8007de2:	e004      	b.n	8007dee <HAL_SAI_IRQHandler+0x292>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007de4:	bf00      	nop
 8007de6:	e002      	b.n	8007dee <HAL_SAI_IRQHandler+0x292>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007de8:	bf00      	nop
 8007dea:	e000      	b.n	8007dee <HAL_SAI_IRQHandler+0x292>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007dec:	bf00      	nop
}
 8007dee:	bf00      	nop
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	080080dd 	.word	0x080080dd

08007dfc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <SAI_InitI2S+0x2a>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d103      	bne.n	8007e42 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007e40:	e002      	b.n	8007e48 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007e4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e56:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e076      	b.n	8007f60 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d107      	bne.n	8007e88 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007e84:	655a      	str	r2, [r3, #84]	@ 0x54
 8007e86:	e006      	b.n	8007e96 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007e8e:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Frame definition */
  switch (datasize)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d84f      	bhi.n	8007f3c <SAI_InitI2S+0x12c>
 8007e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea4 <SAI_InitI2S+0x94>)
 8007e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea2:	bf00      	nop
 8007ea4:	08007eb5 	.word	0x08007eb5
 8007ea8:	08007ed7 	.word	0x08007ed7
 8007eac:	08007ef9 	.word	0x08007ef9
 8007eb0:	08007f1b 	.word	0x08007f1b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2280      	movs	r2, #128	@ 0x80
 8007eb8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	085b      	lsrs	r3, r3, #1
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	085b      	lsrs	r3, r3, #1
 8007ec8:	011a      	lsls	r2, r3, #4
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2240      	movs	r2, #64	@ 0x40
 8007ed2:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8007ed4:	e034      	b.n	8007f40 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2280      	movs	r2, #128	@ 0x80
 8007eda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	085b      	lsrs	r3, r3, #1
 8007ee0:	019a      	lsls	r2, r3, #6
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	085b      	lsrs	r3, r3, #1
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2280      	movs	r2, #128	@ 0x80
 8007ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8007ef6:	e023      	b.n	8007f40 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	22c0      	movs	r2, #192	@ 0xc0
 8007efc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	085b      	lsrs	r3, r3, #1
 8007f02:	019a      	lsls	r2, r3, #6
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	085b      	lsrs	r3, r3, #1
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2280      	movs	r2, #128	@ 0x80
 8007f16:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8007f18:	e012      	b.n	8007f40 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	22e0      	movs	r2, #224	@ 0xe0
 8007f1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	019a      	lsls	r2, r3, #6
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	085b      	lsrs	r3, r3, #1
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2280      	movs	r2, #128	@ 0x80
 8007f38:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8007f3a:	e001      	b.n	8007f40 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e00f      	b.n	8007f60 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d10b      	bne.n	8007f5e <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d102      	bne.n	8007f52 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2210      	movs	r2, #16
 8007f50:	659a      	str	r2, [r3, #88]	@ 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d102      	bne.n	8007f5e <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2208      	movs	r2, #8
 8007f5c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <SAI_InitPCM+0x2a>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d103      	bne.n	8007f9e <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8007f9c:	e002      	b.n	8007fa4 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007fb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007fb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fcc:	665a      	str	r2, [r3, #100]	@ 0x64

  if (protocol == SAI_PCM_SHORT)
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d103      	bne.n	8007fdc <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	649a      	str	r2, [r3, #72]	@ 0x48
 8007fda:	e002      	b.n	8007fe2 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	220d      	movs	r2, #13
 8007fe0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  switch (datasize)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d837      	bhi.n	8008058 <SAI_InitPCM+0xec>
 8007fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <SAI_InitPCM+0x84>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008001 	.word	0x08008001
 8007ff4:	08008017 	.word	0x08008017
 8007ff8:	0800802d 	.word	0x0800802d
 8007ffc:	08008043 	.word	0x08008043
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2280      	movs	r2, #128	@ 0x80
 8008004:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	011a      	lsls	r2, r3, #4
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2240      	movs	r2, #64	@ 0x40
 8008012:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8008014:	e022      	b.n	800805c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2280      	movs	r2, #128	@ 0x80
 800801a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2280      	movs	r2, #128	@ 0x80
 8008028:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800802a:	e017      	b.n	800805c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	22c0      	movs	r2, #192	@ 0xc0
 8008030:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2280      	movs	r2, #128	@ 0x80
 800803e:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8008040:	e00c      	b.n	800805c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	22e0      	movs	r2, #224	@ 0xe0
 8008046:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2280      	movs	r2, #128	@ 0x80
 8008054:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8008056:	e001      	b.n	800805c <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e000      	b.n	800805e <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop

0800806c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008074:	4b17      	ldr	r3, [pc, #92]	@ (80080d4 <SAI_Disable+0x68>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a17      	ldr	r2, [pc, #92]	@ (80080d8 <SAI_Disable+0x6c>)
 800807a:	fba2 2303 	umull	r2, r3, r2, r3
 800807e:	0b1b      	lsrs	r3, r3, #12
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008096:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	1e5a      	subs	r2, r3, #1
 800809c:	60fa      	str	r2, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	72fb      	strb	r3, [r7, #11]
      break;
 80080b6:	e006      	b.n	80080c6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e8      	bne.n	8008098 <SAI_Disable+0x2c>

  return status;
 80080c6:	7afb      	ldrb	r3, [r7, #11]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	20000000 	.word	0x20000000
 80080d8:	95cbec1b 	.word	0x95cbec1b

080080dc <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80080f8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2200      	movs	r2, #0
 8008100:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f04f 32ff 	mov.w	r2, #4294967295
 800810a:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008112:	2b20      	cmp	r3, #32
 8008114:	d00a      	beq.n	800812c <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f7ff ffa8 	bl	800806c <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f042 0208 	orr.w	r2, r2, #8
 800812a:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f7ff fe5d 	bl	8007dfc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	2b02      	cmp	r3, #2
 800815a:	d00c      	beq.n	8008176 <SAI_BlockSynchroConfig+0x2a>
 800815c:	2b02      	cmp	r3, #2
 800815e:	d80d      	bhi.n	800817c <SAI_BlockSynchroConfig+0x30>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <SAI_BlockSynchroConfig+0x1e>
 8008164:	2b01      	cmp	r3, #1
 8008166:	d003      	beq.n	8008170 <SAI_BlockSynchroConfig+0x24>
 8008168:	e008      	b.n	800817c <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	60fb      	str	r3, [r7, #12]
      break;
 800816e:	e008      	b.n	8008182 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008170:	2310      	movs	r3, #16
 8008172:	60fb      	str	r3, [r7, #12]
      break;
 8008174:	e005      	b.n	8008182 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008176:	2320      	movs	r3, #32
 8008178:	60fb      	str	r3, [r7, #12]
      break;
 800817a:	e002      	b.n	8008182 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]
      break;
 8008180:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8008182:	4a04      	ldr	r2, [pc, #16]	@ (8008194 <SAI_BlockSynchroConfig+0x48>)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8008188:	bf00      	nop
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	40015800 	.word	0x40015800

08008198 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a46      	ldr	r2, [pc, #280]	@ (80082cc <SAI_GetInputClock+0x134>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d10b      	bne.n	80081ce <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 80081b6:	4b46      	ldr	r3, [pc, #280]	@ (80082d0 <SAI_GetInputClock+0x138>)
 80081b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	4942      	ldr	r1, [pc, #264]	@ (80082d0 <SAI_GetInputClock+0x138>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 80081cc:	e00b      	b.n	80081e6 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 80081ce:	4b40      	ldr	r3, [pc, #256]	@ (80082d0 <SAI_GetInputClock+0x138>)
 80081d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	493c      	ldr	r1, [pc, #240]	@ (80082d0 <SAI_GetInputClock+0x138>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80081e6:	4b3a      	ldr	r3, [pc, #232]	@ (80082d0 <SAI_GetInputClock+0x138>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d108      	bne.n	8008204 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081f2:	4b37      	ldr	r3, [pc, #220]	@ (80082d0 <SAI_GetInputClock+0x138>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081fa:	4a36      	ldr	r2, [pc, #216]	@ (80082d4 <SAI_GetInputClock+0x13c>)
 80081fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008200:	613b      	str	r3, [r7, #16]
 8008202:	e007      	b.n	8008214 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008204:	4b32      	ldr	r3, [pc, #200]	@ (80082d0 <SAI_GetInputClock+0x138>)
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800820c:	4a32      	ldr	r2, [pc, #200]	@ (80082d8 <SAI_GetInputClock+0x140>)
 800820e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008212:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d121      	bne.n	8008260 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800821c:	4b2c      	ldr	r3, [pc, #176]	@ (80082d0 <SAI_GetInputClock+0x138>)
 800821e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008222:	0e1b      	lsrs	r3, r3, #24
 8008224:	f003 030f 	and.w	r3, r3, #15
 8008228:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 800822a:	4b29      	ldr	r3, [pc, #164]	@ (80082d0 <SAI_GetInputClock+0x138>)
 800822c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008230:	099b      	lsrs	r3, r3, #6
 8008232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	fb03 f202 	mul.w	r2, r3, r2
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008242:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8008244:	4b22      	ldr	r3, [pc, #136]	@ (80082d0 <SAI_GetInputClock+0x138>)
 8008246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800824a:	0a1b      	lsrs	r3, r3, #8
 800824c:	f003 031f 	and.w	r3, r3, #31
 8008250:	3301      	adds	r3, #1
 8008252:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	fbb2 f3f3 	udiv	r3, r2, r3
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e02d      	b.n	80082bc <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008268:	d120      	bne.n	80082ac <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800826a:	4b19      	ldr	r3, [pc, #100]	@ (80082d0 <SAI_GetInputClock+0x138>)
 800826c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008270:	0e1b      	lsrs	r3, r3, #24
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8008278:	4b15      	ldr	r3, [pc, #84]	@ (80082d0 <SAI_GetInputClock+0x138>)
 800827a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800827e:	099b      	lsrs	r3, r3, #6
 8008280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	fb03 f202 	mul.w	r2, r3, r2
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008290:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8008292:	4b0f      	ldr	r3, [pc, #60]	@ (80082d0 <SAI_GetInputClock+0x138>)
 8008294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008298:	f003 031f 	and.w	r3, r3, #31
 800829c:	3301      	adds	r3, #1
 800829e:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a8:	617b      	str	r3, [r7, #20]
 80082aa:	e007      	b.n	80082bc <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 80082ac:	4b08      	ldr	r3, [pc, #32]	@ (80082d0 <SAI_GetInputClock+0x138>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	4a07      	ldr	r2, [pc, #28]	@ (80082d0 <SAI_GetInputClock+0x138>)
 80082b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082b6:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 80082b8:	4b08      	ldr	r3, [pc, #32]	@ (80082dc <SAI_GetInputClock+0x144>)
 80082ba:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 80082bc:	697b      	ldr	r3, [r7, #20]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	40015804 	.word	0x40015804
 80082d0:	40023800 	.word	0x40023800
 80082d4:	00f42400 	.word	0x00f42400
 80082d8:	007a1200 	.word	0x007a1200
 80082dc:	00bb8000 	.word	0x00bb8000

080082e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e022      	b.n	8008338 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d105      	bne.n	800830a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7f9 f951 	bl	80015ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2203      	movs	r2, #3
 800830e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f814 	bl	8008340 <HAL_SD_InitCard>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e00a      	b.n	8008338 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008340:	b5b0      	push	{r4, r5, r7, lr}
 8008342:	b08e      	sub	sp, #56	@ 0x38
 8008344:	af04      	add	r7, sp, #16
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008348:	2300      	movs	r3, #0
 800834a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800834c:	2300      	movs	r3, #0
 800834e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008350:	2300      	movs	r3, #0
 8008352:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008358:	2300      	movs	r3, #0
 800835a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800835c:	2376      	movs	r3, #118	@ 0x76
 800835e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681d      	ldr	r5, [r3, #0]
 8008364:	466c      	mov	r4, sp
 8008366:	f107 0314 	add.w	r3, r7, #20
 800836a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800836e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008372:	f107 0308 	add.w	r3, r7, #8
 8008376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008378:	4628      	mov	r0, r5
 800837a:	f002 f877 	bl	800a46c <SDIO_Init>
 800837e:	4603      	mov	r3, r0
 8008380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8008384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e04f      	b.n	8008430 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008390:	4b29      	ldr	r3, [pc, #164]	@ (8008438 <HAL_SD_InitCard+0xf8>)
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f002 f89e 	bl	800a4dc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80083a0:	4b25      	ldr	r3, [pc, #148]	@ (8008438 <HAL_SD_InitCard+0xf8>)
 80083a2:	2201      	movs	r2, #1
 80083a4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80083a6:	2002      	movs	r0, #2
 80083a8:	f7f9 fcf0 	bl	8001d8c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fe0b 	bl	8008fc8 <SD_PowerON>
 80083b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	431a      	orrs	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e02e      	b.n	8008430 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fd2a 	bl	8008e2c <SD_InitCard>
 80083d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	431a      	orrs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e01b      	b.n	8008430 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008400:	4618      	mov	r0, r3
 8008402:	f002 f8fd 	bl	800a600 <SDMMC_CmdBlockLength>
 8008406:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00f      	beq.n	800842e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a0a      	ldr	r2, [pc, #40]	@ (800843c <HAL_SD_InitCard+0xfc>)
 8008414:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	431a      	orrs	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3728      	adds	r7, #40	@ 0x28
 8008434:	46bd      	mov	sp, r7
 8008436:	bdb0      	pop	{r4, r5, r7, pc}
 8008438:	422580a0 	.word	0x422580a0
 800843c:	004005ff 	.word	0x004005ff

08008440 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08c      	sub	sp, #48	@ 0x30
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d107      	bne.n	8008468 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800845c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e0be      	b.n	80085e6 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b01      	cmp	r3, #1
 8008472:	f040 80b7 	bne.w	80085e4 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800847c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	441a      	add	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008486:	429a      	cmp	r2, r3
 8008488:	d907      	bls.n	800849a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e0a5      	b.n	80085e6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2203      	movs	r2, #3
 800849e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2200      	movs	r2, #0
 80084a8:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80084b8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084be:	4a4c      	ldr	r2, [pc, #304]	@ (80085f0 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80084c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c6:	4a4b      	ldr	r2, [pc, #300]	@ (80085f4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80084c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ce:	2200      	movs	r2, #0
 80084d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d6:	2200      	movs	r2, #0
 80084d8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ea:	689a      	ldr	r2, [r3, #8]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3380      	adds	r3, #128	@ 0x80
 8008500:	4619      	mov	r1, r3
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	025b      	lsls	r3, r3, #9
 8008508:	089b      	lsrs	r3, r3, #2
 800850a:	f7f9 fe0f 	bl	800212c <HAL_DMA_Start_IT>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d017      	beq.n	8008544 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8008522:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a33      	ldr	r2, [pc, #204]	@ (80085f8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800852a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008530:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e050      	b.n	80085e6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008544:	4b2d      	ldr	r3, [pc, #180]	@ (80085fc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008546:	2201      	movs	r2, #1
 8008548:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800854e:	2b01      	cmp	r3, #1
 8008550:	d002      	beq.n	8008558 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	025b      	lsls	r3, r3, #9
 8008556:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008558:	f04f 33ff 	mov.w	r3, #4294967295
 800855c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	025b      	lsls	r3, r3, #9
 8008562:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008564:	2390      	movs	r3, #144	@ 0x90
 8008566:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008568:	2302      	movs	r3, #2
 800856a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800856c:	2300      	movs	r3, #0
 800856e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008570:	2301      	movs	r3, #1
 8008572:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f107 0210 	add.w	r2, r7, #16
 800857c:	4611      	mov	r1, r2
 800857e:	4618      	mov	r0, r3
 8008580:	f002 f812 	bl	800a5a8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d90a      	bls.n	80085a0 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2282      	movs	r2, #130	@ 0x82
 800858e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008596:	4618      	mov	r0, r3
 8008598:	f002 f876 	bl	800a688 <SDMMC_CmdReadMultiBlock>
 800859c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800859e:	e009      	b.n	80085b4 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2281      	movs	r2, #129	@ 0x81
 80085a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085ac:	4618      	mov	r0, r3
 80085ae:	f002 f849 	bl	800a644 <SDMMC_CmdReadSingleBlock>
 80085b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80085b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d012      	beq.n	80085e0 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a0e      	ldr	r2, [pc, #56]	@ (80085f8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80085c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c8:	431a      	orrs	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e002      	b.n	80085e6 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	e000      	b.n	80085e6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80085e4:	2302      	movs	r3, #2
  }
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3730      	adds	r7, #48	@ 0x30
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	08008d17 	.word	0x08008d17
 80085f4:	08008d89 	.word	0x08008d89
 80085f8:	004005ff 	.word	0x004005ff
 80085fc:	4225858c 	.word	0x4225858c

08008600 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08c      	sub	sp, #48	@ 0x30
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d107      	bne.n	8008628 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e0c1      	b.n	80087ac <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b01      	cmp	r3, #1
 8008632:	f040 80ba 	bne.w	80087aa <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800863c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	441a      	add	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008646:	429a      	cmp	r2, r3
 8008648:	d907      	bls.n	800865a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e0a8      	b.n	80087ac <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2203      	movs	r2, #3
 800865e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2200      	movs	r2, #0
 8008668:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 021a 	orr.w	r2, r2, #26
 8008678:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800867e:	4a4d      	ldr	r2, [pc, #308]	@ (80087b4 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8008680:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008686:	4a4c      	ldr	r2, [pc, #304]	@ (80087b8 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8008688:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868e:	2200      	movs	r2, #0
 8008690:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008696:	2b01      	cmp	r3, #1
 8008698:	d002      	beq.n	80086a0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800869a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869c:	025b      	lsls	r3, r3, #9
 800869e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d90a      	bls.n	80086bc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	22a0      	movs	r2, #160	@ 0xa0
 80086aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086b2:	4618      	mov	r0, r3
 80086b4:	f002 f82c 	bl	800a710 <SDMMC_CmdWriteMultiBlock>
 80086b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80086ba:	e009      	b.n	80086d0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2290      	movs	r2, #144	@ 0x90
 80086c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 ffff 	bl	800a6cc <SDMMC_CmdWriteSingleBlock>
 80086ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80086d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d012      	beq.n	80086fc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a38      	ldr	r2, [pc, #224]	@ (80087bc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80086dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e4:	431a      	orrs	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e057      	b.n	80087ac <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80086fc:	4b30      	ldr	r3, [pc, #192]	@ (80087c0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80086fe:	2201      	movs	r2, #1
 8008700:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008706:	2240      	movs	r2, #64	@ 0x40
 8008708:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871a:	689a      	ldr	r2, [r3, #8]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3380      	adds	r3, #128	@ 0x80
 8008732:	461a      	mov	r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	025b      	lsls	r3, r3, #9
 8008738:	089b      	lsrs	r3, r3, #2
 800873a:	f7f9 fcf7 	bl	800212c <HAL_DMA_Start_IT>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01a      	beq.n	800877a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 021a 	bic.w	r2, r2, #26
 8008752:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a18      	ldr	r2, [pc, #96]	@ (80087bc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800875a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008760:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e018      	b.n	80087ac <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800877a:	f04f 33ff 	mov.w	r3, #4294967295
 800877e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	025b      	lsls	r3, r3, #9
 8008784:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008786:	2390      	movs	r3, #144	@ 0x90
 8008788:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800878a:	2300      	movs	r3, #0
 800878c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800878e:	2300      	movs	r3, #0
 8008790:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008792:	2301      	movs	r3, #1
 8008794:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f107 0210 	add.w	r2, r7, #16
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 ff01 	bl	800a5a8 <SDIO_ConfigData>

      return HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	e000      	b.n	80087ac <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80087aa:	2302      	movs	r3, #2
  }
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3730      	adds	r7, #48	@ 0x30
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	08008ced 	.word	0x08008ced
 80087b8:	08008d89 	.word	0x08008d89
 80087bc:	004005ff 	.word	0x004005ff
 80087c0:	4225858c 	.word	0x4225858c

080087c4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087e6:	0f9b      	lsrs	r3, r3, #30
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087f2:	0e9b      	lsrs	r3, r3, #26
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	f003 030f 	and.w	r3, r3, #15
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008804:	0e1b      	lsrs	r3, r3, #24
 8008806:	b2db      	uxtb	r3, r3
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	b2da      	uxtb	r2, r3
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008816:	0c1b      	lsrs	r3, r3, #16
 8008818:	b2da      	uxtb	r2, r3
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008822:	0a1b      	lsrs	r3, r3, #8
 8008824:	b2da      	uxtb	r2, r3
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800882e:	b2da      	uxtb	r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008838:	0d1b      	lsrs	r3, r3, #20
 800883a:	b29a      	uxth	r2, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008844:	0c1b      	lsrs	r3, r3, #16
 8008846:	b2db      	uxtb	r3, r3
 8008848:	f003 030f 	and.w	r3, r3, #15
 800884c:	b2da      	uxtb	r2, r3
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008856:	0bdb      	lsrs	r3, r3, #15
 8008858:	b2db      	uxtb	r3, r3
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	b2da      	uxtb	r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008868:	0b9b      	lsrs	r3, r3, #14
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	b2da      	uxtb	r2, r3
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800887a:	0b5b      	lsrs	r3, r3, #13
 800887c:	b2db      	uxtb	r3, r3
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	b2da      	uxtb	r2, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800888c:	0b1b      	lsrs	r3, r3, #12
 800888e:	b2db      	uxtb	r3, r3
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	b2da      	uxtb	r2, r3
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2200      	movs	r2, #0
 800889e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d163      	bne.n	8008970 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088ac:	009a      	lsls	r2, r3, #2
 80088ae:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80088b2:	4013      	ands	r3, r2
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80088b8:	0f92      	lsrs	r2, r2, #30
 80088ba:	431a      	orrs	r2, r3
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088c4:	0edb      	lsrs	r3, r3, #27
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088d6:	0e1b      	lsrs	r3, r3, #24
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f003 0307 	and.w	r3, r3, #7
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088e8:	0d5b      	lsrs	r3, r3, #21
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f003 0307 	and.w	r3, r3, #7
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088fa:	0c9b      	lsrs	r3, r3, #18
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	b2da      	uxtb	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800890c:	0bdb      	lsrs	r3, r3, #15
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	b2da      	uxtb	r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	7e1b      	ldrb	r3, [r3, #24]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	f003 0307 	and.w	r3, r3, #7
 800892e:	3302      	adds	r3, #2
 8008930:	2201      	movs	r2, #1
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800893a:	fb03 f202 	mul.w	r2, r3, r2
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	7a1b      	ldrb	r3, [r3, #8]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f003 030f 	and.w	r3, r3, #15
 800894c:	2201      	movs	r2, #1
 800894e:	409a      	lsls	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800895c:	0a52      	lsrs	r2, r2, #9
 800895e:	fb03 f202 	mul.w	r2, r3, r2
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800896c:	661a      	str	r2, [r3, #96]	@ 0x60
 800896e:	e031      	b.n	80089d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008974:	2b01      	cmp	r3, #1
 8008976:	d11d      	bne.n	80089b4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800897c:	041b      	lsls	r3, r3, #16
 800897e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008986:	0c1b      	lsrs	r3, r3, #16
 8008988:	431a      	orrs	r2, r3
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	3301      	adds	r3, #1
 8008994:	029a      	lsls	r2, r3, #10
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089a8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80089b2:	e00f      	b.n	80089d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a58      	ldr	r2, [pc, #352]	@ (8008b1c <HAL_SD_GetCardCSD+0x344>)
 80089ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e09d      	b.n	8008b10 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089d8:	0b9b      	lsrs	r3, r3, #14
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	f003 0301 	and.w	r3, r3, #1
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ea:	09db      	lsrs	r3, r3, #7
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a0c:	0fdb      	lsrs	r3, r3, #31
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a18:	0f5b      	lsrs	r3, r3, #29
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a2a:	0e9b      	lsrs	r3, r3, #26
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a3c:	0d9b      	lsrs	r3, r3, #22
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	f003 030f 	and.w	r3, r3, #15
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a4e:	0d5b      	lsrs	r3, r3, #21
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a6a:	0c1b      	lsrs	r3, r3, #16
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a7e:	0bdb      	lsrs	r3, r3, #15
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a92:	0b9b      	lsrs	r3, r3, #14
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aa6:	0b5b      	lsrs	r3, r3, #13
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aba:	0b1b      	lsrs	r3, r3, #12
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ace:	0a9b      	lsrs	r3, r3, #10
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ae2:	0a1b      	lsrs	r3, r3, #8
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008af6:	085b      	lsrs	r3, r3, #1
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	004005ff 	.word	0x004005ff

08008b20 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008b78:	b5b0      	push	{r4, r5, r7, lr}
 8008b7a:	b08e      	sub	sp, #56	@ 0x38
 8008b7c:	af04      	add	r7, sp, #16
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2203      	movs	r2, #3
 8008b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d02e      	beq.n	8008bf6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b9e:	d106      	bne.n	8008bae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	639a      	str	r2, [r3, #56]	@ 0x38
 8008bac:	e029      	b.n	8008c02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bb4:	d10a      	bne.n	8008bcc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fabc 	bl	8009134 <SD_WideBus_Enable>
 8008bbc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8008bca:	e01a      	b.n	8008c02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 faf9 	bl	80091ca <SD_WideBus_Disable>
 8008bd8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	639a      	str	r2, [r3, #56]	@ 0x38
 8008be6:	e00c      	b.n	8008c02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	639a      	str	r2, [r3, #56]	@ 0x38
 8008bf4:	e005      	b.n	8008c02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00b      	beq.n	8008c22 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a26      	ldr	r2, [pc, #152]	@ (8008ca8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008c10:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c20:	e01f      	b.n	8008c62 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681d      	ldr	r5, [r3, #0]
 8008c48:	466c      	mov	r4, sp
 8008c4a:	f107 0314 	add.w	r3, r7, #20
 8008c4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c56:	f107 0308 	add.w	r3, r7, #8
 8008c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f001 fc05 	bl	800a46c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 fcc8 	bl	800a600 <SDMMC_CmdBlockLength>
 8008c70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00c      	beq.n	8008c92 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8008ca8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008c7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	431a      	orrs	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8008c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3728      	adds	r7, #40	@ 0x28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	004005ff 	.word	0x004005ff

08008cac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008cb8:	f107 030c 	add.w	r3, r7, #12
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fa10 	bl	80090e4 <SD_SendStatus>
 8008cc4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d005      	beq.n	8008cd8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	0a5b      	lsrs	r3, r3, #9
 8008cdc:	f003 030f 	and.w	r3, r3, #15
 8008ce0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008ce2:	693b      	ldr	r3, [r7, #16]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d08:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008d0a:	bf00      	nop
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b084      	sub	sp, #16
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d22:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d28:	2b82      	cmp	r3, #130	@ 0x82
 8008d2a:	d111      	bne.n	8008d50 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f001 fd0f 	bl	800a754 <SDMMC_CmdStopTransfer>
 8008d36:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d008      	beq.n	8008d50 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	431a      	orrs	r2, r3
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7ff fd3a 	bl	80087c4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 0208 	bic.w	r2, r2, #8
 8008d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008d68:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f003 fac5 	bl	800c308 <HAL_SD_RxCpltCallback>
#endif
}
 8008d7e:	bf00      	nop
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d94:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7f9 fc3c 	bl	8002614 <HAL_DMA_GetError>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d03e      	beq.n	8008e20 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008db0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d002      	beq.n	8008dbe <SD_DMAError+0x36>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d12d      	bne.n	8008e1a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a19      	ldr	r2, [pc, #100]	@ (8008e28 <SD_DMAError+0xa0>)
 8008dc4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dda:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008de2:	6978      	ldr	r0, [r7, #20]
 8008de4:	f7ff ff62 	bl	8008cac <HAL_SD_GetCardState>
 8008de8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b06      	cmp	r3, #6
 8008dee:	d002      	beq.n	8008df6 <SD_DMAError+0x6e>
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b05      	cmp	r3, #5
 8008df4:	d10a      	bne.n	8008e0c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 fcaa 	bl	800a754 <SDMMC_CmdStopTransfer>
 8008e00:	4602      	mov	r2, r0
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e06:	431a      	orrs	r2, r3
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	2200      	movs	r2, #0
 8008e18:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008e1a:	6978      	ldr	r0, [r7, #20]
 8008e1c:	f7ff fcd2 	bl	80087c4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008e20:	bf00      	nop
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	004005ff 	.word	0x004005ff

08008e2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e2c:	b5b0      	push	{r4, r5, r7, lr}
 8008e2e:	b094      	sub	sp, #80	@ 0x50
 8008e30:	af04      	add	r7, sp, #16
 8008e32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008e34:	2301      	movs	r3, #1
 8008e36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f001 fb5b 	bl	800a4f8 <SDIO_GetPowerState>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d102      	bne.n	8008e4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e48:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008e4c:	e0b8      	b.n	8008fc0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d02f      	beq.n	8008eb6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f001 fd84 	bl	800a968 <SDMMC_CmdSendCID>
 8008e60:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <SD_InitCard+0x40>
    {
      return errorstate;
 8008e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e6a:	e0a9      	b.n	8008fc0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2100      	movs	r1, #0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 fb85 	bl	800a582 <SDIO_GetResponse>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2104      	movs	r1, #4
 8008e84:	4618      	mov	r0, r3
 8008e86:	f001 fb7c 	bl	800a582 <SDIO_GetResponse>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2108      	movs	r1, #8
 8008e96:	4618      	mov	r0, r3
 8008e98:	f001 fb73 	bl	800a582 <SDIO_GetResponse>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	210c      	movs	r1, #12
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f001 fb6a 	bl	800a582 <SDIO_GetResponse>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d00d      	beq.n	8008eda <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f107 020e 	add.w	r2, r7, #14
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f001 fd8a 	bl	800a9e2 <SDMMC_CmdSetRelAdd>
 8008ece:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <SD_InitCard+0xae>
    {
      return errorstate;
 8008ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ed8:	e072      	b.n	8008fc0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d036      	beq.n	8008f50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008ee2:	89fb      	ldrh	r3, [r7, #14]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef2:	041b      	lsls	r3, r3, #16
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f001 fd54 	bl	800a9a4 <SDMMC_CmdSendCSD>
 8008efc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f06:	e05b      	b.n	8008fc0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 fb37 	bl	800a582 <SDIO_GetResponse>
 8008f14:	4602      	mov	r2, r0
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2104      	movs	r1, #4
 8008f20:	4618      	mov	r0, r3
 8008f22:	f001 fb2e 	bl	800a582 <SDIO_GetResponse>
 8008f26:	4602      	mov	r2, r0
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2108      	movs	r1, #8
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 fb25 	bl	800a582 <SDIO_GetResponse>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	210c      	movs	r1, #12
 8008f44:	4618      	mov	r0, r3
 8008f46:	f001 fb1c 	bl	800a582 <SDIO_GetResponse>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2104      	movs	r1, #4
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 fb13 	bl	800a582 <SDIO_GetResponse>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	0d1a      	lsrs	r2, r3, #20
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008f64:	f107 0310 	add.w	r3, r7, #16
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff fc34 	bl	80087d8 <HAL_SD_GetCardCSD>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f76:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008f7a:	e021      	b.n	8008fc0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6819      	ldr	r1, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f84:	041b      	lsls	r3, r3, #16
 8008f86:	2200      	movs	r2, #0
 8008f88:	461c      	mov	r4, r3
 8008f8a:	4615      	mov	r5, r2
 8008f8c:	4622      	mov	r2, r4
 8008f8e:	462b      	mov	r3, r5
 8008f90:	4608      	mov	r0, r1
 8008f92:	f001 fc01 	bl	800a798 <SDMMC_CmdSelDesel>
 8008f96:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <SD_InitCard+0x176>
  {
    return errorstate;
 8008f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fa0:	e00e      	b.n	8008fc0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681d      	ldr	r5, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	466c      	mov	r4, sp
 8008faa:	f103 0210 	add.w	r2, r3, #16
 8008fae:	ca07      	ldmia	r2, {r0, r1, r2}
 8008fb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f001 fa57 	bl	800a46c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3740      	adds	r7, #64	@ 0x40
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bdb0      	pop	{r4, r5, r7, pc}

08008fc8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	2300      	movs	r3, #0
 8008fda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f001 fbfc 	bl	800a7de <SDMMC_CmdGoIdleState>
 8008fe6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	e072      	b.n	80090d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 fc0f 	bl	800a81a <SDMMC_CmdOperCond>
 8008ffc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00d      	beq.n	8009020 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f001 fbe5 	bl	800a7de <SDMMC_CmdGoIdleState>
 8009014:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d004      	beq.n	8009026 <SD_PowerON+0x5e>
    {
      return errorstate;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	e05b      	b.n	80090d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800902a:	2b01      	cmp	r3, #1
 800902c:	d137      	bne.n	800909e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2100      	movs	r1, #0
 8009034:	4618      	mov	r0, r3
 8009036:	f001 fc0f 	bl	800a858 <SDMMC_CmdAppCommand>
 800903a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d02d      	beq.n	800909e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009042:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009046:	e047      	b.n	80090d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2100      	movs	r1, #0
 800904e:	4618      	mov	r0, r3
 8009050:	f001 fc02 	bl	800a858 <SDMMC_CmdAppCommand>
 8009054:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <SD_PowerON+0x98>
    {
      return errorstate;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	e03b      	b.n	80090d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	491e      	ldr	r1, [pc, #120]	@ (80090e0 <SD_PowerON+0x118>)
 8009066:	4618      	mov	r0, r3
 8009068:	f001 fc18 	bl	800a89c <SDMMC_CmdAppOperCommand>
 800906c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009074:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009078:	e02e      	b.n	80090d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2100      	movs	r1, #0
 8009080:	4618      	mov	r0, r3
 8009082:	f001 fa7e 	bl	800a582 <SDIO_GetResponse>
 8009086:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	0fdb      	lsrs	r3, r3, #31
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <SD_PowerON+0xcc>
 8009090:	2301      	movs	r3, #1
 8009092:	e000      	b.n	8009096 <SD_PowerON+0xce>
 8009094:	2300      	movs	r3, #0
 8009096:	613b      	str	r3, [r7, #16]

    count++;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	3301      	adds	r3, #1
 800909c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d802      	bhi.n	80090ae <SD_PowerON+0xe6>
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0cc      	beq.n	8009048 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d902      	bls.n	80090be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80090b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80090bc:	e00c      	b.n	80090d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80090ce:	e002      	b.n	80090d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	c1100000 	.word	0xc1100000

080090e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d102      	bne.n	80090fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80090f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80090f8:	e018      	b.n	800912c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009102:	041b      	lsls	r3, r3, #16
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f001 fc8c 	bl	800aa24 <SDMMC_CmdSendStatus>
 800910c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	e009      	b.n	800912c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2100      	movs	r1, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f001 fa2f 	bl	800a582 <SDIO_GetResponse>
 8009124:	4602      	mov	r2, r0
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800913c:	2300      	movs	r3, #0
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	2300      	movs	r3, #0
 8009142:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2100      	movs	r1, #0
 800914a:	4618      	mov	r0, r3
 800914c:	f001 fa19 	bl	800a582 <SDIO_GetResponse>
 8009150:	4603      	mov	r3, r0
 8009152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009156:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800915a:	d102      	bne.n	8009162 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800915c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009160:	e02f      	b.n	80091c2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009162:	f107 030c 	add.w	r3, r7, #12
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f879 	bl	8009260 <SD_FindSCR>
 800916e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	e023      	b.n	80091c2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d01c      	beq.n	80091be <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800918c:	041b      	lsls	r3, r3, #16
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f001 fb61 	bl	800a858 <SDMMC_CmdAppCommand>
 8009196:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	e00f      	b.n	80091c2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2102      	movs	r1, #2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f001 fb9a 	bl	800a8e2 <SDMMC_CmdBusWidth>
 80091ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	e003      	b.n	80091c2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	e001      	b.n	80091c2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b086      	sub	sp, #24
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	2300      	movs	r3, #0
 80091d8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2100      	movs	r1, #0
 80091e0:	4618      	mov	r0, r3
 80091e2:	f001 f9ce 	bl	800a582 <SDIO_GetResponse>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091f0:	d102      	bne.n	80091f8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80091f6:	e02f      	b.n	8009258 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80091f8:	f107 030c 	add.w	r3, r7, #12
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f82e 	bl	8009260 <SD_FindSCR>
 8009204:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	e023      	b.n	8009258 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d01c      	beq.n	8009254 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009222:	041b      	lsls	r3, r3, #16
 8009224:	4619      	mov	r1, r3
 8009226:	4610      	mov	r0, r2
 8009228:	f001 fb16 	bl	800a858 <SDMMC_CmdAppCommand>
 800922c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	e00f      	b.n	8009258 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2100      	movs	r1, #0
 800923e:	4618      	mov	r0, r3
 8009240:	f001 fb4f 	bl	800a8e2 <SDMMC_CmdBusWidth>
 8009244:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	e003      	b.n	8009258 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009250:	2300      	movs	r3, #0
 8009252:	e001      	b.n	8009258 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009254:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009258:	4618      	mov	r0, r3
 800925a:	3718      	adds	r7, #24
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b08f      	sub	sp, #60	@ 0x3c
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800926a:	f7f8 fd83 	bl	8001d74 <HAL_GetTick>
 800926e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009274:	2300      	movs	r3, #0
 8009276:	60bb      	str	r3, [r7, #8]
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2108      	movs	r1, #8
 8009286:	4618      	mov	r0, r3
 8009288:	f001 f9ba 	bl	800a600 <SDMMC_CmdBlockLength>
 800928c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800928e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009296:	e0b2      	b.n	80093fe <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a0:	041b      	lsls	r3, r3, #16
 80092a2:	4619      	mov	r1, r3
 80092a4:	4610      	mov	r0, r2
 80092a6:	f001 fad7 	bl	800a858 <SDMMC_CmdAppCommand>
 80092aa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80092b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b4:	e0a3      	b.n	80093fe <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092b6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80092bc:	2308      	movs	r3, #8
 80092be:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80092c0:	2330      	movs	r3, #48	@ 0x30
 80092c2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80092c4:	2302      	movs	r3, #2
 80092c6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f107 0210 	add.w	r2, r7, #16
 80092d8:	4611      	mov	r1, r2
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 f964 	bl	800a5a8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f001 fb1e 	bl	800a926 <SDMMC_CmdSendSCR>
 80092ea:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d02a      	beq.n	8009348 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80092f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f4:	e083      	b.n	80093fe <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00f      	beq.n	8009324 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6819      	ldr	r1, [r3, #0]
 8009308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	f107 0208 	add.w	r2, r7, #8
 8009310:	18d4      	adds	r4, r2, r3
 8009312:	4608      	mov	r0, r1
 8009314:	f001 f8d5 	bl	800a4c2 <SDIO_ReadFIFO>
 8009318:	4603      	mov	r3, r0
 800931a:	6023      	str	r3, [r4, #0]
      index++;
 800931c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800931e:	3301      	adds	r3, #1
 8009320:	637b      	str	r3, [r7, #52]	@ 0x34
 8009322:	e006      	b.n	8009332 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800932a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d012      	beq.n	8009358 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009332:	f7f8 fd1f 	bl	8001d74 <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009340:	d102      	bne.n	8009348 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009342:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009346:	e05a      	b.n	80093fe <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800934e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0cf      	beq.n	80092f6 <SD_FindSCR+0x96>
 8009356:	e000      	b.n	800935a <SD_FindSCR+0xfa>
      break;
 8009358:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2208      	movs	r2, #8
 800936e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009370:	2308      	movs	r3, #8
 8009372:	e044      	b.n	80093fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d005      	beq.n	800938e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2202      	movs	r2, #2
 8009388:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800938a:	2302      	movs	r3, #2
 800938c:	e037      	b.n	80093fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2220      	movs	r2, #32
 80093a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80093a4:	2320      	movs	r3, #32
 80093a6:	e02a      	b.n	80093fe <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f240 523a 	movw	r2, #1338	@ 0x53a
 80093b0:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	061a      	lsls	r2, r3, #24
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	021b      	lsls	r3, r3, #8
 80093ba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80093be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	0a1b      	lsrs	r3, r3, #8
 80093c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80093c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	0e1b      	lsrs	r3, r3, #24
 80093ce:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80093d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d2:	601a      	str	r2, [r3, #0]
    scr++;
 80093d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d6:	3304      	adds	r3, #4
 80093d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	061a      	lsls	r2, r3, #24
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80093e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	0a1b      	lsrs	r3, r3, #8
 80093ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80093f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	0e1b      	lsrs	r3, r3, #24
 80093f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80093f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	373c      	adds	r7, #60	@ 0x3c
 8009402:	46bd      	mov	sp, r7
 8009404:	bd90      	pop	{r4, r7, pc}

08009406 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e025      	b.n	8009466 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7f8 fa6c 	bl	800190c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3304      	adds	r3, #4
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f000 ff4a 	bl	800a2e0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	461a      	mov	r2, r3
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	f000 ff9f 	bl	800a39a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e041      	b.n	8009504 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d106      	bne.n	800949a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7f8 f8f1 	bl	800167c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2202      	movs	r2, #2
 800949e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4619      	mov	r1, r3
 80094ac:	4610      	mov	r0, r2
 80094ae:	f000 fa7d 	bl	80099ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b01      	cmp	r3, #1
 800951e:	d001      	beq.n	8009524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e04e      	b.n	80095c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0201 	orr.w	r2, r2, #1
 800953a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a23      	ldr	r2, [pc, #140]	@ (80095d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d022      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800954e:	d01d      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a1f      	ldr	r2, [pc, #124]	@ (80095d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d018      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a1e      	ldr	r2, [pc, #120]	@ (80095d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d013      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a1c      	ldr	r2, [pc, #112]	@ (80095dc <HAL_TIM_Base_Start_IT+0xd0>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d00e      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a1b      	ldr	r2, [pc, #108]	@ (80095e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d009      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a19      	ldr	r2, [pc, #100]	@ (80095e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d004      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a18      	ldr	r2, [pc, #96]	@ (80095e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d111      	bne.n	80095b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b06      	cmp	r3, #6
 800959c:	d010      	beq.n	80095c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f042 0201 	orr.w	r2, r2, #1
 80095ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ae:	e007      	b.n	80095c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0201 	orr.w	r2, r2, #1
 80095be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	40010000 	.word	0x40010000
 80095d4:	40000400 	.word	0x40000400
 80095d8:	40000800 	.word	0x40000800
 80095dc:	40000c00 	.word	0x40000c00
 80095e0:	40010400 	.word	0x40010400
 80095e4:	40014000 	.word	0x40014000
 80095e8:	40001800 	.word	0x40001800

080095ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d020      	beq.n	8009650 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f003 0302 	and.w	r3, r3, #2
 8009614:	2b00      	cmp	r3, #0
 8009616:	d01b      	beq.n	8009650 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f06f 0202 	mvn.w	r2, #2
 8009620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	f003 0303 	and.w	r3, r3, #3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f999 	bl	800996e <HAL_TIM_IC_CaptureCallback>
 800963c:	e005      	b.n	800964a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f98b 	bl	800995a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f99c 	bl	8009982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	f003 0304 	and.w	r3, r3, #4
 8009656:	2b00      	cmp	r3, #0
 8009658:	d020      	beq.n	800969c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	2b00      	cmp	r3, #0
 8009662:	d01b      	beq.n	800969c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f06f 0204 	mvn.w	r2, #4
 800966c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2202      	movs	r2, #2
 8009672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f973 	bl	800996e <HAL_TIM_IC_CaptureCallback>
 8009688:	e005      	b.n	8009696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f965 	bl	800995a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f976 	bl	8009982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f003 0308 	and.w	r3, r3, #8
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d020      	beq.n	80096e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f003 0308 	and.w	r3, r3, #8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d01b      	beq.n	80096e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f06f 0208 	mvn.w	r2, #8
 80096b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2204      	movs	r2, #4
 80096be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f94d 	bl	800996e <HAL_TIM_IC_CaptureCallback>
 80096d4:	e005      	b.n	80096e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f93f 	bl	800995a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f950 	bl	8009982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f003 0310 	and.w	r3, r3, #16
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d020      	beq.n	8009734 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f003 0310 	and.w	r3, r3, #16
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d01b      	beq.n	8009734 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f06f 0210 	mvn.w	r2, #16
 8009704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2208      	movs	r2, #8
 800970a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f927 	bl	800996e <HAL_TIM_IC_CaptureCallback>
 8009720:	e005      	b.n	800972e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f919 	bl	800995a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f92a 	bl	8009982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00c      	beq.n	8009758 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	d007      	beq.n	8009758 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f06f 0201 	mvn.w	r2, #1
 8009750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7f7 fd2c 	bl	80011b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00c      	beq.n	800977c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009768:	2b00      	cmp	r3, #0
 800976a:	d007      	beq.n	800977c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fae4 	bl	8009d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00c      	beq.n	80097a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800978c:	2b00      	cmp	r3, #0
 800978e:	d007      	beq.n	80097a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f8fb 	bl	8009996 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f003 0320 	and.w	r3, r3, #32
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00c      	beq.n	80097c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d007      	beq.n	80097c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f06f 0220 	mvn.w	r2, #32
 80097bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fab6 	bl	8009d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097c4:	bf00      	nop
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d101      	bne.n	80097e8 <HAL_TIM_ConfigClockSource+0x1c>
 80097e4:	2302      	movs	r3, #2
 80097e6:	e0b4      	b.n	8009952 <HAL_TIM_ConfigClockSource+0x186>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2202      	movs	r2, #2
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800980e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009820:	d03e      	beq.n	80098a0 <HAL_TIM_ConfigClockSource+0xd4>
 8009822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009826:	f200 8087 	bhi.w	8009938 <HAL_TIM_ConfigClockSource+0x16c>
 800982a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800982e:	f000 8086 	beq.w	800993e <HAL_TIM_ConfigClockSource+0x172>
 8009832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009836:	d87f      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x16c>
 8009838:	2b70      	cmp	r3, #112	@ 0x70
 800983a:	d01a      	beq.n	8009872 <HAL_TIM_ConfigClockSource+0xa6>
 800983c:	2b70      	cmp	r3, #112	@ 0x70
 800983e:	d87b      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x16c>
 8009840:	2b60      	cmp	r3, #96	@ 0x60
 8009842:	d050      	beq.n	80098e6 <HAL_TIM_ConfigClockSource+0x11a>
 8009844:	2b60      	cmp	r3, #96	@ 0x60
 8009846:	d877      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x16c>
 8009848:	2b50      	cmp	r3, #80	@ 0x50
 800984a:	d03c      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0xfa>
 800984c:	2b50      	cmp	r3, #80	@ 0x50
 800984e:	d873      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x16c>
 8009850:	2b40      	cmp	r3, #64	@ 0x40
 8009852:	d058      	beq.n	8009906 <HAL_TIM_ConfigClockSource+0x13a>
 8009854:	2b40      	cmp	r3, #64	@ 0x40
 8009856:	d86f      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x16c>
 8009858:	2b30      	cmp	r3, #48	@ 0x30
 800985a:	d064      	beq.n	8009926 <HAL_TIM_ConfigClockSource+0x15a>
 800985c:	2b30      	cmp	r3, #48	@ 0x30
 800985e:	d86b      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x16c>
 8009860:	2b20      	cmp	r3, #32
 8009862:	d060      	beq.n	8009926 <HAL_TIM_ConfigClockSource+0x15a>
 8009864:	2b20      	cmp	r3, #32
 8009866:	d867      	bhi.n	8009938 <HAL_TIM_ConfigClockSource+0x16c>
 8009868:	2b00      	cmp	r3, #0
 800986a:	d05c      	beq.n	8009926 <HAL_TIM_ConfigClockSource+0x15a>
 800986c:	2b10      	cmp	r3, #16
 800986e:	d05a      	beq.n	8009926 <HAL_TIM_ConfigClockSource+0x15a>
 8009870:	e062      	b.n	8009938 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009882:	f000 f9b9 	bl	8009bf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	609a      	str	r2, [r3, #8]
      break;
 800989e:	e04f      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098b0:	f000 f9a2 	bl	8009bf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689a      	ldr	r2, [r3, #8]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098c2:	609a      	str	r2, [r3, #8]
      break;
 80098c4:	e03c      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098d2:	461a      	mov	r2, r3
 80098d4:	f000 f916 	bl	8009b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2150      	movs	r1, #80	@ 0x50
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 f96f 	bl	8009bc2 <TIM_ITRx_SetConfig>
      break;
 80098e4:	e02c      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098f2:	461a      	mov	r2, r3
 80098f4:	f000 f935 	bl	8009b62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2160      	movs	r1, #96	@ 0x60
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 f95f 	bl	8009bc2 <TIM_ITRx_SetConfig>
      break;
 8009904:	e01c      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009912:	461a      	mov	r2, r3
 8009914:	f000 f8f6 	bl	8009b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2140      	movs	r1, #64	@ 0x40
 800991e:	4618      	mov	r0, r3
 8009920:	f000 f94f 	bl	8009bc2 <TIM_ITRx_SetConfig>
      break;
 8009924:	e00c      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4619      	mov	r1, r3
 8009930:	4610      	mov	r0, r2
 8009932:	f000 f946 	bl	8009bc2 <TIM_ITRx_SetConfig>
      break;
 8009936:	e003      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	73fb      	strb	r3, [r7, #15]
      break;
 800993c:	e000      	b.n	8009940 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800993e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800995a:	b480      	push	{r7}
 800995c:	b083      	sub	sp, #12
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009962:	bf00      	nop
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800996e:	b480      	push	{r7}
 8009970:	b083      	sub	sp, #12
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009976:	bf00      	nop
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800998a:	bf00      	nop
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009996:	b480      	push	{r7}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800999e:	bf00      	nop
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
	...

080099ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a46      	ldr	r2, [pc, #280]	@ (8009ad8 <TIM_Base_SetConfig+0x12c>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d013      	beq.n	80099ec <TIM_Base_SetConfig+0x40>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ca:	d00f      	beq.n	80099ec <TIM_Base_SetConfig+0x40>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a43      	ldr	r2, [pc, #268]	@ (8009adc <TIM_Base_SetConfig+0x130>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d00b      	beq.n	80099ec <TIM_Base_SetConfig+0x40>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a42      	ldr	r2, [pc, #264]	@ (8009ae0 <TIM_Base_SetConfig+0x134>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d007      	beq.n	80099ec <TIM_Base_SetConfig+0x40>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a41      	ldr	r2, [pc, #260]	@ (8009ae4 <TIM_Base_SetConfig+0x138>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d003      	beq.n	80099ec <TIM_Base_SetConfig+0x40>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a40      	ldr	r2, [pc, #256]	@ (8009ae8 <TIM_Base_SetConfig+0x13c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d108      	bne.n	80099fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a35      	ldr	r2, [pc, #212]	@ (8009ad8 <TIM_Base_SetConfig+0x12c>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d02b      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a0c:	d027      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a32      	ldr	r2, [pc, #200]	@ (8009adc <TIM_Base_SetConfig+0x130>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d023      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a31      	ldr	r2, [pc, #196]	@ (8009ae0 <TIM_Base_SetConfig+0x134>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d01f      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a30      	ldr	r2, [pc, #192]	@ (8009ae4 <TIM_Base_SetConfig+0x138>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d01b      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a2f      	ldr	r2, [pc, #188]	@ (8009ae8 <TIM_Base_SetConfig+0x13c>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d017      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a2e      	ldr	r2, [pc, #184]	@ (8009aec <TIM_Base_SetConfig+0x140>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d013      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a2d      	ldr	r2, [pc, #180]	@ (8009af0 <TIM_Base_SetConfig+0x144>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d00f      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a2c      	ldr	r2, [pc, #176]	@ (8009af4 <TIM_Base_SetConfig+0x148>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00b      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a2b      	ldr	r2, [pc, #172]	@ (8009af8 <TIM_Base_SetConfig+0x14c>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d007      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a2a      	ldr	r2, [pc, #168]	@ (8009afc <TIM_Base_SetConfig+0x150>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d003      	beq.n	8009a5e <TIM_Base_SetConfig+0xb2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a29      	ldr	r2, [pc, #164]	@ (8009b00 <TIM_Base_SetConfig+0x154>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d108      	bne.n	8009a70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	689a      	ldr	r2, [r3, #8]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a10      	ldr	r2, [pc, #64]	@ (8009ad8 <TIM_Base_SetConfig+0x12c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d003      	beq.n	8009aa4 <TIM_Base_SetConfig+0xf8>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a12      	ldr	r2, [pc, #72]	@ (8009ae8 <TIM_Base_SetConfig+0x13c>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d103      	bne.n	8009aac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	691a      	ldr	r2, [r3, #16]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d105      	bne.n	8009aca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	f023 0201 	bic.w	r2, r3, #1
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	611a      	str	r2, [r3, #16]
  }
}
 8009aca:	bf00      	nop
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	40010000 	.word	0x40010000
 8009adc:	40000400 	.word	0x40000400
 8009ae0:	40000800 	.word	0x40000800
 8009ae4:	40000c00 	.word	0x40000c00
 8009ae8:	40010400 	.word	0x40010400
 8009aec:	40014000 	.word	0x40014000
 8009af0:	40014400 	.word	0x40014400
 8009af4:	40014800 	.word	0x40014800
 8009af8:	40001800 	.word	0x40001800
 8009afc:	40001c00 	.word	0x40001c00
 8009b00:	40002000 	.word	0x40002000

08009b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	f023 0201 	bic.w	r2, r3, #1
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	011b      	lsls	r3, r3, #4
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f023 030a 	bic.w	r3, r3, #10
 8009b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	621a      	str	r2, [r3, #32]
}
 8009b56:	bf00      	nop
 8009b58:	371c      	adds	r7, #28
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b087      	sub	sp, #28
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	f023 0210 	bic.w	r2, r3, #16
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	031b      	lsls	r3, r3, #12
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	621a      	str	r2, [r3, #32]
}
 8009bb6:	bf00      	nop
 8009bb8:	371c      	adds	r7, #28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	f043 0307 	orr.w	r3, r3, #7
 8009be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	609a      	str	r2, [r3, #8]
}
 8009bec:	bf00      	nop
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	021a      	lsls	r2, r3, #8
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	609a      	str	r2, [r3, #8]
}
 8009c2c:	bf00      	nop
 8009c2e:	371c      	adds	r7, #28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	e05a      	b.n	8009d06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a21      	ldr	r2, [pc, #132]	@ (8009d14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d022      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c9c:	d01d      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8009d18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d018      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a1b      	ldr	r2, [pc, #108]	@ (8009d1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d013      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8009d20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d00e      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a18      	ldr	r2, [pc, #96]	@ (8009d24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d009      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a17      	ldr	r2, [pc, #92]	@ (8009d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d004      	beq.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a15      	ldr	r2, [pc, #84]	@ (8009d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d10c      	bne.n	8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	40010000 	.word	0x40010000
 8009d18:	40000400 	.word	0x40000400
 8009d1c:	40000800 	.word	0x40000800
 8009d20:	40000c00 	.word	0x40000c00
 8009d24:	40010400 	.word	0x40010400
 8009d28:	40014000 	.word	0x40014000
 8009d2c:	40001800 	.word	0x40001800

08009d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e042      	b.n	8009df0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d106      	bne.n	8009d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7f7 fc9e 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2224      	movs	r2, #36	@ 0x24
 8009d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f82b 	bl	8009df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	691a      	ldr	r2, [r3, #16]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	695a      	ldr	r2, [r3, #20]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68da      	ldr	r2, [r3, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2220      	movs	r2, #32
 8009de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dfc:	b0c0      	sub	sp, #256	@ 0x100
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e14:	68d9      	ldr	r1, [r3, #12]
 8009e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	ea40 0301 	orr.w	r3, r0, r1
 8009e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	431a      	orrs	r2, r3
 8009e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	431a      	orrs	r2, r3
 8009e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e3c:	69db      	ldr	r3, [r3, #28]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009e50:	f021 010c 	bic.w	r1, r1, #12
 8009e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009e5e:	430b      	orrs	r3, r1
 8009e60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e72:	6999      	ldr	r1, [r3, #24]
 8009e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	ea40 0301 	orr.w	r3, r0, r1
 8009e7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	4b8f      	ldr	r3, [pc, #572]	@ (800a0c4 <UART_SetConfig+0x2cc>)
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d005      	beq.n	8009e98 <UART_SetConfig+0xa0>
 8009e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	4b8d      	ldr	r3, [pc, #564]	@ (800a0c8 <UART_SetConfig+0x2d0>)
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d104      	bne.n	8009ea2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e98:	f7fc ff78 	bl	8006d8c <HAL_RCC_GetPCLK2Freq>
 8009e9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009ea0:	e003      	b.n	8009eaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ea2:	f7fc ff5f 	bl	8006d64 <HAL_RCC_GetPCLK1Freq>
 8009ea6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009eb4:	f040 810c 	bne.w	800a0d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009ec2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009ec6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009eca:	4622      	mov	r2, r4
 8009ecc:	462b      	mov	r3, r5
 8009ece:	1891      	adds	r1, r2, r2
 8009ed0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009ed2:	415b      	adcs	r3, r3
 8009ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ed6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009eda:	4621      	mov	r1, r4
 8009edc:	eb12 0801 	adds.w	r8, r2, r1
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	eb43 0901 	adc.w	r9, r3, r1
 8009ee6:	f04f 0200 	mov.w	r2, #0
 8009eea:	f04f 0300 	mov.w	r3, #0
 8009eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009efa:	4690      	mov	r8, r2
 8009efc:	4699      	mov	r9, r3
 8009efe:	4623      	mov	r3, r4
 8009f00:	eb18 0303 	adds.w	r3, r8, r3
 8009f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009f08:	462b      	mov	r3, r5
 8009f0a:	eb49 0303 	adc.w	r3, r9, r3
 8009f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009f1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009f26:	460b      	mov	r3, r1
 8009f28:	18db      	adds	r3, r3, r3
 8009f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	eb42 0303 	adc.w	r3, r2, r3
 8009f32:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009f38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009f3c:	f7f6 f960 	bl	8000200 <__aeabi_uldivmod>
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4b61      	ldr	r3, [pc, #388]	@ (800a0cc <UART_SetConfig+0x2d4>)
 8009f46:	fba3 2302 	umull	r2, r3, r3, r2
 8009f4a:	095b      	lsrs	r3, r3, #5
 8009f4c:	011c      	lsls	r4, r3, #4
 8009f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009f5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009f60:	4642      	mov	r2, r8
 8009f62:	464b      	mov	r3, r9
 8009f64:	1891      	adds	r1, r2, r2
 8009f66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009f68:	415b      	adcs	r3, r3
 8009f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009f70:	4641      	mov	r1, r8
 8009f72:	eb12 0a01 	adds.w	sl, r2, r1
 8009f76:	4649      	mov	r1, r9
 8009f78:	eb43 0b01 	adc.w	fp, r3, r1
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	f04f 0300 	mov.w	r3, #0
 8009f84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f90:	4692      	mov	sl, r2
 8009f92:	469b      	mov	fp, r3
 8009f94:	4643      	mov	r3, r8
 8009f96:	eb1a 0303 	adds.w	r3, sl, r3
 8009f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	eb4b 0303 	adc.w	r3, fp, r3
 8009fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009fb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009fb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	18db      	adds	r3, r3, r3
 8009fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	eb42 0303 	adc.w	r3, r2, r3
 8009fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009fce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009fd2:	f7f6 f915 	bl	8000200 <__aeabi_uldivmod>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4611      	mov	r1, r2
 8009fdc:	4b3b      	ldr	r3, [pc, #236]	@ (800a0cc <UART_SetConfig+0x2d4>)
 8009fde:	fba3 2301 	umull	r2, r3, r3, r1
 8009fe2:	095b      	lsrs	r3, r3, #5
 8009fe4:	2264      	movs	r2, #100	@ 0x64
 8009fe6:	fb02 f303 	mul.w	r3, r2, r3
 8009fea:	1acb      	subs	r3, r1, r3
 8009fec:	00db      	lsls	r3, r3, #3
 8009fee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009ff2:	4b36      	ldr	r3, [pc, #216]	@ (800a0cc <UART_SetConfig+0x2d4>)
 8009ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8009ff8:	095b      	lsrs	r3, r3, #5
 8009ffa:	005b      	lsls	r3, r3, #1
 8009ffc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a000:	441c      	add	r4, r3
 800a002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a006:	2200      	movs	r2, #0
 800a008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a00c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a010:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a014:	4642      	mov	r2, r8
 800a016:	464b      	mov	r3, r9
 800a018:	1891      	adds	r1, r2, r2
 800a01a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a01c:	415b      	adcs	r3, r3
 800a01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a024:	4641      	mov	r1, r8
 800a026:	1851      	adds	r1, r2, r1
 800a028:	6339      	str	r1, [r7, #48]	@ 0x30
 800a02a:	4649      	mov	r1, r9
 800a02c:	414b      	adcs	r3, r1
 800a02e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a030:	f04f 0200 	mov.w	r2, #0
 800a034:	f04f 0300 	mov.w	r3, #0
 800a038:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a03c:	4659      	mov	r1, fp
 800a03e:	00cb      	lsls	r3, r1, #3
 800a040:	4651      	mov	r1, sl
 800a042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a046:	4651      	mov	r1, sl
 800a048:	00ca      	lsls	r2, r1, #3
 800a04a:	4610      	mov	r0, r2
 800a04c:	4619      	mov	r1, r3
 800a04e:	4603      	mov	r3, r0
 800a050:	4642      	mov	r2, r8
 800a052:	189b      	adds	r3, r3, r2
 800a054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a058:	464b      	mov	r3, r9
 800a05a:	460a      	mov	r2, r1
 800a05c:	eb42 0303 	adc.w	r3, r2, r3
 800a060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a070:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a074:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a078:	460b      	mov	r3, r1
 800a07a:	18db      	adds	r3, r3, r3
 800a07c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a07e:	4613      	mov	r3, r2
 800a080:	eb42 0303 	adc.w	r3, r2, r3
 800a084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a08a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a08e:	f7f6 f8b7 	bl	8000200 <__aeabi_uldivmod>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	4b0d      	ldr	r3, [pc, #52]	@ (800a0cc <UART_SetConfig+0x2d4>)
 800a098:	fba3 1302 	umull	r1, r3, r3, r2
 800a09c:	095b      	lsrs	r3, r3, #5
 800a09e:	2164      	movs	r1, #100	@ 0x64
 800a0a0:	fb01 f303 	mul.w	r3, r1, r3
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	00db      	lsls	r3, r3, #3
 800a0a8:	3332      	adds	r3, #50	@ 0x32
 800a0aa:	4a08      	ldr	r2, [pc, #32]	@ (800a0cc <UART_SetConfig+0x2d4>)
 800a0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b0:	095b      	lsrs	r3, r3, #5
 800a0b2:	f003 0207 	and.w	r2, r3, #7
 800a0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4422      	add	r2, r4
 800a0be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a0c0:	e106      	b.n	800a2d0 <UART_SetConfig+0x4d8>
 800a0c2:	bf00      	nop
 800a0c4:	40011000 	.word	0x40011000
 800a0c8:	40011400 	.word	0x40011400
 800a0cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a0da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a0de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a0e2:	4642      	mov	r2, r8
 800a0e4:	464b      	mov	r3, r9
 800a0e6:	1891      	adds	r1, r2, r2
 800a0e8:	6239      	str	r1, [r7, #32]
 800a0ea:	415b      	adcs	r3, r3
 800a0ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a0f2:	4641      	mov	r1, r8
 800a0f4:	1854      	adds	r4, r2, r1
 800a0f6:	4649      	mov	r1, r9
 800a0f8:	eb43 0501 	adc.w	r5, r3, r1
 800a0fc:	f04f 0200 	mov.w	r2, #0
 800a100:	f04f 0300 	mov.w	r3, #0
 800a104:	00eb      	lsls	r3, r5, #3
 800a106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a10a:	00e2      	lsls	r2, r4, #3
 800a10c:	4614      	mov	r4, r2
 800a10e:	461d      	mov	r5, r3
 800a110:	4643      	mov	r3, r8
 800a112:	18e3      	adds	r3, r4, r3
 800a114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a118:	464b      	mov	r3, r9
 800a11a:	eb45 0303 	adc.w	r3, r5, r3
 800a11e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a12e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a132:	f04f 0200 	mov.w	r2, #0
 800a136:	f04f 0300 	mov.w	r3, #0
 800a13a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a13e:	4629      	mov	r1, r5
 800a140:	008b      	lsls	r3, r1, #2
 800a142:	4621      	mov	r1, r4
 800a144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a148:	4621      	mov	r1, r4
 800a14a:	008a      	lsls	r2, r1, #2
 800a14c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a150:	f7f6 f856 	bl	8000200 <__aeabi_uldivmod>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	4b60      	ldr	r3, [pc, #384]	@ (800a2dc <UART_SetConfig+0x4e4>)
 800a15a:	fba3 2302 	umull	r2, r3, r3, r2
 800a15e:	095b      	lsrs	r3, r3, #5
 800a160:	011c      	lsls	r4, r3, #4
 800a162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a166:	2200      	movs	r2, #0
 800a168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a16c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a170:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a174:	4642      	mov	r2, r8
 800a176:	464b      	mov	r3, r9
 800a178:	1891      	adds	r1, r2, r2
 800a17a:	61b9      	str	r1, [r7, #24]
 800a17c:	415b      	adcs	r3, r3
 800a17e:	61fb      	str	r3, [r7, #28]
 800a180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a184:	4641      	mov	r1, r8
 800a186:	1851      	adds	r1, r2, r1
 800a188:	6139      	str	r1, [r7, #16]
 800a18a:	4649      	mov	r1, r9
 800a18c:	414b      	adcs	r3, r1
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	f04f 0200 	mov.w	r2, #0
 800a194:	f04f 0300 	mov.w	r3, #0
 800a198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a19c:	4659      	mov	r1, fp
 800a19e:	00cb      	lsls	r3, r1, #3
 800a1a0:	4651      	mov	r1, sl
 800a1a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1a6:	4651      	mov	r1, sl
 800a1a8:	00ca      	lsls	r2, r1, #3
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	4642      	mov	r2, r8
 800a1b2:	189b      	adds	r3, r3, r2
 800a1b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1b8:	464b      	mov	r3, r9
 800a1ba:	460a      	mov	r2, r1
 800a1bc:	eb42 0303 	adc.w	r3, r2, r3
 800a1c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a1ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a1d0:	f04f 0200 	mov.w	r2, #0
 800a1d4:	f04f 0300 	mov.w	r3, #0
 800a1d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a1dc:	4649      	mov	r1, r9
 800a1de:	008b      	lsls	r3, r1, #2
 800a1e0:	4641      	mov	r1, r8
 800a1e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1e6:	4641      	mov	r1, r8
 800a1e8:	008a      	lsls	r2, r1, #2
 800a1ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a1ee:	f7f6 f807 	bl	8000200 <__aeabi_uldivmod>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4b38      	ldr	r3, [pc, #224]	@ (800a2dc <UART_SetConfig+0x4e4>)
 800a1fa:	fba3 2301 	umull	r2, r3, r3, r1
 800a1fe:	095b      	lsrs	r3, r3, #5
 800a200:	2264      	movs	r2, #100	@ 0x64
 800a202:	fb02 f303 	mul.w	r3, r2, r3
 800a206:	1acb      	subs	r3, r1, r3
 800a208:	011b      	lsls	r3, r3, #4
 800a20a:	3332      	adds	r3, #50	@ 0x32
 800a20c:	4a33      	ldr	r2, [pc, #204]	@ (800a2dc <UART_SetConfig+0x4e4>)
 800a20e:	fba2 2303 	umull	r2, r3, r2, r3
 800a212:	095b      	lsrs	r3, r3, #5
 800a214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a218:	441c      	add	r4, r3
 800a21a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a21e:	2200      	movs	r2, #0
 800a220:	673b      	str	r3, [r7, #112]	@ 0x70
 800a222:	677a      	str	r2, [r7, #116]	@ 0x74
 800a224:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a228:	4642      	mov	r2, r8
 800a22a:	464b      	mov	r3, r9
 800a22c:	1891      	adds	r1, r2, r2
 800a22e:	60b9      	str	r1, [r7, #8]
 800a230:	415b      	adcs	r3, r3
 800a232:	60fb      	str	r3, [r7, #12]
 800a234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a238:	4641      	mov	r1, r8
 800a23a:	1851      	adds	r1, r2, r1
 800a23c:	6039      	str	r1, [r7, #0]
 800a23e:	4649      	mov	r1, r9
 800a240:	414b      	adcs	r3, r1
 800a242:	607b      	str	r3, [r7, #4]
 800a244:	f04f 0200 	mov.w	r2, #0
 800a248:	f04f 0300 	mov.w	r3, #0
 800a24c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a250:	4659      	mov	r1, fp
 800a252:	00cb      	lsls	r3, r1, #3
 800a254:	4651      	mov	r1, sl
 800a256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a25a:	4651      	mov	r1, sl
 800a25c:	00ca      	lsls	r2, r1, #3
 800a25e:	4610      	mov	r0, r2
 800a260:	4619      	mov	r1, r3
 800a262:	4603      	mov	r3, r0
 800a264:	4642      	mov	r2, r8
 800a266:	189b      	adds	r3, r3, r2
 800a268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a26a:	464b      	mov	r3, r9
 800a26c:	460a      	mov	r2, r1
 800a26e:	eb42 0303 	adc.w	r3, r2, r3
 800a272:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a27e:	667a      	str	r2, [r7, #100]	@ 0x64
 800a280:	f04f 0200 	mov.w	r2, #0
 800a284:	f04f 0300 	mov.w	r3, #0
 800a288:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a28c:	4649      	mov	r1, r9
 800a28e:	008b      	lsls	r3, r1, #2
 800a290:	4641      	mov	r1, r8
 800a292:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a296:	4641      	mov	r1, r8
 800a298:	008a      	lsls	r2, r1, #2
 800a29a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a29e:	f7f5 ffaf 	bl	8000200 <__aeabi_uldivmod>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2dc <UART_SetConfig+0x4e4>)
 800a2a8:	fba3 1302 	umull	r1, r3, r3, r2
 800a2ac:	095b      	lsrs	r3, r3, #5
 800a2ae:	2164      	movs	r1, #100	@ 0x64
 800a2b0:	fb01 f303 	mul.w	r3, r1, r3
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	3332      	adds	r3, #50	@ 0x32
 800a2ba:	4a08      	ldr	r2, [pc, #32]	@ (800a2dc <UART_SetConfig+0x4e4>)
 800a2bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c0:	095b      	lsrs	r3, r3, #5
 800a2c2:	f003 020f 	and.w	r2, r3, #15
 800a2c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4422      	add	r2, r4
 800a2ce:	609a      	str	r2, [r3, #8]
}
 800a2d0:	bf00      	nop
 800a2d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2dc:	51eb851f 	.word	0x51eb851f

0800a2e0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d123      	bne.n	800a33a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a2fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	6851      	ldr	r1, [r2, #4]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	6892      	ldr	r2, [r2, #8]
 800a306:	4311      	orrs	r1, r2
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	68d2      	ldr	r2, [r2, #12]
 800a30c:	4311      	orrs	r1, r2
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	6912      	ldr	r2, [r2, #16]
 800a312:	4311      	orrs	r1, r2
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	6952      	ldr	r2, [r2, #20]
 800a318:	4311      	orrs	r1, r2
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	6992      	ldr	r2, [r2, #24]
 800a31e:	4311      	orrs	r1, r2
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	69d2      	ldr	r2, [r2, #28]
 800a324:	4311      	orrs	r1, r2
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	6a12      	ldr	r2, [r2, #32]
 800a32a:	4311      	orrs	r1, r2
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a330:	430a      	orrs	r2, r1
 800a332:	431a      	orrs	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	601a      	str	r2, [r3, #0]
 800a338:	e028      	b.n	800a38c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	69d9      	ldr	r1, [r3, #28]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	4319      	orrs	r1, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a350:	430b      	orrs	r3, r1
 800a352:	431a      	orrs	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a360:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	6851      	ldr	r1, [r2, #4]
 800a368:	683a      	ldr	r2, [r7, #0]
 800a36a:	6892      	ldr	r2, [r2, #8]
 800a36c:	4311      	orrs	r1, r2
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	68d2      	ldr	r2, [r2, #12]
 800a372:	4311      	orrs	r1, r2
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	6912      	ldr	r2, [r2, #16]
 800a378:	4311      	orrs	r1, r2
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	6952      	ldr	r2, [r2, #20]
 800a37e:	4311      	orrs	r1, r2
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	6992      	ldr	r2, [r2, #24]
 800a384:	430a      	orrs	r2, r1
 800a386:	431a      	orrs	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	60f8      	str	r0, [r7, #12]
 800a3a2:	60b9      	str	r1, [r7, #8]
 800a3a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d128      	bne.n	800a3fe <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	1e59      	subs	r1, r3, #1
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	4319      	orrs	r1, r3
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	021b      	lsls	r3, r3, #8
 800a3cc:	4319      	orrs	r1, r3
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	031b      	lsls	r3, r3, #12
 800a3d6:	4319      	orrs	r1, r3
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	041b      	lsls	r3, r3, #16
 800a3e0:	4319      	orrs	r1, r3
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	051b      	lsls	r3, r3, #20
 800a3ea:	4319      	orrs	r1, r3
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	061b      	lsls	r3, r3, #24
 800a3f4:	430b      	orrs	r3, r1
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	609a      	str	r2, [r3, #8]
 800a3fc:	e02f      	b.n	800a45e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a406:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	68d2      	ldr	r2, [r2, #12]
 800a40e:	3a01      	subs	r2, #1
 800a410:	0311      	lsls	r1, r2, #12
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	6952      	ldr	r2, [r2, #20]
 800a416:	3a01      	subs	r2, #1
 800a418:	0512      	lsls	r2, r2, #20
 800a41a:	430a      	orrs	r2, r1
 800a41c:	431a      	orrs	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	1e59      	subs	r1, r3, #1
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	3b01      	subs	r3, #1
 800a436:	011b      	lsls	r3, r3, #4
 800a438:	4319      	orrs	r1, r3
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	3b01      	subs	r3, #1
 800a440:	021b      	lsls	r3, r3, #8
 800a442:	4319      	orrs	r1, r3
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	3b01      	subs	r3, #1
 800a44a:	041b      	lsls	r3, r3, #16
 800a44c:	4319      	orrs	r1, r3
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	3b01      	subs	r3, #1
 800a454:	061b      	lsls	r3, r3, #24
 800a456:	430b      	orrs	r3, r1
 800a458:	431a      	orrs	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a46c:	b084      	sub	sp, #16
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	f107 001c 	add.w	r0, r7, #28
 800a47a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a47e:	2300      	movs	r3, #0
 800a480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a482:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a484:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a486:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a48a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a48e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a492:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a496:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a4a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	431a      	orrs	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	b004      	add	sp, #16
 800a4c0:	4770      	bx	lr

0800a4c2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2203      	movs	r2, #3
 800a4e8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0303 	and.w	r3, r3, #3
}
 800a508:	4618      	mov	r0, r3
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a532:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a538:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a53e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	4313      	orrs	r3, r2
 800a544:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a54e:	f023 030f 	bic.w	r3, r3, #15
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	431a      	orrs	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	b2db      	uxtb	r3, r3
}
 800a576:	4618      	mov	r0, r3
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a582:	b480      	push	{r7}
 800a584:	b085      	sub	sp, #20
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	3314      	adds	r3, #20
 800a590:	461a      	mov	r2, r3
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	4413      	add	r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
}  
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5ce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a5d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a5da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	431a      	orrs	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0

}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b088      	sub	sp, #32
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a60e:	2310      	movs	r3, #16
 800a610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a612:	2340      	movs	r3, #64	@ 0x40
 800a614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a616:	2300      	movs	r3, #0
 800a618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a61a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a61e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a620:	f107 0308 	add.w	r3, r7, #8
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff ff74 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a62c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a630:	2110      	movs	r1, #16
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa18 	bl	800aa68 <SDMMC_GetCmdResp1>
 800a638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a63a:	69fb      	ldr	r3, [r7, #28]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3720      	adds	r7, #32
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b088      	sub	sp, #32
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a652:	2311      	movs	r3, #17
 800a654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a656:	2340      	movs	r3, #64	@ 0x40
 800a658:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a65a:	2300      	movs	r3, #0
 800a65c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a65e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a662:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a664:	f107 0308 	add.w	r3, r7, #8
 800a668:	4619      	mov	r1, r3
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff ff52 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a670:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a674:	2111      	movs	r1, #17
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f9f6 	bl	800aa68 <SDMMC_GetCmdResp1>
 800a67c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a67e:	69fb      	ldr	r3, [r7, #28]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3720      	adds	r7, #32
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a696:	2312      	movs	r3, #18
 800a698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a69a:	2340      	movs	r3, #64	@ 0x40
 800a69c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff ff30 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a6b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6b8:	2112      	movs	r1, #18
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f9d4 	bl	800aa68 <SDMMC_GetCmdResp1>
 800a6c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6c2:	69fb      	ldr	r3, [r7, #28]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3720      	adds	r7, #32
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a6da:	2318      	movs	r3, #24
 800a6dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6de:	2340      	movs	r3, #64	@ 0x40
 800a6e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6ec:	f107 0308 	add.w	r3, r7, #8
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7ff ff0e 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a6f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6fc:	2118      	movs	r1, #24
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f9b2 	bl	800aa68 <SDMMC_GetCmdResp1>
 800a704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a706:	69fb      	ldr	r3, [r7, #28]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3720      	adds	r7, #32
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b088      	sub	sp, #32
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a71e:	2319      	movs	r3, #25
 800a720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a722:	2340      	movs	r3, #64	@ 0x40
 800a724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a726:	2300      	movs	r3, #0
 800a728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a72a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a72e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a730:	f107 0308 	add.w	r3, r7, #8
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7ff feec 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a73c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a740:	2119      	movs	r1, #25
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f990 	bl	800aa68 <SDMMC_GetCmdResp1>
 800a748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a74a:	69fb      	ldr	r3, [r7, #28]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3720      	adds	r7, #32
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a760:	230c      	movs	r3, #12
 800a762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a764:	2340      	movs	r3, #64	@ 0x40
 800a766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a768:	2300      	movs	r3, #0
 800a76a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a76c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a770:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a772:	f107 0308 	add.w	r3, r7, #8
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7ff fecb 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a77e:	4a05      	ldr	r2, [pc, #20]	@ (800a794 <SDMMC_CmdStopTransfer+0x40>)
 800a780:	210c      	movs	r1, #12
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f970 	bl	800aa68 <SDMMC_GetCmdResp1>
 800a788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a78a:	69fb      	ldr	r3, [r7, #28]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3720      	adds	r7, #32
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	05f5e100 	.word	0x05f5e100

0800a798 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08a      	sub	sp, #40	@ 0x28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a7a8:	2307      	movs	r3, #7
 800a7aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7ac:	2340      	movs	r3, #64	@ 0x40
 800a7ae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7b8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7ba:	f107 0310 	add.w	r3, r7, #16
 800a7be:	4619      	mov	r1, r3
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7ff fea7 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a7c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7ca:	2107      	movs	r1, #7
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f000 f94b 	bl	800aa68 <SDMMC_GetCmdResp1>
 800a7d2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3728      	adds	r7, #40	@ 0x28
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b088      	sub	sp, #32
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7fc:	f107 0308 	add.w	r3, r7, #8
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7ff fe86 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fb65 	bl	800aed8 <SDMMC_GetCmdError>
 800a80e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a810:	69fb      	ldr	r3, [r7, #28]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b088      	sub	sp, #32
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a822:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a828:	2308      	movs	r3, #8
 800a82a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a82c:	2340      	movs	r3, #64	@ 0x40
 800a82e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a830:	2300      	movs	r3, #0
 800a832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a838:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a83a:	f107 0308 	add.w	r3, r7, #8
 800a83e:	4619      	mov	r1, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff fe67 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 faf8 	bl	800ae3c <SDMMC_GetCmdResp7>
 800a84c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a84e:	69fb      	ldr	r3, [r7, #28]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3720      	adds	r7, #32
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a866:	2337      	movs	r3, #55	@ 0x37
 800a868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a86a:	2340      	movs	r3, #64	@ 0x40
 800a86c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a86e:	2300      	movs	r3, #0
 800a870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a876:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a878:	f107 0308 	add.w	r3, r7, #8
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff fe48 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a884:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a888:	2137      	movs	r1, #55	@ 0x37
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f8ec 	bl	800aa68 <SDMMC_GetCmdResp1>
 800a890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a892:	69fb      	ldr	r3, [r7, #28]
}
 800a894:	4618      	mov	r0, r3
 800a896:	3720      	adds	r7, #32
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b088      	sub	sp, #32
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a8ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a8b2:	2329      	movs	r3, #41	@ 0x29
 800a8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8b6:	2340      	movs	r3, #64	@ 0x40
 800a8b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff fe22 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 f9ff 	bl	800acd4 <SDMMC_GetCmdResp3>
 800a8d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8d8:	69fb      	ldr	r3, [r7, #28]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3720      	adds	r7, #32
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b088      	sub	sp, #32
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a8f0:	2306      	movs	r3, #6
 800a8f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8f4:	2340      	movs	r3, #64	@ 0x40
 800a8f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a900:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a902:	f107 0308 	add.w	r3, r7, #8
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7ff fe03 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a90e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a912:	2106      	movs	r1, #6
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 f8a7 	bl	800aa68 <SDMMC_GetCmdResp1>
 800a91a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a91c:	69fb      	ldr	r3, [r7, #28]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3720      	adds	r7, #32
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b088      	sub	sp, #32
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a932:	2333      	movs	r3, #51	@ 0x33
 800a934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a936:	2340      	movs	r3, #64	@ 0x40
 800a938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a93a:	2300      	movs	r3, #0
 800a93c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a93e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a942:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a944:	f107 0308 	add.w	r3, r7, #8
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff fde2 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a950:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a954:	2133      	movs	r1, #51	@ 0x33
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f886 	bl	800aa68 <SDMMC_GetCmdResp1>
 800a95c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a95e:	69fb      	ldr	r3, [r7, #28]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a970:	2300      	movs	r3, #0
 800a972:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a974:	2302      	movs	r3, #2
 800a976:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a978:	23c0      	movs	r3, #192	@ 0xc0
 800a97a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a97c:	2300      	movs	r3, #0
 800a97e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a984:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a986:	f107 0308 	add.w	r3, r7, #8
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f7ff fdc1 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f956 	bl	800ac44 <SDMMC_GetCmdResp2>
 800a998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a99a:	69fb      	ldr	r3, [r7, #28]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3720      	adds	r7, #32
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b088      	sub	sp, #32
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a9b2:	2309      	movs	r3, #9
 800a9b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a9b6:	23c0      	movs	r3, #192	@ 0xc0
 800a9b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9c4:	f107 0308 	add.w	r3, r7, #8
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7ff fda2 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f937 	bl	800ac44 <SDMMC_GetCmdResp2>
 800a9d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3720      	adds	r7, #32
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b088      	sub	sp, #32
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9f4:	2340      	movs	r3, #64	@ 0x40
 800a9f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa02:	f107 0308 	add.w	r3, r7, #8
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7ff fd83 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	2103      	movs	r1, #3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f99c 	bl	800ad50 <SDMMC_GetCmdResp6>
 800aa18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa1a:	69fb      	ldr	r3, [r7, #28]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3720      	adds	r7, #32
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b088      	sub	sp, #32
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aa32:	230d      	movs	r3, #13
 800aa34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa36:	2340      	movs	r3, #64	@ 0x40
 800aa38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa44:	f107 0308 	add.w	r3, r7, #8
 800aa48:	4619      	mov	r1, r3
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7ff fd62 	bl	800a514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800aa50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa54:	210d      	movs	r1, #13
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f806 	bl	800aa68 <SDMMC_GetCmdResp1>
 800aa5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa5e:	69fb      	ldr	r3, [r7, #28]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3720      	adds	r7, #32
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b088      	sub	sp, #32
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	460b      	mov	r3, r1
 800aa72:	607a      	str	r2, [r7, #4]
 800aa74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aa76:	4b70      	ldr	r3, [pc, #448]	@ (800ac38 <SDMMC_GetCmdResp1+0x1d0>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a70      	ldr	r2, [pc, #448]	@ (800ac3c <SDMMC_GetCmdResp1+0x1d4>)
 800aa7c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa80:	0a5a      	lsrs	r2, r3, #9
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	fb02 f303 	mul.w	r3, r2, r3
 800aa88:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	1e5a      	subs	r2, r3, #1
 800aa8e:	61fa      	str	r2, [r7, #28]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d102      	bne.n	800aa9a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa98:	e0c9      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa9e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d0ef      	beq.n	800aa8a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1ea      	bne.n	800aa8a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d004      	beq.n	800aaca <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2204      	movs	r2, #4
 800aac4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aac6:	2304      	movs	r3, #4
 800aac8:	e0b1      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d004      	beq.n	800aae0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2201      	movs	r2, #1
 800aada:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aadc:	2301      	movs	r3, #1
 800aade:	e0a6      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	22c5      	movs	r2, #197	@ 0xc5
 800aae4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7ff fd3e 	bl	800a568 <SDIO_GetCommandResponse>
 800aaec:	4603      	mov	r3, r0
 800aaee:	461a      	mov	r2, r3
 800aaf0:	7afb      	ldrb	r3, [r7, #11]
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d001      	beq.n	800aafa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e099      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aafa:	2100      	movs	r1, #0
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f7ff fd40 	bl	800a582 <SDIO_GetResponse>
 800ab02:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	4b4e      	ldr	r3, [pc, #312]	@ (800ac40 <SDMMC_GetCmdResp1+0x1d8>)
 800ab08:	4013      	ands	r3, r2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	e08d      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	da02      	bge.n	800ab1e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ab18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ab1c:	e087      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ab28:	2340      	movs	r3, #64	@ 0x40
 800ab2a:	e080      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d001      	beq.n	800ab3a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ab36:	2380      	movs	r3, #128	@ 0x80
 800ab38:	e079      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ab44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab48:	e071      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ab54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab58:	e069      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d002      	beq.n	800ab6a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ab64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab68:	e061      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ab74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab78:	e059      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab88:	e051      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab98:	e049      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aba4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aba8:	e041      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800abb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abb8:	e039      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800abc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800abc8:	e031      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d002      	beq.n	800abda <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800abd4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800abd8:	e029      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d002      	beq.n	800abea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800abe4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800abe8:	e021      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800abf4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800abf8:	e019      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ac04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ac08:	e011      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ac14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ac18:	e009      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f003 0308 	and.w	r3, r3, #8
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d002      	beq.n	800ac2a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ac24:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ac28:	e001      	b.n	800ac2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3720      	adds	r7, #32
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	20000000 	.word	0x20000000
 800ac3c:	10624dd3 	.word	0x10624dd3
 800ac40:	fdffe008 	.word	0xfdffe008

0800ac44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac4c:	4b1f      	ldr	r3, [pc, #124]	@ (800accc <SDMMC_GetCmdResp2+0x88>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a1f      	ldr	r2, [pc, #124]	@ (800acd0 <SDMMC_GetCmdResp2+0x8c>)
 800ac52:	fba2 2303 	umull	r2, r3, r2, r3
 800ac56:	0a5b      	lsrs	r3, r3, #9
 800ac58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac5c:	fb02 f303 	mul.w	r3, r2, r3
 800ac60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	1e5a      	subs	r2, r3, #1
 800ac66:	60fa      	str	r2, [r7, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d102      	bne.n	800ac72 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac70:	e026      	b.n	800acc0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d0ef      	beq.n	800ac62 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1ea      	bne.n	800ac62 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac90:	f003 0304 	and.w	r3, r3, #4
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d004      	beq.n	800aca2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2204      	movs	r2, #4
 800ac9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac9e:	2304      	movs	r3, #4
 800aca0:	e00e      	b.n	800acc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d004      	beq.n	800acb8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e003      	b.n	800acc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	22c5      	movs	r2, #197	@ 0xc5
 800acbc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	20000000 	.word	0x20000000
 800acd0:	10624dd3 	.word	0x10624dd3

0800acd4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acdc:	4b1a      	ldr	r3, [pc, #104]	@ (800ad48 <SDMMC_GetCmdResp3+0x74>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a1a      	ldr	r2, [pc, #104]	@ (800ad4c <SDMMC_GetCmdResp3+0x78>)
 800ace2:	fba2 2303 	umull	r2, r3, r2, r3
 800ace6:	0a5b      	lsrs	r3, r3, #9
 800ace8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acec:	fb02 f303 	mul.w	r3, r2, r3
 800acf0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	1e5a      	subs	r2, r3, #1
 800acf6:	60fa      	str	r2, [r7, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d102      	bne.n	800ad02 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acfc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad00:	e01b      	b.n	800ad3a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d0ef      	beq.n	800acf2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1ea      	bne.n	800acf2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad20:	f003 0304 	and.w	r3, r3, #4
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d004      	beq.n	800ad32 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2204      	movs	r2, #4
 800ad2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad2e:	2304      	movs	r3, #4
 800ad30:	e003      	b.n	800ad3a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	22c5      	movs	r2, #197	@ 0xc5
 800ad36:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20000000 	.word	0x20000000
 800ad4c:	10624dd3 	.word	0x10624dd3

0800ad50 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad5e:	4b35      	ldr	r3, [pc, #212]	@ (800ae34 <SDMMC_GetCmdResp6+0xe4>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a35      	ldr	r2, [pc, #212]	@ (800ae38 <SDMMC_GetCmdResp6+0xe8>)
 800ad64:	fba2 2303 	umull	r2, r3, r2, r3
 800ad68:	0a5b      	lsrs	r3, r3, #9
 800ad6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad6e:	fb02 f303 	mul.w	r3, r2, r3
 800ad72:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	1e5a      	subs	r2, r3, #1
 800ad78:	61fa      	str	r2, [r7, #28]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d102      	bne.n	800ad84 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad7e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad82:	e052      	b.n	800ae2a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad88:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d0ef      	beq.n	800ad74 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1ea      	bne.n	800ad74 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ada2:	f003 0304 	and.w	r3, r3, #4
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d004      	beq.n	800adb4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2204      	movs	r2, #4
 800adae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adb0:	2304      	movs	r3, #4
 800adb2:	e03a      	b.n	800ae2a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adb8:	f003 0301 	and.w	r3, r3, #1
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d004      	beq.n	800adca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2201      	movs	r2, #1
 800adc4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e02f      	b.n	800ae2a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	f7ff fbcc 	bl	800a568 <SDIO_GetCommandResponse>
 800add0:	4603      	mov	r3, r0
 800add2:	461a      	mov	r2, r3
 800add4:	7afb      	ldrb	r3, [r7, #11]
 800add6:	4293      	cmp	r3, r2
 800add8:	d001      	beq.n	800adde <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adda:	2301      	movs	r3, #1
 800addc:	e025      	b.n	800ae2a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	22c5      	movs	r2, #197	@ 0xc5
 800ade2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ade4:	2100      	movs	r1, #0
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f7ff fbcb 	bl	800a582 <SDIO_GetResponse>
 800adec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d106      	bne.n	800ae06 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	0c1b      	lsrs	r3, r3, #16
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ae02:	2300      	movs	r3, #0
 800ae04:	e011      	b.n	800ae2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d002      	beq.n	800ae16 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ae14:	e009      	b.n	800ae2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae24:	e001      	b.n	800ae2a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3720      	adds	r7, #32
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20000000 	.word	0x20000000
 800ae38:	10624dd3 	.word	0x10624dd3

0800ae3c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae44:	4b22      	ldr	r3, [pc, #136]	@ (800aed0 <SDMMC_GetCmdResp7+0x94>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a22      	ldr	r2, [pc, #136]	@ (800aed4 <SDMMC_GetCmdResp7+0x98>)
 800ae4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae4e:	0a5b      	lsrs	r3, r3, #9
 800ae50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae54:	fb02 f303 	mul.w	r3, r2, r3
 800ae58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	1e5a      	subs	r2, r3, #1
 800ae5e:	60fa      	str	r2, [r7, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d102      	bne.n	800ae6a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ae68:	e02c      	b.n	800aec4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d0ef      	beq.n	800ae5a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1ea      	bne.n	800ae5a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae88:	f003 0304 	and.w	r3, r3, #4
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d004      	beq.n	800ae9a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2204      	movs	r2, #4
 800ae94:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae96:	2304      	movs	r3, #4
 800ae98:	e014      	b.n	800aec4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d004      	beq.n	800aeb0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e009      	b.n	800aec4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2240      	movs	r2, #64	@ 0x40
 800aec0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aec2:	2300      	movs	r3, #0
  
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	20000000 	.word	0x20000000
 800aed4:	10624dd3 	.word	0x10624dd3

0800aed8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aee0:	4b11      	ldr	r3, [pc, #68]	@ (800af28 <SDMMC_GetCmdError+0x50>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a11      	ldr	r2, [pc, #68]	@ (800af2c <SDMMC_GetCmdError+0x54>)
 800aee6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeea:	0a5b      	lsrs	r3, r3, #9
 800aeec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aef0:	fb02 f303 	mul.w	r3, r2, r3
 800aef4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	1e5a      	subs	r2, r3, #1
 800aefa:	60fa      	str	r2, [r7, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d102      	bne.n	800af06 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af04:	e009      	b.n	800af1a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d0f1      	beq.n	800aef6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	22c5      	movs	r2, #197	@ 0xc5
 800af16:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	20000000 	.word	0x20000000
 800af2c:	10624dd3 	.word	0x10624dd3

0800af30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af30:	b084      	sub	sp, #16
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	f107 001c 	add.w	r0, r7, #28
 800af3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800af46:	2b01      	cmp	r3, #1
 800af48:	d123      	bne.n	800af92 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800af5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800af72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800af76:	2b01      	cmp	r3, #1
 800af78:	d105      	bne.n	800af86 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f9dc 	bl	800b344 <USB_CoreReset>
 800af8c:	4603      	mov	r3, r0
 800af8e:	73fb      	strb	r3, [r7, #15]
 800af90:	e01b      	b.n	800afca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f9d0 	bl	800b344 <USB_CoreReset>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800afa8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800afac:	2b00      	cmp	r3, #0
 800afae:	d106      	bne.n	800afbe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	639a      	str	r2, [r3, #56]	@ 0x38
 800afbc:	e005      	b.n	800afca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800afca:	7fbb      	ldrb	r3, [r7, #30]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d10b      	bne.n	800afe8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f043 0206 	orr.w	r2, r3, #6
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	f043 0220 	orr.w	r2, r3, #32
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aff4:	b004      	add	sp, #16
 800aff6:	4770      	bx	lr

0800aff8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	f043 0201 	orr.w	r2, r3, #1
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	370c      	adds	r7, #12
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b01a:	b480      	push	{r7}
 800b01c:	b083      	sub	sp, #12
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f023 0201 	bic.w	r2, r3, #1
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b048:	2300      	movs	r3, #0
 800b04a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b058:	78fb      	ldrb	r3, [r7, #3]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d115      	bne.n	800b08a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b06a:	200a      	movs	r0, #10
 800b06c:	f7f6 fe8e 	bl	8001d8c <HAL_Delay>
      ms += 10U;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	330a      	adds	r3, #10
 800b074:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f956 	bl	800b328 <USB_GetMode>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d01e      	beq.n	800b0c0 <USB_SetCurrentMode+0x84>
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2bc7      	cmp	r3, #199	@ 0xc7
 800b086:	d9f0      	bls.n	800b06a <USB_SetCurrentMode+0x2e>
 800b088:	e01a      	b.n	800b0c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b08a:	78fb      	ldrb	r3, [r7, #3]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d115      	bne.n	800b0bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b09c:	200a      	movs	r0, #10
 800b09e:	f7f6 fe75 	bl	8001d8c <HAL_Delay>
      ms += 10U;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	330a      	adds	r3, #10
 800b0a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f93d 	bl	800b328 <USB_GetMode>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d005      	beq.n	800b0c0 <USB_SetCurrentMode+0x84>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2bc7      	cmp	r3, #199	@ 0xc7
 800b0b8:	d9f0      	bls.n	800b09c <USB_SetCurrentMode+0x60>
 800b0ba:	e001      	b.n	800b0c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e005      	b.n	800b0cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2bc8      	cmp	r3, #200	@ 0xc8
 800b0c4:	d101      	bne.n	800b0ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e000      	b.n	800b0cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0ee:	d901      	bls.n	800b0f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	e01b      	b.n	800b12c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	daf2      	bge.n	800b0e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	019b      	lsls	r3, r3, #6
 800b104:	f043 0220 	orr.w	r2, r3, #32
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	3301      	adds	r3, #1
 800b110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b118:	d901      	bls.n	800b11e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b11a:	2303      	movs	r3, #3
 800b11c:	e006      	b.n	800b12c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	f003 0320 	and.w	r3, r3, #32
 800b126:	2b20      	cmp	r3, #32
 800b128:	d0f0      	beq.n	800b10c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b140:	2300      	movs	r3, #0
 800b142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	3301      	adds	r3, #1
 800b148:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b150:	d901      	bls.n	800b156 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b152:	2303      	movs	r3, #3
 800b154:	e018      	b.n	800b188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	daf2      	bge.n	800b144 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b15e:	2300      	movs	r3, #0
 800b160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2210      	movs	r2, #16
 800b166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3301      	adds	r3, #1
 800b16c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b174:	d901      	bls.n	800b17a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e006      	b.n	800b188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	f003 0310 	and.w	r3, r3, #16
 800b182:	2b10      	cmp	r3, #16
 800b184:	d0f0      	beq.n	800b168 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b194:	b480      	push	{r7}
 800b196:	b089      	sub	sp, #36	@ 0x24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	4611      	mov	r1, r2
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	71fb      	strb	r3, [r7, #7]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b1b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d123      	bne.n	800b202 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b1ba:	88bb      	ldrh	r3, [r7, #4]
 800b1bc:	3303      	adds	r3, #3
 800b1be:	089b      	lsrs	r3, r3, #2
 800b1c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	61bb      	str	r3, [r7, #24]
 800b1c6:	e018      	b.n	800b1fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b1c8:	79fb      	ldrb	r3, [r7, #7]
 800b1ca:	031a      	lsls	r2, r3, #12
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	61bb      	str	r3, [r7, #24]
 800b1fa:	69ba      	ldr	r2, [r7, #24]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d3e2      	bcc.n	800b1c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3724      	adds	r7, #36	@ 0x24
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b210:	b480      	push	{r7}
 800b212:	b08b      	sub	sp, #44	@ 0x2c
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	4613      	mov	r3, r2
 800b21c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b226:	88fb      	ldrh	r3, [r7, #6]
 800b228:	089b      	lsrs	r3, r3, #2
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b22e:	88fb      	ldrh	r3, [r7, #6]
 800b230:	f003 0303 	and.w	r3, r3, #3
 800b234:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b236:	2300      	movs	r3, #0
 800b238:	623b      	str	r3, [r7, #32]
 800b23a:	e014      	b.n	800b266 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b246:	601a      	str	r2, [r3, #0]
    pDest++;
 800b248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24a:	3301      	adds	r3, #1
 800b24c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b250:	3301      	adds	r3, #1
 800b252:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b256:	3301      	adds	r3, #1
 800b258:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25c:	3301      	adds	r3, #1
 800b25e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	3301      	adds	r3, #1
 800b264:	623b      	str	r3, [r7, #32]
 800b266:	6a3a      	ldr	r2, [r7, #32]
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d3e6      	bcc.n	800b23c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b26e:	8bfb      	ldrh	r3, [r7, #30]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d01e      	beq.n	800b2b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b274:	2300      	movs	r3, #0
 800b276:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b27e:	461a      	mov	r2, r3
 800b280:	f107 0310 	add.w	r3, r7, #16
 800b284:	6812      	ldr	r2, [r2, #0]
 800b286:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	00db      	lsls	r3, r3, #3
 800b290:	fa22 f303 	lsr.w	r3, r2, r3
 800b294:	b2da      	uxtb	r2, r3
 800b296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b298:	701a      	strb	r2, [r3, #0]
      i++;
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	3301      	adds	r3, #1
 800b29e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b2a6:	8bfb      	ldrh	r3, [r7, #30]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b2ac:	8bfb      	ldrh	r3, [r7, #30]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d1ea      	bne.n	800b288 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	372c      	adds	r7, #44	@ 0x2c
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	695b      	ldr	r3, [r3, #20]
 800b2cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr

0800b2e6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b085      	sub	sp, #20
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800b2f6:	78fb      	ldrb	r3, [r7, #3]
 800b2f8:	015a      	lsls	r2, r3, #5
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800b306:	78fb      	ldrb	r3, [r7, #3]
 800b308:	015a      	lsls	r2, r3, #5
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	4413      	add	r3, r2
 800b30e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	4013      	ands	r3, r2
 800b318:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b31a:	68bb      	ldr	r3, [r7, #8]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	f003 0301 	and.w	r3, r3, #1
}
 800b338:	4618      	mov	r0, r3
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b34c:	2300      	movs	r3, #0
 800b34e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	3301      	adds	r3, #1
 800b354:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b35c:	d901      	bls.n	800b362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b35e:	2303      	movs	r3, #3
 800b360:	e01b      	b.n	800b39a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	daf2      	bge.n	800b350 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b36a:	2300      	movs	r3, #0
 800b36c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	f043 0201 	orr.w	r2, r3, #1
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3301      	adds	r3, #1
 800b37e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b386:	d901      	bls.n	800b38c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b388:	2303      	movs	r3, #3
 800b38a:	e006      	b.n	800b39a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	f003 0301 	and.w	r3, r3, #1
 800b394:	2b01      	cmp	r3, #1
 800b396:	d0f0      	beq.n	800b37a <USB_CoreReset+0x36>

  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3714      	adds	r7, #20
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
	...

0800b3a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b3a8:	b084      	sub	sp, #16
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b086      	sub	sp, #24
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
 800b3b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b3b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d119      	bne.n	800b41a <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b3e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d10a      	bne.n	800b404 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b3fc:	f043 0304 	orr.w	r3, r3, #4
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	e014      	b.n	800b42e <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b412:	f023 0304 	bic.w	r3, r3, #4
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	e009      	b.n	800b42e <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b428:	f023 0304 	bic.w	r3, r3, #4
 800b42c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b42e:	2110      	movs	r1, #16
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7ff fe4f 	bl	800b0d4 <USB_FlushTxFifo>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f7ff fe79 	bl	800b138 <USB_FlushRxFifo>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b450:	2300      	movs	r3, #0
 800b452:	613b      	str	r3, [r7, #16]
 800b454:	e015      	b.n	800b482 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	015a      	lsls	r2, r3, #5
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	4413      	add	r3, r2
 800b45e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b462:	461a      	mov	r2, r3
 800b464:	f04f 33ff 	mov.w	r3, #4294967295
 800b468:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	4413      	add	r3, r2
 800b472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b476:	461a      	mov	r2, r3
 800b478:	2300      	movs	r3, #0
 800b47a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	3301      	adds	r3, #1
 800b480:	613b      	str	r3, [r7, #16]
 800b482:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b486:	461a      	mov	r2, r3
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d3e3      	bcc.n	800b456 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f04f 32ff 	mov.w	r2, #4294967295
 800b49a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a18      	ldr	r2, [pc, #96]	@ (800b500 <USB_HostInit+0x158>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d10b      	bne.n	800b4bc <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4aa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a15      	ldr	r2, [pc, #84]	@ (800b504 <USB_HostInit+0x15c>)
 800b4b0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a14      	ldr	r2, [pc, #80]	@ (800b508 <USB_HostInit+0x160>)
 800b4b6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800b4ba:	e009      	b.n	800b4d0 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2280      	movs	r2, #128	@ 0x80
 800b4c0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a11      	ldr	r2, [pc, #68]	@ (800b50c <USB_HostInit+0x164>)
 800b4c6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a11      	ldr	r2, [pc, #68]	@ (800b510 <USB_HostInit+0x168>)
 800b4cc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b4d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d105      	bne.n	800b4e4 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	699b      	ldr	r3, [r3, #24]
 800b4dc:	f043 0210 	orr.w	r2, r3, #16
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	699a      	ldr	r2, [r3, #24]
 800b4e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b514 <USB_HostInit+0x16c>)
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b4f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4fc:	b004      	add	sp, #16
 800b4fe:	4770      	bx	lr
 800b500:	40040000 	.word	0x40040000
 800b504:	01000200 	.word	0x01000200
 800b508:	00e00300 	.word	0x00e00300
 800b50c:	00600080 	.word	0x00600080
 800b510:	004000e0 	.word	0x004000e0
 800b514:	a3200008 	.word	0xa3200008

0800b518 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b536:	f023 0303 	bic.w	r3, r3, #3
 800b53a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	78fb      	ldrb	r3, [r7, #3]
 800b546:	f003 0303 	and.w	r3, r3, #3
 800b54a:	68f9      	ldr	r1, [r7, #12]
 800b54c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b550:	4313      	orrs	r3, r2
 800b552:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b554:	78fb      	ldrb	r3, [r7, #3]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d107      	bne.n	800b56a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b560:	461a      	mov	r2, r3
 800b562:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b566:	6053      	str	r3, [r2, #4]
 800b568:	e00c      	b.n	800b584 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800b56a:	78fb      	ldrb	r3, [r7, #3]
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d107      	bne.n	800b580 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b576:	461a      	mov	r2, r3
 800b578:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b57c:	6053      	str	r3, [r2, #4]
 800b57e:	e001      	b.n	800b584 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	e000      	b.n	800b586 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3714      	adds	r7, #20
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b5b2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b5bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5c0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b5c2:	2064      	movs	r0, #100	@ 0x64
 800b5c4:	f7f6 fbe2 	bl	8001d8c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b5d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5d4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b5d6:	200a      	movs	r0, #10
 800b5d8:	f7f6 fbd8 	bl	8001d8c <HAL_Delay>

  return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b085      	sub	sp, #20
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b60a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b612:	2b00      	cmp	r3, #0
 800b614:	d109      	bne.n	800b62a <USB_DriveVbus+0x44>
 800b616:	78fb      	ldrb	r3, [r7, #3]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d106      	bne.n	800b62a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b624:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b628:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b634:	d109      	bne.n	800b64a <USB_DriveVbus+0x64>
 800b636:	78fb      	ldrb	r3, [r7, #3]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d106      	bne.n	800b64a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b644:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b648:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b664:	2300      	movs	r3, #0
 800b666:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	0c5b      	lsrs	r3, r3, #17
 800b676:	f003 0303 	and.w	r3, r3, #3
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3714      	adds	r7, #20
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b686:	b480      	push	{r7}
 800b688:	b085      	sub	sp, #20
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	b29b      	uxth	r3, r3
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3714      	adds	r7, #20
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	4608      	mov	r0, r1
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	70fb      	strb	r3, [r7, #3]
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	70bb      	strb	r3, [r7, #2]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	015a      	lsls	r2, r3, #5
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b6de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	d87c      	bhi.n	800b7e0 <USB_HC_Init+0x138>
 800b6e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b6ec <USB_HC_Init+0x44>)
 800b6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ec:	0800b6fd 	.word	0x0800b6fd
 800b6f0:	0800b7a3 	.word	0x0800b7a3
 800b6f4:	0800b6fd 	.word	0x0800b6fd
 800b6f8:	0800b765 	.word	0x0800b765
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b6fc:	78fb      	ldrb	r3, [r7, #3]
 800b6fe:	015a      	lsls	r2, r3, #5
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	4413      	add	r3, r2
 800b704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b708:	461a      	mov	r2, r3
 800b70a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b70e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b710:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b714:	2b00      	cmp	r3, #0
 800b716:	da10      	bge.n	800b73a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b718:	78fb      	ldrb	r3, [r7, #3]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	78fa      	ldrb	r2, [r7, #3]
 800b728:	0151      	lsls	r1, r2, #5
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	440a      	add	r2, r1
 800b72e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b736:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b738:	e055      	b.n	800b7e6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a6f      	ldr	r2, [pc, #444]	@ (800b8fc <USB_HC_Init+0x254>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d151      	bne.n	800b7e6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b742:	78fb      	ldrb	r3, [r7, #3]
 800b744:	015a      	lsls	r2, r3, #5
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	4413      	add	r3, r2
 800b74a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	78fa      	ldrb	r2, [r7, #3]
 800b752:	0151      	lsls	r1, r2, #5
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	440a      	add	r2, r1
 800b758:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b75c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b760:	60d3      	str	r3, [r2, #12]
      break;
 800b762:	e040      	b.n	800b7e6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	015a      	lsls	r2, r3, #5
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	4413      	add	r3, r2
 800b76c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b770:	461a      	mov	r2, r3
 800b772:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b776:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b778:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	da34      	bge.n	800b7ea <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b780:	78fb      	ldrb	r3, [r7, #3]
 800b782:	015a      	lsls	r2, r3, #5
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	4413      	add	r3, r2
 800b788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	78fa      	ldrb	r2, [r7, #3]
 800b790:	0151      	lsls	r1, r2, #5
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	440a      	add	r2, r1
 800b796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b79a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b79e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b7a0:	e023      	b.n	800b7ea <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b7a2:	78fb      	ldrb	r3, [r7, #3]
 800b7a4:	015a      	lsls	r2, r3, #5
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f240 2325 	movw	r3, #549	@ 0x225
 800b7b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b7b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	da17      	bge.n	800b7ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b7be:	78fb      	ldrb	r3, [r7, #3]
 800b7c0:	015a      	lsls	r2, r3, #5
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	78fa      	ldrb	r2, [r7, #3]
 800b7ce:	0151      	lsls	r1, r2, #5
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	440a      	add	r2, r1
 800b7d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7d8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b7dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b7de:	e006      	b.n	800b7ee <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	77fb      	strb	r3, [r7, #31]
      break;
 800b7e4:	e004      	b.n	800b7f0 <USB_HC_Init+0x148>
      break;
 800b7e6:	bf00      	nop
 800b7e8:	e002      	b.n	800b7f0 <USB_HC_Init+0x148>
      break;
 800b7ea:	bf00      	nop
 800b7ec:	e000      	b.n	800b7f0 <USB_HC_Init+0x148>
      break;
 800b7ee:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b7f0:	78fb      	ldrb	r3, [r7, #3]
 800b7f2:	015a      	lsls	r2, r3, #5
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	2300      	movs	r3, #0
 800b800:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b802:	78fb      	ldrb	r3, [r7, #3]
 800b804:	015a      	lsls	r2, r3, #5
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	4413      	add	r3, r2
 800b80a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	78fa      	ldrb	r2, [r7, #3]
 800b812:	0151      	lsls	r1, r2, #5
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	440a      	add	r2, r1
 800b818:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b81c:	f043 0302 	orr.w	r3, r3, #2
 800b820:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b828:	699a      	ldr	r2, [r3, #24]
 800b82a:	78fb      	ldrb	r3, [r7, #3]
 800b82c:	f003 030f 	and.w	r3, r3, #15
 800b830:	2101      	movs	r1, #1
 800b832:	fa01 f303 	lsl.w	r3, r1, r3
 800b836:	6939      	ldr	r1, [r7, #16]
 800b838:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b83c:	4313      	orrs	r3, r2
 800b83e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b84c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b850:	2b00      	cmp	r3, #0
 800b852:	da03      	bge.n	800b85c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b854:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b858:	61bb      	str	r3, [r7, #24]
 800b85a:	e001      	b.n	800b860 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800b85c:	2300      	movs	r3, #0
 800b85e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff fef9 	bl	800b658 <USB_GetHostSpeed>
 800b866:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b868:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d106      	bne.n	800b87e <USB_HC_Init+0x1d6>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2b02      	cmp	r3, #2
 800b874:	d003      	beq.n	800b87e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b876:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e001      	b.n	800b882 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b87e:	2300      	movs	r3, #0
 800b880:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b882:	787b      	ldrb	r3, [r7, #1]
 800b884:	059b      	lsls	r3, r3, #22
 800b886:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b88a:	78bb      	ldrb	r3, [r7, #2]
 800b88c:	02db      	lsls	r3, r3, #11
 800b88e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b892:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b894:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b898:	049b      	lsls	r3, r3, #18
 800b89a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b89e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b8a0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b8a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b8a6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	431a      	orrs	r2, r3
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b8b0:	78fa      	ldrb	r2, [r7, #3]
 800b8b2:	0151      	lsls	r1, r2, #5
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	440a      	add	r2, r1
 800b8b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b8bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b8c0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b8c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	d003      	beq.n	800b8d2 <USB_HC_Init+0x22a>
 800b8ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d10f      	bne.n	800b8f2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b8d2:	78fb      	ldrb	r3, [r7, #3]
 800b8d4:	015a      	lsls	r2, r3, #5
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	4413      	add	r3, r2
 800b8da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	78fa      	ldrb	r2, [r7, #3]
 800b8e2:	0151      	lsls	r1, r2, #5
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	440a      	add	r2, r1
 800b8e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b8f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b8f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3720      	adds	r7, #32
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	40040000 	.word	0x40040000

0800b900 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08c      	sub	sp, #48	@ 0x30
 800b904:	af02      	add	r7, sp, #8
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	4613      	mov	r3, r2
 800b90c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	785b      	ldrb	r3, [r3, #1]
 800b916:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b91c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	4a5d      	ldr	r2, [pc, #372]	@ (800ba98 <USB_HC_StartXfer+0x198>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d12f      	bne.n	800b986 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800b926:	79fb      	ldrb	r3, [r7, #7]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d11c      	bne.n	800b966 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	7c9b      	ldrb	r3, [r3, #18]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d003      	beq.n	800b93c <USB_HC_StartXfer+0x3c>
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	7c9b      	ldrb	r3, [r3, #18]
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d124      	bne.n	800b986 <USB_HC_StartXfer+0x86>
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	799b      	ldrb	r3, [r3, #6]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d120      	bne.n	800b986 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	015a      	lsls	r2, r3, #5
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	4413      	add	r3, r2
 800b94c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	69fa      	ldr	r2, [r7, #28]
 800b954:	0151      	lsls	r1, r2, #5
 800b956:	6a3a      	ldr	r2, [r7, #32]
 800b958:	440a      	add	r2, r1
 800b95a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b95e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b962:	60d3      	str	r3, [r2, #12]
 800b964:	e00f      	b.n	800b986 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	791b      	ldrb	r3, [r3, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10b      	bne.n	800b986 <USB_HC_StartXfer+0x86>
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	795b      	ldrb	r3, [r3, #5]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d107      	bne.n	800b986 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	785b      	ldrb	r3, [r3, #1]
 800b97a:	4619      	mov	r1, r3
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f000 fb6b 	bl	800c058 <USB_DoPing>
        return HAL_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	e232      	b.n	800bdec <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	799b      	ldrb	r3, [r3, #6]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d158      	bne.n	800ba40 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b98e:	2301      	movs	r3, #1
 800b990:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	78db      	ldrb	r3, [r3, #3]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d007      	beq.n	800b9aa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b99a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	8a92      	ldrh	r2, [r2, #20]
 800b9a0:	fb03 f202 	mul.w	r2, r3, r2
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	61da      	str	r2, [r3, #28]
 800b9a8:	e07c      	b.n	800baa4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	7c9b      	ldrb	r3, [r3, #18]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d130      	bne.n	800ba14 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	6a1b      	ldr	r3, [r3, #32]
 800b9b6:	2bbc      	cmp	r3, #188	@ 0xbc
 800b9b8:	d918      	bls.n	800b9ec <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	8a9b      	ldrh	r3, [r3, #20]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	69da      	ldr	r2, [r3, #28]
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d003      	beq.n	800b9dc <USB_HC_StartXfer+0xdc>
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	d103      	bne.n	800b9e4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2202      	movs	r2, #2
 800b9e0:	60da      	str	r2, [r3, #12]
 800b9e2:	e05f      	b.n	800baa4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	60da      	str	r2, [r3, #12]
 800b9ea:	e05b      	b.n	800baa4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	6a1a      	ldr	r2, [r3, #32]
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d007      	beq.n	800ba0c <USB_HC_StartXfer+0x10c>
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d003      	beq.n	800ba0c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2204      	movs	r2, #4
 800ba08:	60da      	str	r2, [r3, #12]
 800ba0a:	e04b      	b.n	800baa4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2203      	movs	r2, #3
 800ba10:	60da      	str	r2, [r3, #12]
 800ba12:	e047      	b.n	800baa4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800ba14:	79fb      	ldrb	r3, [r7, #7]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d10d      	bne.n	800ba36 <USB_HC_StartXfer+0x136>
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	8a92      	ldrh	r2, [r2, #20]
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d907      	bls.n	800ba36 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ba26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	8a92      	ldrh	r2, [r2, #20]
 800ba2c:	fb03 f202 	mul.w	r2, r3, r2
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	61da      	str	r2, [r3, #28]
 800ba34:	e036      	b.n	800baa4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	6a1a      	ldr	r2, [r3, #32]
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	61da      	str	r2, [r3, #28]
 800ba3e:	e031      	b.n	800baa4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	6a1b      	ldr	r3, [r3, #32]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d018      	beq.n	800ba7a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	6a1b      	ldr	r3, [r3, #32]
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	8a92      	ldrh	r2, [r2, #20]
 800ba50:	4413      	add	r3, r2
 800ba52:	3b01      	subs	r3, #1
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	8a92      	ldrh	r2, [r2, #20]
 800ba58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba5c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800ba5e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ba60:	8b7b      	ldrh	r3, [r7, #26]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d90b      	bls.n	800ba7e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800ba66:	8b7b      	ldrh	r3, [r7, #26]
 800ba68:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ba6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	8a92      	ldrh	r2, [r2, #20]
 800ba70:	fb03 f202 	mul.w	r2, r3, r2
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	61da      	str	r2, [r3, #28]
 800ba78:	e001      	b.n	800ba7e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	78db      	ldrb	r3, [r3, #3]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00a      	beq.n	800ba9c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ba86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	8a92      	ldrh	r2, [r2, #20]
 800ba8c:	fb03 f202 	mul.w	r2, r3, r2
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	61da      	str	r2, [r3, #28]
 800ba94:	e006      	b.n	800baa4 <USB_HC_StartXfer+0x1a4>
 800ba96:	bf00      	nop
 800ba98:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	6a1a      	ldr	r2, [r3, #32]
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	69db      	ldr	r3, [r3, #28]
 800baa8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800baac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800baae:	04d9      	lsls	r1, r3, #19
 800bab0:	4ba3      	ldr	r3, [pc, #652]	@ (800bd40 <USB_HC_StartXfer+0x440>)
 800bab2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bab4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	7d9b      	ldrb	r3, [r3, #22]
 800baba:	075b      	lsls	r3, r3, #29
 800babc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bac0:	69f9      	ldr	r1, [r7, #28]
 800bac2:	0148      	lsls	r0, r1, #5
 800bac4:	6a39      	ldr	r1, [r7, #32]
 800bac6:	4401      	add	r1, r0
 800bac8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bacc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bace:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bad0:	79fb      	ldrb	r3, [r7, #7]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d009      	beq.n	800baea <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	6999      	ldr	r1, [r3, #24]
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	015a      	lsls	r2, r3, #5
 800bade:	6a3b      	ldr	r3, [r7, #32]
 800bae0:	4413      	add	r3, r2
 800bae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bae6:	460a      	mov	r2, r1
 800bae8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	bf0c      	ite	eq
 800bafa:	2301      	moveq	r3, #1
 800bafc:	2300      	movne	r3, #0
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	6a3b      	ldr	r3, [r7, #32]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	69fa      	ldr	r2, [r7, #28]
 800bb12:	0151      	lsls	r1, r2, #5
 800bb14:	6a3a      	ldr	r2, [r7, #32]
 800bb16:	440a      	add	r2, r1
 800bb18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb20:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	015a      	lsls	r2, r3, #5
 800bb26:	6a3b      	ldr	r3, [r7, #32]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	7e7b      	ldrb	r3, [r7, #25]
 800bb32:	075b      	lsls	r3, r3, #29
 800bb34:	69f9      	ldr	r1, [r7, #28]
 800bb36:	0148      	lsls	r0, r1, #5
 800bb38:	6a39      	ldr	r1, [r7, #32]
 800bb3a:	4401      	add	r1, r0
 800bb3c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800bb40:	4313      	orrs	r3, r2
 800bb42:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	799b      	ldrb	r3, [r3, #6]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	f040 80c3 	bne.w	800bcd4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	7c5b      	ldrb	r3, [r3, #17]
 800bb52:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	69fa      	ldr	r2, [r7, #28]
 800bb5c:	0151      	lsls	r1, r2, #5
 800bb5e:	6a3a      	ldr	r2, [r7, #32]
 800bb60:	440a      	add	r2, r1
 800bb62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800bb66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bb6a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	015a      	lsls	r2, r3, #5
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	4413      	add	r3, r2
 800bb74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	69fa      	ldr	r2, [r7, #28]
 800bb7c:	0151      	lsls	r1, r2, #5
 800bb7e:	6a3a      	ldr	r2, [r7, #32]
 800bb80:	440a      	add	r2, r1
 800bb82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb86:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800bb8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	79db      	ldrb	r3, [r3, #7]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d123      	bne.n	800bbdc <USB_HC_StartXfer+0x2dc>
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	78db      	ldrb	r3, [r3, #3]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d11f      	bne.n	800bbdc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	69fa      	ldr	r2, [r7, #28]
 800bbac:	0151      	lsls	r1, r2, #5
 800bbae:	6a3a      	ldr	r2, [r7, #32]
 800bbb0:	440a      	add	r2, r1
 800bbb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bbba:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	015a      	lsls	r2, r3, #5
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	69fa      	ldr	r2, [r7, #28]
 800bbcc:	0151      	lsls	r1, r2, #5
 800bbce:	6a3a      	ldr	r2, [r7, #32]
 800bbd0:	440a      	add	r2, r1
 800bbd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbda:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	7c9b      	ldrb	r3, [r3, #18]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d003      	beq.n	800bbec <USB_HC_StartXfer+0x2ec>
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	7c9b      	ldrb	r3, [r3, #18]
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d117      	bne.n	800bc1c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d113      	bne.n	800bc1c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	78db      	ldrb	r3, [r3, #3]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d10f      	bne.n	800bc1c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	015a      	lsls	r2, r3, #5
 800bc00:	6a3b      	ldr	r3, [r7, #32]
 800bc02:	4413      	add	r3, r2
 800bc04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	69fa      	ldr	r2, [r7, #28]
 800bc0c:	0151      	lsls	r1, r2, #5
 800bc0e:	6a3a      	ldr	r2, [r7, #32]
 800bc10:	440a      	add	r2, r1
 800bc12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc1a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	7c9b      	ldrb	r3, [r3, #18]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d162      	bne.n	800bcea <USB_HC_StartXfer+0x3ea>
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	78db      	ldrb	r3, [r3, #3]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d15e      	bne.n	800bcea <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	3b01      	subs	r3, #1
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d858      	bhi.n	800bce8 <USB_HC_StartXfer+0x3e8>
 800bc36:	a201      	add	r2, pc, #4	@ (adr r2, 800bc3c <USB_HC_StartXfer+0x33c>)
 800bc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3c:	0800bc4d 	.word	0x0800bc4d
 800bc40:	0800bc6f 	.word	0x0800bc6f
 800bc44:	0800bc91 	.word	0x0800bc91
 800bc48:	0800bcb3 	.word	0x0800bcb3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	015a      	lsls	r2, r3, #5
 800bc50:	6a3b      	ldr	r3, [r7, #32]
 800bc52:	4413      	add	r3, r2
 800bc54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	69fa      	ldr	r2, [r7, #28]
 800bc5c:	0151      	lsls	r1, r2, #5
 800bc5e:	6a3a      	ldr	r2, [r7, #32]
 800bc60:	440a      	add	r2, r1
 800bc62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc6a:	6053      	str	r3, [r2, #4]
          break;
 800bc6c:	e03d      	b.n	800bcea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	015a      	lsls	r2, r3, #5
 800bc72:	6a3b      	ldr	r3, [r7, #32]
 800bc74:	4413      	add	r3, r2
 800bc76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	69fa      	ldr	r2, [r7, #28]
 800bc7e:	0151      	lsls	r1, r2, #5
 800bc80:	6a3a      	ldr	r2, [r7, #32]
 800bc82:	440a      	add	r2, r1
 800bc84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc88:	f043 030e 	orr.w	r3, r3, #14
 800bc8c:	6053      	str	r3, [r2, #4]
          break;
 800bc8e:	e02c      	b.n	800bcea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	015a      	lsls	r2, r3, #5
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	4413      	add	r3, r2
 800bc98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	69fa      	ldr	r2, [r7, #28]
 800bca0:	0151      	lsls	r1, r2, #5
 800bca2:	6a3a      	ldr	r2, [r7, #32]
 800bca4:	440a      	add	r2, r1
 800bca6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bcaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bcae:	6053      	str	r3, [r2, #4]
          break;
 800bcb0:	e01b      	b.n	800bcea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	015a      	lsls	r2, r3, #5
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	4413      	add	r3, r2
 800bcba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	69fa      	ldr	r2, [r7, #28]
 800bcc2:	0151      	lsls	r1, r2, #5
 800bcc4:	6a3a      	ldr	r2, [r7, #32]
 800bcc6:	440a      	add	r2, r1
 800bcc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bcd0:	6053      	str	r3, [r2, #4]
          break;
 800bcd2:	e00a      	b.n	800bcea <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	015a      	lsls	r2, r3, #5
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bce0:	461a      	mov	r2, r3
 800bce2:	2300      	movs	r3, #0
 800bce4:	6053      	str	r3, [r2, #4]
 800bce6:	e000      	b.n	800bcea <USB_HC_StartXfer+0x3ea>
          break;
 800bce8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	015a      	lsls	r2, r3, #5
 800bcee:	6a3b      	ldr	r3, [r7, #32]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bd00:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	78db      	ldrb	r3, [r3, #3]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d004      	beq.n	800bd14 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd10:	613b      	str	r3, [r7, #16]
 800bd12:	e003      	b.n	800bd1c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bd1a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bd22:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	015a      	lsls	r2, r3, #5
 800bd28:	6a3b      	ldr	r3, [r7, #32]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd30:	461a      	mov	r2, r3
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800bd36:	79fb      	ldrb	r3, [r7, #7]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	e055      	b.n	800bdec <USB_HC_StartXfer+0x4ec>
 800bd40:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	78db      	ldrb	r3, [r3, #3]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d14e      	bne.n	800bdea <USB_HC_StartXfer+0x4ea>
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	6a1b      	ldr	r3, [r3, #32]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d04a      	beq.n	800bdea <USB_HC_StartXfer+0x4ea>
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	79db      	ldrb	r3, [r3, #7]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d146      	bne.n	800bdea <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	7c9b      	ldrb	r3, [r3, #18]
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d831      	bhi.n	800bdc8 <USB_HC_StartXfer+0x4c8>
 800bd64:	a201      	add	r2, pc, #4	@ (adr r2, 800bd6c <USB_HC_StartXfer+0x46c>)
 800bd66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6a:	bf00      	nop
 800bd6c:	0800bd7d 	.word	0x0800bd7d
 800bd70:	0800bda1 	.word	0x0800bda1
 800bd74:	0800bd7d 	.word	0x0800bd7d
 800bd78:	0800bda1 	.word	0x0800bda1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	6a1b      	ldr	r3, [r3, #32]
 800bd80:	3303      	adds	r3, #3
 800bd82:	089b      	lsrs	r3, r3, #2
 800bd84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bd86:	8afa      	ldrh	r2, [r7, #22]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d91c      	bls.n	800bdcc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	f043 0220 	orr.w	r2, r3, #32
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	619a      	str	r2, [r3, #24]
        }
        break;
 800bd9e:	e015      	b.n	800bdcc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	6a1b      	ldr	r3, [r3, #32]
 800bda4:	3303      	adds	r3, #3
 800bda6:	089b      	lsrs	r3, r3, #2
 800bda8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bdaa:	8afa      	ldrh	r2, [r7, #22]
 800bdac:	6a3b      	ldr	r3, [r7, #32]
 800bdae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d90a      	bls.n	800bdd0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	699b      	ldr	r3, [r3, #24]
 800bdbe:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	619a      	str	r2, [r3, #24]
        }
        break;
 800bdc6:	e003      	b.n	800bdd0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800bdc8:	bf00      	nop
 800bdca:	e002      	b.n	800bdd2 <USB_HC_StartXfer+0x4d2>
        break;
 800bdcc:	bf00      	nop
 800bdce:	e000      	b.n	800bdd2 <USB_HC_StartXfer+0x4d2>
        break;
 800bdd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	6999      	ldr	r1, [r3, #24]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	785a      	ldrb	r2, [r3, #1]
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	6a1b      	ldr	r3, [r3, #32]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	2000      	movs	r0, #0
 800bde2:	9000      	str	r0, [sp, #0]
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f7ff f9d5 	bl	800b194 <USB_WritePacket>
  }

  return HAL_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3728      	adds	r7, #40	@ 0x28
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	b29b      	uxth	r3, r3
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800be16:	b480      	push	{r7}
 800be18:	b089      	sub	sp, #36	@ 0x24
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	460b      	mov	r3, r1
 800be20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800be26:	78fb      	ldrb	r3, [r7, #3]
 800be28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800be2a:	2300      	movs	r3, #0
 800be2c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	015a      	lsls	r2, r3, #5
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	4413      	add	r3, r2
 800be36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	0c9b      	lsrs	r3, r3, #18
 800be3e:	f003 0303 	and.w	r3, r3, #3
 800be42:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	015a      	lsls	r2, r3, #5
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	4413      	add	r3, r2
 800be4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	0fdb      	lsrs	r3, r3, #31
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	015a      	lsls	r2, r3, #5
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	4413      	add	r3, r2
 800be62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	0fdb      	lsrs	r3, r3, #31
 800be6a:	f003 0301 	and.w	r3, r3, #1
 800be6e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	689b      	ldr	r3, [r3, #8]
 800be74:	f003 0320 	and.w	r3, r3, #32
 800be78:	2b20      	cmp	r3, #32
 800be7a:	d10d      	bne.n	800be98 <USB_HC_Halt+0x82>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10a      	bne.n	800be98 <USB_HC_Halt+0x82>
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d005      	beq.n	800be94 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d002      	beq.n	800be94 <USB_HC_Halt+0x7e>
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	2b03      	cmp	r3, #3
 800be92:	d101      	bne.n	800be98 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	e0d8      	b.n	800c04a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d002      	beq.n	800bea4 <USB_HC_Halt+0x8e>
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d173      	bne.n	800bf8c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	015a      	lsls	r2, r3, #5
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	69ba      	ldr	r2, [r7, #24]
 800beb4:	0151      	lsls	r1, r2, #5
 800beb6:	69fa      	ldr	r2, [r7, #28]
 800beb8:	440a      	add	r2, r1
 800beba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bebe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bec2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f003 0320 	and.w	r3, r3, #32
 800becc:	2b00      	cmp	r3, #0
 800bece:	d14a      	bne.n	800bf66 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d133      	bne.n	800bf44 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	015a      	lsls	r2, r3, #5
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	4413      	add	r3, r2
 800bee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	69ba      	ldr	r2, [r7, #24]
 800beec:	0151      	lsls	r1, r2, #5
 800beee:	69fa      	ldr	r2, [r7, #28]
 800bef0:	440a      	add	r2, r1
 800bef2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bef6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800befa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	015a      	lsls	r2, r3, #5
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	4413      	add	r3, r2
 800bf04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	69ba      	ldr	r2, [r7, #24]
 800bf0c:	0151      	lsls	r1, r2, #5
 800bf0e:	69fa      	ldr	r2, [r7, #28]
 800bf10:	440a      	add	r2, r1
 800bf12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bf1a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf28:	d82e      	bhi.n	800bf88 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	015a      	lsls	r2, r3, #5
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	4413      	add	r3, r2
 800bf32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf40:	d0ec      	beq.n	800bf1c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf42:	e081      	b.n	800c048 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	015a      	lsls	r2, r3, #5
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	69ba      	ldr	r2, [r7, #24]
 800bf54:	0151      	lsls	r1, r2, #5
 800bf56:	69fa      	ldr	r2, [r7, #28]
 800bf58:	440a      	add	r2, r1
 800bf5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bf62:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf64:	e070      	b.n	800c048 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	015a      	lsls	r2, r3, #5
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	69ba      	ldr	r2, [r7, #24]
 800bf76:	0151      	lsls	r1, r2, #5
 800bf78:	69fa      	ldr	r2, [r7, #28]
 800bf7a:	440a      	add	r2, r1
 800bf7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bf84:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf86:	e05f      	b.n	800c048 <USB_HC_Halt+0x232>
            break;
 800bf88:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bf8a:	e05d      	b.n	800c048 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	015a      	lsls	r2, r3, #5
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	4413      	add	r3, r2
 800bf94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	69ba      	ldr	r2, [r7, #24]
 800bf9c:	0151      	lsls	r1, r2, #5
 800bf9e:	69fa      	ldr	r2, [r7, #28]
 800bfa0:	440a      	add	r2, r1
 800bfa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bfa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bfaa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d133      	bne.n	800c024 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	015a      	lsls	r2, r3, #5
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	69ba      	ldr	r2, [r7, #24]
 800bfcc:	0151      	lsls	r1, r2, #5
 800bfce:	69fa      	ldr	r2, [r7, #28]
 800bfd0:	440a      	add	r2, r1
 800bfd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bfd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bfda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	015a      	lsls	r2, r3, #5
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	69ba      	ldr	r2, [r7, #24]
 800bfec:	0151      	lsls	r1, r2, #5
 800bfee:	69fa      	ldr	r2, [r7, #28]
 800bff0:	440a      	add	r2, r1
 800bff2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bff6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bffa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	3301      	adds	r3, #1
 800c000:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c008:	d81d      	bhi.n	800c046 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	015a      	lsls	r2, r3, #5
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	4413      	add	r3, r2
 800c012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c01c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c020:	d0ec      	beq.n	800bffc <USB_HC_Halt+0x1e6>
 800c022:	e011      	b.n	800c048 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	015a      	lsls	r2, r3, #5
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	4413      	add	r3, r2
 800c02c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	69ba      	ldr	r2, [r7, #24]
 800c034:	0151      	lsls	r1, r2, #5
 800c036:	69fa      	ldr	r2, [r7, #28]
 800c038:	440a      	add	r2, r1
 800c03a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c03e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c042:	6013      	str	r3, [r2, #0]
 800c044:	e000      	b.n	800c048 <USB_HC_Halt+0x232>
          break;
 800c046:	bf00      	nop
    }
  }

  return HAL_OK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3724      	adds	r7, #36	@ 0x24
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
	...

0800c058 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c058:	b480      	push	{r7}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c06c:	2301      	movs	r3, #1
 800c06e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	04da      	lsls	r2, r3, #19
 800c074:	4b15      	ldr	r3, [pc, #84]	@ (800c0cc <USB_DoPing+0x74>)
 800c076:	4013      	ands	r3, r2
 800c078:	693a      	ldr	r2, [r7, #16]
 800c07a:	0151      	lsls	r1, r2, #5
 800c07c:	697a      	ldr	r2, [r7, #20]
 800c07e:	440a      	add	r2, r1
 800c080:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c084:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c088:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	015a      	lsls	r2, r3, #5
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	4413      	add	r3, r2
 800c092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c0a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c0a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	015a      	lsls	r2, r3, #5
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	371c      	adds	r7, #28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	1ff80000 	.word	0x1ff80000

0800c0d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f7fe ff98 	bl	800b01a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0ea:	2110      	movs	r1, #16
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7fe fff1 	bl	800b0d4 <USB_FlushTxFifo>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f7ff f81b 	bl	800b138 <USB_FlushRxFifo>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c10c:	2300      	movs	r3, #0
 800c10e:	61bb      	str	r3, [r7, #24]
 800c110:	e01f      	b.n	800c152 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	015a      	lsls	r2, r3, #5
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	4413      	add	r3, r2
 800c11a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c128:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c130:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c138:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	015a      	lsls	r2, r3, #5
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	4413      	add	r3, r2
 800c142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c146:	461a      	mov	r2, r3
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	3301      	adds	r3, #1
 800c150:	61bb      	str	r3, [r7, #24]
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	2b0f      	cmp	r3, #15
 800c156:	d9dc      	bls.n	800c112 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c158:	2300      	movs	r3, #0
 800c15a:	61bb      	str	r3, [r7, #24]
 800c15c:	e034      	b.n	800c1c8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	015a      	lsls	r2, r3, #5
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	4413      	add	r3, r2
 800c166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c174:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c17c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c184:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	015a      	lsls	r2, r3, #5
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	4413      	add	r3, r2
 800c18e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c192:	461a      	mov	r2, r3
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	3301      	adds	r3, #1
 800c19c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c1a4:	d80c      	bhi.n	800c1c0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	015a      	lsls	r2, r3, #5
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c1b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1bc:	d0ec      	beq.n	800c198 <USB_StopHost+0xc8>
 800c1be:	e000      	b.n	800c1c2 <USB_StopHost+0xf2>
        break;
 800c1c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	61bb      	str	r3, [r7, #24]
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	2b0f      	cmp	r3, #15
 800c1cc:	d9c7      	bls.n	800c15e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f7fe ff07 	bl	800aff8 <USB_EnableGlobalInt>

  return ret;
 800c1ea:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3720      	adds	r7, #32
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c1f8:	4904      	ldr	r1, [pc, #16]	@ (800c20c <MX_FATFS_Init+0x18>)
 800c1fa:	4805      	ldr	r0, [pc, #20]	@ (800c210 <MX_FATFS_Init+0x1c>)
 800c1fc:	f002 fd74 	bl	800ece8 <FATFS_LinkDriver>
 800c200:	4603      	mov	r3, r0
 800c202:	461a      	mov	r2, r3
 800c204:	4b03      	ldr	r3, [pc, #12]	@ (800c214 <MX_FATFS_Init+0x20>)
 800c206:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c208:	bf00      	nop
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	200007cc 	.word	0x200007cc
 800c210:	08011c94 	.word	0x08011c94
 800c214:	200007c8 	.word	0x200007c8

0800c218 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c222:	f000 f87b 	bl	800c31c <BSP_SD_IsDetected>
 800c226:	4603      	mov	r3, r0
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d001      	beq.n	800c230 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e012      	b.n	800c256 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c230:	480b      	ldr	r0, [pc, #44]	@ (800c260 <BSP_SD_Init+0x48>)
 800c232:	f7fc f855 	bl	80082e0 <HAL_SD_Init>
 800c236:	4603      	mov	r3, r0
 800c238:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c23a:	79fb      	ldrb	r3, [r7, #7]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d109      	bne.n	800c254 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800c240:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c244:	4806      	ldr	r0, [pc, #24]	@ (800c260 <BSP_SD_Init+0x48>)
 800c246:	f7fc fc97 	bl	8008b78 <HAL_SD_ConfigWideBusOperation>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d001      	beq.n	800c254 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c250:	2301      	movs	r3, #1
 800c252:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c254:	79fb      	ldrb	r3, [r7, #7]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	200005dc 	.word	0x200005dc

0800c264 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b086      	sub	sp, #24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c270:	2300      	movs	r3, #0
 800c272:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	68f9      	ldr	r1, [r7, #12]
 800c27a:	4806      	ldr	r0, [pc, #24]	@ (800c294 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c27c:	f7fc f8e0 	bl	8008440 <HAL_SD_ReadBlocks_DMA>
 800c280:	4603      	mov	r3, r0
 800c282:	2b00      	cmp	r3, #0
 800c284:	d001      	beq.n	800c28a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c286:	2301      	movs	r3, #1
 800c288:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	200005dc 	.word	0x200005dc

0800c298 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	68f9      	ldr	r1, [r7, #12]
 800c2ae:	4806      	ldr	r0, [pc, #24]	@ (800c2c8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c2b0:	f7fc f9a6 	bl	8008600 <HAL_SD_WriteBlocks_DMA>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3718      	adds	r7, #24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	200005dc 	.word	0x200005dc

0800c2cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c2d0:	4805      	ldr	r0, [pc, #20]	@ (800c2e8 <BSP_SD_GetCardState+0x1c>)
 800c2d2:	f7fc fceb 	bl	8008cac <HAL_SD_GetCardState>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b04      	cmp	r3, #4
 800c2da:	bf14      	ite	ne
 800c2dc:	2301      	movne	r3, #1
 800c2de:	2300      	moveq	r3, #0
 800c2e0:	b2db      	uxtb	r3, r3
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	200005dc 	.word	0x200005dc

0800c2ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c2f4:	6879      	ldr	r1, [r7, #4]
 800c2f6:	4803      	ldr	r0, [pc, #12]	@ (800c304 <BSP_SD_GetCardInfo+0x18>)
 800c2f8:	f7fc fc12 	bl	8008b20 <HAL_SD_GetCardInfo>
}
 800c2fc:	bf00      	nop
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	200005dc 	.word	0x200005dc

0800c308 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c310:	f000 f9b2 	bl	800c678 <BSP_SD_ReadCpltCallback>
}
 800c314:	bf00      	nop
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c322:	2301      	movs	r3, #1
 800c324:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c326:	f000 f80b 	bl	800c340 <BSP_PlatformIsDetected>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c330:	2300      	movs	r3, #0
 800c332:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c334:	79fb      	ldrb	r3, [r7, #7]
 800c336:	b2db      	uxtb	r3, r3
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c346:	2301      	movs	r3, #1
 800c348:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c34a:	2104      	movs	r1, #4
 800c34c:	4806      	ldr	r0, [pc, #24]	@ (800c368 <BSP_PlatformIsDetected+0x28>)
 800c34e:	f7f7 fbed 	bl	8003b2c <HAL_GPIO_ReadPin>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d001      	beq.n	800c35c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c358:	2300      	movs	r3, #0
 800c35a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c35c:	79fb      	ldrb	r3, [r7, #7]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	40021800 	.word	0x40021800

0800c36c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c374:	f002 fd04 	bl	800ed80 <osKernelSysTick>
 800c378:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c37a:	e006      	b.n	800c38a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c37c:	f7ff ffa6 	bl	800c2cc <BSP_SD_GetCardState>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c386:	2300      	movs	r3, #0
 800c388:	e009      	b.n	800c39e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c38a:	f002 fcf9 	bl	800ed80 <osKernelSysTick>
 800c38e:	4602      	mov	r2, r0
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	429a      	cmp	r2, r3
 800c398:	d8f0      	bhi.n	800c37c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c39a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
	...

0800c3a8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c3b2:	4b0b      	ldr	r3, [pc, #44]	@ (800c3e0 <SD_CheckStatus+0x38>)
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c3b8:	f7ff ff88 	bl	800c2cc <BSP_SD_GetCardState>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d107      	bne.n	800c3d2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c3c2:	4b07      	ldr	r3, [pc, #28]	@ (800c3e0 <SD_CheckStatus+0x38>)
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	f023 0301 	bic.w	r3, r3, #1
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	4b04      	ldr	r3, [pc, #16]	@ (800c3e0 <SD_CheckStatus+0x38>)
 800c3d0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c3d2:	4b03      	ldr	r3, [pc, #12]	@ (800c3e0 <SD_CheckStatus+0x38>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	b2db      	uxtb	r3, r3
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20000009 	.word	0x20000009

0800c3e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c3e4:	b590      	push	{r4, r7, lr}
 800c3e6:	b087      	sub	sp, #28
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c3ee:	4b20      	ldr	r3, [pc, #128]	@ (800c470 <SD_initialize+0x8c>)
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c3f4:	f002 fcb8 	bl	800ed68 <osKernelRunning>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d030      	beq.n	800c460 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c3fe:	f7ff ff0b 	bl	800c218 <BSP_SD_Init>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d107      	bne.n	800c418 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c408:	79fb      	ldrb	r3, [r7, #7]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7ff ffcc 	bl	800c3a8 <SD_CheckStatus>
 800c410:	4603      	mov	r3, r0
 800c412:	461a      	mov	r2, r3
 800c414:	4b16      	ldr	r3, [pc, #88]	@ (800c470 <SD_initialize+0x8c>)
 800c416:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c418:	4b15      	ldr	r3, [pc, #84]	@ (800c470 <SD_initialize+0x8c>)
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d01e      	beq.n	800c460 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c422:	4b14      	ldr	r3, [pc, #80]	@ (800c474 <SD_initialize+0x90>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10e      	bne.n	800c448 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c42a:	4b13      	ldr	r3, [pc, #76]	@ (800c478 <SD_initialize+0x94>)
 800c42c:	f107 0408 	add.w	r4, r7, #8
 800c430:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c436:	f107 0308 	add.w	r3, r7, #8
 800c43a:	2100      	movs	r1, #0
 800c43c:	4618      	mov	r0, r3
 800c43e:	f002 fd0f 	bl	800ee60 <osMessageCreate>
 800c442:	4603      	mov	r3, r0
 800c444:	4a0b      	ldr	r2, [pc, #44]	@ (800c474 <SD_initialize+0x90>)
 800c446:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c448:	4b0a      	ldr	r3, [pc, #40]	@ (800c474 <SD_initialize+0x90>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d107      	bne.n	800c460 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c450:	4b07      	ldr	r3, [pc, #28]	@ (800c470 <SD_initialize+0x8c>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	b2db      	uxtb	r3, r3
 800c456:	f043 0301 	orr.w	r3, r3, #1
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	4b04      	ldr	r3, [pc, #16]	@ (800c470 <SD_initialize+0x8c>)
 800c45e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c460:	4b03      	ldr	r3, [pc, #12]	@ (800c470 <SD_initialize+0x8c>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	b2db      	uxtb	r3, r3
}
 800c466:	4618      	mov	r0, r3
 800c468:	371c      	adds	r7, #28
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd90      	pop	{r4, r7, pc}
 800c46e:	bf00      	nop
 800c470:	20000009 	.word	0x20000009
 800c474:	200007d0 	.word	0x200007d0
 800c478:	08011c20 	.word	0x08011c20

0800c47c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	4603      	mov	r3, r0
 800c484:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c486:	79fb      	ldrb	r3, [r7, #7]
 800c488:	4618      	mov	r0, r3
 800c48a:	f7ff ff8d 	bl	800c3a8 <SD_CheckStatus>
 800c48e:	4603      	mov	r3, r0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08a      	sub	sp, #40	@ 0x28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60b9      	str	r1, [r7, #8]
 800c4a0:	607a      	str	r2, [r7, #4]
 800c4a2:	603b      	str	r3, [r7, #0]
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c4ae:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c4b2:	f7ff ff5b 	bl	800c36c <SD_CheckStatusWithTimeout>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	da02      	bge.n	800c4c2 <SD_read+0x2a>
  {
    return res;
 800c4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4c0:	e032      	b.n	800c528 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c4c2:	683a      	ldr	r2, [r7, #0]
 800c4c4:	6879      	ldr	r1, [r7, #4]
 800c4c6:	68b8      	ldr	r0, [r7, #8]
 800c4c8:	f7ff fecc 	bl	800c264 <BSP_SD_ReadBlocks_DMA>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800c4d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d124      	bne.n	800c524 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c4da:	4b15      	ldr	r3, [pc, #84]	@ (800c530 <SD_read+0x98>)
 800c4dc:	6819      	ldr	r1, [r3, #0]
 800c4de:	f107 0314 	add.w	r3, r7, #20
 800c4e2:	f247 5230 	movw	r2, #30000	@ 0x7530
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f002 fd22 	bl	800ef30 <osMessageGet>

    if (event.status == osEventMessage)
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2b10      	cmp	r3, #16
 800c4f0:	d118      	bne.n	800c524 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d115      	bne.n	800c524 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800c4f8:	f002 fc42 	bl	800ed80 <osKernelSysTick>
 800c4fc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c4fe:	e008      	b.n	800c512 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c500:	f7ff fee4 	bl	800c2cc <BSP_SD_GetCardState>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d103      	bne.n	800c512 <SD_read+0x7a>
              {
                res = RES_OK;
 800c50a:	2300      	movs	r3, #0
 800c50c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c510:	e008      	b.n	800c524 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c512:	f002 fc35 	bl	800ed80 <osKernelSysTick>
 800c516:	4602      	mov	r2, r0
 800c518:	6a3b      	ldr	r3, [r7, #32]
 800c51a:	1ad3      	subs	r3, r2, r3
 800c51c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c520:	4293      	cmp	r3, r2
 800c522:	d9ed      	bls.n	800c500 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3728      	adds	r7, #40	@ 0x28
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	200007d0 	.word	0x200007d0

0800c534 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08a      	sub	sp, #40	@ 0x28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60b9      	str	r1, [r7, #8]
 800c53c:	607a      	str	r2, [r7, #4]
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	4603      	mov	r3, r0
 800c542:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c54a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c54e:	f7ff ff0d 	bl	800c36c <SD_CheckStatusWithTimeout>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	da02      	bge.n	800c55e <SD_write+0x2a>
  {
    return res;
 800c558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c55c:	e02e      	b.n	800c5bc <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	6879      	ldr	r1, [r7, #4]
 800c562:	68b8      	ldr	r0, [r7, #8]
 800c564:	f7ff fe98 	bl	800c298 <BSP_SD_WriteBlocks_DMA>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d124      	bne.n	800c5b8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c56e:	4b15      	ldr	r3, [pc, #84]	@ (800c5c4 <SD_write+0x90>)
 800c570:	6819      	ldr	r1, [r3, #0]
 800c572:	f107 0314 	add.w	r3, r7, #20
 800c576:	f247 5230 	movw	r2, #30000	@ 0x7530
 800c57a:	4618      	mov	r0, r3
 800c57c:	f002 fcd8 	bl	800ef30 <osMessageGet>

    if (event.status == osEventMessage)
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	2b10      	cmp	r3, #16
 800c584:	d118      	bne.n	800c5b8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	2b02      	cmp	r3, #2
 800c58a:	d115      	bne.n	800c5b8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c58c:	f002 fbf8 	bl	800ed80 <osKernelSysTick>
 800c590:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c592:	e008      	b.n	800c5a6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c594:	f7ff fe9a 	bl	800c2cc <BSP_SD_GetCardState>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d103      	bne.n	800c5a6 <SD_write+0x72>
          {
            res = RES_OK;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c5a4:	e008      	b.n	800c5b8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c5a6:	f002 fbeb 	bl	800ed80 <osKernelSysTick>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	1ad3      	subs	r3, r2, r3
 800c5b0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d9ed      	bls.n	800c594 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c5b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3728      	adds	r7, #40	@ 0x28
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	200007d0 	.word	0x200007d0

0800c5c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08c      	sub	sp, #48	@ 0x30
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	603a      	str	r2, [r7, #0]
 800c5d2:	71fb      	strb	r3, [r7, #7]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c5de:	4b25      	ldr	r3, [pc, #148]	@ (800c674 <SD_ioctl+0xac>)
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	f003 0301 	and.w	r3, r3, #1
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d001      	beq.n	800c5f0 <SD_ioctl+0x28>
 800c5ec:	2303      	movs	r3, #3
 800c5ee:	e03c      	b.n	800c66a <SD_ioctl+0xa2>

  switch (cmd)
 800c5f0:	79bb      	ldrb	r3, [r7, #6]
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d834      	bhi.n	800c660 <SD_ioctl+0x98>
 800c5f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5fc <SD_ioctl+0x34>)
 800c5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5fc:	0800c60d 	.word	0x0800c60d
 800c600:	0800c615 	.word	0x0800c615
 800c604:	0800c62d 	.word	0x0800c62d
 800c608:	0800c647 	.word	0x0800c647
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c60c:	2300      	movs	r3, #0
 800c60e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c612:	e028      	b.n	800c666 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c614:	f107 030c 	add.w	r3, r7, #12
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff fe67 	bl	800c2ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c62a:	e01c      	b.n	800c666 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c62c:	f107 030c 	add.w	r3, r7, #12
 800c630:	4618      	mov	r0, r3
 800c632:	f7ff fe5b 	bl	800c2ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c638:	b29a      	uxth	r2, r3
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c644:	e00f      	b.n	800c666 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c646:	f107 030c 	add.w	r3, r7, #12
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7ff fe4e 	bl	800c2ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c652:	0a5a      	lsrs	r2, r3, #9
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c65e:	e002      	b.n	800c666 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c660:	2304      	movs	r3, #4
 800c662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c666:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3730      	adds	r7, #48	@ 0x30
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	20000009 	.word	0x20000009

0800c678 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c67c:	4b04      	ldr	r3, [pc, #16]	@ (800c690 <BSP_SD_ReadCpltCallback+0x18>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2200      	movs	r2, #0
 800c682:	2101      	movs	r1, #1
 800c684:	4618      	mov	r0, r3
 800c686:	f002 fc13 	bl	800eeb0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800c68a:	bf00      	nop
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	200007d0 	.word	0x200007d0

0800c694 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c694:	b590      	push	{r4, r7, lr}
 800c696:	b089      	sub	sp, #36	@ 0x24
 800c698:	af04      	add	r7, sp, #16
 800c69a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c69c:	2301      	movs	r3, #1
 800c69e:	2202      	movs	r2, #2
 800c6a0:	2102      	movs	r1, #2
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 fcd7 	bl	800d056 <USBH_FindInterface>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
 800c6ae:	2bff      	cmp	r3, #255	@ 0xff
 800c6b0:	d002      	beq.n	800c6b8 <USBH_CDC_InterfaceInit+0x24>
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d901      	bls.n	800c6bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c6b8:	2302      	movs	r3, #2
 800c6ba:	e13d      	b.n	800c938 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
 800c6be:	4619      	mov	r1, r3
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 fcac 	bl	800d01e <USBH_SelectInterface>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c6ca:	7bbb      	ldrb	r3, [r7, #14]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d001      	beq.n	800c6d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	e131      	b.n	800c938 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800c6da:	2050      	movs	r0, #80	@ 0x50
 800c6dc:	f005 f926 	bl	801192c <malloc>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c6ea:	69db      	ldr	r3, [r3, #28]
 800c6ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d101      	bne.n	800c6f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	e11f      	b.n	800c938 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c6f8:	2250      	movs	r2, #80	@ 0x50
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	68b8      	ldr	r0, [r7, #8]
 800c6fe:	f005 f9d3 	bl	8011aa8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	211a      	movs	r1, #26
 800c708:	fb01 f303 	mul.w	r3, r1, r3
 800c70c:	4413      	add	r3, r2
 800c70e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	b25b      	sxtb	r3, r3
 800c716:	2b00      	cmp	r3, #0
 800c718:	da15      	bge.n	800c746 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c71a:	7bfb      	ldrb	r3, [r7, #15]
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	211a      	movs	r1, #26
 800c720:	fb01 f303 	mul.w	r3, r1, r3
 800c724:	4413      	add	r3, r2
 800c726:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c72a:	781a      	ldrb	r2, [r3, #0]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c730:	7bfb      	ldrb	r3, [r7, #15]
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	211a      	movs	r1, #26
 800c736:	fb01 f303 	mul.w	r3, r1, r3
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c740:	881a      	ldrh	r2, [r3, #0]
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	785b      	ldrb	r3, [r3, #1]
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f002 fa1c 	bl	800eb8a <USBH_AllocPipe>
 800c752:	4603      	mov	r3, r0
 800c754:	461a      	mov	r2, r3
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	7819      	ldrb	r1, [r3, #0]
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	7858      	ldrb	r0, [r3, #1]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	8952      	ldrh	r2, [r2, #10]
 800c772:	9202      	str	r2, [sp, #8]
 800c774:	2203      	movs	r2, #3
 800c776:	9201      	str	r2, [sp, #4]
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	4623      	mov	r3, r4
 800c77c:	4602      	mov	r2, r0
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f002 f9d4 	bl	800eb2c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2200      	movs	r2, #0
 800c78a:	4619      	mov	r1, r3
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f005 f847 	bl	8011820 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c792:	2300      	movs	r3, #0
 800c794:	2200      	movs	r2, #0
 800c796:	210a      	movs	r1, #10
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 fc5c 	bl	800d056 <USBH_FindInterface>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c7a2:	7bfb      	ldrb	r3, [r7, #15]
 800c7a4:	2bff      	cmp	r3, #255	@ 0xff
 800c7a6:	d002      	beq.n	800c7ae <USBH_CDC_InterfaceInit+0x11a>
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d901      	bls.n	800c7b2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c7ae:	2302      	movs	r3, #2
 800c7b0:	e0c2      	b.n	800c938 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	211a      	movs	r1, #26
 800c7b8:	fb01 f303 	mul.w	r3, r1, r3
 800c7bc:	4413      	add	r3, r2
 800c7be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	b25b      	sxtb	r3, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	da16      	bge.n	800c7f8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c7ca:	7bfb      	ldrb	r3, [r7, #15]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	211a      	movs	r1, #26
 800c7d0:	fb01 f303 	mul.w	r3, r1, r3
 800c7d4:	4413      	add	r3, r2
 800c7d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c7da:	781a      	ldrb	r2, [r3, #0]
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	211a      	movs	r1, #26
 800c7e6:	fb01 f303 	mul.w	r3, r1, r3
 800c7ea:	4413      	add	r3, r2
 800c7ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c7f0:	881a      	ldrh	r2, [r3, #0]
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	835a      	strh	r2, [r3, #26]
 800c7f6:	e015      	b.n	800c824 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	211a      	movs	r1, #26
 800c7fe:	fb01 f303 	mul.w	r3, r1, r3
 800c802:	4413      	add	r3, r2
 800c804:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c808:	781a      	ldrb	r2, [r3, #0]
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	211a      	movs	r1, #26
 800c814:	fb01 f303 	mul.w	r3, r1, r3
 800c818:	4413      	add	r3, r2
 800c81a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c81e:	881a      	ldrh	r2, [r3, #0]
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c824:	7bfb      	ldrb	r3, [r7, #15]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	211a      	movs	r1, #26
 800c82a:	fb01 f303 	mul.w	r3, r1, r3
 800c82e:	4413      	add	r3, r2
 800c830:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	b25b      	sxtb	r3, r3
 800c838:	2b00      	cmp	r3, #0
 800c83a:	da16      	bge.n	800c86a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	211a      	movs	r1, #26
 800c842:	fb01 f303 	mul.w	r3, r1, r3
 800c846:	4413      	add	r3, r2
 800c848:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c84c:	781a      	ldrb	r2, [r3, #0]
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c852:	7bfb      	ldrb	r3, [r7, #15]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	211a      	movs	r1, #26
 800c858:	fb01 f303 	mul.w	r3, r1, r3
 800c85c:	4413      	add	r3, r2
 800c85e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c862:	881a      	ldrh	r2, [r3, #0]
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	835a      	strh	r2, [r3, #26]
 800c868:	e015      	b.n	800c896 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	211a      	movs	r1, #26
 800c870:	fb01 f303 	mul.w	r3, r1, r3
 800c874:	4413      	add	r3, r2
 800c876:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c87a:	781a      	ldrb	r2, [r3, #0]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c880:	7bfb      	ldrb	r3, [r7, #15]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	211a      	movs	r1, #26
 800c886:	fb01 f303 	mul.w	r3, r1, r3
 800c88a:	4413      	add	r3, r2
 800c88c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c890:	881a      	ldrh	r2, [r3, #0]
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	7b9b      	ldrb	r3, [r3, #14]
 800c89a:	4619      	mov	r1, r3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f002 f974 	bl	800eb8a <USBH_AllocPipe>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	7bdb      	ldrb	r3, [r3, #15]
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f002 f96a 	bl	800eb8a <USBH_AllocPipe>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	7b59      	ldrb	r1, [r3, #13]
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	7b98      	ldrb	r0, [r3, #14]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	8b12      	ldrh	r2, [r2, #24]
 800c8d6:	9202      	str	r2, [sp, #8]
 800c8d8:	2202      	movs	r2, #2
 800c8da:	9201      	str	r2, [sp, #4]
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	4623      	mov	r3, r4
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f002 f922 	bl	800eb2c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	7b19      	ldrb	r1, [r3, #12]
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	7bd8      	ldrb	r0, [r3, #15]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	8b52      	ldrh	r2, [r2, #26]
 800c900:	9202      	str	r2, [sp, #8]
 800c902:	2202      	movs	r2, #2
 800c904:	9201      	str	r2, [sp, #4]
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	4623      	mov	r3, r4
 800c90a:	4602      	mov	r2, r0
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f002 f90d 	bl	800eb2c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	7b5b      	ldrb	r3, [r3, #13]
 800c91e:	2200      	movs	r2, #0
 800c920:	4619      	mov	r1, r3
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f004 ff7c 	bl	8011820 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	7b1b      	ldrb	r3, [r3, #12]
 800c92c:	2200      	movs	r2, #0
 800c92e:	4619      	mov	r1, r3
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f004 ff75 	bl	8011820 <USBH_LL_SetToggle>

  return USBH_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3714      	adds	r7, #20
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd90      	pop	{r4, r7, pc}

0800c940 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c94e:	69db      	ldr	r3, [r3, #28]
 800c950:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00e      	beq.n	800c978 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f002 f902 	bl	800eb6a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f002 f92d 	bl	800ebcc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	7b1b      	ldrb	r3, [r3, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00e      	beq.n	800c99e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	7b1b      	ldrb	r3, [r3, #12]
 800c984:	4619      	mov	r1, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f002 f8ef 	bl	800eb6a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	7b1b      	ldrb	r3, [r3, #12]
 800c990:	4619      	mov	r1, r3
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f002 f91a 	bl	800ebcc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2200      	movs	r2, #0
 800c99c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	7b5b      	ldrb	r3, [r3, #13]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00e      	beq.n	800c9c4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	7b5b      	ldrb	r3, [r3, #13]
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f002 f8dc 	bl	800eb6a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	7b5b      	ldrb	r3, [r3, #13]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f002 f907 	bl	800ebcc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9ca:	69db      	ldr	r3, [r3, #28]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00b      	beq.n	800c9e8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9d6:	69db      	ldr	r3, [r3, #28]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f004 ffaf 	bl	801193c <free>
    phost->pActiveClass->pData = 0U;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b084      	sub	sp, #16
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3340      	adds	r3, #64	@ 0x40
 800ca08:	4619      	mov	r1, r3
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f8b1 	bl	800cb72 <GetLineCoding>
 800ca10:	4603      	mov	r3, r0
 800ca12:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ca14:	7afb      	ldrb	r3, [r7, #11]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d105      	bne.n	800ca26 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ca20:	2102      	movs	r1, #2
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ca26:	7afb      	ldrb	r3, [r7, #11]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca46:	69db      	ldr	r3, [r3, #28]
 800ca48:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ca50:	2b04      	cmp	r3, #4
 800ca52:	d877      	bhi.n	800cb44 <USBH_CDC_Process+0x114>
 800ca54:	a201      	add	r2, pc, #4	@ (adr r2, 800ca5c <USBH_CDC_Process+0x2c>)
 800ca56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca5a:	bf00      	nop
 800ca5c:	0800ca71 	.word	0x0800ca71
 800ca60:	0800ca77 	.word	0x0800ca77
 800ca64:	0800caa7 	.word	0x0800caa7
 800ca68:	0800cb1b 	.word	0x0800cb1b
 800ca6c:	0800cb29 	.word	0x0800cb29
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ca70:	2300      	movs	r3, #0
 800ca72:	73fb      	strb	r3, [r7, #15]
      break;
 800ca74:	e06d      	b.n	800cb52 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f897 	bl	800cbb0 <SetLineCoding>
 800ca82:	4603      	mov	r3, r0
 800ca84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ca86:	7bbb      	ldrb	r3, [r7, #14]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d104      	bne.n	800ca96 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	2202      	movs	r2, #2
 800ca90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ca94:	e058      	b.n	800cb48 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ca96:	7bbb      	ldrb	r3, [r7, #14]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d055      	beq.n	800cb48 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	2204      	movs	r2, #4
 800caa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800caa4:	e050      	b.n	800cb48 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	3340      	adds	r3, #64	@ 0x40
 800caaa:	4619      	mov	r1, r3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f860 	bl	800cb72 <GetLineCoding>
 800cab2:	4603      	mov	r3, r0
 800cab4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cab6:	7bbb      	ldrb	r3, [r7, #14]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d126      	bne.n	800cb0a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	2200      	movs	r2, #0
 800cac0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cace:	791b      	ldrb	r3, [r3, #4]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d13b      	bne.n	800cb4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cade:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d133      	bne.n	800cb4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800caee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d12b      	bne.n	800cb4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cafc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d124      	bne.n	800cb4c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f982 	bl	800ce0c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cb08:	e020      	b.n	800cb4c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800cb0a:	7bbb      	ldrb	r3, [r7, #14]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d01d      	beq.n	800cb4c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	2204      	movs	r2, #4
 800cb14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800cb18:	e018      	b.n	800cb4c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 f867 	bl	800cbee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 f8f6 	bl	800cd12 <CDC_ProcessReception>
      break;
 800cb26:	e014      	b.n	800cb52 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800cb28:	2100      	movs	r1, #0
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f001 f988 	bl	800de40 <USBH_ClrFeature>
 800cb30:	4603      	mov	r3, r0
 800cb32:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cb34:	7bbb      	ldrb	r3, [r7, #14]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10a      	bne.n	800cb50 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800cb42:	e005      	b.n	800cb50 <USBH_CDC_Process+0x120>

    default:
      break;
 800cb44:	bf00      	nop
 800cb46:	e004      	b.n	800cb52 <USBH_CDC_Process+0x122>
      break;
 800cb48:	bf00      	nop
 800cb4a:	e002      	b.n	800cb52 <USBH_CDC_Process+0x122>
      break;
 800cb4c:	bf00      	nop
 800cb4e:	e000      	b.n	800cb52 <USBH_CDC_Process+0x122>
      break;
 800cb50:	bf00      	nop

  }

  return status;
 800cb52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b082      	sub	sp, #8
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
 800cb7a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	22a1      	movs	r2, #161	@ 0xa1
 800cb80:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2221      	movs	r2, #33	@ 0x21
 800cb86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2207      	movs	r2, #7
 800cb98:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2207      	movs	r2, #7
 800cb9e:	4619      	mov	r1, r3
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f001 fc82 	bl	800e4aa <USBH_CtlReq>
 800cba6:	4603      	mov	r3, r0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2221      	movs	r2, #33	@ 0x21
 800cbbe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2220      	movs	r2, #32
 800cbc4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2207      	movs	r2, #7
 800cbd6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2207      	movs	r2, #7
 800cbdc:	4619      	mov	r1, r3
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f001 fc63 	bl	800e4aa <USBH_CtlReq>
 800cbe4:	4603      	mov	r3, r0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b086      	sub	sp, #24
 800cbf2:	af02      	add	r7, sp, #8
 800cbf4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cbfc:	69db      	ldr	r3, [r3, #28]
 800cbfe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cc00:	2300      	movs	r3, #0
 800cc02:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d002      	beq.n	800cc14 <CDC_ProcessTransmission+0x26>
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d023      	beq.n	800cc5a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800cc12:	e07a      	b.n	800cd0a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	8b12      	ldrh	r2, [r2, #24]
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d90b      	bls.n	800cc38 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	69d9      	ldr	r1, [r3, #28]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	8b1a      	ldrh	r2, [r3, #24]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	7b5b      	ldrb	r3, [r3, #13]
 800cc2c:	2001      	movs	r0, #1
 800cc2e:	9000      	str	r0, [sp, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f001 ff38 	bl	800eaa6 <USBH_BulkSendData>
 800cc36:	e00b      	b.n	800cc50 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	7b5b      	ldrb	r3, [r3, #13]
 800cc46:	2001      	movs	r0, #1
 800cc48:	9000      	str	r0, [sp, #0]
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f001 ff2b 	bl	800eaa6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2202      	movs	r2, #2
 800cc54:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800cc58:	e057      	b.n	800cd0a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	7b5b      	ldrb	r3, [r3, #13]
 800cc5e:	4619      	mov	r1, r3
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f004 fdb3 	bl	80117cc <USBH_LL_GetURBState>
 800cc66:	4603      	mov	r3, r0
 800cc68:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800cc6a:	7afb      	ldrb	r3, [r7, #11]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d136      	bne.n	800ccde <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	8b12      	ldrh	r2, [r2, #24]
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d90e      	bls.n	800cc9a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	8b12      	ldrh	r2, [r2, #24]
 800cc84:	1a9a      	subs	r2, r3, r2
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	69db      	ldr	r3, [r3, #28]
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	8b12      	ldrh	r2, [r2, #24]
 800cc92:	441a      	add	r2, r3
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	61da      	str	r2, [r3, #28]
 800cc98:	e002      	b.n	800cca0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d004      	beq.n	800ccb2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800ccb0:	e006      	b.n	800ccc0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 f892 	bl	800cde4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2204      	movs	r2, #4
 800ccc4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	f002 f8ea 	bl	800eeb0 <osMessagePut>
      break;
 800ccdc:	e014      	b.n	800cd08 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800ccde:	7afb      	ldrb	r3, [r7, #11]
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d111      	bne.n	800cd08 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2201      	movs	r2, #1
 800cce8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2204      	movs	r2, #4
 800ccf0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cd00:	2200      	movs	r2, #0
 800cd02:	4619      	mov	r1, r3
 800cd04:	f002 f8d4 	bl	800eeb0 <osMessagePut>
      break;
 800cd08:	bf00      	nop
  }
}
 800cd0a:	bf00      	nop
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b086      	sub	sp, #24
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cd20:	69db      	ldr	r3, [r3, #28]
 800cd22:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd24:	2300      	movs	r3, #0
 800cd26:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	d002      	beq.n	800cd38 <CDC_ProcessReception+0x26>
 800cd32:	2b04      	cmp	r3, #4
 800cd34:	d00e      	beq.n	800cd54 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800cd36:	e051      	b.n	800cddc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	6a19      	ldr	r1, [r3, #32]
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	8b5a      	ldrh	r2, [r3, #26]
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	7b1b      	ldrb	r3, [r3, #12]
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f001 fed3 	bl	800eaf0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2204      	movs	r2, #4
 800cd4e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800cd52:	e043      	b.n	800cddc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	7b1b      	ldrb	r3, [r3, #12]
 800cd58:	4619      	mov	r1, r3
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f004 fd36 	bl	80117cc <USBH_LL_GetURBState>
 800cd60:	4603      	mov	r3, r0
 800cd62:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800cd64:	7cfb      	ldrb	r3, [r7, #19]
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d137      	bne.n	800cdda <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	7b1b      	ldrb	r3, [r3, #12]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f004 fc99 	bl	80116a8 <USBH_LL_GetLastXferSize>
 800cd76:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d016      	beq.n	800cdb0 <CDC_ProcessReception+0x9e>
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	8b5b      	ldrh	r3, [r3, #26]
 800cd86:	461a      	mov	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d110      	bne.n	800cdb0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	1ad2      	subs	r2, r2, r3
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	6a1a      	ldr	r2, [r3, #32]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	441a      	add	r2, r3
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2203      	movs	r2, #3
 800cdaa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800cdae:	e006      	b.n	800cdbe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 f81d 	bl	800cdf8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2204      	movs	r2, #4
 800cdc2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	f002 f86b 	bl	800eeb0 <osMessagePut>
      break;
 800cdda:	bf00      	nop
  }
}
 800cddc:	bf00      	nop
 800cdde:	3718      	adds	r7, #24
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ce14:	bf00      	nop
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ce20:	b5b0      	push	{r4, r5, r7, lr}
 800ce22:	b090      	sub	sp, #64	@ 0x40
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d101      	bne.n	800ce38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ce34:	2302      	movs	r3, #2
 800ce36:	e04d      	b.n	800ced4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	79fa      	ldrb	r2, [r7, #7]
 800ce3c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	f000 f847 	bl	800cee4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d003      	beq.n	800ce84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	68ba      	ldr	r2, [r7, #8]
 800ce80:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ce84:	4b15      	ldr	r3, [pc, #84]	@ (800cedc <USBH_Init+0xbc>)
 800ce86:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800ce8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800ce90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ce94:	2100      	movs	r1, #0
 800ce96:	4618      	mov	r0, r3
 800ce98:	f001 ffe2 	bl	800ee60 <osMessageCreate>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800cea4:	4b0e      	ldr	r3, [pc, #56]	@ (800cee0 <USBH_Init+0xc0>)
 800cea6:	f107 0414 	add.w	r4, r7, #20
 800ceaa:	461d      	mov	r5, r3
 800ceac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ceae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ceb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ceb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800ceb8:	f107 0314 	add.w	r3, r7, #20
 800cebc:	68f9      	ldr	r1, [r7, #12]
 800cebe:	4618      	mov	r0, r3
 800cec0:	f001 ff6e 	bl	800eda0 <osThreadCreate>
 800cec4:	4602      	mov	r2, r0
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f004 fb37 	bl	8011540 <USBH_LL_Init>

  return USBH_OK;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3740      	adds	r7, #64	@ 0x40
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bdb0      	pop	{r4, r5, r7, pc}
 800cedc:	08011c34 	.word	0x08011c34
 800cee0:	08011c50 	.word	0x08011c50

0800cee4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ceec:	2300      	movs	r3, #0
 800ceee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cef0:	2300      	movs	r3, #0
 800cef2:	60fb      	str	r3, [r7, #12]
 800cef4:	e009      	b.n	800cf0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	33e0      	adds	r3, #224	@ 0xe0
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	4413      	add	r3, r2
 800cf00:	2200      	movs	r2, #0
 800cf02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	3301      	adds	r3, #1
 800cf08:	60fb      	str	r3, [r7, #12]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2b0f      	cmp	r3, #15
 800cf0e:	d9f2      	bls.n	800cef6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cf10:	2300      	movs	r3, #0
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	e009      	b.n	800cf2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cf20:	2200      	movs	r2, #0
 800cf22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	3301      	adds	r3, #1
 800cf28:	60fb      	str	r3, [r7, #12]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf30:	d3f1      	bcc.n	800cf16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2240      	movs	r2, #64	@ 0x40
 800cf56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	331c      	adds	r3, #28
 800cf82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf86:	2100      	movs	r1, #0
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f004 fd8d 	bl	8011aa8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cf94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf98:	2100      	movs	r1, #0
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f004 fd84 	bl	8011aa8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cfa6:	2212      	movs	r2, #18
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f004 fd7c 	bl	8011aa8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cfb6:	223e      	movs	r2, #62	@ 0x3e
 800cfb8:	2100      	movs	r1, #0
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f004 fd74 	bl	8011aa8 <memset>

  return USBH_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cfca:	b480      	push	{r7}
 800cfcc:	b085      	sub	sp, #20
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d016      	beq.n	800d00c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10e      	bne.n	800d006 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cfee:	1c59      	adds	r1, r3, #1
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	33de      	adds	r3, #222	@ 0xde
 800cffa:	6839      	ldr	r1, [r7, #0]
 800cffc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d000:	2300      	movs	r3, #0
 800d002:	73fb      	strb	r3, [r7, #15]
 800d004:	e004      	b.n	800d010 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d006:	2302      	movs	r3, #2
 800d008:	73fb      	strb	r3, [r7, #15]
 800d00a:	e001      	b.n	800d010 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d00c:	2302      	movs	r3, #2
 800d00e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d010:	7bfb      	ldrb	r3, [r7, #15]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3714      	adds	r7, #20
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr

0800d01e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d01e:	b480      	push	{r7}
 800d020:	b085      	sub	sp, #20
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
 800d026:	460b      	mov	r3, r1
 800d028:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d02a:	2300      	movs	r3, #0
 800d02c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800d034:	78fa      	ldrb	r2, [r7, #3]
 800d036:	429a      	cmp	r2, r3
 800d038:	d204      	bcs.n	800d044 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	78fa      	ldrb	r2, [r7, #3]
 800d03e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800d042:	e001      	b.n	800d048 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d044:	2302      	movs	r3, #2
 800d046:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d048:	7bfb      	ldrb	r3, [r7, #15]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3714      	adds	r7, #20
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr

0800d056 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d056:	b480      	push	{r7}
 800d058:	b087      	sub	sp, #28
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
 800d05e:	4608      	mov	r0, r1
 800d060:	4611      	mov	r1, r2
 800d062:	461a      	mov	r2, r3
 800d064:	4603      	mov	r3, r0
 800d066:	70fb      	strb	r3, [r7, #3]
 800d068:	460b      	mov	r3, r1
 800d06a:	70bb      	strb	r3, [r7, #2]
 800d06c:	4613      	mov	r3, r2
 800d06e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d070:	2300      	movs	r3, #0
 800d072:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d074:	2300      	movs	r3, #0
 800d076:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d07e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d080:	e025      	b.n	800d0ce <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d082:	7dfb      	ldrb	r3, [r7, #23]
 800d084:	221a      	movs	r2, #26
 800d086:	fb02 f303 	mul.w	r3, r2, r3
 800d08a:	3308      	adds	r3, #8
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	4413      	add	r3, r2
 800d090:	3302      	adds	r3, #2
 800d092:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	795b      	ldrb	r3, [r3, #5]
 800d098:	78fa      	ldrb	r2, [r7, #3]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d002      	beq.n	800d0a4 <USBH_FindInterface+0x4e>
 800d09e:	78fb      	ldrb	r3, [r7, #3]
 800d0a0:	2bff      	cmp	r3, #255	@ 0xff
 800d0a2:	d111      	bne.n	800d0c8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d0a8:	78ba      	ldrb	r2, [r7, #2]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d002      	beq.n	800d0b4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d0ae:	78bb      	ldrb	r3, [r7, #2]
 800d0b0:	2bff      	cmp	r3, #255	@ 0xff
 800d0b2:	d109      	bne.n	800d0c8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d0b8:	787a      	ldrb	r2, [r7, #1]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d002      	beq.n	800d0c4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d0be:	787b      	ldrb	r3, [r7, #1]
 800d0c0:	2bff      	cmp	r3, #255	@ 0xff
 800d0c2:	d101      	bne.n	800d0c8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d0c4:	7dfb      	ldrb	r3, [r7, #23]
 800d0c6:	e006      	b.n	800d0d6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d0c8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d0ce:	7dfb      	ldrb	r3, [r7, #23]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d9d6      	bls.n	800d082 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d0d4:	23ff      	movs	r3, #255	@ 0xff
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	371c      	adds	r7, #28
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f004 fa64 	bl	80115b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d0f0:	2101      	movs	r1, #1
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f004 fb7d 	bl	80117f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
	...

0800d104 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b088      	sub	sp, #32
 800d108:	af04      	add	r7, sp, #16
 800d10a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d10c:	2302      	movs	r3, #2
 800d10e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d110:	2300      	movs	r3, #0
 800d112:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d102      	bne.n	800d126 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2203      	movs	r2, #3
 800d124:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b0b      	cmp	r3, #11
 800d12e:	f200 8244 	bhi.w	800d5ba <USBH_Process+0x4b6>
 800d132:	a201      	add	r2, pc, #4	@ (adr r2, 800d138 <USBH_Process+0x34>)
 800d134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d138:	0800d169 	.word	0x0800d169
 800d13c:	0800d1b7 	.word	0x0800d1b7
 800d140:	0800d23b 	.word	0x0800d23b
 800d144:	0800d539 	.word	0x0800d539
 800d148:	0800d5bb 	.word	0x0800d5bb
 800d14c:	0800d2f7 	.word	0x0800d2f7
 800d150:	0800d4c3 	.word	0x0800d4c3
 800d154:	0800d349 	.word	0x0800d349
 800d158:	0800d385 	.word	0x0800d385
 800d15c:	0800d3bd 	.word	0x0800d3bd
 800d160:	0800d41b 	.word	0x0800d41b
 800d164:	0800d521 	.word	0x0800d521
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 8224 	beq.w	800d5be <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2201      	movs	r2, #1
 800d17a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d17c:	20c8      	movs	r0, #200	@ 0xc8
 800d17e:	f004 fb82 	bl	8011886 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f004 fa75 	bl	8011672 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	f001 fe7e 	bl	800eeb0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d1b4:	e203      	b.n	800d5be <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d107      	bne.n	800d1d0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2202      	movs	r2, #2
 800d1cc:	701a      	strb	r2, [r3, #0]
 800d1ce:	e025      	b.n	800d21c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800d1d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d1da:	d914      	bls.n	800d206 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	b2da      	uxtb	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800d1f2:	2b03      	cmp	r3, #3
 800d1f4:	d903      	bls.n	800d1fe <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	220d      	movs	r2, #13
 800d1fa:	701a      	strb	r2, [r3, #0]
 800d1fc:	e00e      	b.n	800d21c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	701a      	strb	r2, [r3, #0]
 800d204:	e00a      	b.n	800d21c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800d20c:	f103 020a 	add.w	r2, r3, #10
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800d216:	200a      	movs	r0, #10
 800d218:	f004 fb35 	bl	8011886 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2201      	movs	r2, #1
 800d220:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d230:	2200      	movs	r2, #0
 800d232:	4619      	mov	r1, r3
 800d234:	f001 fe3c 	bl	800eeb0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d238:	e1c8      	b.n	800d5cc <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d240:	2b00      	cmp	r3, #0
 800d242:	d005      	beq.n	800d250 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d24a:	2104      	movs	r1, #4
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d250:	2064      	movs	r0, #100	@ 0x64
 800d252:	f004 fb18 	bl	8011886 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f004 f9e4 	bl	8011624 <USBH_LL_GetSpeed>
 800d25c:	4603      	mov	r3, r0
 800d25e:	461a      	mov	r2, r3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2205      	movs	r2, #5
 800d26a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d26c:	2100      	movs	r1, #0
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f001 fc8b 	bl	800eb8a <USBH_AllocPipe>
 800d274:	4603      	mov	r3, r0
 800d276:	461a      	mov	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d27c:	2180      	movs	r1, #128	@ 0x80
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f001 fc83 	bl	800eb8a <USBH_AllocPipe>
 800d284:	4603      	mov	r3, r0
 800d286:	461a      	mov	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	7919      	ldrb	r1, [r3, #4]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d2a0:	9202      	str	r2, [sp, #8]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	9201      	str	r2, [sp, #4]
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2280      	movs	r2, #128	@ 0x80
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f001 fc3d 	bl	800eb2c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	7959      	ldrb	r1, [r3, #5]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d2c6:	9202      	str	r2, [sp, #8]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	9201      	str	r2, [sp, #4]
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f001 fc2a 	bl	800eb2c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	f001 fdde 	bl	800eeb0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d2f4:	e16a      	b.n	800d5cc <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 f96e 	bl	800d5d8 <USBH_HandleEnum>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d300:	7bbb      	ldrb	r3, [r7, #14]
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2b00      	cmp	r3, #0
 800d306:	f040 815c 	bne.w	800d5c2 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d103      	bne.n	800d324 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2208      	movs	r2, #8
 800d320:	701a      	strb	r2, [r3, #0]
 800d322:	e002      	b.n	800d32a <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2207      	movs	r2, #7
 800d328:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2205      	movs	r2, #5
 800d32e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d33e:	2200      	movs	r2, #0
 800d340:	4619      	mov	r1, r3
 800d342:	f001 fdb5 	bl	800eeb0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d346:	e13c      	b.n	800d5c2 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 8139 	beq.w	800d5c6 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d35a:	2101      	movs	r1, #1
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2208      	movs	r2, #8
 800d364:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2205      	movs	r2, #5
 800d36a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d37a:	2200      	movs	r2, #0
 800d37c:	4619      	mov	r1, r3
 800d37e:	f001 fd97 	bl	800eeb0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d382:	e120      	b.n	800d5c6 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800d38a:	4619      	mov	r1, r3
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 fd10 	bl	800ddb2 <USBH_SetCfg>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d102      	bne.n	800d39e <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2209      	movs	r2, #9
 800d39c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	f001 fd7b 	bl	800eeb0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d3ba:	e107      	b.n	800d5cc <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800d3c2:	f003 0320 	and.w	r3, r3, #32
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d015      	beq.n	800d3f6 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d3ca:	2101      	movs	r1, #1
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 fd13 	bl	800ddf8 <USBH_SetFeature>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d3d6:	7bbb      	ldrb	r3, [r7, #14]
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d103      	bne.n	800d3e6 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	220a      	movs	r2, #10
 800d3e2:	701a      	strb	r2, [r3, #0]
 800d3e4:	e00a      	b.n	800d3fc <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800d3e6:	7bbb      	ldrb	r3, [r7, #14]
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	2b03      	cmp	r3, #3
 800d3ec:	d106      	bne.n	800d3fc <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	220a      	movs	r2, #10
 800d3f2:	701a      	strb	r2, [r3, #0]
 800d3f4:	e002      	b.n	800d3fc <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	220a      	movs	r2, #10
 800d3fa:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d410:	2200      	movs	r2, #0
 800d412:	4619      	mov	r1, r3
 800d414:	f001 fd4c 	bl	800eeb0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d418:	e0d8      	b.n	800d5cc <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800d420:	2b00      	cmp	r3, #0
 800d422:	d03f      	beq.n	800d4a4 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d42c:	2300      	movs	r3, #0
 800d42e:	73fb      	strb	r3, [r7, #15]
 800d430:	e016      	b.n	800d460 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d432:	7bfa      	ldrb	r2, [r7, #15]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	32de      	adds	r2, #222	@ 0xde
 800d438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d43c:	791a      	ldrb	r2, [r3, #4]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800d444:	429a      	cmp	r2, r3
 800d446:	d108      	bne.n	800d45a <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d448:	7bfa      	ldrb	r2, [r7, #15]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	32de      	adds	r2, #222	@ 0xde
 800d44e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800d458:	e005      	b.n	800d466 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
 800d45c:	3301      	adds	r3, #1
 800d45e:	73fb      	strb	r3, [r7, #15]
 800d460:	7bfb      	ldrb	r3, [r7, #15]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d0e5      	beq.n	800d432 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d016      	beq.n	800d49e <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	4798      	blx	r3
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d109      	bne.n	800d496 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2206      	movs	r2, #6
 800d486:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d48e:	2103      	movs	r1, #3
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	4798      	blx	r3
 800d494:	e006      	b.n	800d4a4 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	220d      	movs	r2, #13
 800d49a:	701a      	strb	r2, [r3, #0]
 800d49c:	e002      	b.n	800d4a4 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	220d      	movs	r2, #13
 800d4a2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2205      	movs	r2, #5
 800d4a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	f001 fcf8 	bl	800eeb0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d4c0:	e084      	b.n	800d5cc <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d017      	beq.n	800d4fc <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	4798      	blx	r3
 800d4d8:	4603      	mov	r3, r0
 800d4da:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d4dc:	7bbb      	ldrb	r3, [r7, #14]
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d103      	bne.n	800d4ec <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	220b      	movs	r2, #11
 800d4e8:	701a      	strb	r2, [r3, #0]
 800d4ea:	e00a      	b.n	800d502 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800d4ec:	7bbb      	ldrb	r3, [r7, #14]
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	2b02      	cmp	r3, #2
 800d4f2:	d106      	bne.n	800d502 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	220d      	movs	r2, #13
 800d4f8:	701a      	strb	r2, [r3, #0]
 800d4fa:	e002      	b.n	800d502 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	220d      	movs	r2, #13
 800d500:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2205      	movs	r2, #5
 800d506:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d516:	2200      	movs	r2, #0
 800d518:	4619      	mov	r1, r3
 800d51a:	f001 fcc9 	bl	800eeb0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d51e:	e055      	b.n	800d5cc <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d526:	2b00      	cmp	r3, #0
 800d528:	d04f      	beq.n	800d5ca <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d530:	695b      	ldr	r3, [r3, #20]
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	4798      	blx	r3
      }
      break;
 800d536:	e048      	b.n	800d5ca <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f7ff fccf 	bl	800cee4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d009      	beq.n	800d564 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d005      	beq.n	800d57a <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d574:	2105      	movs	r1, #5
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b01      	cmp	r3, #1
 800d584:	d107      	bne.n	800d596 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2200      	movs	r2, #0
 800d58a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff fda7 	bl	800d0e2 <USBH_Start>
 800d594:	e002      	b.n	800d59c <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f004 f80e 	bl	80115b8 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	f001 fc7c 	bl	800eeb0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d5b8:	e008      	b.n	800d5cc <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800d5ba:	bf00      	nop
 800d5bc:	e006      	b.n	800d5cc <USBH_Process+0x4c8>
      break;
 800d5be:	bf00      	nop
 800d5c0:	e004      	b.n	800d5cc <USBH_Process+0x4c8>
      break;
 800d5c2:	bf00      	nop
 800d5c4:	e002      	b.n	800d5cc <USBH_Process+0x4c8>
    break;
 800d5c6:	bf00      	nop
 800d5c8:	e000      	b.n	800d5cc <USBH_Process+0x4c8>
      break;
 800d5ca:	bf00      	nop
  }
  return USBH_OK;
 800d5cc:	2300      	movs	r3, #0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop

0800d5d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b088      	sub	sp, #32
 800d5dc:	af04      	add	r7, sp, #16
 800d5de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	785b      	ldrb	r3, [r3, #1]
 800d5ec:	2b07      	cmp	r3, #7
 800d5ee:	f200 8204 	bhi.w	800d9fa <USBH_HandleEnum+0x422>
 800d5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d5f8 <USBH_HandleEnum+0x20>)
 800d5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f8:	0800d619 	.word	0x0800d619
 800d5fc:	0800d6d3 	.word	0x0800d6d3
 800d600:	0800d73d 	.word	0x0800d73d
 800d604:	0800d7c7 	.word	0x0800d7c7
 800d608:	0800d831 	.word	0x0800d831
 800d60c:	0800d8a1 	.word	0x0800d8a1
 800d610:	0800d93d 	.word	0x0800d93d
 800d614:	0800d9bb 	.word	0x0800d9bb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d618:	2108      	movs	r1, #8
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fae6 	bl	800dbec <USBH_Get_DevDesc>
 800d620:	4603      	mov	r3, r0
 800d622:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d624:	7bbb      	ldrb	r3, [r7, #14]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d12e      	bne.n	800d688 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2201      	movs	r2, #1
 800d638:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	7919      	ldrb	r1, [r3, #4]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d64e:	9202      	str	r2, [sp, #8]
 800d650:	2200      	movs	r2, #0
 800d652:	9201      	str	r2, [sp, #4]
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	4603      	mov	r3, r0
 800d658:	2280      	movs	r2, #128	@ 0x80
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f001 fa66 	bl	800eb2c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7959      	ldrb	r1, [r3, #5]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d674:	9202      	str	r2, [sp, #8]
 800d676:	2200      	movs	r2, #0
 800d678:	9201      	str	r2, [sp, #4]
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	4603      	mov	r3, r0
 800d67e:	2200      	movs	r2, #0
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f001 fa53 	bl	800eb2c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d686:	e1ba      	b.n	800d9fe <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d688:	7bbb      	ldrb	r3, [r7, #14]
 800d68a:	2b03      	cmp	r3, #3
 800d68c:	f040 81b7 	bne.w	800d9fe <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d696:	3301      	adds	r3, #1
 800d698:	b2da      	uxtb	r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d6a6:	2b03      	cmp	r3, #3
 800d6a8:	d903      	bls.n	800d6b2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	220d      	movs	r2, #13
 800d6ae:	701a      	strb	r2, [r3, #0]
      break;
 800d6b0:	e1a5      	b.n	800d9fe <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	795b      	ldrb	r3, [r3, #5]
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f001 fa87 	bl	800ebcc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	791b      	ldrb	r3, [r3, #4]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f001 fa81 	bl	800ebcc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	701a      	strb	r2, [r3, #0]
      break;
 800d6d0:	e195      	b.n	800d9fe <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d6d2:	2112      	movs	r1, #18
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fa89 	bl	800dbec <USBH_Get_DevDesc>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d6de:	7bbb      	ldrb	r3, [r7, #14]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d103      	bne.n	800d6ec <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2202      	movs	r2, #2
 800d6e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d6ea:	e18a      	b.n	800da02 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6ec:	7bbb      	ldrb	r3, [r7, #14]
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	f040 8187 	bne.w	800da02 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d70a:	2b03      	cmp	r3, #3
 800d70c:	d903      	bls.n	800d716 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	220d      	movs	r2, #13
 800d712:	701a      	strb	r2, [r3, #0]
      break;
 800d714:	e175      	b.n	800da02 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	795b      	ldrb	r3, [r3, #5]
 800d71a:	4619      	mov	r1, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f001 fa55 	bl	800ebcc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	791b      	ldrb	r3, [r3, #4]
 800d726:	4619      	mov	r1, r3
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f001 fa4f 	bl	800ebcc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	701a      	strb	r2, [r3, #0]
      break;
 800d73a:	e162      	b.n	800da02 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d73c:	2101      	movs	r1, #1
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 fb13 	bl	800dd6a <USBH_SetAddress>
 800d744:	4603      	mov	r3, r0
 800d746:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d748:	7bbb      	ldrb	r3, [r7, #14]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d130      	bne.n	800d7b0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800d74e:	2002      	movs	r0, #2
 800d750:	f004 f899 	bl	8011886 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2203      	movs	r2, #3
 800d760:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	7919      	ldrb	r1, [r3, #4]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d776:	9202      	str	r2, [sp, #8]
 800d778:	2200      	movs	r2, #0
 800d77a:	9201      	str	r2, [sp, #4]
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	4603      	mov	r3, r0
 800d780:	2280      	movs	r2, #128	@ 0x80
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f001 f9d2 	bl	800eb2c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	7959      	ldrb	r1, [r3, #5]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d79c:	9202      	str	r2, [sp, #8]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	9201      	str	r2, [sp, #4]
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f001 f9bf 	bl	800eb2c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d7ae:	e12a      	b.n	800da06 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	2b03      	cmp	r3, #3
 800d7b4:	f040 8127 	bne.w	800da06 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	220d      	movs	r2, #13
 800d7bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	705a      	strb	r2, [r3, #1]
      break;
 800d7c4:	e11f      	b.n	800da06 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d7c6:	2109      	movs	r1, #9
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 fa3b 	bl	800dc44 <USBH_Get_CfgDesc>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d7d2:	7bbb      	ldrb	r3, [r7, #14]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d103      	bne.n	800d7e0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2204      	movs	r2, #4
 800d7dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d7de:	e114      	b.n	800da0a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7e0:	7bbb      	ldrb	r3, [r7, #14]
 800d7e2:	2b03      	cmp	r3, #3
 800d7e4:	f040 8111 	bne.w	800da0a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d7fe:	2b03      	cmp	r3, #3
 800d800:	d903      	bls.n	800d80a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	220d      	movs	r2, #13
 800d806:	701a      	strb	r2, [r3, #0]
      break;
 800d808:	e0ff      	b.n	800da0a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	795b      	ldrb	r3, [r3, #5]
 800d80e:	4619      	mov	r1, r3
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f001 f9db 	bl	800ebcc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	791b      	ldrb	r3, [r3, #4]
 800d81a:	4619      	mov	r1, r3
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f001 f9d5 	bl	800ebcc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	701a      	strb	r2, [r3, #0]
      break;
 800d82e:	e0ec      	b.n	800da0a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800d836:	4619      	mov	r1, r3
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fa03 	bl	800dc44 <USBH_Get_CfgDesc>
 800d83e:	4603      	mov	r3, r0
 800d840:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d842:	7bbb      	ldrb	r3, [r7, #14]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d103      	bne.n	800d850 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2205      	movs	r2, #5
 800d84c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d84e:	e0de      	b.n	800da0e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	2b03      	cmp	r3, #3
 800d854:	f040 80db 	bne.w	800da0e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d85e:	3301      	adds	r3, #1
 800d860:	b2da      	uxtb	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d86e:	2b03      	cmp	r3, #3
 800d870:	d903      	bls.n	800d87a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	220d      	movs	r2, #13
 800d876:	701a      	strb	r2, [r3, #0]
      break;
 800d878:	e0c9      	b.n	800da0e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	795b      	ldrb	r3, [r3, #5]
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f001 f9a3 	bl	800ebcc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	791b      	ldrb	r3, [r3, #4]
 800d88a:	4619      	mov	r1, r3
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f001 f99d 	bl	800ebcc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	701a      	strb	r2, [r3, #0]
      break;
 800d89e:	e0b6      	b.n	800da0e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d036      	beq.n	800d918 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d8b6:	23ff      	movs	r3, #255	@ 0xff
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f9ed 	bl	800dc98 <USBH_Get_StringDesc>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d8c2:	7bbb      	ldrb	r3, [r7, #14]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d111      	bne.n	800d8ec <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2206      	movs	r2, #6
 800d8cc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2205      	movs	r2, #5
 800d8d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	f001 fae3 	bl	800eeb0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d8ea:	e092      	b.n	800da12 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8ec:	7bbb      	ldrb	r3, [r7, #14]
 800d8ee:	2b03      	cmp	r3, #3
 800d8f0:	f040 808f 	bne.w	800da12 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2206      	movs	r2, #6
 800d8f8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2205      	movs	r2, #5
 800d8fe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d90e:	2200      	movs	r2, #0
 800d910:	4619      	mov	r1, r3
 800d912:	f001 facd 	bl	800eeb0 <osMessagePut>
      break;
 800d916:	e07c      	b.n	800da12 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2206      	movs	r2, #6
 800d91c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2205      	movs	r2, #5
 800d922:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d932:	2200      	movs	r2, #0
 800d934:	4619      	mov	r1, r3
 800d936:	f001 fabb 	bl	800eeb0 <osMessagePut>
      break;
 800d93a:	e06a      	b.n	800da12 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d942:	2b00      	cmp	r3, #0
 800d944:	d027      	beq.n	800d996 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d952:	23ff      	movs	r3, #255	@ 0xff
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f99f 	bl	800dc98 <USBH_Get_StringDesc>
 800d95a:	4603      	mov	r3, r0
 800d95c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d95e:	7bbb      	ldrb	r3, [r7, #14]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d103      	bne.n	800d96c <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2207      	movs	r2, #7
 800d968:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d96a:	e054      	b.n	800da16 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d96c:	7bbb      	ldrb	r3, [r7, #14]
 800d96e:	2b03      	cmp	r3, #3
 800d970:	d151      	bne.n	800da16 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2207      	movs	r2, #7
 800d976:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2205      	movs	r2, #5
 800d97c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d98c:	2200      	movs	r2, #0
 800d98e:	4619      	mov	r1, r3
 800d990:	f001 fa8e 	bl	800eeb0 <osMessagePut>
      break;
 800d994:	e03f      	b.n	800da16 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2207      	movs	r2, #7
 800d99a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2205      	movs	r2, #5
 800d9a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	f001 fa7c 	bl	800eeb0 <osMessagePut>
      break;
 800d9b8:	e02d      	b.n	800da16 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d017      	beq.n	800d9f4 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d9d0:	23ff      	movs	r3, #255	@ 0xff
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 f960 	bl	800dc98 <USBH_Get_StringDesc>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d9dc:	7bbb      	ldrb	r3, [r7, #14]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d102      	bne.n	800d9e8 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d9e6:	e018      	b.n	800da1a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d9e8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ea:	2b03      	cmp	r3, #3
 800d9ec:	d115      	bne.n	800da1a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	73fb      	strb	r3, [r7, #15]
      break;
 800d9f2:	e012      	b.n	800da1a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d9f8:	e00f      	b.n	800da1a <USBH_HandleEnum+0x442>

    default:
      break;
 800d9fa:	bf00      	nop
 800d9fc:	e00e      	b.n	800da1c <USBH_HandleEnum+0x444>
      break;
 800d9fe:	bf00      	nop
 800da00:	e00c      	b.n	800da1c <USBH_HandleEnum+0x444>
      break;
 800da02:	bf00      	nop
 800da04:	e00a      	b.n	800da1c <USBH_HandleEnum+0x444>
      break;
 800da06:	bf00      	nop
 800da08:	e008      	b.n	800da1c <USBH_HandleEnum+0x444>
      break;
 800da0a:	bf00      	nop
 800da0c:	e006      	b.n	800da1c <USBH_HandleEnum+0x444>
      break;
 800da0e:	bf00      	nop
 800da10:	e004      	b.n	800da1c <USBH_HandleEnum+0x444>
      break;
 800da12:	bf00      	nop
 800da14:	e002      	b.n	800da1c <USBH_HandleEnum+0x444>
      break;
 800da16:	bf00      	nop
 800da18:	e000      	b.n	800da1c <USBH_HandleEnum+0x444>
      break;
 800da1a:	bf00      	nop
  }
  return Status;
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop

0800da28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800da3a:	bf00      	nop
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b082      	sub	sp, #8
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800da54:	1c5a      	adds	r2, r3, #1
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 f804 	bl	800da6a <USBH_HandleSof>
}
 800da62:	bf00      	nop
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b082      	sub	sp, #8
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	b2db      	uxtb	r3, r3
 800da78:	2b0b      	cmp	r3, #11
 800da7a:	d10a      	bne.n	800da92 <USBH_HandleSof+0x28>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800da82:	2b00      	cmp	r3, #0
 800da84:	d005      	beq.n	800da92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800da8c:	699b      	ldr	r3, [r3, #24]
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	4798      	blx	r3
  }
}
 800da92:	bf00      	nop
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2201      	movs	r2, #1
 800daa6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2201      	movs	r2, #1
 800daae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dabe:	2200      	movs	r2, #0
 800dac0:	4619      	mov	r1, r3
 800dac2:	f001 f9f5 	bl	800eeb0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800dac6:	bf00      	nop
}
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800dace:	b480      	push	{r7}
 800dad0:	b083      	sub	sp, #12
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800dade:	bf00      	nop
}
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800daea:	b580      	push	{r7, lr}
 800daec:	b082      	sub	sp, #8
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800db1e:	2200      	movs	r2, #0
 800db20:	4619      	mov	r1, r3
 800db22:	f001 f9c5 	bl	800eeb0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f003 fd4c 	bl	80115ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	791b      	ldrb	r3, [r3, #4]
 800db5a:	4619      	mov	r1, r3
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f001 f835 	bl	800ebcc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	795b      	ldrb	r3, [r3, #5]
 800db66:	4619      	mov	r1, r3
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f001 f82f 	bl	800ebcc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2201      	movs	r2, #1
 800db72:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800db82:	2200      	movs	r2, #0
 800db84:	4619      	mov	r1, r3
 800db86:	f001 f993 	bl	800eeb0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b086      	sub	sp, #24
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 800dba2:	f107 030c 	add.w	r3, r7, #12
 800dba6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f001 f9c0 	bl	800ef30 <osMessageGet>
    if (event.status == osEventMessage)
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b10      	cmp	r3, #16
 800dbb4:	d1f2      	bne.n	800db9c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7ff faa4 	bl	800d104 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800dbbc:	e7ee      	b.n	800db9c <USBH_Process_OS+0x8>

0800dbbe <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b082      	sub	sp, #8
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dbda:	2200      	movs	r2, #0
 800dbdc:	4619      	mov	r1, r3
 800dbde:	f001 f967 	bl	800eeb0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af02      	add	r7, sp, #8
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800dbf8:	887b      	ldrh	r3, [r7, #2]
 800dbfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbfe:	d901      	bls.n	800dc04 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800dc00:	2303      	movs	r3, #3
 800dc02:	e01b      	b.n	800dc3c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800dc0a:	887b      	ldrh	r3, [r7, #2]
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dc14:	2100      	movs	r1, #0
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 f872 	bl	800dd00 <USBH_GetDescriptor>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d109      	bne.n	800dc3a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800dc2c:	887a      	ldrh	r2, [r7, #2]
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f929 	bl	800de88 <USBH_ParseDevDesc>
 800dc36:	4603      	mov	r3, r0
 800dc38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b086      	sub	sp, #24
 800dc48:	af02      	add	r7, sp, #8
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	331c      	adds	r3, #28
 800dc54:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800dc56:	887b      	ldrh	r3, [r7, #2]
 800dc58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc5c:	d901      	bls.n	800dc62 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800dc5e:	2303      	movs	r3, #3
 800dc60:	e016      	b.n	800dc90 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800dc62:	887b      	ldrh	r3, [r7, #2]
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 f846 	bl	800dd00 <USBH_GetDescriptor>
 800dc74:	4603      	mov	r3, r0
 800dc76:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800dc78:	7bfb      	ldrb	r3, [r7, #15]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d107      	bne.n	800dc8e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800dc7e:	887b      	ldrh	r3, [r7, #2]
 800dc80:	461a      	mov	r2, r3
 800dc82:	68b9      	ldr	r1, [r7, #8]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f9af 	bl	800dfe8 <USBH_ParseCfgDesc>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b088      	sub	sp, #32
 800dc9c:	af02      	add	r7, sp, #8
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	607a      	str	r2, [r7, #4]
 800dca2:	461a      	mov	r2, r3
 800dca4:	460b      	mov	r3, r1
 800dca6:	72fb      	strb	r3, [r7, #11]
 800dca8:	4613      	mov	r3, r2
 800dcaa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800dcac:	893b      	ldrh	r3, [r7, #8]
 800dcae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcb2:	d802      	bhi.n	800dcba <USBH_Get_StringDesc+0x22>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d101      	bne.n	800dcbe <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800dcba:	2303      	movs	r3, #3
 800dcbc:	e01c      	b.n	800dcf8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800dcbe:	7afb      	ldrb	r3, [r7, #11]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800dcc6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800dcce:	893b      	ldrh	r3, [r7, #8]
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f000 f812 	bl	800dd00 <USBH_GetDescriptor>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800dce0:	7dfb      	ldrb	r3, [r7, #23]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d107      	bne.n	800dcf6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800dcec:	893a      	ldrh	r2, [r7, #8]
 800dcee:	6879      	ldr	r1, [r7, #4]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f000 fb8d 	bl	800e410 <USBH_ParseStringDesc>
  }

  return status;
 800dcf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3718      	adds	r7, #24
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	607b      	str	r3, [r7, #4]
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	72fb      	strb	r3, [r7, #11]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	789b      	ldrb	r3, [r3, #2]
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d11c      	bne.n	800dd54 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800dd1a:	7afb      	ldrb	r3, [r7, #11]
 800dd1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2206      	movs	r2, #6
 800dd2a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	893a      	ldrh	r2, [r7, #8]
 800dd30:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dd32:	893b      	ldrh	r3, [r7, #8]
 800dd34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dd38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dd3c:	d104      	bne.n	800dd48 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f240 4209 	movw	r2, #1033	@ 0x409
 800dd44:	829a      	strh	r2, [r3, #20]
 800dd46:	e002      	b.n	800dd4e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	8b3a      	ldrh	r2, [r7, #24]
 800dd52:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800dd54:	8b3b      	ldrh	r3, [r7, #24]
 800dd56:	461a      	mov	r2, r3
 800dd58:	6879      	ldr	r1, [r7, #4]
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f000 fba5 	bl	800e4aa <USBH_CtlReq>
 800dd60:	4603      	mov	r3, r0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b082      	sub	sp, #8
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
 800dd72:	460b      	mov	r3, r1
 800dd74:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	789b      	ldrb	r3, [r3, #2]
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d10f      	bne.n	800dd9e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2205      	movs	r2, #5
 800dd88:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dd8a:	78fb      	ldrb	r3, [r7, #3]
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dd9e:	2200      	movs	r2, #0
 800dda0:	2100      	movs	r1, #0
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 fb81 	bl	800e4aa <USBH_CtlReq>
 800dda8:	4603      	mov	r3, r0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b082      	sub	sp, #8
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	460b      	mov	r3, r1
 800ddbc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	789b      	ldrb	r3, [r3, #2]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d10e      	bne.n	800dde4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2209      	movs	r2, #9
 800ddd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	887a      	ldrh	r2, [r7, #2]
 800ddd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dde4:	2200      	movs	r2, #0
 800dde6:	2100      	movs	r1, #0
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 fb5e 	bl	800e4aa <USBH_CtlReq>
 800ddee:	4603      	mov	r3, r0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	460b      	mov	r3, r1
 800de02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	789b      	ldrb	r3, [r3, #2]
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d10f      	bne.n	800de2c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2200      	movs	r2, #0
 800de10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2203      	movs	r2, #3
 800de16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800de18:	78fb      	ldrb	r3, [r7, #3]
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800de2c:	2200      	movs	r2, #0
 800de2e:	2100      	movs	r1, #0
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 fb3a 	bl	800e4aa <USBH_CtlReq>
 800de36:	4603      	mov	r3, r0
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	460b      	mov	r3, r1
 800de4a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	789b      	ldrb	r3, [r3, #2]
 800de50:	2b01      	cmp	r3, #1
 800de52:	d10f      	bne.n	800de74 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2202      	movs	r2, #2
 800de58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2201      	movs	r2, #1
 800de5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800de66:	78fb      	ldrb	r3, [r7, #3]
 800de68:	b29a      	uxth	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800de74:	2200      	movs	r2, #0
 800de76:	2100      	movs	r1, #0
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 fb16 	bl	800e4aa <USBH_CtlReq>
 800de7e:	4603      	mov	r3, r0
}
 800de80:	4618      	mov	r0, r3
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800de88:	b480      	push	{r7}
 800de8a:	b087      	sub	sp, #28
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	4613      	mov	r3, r2
 800de94:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800de9c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800de9e:	2300      	movs	r3, #0
 800dea0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d101      	bne.n	800deac <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800dea8:	2302      	movs	r3, #2
 800deaa:	e094      	b.n	800dfd6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	781a      	ldrb	r2, [r3, #0]
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	785a      	ldrb	r2, [r3, #1]
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	3302      	adds	r3, #2
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	461a      	mov	r2, r3
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	3303      	adds	r3, #3
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	021b      	lsls	r3, r3, #8
 800decc:	b29b      	uxth	r3, r3
 800dece:	4313      	orrs	r3, r2
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	791a      	ldrb	r2, [r3, #4]
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	795a      	ldrb	r2, [r3, #5]
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	799a      	ldrb	r2, [r3, #6]
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	79da      	ldrb	r2, [r3, #7]
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800defc:	2b00      	cmp	r3, #0
 800defe:	d004      	beq.n	800df0a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800df06:	2b01      	cmp	r3, #1
 800df08:	d11b      	bne.n	800df42 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	79db      	ldrb	r3, [r3, #7]
 800df0e:	2b20      	cmp	r3, #32
 800df10:	dc0f      	bgt.n	800df32 <USBH_ParseDevDesc+0xaa>
 800df12:	2b08      	cmp	r3, #8
 800df14:	db0f      	blt.n	800df36 <USBH_ParseDevDesc+0xae>
 800df16:	3b08      	subs	r3, #8
 800df18:	4a32      	ldr	r2, [pc, #200]	@ (800dfe4 <USBH_ParseDevDesc+0x15c>)
 800df1a:	fa22 f303 	lsr.w	r3, r2, r3
 800df1e:	f003 0301 	and.w	r3, r3, #1
 800df22:	2b00      	cmp	r3, #0
 800df24:	bf14      	ite	ne
 800df26:	2301      	movne	r3, #1
 800df28:	2300      	moveq	r3, #0
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d106      	bne.n	800df3e <USBH_ParseDevDesc+0xb6>
 800df30:	e001      	b.n	800df36 <USBH_ParseDevDesc+0xae>
 800df32:	2b40      	cmp	r3, #64	@ 0x40
 800df34:	d003      	beq.n	800df3e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	2208      	movs	r2, #8
 800df3a:	71da      	strb	r2, [r3, #7]
        break;
 800df3c:	e000      	b.n	800df40 <USBH_ParseDevDesc+0xb8>
        break;
 800df3e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800df40:	e00e      	b.n	800df60 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800df48:	2b02      	cmp	r3, #2
 800df4a:	d107      	bne.n	800df5c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	79db      	ldrb	r3, [r3, #7]
 800df50:	2b08      	cmp	r3, #8
 800df52:	d005      	beq.n	800df60 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	2208      	movs	r2, #8
 800df58:	71da      	strb	r2, [r3, #7]
 800df5a:	e001      	b.n	800df60 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800df5c:	2303      	movs	r3, #3
 800df5e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800df60:	88fb      	ldrh	r3, [r7, #6]
 800df62:	2b08      	cmp	r3, #8
 800df64:	d936      	bls.n	800dfd4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	3308      	adds	r3, #8
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	461a      	mov	r2, r3
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	3309      	adds	r3, #9
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	021b      	lsls	r3, r3, #8
 800df76:	b29b      	uxth	r3, r3
 800df78:	4313      	orrs	r3, r2
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	330a      	adds	r3, #10
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	461a      	mov	r2, r3
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	330b      	adds	r3, #11
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	021b      	lsls	r3, r3, #8
 800df90:	b29b      	uxth	r3, r3
 800df92:	4313      	orrs	r3, r2
 800df94:	b29a      	uxth	r2, r3
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	330c      	adds	r3, #12
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	330d      	adds	r3, #13
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	021b      	lsls	r3, r3, #8
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	4313      	orrs	r3, r2
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	7b9a      	ldrb	r2, [r3, #14]
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	7bda      	ldrb	r2, [r3, #15]
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	7c1a      	ldrb	r2, [r3, #16]
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	7c5a      	ldrb	r2, [r3, #17]
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800dfd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	371c      	adds	r7, #28
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	01000101 	.word	0x01000101

0800dfe8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b08c      	sub	sp, #48	@ 0x30
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	4613      	mov	r3, r2
 800dff4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800dffc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e004:	2300      	movs	r3, #0
 800e006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800e00a:	2300      	movs	r3, #0
 800e00c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d101      	bne.n	800e01a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800e016:	2302      	movs	r3, #2
 800e018:	e0da      	b.n	800e1d0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800e01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	2b09      	cmp	r3, #9
 800e024:	d002      	beq.n	800e02c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800e026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e028:	2209      	movs	r2, #9
 800e02a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	781a      	ldrb	r2, [r3, #0]
 800e030:	6a3b      	ldr	r3, [r7, #32]
 800e032:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	785a      	ldrb	r2, [r3, #1]
 800e038:	6a3b      	ldr	r3, [r7, #32]
 800e03a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	3302      	adds	r3, #2
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	461a      	mov	r2, r3
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	3303      	adds	r3, #3
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	021b      	lsls	r3, r3, #8
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	4313      	orrs	r3, r2
 800e050:	b29b      	uxth	r3, r3
 800e052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e056:	bf28      	it	cs
 800e058:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800e05c:	b29a      	uxth	r2, r3
 800e05e:	6a3b      	ldr	r3, [r7, #32]
 800e060:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	791a      	ldrb	r2, [r3, #4]
 800e066:	6a3b      	ldr	r3, [r7, #32]
 800e068:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	795a      	ldrb	r2, [r3, #5]
 800e06e:	6a3b      	ldr	r3, [r7, #32]
 800e070:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	799a      	ldrb	r2, [r3, #6]
 800e076:	6a3b      	ldr	r3, [r7, #32]
 800e078:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	79da      	ldrb	r2, [r3, #7]
 800e07e:	6a3b      	ldr	r3, [r7, #32]
 800e080:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	7a1a      	ldrb	r2, [r3, #8]
 800e086:	6a3b      	ldr	r3, [r7, #32]
 800e088:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e08a:	88fb      	ldrh	r3, [r7, #6]
 800e08c:	2b09      	cmp	r3, #9
 800e08e:	f240 809d 	bls.w	800e1cc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800e092:	2309      	movs	r3, #9
 800e094:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e096:	2300      	movs	r3, #0
 800e098:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e09a:	e081      	b.n	800e1a0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e09c:	f107 0316 	add.w	r3, r7, #22
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0a4:	f000 f9e7 	bl	800e476 <USBH_GetNextDesc>
 800e0a8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800e0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ac:	785b      	ldrb	r3, [r3, #1]
 800e0ae:	2b04      	cmp	r3, #4
 800e0b0:	d176      	bne.n	800e1a0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800e0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	2b09      	cmp	r3, #9
 800e0b8:	d002      	beq.n	800e0c0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800e0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0bc:	2209      	movs	r2, #9
 800e0be:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800e0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0c4:	221a      	movs	r2, #26
 800e0c6:	fb02 f303 	mul.w	r3, r2, r3
 800e0ca:	3308      	adds	r3, #8
 800e0cc:	6a3a      	ldr	r2, [r7, #32]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	3302      	adds	r3, #2
 800e0d2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e0d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e0d6:	69f8      	ldr	r0, [r7, #28]
 800e0d8:	f000 f87e 	bl	800e1d8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e0e6:	e043      	b.n	800e170 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e0e8:	f107 0316 	add.w	r3, r7, #22
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e0f0:	f000 f9c1 	bl	800e476 <USBH_GetNextDesc>
 800e0f4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f8:	785b      	ldrb	r3, [r3, #1]
 800e0fa:	2b05      	cmp	r3, #5
 800e0fc:	d138      	bne.n	800e170 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	795b      	ldrb	r3, [r3, #5]
 800e102:	2b01      	cmp	r3, #1
 800e104:	d113      	bne.n	800e12e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d003      	beq.n	800e116 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	799b      	ldrb	r3, [r3, #6]
 800e112:	2b03      	cmp	r3, #3
 800e114:	d10b      	bne.n	800e12e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	79db      	ldrb	r3, [r3, #7]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d10b      	bne.n	800e136 <USBH_ParseCfgDesc+0x14e>
 800e11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	2b09      	cmp	r3, #9
 800e124:	d007      	beq.n	800e136 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800e126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e128:	2209      	movs	r2, #9
 800e12a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e12c:	e003      	b.n	800e136 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800e12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e130:	2207      	movs	r2, #7
 800e132:	701a      	strb	r2, [r3, #0]
 800e134:	e000      	b.n	800e138 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e136:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e13c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e140:	3201      	adds	r2, #1
 800e142:	00d2      	lsls	r2, r2, #3
 800e144:	211a      	movs	r1, #26
 800e146:	fb01 f303 	mul.w	r3, r1, r3
 800e14a:	4413      	add	r3, r2
 800e14c:	3308      	adds	r3, #8
 800e14e:	6a3a      	ldr	r2, [r7, #32]
 800e150:	4413      	add	r3, r2
 800e152:	3304      	adds	r3, #4
 800e154:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e158:	69b9      	ldr	r1, [r7, #24]
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	f000 f870 	bl	800e240 <USBH_ParseEPDesc>
 800e160:	4603      	mov	r3, r0
 800e162:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800e166:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e16a:	3301      	adds	r3, #1
 800e16c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	791b      	ldrb	r3, [r3, #4]
 800e174:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e178:	429a      	cmp	r2, r3
 800e17a:	d204      	bcs.n	800e186 <USBH_ParseCfgDesc+0x19e>
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	885a      	ldrh	r2, [r3, #2]
 800e180:	8afb      	ldrh	r3, [r7, #22]
 800e182:	429a      	cmp	r2, r3
 800e184:	d8b0      	bhi.n	800e0e8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	791b      	ldrb	r3, [r3, #4]
 800e18a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e18e:	429a      	cmp	r2, r3
 800e190:	d201      	bcs.n	800e196 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800e192:	2303      	movs	r3, #3
 800e194:	e01c      	b.n	800e1d0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800e196:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e19a:	3301      	adds	r3, #1
 800e19c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d805      	bhi.n	800e1b4 <USBH_ParseCfgDesc+0x1cc>
 800e1a8:	6a3b      	ldr	r3, [r7, #32]
 800e1aa:	885a      	ldrh	r2, [r3, #2]
 800e1ac:	8afb      	ldrh	r3, [r7, #22]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	f63f af74 	bhi.w	800e09c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e1b4:	6a3b      	ldr	r3, [r7, #32]
 800e1b6:	791b      	ldrb	r3, [r3, #4]
 800e1b8:	2b02      	cmp	r3, #2
 800e1ba:	bf28      	it	cs
 800e1bc:	2302      	movcs	r3, #2
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d201      	bcs.n	800e1cc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	e001      	b.n	800e1d0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800e1cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3730      	adds	r7, #48	@ 0x30
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	781a      	ldrb	r2, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	785a      	ldrb	r2, [r3, #1]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	789a      	ldrb	r2, [r3, #2]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	78da      	ldrb	r2, [r3, #3]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	3304      	adds	r3, #4
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	2b02      	cmp	r3, #2
 800e20a:	bf28      	it	cs
 800e20c:	2302      	movcs	r3, #2
 800e20e:	b2da      	uxtb	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	795a      	ldrb	r2, [r3, #5]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	799a      	ldrb	r2, [r3, #6]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	79da      	ldrb	r2, [r3, #7]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	7a1a      	ldrb	r2, [r3, #8]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	721a      	strb	r2, [r3, #8]
}
 800e234:	bf00      	nop
 800e236:	370c      	adds	r7, #12
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800e240:	b480      	push	{r7}
 800e242:	b087      	sub	sp, #28
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e24c:	2300      	movs	r3, #0
 800e24e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	781a      	ldrb	r2, [r3, #0]
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	785a      	ldrb	r2, [r3, #1]
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	789a      	ldrb	r2, [r3, #2]
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	78da      	ldrb	r2, [r3, #3]
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	3304      	adds	r3, #4
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	461a      	mov	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	3305      	adds	r3, #5
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	021b      	lsls	r3, r3, #8
 800e280:	b29b      	uxth	r3, r3
 800e282:	4313      	orrs	r3, r2
 800e284:	b29a      	uxth	r2, r3
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	799a      	ldrb	r2, [r3, #6]
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	889b      	ldrh	r3, [r3, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d009      	beq.n	800e2ae <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e29e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2a2:	d804      	bhi.n	800e2ae <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e2a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2ac:	d901      	bls.n	800e2b2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800e2ae:	2303      	movs	r3, #3
 800e2b0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d136      	bne.n	800e32a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	78db      	ldrb	r3, [r3, #3]
 800e2c0:	f003 0303 	and.w	r3, r3, #3
 800e2c4:	2b02      	cmp	r3, #2
 800e2c6:	d108      	bne.n	800e2da <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	889b      	ldrh	r3, [r3, #4]
 800e2cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2d0:	f240 8097 	bls.w	800e402 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e2d4:	2303      	movs	r3, #3
 800e2d6:	75fb      	strb	r3, [r7, #23]
 800e2d8:	e093      	b.n	800e402 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	78db      	ldrb	r3, [r3, #3]
 800e2de:	f003 0303 	and.w	r3, r3, #3
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d107      	bne.n	800e2f6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	889b      	ldrh	r3, [r3, #4]
 800e2ea:	2b40      	cmp	r3, #64	@ 0x40
 800e2ec:	f240 8089 	bls.w	800e402 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e2f0:	2303      	movs	r3, #3
 800e2f2:	75fb      	strb	r3, [r7, #23]
 800e2f4:	e085      	b.n	800e402 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	78db      	ldrb	r3, [r3, #3]
 800e2fa:	f003 0303 	and.w	r3, r3, #3
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d005      	beq.n	800e30e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	78db      	ldrb	r3, [r3, #3]
 800e306:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e30a:	2b03      	cmp	r3, #3
 800e30c:	d10a      	bne.n	800e324 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	799b      	ldrb	r3, [r3, #6]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d003      	beq.n	800e31e <USBH_ParseEPDesc+0xde>
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	799b      	ldrb	r3, [r3, #6]
 800e31a:	2b10      	cmp	r3, #16
 800e31c:	d970      	bls.n	800e400 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800e31e:	2303      	movs	r3, #3
 800e320:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e322:	e06d      	b.n	800e400 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e324:	2303      	movs	r3, #3
 800e326:	75fb      	strb	r3, [r7, #23]
 800e328:	e06b      	b.n	800e402 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e330:	2b01      	cmp	r3, #1
 800e332:	d13c      	bne.n	800e3ae <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	78db      	ldrb	r3, [r3, #3]
 800e338:	f003 0303 	and.w	r3, r3, #3
 800e33c:	2b02      	cmp	r3, #2
 800e33e:	d005      	beq.n	800e34c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	78db      	ldrb	r3, [r3, #3]
 800e344:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d106      	bne.n	800e35a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	889b      	ldrh	r3, [r3, #4]
 800e350:	2b40      	cmp	r3, #64	@ 0x40
 800e352:	d956      	bls.n	800e402 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e354:	2303      	movs	r3, #3
 800e356:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e358:	e053      	b.n	800e402 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	78db      	ldrb	r3, [r3, #3]
 800e35e:	f003 0303 	and.w	r3, r3, #3
 800e362:	2b01      	cmp	r3, #1
 800e364:	d10e      	bne.n	800e384 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	799b      	ldrb	r3, [r3, #6]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d007      	beq.n	800e37e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800e372:	2b10      	cmp	r3, #16
 800e374:	d803      	bhi.n	800e37e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800e37a:	2b40      	cmp	r3, #64	@ 0x40
 800e37c:	d941      	bls.n	800e402 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e37e:	2303      	movs	r3, #3
 800e380:	75fb      	strb	r3, [r7, #23]
 800e382:	e03e      	b.n	800e402 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	78db      	ldrb	r3, [r3, #3]
 800e388:	f003 0303 	and.w	r3, r3, #3
 800e38c:	2b03      	cmp	r3, #3
 800e38e:	d10b      	bne.n	800e3a8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	799b      	ldrb	r3, [r3, #6]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d004      	beq.n	800e3a2 <USBH_ParseEPDesc+0x162>
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	889b      	ldrh	r3, [r3, #4]
 800e39c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3a0:	d32f      	bcc.n	800e402 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	75fb      	strb	r3, [r7, #23]
 800e3a6:	e02c      	b.n	800e402 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e3a8:	2303      	movs	r3, #3
 800e3aa:	75fb      	strb	r3, [r7, #23]
 800e3ac:	e029      	b.n	800e402 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e3b4:	2b02      	cmp	r3, #2
 800e3b6:	d120      	bne.n	800e3fa <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	78db      	ldrb	r3, [r3, #3]
 800e3bc:	f003 0303 	and.w	r3, r3, #3
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d106      	bne.n	800e3d2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	889b      	ldrh	r3, [r3, #4]
 800e3c8:	2b08      	cmp	r3, #8
 800e3ca:	d01a      	beq.n	800e402 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e3cc:	2303      	movs	r3, #3
 800e3ce:	75fb      	strb	r3, [r7, #23]
 800e3d0:	e017      	b.n	800e402 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	78db      	ldrb	r3, [r3, #3]
 800e3d6:	f003 0303 	and.w	r3, r3, #3
 800e3da:	2b03      	cmp	r3, #3
 800e3dc:	d10a      	bne.n	800e3f4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	799b      	ldrb	r3, [r3, #6]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d003      	beq.n	800e3ee <USBH_ParseEPDesc+0x1ae>
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	889b      	ldrh	r3, [r3, #4]
 800e3ea:	2b08      	cmp	r3, #8
 800e3ec:	d909      	bls.n	800e402 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e3ee:	2303      	movs	r3, #3
 800e3f0:	75fb      	strb	r3, [r7, #23]
 800e3f2:	e006      	b.n	800e402 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e3f4:	2303      	movs	r3, #3
 800e3f6:	75fb      	strb	r3, [r7, #23]
 800e3f8:	e003      	b.n	800e402 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e3fa:	2303      	movs	r3, #3
 800e3fc:	75fb      	strb	r3, [r7, #23]
 800e3fe:	e000      	b.n	800e402 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e400:	bf00      	nop
  }

  return status;
 800e402:	7dfb      	ldrb	r3, [r7, #23]
}
 800e404:	4618      	mov	r0, r3
 800e406:	371c      	adds	r7, #28
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e410:	b480      	push	{r7}
 800e412:	b087      	sub	sp, #28
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	60b9      	str	r1, [r7, #8]
 800e41a:	4613      	mov	r3, r2
 800e41c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3301      	adds	r3, #1
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	2b03      	cmp	r3, #3
 800e426:	d120      	bne.n	800e46a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	1e9a      	subs	r2, r3, #2
 800e42e:	88fb      	ldrh	r3, [r7, #6]
 800e430:	4293      	cmp	r3, r2
 800e432:	bf28      	it	cs
 800e434:	4613      	movcs	r3, r2
 800e436:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	3302      	adds	r3, #2
 800e43c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e43e:	2300      	movs	r3, #0
 800e440:	82fb      	strh	r3, [r7, #22]
 800e442:	e00b      	b.n	800e45c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e444:	8afb      	ldrh	r3, [r7, #22]
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	4413      	add	r3, r2
 800e44a:	781a      	ldrb	r2, [r3, #0]
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	3301      	adds	r3, #1
 800e454:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e456:	8afb      	ldrh	r3, [r7, #22]
 800e458:	3302      	adds	r3, #2
 800e45a:	82fb      	strh	r3, [r7, #22]
 800e45c:	8afa      	ldrh	r2, [r7, #22]
 800e45e:	8abb      	ldrh	r3, [r7, #20]
 800e460:	429a      	cmp	r2, r3
 800e462:	d3ef      	bcc.n	800e444 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	2200      	movs	r2, #0
 800e468:	701a      	strb	r2, [r3, #0]
  }
}
 800e46a:	bf00      	nop
 800e46c:	371c      	adds	r7, #28
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr

0800e476 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e476:	b480      	push	{r7}
 800e478:	b085      	sub	sp, #20
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
 800e47e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	881b      	ldrh	r3, [r3, #0]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	7812      	ldrb	r2, [r2, #0]
 800e488:	4413      	add	r3, r2
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	4413      	add	r3, r2
 800e49a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e49c:	68fb      	ldr	r3, [r7, #12]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3714      	adds	r7, #20
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b086      	sub	sp, #24
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	60f8      	str	r0, [r7, #12]
 800e4b2:	60b9      	str	r1, [r7, #8]
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	789b      	ldrb	r3, [r3, #2]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d002      	beq.n	800e4ca <USBH_CtlReq+0x20>
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d01d      	beq.n	800e504 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800e4c8:	e043      	b.n	800e552 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	68ba      	ldr	r2, [r7, #8]
 800e4ce:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	88fa      	ldrh	r2, [r7, #6]
 800e4d4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2201      	movs	r2, #1
 800e4da:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2202      	movs	r2, #2
 800e4e0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2203      	movs	r2, #3
 800e4ea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	f000 fcd7 	bl	800eeb0 <osMessagePut>
      break;
 800e502:	e026      	b.n	800e552 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f000 f829 	bl	800e55c <USBH_HandleControl>
 800e50a:	4603      	mov	r3, r0
 800e50c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e50e:	7dfb      	ldrb	r3, [r7, #23]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <USBH_CtlReq+0x70>
 800e514:	7dfb      	ldrb	r3, [r7, #23]
 800e516:	2b03      	cmp	r3, #3
 800e518:	d106      	bne.n	800e528 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2201      	movs	r2, #1
 800e51e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2200      	movs	r2, #0
 800e524:	761a      	strb	r2, [r3, #24]
 800e526:	e005      	b.n	800e534 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800e528:	7dfb      	ldrb	r3, [r7, #23]
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d102      	bne.n	800e534 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2201      	movs	r2, #1
 800e532:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2203      	movs	r2, #3
 800e538:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e548:	2200      	movs	r2, #0
 800e54a:	4619      	mov	r1, r3
 800e54c:	f000 fcb0 	bl	800eeb0 <osMessagePut>
      break;
 800e550:	bf00      	nop
  }
  return status;
 800e552:	7dfb      	ldrb	r3, [r7, #23]
}
 800e554:	4618      	mov	r0, r3
 800e556:	3718      	adds	r7, #24
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af02      	add	r7, sp, #8
 800e562:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e564:	2301      	movs	r3, #1
 800e566:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e568:	2300      	movs	r3, #0
 800e56a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	7e1b      	ldrb	r3, [r3, #24]
 800e570:	3b01      	subs	r3, #1
 800e572:	2b0a      	cmp	r3, #10
 800e574:	f200 8229 	bhi.w	800e9ca <USBH_HandleControl+0x46e>
 800e578:	a201      	add	r2, pc, #4	@ (adr r2, 800e580 <USBH_HandleControl+0x24>)
 800e57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e57e:	bf00      	nop
 800e580:	0800e5ad 	.word	0x0800e5ad
 800e584:	0800e5c7 	.word	0x0800e5c7
 800e588:	0800e669 	.word	0x0800e669
 800e58c:	0800e68f 	.word	0x0800e68f
 800e590:	0800e71b 	.word	0x0800e71b
 800e594:	0800e745 	.word	0x0800e745
 800e598:	0800e807 	.word	0x0800e807
 800e59c:	0800e829 	.word	0x0800e829
 800e5a0:	0800e8bb 	.word	0x0800e8bb
 800e5a4:	0800e8e1 	.word	0x0800e8e1
 800e5a8:	0800e973 	.word	0x0800e973
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f103 0110 	add.w	r1, r3, #16
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	795b      	ldrb	r3, [r3, #5]
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 fa17 	bl	800e9ec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2202      	movs	r2, #2
 800e5c2:	761a      	strb	r2, [r3, #24]
      break;
 800e5c4:	e20c      	b.n	800e9e0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	795b      	ldrb	r3, [r3, #5]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f003 f8fd 	bl	80117cc <USBH_LL_GetURBState>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e5d6:	7bbb      	ldrb	r3, [r7, #14]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d12c      	bne.n	800e636 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	7c1b      	ldrb	r3, [r3, #16]
 800e5e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e5e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	8adb      	ldrh	r3, [r3, #22]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d00a      	beq.n	800e604 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e5ee:	7b7b      	ldrb	r3, [r7, #13]
 800e5f0:	2b80      	cmp	r3, #128	@ 0x80
 800e5f2:	d103      	bne.n	800e5fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2203      	movs	r2, #3
 800e5f8:	761a      	strb	r2, [r3, #24]
 800e5fa:	e00d      	b.n	800e618 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2205      	movs	r2, #5
 800e600:	761a      	strb	r2, [r3, #24]
 800e602:	e009      	b.n	800e618 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800e604:	7b7b      	ldrb	r3, [r7, #13]
 800e606:	2b80      	cmp	r3, #128	@ 0x80
 800e608:	d103      	bne.n	800e612 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2209      	movs	r2, #9
 800e60e:	761a      	strb	r2, [r3, #24]
 800e610:	e002      	b.n	800e618 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2207      	movs	r2, #7
 800e616:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2203      	movs	r2, #3
 800e61c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e62c:	2200      	movs	r2, #0
 800e62e:	4619      	mov	r1, r3
 800e630:	f000 fc3e 	bl	800eeb0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e634:	e1cb      	b.n	800e9ce <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e636:	7bbb      	ldrb	r3, [r7, #14]
 800e638:	2b04      	cmp	r3, #4
 800e63a:	d003      	beq.n	800e644 <USBH_HandleControl+0xe8>
 800e63c:	7bbb      	ldrb	r3, [r7, #14]
 800e63e:	2b02      	cmp	r3, #2
 800e640:	f040 81c5 	bne.w	800e9ce <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	220b      	movs	r2, #11
 800e648:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2203      	movs	r2, #3
 800e64e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e65e:	2200      	movs	r2, #0
 800e660:	4619      	mov	r1, r3
 800e662:	f000 fc25 	bl	800eeb0 <osMessagePut>
      break;
 800e666:	e1b2      	b.n	800e9ce <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e66e:	b29a      	uxth	r2, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6899      	ldr	r1, [r3, #8]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	899a      	ldrh	r2, [r3, #12]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	791b      	ldrb	r3, [r3, #4]
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 f9f2 	bl	800ea6a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2204      	movs	r2, #4
 800e68a:	761a      	strb	r2, [r3, #24]
      break;
 800e68c:	e1a8      	b.n	800e9e0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	791b      	ldrb	r3, [r3, #4]
 800e692:	4619      	mov	r1, r3
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f003 f899 	bl	80117cc <USBH_LL_GetURBState>
 800e69a:	4603      	mov	r3, r0
 800e69c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e69e:	7bbb      	ldrb	r3, [r7, #14]
 800e6a0:	2b01      	cmp	r3, #1
 800e6a2:	d110      	bne.n	800e6c6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2209      	movs	r2, #9
 800e6a8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2203      	movs	r2, #3
 800e6ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e6be:	2200      	movs	r2, #0
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	f000 fbf5 	bl	800eeb0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e6c6:	7bbb      	ldrb	r3, [r7, #14]
 800e6c8:	2b05      	cmp	r3, #5
 800e6ca:	d110      	bne.n	800e6ee <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e6cc:	2303      	movs	r3, #3
 800e6ce:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2203      	movs	r2, #3
 800e6d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	f000 fbe2 	bl	800eeb0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e6ec:	e171      	b.n	800e9d2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800e6ee:	7bbb      	ldrb	r3, [r7, #14]
 800e6f0:	2b04      	cmp	r3, #4
 800e6f2:	f040 816e 	bne.w	800e9d2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	220b      	movs	r2, #11
 800e6fa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2203      	movs	r2, #3
 800e700:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e710:	2200      	movs	r2, #0
 800e712:	4619      	mov	r1, r3
 800e714:	f000 fbcc 	bl	800eeb0 <osMessagePut>
      break;
 800e718:	e15b      	b.n	800e9d2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6899      	ldr	r1, [r3, #8]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	899a      	ldrh	r2, [r3, #12]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	795b      	ldrb	r3, [r3, #5]
 800e726:	2001      	movs	r0, #1
 800e728:	9000      	str	r0, [sp, #0]
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 f978 	bl	800ea20 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e736:	b29a      	uxth	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2206      	movs	r2, #6
 800e740:	761a      	strb	r2, [r3, #24]
      break;
 800e742:	e14d      	b.n	800e9e0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	795b      	ldrb	r3, [r3, #5]
 800e748:	4619      	mov	r1, r3
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f003 f83e 	bl	80117cc <USBH_LL_GetURBState>
 800e750:	4603      	mov	r3, r0
 800e752:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e754:	7bbb      	ldrb	r3, [r7, #14]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d111      	bne.n	800e77e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2207      	movs	r2, #7
 800e75e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2203      	movs	r2, #3
 800e764:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e774:	2200      	movs	r2, #0
 800e776:	4619      	mov	r1, r3
 800e778:	f000 fb9a 	bl	800eeb0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e77c:	e12b      	b.n	800e9d6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800e77e:	7bbb      	ldrb	r3, [r7, #14]
 800e780:	2b05      	cmp	r3, #5
 800e782:	d113      	bne.n	800e7ac <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	220c      	movs	r2, #12
 800e788:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e78a:	2303      	movs	r3, #3
 800e78c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2203      	movs	r2, #3
 800e792:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	f000 fb83 	bl	800eeb0 <osMessagePut>
      break;
 800e7aa:	e114      	b.n	800e9d6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e7ac:	7bbb      	ldrb	r3, [r7, #14]
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d111      	bne.n	800e7d6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2205      	movs	r2, #5
 800e7b6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2203      	movs	r2, #3
 800e7bc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	f000 fb6e 	bl	800eeb0 <osMessagePut>
      break;
 800e7d4:	e0ff      	b.n	800e9d6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800e7d6:	7bbb      	ldrb	r3, [r7, #14]
 800e7d8:	2b04      	cmp	r3, #4
 800e7da:	f040 80fc 	bne.w	800e9d6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	220b      	movs	r2, #11
 800e7e2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2203      	movs	r2, #3
 800e7ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	4619      	mov	r1, r3
 800e800:	f000 fb56 	bl	800eeb0 <osMessagePut>
      break;
 800e804:	e0e7      	b.n	800e9d6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	791b      	ldrb	r3, [r3, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	2100      	movs	r1, #0
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 f92b 	bl	800ea6a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2208      	movs	r2, #8
 800e824:	761a      	strb	r2, [r3, #24]

      break;
 800e826:	e0db      	b.n	800e9e0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	791b      	ldrb	r3, [r3, #4]
 800e82c:	4619      	mov	r1, r3
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f002 ffcc 	bl	80117cc <USBH_LL_GetURBState>
 800e834:	4603      	mov	r3, r0
 800e836:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e838:	7bbb      	ldrb	r3, [r7, #14]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d113      	bne.n	800e866 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	220d      	movs	r2, #13
 800e842:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e844:	2300      	movs	r3, #0
 800e846:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2203      	movs	r2, #3
 800e84c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e85c:	2200      	movs	r2, #0
 800e85e:	4619      	mov	r1, r3
 800e860:	f000 fb26 	bl	800eeb0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e864:	e0b9      	b.n	800e9da <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800e866:	7bbb      	ldrb	r3, [r7, #14]
 800e868:	2b04      	cmp	r3, #4
 800e86a:	d111      	bne.n	800e890 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	220b      	movs	r2, #11
 800e870:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2203      	movs	r2, #3
 800e876:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e886:	2200      	movs	r2, #0
 800e888:	4619      	mov	r1, r3
 800e88a:	f000 fb11 	bl	800eeb0 <osMessagePut>
      break;
 800e88e:	e0a4      	b.n	800e9da <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800e890:	7bbb      	ldrb	r3, [r7, #14]
 800e892:	2b05      	cmp	r3, #5
 800e894:	f040 80a1 	bne.w	800e9da <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800e898:	2303      	movs	r3, #3
 800e89a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2203      	movs	r2, #3
 800e8a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	f000 fafc 	bl	800eeb0 <osMessagePut>
      break;
 800e8b8:	e08f      	b.n	800e9da <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	795b      	ldrb	r3, [r3, #5]
 800e8be:	2201      	movs	r2, #1
 800e8c0:	9200      	str	r2, [sp, #0]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f8aa 	bl	800ea20 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e8d2:	b29a      	uxth	r2, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	220a      	movs	r2, #10
 800e8dc:	761a      	strb	r2, [r3, #24]
      break;
 800e8de:	e07f      	b.n	800e9e0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	795b      	ldrb	r3, [r3, #5]
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f002 ff70 	bl	80117cc <USBH_LL_GetURBState>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e8f0:	7bbb      	ldrb	r3, [r7, #14]
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d113      	bne.n	800e91e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	220d      	movs	r2, #13
 800e8fe:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2203      	movs	r2, #3
 800e904:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e914:	2200      	movs	r2, #0
 800e916:	4619      	mov	r1, r3
 800e918:	f000 faca 	bl	800eeb0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e91c:	e05f      	b.n	800e9de <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e91e:	7bbb      	ldrb	r3, [r7, #14]
 800e920:	2b02      	cmp	r3, #2
 800e922:	d111      	bne.n	800e948 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2209      	movs	r2, #9
 800e928:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2203      	movs	r2, #3
 800e92e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e93e:	2200      	movs	r2, #0
 800e940:	4619      	mov	r1, r3
 800e942:	f000 fab5 	bl	800eeb0 <osMessagePut>
      break;
 800e946:	e04a      	b.n	800e9de <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800e948:	7bbb      	ldrb	r3, [r7, #14]
 800e94a:	2b04      	cmp	r3, #4
 800e94c:	d147      	bne.n	800e9de <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	220b      	movs	r2, #11
 800e952:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2203      	movs	r2, #3
 800e958:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800e968:	2200      	movs	r2, #0
 800e96a:	4619      	mov	r1, r3
 800e96c:	f000 faa0 	bl	800eeb0 <osMessagePut>
      break;
 800e970:	e035      	b.n	800e9de <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	7e5b      	ldrb	r3, [r3, #25]
 800e976:	3301      	adds	r3, #1
 800e978:	b2da      	uxtb	r2, r3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	765a      	strb	r2, [r3, #25]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	7e5b      	ldrb	r3, [r3, #25]
 800e982:	2b02      	cmp	r3, #2
 800e984:	d806      	bhi.n	800e994 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2201      	movs	r2, #1
 800e98a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2201      	movs	r2, #1
 800e990:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e992:	e025      	b.n	800e9e0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e99a:	2106      	movs	r1, #6
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	795b      	ldrb	r3, [r3, #5]
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 f90d 	bl	800ebcc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	791b      	ldrb	r3, [r3, #4]
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f000 f907 	bl	800ebcc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e9c4:	2302      	movs	r3, #2
 800e9c6:	73fb      	strb	r3, [r7, #15]
      break;
 800e9c8:	e00a      	b.n	800e9e0 <USBH_HandleControl+0x484>

    default:
      break;
 800e9ca:	bf00      	nop
 800e9cc:	e008      	b.n	800e9e0 <USBH_HandleControl+0x484>
      break;
 800e9ce:	bf00      	nop
 800e9d0:	e006      	b.n	800e9e0 <USBH_HandleControl+0x484>
      break;
 800e9d2:	bf00      	nop
 800e9d4:	e004      	b.n	800e9e0 <USBH_HandleControl+0x484>
      break;
 800e9d6:	bf00      	nop
 800e9d8:	e002      	b.n	800e9e0 <USBH_HandleControl+0x484>
      break;
 800e9da:	bf00      	nop
 800e9dc:	e000      	b.n	800e9e0 <USBH_HandleControl+0x484>
      break;
 800e9de:	bf00      	nop
  }

  return status;
 800e9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop

0800e9ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b088      	sub	sp, #32
 800e9f0:	af04      	add	r7, sp, #16
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e9fa:	79f9      	ldrb	r1, [r7, #7]
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	9303      	str	r3, [sp, #12]
 800ea00:	2308      	movs	r3, #8
 800ea02:	9302      	str	r3, [sp, #8]
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	9301      	str	r3, [sp, #4]
 800ea08:	2300      	movs	r3, #0
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	2200      	movs	r2, #0
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f002 feaa 	bl	801176a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ea16:	2300      	movs	r3, #0
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b088      	sub	sp, #32
 800ea24:	af04      	add	r7, sp, #16
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	4611      	mov	r1, r2
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	460b      	mov	r3, r1
 800ea30:	80fb      	strh	r3, [r7, #6]
 800ea32:	4613      	mov	r3, r2
 800ea34:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d001      	beq.n	800ea44 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ea40:	2300      	movs	r3, #0
 800ea42:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ea44:	7979      	ldrb	r1, [r7, #5]
 800ea46:	7e3b      	ldrb	r3, [r7, #24]
 800ea48:	9303      	str	r3, [sp, #12]
 800ea4a:	88fb      	ldrh	r3, [r7, #6]
 800ea4c:	9302      	str	r3, [sp, #8]
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	9301      	str	r3, [sp, #4]
 800ea52:	2301      	movs	r3, #1
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	2300      	movs	r3, #0
 800ea58:	2200      	movs	r2, #0
 800ea5a:	68f8      	ldr	r0, [r7, #12]
 800ea5c:	f002 fe85 	bl	801176a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b088      	sub	sp, #32
 800ea6e:	af04      	add	r7, sp, #16
 800ea70:	60f8      	str	r0, [r7, #12]
 800ea72:	60b9      	str	r1, [r7, #8]
 800ea74:	4611      	mov	r1, r2
 800ea76:	461a      	mov	r2, r3
 800ea78:	460b      	mov	r3, r1
 800ea7a:	80fb      	strh	r3, [r7, #6]
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ea80:	7979      	ldrb	r1, [r7, #5]
 800ea82:	2300      	movs	r3, #0
 800ea84:	9303      	str	r3, [sp, #12]
 800ea86:	88fb      	ldrh	r3, [r7, #6]
 800ea88:	9302      	str	r3, [sp, #8]
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	9301      	str	r3, [sp, #4]
 800ea8e:	2301      	movs	r3, #1
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	2300      	movs	r3, #0
 800ea94:	2201      	movs	r2, #1
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f002 fe67 	bl	801176a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ea9c:	2300      	movs	r3, #0

}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b088      	sub	sp, #32
 800eaaa:	af04      	add	r7, sp, #16
 800eaac:	60f8      	str	r0, [r7, #12]
 800eaae:	60b9      	str	r1, [r7, #8]
 800eab0:	4611      	mov	r1, r2
 800eab2:	461a      	mov	r2, r3
 800eab4:	460b      	mov	r3, r1
 800eab6:	80fb      	strh	r3, [r7, #6]
 800eab8:	4613      	mov	r3, r2
 800eaba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800eac6:	2300      	movs	r3, #0
 800eac8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800eaca:	7979      	ldrb	r1, [r7, #5]
 800eacc:	7e3b      	ldrb	r3, [r7, #24]
 800eace:	9303      	str	r3, [sp, #12]
 800ead0:	88fb      	ldrh	r3, [r7, #6]
 800ead2:	9302      	str	r3, [sp, #8]
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	9301      	str	r3, [sp, #4]
 800ead8:	2301      	movs	r3, #1
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	2302      	movs	r3, #2
 800eade:	2200      	movs	r2, #0
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f002 fe42 	bl	801176a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b088      	sub	sp, #32
 800eaf4:	af04      	add	r7, sp, #16
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	4611      	mov	r1, r2
 800eafc:	461a      	mov	r2, r3
 800eafe:	460b      	mov	r3, r1
 800eb00:	80fb      	strh	r3, [r7, #6]
 800eb02:	4613      	mov	r3, r2
 800eb04:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800eb06:	7979      	ldrb	r1, [r7, #5]
 800eb08:	2300      	movs	r3, #0
 800eb0a:	9303      	str	r3, [sp, #12]
 800eb0c:	88fb      	ldrh	r3, [r7, #6]
 800eb0e:	9302      	str	r3, [sp, #8]
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	9301      	str	r3, [sp, #4]
 800eb14:	2301      	movs	r3, #1
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	2302      	movs	r3, #2
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	68f8      	ldr	r0, [r7, #12]
 800eb1e:	f002 fe24 	bl	801176a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800eb22:	2300      	movs	r3, #0
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b086      	sub	sp, #24
 800eb30:	af04      	add	r7, sp, #16
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	4608      	mov	r0, r1
 800eb36:	4611      	mov	r1, r2
 800eb38:	461a      	mov	r2, r3
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	70fb      	strb	r3, [r7, #3]
 800eb3e:	460b      	mov	r3, r1
 800eb40:	70bb      	strb	r3, [r7, #2]
 800eb42:	4613      	mov	r3, r2
 800eb44:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800eb46:	7878      	ldrb	r0, [r7, #1]
 800eb48:	78ba      	ldrb	r2, [r7, #2]
 800eb4a:	78f9      	ldrb	r1, [r7, #3]
 800eb4c:	8b3b      	ldrh	r3, [r7, #24]
 800eb4e:	9302      	str	r3, [sp, #8]
 800eb50:	7d3b      	ldrb	r3, [r7, #20]
 800eb52:	9301      	str	r3, [sp, #4]
 800eb54:	7c3b      	ldrb	r3, [r7, #16]
 800eb56:	9300      	str	r3, [sp, #0]
 800eb58:	4603      	mov	r3, r0
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f002 fdb7 	bl	80116ce <USBH_LL_OpenPipe>

  return USBH_OK;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3708      	adds	r7, #8
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b082      	sub	sp, #8
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
 800eb72:	460b      	mov	r3, r1
 800eb74:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800eb76:	78fb      	ldrb	r3, [r7, #3]
 800eb78:	4619      	mov	r1, r3
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f002 fdd6 	bl	801172c <USBH_LL_ClosePipe>

  return USBH_OK;
 800eb80:	2300      	movs	r3, #0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b084      	sub	sp, #16
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
 800eb92:	460b      	mov	r3, r1
 800eb94:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f000 f836 	bl	800ec08 <USBH_GetFreePipe>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800eba0:	89fb      	ldrh	r3, [r7, #14]
 800eba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d00a      	beq.n	800ebc0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ebaa:	78fa      	ldrb	r2, [r7, #3]
 800ebac:	89fb      	ldrh	r3, [r7, #14]
 800ebae:	f003 030f 	and.w	r3, r3, #15
 800ebb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ebb6:	6879      	ldr	r1, [r7, #4]
 800ebb8:	33e0      	adds	r3, #224	@ 0xe0
 800ebba:	009b      	lsls	r3, r3, #2
 800ebbc:	440b      	add	r3, r1
 800ebbe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ebc0:	89fb      	ldrh	r3, [r7, #14]
 800ebc2:	b2db      	uxtb	r3, r3
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3710      	adds	r7, #16
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ebd8:	78fb      	ldrb	r3, [r7, #3]
 800ebda:	2b0f      	cmp	r3, #15
 800ebdc:	d80d      	bhi.n	800ebfa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ebde:	78fb      	ldrb	r3, [r7, #3]
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	33e0      	adds	r3, #224	@ 0xe0
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	4413      	add	r3, r2
 800ebe8:	685a      	ldr	r2, [r3, #4]
 800ebea:	78fb      	ldrb	r3, [r7, #3]
 800ebec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ebf0:	6879      	ldr	r1, [r7, #4]
 800ebf2:	33e0      	adds	r3, #224	@ 0xe0
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	440b      	add	r3, r1
 800ebf8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b085      	sub	sp, #20
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ec10:	2300      	movs	r3, #0
 800ec12:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ec14:	2300      	movs	r3, #0
 800ec16:	73fb      	strb	r3, [r7, #15]
 800ec18:	e00f      	b.n	800ec3a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ec1a:	7bfb      	ldrb	r3, [r7, #15]
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	33e0      	adds	r3, #224	@ 0xe0
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4413      	add	r3, r2
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d102      	bne.n	800ec34 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ec2e:	7bfb      	ldrb	r3, [r7, #15]
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	e007      	b.n	800ec44 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
 800ec36:	3301      	adds	r3, #1
 800ec38:	73fb      	strb	r3, [r7, #15]
 800ec3a:	7bfb      	ldrb	r3, [r7, #15]
 800ec3c:	2b0f      	cmp	r3, #15
 800ec3e:	d9ec      	bls.n	800ec1a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ec40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3714      	adds	r7, #20
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b087      	sub	sp, #28
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ec62:	2300      	movs	r3, #0
 800ec64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ec66:	4b1f      	ldr	r3, [pc, #124]	@ (800ece4 <FATFS_LinkDriverEx+0x94>)
 800ec68:	7a5b      	ldrb	r3, [r3, #9]
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d131      	bne.n	800ecd4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ec70:	4b1c      	ldr	r3, [pc, #112]	@ (800ece4 <FATFS_LinkDriverEx+0x94>)
 800ec72:	7a5b      	ldrb	r3, [r3, #9]
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	461a      	mov	r2, r3
 800ec78:	4b1a      	ldr	r3, [pc, #104]	@ (800ece4 <FATFS_LinkDriverEx+0x94>)
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ec7e:	4b19      	ldr	r3, [pc, #100]	@ (800ece4 <FATFS_LinkDriverEx+0x94>)
 800ec80:	7a5b      	ldrb	r3, [r3, #9]
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	4a17      	ldr	r2, [pc, #92]	@ (800ece4 <FATFS_LinkDriverEx+0x94>)
 800ec86:	009b      	lsls	r3, r3, #2
 800ec88:	4413      	add	r3, r2
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ec8e:	4b15      	ldr	r3, [pc, #84]	@ (800ece4 <FATFS_LinkDriverEx+0x94>)
 800ec90:	7a5b      	ldrb	r3, [r3, #9]
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	461a      	mov	r2, r3
 800ec96:	4b13      	ldr	r3, [pc, #76]	@ (800ece4 <FATFS_LinkDriverEx+0x94>)
 800ec98:	4413      	add	r3, r2
 800ec9a:	79fa      	ldrb	r2, [r7, #7]
 800ec9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ec9e:	4b11      	ldr	r3, [pc, #68]	@ (800ece4 <FATFS_LinkDriverEx+0x94>)
 800eca0:	7a5b      	ldrb	r3, [r3, #9]
 800eca2:	b2db      	uxtb	r3, r3
 800eca4:	1c5a      	adds	r2, r3, #1
 800eca6:	b2d1      	uxtb	r1, r2
 800eca8:	4a0e      	ldr	r2, [pc, #56]	@ (800ece4 <FATFS_LinkDriverEx+0x94>)
 800ecaa:	7251      	strb	r1, [r2, #9]
 800ecac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ecae:	7dbb      	ldrb	r3, [r7, #22]
 800ecb0:	3330      	adds	r3, #48	@ 0x30
 800ecb2:	b2da      	uxtb	r2, r3
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	3301      	adds	r3, #1
 800ecbc:	223a      	movs	r2, #58	@ 0x3a
 800ecbe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	3302      	adds	r3, #2
 800ecc4:	222f      	movs	r2, #47	@ 0x2f
 800ecc6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	3303      	adds	r3, #3
 800eccc:	2200      	movs	r2, #0
 800ecce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ecd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	371c      	adds	r7, #28
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	200007d4 	.word	0x200007d4

0800ece8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	6839      	ldr	r1, [r7, #0]
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f7ff ffaa 	bl	800ec50 <FATFS_LinkDriverEx>
 800ecfc:	4603      	mov	r3, r0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3708      	adds	r7, #8
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ed06:	b480      	push	{r7}
 800ed08:	b085      	sub	sp, #20
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ed10:	2300      	movs	r3, #0
 800ed12:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ed14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ed18:	2b84      	cmp	r3, #132	@ 0x84
 800ed1a:	d005      	beq.n	800ed28 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ed1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	4413      	add	r3, r2
 800ed24:	3303      	adds	r3, #3
 800ed26:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ed28:	68fb      	ldr	r3, [r7, #12]
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3714      	adds	r7, #20
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed34:	4770      	bx	lr

0800ed36 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ed36:	b480      	push	{r7}
 800ed38:	b083      	sub	sp, #12
 800ed3a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed3c:	f3ef 8305 	mrs	r3, IPSR
 800ed40:	607b      	str	r3, [r7, #4]
  return(result);
 800ed42:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	bf14      	ite	ne
 800ed48:	2301      	movne	r3, #1
 800ed4a:	2300      	moveq	r3, #0
 800ed4c:	b2db      	uxtb	r3, r3
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	370c      	adds	r7, #12
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr

0800ed5a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ed5a:	b580      	push	{r7, lr}
 800ed5c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ed5e:	f001 f93d 	bl	800ffdc <vTaskStartScheduler>
  
  return osOK;
 800ed62:	2300      	movs	r3, #0
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800ed6c:	f001 fd8a 	bl	8010884 <xTaskGetSchedulerState>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d101      	bne.n	800ed7a <osKernelRunning+0x12>
    return 0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	e000      	b.n	800ed7c <osKernelRunning+0x14>
  else
    return 1;
 800ed7a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ed84:	f7ff ffd7 	bl	800ed36 <inHandlerMode>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d003      	beq.n	800ed96 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ed8e:	f001 fa43 	bl	8010218 <xTaskGetTickCountFromISR>
 800ed92:	4603      	mov	r3, r0
 800ed94:	e002      	b.n	800ed9c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ed96:	f001 fa2f 	bl	80101f8 <xTaskGetTickCount>
 800ed9a:	4603      	mov	r3, r0
  }
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eda2:	b089      	sub	sp, #36	@ 0x24
 800eda4:	af04      	add	r7, sp, #16
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	695b      	ldr	r3, [r3, #20]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d020      	beq.n	800edf4 <osThreadCreate+0x54>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	699b      	ldr	r3, [r3, #24]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d01c      	beq.n	800edf4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	685c      	ldr	r4, [r3, #4]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	691e      	ldr	r6, [r3, #16]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800edcc:	4618      	mov	r0, r3
 800edce:	f7ff ff9a 	bl	800ed06 <makeFreeRtosPriority>
 800edd2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	695b      	ldr	r3, [r3, #20]
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eddc:	9202      	str	r2, [sp, #8]
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	9100      	str	r1, [sp, #0]
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	4632      	mov	r2, r6
 800ede6:	4629      	mov	r1, r5
 800ede8:	4620      	mov	r0, r4
 800edea:	f000 ff1f 	bl	800fc2c <xTaskCreateStatic>
 800edee:	4603      	mov	r3, r0
 800edf0:	60fb      	str	r3, [r7, #12]
 800edf2:	e01c      	b.n	800ee2e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	685c      	ldr	r4, [r3, #4]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee00:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7ff ff7c 	bl	800ed06 <makeFreeRtosPriority>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	f107 030c 	add.w	r3, r7, #12
 800ee14:	9301      	str	r3, [sp, #4]
 800ee16:	9200      	str	r2, [sp, #0]
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	4632      	mov	r2, r6
 800ee1c:	4629      	mov	r1, r5
 800ee1e:	4620      	mov	r0, r4
 800ee20:	f000 ff64 	bl	800fcec <xTaskCreate>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d001      	beq.n	800ee2e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	e000      	b.n	800ee30 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3714      	adds	r7, #20
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee38 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d001      	beq.n	800ee4e <osDelay+0x16>
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	e000      	b.n	800ee50 <osDelay+0x18>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	4618      	mov	r0, r3
 800ee52:	f001 f88d 	bl	800ff70 <vTaskDelay>
  
  return osOK;
 800ee56:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3710      	adds	r7, #16
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ee60:	b590      	push	{r4, r7, lr}
 800ee62:	b085      	sub	sp, #20
 800ee64:	af02      	add	r7, sp, #8
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	689b      	ldr	r3, [r3, #8]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d011      	beq.n	800ee96 <osMessageCreate+0x36>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00d      	beq.n	800ee96 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6818      	ldr	r0, [r3, #0]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6859      	ldr	r1, [r3, #4]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	689a      	ldr	r2, [r3, #8]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	2400      	movs	r4, #0
 800ee8c:	9400      	str	r4, [sp, #0]
 800ee8e:	f000 f9e1 	bl	800f254 <xQueueGenericCreateStatic>
 800ee92:	4603      	mov	r3, r0
 800ee94:	e008      	b.n	800eea8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6818      	ldr	r0, [r3, #0]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	4619      	mov	r1, r3
 800eea2:	f000 fa54 	bl	800f34e <xQueueGenericCreate>
 800eea6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd90      	pop	{r4, r7, pc}

0800eeb0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b086      	sub	sp, #24
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800eebc:	2300      	movs	r3, #0
 800eebe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d101      	bne.n	800eece <osMessagePut+0x1e>
    ticks = 1;
 800eeca:	2301      	movs	r3, #1
 800eecc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800eece:	f7ff ff32 	bl	800ed36 <inHandlerMode>
 800eed2:	4603      	mov	r3, r0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d018      	beq.n	800ef0a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800eed8:	f107 0210 	add.w	r2, r7, #16
 800eedc:	f107 0108 	add.w	r1, r7, #8
 800eee0:	2300      	movs	r3, #0
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f000 fb90 	bl	800f608 <xQueueGenericSendFromISR>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d001      	beq.n	800eef2 <osMessagePut+0x42>
      return osErrorOS;
 800eeee:	23ff      	movs	r3, #255	@ 0xff
 800eef0:	e018      	b.n	800ef24 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d014      	beq.n	800ef22 <osMessagePut+0x72>
 800eef8:	4b0c      	ldr	r3, [pc, #48]	@ (800ef2c <osMessagePut+0x7c>)
 800eefa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eefe:	601a      	str	r2, [r3, #0]
 800ef00:	f3bf 8f4f 	dsb	sy
 800ef04:	f3bf 8f6f 	isb	sy
 800ef08:	e00b      	b.n	800ef22 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ef0a:	f107 0108 	add.w	r1, r7, #8
 800ef0e:	2300      	movs	r3, #0
 800ef10:	697a      	ldr	r2, [r7, #20]
 800ef12:	68f8      	ldr	r0, [r7, #12]
 800ef14:	f000 fa76 	bl	800f404 <xQueueGenericSend>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d001      	beq.n	800ef22 <osMessagePut+0x72>
      return osErrorOS;
 800ef1e:	23ff      	movs	r3, #255	@ 0xff
 800ef20:	e000      	b.n	800ef24 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ef22:	2300      	movs	r3, #0
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3718      	adds	r7, #24
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	e000ed04 	.word	0xe000ed04

0800ef30 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ef30:	b590      	push	{r4, r7, lr}
 800ef32:	b08b      	sub	sp, #44	@ 0x2c
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ef40:	2300      	movs	r3, #0
 800ef42:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d10a      	bne.n	800ef60 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ef4a:	2380      	movs	r3, #128	@ 0x80
 800ef4c:	617b      	str	r3, [r7, #20]
    return event;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	461c      	mov	r4, r3
 800ef52:	f107 0314 	add.w	r3, r7, #20
 800ef56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ef5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ef5e:	e054      	b.n	800f00a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ef60:	2300      	movs	r3, #0
 800ef62:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ef64:	2300      	movs	r3, #0
 800ef66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef6e:	d103      	bne.n	800ef78 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ef70:	f04f 33ff 	mov.w	r3, #4294967295
 800ef74:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef76:	e009      	b.n	800ef8c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d006      	beq.n	800ef8c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800ef82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d101      	bne.n	800ef8c <osMessageGet+0x5c>
      ticks = 1;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ef8c:	f7ff fed3 	bl	800ed36 <inHandlerMode>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d01c      	beq.n	800efd0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ef96:	f107 0220 	add.w	r2, r7, #32
 800ef9a:	f107 0314 	add.w	r3, r7, #20
 800ef9e:	3304      	adds	r3, #4
 800efa0:	4619      	mov	r1, r3
 800efa2:	68b8      	ldr	r0, [r7, #8]
 800efa4:	f000 fcb0 	bl	800f908 <xQueueReceiveFromISR>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d102      	bne.n	800efb4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800efae:	2310      	movs	r3, #16
 800efb0:	617b      	str	r3, [r7, #20]
 800efb2:	e001      	b.n	800efb8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800efb4:	2300      	movs	r3, #0
 800efb6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800efb8:	6a3b      	ldr	r3, [r7, #32]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d01d      	beq.n	800effa <osMessageGet+0xca>
 800efbe:	4b15      	ldr	r3, [pc, #84]	@ (800f014 <osMessageGet+0xe4>)
 800efc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efc4:	601a      	str	r2, [r3, #0]
 800efc6:	f3bf 8f4f 	dsb	sy
 800efca:	f3bf 8f6f 	isb	sy
 800efce:	e014      	b.n	800effa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800efd0:	f107 0314 	add.w	r3, r7, #20
 800efd4:	3304      	adds	r3, #4
 800efd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efd8:	4619      	mov	r1, r3
 800efda:	68b8      	ldr	r0, [r7, #8]
 800efdc:	f000 fbb2 	bl	800f744 <xQueueReceive>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d102      	bne.n	800efec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800efe6:	2310      	movs	r3, #16
 800efe8:	617b      	str	r3, [r7, #20]
 800efea:	e006      	b.n	800effa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800efec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d101      	bne.n	800eff6 <osMessageGet+0xc6>
 800eff2:	2300      	movs	r3, #0
 800eff4:	e000      	b.n	800eff8 <osMessageGet+0xc8>
 800eff6:	2340      	movs	r3, #64	@ 0x40
 800eff8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	461c      	mov	r4, r3
 800effe:	f107 0314 	add.w	r3, r7, #20
 800f002:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f006:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	372c      	adds	r7, #44	@ 0x2c
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd90      	pop	{r4, r7, pc}
 800f012:	bf00      	nop
 800f014:	e000ed04 	.word	0xe000ed04

0800f018 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f103 0208 	add.w	r2, r3, #8
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f04f 32ff 	mov.w	r2, #4294967295
 800f030:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f103 0208 	add.w	r2, r3, #8
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f103 0208 	add.w	r2, r3, #8
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2200      	movs	r2, #0
 800f04a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f066:	bf00      	nop
 800f068:	370c      	adds	r7, #12
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr

0800f072 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f072:	b480      	push	{r7}
 800f074:	b085      	sub	sp, #20
 800f076:	af00      	add	r7, sp, #0
 800f078:	6078      	str	r0, [r7, #4]
 800f07a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	68fa      	ldr	r2, [r7, #12]
 800f086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	689a      	ldr	r2, [r3, #8]
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	689b      	ldr	r3, [r3, #8]
 800f094:	683a      	ldr	r2, [r7, #0]
 800f096:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	683a      	ldr	r2, [r7, #0]
 800f09c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	1c5a      	adds	r2, r3, #1
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	601a      	str	r2, [r3, #0]
}
 800f0ae:	bf00      	nop
 800f0b0:	3714      	adds	r7, #20
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr

0800f0ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f0ba:	b480      	push	{r7}
 800f0bc:	b085      	sub	sp, #20
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
 800f0c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d0:	d103      	bne.n	800f0da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	691b      	ldr	r3, [r3, #16]
 800f0d6:	60fb      	str	r3, [r7, #12]
 800f0d8:	e00c      	b.n	800f0f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	3308      	adds	r3, #8
 800f0de:	60fb      	str	r3, [r7, #12]
 800f0e0:	e002      	b.n	800f0e8 <vListInsert+0x2e>
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	60fb      	str	r3, [r7, #12]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	68ba      	ldr	r2, [r7, #8]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d2f6      	bcs.n	800f0e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	685a      	ldr	r2, [r3, #4]
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	683a      	ldr	r2, [r7, #0]
 800f102:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	683a      	ldr	r2, [r7, #0]
 800f10e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	1c5a      	adds	r2, r3, #1
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	601a      	str	r2, [r3, #0]
}
 800f120:	bf00      	nop
 800f122:	3714      	adds	r7, #20
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f12c:	b480      	push	{r7}
 800f12e:	b085      	sub	sp, #20
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	691b      	ldr	r3, [r3, #16]
 800f138:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	6892      	ldr	r2, [r2, #8]
 800f142:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	689b      	ldr	r3, [r3, #8]
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	6852      	ldr	r2, [r2, #4]
 800f14c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	429a      	cmp	r2, r3
 800f156:	d103      	bne.n	800f160 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	689a      	ldr	r2, [r3, #8]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	1e5a      	subs	r2, r3, #1
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
}
 800f174:	4618      	mov	r0, r3
 800f176:	3714      	adds	r7, #20
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d10b      	bne.n	800f1ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f198:	f383 8811 	msr	BASEPRI, r3
 800f19c:	f3bf 8f6f 	isb	sy
 800f1a0:	f3bf 8f4f 	dsb	sy
 800f1a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f1a6:	bf00      	nop
 800f1a8:	bf00      	nop
 800f1aa:	e7fd      	b.n	800f1a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f1ac:	f001 fda4 	bl	8010cf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1b8:	68f9      	ldr	r1, [r7, #12]
 800f1ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f1bc:	fb01 f303 	mul.w	r3, r1, r3
 800f1c0:	441a      	add	r2, r3
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	68f9      	ldr	r1, [r7, #12]
 800f1e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f1e2:	fb01 f303 	mul.w	r3, r1, r3
 800f1e6:	441a      	add	r2, r3
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	22ff      	movs	r2, #255	@ 0xff
 800f1f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	22ff      	movs	r2, #255	@ 0xff
 800f1f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d114      	bne.n	800f22c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	691b      	ldr	r3, [r3, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d01a      	beq.n	800f240 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	3310      	adds	r3, #16
 800f20e:	4618      	mov	r0, r3
 800f210:	f001 f976 	bl	8010500 <xTaskRemoveFromEventList>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d012      	beq.n	800f240 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f21a:	4b0d      	ldr	r3, [pc, #52]	@ (800f250 <xQueueGenericReset+0xd0>)
 800f21c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f220:	601a      	str	r2, [r3, #0]
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	f3bf 8f6f 	isb	sy
 800f22a:	e009      	b.n	800f240 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3310      	adds	r3, #16
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff fef1 	bl	800f018 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	3324      	adds	r3, #36	@ 0x24
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7ff feec 	bl	800f018 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f240:	f001 fd8c 	bl	8010d5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f244:	2301      	movs	r3, #1
}
 800f246:	4618      	mov	r0, r3
 800f248:	3710      	adds	r7, #16
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	e000ed04 	.word	0xe000ed04

0800f254 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f254:	b580      	push	{r7, lr}
 800f256:	b08e      	sub	sp, #56	@ 0x38
 800f258:	af02      	add	r7, sp, #8
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d10b      	bne.n	800f280 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f26c:	f383 8811 	msr	BASEPRI, r3
 800f270:	f3bf 8f6f 	isb	sy
 800f274:	f3bf 8f4f 	dsb	sy
 800f278:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f27a:	bf00      	nop
 800f27c:	bf00      	nop
 800f27e:	e7fd      	b.n	800f27c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d10b      	bne.n	800f29e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f28a:	f383 8811 	msr	BASEPRI, r3
 800f28e:	f3bf 8f6f 	isb	sy
 800f292:	f3bf 8f4f 	dsb	sy
 800f296:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f298:	bf00      	nop
 800f29a:	bf00      	nop
 800f29c:	e7fd      	b.n	800f29a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d002      	beq.n	800f2aa <xQueueGenericCreateStatic+0x56>
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d001      	beq.n	800f2ae <xQueueGenericCreateStatic+0x5a>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e000      	b.n	800f2b0 <xQueueGenericCreateStatic+0x5c>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d10b      	bne.n	800f2cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b8:	f383 8811 	msr	BASEPRI, r3
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f3bf 8f4f 	dsb	sy
 800f2c4:	623b      	str	r3, [r7, #32]
}
 800f2c6:	bf00      	nop
 800f2c8:	bf00      	nop
 800f2ca:	e7fd      	b.n	800f2c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d102      	bne.n	800f2d8 <xQueueGenericCreateStatic+0x84>
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d101      	bne.n	800f2dc <xQueueGenericCreateStatic+0x88>
 800f2d8:	2301      	movs	r3, #1
 800f2da:	e000      	b.n	800f2de <xQueueGenericCreateStatic+0x8a>
 800f2dc:	2300      	movs	r3, #0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d10b      	bne.n	800f2fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2e6:	f383 8811 	msr	BASEPRI, r3
 800f2ea:	f3bf 8f6f 	isb	sy
 800f2ee:	f3bf 8f4f 	dsb	sy
 800f2f2:	61fb      	str	r3, [r7, #28]
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop
 800f2f8:	e7fd      	b.n	800f2f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f2fa:	2348      	movs	r3, #72	@ 0x48
 800f2fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	2b48      	cmp	r3, #72	@ 0x48
 800f302:	d00b      	beq.n	800f31c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	61bb      	str	r3, [r7, #24]
}
 800f316:	bf00      	nop
 800f318:	bf00      	nop
 800f31a:	e7fd      	b.n	800f318 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f31c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00d      	beq.n	800f344 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f32a:	2201      	movs	r2, #1
 800f32c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f330:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f336:	9300      	str	r3, [sp, #0]
 800f338:	4613      	mov	r3, r2
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	68b9      	ldr	r1, [r7, #8]
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	f000 f840 	bl	800f3c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f346:	4618      	mov	r0, r3
 800f348:	3730      	adds	r7, #48	@ 0x30
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}

0800f34e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f34e:	b580      	push	{r7, lr}
 800f350:	b08a      	sub	sp, #40	@ 0x28
 800f352:	af02      	add	r7, sp, #8
 800f354:	60f8      	str	r0, [r7, #12]
 800f356:	60b9      	str	r1, [r7, #8]
 800f358:	4613      	mov	r3, r2
 800f35a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d10b      	bne.n	800f37a <xQueueGenericCreate+0x2c>
	__asm volatile
 800f362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f366:	f383 8811 	msr	BASEPRI, r3
 800f36a:	f3bf 8f6f 	isb	sy
 800f36e:	f3bf 8f4f 	dsb	sy
 800f372:	613b      	str	r3, [r7, #16]
}
 800f374:	bf00      	nop
 800f376:	bf00      	nop
 800f378:	e7fd      	b.n	800f376 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	68ba      	ldr	r2, [r7, #8]
 800f37e:	fb02 f303 	mul.w	r3, r2, r3
 800f382:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	3348      	adds	r3, #72	@ 0x48
 800f388:	4618      	mov	r0, r3
 800f38a:	f001 fdd7 	bl	8010f3c <pvPortMalloc>
 800f38e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f390:	69bb      	ldr	r3, [r7, #24]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d011      	beq.n	800f3ba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	3348      	adds	r3, #72	@ 0x48
 800f39e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f3a8:	79fa      	ldrb	r2, [r7, #7]
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	9300      	str	r3, [sp, #0]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	697a      	ldr	r2, [r7, #20]
 800f3b2:	68b9      	ldr	r1, [r7, #8]
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f000 f805 	bl	800f3c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f3ba:	69bb      	ldr	r3, [r7, #24]
	}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3720      	adds	r7, #32
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
 800f3d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d103      	bne.n	800f3e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f3d8:	69bb      	ldr	r3, [r7, #24]
 800f3da:	69ba      	ldr	r2, [r7, #24]
 800f3dc:	601a      	str	r2, [r3, #0]
 800f3de:	e002      	b.n	800f3e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	68fa      	ldr	r2, [r7, #12]
 800f3ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	68ba      	ldr	r2, [r7, #8]
 800f3f0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f3f2:	2101      	movs	r1, #1
 800f3f4:	69b8      	ldr	r0, [r7, #24]
 800f3f6:	f7ff fec3 	bl	800f180 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f3fa:	bf00      	nop
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
	...

0800f404 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b08e      	sub	sp, #56	@ 0x38
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	607a      	str	r2, [r7, #4]
 800f410:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f412:	2300      	movs	r3, #0
 800f414:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d10b      	bne.n	800f438 <xQueueGenericSend+0x34>
	__asm volatile
 800f420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f424:	f383 8811 	msr	BASEPRI, r3
 800f428:	f3bf 8f6f 	isb	sy
 800f42c:	f3bf 8f4f 	dsb	sy
 800f430:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f432:	bf00      	nop
 800f434:	bf00      	nop
 800f436:	e7fd      	b.n	800f434 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d103      	bne.n	800f446 <xQueueGenericSend+0x42>
 800f43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f442:	2b00      	cmp	r3, #0
 800f444:	d101      	bne.n	800f44a <xQueueGenericSend+0x46>
 800f446:	2301      	movs	r3, #1
 800f448:	e000      	b.n	800f44c <xQueueGenericSend+0x48>
 800f44a:	2300      	movs	r3, #0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d10b      	bne.n	800f468 <xQueueGenericSend+0x64>
	__asm volatile
 800f450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f454:	f383 8811 	msr	BASEPRI, r3
 800f458:	f3bf 8f6f 	isb	sy
 800f45c:	f3bf 8f4f 	dsb	sy
 800f460:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f462:	bf00      	nop
 800f464:	bf00      	nop
 800f466:	e7fd      	b.n	800f464 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	2b02      	cmp	r3, #2
 800f46c:	d103      	bne.n	800f476 <xQueueGenericSend+0x72>
 800f46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f472:	2b01      	cmp	r3, #1
 800f474:	d101      	bne.n	800f47a <xQueueGenericSend+0x76>
 800f476:	2301      	movs	r3, #1
 800f478:	e000      	b.n	800f47c <xQueueGenericSend+0x78>
 800f47a:	2300      	movs	r3, #0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d10b      	bne.n	800f498 <xQueueGenericSend+0x94>
	__asm volatile
 800f480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	623b      	str	r3, [r7, #32]
}
 800f492:	bf00      	nop
 800f494:	bf00      	nop
 800f496:	e7fd      	b.n	800f494 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f498:	f001 f9f4 	bl	8010884 <xTaskGetSchedulerState>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d102      	bne.n	800f4a8 <xQueueGenericSend+0xa4>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d101      	bne.n	800f4ac <xQueueGenericSend+0xa8>
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	e000      	b.n	800f4ae <xQueueGenericSend+0xaa>
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d10b      	bne.n	800f4ca <xQueueGenericSend+0xc6>
	__asm volatile
 800f4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4b6:	f383 8811 	msr	BASEPRI, r3
 800f4ba:	f3bf 8f6f 	isb	sy
 800f4be:	f3bf 8f4f 	dsb	sy
 800f4c2:	61fb      	str	r3, [r7, #28]
}
 800f4c4:	bf00      	nop
 800f4c6:	bf00      	nop
 800f4c8:	e7fd      	b.n	800f4c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f4ca:	f001 fc15 	bl	8010cf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d302      	bcc.n	800f4e0 <xQueueGenericSend+0xdc>
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	d129      	bne.n	800f534 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4e0:	683a      	ldr	r2, [r7, #0]
 800f4e2:	68b9      	ldr	r1, [r7, #8]
 800f4e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f4e6:	f000 fa91 	bl	800fa0c <prvCopyDataToQueue>
 800f4ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d010      	beq.n	800f516 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f6:	3324      	adds	r3, #36	@ 0x24
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f001 f801 	bl	8010500 <xTaskRemoveFromEventList>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d013      	beq.n	800f52c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f504:	4b3f      	ldr	r3, [pc, #252]	@ (800f604 <xQueueGenericSend+0x200>)
 800f506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f50a:	601a      	str	r2, [r3, #0]
 800f50c:	f3bf 8f4f 	dsb	sy
 800f510:	f3bf 8f6f 	isb	sy
 800f514:	e00a      	b.n	800f52c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d007      	beq.n	800f52c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f51c:	4b39      	ldr	r3, [pc, #228]	@ (800f604 <xQueueGenericSend+0x200>)
 800f51e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f522:	601a      	str	r2, [r3, #0]
 800f524:	f3bf 8f4f 	dsb	sy
 800f528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f52c:	f001 fc16 	bl	8010d5c <vPortExitCritical>
				return pdPASS;
 800f530:	2301      	movs	r3, #1
 800f532:	e063      	b.n	800f5fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d103      	bne.n	800f542 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f53a:	f001 fc0f 	bl	8010d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f53e:	2300      	movs	r3, #0
 800f540:	e05c      	b.n	800f5fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f544:	2b00      	cmp	r3, #0
 800f546:	d106      	bne.n	800f556 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f548:	f107 0314 	add.w	r3, r7, #20
 800f54c:	4618      	mov	r0, r3
 800f54e:	f001 f83b 	bl	80105c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f552:	2301      	movs	r3, #1
 800f554:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f556:	f001 fc01 	bl	8010d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f55a:	f000 fda1 	bl	80100a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f55e:	f001 fbcb 	bl	8010cf8 <vPortEnterCritical>
 800f562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f568:	b25b      	sxtb	r3, r3
 800f56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f56e:	d103      	bne.n	800f578 <xQueueGenericSend+0x174>
 800f570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f572:	2200      	movs	r2, #0
 800f574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f57a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f57e:	b25b      	sxtb	r3, r3
 800f580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f584:	d103      	bne.n	800f58e <xQueueGenericSend+0x18a>
 800f586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f588:	2200      	movs	r2, #0
 800f58a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f58e:	f001 fbe5 	bl	8010d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f592:	1d3a      	adds	r2, r7, #4
 800f594:	f107 0314 	add.w	r3, r7, #20
 800f598:	4611      	mov	r1, r2
 800f59a:	4618      	mov	r0, r3
 800f59c:	f001 f82a 	bl	80105f4 <xTaskCheckForTimeOut>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d124      	bne.n	800f5f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f5a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5a8:	f000 fb28 	bl	800fbfc <prvIsQueueFull>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d018      	beq.n	800f5e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b4:	3310      	adds	r3, #16
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	4611      	mov	r1, r2
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f000 ff7a 	bl	80104b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f5c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5c2:	f000 fab3 	bl	800fb2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f5c6:	f000 fd79 	bl	80100bc <xTaskResumeAll>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	f47f af7c 	bne.w	800f4ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800f604 <xQueueGenericSend+0x200>)
 800f5d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	f3bf 8f6f 	isb	sy
 800f5e2:	e772      	b.n	800f4ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f5e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5e6:	f000 faa1 	bl	800fb2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f5ea:	f000 fd67 	bl	80100bc <xTaskResumeAll>
 800f5ee:	e76c      	b.n	800f4ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f5f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f5f2:	f000 fa9b 	bl	800fb2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f5f6:	f000 fd61 	bl	80100bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f5fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3738      	adds	r7, #56	@ 0x38
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	e000ed04 	.word	0xe000ed04

0800f608 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b090      	sub	sp, #64	@ 0x40
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	607a      	str	r2, [r7, #4]
 800f614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d10b      	bne.n	800f638 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f624:	f383 8811 	msr	BASEPRI, r3
 800f628:	f3bf 8f6f 	isb	sy
 800f62c:	f3bf 8f4f 	dsb	sy
 800f630:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f632:	bf00      	nop
 800f634:	bf00      	nop
 800f636:	e7fd      	b.n	800f634 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d103      	bne.n	800f646 <xQueueGenericSendFromISR+0x3e>
 800f63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f642:	2b00      	cmp	r3, #0
 800f644:	d101      	bne.n	800f64a <xQueueGenericSendFromISR+0x42>
 800f646:	2301      	movs	r3, #1
 800f648:	e000      	b.n	800f64c <xQueueGenericSendFromISR+0x44>
 800f64a:	2300      	movs	r3, #0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d10b      	bne.n	800f668 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f654:	f383 8811 	msr	BASEPRI, r3
 800f658:	f3bf 8f6f 	isb	sy
 800f65c:	f3bf 8f4f 	dsb	sy
 800f660:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f662:	bf00      	nop
 800f664:	bf00      	nop
 800f666:	e7fd      	b.n	800f664 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	2b02      	cmp	r3, #2
 800f66c:	d103      	bne.n	800f676 <xQueueGenericSendFromISR+0x6e>
 800f66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f672:	2b01      	cmp	r3, #1
 800f674:	d101      	bne.n	800f67a <xQueueGenericSendFromISR+0x72>
 800f676:	2301      	movs	r3, #1
 800f678:	e000      	b.n	800f67c <xQueueGenericSendFromISR+0x74>
 800f67a:	2300      	movs	r3, #0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10b      	bne.n	800f698 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	623b      	str	r3, [r7, #32]
}
 800f692:	bf00      	nop
 800f694:	bf00      	nop
 800f696:	e7fd      	b.n	800f694 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f698:	f001 fc0e 	bl	8010eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f69c:	f3ef 8211 	mrs	r2, BASEPRI
 800f6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a4:	f383 8811 	msr	BASEPRI, r3
 800f6a8:	f3bf 8f6f 	isb	sy
 800f6ac:	f3bf 8f4f 	dsb	sy
 800f6b0:	61fa      	str	r2, [r7, #28]
 800f6b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f6b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f6b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d302      	bcc.n	800f6ca <xQueueGenericSendFromISR+0xc2>
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	2b02      	cmp	r3, #2
 800f6c8:	d12f      	bne.n	800f72a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f6d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f6da:	683a      	ldr	r2, [r7, #0]
 800f6dc:	68b9      	ldr	r1, [r7, #8]
 800f6de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f6e0:	f000 f994 	bl	800fa0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f6e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ec:	d112      	bne.n	800f714 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d016      	beq.n	800f724 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f8:	3324      	adds	r3, #36	@ 0x24
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f000 ff00 	bl	8010500 <xTaskRemoveFromEventList>
 800f700:	4603      	mov	r3, r0
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00e      	beq.n	800f724 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00b      	beq.n	800f724 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2201      	movs	r2, #1
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	e007      	b.n	800f724 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f714:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f718:	3301      	adds	r3, #1
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	b25a      	sxtb	r2, r3
 800f71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f724:	2301      	movs	r3, #1
 800f726:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f728:	e001      	b.n	800f72e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f72a:	2300      	movs	r3, #0
 800f72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f72e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f730:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f738:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f73a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3740      	adds	r7, #64	@ 0x40
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b08c      	sub	sp, #48	@ 0x30
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f750:	2300      	movs	r3, #0
 800f752:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d10b      	bne.n	800f776 <xQueueReceive+0x32>
	__asm volatile
 800f75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f762:	f383 8811 	msr	BASEPRI, r3
 800f766:	f3bf 8f6f 	isb	sy
 800f76a:	f3bf 8f4f 	dsb	sy
 800f76e:	623b      	str	r3, [r7, #32]
}
 800f770:	bf00      	nop
 800f772:	bf00      	nop
 800f774:	e7fd      	b.n	800f772 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d103      	bne.n	800f784 <xQueueReceive+0x40>
 800f77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f780:	2b00      	cmp	r3, #0
 800f782:	d101      	bne.n	800f788 <xQueueReceive+0x44>
 800f784:	2301      	movs	r3, #1
 800f786:	e000      	b.n	800f78a <xQueueReceive+0x46>
 800f788:	2300      	movs	r3, #0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d10b      	bne.n	800f7a6 <xQueueReceive+0x62>
	__asm volatile
 800f78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f792:	f383 8811 	msr	BASEPRI, r3
 800f796:	f3bf 8f6f 	isb	sy
 800f79a:	f3bf 8f4f 	dsb	sy
 800f79e:	61fb      	str	r3, [r7, #28]
}
 800f7a0:	bf00      	nop
 800f7a2:	bf00      	nop
 800f7a4:	e7fd      	b.n	800f7a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f7a6:	f001 f86d 	bl	8010884 <xTaskGetSchedulerState>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d102      	bne.n	800f7b6 <xQueueReceive+0x72>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d101      	bne.n	800f7ba <xQueueReceive+0x76>
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e000      	b.n	800f7bc <xQueueReceive+0x78>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d10b      	bne.n	800f7d8 <xQueueReceive+0x94>
	__asm volatile
 800f7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c4:	f383 8811 	msr	BASEPRI, r3
 800f7c8:	f3bf 8f6f 	isb	sy
 800f7cc:	f3bf 8f4f 	dsb	sy
 800f7d0:	61bb      	str	r3, [r7, #24]
}
 800f7d2:	bf00      	nop
 800f7d4:	bf00      	nop
 800f7d6:	e7fd      	b.n	800f7d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f7d8:	f001 fa8e 	bl	8010cf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d01f      	beq.n	800f828 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f7e8:	68b9      	ldr	r1, [r7, #8]
 800f7ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7ec:	f000 f978 	bl	800fae0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f2:	1e5a      	subs	r2, r3, #1
 800f7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7fa:	691b      	ldr	r3, [r3, #16]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00f      	beq.n	800f820 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f802:	3310      	adds	r3, #16
 800f804:	4618      	mov	r0, r3
 800f806:	f000 fe7b 	bl	8010500 <xTaskRemoveFromEventList>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d007      	beq.n	800f820 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f810:	4b3c      	ldr	r3, [pc, #240]	@ (800f904 <xQueueReceive+0x1c0>)
 800f812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f816:	601a      	str	r2, [r3, #0]
 800f818:	f3bf 8f4f 	dsb	sy
 800f81c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f820:	f001 fa9c 	bl	8010d5c <vPortExitCritical>
				return pdPASS;
 800f824:	2301      	movs	r3, #1
 800f826:	e069      	b.n	800f8fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d103      	bne.n	800f836 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f82e:	f001 fa95 	bl	8010d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f832:	2300      	movs	r3, #0
 800f834:	e062      	b.n	800f8fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d106      	bne.n	800f84a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f83c:	f107 0310 	add.w	r3, r7, #16
 800f840:	4618      	mov	r0, r3
 800f842:	f000 fec1 	bl	80105c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f846:	2301      	movs	r3, #1
 800f848:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f84a:	f001 fa87 	bl	8010d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f84e:	f000 fc27 	bl	80100a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f852:	f001 fa51 	bl	8010cf8 <vPortEnterCritical>
 800f856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f858:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f85c:	b25b      	sxtb	r3, r3
 800f85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f862:	d103      	bne.n	800f86c <xQueueReceive+0x128>
 800f864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f866:	2200      	movs	r2, #0
 800f868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f86e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f872:	b25b      	sxtb	r3, r3
 800f874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f878:	d103      	bne.n	800f882 <xQueueReceive+0x13e>
 800f87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f87c:	2200      	movs	r2, #0
 800f87e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f882:	f001 fa6b 	bl	8010d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f886:	1d3a      	adds	r2, r7, #4
 800f888:	f107 0310 	add.w	r3, r7, #16
 800f88c:	4611      	mov	r1, r2
 800f88e:	4618      	mov	r0, r3
 800f890:	f000 feb0 	bl	80105f4 <xTaskCheckForTimeOut>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d123      	bne.n	800f8e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f89a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f89c:	f000 f998 	bl	800fbd0 <prvIsQueueEmpty>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d017      	beq.n	800f8d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a8:	3324      	adds	r3, #36	@ 0x24
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	4611      	mov	r1, r2
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f000 fe00 	bl	80104b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f8b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8b6:	f000 f939 	bl	800fb2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f8ba:	f000 fbff 	bl	80100bc <xTaskResumeAll>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d189      	bne.n	800f7d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f8c4:	4b0f      	ldr	r3, [pc, #60]	@ (800f904 <xQueueReceive+0x1c0>)
 800f8c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8ca:	601a      	str	r2, [r3, #0]
 800f8cc:	f3bf 8f4f 	dsb	sy
 800f8d0:	f3bf 8f6f 	isb	sy
 800f8d4:	e780      	b.n	800f7d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f8d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8d8:	f000 f928 	bl	800fb2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f8dc:	f000 fbee 	bl	80100bc <xTaskResumeAll>
 800f8e0:	e77a      	b.n	800f7d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f8e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8e4:	f000 f922 	bl	800fb2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f8e8:	f000 fbe8 	bl	80100bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f8ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8ee:	f000 f96f 	bl	800fbd0 <prvIsQueueEmpty>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f43f af6f 	beq.w	800f7d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f8fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3730      	adds	r7, #48	@ 0x30
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	e000ed04 	.word	0xe000ed04

0800f908 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b08e      	sub	sp, #56	@ 0x38
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d10b      	bne.n	800f936 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800f91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f922:	f383 8811 	msr	BASEPRI, r3
 800f926:	f3bf 8f6f 	isb	sy
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	623b      	str	r3, [r7, #32]
}
 800f930:	bf00      	nop
 800f932:	bf00      	nop
 800f934:	e7fd      	b.n	800f932 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d103      	bne.n	800f944 <xQueueReceiveFromISR+0x3c>
 800f93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f93e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f940:	2b00      	cmp	r3, #0
 800f942:	d101      	bne.n	800f948 <xQueueReceiveFromISR+0x40>
 800f944:	2301      	movs	r3, #1
 800f946:	e000      	b.n	800f94a <xQueueReceiveFromISR+0x42>
 800f948:	2300      	movs	r3, #0
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d10b      	bne.n	800f966 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800f94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f952:	f383 8811 	msr	BASEPRI, r3
 800f956:	f3bf 8f6f 	isb	sy
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	61fb      	str	r3, [r7, #28]
}
 800f960:	bf00      	nop
 800f962:	bf00      	nop
 800f964:	e7fd      	b.n	800f962 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f966:	f001 faa7 	bl	8010eb8 <vPortValidateInterruptPriority>
	__asm volatile
 800f96a:	f3ef 8211 	mrs	r2, BASEPRI
 800f96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f972:	f383 8811 	msr	BASEPRI, r3
 800f976:	f3bf 8f6f 	isb	sy
 800f97a:	f3bf 8f4f 	dsb	sy
 800f97e:	61ba      	str	r2, [r7, #24]
 800f980:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f982:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f984:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f98a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d02f      	beq.n	800f9f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f994:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f99c:	68b9      	ldr	r1, [r7, #8]
 800f99e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9a0:	f000 f89e 	bl	800fae0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9a6:	1e5a      	subs	r2, r3, #1
 800f9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f9ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9b4:	d112      	bne.n	800f9dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9b8:	691b      	ldr	r3, [r3, #16]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d016      	beq.n	800f9ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9c0:	3310      	adds	r3, #16
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f000 fd9c 	bl	8010500 <xTaskRemoveFromEventList>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d00e      	beq.n	800f9ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d00b      	beq.n	800f9ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	601a      	str	r2, [r3, #0]
 800f9da:	e007      	b.n	800f9ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	b25a      	sxtb	r2, r3
 800f9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9f0:	e001      	b.n	800f9f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	f383 8811 	msr	BASEPRI, r3
}
 800fa00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fa02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3738      	adds	r7, #56	@ 0x38
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b086      	sub	sp, #24
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	60f8      	str	r0, [r7, #12]
 800fa14:	60b9      	str	r1, [r7, #8]
 800fa16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d10d      	bne.n	800fa46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d14d      	bne.n	800face <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	4618      	mov	r0, r3
 800fa38:	f000 ff42 	bl	80108c0 <xTaskPriorityDisinherit>
 800fa3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2200      	movs	r2, #0
 800fa42:	609a      	str	r2, [r3, #8]
 800fa44:	e043      	b.n	800face <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d119      	bne.n	800fa80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	6858      	ldr	r0, [r3, #4]
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa54:	461a      	mov	r2, r3
 800fa56:	68b9      	ldr	r1, [r7, #8]
 800fa58:	f002 f86a 	bl	8011b30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	685a      	ldr	r2, [r3, #4]
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa64:	441a      	add	r2, r3
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	685a      	ldr	r2, [r3, #4]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	689b      	ldr	r3, [r3, #8]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d32b      	bcc.n	800face <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	605a      	str	r2, [r3, #4]
 800fa7e:	e026      	b.n	800face <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	68d8      	ldr	r0, [r3, #12]
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa88:	461a      	mov	r2, r3
 800fa8a:	68b9      	ldr	r1, [r7, #8]
 800fa8c:	f002 f850 	bl	8011b30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	68da      	ldr	r2, [r3, #12]
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa98:	425b      	negs	r3, r3
 800fa9a:	441a      	add	r2, r3
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	68da      	ldr	r2, [r3, #12]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d207      	bcs.n	800fabc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	689a      	ldr	r2, [r3, #8]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fab4:	425b      	negs	r3, r3
 800fab6:	441a      	add	r2, r3
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d105      	bne.n	800face <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d002      	beq.n	800face <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	3b01      	subs	r3, #1
 800facc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	1c5a      	adds	r2, r3, #1
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fad6:	697b      	ldr	r3, [r7, #20]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3718      	adds	r7, #24
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d018      	beq.n	800fb24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	68da      	ldr	r2, [r3, #12]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fafa:	441a      	add	r2, r3
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	68da      	ldr	r2, [r3, #12]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	689b      	ldr	r3, [r3, #8]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d303      	bcc.n	800fb14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	68d9      	ldr	r1, [r3, #12]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	6838      	ldr	r0, [r7, #0]
 800fb20:	f002 f806 	bl	8011b30 <memcpy>
	}
}
 800fb24:	bf00      	nop
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fb34:	f001 f8e0 	bl	8010cf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb40:	e011      	b.n	800fb66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d012      	beq.n	800fb70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	3324      	adds	r3, #36	@ 0x24
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f000 fcd6 	bl	8010500 <xTaskRemoveFromEventList>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d001      	beq.n	800fb5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fb5a:	f000 fdaf 	bl	80106bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fb5e:	7bfb      	ldrb	r3, [r7, #15]
 800fb60:	3b01      	subs	r3, #1
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	dce9      	bgt.n	800fb42 <prvUnlockQueue+0x16>
 800fb6e:	e000      	b.n	800fb72 <prvUnlockQueue+0x46>
					break;
 800fb70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	22ff      	movs	r2, #255	@ 0xff
 800fb76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800fb7a:	f001 f8ef 	bl	8010d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fb7e:	f001 f8bb 	bl	8010cf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fb88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb8a:	e011      	b.n	800fbb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d012      	beq.n	800fbba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	3310      	adds	r3, #16
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f000 fcb1 	bl	8010500 <xTaskRemoveFromEventList>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d001      	beq.n	800fba8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fba4:	f000 fd8a 	bl	80106bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fba8:	7bbb      	ldrb	r3, [r7, #14]
 800fbaa:	3b01      	subs	r3, #1
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fbb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	dce9      	bgt.n	800fb8c <prvUnlockQueue+0x60>
 800fbb8:	e000      	b.n	800fbbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fbba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	22ff      	movs	r2, #255	@ 0xff
 800fbc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800fbc4:	f001 f8ca 	bl	8010d5c <vPortExitCritical>
}
 800fbc8:	bf00      	nop
 800fbca:	3710      	adds	r7, #16
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fbd8:	f001 f88e 	bl	8010cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d102      	bne.n	800fbea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	60fb      	str	r3, [r7, #12]
 800fbe8:	e001      	b.n	800fbee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fbea:	2300      	movs	r3, #0
 800fbec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fbee:	f001 f8b5 	bl	8010d5c <vPortExitCritical>

	return xReturn;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc04:	f001 f878 	bl	8010cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d102      	bne.n	800fc1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fc14:	2301      	movs	r3, #1
 800fc16:	60fb      	str	r3, [r7, #12]
 800fc18:	e001      	b.n	800fc1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fc1e:	f001 f89d 	bl	8010d5c <vPortExitCritical>

	return xReturn;
 800fc22:	68fb      	ldr	r3, [r7, #12]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3710      	adds	r7, #16
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b08e      	sub	sp, #56	@ 0x38
 800fc30:	af04      	add	r7, sp, #16
 800fc32:	60f8      	str	r0, [r7, #12]
 800fc34:	60b9      	str	r1, [r7, #8]
 800fc36:	607a      	str	r2, [r7, #4]
 800fc38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fc3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d10b      	bne.n	800fc58 <xTaskCreateStatic+0x2c>
	__asm volatile
 800fc40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc44:	f383 8811 	msr	BASEPRI, r3
 800fc48:	f3bf 8f6f 	isb	sy
 800fc4c:	f3bf 8f4f 	dsb	sy
 800fc50:	623b      	str	r3, [r7, #32]
}
 800fc52:	bf00      	nop
 800fc54:	bf00      	nop
 800fc56:	e7fd      	b.n	800fc54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d10b      	bne.n	800fc76 <xTaskCreateStatic+0x4a>
	__asm volatile
 800fc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc62:	f383 8811 	msr	BASEPRI, r3
 800fc66:	f3bf 8f6f 	isb	sy
 800fc6a:	f3bf 8f4f 	dsb	sy
 800fc6e:	61fb      	str	r3, [r7, #28]
}
 800fc70:	bf00      	nop
 800fc72:	bf00      	nop
 800fc74:	e7fd      	b.n	800fc72 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fc76:	2358      	movs	r3, #88	@ 0x58
 800fc78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	2b58      	cmp	r3, #88	@ 0x58
 800fc7e:	d00b      	beq.n	800fc98 <xTaskCreateStatic+0x6c>
	__asm volatile
 800fc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc84:	f383 8811 	msr	BASEPRI, r3
 800fc88:	f3bf 8f6f 	isb	sy
 800fc8c:	f3bf 8f4f 	dsb	sy
 800fc90:	61bb      	str	r3, [r7, #24]
}
 800fc92:	bf00      	nop
 800fc94:	bf00      	nop
 800fc96:	e7fd      	b.n	800fc94 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fc98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d01e      	beq.n	800fcde <xTaskCreateStatic+0xb2>
 800fca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d01b      	beq.n	800fcde <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fcae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb2:	2202      	movs	r2, #2
 800fcb4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fcb8:	2300      	movs	r3, #0
 800fcba:	9303      	str	r3, [sp, #12]
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcbe:	9302      	str	r3, [sp, #8]
 800fcc0:	f107 0314 	add.w	r3, r7, #20
 800fcc4:	9301      	str	r3, [sp, #4]
 800fcc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcc8:	9300      	str	r3, [sp, #0]
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	68b9      	ldr	r1, [r7, #8]
 800fcd0:	68f8      	ldr	r0, [r7, #12]
 800fcd2:	f000 f850 	bl	800fd76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fcd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fcd8:	f000 f8e0 	bl	800fe9c <prvAddNewTaskToReadyList>
 800fcdc:	e001      	b.n	800fce2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800fcde:	2300      	movs	r3, #0
 800fce0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fce2:	697b      	ldr	r3, [r7, #20]
	}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3728      	adds	r7, #40	@ 0x28
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b08c      	sub	sp, #48	@ 0x30
 800fcf0:	af04      	add	r7, sp, #16
 800fcf2:	60f8      	str	r0, [r7, #12]
 800fcf4:	60b9      	str	r1, [r7, #8]
 800fcf6:	603b      	str	r3, [r7, #0]
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fcfc:	88fb      	ldrh	r3, [r7, #6]
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	4618      	mov	r0, r3
 800fd02:	f001 f91b 	bl	8010f3c <pvPortMalloc>
 800fd06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d00e      	beq.n	800fd2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fd0e:	2058      	movs	r0, #88	@ 0x58
 800fd10:	f001 f914 	bl	8010f3c <pvPortMalloc>
 800fd14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d003      	beq.n	800fd24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	697a      	ldr	r2, [r7, #20]
 800fd20:	631a      	str	r2, [r3, #48]	@ 0x30
 800fd22:	e005      	b.n	800fd30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fd24:	6978      	ldr	r0, [r7, #20]
 800fd26:	f001 f9dd 	bl	80110e4 <vPortFree>
 800fd2a:	e001      	b.n	800fd30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fd30:	69fb      	ldr	r3, [r7, #28]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d017      	beq.n	800fd66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fd3e:	88fa      	ldrh	r2, [r7, #6]
 800fd40:	2300      	movs	r3, #0
 800fd42:	9303      	str	r3, [sp, #12]
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	9302      	str	r3, [sp, #8]
 800fd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd4a:	9301      	str	r3, [sp, #4]
 800fd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	68b9      	ldr	r1, [r7, #8]
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f000 f80e 	bl	800fd76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fd5a:	69f8      	ldr	r0, [r7, #28]
 800fd5c:	f000 f89e 	bl	800fe9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fd60:	2301      	movs	r3, #1
 800fd62:	61bb      	str	r3, [r7, #24]
 800fd64:	e002      	b.n	800fd6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fd66:	f04f 33ff 	mov.w	r3, #4294967295
 800fd6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fd6c:	69bb      	ldr	r3, [r7, #24]
	}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3720      	adds	r7, #32
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b088      	sub	sp, #32
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	60f8      	str	r0, [r7, #12]
 800fd7e:	60b9      	str	r1, [r7, #8]
 800fd80:	607a      	str	r2, [r7, #4]
 800fd82:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd86:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	21a5      	movs	r1, #165	@ 0xa5
 800fd90:	f001 fe8a 	bl	8011aa8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fd9e:	3b01      	subs	r3, #1
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	4413      	add	r3, r2
 800fda4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	f023 0307 	bic.w	r3, r3, #7
 800fdac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fdae:	69bb      	ldr	r3, [r7, #24]
 800fdb0:	f003 0307 	and.w	r3, r3, #7
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d00b      	beq.n	800fdd0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800fdb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdbc:	f383 8811 	msr	BASEPRI, r3
 800fdc0:	f3bf 8f6f 	isb	sy
 800fdc4:	f3bf 8f4f 	dsb	sy
 800fdc8:	617b      	str	r3, [r7, #20]
}
 800fdca:	bf00      	nop
 800fdcc:	bf00      	nop
 800fdce:	e7fd      	b.n	800fdcc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d01f      	beq.n	800fe16 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	61fb      	str	r3, [r7, #28]
 800fdda:	e012      	b.n	800fe02 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fddc:	68ba      	ldr	r2, [r7, #8]
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	4413      	add	r3, r2
 800fde2:	7819      	ldrb	r1, [r3, #0]
 800fde4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	4413      	add	r3, r2
 800fdea:	3334      	adds	r3, #52	@ 0x34
 800fdec:	460a      	mov	r2, r1
 800fdee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fdf0:	68ba      	ldr	r2, [r7, #8]
 800fdf2:	69fb      	ldr	r3, [r7, #28]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d006      	beq.n	800fe0a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	3301      	adds	r3, #1
 800fe00:	61fb      	str	r3, [r7, #28]
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	2b0f      	cmp	r3, #15
 800fe06:	d9e9      	bls.n	800fddc <prvInitialiseNewTask+0x66>
 800fe08:	e000      	b.n	800fe0c <prvInitialiseNewTask+0x96>
			{
				break;
 800fe0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fe0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fe14:	e003      	b.n	800fe1e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fe16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fe1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe20:	2b06      	cmp	r3, #6
 800fe22:	d901      	bls.n	800fe28 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fe24:	2306      	movs	r3, #6
 800fe26:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fe28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe2c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fe2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe32:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800fe34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe36:	2200      	movs	r2, #0
 800fe38:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fe3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe3c:	3304      	adds	r3, #4
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7ff f90a 	bl	800f058 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fe44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe46:	3318      	adds	r3, #24
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7ff f905 	bl	800f058 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fe4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe56:	f1c3 0207 	rsb	r2, r3, #7
 800fe5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fe5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe62:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800fe64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe66:	2200      	movs	r2, #0
 800fe68:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fe6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fe70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe72:	2200      	movs	r2, #0
 800fe74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fe78:	683a      	ldr	r2, [r7, #0]
 800fe7a:	68f9      	ldr	r1, [r7, #12]
 800fe7c:	69b8      	ldr	r0, [r7, #24]
 800fe7e:	f000 fe0d 	bl	8010a9c <pxPortInitialiseStack>
 800fe82:	4602      	mov	r2, r0
 800fe84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fe88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d002      	beq.n	800fe94 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fe8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe94:	bf00      	nop
 800fe96:	3720      	adds	r7, #32
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fea4:	f000 ff28 	bl	8010cf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fea8:	4b2a      	ldr	r3, [pc, #168]	@ (800ff54 <prvAddNewTaskToReadyList+0xb8>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	3301      	adds	r3, #1
 800feae:	4a29      	ldr	r2, [pc, #164]	@ (800ff54 <prvAddNewTaskToReadyList+0xb8>)
 800feb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800feb2:	4b29      	ldr	r3, [pc, #164]	@ (800ff58 <prvAddNewTaskToReadyList+0xbc>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d109      	bne.n	800fece <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800feba:	4a27      	ldr	r2, [pc, #156]	@ (800ff58 <prvAddNewTaskToReadyList+0xbc>)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fec0:	4b24      	ldr	r3, [pc, #144]	@ (800ff54 <prvAddNewTaskToReadyList+0xb8>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d110      	bne.n	800feea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fec8:	f000 fc1e 	bl	8010708 <prvInitialiseTaskLists>
 800fecc:	e00d      	b.n	800feea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fece:	4b23      	ldr	r3, [pc, #140]	@ (800ff5c <prvAddNewTaskToReadyList+0xc0>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d109      	bne.n	800feea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fed6:	4b20      	ldr	r3, [pc, #128]	@ (800ff58 <prvAddNewTaskToReadyList+0xbc>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d802      	bhi.n	800feea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fee4:	4a1c      	ldr	r2, [pc, #112]	@ (800ff58 <prvAddNewTaskToReadyList+0xbc>)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800feea:	4b1d      	ldr	r3, [pc, #116]	@ (800ff60 <prvAddNewTaskToReadyList+0xc4>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	3301      	adds	r3, #1
 800fef0:	4a1b      	ldr	r2, [pc, #108]	@ (800ff60 <prvAddNewTaskToReadyList+0xc4>)
 800fef2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fef8:	2201      	movs	r2, #1
 800fefa:	409a      	lsls	r2, r3
 800fefc:	4b19      	ldr	r3, [pc, #100]	@ (800ff64 <prvAddNewTaskToReadyList+0xc8>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4313      	orrs	r3, r2
 800ff02:	4a18      	ldr	r2, [pc, #96]	@ (800ff64 <prvAddNewTaskToReadyList+0xc8>)
 800ff04:	6013      	str	r3, [r2, #0]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	4413      	add	r3, r2
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	4a15      	ldr	r2, [pc, #84]	@ (800ff68 <prvAddNewTaskToReadyList+0xcc>)
 800ff14:	441a      	add	r2, r3
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	3304      	adds	r3, #4
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	4610      	mov	r0, r2
 800ff1e:	f7ff f8a8 	bl	800f072 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ff22:	f000 ff1b 	bl	8010d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ff26:	4b0d      	ldr	r3, [pc, #52]	@ (800ff5c <prvAddNewTaskToReadyList+0xc0>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d00e      	beq.n	800ff4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ff2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ff58 <prvAddNewTaskToReadyList+0xbc>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d207      	bcs.n	800ff4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ff3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ff6c <prvAddNewTaskToReadyList+0xd0>)
 800ff3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff42:	601a      	str	r2, [r3, #0]
 800ff44:	f3bf 8f4f 	dsb	sy
 800ff48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff4c:	bf00      	nop
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	200008e0 	.word	0x200008e0
 800ff58:	200007e0 	.word	0x200007e0
 800ff5c:	200008ec 	.word	0x200008ec
 800ff60:	200008fc 	.word	0x200008fc
 800ff64:	200008e8 	.word	0x200008e8
 800ff68:	200007e4 	.word	0x200007e4
 800ff6c:	e000ed04 	.word	0xe000ed04

0800ff70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d018      	beq.n	800ffb4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ff82:	4b14      	ldr	r3, [pc, #80]	@ (800ffd4 <vTaskDelay+0x64>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00b      	beq.n	800ffa2 <vTaskDelay+0x32>
	__asm volatile
 800ff8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8e:	f383 8811 	msr	BASEPRI, r3
 800ff92:	f3bf 8f6f 	isb	sy
 800ff96:	f3bf 8f4f 	dsb	sy
 800ff9a:	60bb      	str	r3, [r7, #8]
}
 800ff9c:	bf00      	nop
 800ff9e:	bf00      	nop
 800ffa0:	e7fd      	b.n	800ff9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ffa2:	f000 f87d 	bl	80100a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ffa6:	2100      	movs	r1, #0
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 fd11 	bl	80109d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ffae:	f000 f885 	bl	80100bc <xTaskResumeAll>
 800ffb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d107      	bne.n	800ffca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ffba:	4b07      	ldr	r3, [pc, #28]	@ (800ffd8 <vTaskDelay+0x68>)
 800ffbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffc0:	601a      	str	r2, [r3, #0]
 800ffc2:	f3bf 8f4f 	dsb	sy
 800ffc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ffca:	bf00      	nop
 800ffcc:	3710      	adds	r7, #16
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	20000908 	.word	0x20000908
 800ffd8:	e000ed04 	.word	0xe000ed04

0800ffdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b08a      	sub	sp, #40	@ 0x28
 800ffe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ffea:	463a      	mov	r2, r7
 800ffec:	1d39      	adds	r1, r7, #4
 800ffee:	f107 0308 	add.w	r3, r7, #8
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7f0 fa96 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fff8:	6839      	ldr	r1, [r7, #0]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	68ba      	ldr	r2, [r7, #8]
 800fffe:	9202      	str	r2, [sp, #8]
 8010000:	9301      	str	r3, [sp, #4]
 8010002:	2300      	movs	r3, #0
 8010004:	9300      	str	r3, [sp, #0]
 8010006:	2300      	movs	r3, #0
 8010008:	460a      	mov	r2, r1
 801000a:	491f      	ldr	r1, [pc, #124]	@ (8010088 <vTaskStartScheduler+0xac>)
 801000c:	481f      	ldr	r0, [pc, #124]	@ (801008c <vTaskStartScheduler+0xb0>)
 801000e:	f7ff fe0d 	bl	800fc2c <xTaskCreateStatic>
 8010012:	4603      	mov	r3, r0
 8010014:	4a1e      	ldr	r2, [pc, #120]	@ (8010090 <vTaskStartScheduler+0xb4>)
 8010016:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010018:	4b1d      	ldr	r3, [pc, #116]	@ (8010090 <vTaskStartScheduler+0xb4>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d002      	beq.n	8010026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010020:	2301      	movs	r3, #1
 8010022:	617b      	str	r3, [r7, #20]
 8010024:	e001      	b.n	801002a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010026:	2300      	movs	r3, #0
 8010028:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d116      	bne.n	801005e <vTaskStartScheduler+0x82>
	__asm volatile
 8010030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010034:	f383 8811 	msr	BASEPRI, r3
 8010038:	f3bf 8f6f 	isb	sy
 801003c:	f3bf 8f4f 	dsb	sy
 8010040:	613b      	str	r3, [r7, #16]
}
 8010042:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010044:	4b13      	ldr	r3, [pc, #76]	@ (8010094 <vTaskStartScheduler+0xb8>)
 8010046:	f04f 32ff 	mov.w	r2, #4294967295
 801004a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801004c:	4b12      	ldr	r3, [pc, #72]	@ (8010098 <vTaskStartScheduler+0xbc>)
 801004e:	2201      	movs	r2, #1
 8010050:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010052:	4b12      	ldr	r3, [pc, #72]	@ (801009c <vTaskStartScheduler+0xc0>)
 8010054:	2200      	movs	r2, #0
 8010056:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010058:	f000 fdaa 	bl	8010bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801005c:	e00f      	b.n	801007e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010064:	d10b      	bne.n	801007e <vTaskStartScheduler+0xa2>
	__asm volatile
 8010066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801006a:	f383 8811 	msr	BASEPRI, r3
 801006e:	f3bf 8f6f 	isb	sy
 8010072:	f3bf 8f4f 	dsb	sy
 8010076:	60fb      	str	r3, [r7, #12]
}
 8010078:	bf00      	nop
 801007a:	bf00      	nop
 801007c:	e7fd      	b.n	801007a <vTaskStartScheduler+0x9e>
}
 801007e:	bf00      	nop
 8010080:	3718      	adds	r7, #24
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	08011c6c 	.word	0x08011c6c
 801008c:	080106d5 	.word	0x080106d5
 8010090:	20000904 	.word	0x20000904
 8010094:	20000900 	.word	0x20000900
 8010098:	200008ec 	.word	0x200008ec
 801009c:	200008e4 	.word	0x200008e4

080100a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80100a0:	b480      	push	{r7}
 80100a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80100a4:	4b04      	ldr	r3, [pc, #16]	@ (80100b8 <vTaskSuspendAll+0x18>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	3301      	adds	r3, #1
 80100aa:	4a03      	ldr	r2, [pc, #12]	@ (80100b8 <vTaskSuspendAll+0x18>)
 80100ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80100ae:	bf00      	nop
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr
 80100b8:	20000908 	.word	0x20000908

080100bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80100c2:	2300      	movs	r3, #0
 80100c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80100c6:	2300      	movs	r3, #0
 80100c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80100ca:	4b42      	ldr	r3, [pc, #264]	@ (80101d4 <xTaskResumeAll+0x118>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d10b      	bne.n	80100ea <xTaskResumeAll+0x2e>
	__asm volatile
 80100d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100d6:	f383 8811 	msr	BASEPRI, r3
 80100da:	f3bf 8f6f 	isb	sy
 80100de:	f3bf 8f4f 	dsb	sy
 80100e2:	603b      	str	r3, [r7, #0]
}
 80100e4:	bf00      	nop
 80100e6:	bf00      	nop
 80100e8:	e7fd      	b.n	80100e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80100ea:	f000 fe05 	bl	8010cf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80100ee:	4b39      	ldr	r3, [pc, #228]	@ (80101d4 <xTaskResumeAll+0x118>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	3b01      	subs	r3, #1
 80100f4:	4a37      	ldr	r2, [pc, #220]	@ (80101d4 <xTaskResumeAll+0x118>)
 80100f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100f8:	4b36      	ldr	r3, [pc, #216]	@ (80101d4 <xTaskResumeAll+0x118>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d161      	bne.n	80101c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010100:	4b35      	ldr	r3, [pc, #212]	@ (80101d8 <xTaskResumeAll+0x11c>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d05d      	beq.n	80101c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010108:	e02e      	b.n	8010168 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801010a:	4b34      	ldr	r3, [pc, #208]	@ (80101dc <xTaskResumeAll+0x120>)
 801010c:	68db      	ldr	r3, [r3, #12]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	3318      	adds	r3, #24
 8010116:	4618      	mov	r0, r3
 8010118:	f7ff f808 	bl	800f12c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	3304      	adds	r3, #4
 8010120:	4618      	mov	r0, r3
 8010122:	f7ff f803 	bl	800f12c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801012a:	2201      	movs	r2, #1
 801012c:	409a      	lsls	r2, r3
 801012e:	4b2c      	ldr	r3, [pc, #176]	@ (80101e0 <xTaskResumeAll+0x124>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	4313      	orrs	r3, r2
 8010134:	4a2a      	ldr	r2, [pc, #168]	@ (80101e0 <xTaskResumeAll+0x124>)
 8010136:	6013      	str	r3, [r2, #0]
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801013c:	4613      	mov	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	4413      	add	r3, r2
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	4a27      	ldr	r2, [pc, #156]	@ (80101e4 <xTaskResumeAll+0x128>)
 8010146:	441a      	add	r2, r3
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	3304      	adds	r3, #4
 801014c:	4619      	mov	r1, r3
 801014e:	4610      	mov	r0, r2
 8010150:	f7fe ff8f 	bl	800f072 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010158:	4b23      	ldr	r3, [pc, #140]	@ (80101e8 <xTaskResumeAll+0x12c>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801015e:	429a      	cmp	r2, r3
 8010160:	d302      	bcc.n	8010168 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010162:	4b22      	ldr	r3, [pc, #136]	@ (80101ec <xTaskResumeAll+0x130>)
 8010164:	2201      	movs	r2, #1
 8010166:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010168:	4b1c      	ldr	r3, [pc, #112]	@ (80101dc <xTaskResumeAll+0x120>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d1cc      	bne.n	801010a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d001      	beq.n	801017a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010176:	f000 fb65 	bl	8010844 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801017a:	4b1d      	ldr	r3, [pc, #116]	@ (80101f0 <xTaskResumeAll+0x134>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d010      	beq.n	80101a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010186:	f000 f859 	bl	801023c <xTaskIncrementTick>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010190:	4b16      	ldr	r3, [pc, #88]	@ (80101ec <xTaskResumeAll+0x130>)
 8010192:	2201      	movs	r2, #1
 8010194:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	3b01      	subs	r3, #1
 801019a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d1f1      	bne.n	8010186 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80101a2:	4b13      	ldr	r3, [pc, #76]	@ (80101f0 <xTaskResumeAll+0x134>)
 80101a4:	2200      	movs	r2, #0
 80101a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80101a8:	4b10      	ldr	r3, [pc, #64]	@ (80101ec <xTaskResumeAll+0x130>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d009      	beq.n	80101c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80101b0:	2301      	movs	r3, #1
 80101b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80101b4:	4b0f      	ldr	r3, [pc, #60]	@ (80101f4 <xTaskResumeAll+0x138>)
 80101b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101ba:	601a      	str	r2, [r3, #0]
 80101bc:	f3bf 8f4f 	dsb	sy
 80101c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80101c4:	f000 fdca 	bl	8010d5c <vPortExitCritical>

	return xAlreadyYielded;
 80101c8:	68bb      	ldr	r3, [r7, #8]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	20000908 	.word	0x20000908
 80101d8:	200008e0 	.word	0x200008e0
 80101dc:	200008a0 	.word	0x200008a0
 80101e0:	200008e8 	.word	0x200008e8
 80101e4:	200007e4 	.word	0x200007e4
 80101e8:	200007e0 	.word	0x200007e0
 80101ec:	200008f4 	.word	0x200008f4
 80101f0:	200008f0 	.word	0x200008f0
 80101f4:	e000ed04 	.word	0xe000ed04

080101f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80101f8:	b480      	push	{r7}
 80101fa:	b083      	sub	sp, #12
 80101fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80101fe:	4b05      	ldr	r3, [pc, #20]	@ (8010214 <xTaskGetTickCount+0x1c>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010204:	687b      	ldr	r3, [r7, #4]
}
 8010206:	4618      	mov	r0, r3
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	200008e4 	.word	0x200008e4

08010218 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801021e:	f000 fe4b 	bl	8010eb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010222:	2300      	movs	r3, #0
 8010224:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010226:	4b04      	ldr	r3, [pc, #16]	@ (8010238 <xTaskGetTickCountFromISR+0x20>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801022c:	683b      	ldr	r3, [r7, #0]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	200008e4 	.word	0x200008e4

0801023c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b086      	sub	sp, #24
 8010240:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010242:	2300      	movs	r3, #0
 8010244:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010246:	4b4f      	ldr	r3, [pc, #316]	@ (8010384 <xTaskIncrementTick+0x148>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	f040 808f 	bne.w	801036e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010250:	4b4d      	ldr	r3, [pc, #308]	@ (8010388 <xTaskIncrementTick+0x14c>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	3301      	adds	r3, #1
 8010256:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010258:	4a4b      	ldr	r2, [pc, #300]	@ (8010388 <xTaskIncrementTick+0x14c>)
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d121      	bne.n	80102a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010264:	4b49      	ldr	r3, [pc, #292]	@ (801038c <xTaskIncrementTick+0x150>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d00b      	beq.n	8010286 <xTaskIncrementTick+0x4a>
	__asm volatile
 801026e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010272:	f383 8811 	msr	BASEPRI, r3
 8010276:	f3bf 8f6f 	isb	sy
 801027a:	f3bf 8f4f 	dsb	sy
 801027e:	603b      	str	r3, [r7, #0]
}
 8010280:	bf00      	nop
 8010282:	bf00      	nop
 8010284:	e7fd      	b.n	8010282 <xTaskIncrementTick+0x46>
 8010286:	4b41      	ldr	r3, [pc, #260]	@ (801038c <xTaskIncrementTick+0x150>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	60fb      	str	r3, [r7, #12]
 801028c:	4b40      	ldr	r3, [pc, #256]	@ (8010390 <xTaskIncrementTick+0x154>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4a3e      	ldr	r2, [pc, #248]	@ (801038c <xTaskIncrementTick+0x150>)
 8010292:	6013      	str	r3, [r2, #0]
 8010294:	4a3e      	ldr	r2, [pc, #248]	@ (8010390 <xTaskIncrementTick+0x154>)
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	6013      	str	r3, [r2, #0]
 801029a:	4b3e      	ldr	r3, [pc, #248]	@ (8010394 <xTaskIncrementTick+0x158>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	3301      	adds	r3, #1
 80102a0:	4a3c      	ldr	r2, [pc, #240]	@ (8010394 <xTaskIncrementTick+0x158>)
 80102a2:	6013      	str	r3, [r2, #0]
 80102a4:	f000 face 	bl	8010844 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80102a8:	4b3b      	ldr	r3, [pc, #236]	@ (8010398 <xTaskIncrementTick+0x15c>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	693a      	ldr	r2, [r7, #16]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d348      	bcc.n	8010344 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102b2:	4b36      	ldr	r3, [pc, #216]	@ (801038c <xTaskIncrementTick+0x150>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d104      	bne.n	80102c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102bc:	4b36      	ldr	r3, [pc, #216]	@ (8010398 <xTaskIncrementTick+0x15c>)
 80102be:	f04f 32ff 	mov.w	r2, #4294967295
 80102c2:	601a      	str	r2, [r3, #0]
					break;
 80102c4:	e03e      	b.n	8010344 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102c6:	4b31      	ldr	r3, [pc, #196]	@ (801038c <xTaskIncrementTick+0x150>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	68db      	ldr	r3, [r3, #12]
 80102ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80102d6:	693a      	ldr	r2, [r7, #16]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d203      	bcs.n	80102e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80102de:	4a2e      	ldr	r2, [pc, #184]	@ (8010398 <xTaskIncrementTick+0x15c>)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80102e4:	e02e      	b.n	8010344 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	3304      	adds	r3, #4
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7fe ff1e 	bl	800f12c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d004      	beq.n	8010302 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	3318      	adds	r3, #24
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7fe ff15 	bl	800f12c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010306:	2201      	movs	r2, #1
 8010308:	409a      	lsls	r2, r3
 801030a:	4b24      	ldr	r3, [pc, #144]	@ (801039c <xTaskIncrementTick+0x160>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	4313      	orrs	r3, r2
 8010310:	4a22      	ldr	r2, [pc, #136]	@ (801039c <xTaskIncrementTick+0x160>)
 8010312:	6013      	str	r3, [r2, #0]
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010318:	4613      	mov	r3, r2
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	4413      	add	r3, r2
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	4a1f      	ldr	r2, [pc, #124]	@ (80103a0 <xTaskIncrementTick+0x164>)
 8010322:	441a      	add	r2, r3
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	3304      	adds	r3, #4
 8010328:	4619      	mov	r1, r3
 801032a:	4610      	mov	r0, r2
 801032c:	f7fe fea1 	bl	800f072 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010334:	4b1b      	ldr	r3, [pc, #108]	@ (80103a4 <xTaskIncrementTick+0x168>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801033a:	429a      	cmp	r2, r3
 801033c:	d3b9      	bcc.n	80102b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801033e:	2301      	movs	r3, #1
 8010340:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010342:	e7b6      	b.n	80102b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010344:	4b17      	ldr	r3, [pc, #92]	@ (80103a4 <xTaskIncrementTick+0x168>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801034a:	4915      	ldr	r1, [pc, #84]	@ (80103a0 <xTaskIncrementTick+0x164>)
 801034c:	4613      	mov	r3, r2
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	4413      	add	r3, r2
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	440b      	add	r3, r1
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b01      	cmp	r3, #1
 801035a:	d901      	bls.n	8010360 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801035c:	2301      	movs	r3, #1
 801035e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010360:	4b11      	ldr	r3, [pc, #68]	@ (80103a8 <xTaskIncrementTick+0x16c>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d007      	beq.n	8010378 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010368:	2301      	movs	r3, #1
 801036a:	617b      	str	r3, [r7, #20]
 801036c:	e004      	b.n	8010378 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801036e:	4b0f      	ldr	r3, [pc, #60]	@ (80103ac <xTaskIncrementTick+0x170>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	3301      	adds	r3, #1
 8010374:	4a0d      	ldr	r2, [pc, #52]	@ (80103ac <xTaskIncrementTick+0x170>)
 8010376:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010378:	697b      	ldr	r3, [r7, #20]
}
 801037a:	4618      	mov	r0, r3
 801037c:	3718      	adds	r7, #24
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	20000908 	.word	0x20000908
 8010388:	200008e4 	.word	0x200008e4
 801038c:	20000898 	.word	0x20000898
 8010390:	2000089c 	.word	0x2000089c
 8010394:	200008f8 	.word	0x200008f8
 8010398:	20000900 	.word	0x20000900
 801039c:	200008e8 	.word	0x200008e8
 80103a0:	200007e4 	.word	0x200007e4
 80103a4:	200007e0 	.word	0x200007e0
 80103a8:	200008f4 	.word	0x200008f4
 80103ac:	200008f0 	.word	0x200008f0

080103b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b088      	sub	sp, #32
 80103b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80103b6:	4b3a      	ldr	r3, [pc, #232]	@ (80104a0 <vTaskSwitchContext+0xf0>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d003      	beq.n	80103c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80103be:	4b39      	ldr	r3, [pc, #228]	@ (80104a4 <vTaskSwitchContext+0xf4>)
 80103c0:	2201      	movs	r2, #1
 80103c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80103c4:	e067      	b.n	8010496 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80103c6:	4b37      	ldr	r3, [pc, #220]	@ (80104a4 <vTaskSwitchContext+0xf4>)
 80103c8:	2200      	movs	r2, #0
 80103ca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80103cc:	4b36      	ldr	r3, [pc, #216]	@ (80104a8 <vTaskSwitchContext+0xf8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103d2:	61fb      	str	r3, [r7, #28]
 80103d4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80103d8:	61bb      	str	r3, [r7, #24]
 80103da:	69fb      	ldr	r3, [r7, #28]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	69ba      	ldr	r2, [r7, #24]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d111      	bne.n	8010408 <vTaskSwitchContext+0x58>
 80103e4:	69fb      	ldr	r3, [r7, #28]
 80103e6:	3304      	adds	r3, #4
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	69ba      	ldr	r2, [r7, #24]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d10b      	bne.n	8010408 <vTaskSwitchContext+0x58>
 80103f0:	69fb      	ldr	r3, [r7, #28]
 80103f2:	3308      	adds	r3, #8
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	69ba      	ldr	r2, [r7, #24]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d105      	bne.n	8010408 <vTaskSwitchContext+0x58>
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	330c      	adds	r3, #12
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	69ba      	ldr	r2, [r7, #24]
 8010404:	429a      	cmp	r2, r3
 8010406:	d008      	beq.n	801041a <vTaskSwitchContext+0x6a>
 8010408:	4b27      	ldr	r3, [pc, #156]	@ (80104a8 <vTaskSwitchContext+0xf8>)
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	4b26      	ldr	r3, [pc, #152]	@ (80104a8 <vTaskSwitchContext+0xf8>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	3334      	adds	r3, #52	@ 0x34
 8010412:	4619      	mov	r1, r3
 8010414:	4610      	mov	r0, r2
 8010416:	f7f0 f872 	bl	80004fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801041a:	4b24      	ldr	r3, [pc, #144]	@ (80104ac <vTaskSwitchContext+0xfc>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	fab3 f383 	clz	r3, r3
 8010426:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010428:	7afb      	ldrb	r3, [r7, #11]
 801042a:	f1c3 031f 	rsb	r3, r3, #31
 801042e:	617b      	str	r3, [r7, #20]
 8010430:	491f      	ldr	r1, [pc, #124]	@ (80104b0 <vTaskSwitchContext+0x100>)
 8010432:	697a      	ldr	r2, [r7, #20]
 8010434:	4613      	mov	r3, r2
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	4413      	add	r3, r2
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	440b      	add	r3, r1
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d10b      	bne.n	801045c <vTaskSwitchContext+0xac>
	__asm volatile
 8010444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010448:	f383 8811 	msr	BASEPRI, r3
 801044c:	f3bf 8f6f 	isb	sy
 8010450:	f3bf 8f4f 	dsb	sy
 8010454:	607b      	str	r3, [r7, #4]
}
 8010456:	bf00      	nop
 8010458:	bf00      	nop
 801045a:	e7fd      	b.n	8010458 <vTaskSwitchContext+0xa8>
 801045c:	697a      	ldr	r2, [r7, #20]
 801045e:	4613      	mov	r3, r2
 8010460:	009b      	lsls	r3, r3, #2
 8010462:	4413      	add	r3, r2
 8010464:	009b      	lsls	r3, r3, #2
 8010466:	4a12      	ldr	r2, [pc, #72]	@ (80104b0 <vTaskSwitchContext+0x100>)
 8010468:	4413      	add	r3, r2
 801046a:	613b      	str	r3, [r7, #16]
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	685a      	ldr	r2, [r3, #4]
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	605a      	str	r2, [r3, #4]
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	685a      	ldr	r2, [r3, #4]
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	3308      	adds	r3, #8
 801047e:	429a      	cmp	r2, r3
 8010480:	d104      	bne.n	801048c <vTaskSwitchContext+0xdc>
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	685a      	ldr	r2, [r3, #4]
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	605a      	str	r2, [r3, #4]
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	68db      	ldr	r3, [r3, #12]
 8010492:	4a05      	ldr	r2, [pc, #20]	@ (80104a8 <vTaskSwitchContext+0xf8>)
 8010494:	6013      	str	r3, [r2, #0]
}
 8010496:	bf00      	nop
 8010498:	3720      	adds	r7, #32
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	20000908 	.word	0x20000908
 80104a4:	200008f4 	.word	0x200008f4
 80104a8:	200007e0 	.word	0x200007e0
 80104ac:	200008e8 	.word	0x200008e8
 80104b0:	200007e4 	.word	0x200007e4

080104b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d10b      	bne.n	80104dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80104c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104c8:	f383 8811 	msr	BASEPRI, r3
 80104cc:	f3bf 8f6f 	isb	sy
 80104d0:	f3bf 8f4f 	dsb	sy
 80104d4:	60fb      	str	r3, [r7, #12]
}
 80104d6:	bf00      	nop
 80104d8:	bf00      	nop
 80104da:	e7fd      	b.n	80104d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80104dc:	4b07      	ldr	r3, [pc, #28]	@ (80104fc <vTaskPlaceOnEventList+0x48>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	3318      	adds	r3, #24
 80104e2:	4619      	mov	r1, r3
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f7fe fde8 	bl	800f0ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80104ea:	2101      	movs	r1, #1
 80104ec:	6838      	ldr	r0, [r7, #0]
 80104ee:	f000 fa6f 	bl	80109d0 <prvAddCurrentTaskToDelayedList>
}
 80104f2:	bf00      	nop
 80104f4:	3710      	adds	r7, #16
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	200007e0 	.word	0x200007e0

08010500 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b086      	sub	sp, #24
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	68db      	ldr	r3, [r3, #12]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d10b      	bne.n	801052e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801051a:	f383 8811 	msr	BASEPRI, r3
 801051e:	f3bf 8f6f 	isb	sy
 8010522:	f3bf 8f4f 	dsb	sy
 8010526:	60fb      	str	r3, [r7, #12]
}
 8010528:	bf00      	nop
 801052a:	bf00      	nop
 801052c:	e7fd      	b.n	801052a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	3318      	adds	r3, #24
 8010532:	4618      	mov	r0, r3
 8010534:	f7fe fdfa 	bl	800f12c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010538:	4b1d      	ldr	r3, [pc, #116]	@ (80105b0 <xTaskRemoveFromEventList+0xb0>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d11c      	bne.n	801057a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	3304      	adds	r3, #4
 8010544:	4618      	mov	r0, r3
 8010546:	f7fe fdf1 	bl	800f12c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801054e:	2201      	movs	r2, #1
 8010550:	409a      	lsls	r2, r3
 8010552:	4b18      	ldr	r3, [pc, #96]	@ (80105b4 <xTaskRemoveFromEventList+0xb4>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	4313      	orrs	r3, r2
 8010558:	4a16      	ldr	r2, [pc, #88]	@ (80105b4 <xTaskRemoveFromEventList+0xb4>)
 801055a:	6013      	str	r3, [r2, #0]
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010560:	4613      	mov	r3, r2
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	4413      	add	r3, r2
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	4a13      	ldr	r2, [pc, #76]	@ (80105b8 <xTaskRemoveFromEventList+0xb8>)
 801056a:	441a      	add	r2, r3
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	3304      	adds	r3, #4
 8010570:	4619      	mov	r1, r3
 8010572:	4610      	mov	r0, r2
 8010574:	f7fe fd7d 	bl	800f072 <vListInsertEnd>
 8010578:	e005      	b.n	8010586 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	3318      	adds	r3, #24
 801057e:	4619      	mov	r1, r3
 8010580:	480e      	ldr	r0, [pc, #56]	@ (80105bc <xTaskRemoveFromEventList+0xbc>)
 8010582:	f7fe fd76 	bl	800f072 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801058a:	4b0d      	ldr	r3, [pc, #52]	@ (80105c0 <xTaskRemoveFromEventList+0xc0>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010590:	429a      	cmp	r2, r3
 8010592:	d905      	bls.n	80105a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010594:	2301      	movs	r3, #1
 8010596:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010598:	4b0a      	ldr	r3, [pc, #40]	@ (80105c4 <xTaskRemoveFromEventList+0xc4>)
 801059a:	2201      	movs	r2, #1
 801059c:	601a      	str	r2, [r3, #0]
 801059e:	e001      	b.n	80105a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80105a0:	2300      	movs	r3, #0
 80105a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80105a4:	697b      	ldr	r3, [r7, #20]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3718      	adds	r7, #24
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	20000908 	.word	0x20000908
 80105b4:	200008e8 	.word	0x200008e8
 80105b8:	200007e4 	.word	0x200007e4
 80105bc:	200008a0 	.word	0x200008a0
 80105c0:	200007e0 	.word	0x200007e0
 80105c4:	200008f4 	.word	0x200008f4

080105c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80105d0:	4b06      	ldr	r3, [pc, #24]	@ (80105ec <vTaskInternalSetTimeOutState+0x24>)
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80105d8:	4b05      	ldr	r3, [pc, #20]	@ (80105f0 <vTaskInternalSetTimeOutState+0x28>)
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	605a      	str	r2, [r3, #4]
}
 80105e0:	bf00      	nop
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr
 80105ec:	200008f8 	.word	0x200008f8
 80105f0:	200008e4 	.word	0x200008e4

080105f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b088      	sub	sp, #32
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d10b      	bne.n	801061c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010608:	f383 8811 	msr	BASEPRI, r3
 801060c:	f3bf 8f6f 	isb	sy
 8010610:	f3bf 8f4f 	dsb	sy
 8010614:	613b      	str	r3, [r7, #16]
}
 8010616:	bf00      	nop
 8010618:	bf00      	nop
 801061a:	e7fd      	b.n	8010618 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d10b      	bne.n	801063a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010626:	f383 8811 	msr	BASEPRI, r3
 801062a:	f3bf 8f6f 	isb	sy
 801062e:	f3bf 8f4f 	dsb	sy
 8010632:	60fb      	str	r3, [r7, #12]
}
 8010634:	bf00      	nop
 8010636:	bf00      	nop
 8010638:	e7fd      	b.n	8010636 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801063a:	f000 fb5d 	bl	8010cf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801063e:	4b1d      	ldr	r3, [pc, #116]	@ (80106b4 <xTaskCheckForTimeOut+0xc0>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	69ba      	ldr	r2, [r7, #24]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010656:	d102      	bne.n	801065e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010658:	2300      	movs	r3, #0
 801065a:	61fb      	str	r3, [r7, #28]
 801065c:	e023      	b.n	80106a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	4b15      	ldr	r3, [pc, #84]	@ (80106b8 <xTaskCheckForTimeOut+0xc4>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	429a      	cmp	r2, r3
 8010668:	d007      	beq.n	801067a <xTaskCheckForTimeOut+0x86>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	69ba      	ldr	r2, [r7, #24]
 8010670:	429a      	cmp	r2, r3
 8010672:	d302      	bcc.n	801067a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010674:	2301      	movs	r3, #1
 8010676:	61fb      	str	r3, [r7, #28]
 8010678:	e015      	b.n	80106a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	697a      	ldr	r2, [r7, #20]
 8010680:	429a      	cmp	r2, r3
 8010682:	d20b      	bcs.n	801069c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	1ad2      	subs	r2, r2, r3
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f7ff ff99 	bl	80105c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010696:	2300      	movs	r3, #0
 8010698:	61fb      	str	r3, [r7, #28]
 801069a:	e004      	b.n	80106a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	2200      	movs	r2, #0
 80106a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80106a2:	2301      	movs	r3, #1
 80106a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80106a6:	f000 fb59 	bl	8010d5c <vPortExitCritical>

	return xReturn;
 80106aa:	69fb      	ldr	r3, [r7, #28]
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3720      	adds	r7, #32
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	200008e4 	.word	0x200008e4
 80106b8:	200008f8 	.word	0x200008f8

080106bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80106bc:	b480      	push	{r7}
 80106be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80106c0:	4b03      	ldr	r3, [pc, #12]	@ (80106d0 <vTaskMissedYield+0x14>)
 80106c2:	2201      	movs	r2, #1
 80106c4:	601a      	str	r2, [r3, #0]
}
 80106c6:	bf00      	nop
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr
 80106d0:	200008f4 	.word	0x200008f4

080106d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80106dc:	f000 f854 	bl	8010788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80106e0:	4b07      	ldr	r3, [pc, #28]	@ (8010700 <prvIdleTask+0x2c>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d907      	bls.n	80106f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80106e8:	4b06      	ldr	r3, [pc, #24]	@ (8010704 <prvIdleTask+0x30>)
 80106ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106ee:	601a      	str	r2, [r3, #0]
 80106f0:	f3bf 8f4f 	dsb	sy
 80106f4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80106f8:	f7ef fefa 	bl	80004f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80106fc:	e7ee      	b.n	80106dc <prvIdleTask+0x8>
 80106fe:	bf00      	nop
 8010700:	200007e4 	.word	0x200007e4
 8010704:	e000ed04 	.word	0xe000ed04

08010708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801070e:	2300      	movs	r3, #0
 8010710:	607b      	str	r3, [r7, #4]
 8010712:	e00c      	b.n	801072e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	4613      	mov	r3, r2
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	4413      	add	r3, r2
 801071c:	009b      	lsls	r3, r3, #2
 801071e:	4a12      	ldr	r2, [pc, #72]	@ (8010768 <prvInitialiseTaskLists+0x60>)
 8010720:	4413      	add	r3, r2
 8010722:	4618      	mov	r0, r3
 8010724:	f7fe fc78 	bl	800f018 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	3301      	adds	r3, #1
 801072c:	607b      	str	r3, [r7, #4]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b06      	cmp	r3, #6
 8010732:	d9ef      	bls.n	8010714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010734:	480d      	ldr	r0, [pc, #52]	@ (801076c <prvInitialiseTaskLists+0x64>)
 8010736:	f7fe fc6f 	bl	800f018 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801073a:	480d      	ldr	r0, [pc, #52]	@ (8010770 <prvInitialiseTaskLists+0x68>)
 801073c:	f7fe fc6c 	bl	800f018 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010740:	480c      	ldr	r0, [pc, #48]	@ (8010774 <prvInitialiseTaskLists+0x6c>)
 8010742:	f7fe fc69 	bl	800f018 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010746:	480c      	ldr	r0, [pc, #48]	@ (8010778 <prvInitialiseTaskLists+0x70>)
 8010748:	f7fe fc66 	bl	800f018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801074c:	480b      	ldr	r0, [pc, #44]	@ (801077c <prvInitialiseTaskLists+0x74>)
 801074e:	f7fe fc63 	bl	800f018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010752:	4b0b      	ldr	r3, [pc, #44]	@ (8010780 <prvInitialiseTaskLists+0x78>)
 8010754:	4a05      	ldr	r2, [pc, #20]	@ (801076c <prvInitialiseTaskLists+0x64>)
 8010756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010758:	4b0a      	ldr	r3, [pc, #40]	@ (8010784 <prvInitialiseTaskLists+0x7c>)
 801075a:	4a05      	ldr	r2, [pc, #20]	@ (8010770 <prvInitialiseTaskLists+0x68>)
 801075c:	601a      	str	r2, [r3, #0]
}
 801075e:	bf00      	nop
 8010760:	3708      	adds	r7, #8
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	200007e4 	.word	0x200007e4
 801076c:	20000870 	.word	0x20000870
 8010770:	20000884 	.word	0x20000884
 8010774:	200008a0 	.word	0x200008a0
 8010778:	200008b4 	.word	0x200008b4
 801077c:	200008cc 	.word	0x200008cc
 8010780:	20000898 	.word	0x20000898
 8010784:	2000089c 	.word	0x2000089c

08010788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801078e:	e019      	b.n	80107c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010790:	f000 fab2 	bl	8010cf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010794:	4b10      	ldr	r3, [pc, #64]	@ (80107d8 <prvCheckTasksWaitingTermination+0x50>)
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	68db      	ldr	r3, [r3, #12]
 801079a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	3304      	adds	r3, #4
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7fe fcc3 	bl	800f12c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80107a6:	4b0d      	ldr	r3, [pc, #52]	@ (80107dc <prvCheckTasksWaitingTermination+0x54>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	3b01      	subs	r3, #1
 80107ac:	4a0b      	ldr	r2, [pc, #44]	@ (80107dc <prvCheckTasksWaitingTermination+0x54>)
 80107ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80107b0:	4b0b      	ldr	r3, [pc, #44]	@ (80107e0 <prvCheckTasksWaitingTermination+0x58>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	3b01      	subs	r3, #1
 80107b6:	4a0a      	ldr	r2, [pc, #40]	@ (80107e0 <prvCheckTasksWaitingTermination+0x58>)
 80107b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80107ba:	f000 facf 	bl	8010d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f000 f810 	bl	80107e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107c4:	4b06      	ldr	r3, [pc, #24]	@ (80107e0 <prvCheckTasksWaitingTermination+0x58>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d1e1      	bne.n	8010790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80107cc:	bf00      	nop
 80107ce:	bf00      	nop
 80107d0:	3708      	adds	r7, #8
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	bf00      	nop
 80107d8:	200008b4 	.word	0x200008b4
 80107dc:	200008e0 	.word	0x200008e0
 80107e0:	200008c8 	.word	0x200008c8

080107e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d108      	bne.n	8010808 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107fa:	4618      	mov	r0, r3
 80107fc:	f000 fc72 	bl	80110e4 <vPortFree>
				vPortFree( pxTCB );
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 fc6f 	bl	80110e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010806:	e019      	b.n	801083c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801080e:	2b01      	cmp	r3, #1
 8010810:	d103      	bne.n	801081a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 fc66 	bl	80110e4 <vPortFree>
	}
 8010818:	e010      	b.n	801083c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8010820:	2b02      	cmp	r3, #2
 8010822:	d00b      	beq.n	801083c <prvDeleteTCB+0x58>
	__asm volatile
 8010824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010828:	f383 8811 	msr	BASEPRI, r3
 801082c:	f3bf 8f6f 	isb	sy
 8010830:	f3bf 8f4f 	dsb	sy
 8010834:	60fb      	str	r3, [r7, #12]
}
 8010836:	bf00      	nop
 8010838:	bf00      	nop
 801083a:	e7fd      	b.n	8010838 <prvDeleteTCB+0x54>
	}
 801083c:	bf00      	nop
 801083e:	3710      	adds	r7, #16
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801084a:	4b0c      	ldr	r3, [pc, #48]	@ (801087c <prvResetNextTaskUnblockTime+0x38>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d104      	bne.n	801085e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010854:	4b0a      	ldr	r3, [pc, #40]	@ (8010880 <prvResetNextTaskUnblockTime+0x3c>)
 8010856:	f04f 32ff 	mov.w	r2, #4294967295
 801085a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801085c:	e008      	b.n	8010870 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801085e:	4b07      	ldr	r3, [pc, #28]	@ (801087c <prvResetNextTaskUnblockTime+0x38>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	68db      	ldr	r3, [r3, #12]
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	4a04      	ldr	r2, [pc, #16]	@ (8010880 <prvResetNextTaskUnblockTime+0x3c>)
 801086e:	6013      	str	r3, [r2, #0]
}
 8010870:	bf00      	nop
 8010872:	370c      	adds	r7, #12
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	20000898 	.word	0x20000898
 8010880:	20000900 	.word	0x20000900

08010884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801088a:	4b0b      	ldr	r3, [pc, #44]	@ (80108b8 <xTaskGetSchedulerState+0x34>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d102      	bne.n	8010898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010892:	2301      	movs	r3, #1
 8010894:	607b      	str	r3, [r7, #4]
 8010896:	e008      	b.n	80108aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010898:	4b08      	ldr	r3, [pc, #32]	@ (80108bc <xTaskGetSchedulerState+0x38>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d102      	bne.n	80108a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80108a0:	2302      	movs	r3, #2
 80108a2:	607b      	str	r3, [r7, #4]
 80108a4:	e001      	b.n	80108aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80108a6:	2300      	movs	r3, #0
 80108a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80108aa:	687b      	ldr	r3, [r7, #4]
	}
 80108ac:	4618      	mov	r0, r3
 80108ae:	370c      	adds	r7, #12
 80108b0:	46bd      	mov	sp, r7
 80108b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b6:	4770      	bx	lr
 80108b8:	200008ec 	.word	0x200008ec
 80108bc:	20000908 	.word	0x20000908

080108c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b086      	sub	sp, #24
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80108cc:	2300      	movs	r3, #0
 80108ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d070      	beq.n	80109b8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80108d6:	4b3b      	ldr	r3, [pc, #236]	@ (80109c4 <xTaskPriorityDisinherit+0x104>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	693a      	ldr	r2, [r7, #16]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d00b      	beq.n	80108f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80108e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	60fb      	str	r3, [r7, #12]
}
 80108f2:	bf00      	nop
 80108f4:	bf00      	nop
 80108f6:	e7fd      	b.n	80108f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d10b      	bne.n	8010918 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010904:	f383 8811 	msr	BASEPRI, r3
 8010908:	f3bf 8f6f 	isb	sy
 801090c:	f3bf 8f4f 	dsb	sy
 8010910:	60bb      	str	r3, [r7, #8]
}
 8010912:	bf00      	nop
 8010914:	bf00      	nop
 8010916:	e7fd      	b.n	8010914 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801091c:	1e5a      	subs	r2, r3, #1
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801092a:	429a      	cmp	r2, r3
 801092c:	d044      	beq.n	80109b8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010932:	2b00      	cmp	r3, #0
 8010934:	d140      	bne.n	80109b8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	3304      	adds	r3, #4
 801093a:	4618      	mov	r0, r3
 801093c:	f7fe fbf6 	bl	800f12c <uxListRemove>
 8010940:	4603      	mov	r3, r0
 8010942:	2b00      	cmp	r3, #0
 8010944:	d115      	bne.n	8010972 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801094a:	491f      	ldr	r1, [pc, #124]	@ (80109c8 <xTaskPriorityDisinherit+0x108>)
 801094c:	4613      	mov	r3, r2
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	4413      	add	r3, r2
 8010952:	009b      	lsls	r3, r3, #2
 8010954:	440b      	add	r3, r1
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d10a      	bne.n	8010972 <xTaskPriorityDisinherit+0xb2>
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010960:	2201      	movs	r2, #1
 8010962:	fa02 f303 	lsl.w	r3, r2, r3
 8010966:	43da      	mvns	r2, r3
 8010968:	4b18      	ldr	r3, [pc, #96]	@ (80109cc <xTaskPriorityDisinherit+0x10c>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	4013      	ands	r3, r2
 801096e:	4a17      	ldr	r2, [pc, #92]	@ (80109cc <xTaskPriorityDisinherit+0x10c>)
 8010970:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801097e:	f1c3 0207 	rsb	r2, r3, #7
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010986:	693b      	ldr	r3, [r7, #16]
 8010988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801098a:	2201      	movs	r2, #1
 801098c:	409a      	lsls	r2, r3
 801098e:	4b0f      	ldr	r3, [pc, #60]	@ (80109cc <xTaskPriorityDisinherit+0x10c>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	4313      	orrs	r3, r2
 8010994:	4a0d      	ldr	r2, [pc, #52]	@ (80109cc <xTaskPriorityDisinherit+0x10c>)
 8010996:	6013      	str	r3, [r2, #0]
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801099c:	4613      	mov	r3, r2
 801099e:	009b      	lsls	r3, r3, #2
 80109a0:	4413      	add	r3, r2
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	4a08      	ldr	r2, [pc, #32]	@ (80109c8 <xTaskPriorityDisinherit+0x108>)
 80109a6:	441a      	add	r2, r3
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	3304      	adds	r3, #4
 80109ac:	4619      	mov	r1, r3
 80109ae:	4610      	mov	r0, r2
 80109b0:	f7fe fb5f 	bl	800f072 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80109b4:	2301      	movs	r3, #1
 80109b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80109b8:	697b      	ldr	r3, [r7, #20]
	}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3718      	adds	r7, #24
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	200007e0 	.word	0x200007e0
 80109c8:	200007e4 	.word	0x200007e4
 80109cc:	200008e8 	.word	0x200008e8

080109d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80109da:	4b29      	ldr	r3, [pc, #164]	@ (8010a80 <prvAddCurrentTaskToDelayedList+0xb0>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109e0:	4b28      	ldr	r3, [pc, #160]	@ (8010a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	3304      	adds	r3, #4
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fe fba0 	bl	800f12c <uxListRemove>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d10b      	bne.n	8010a0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80109f2:	4b24      	ldr	r3, [pc, #144]	@ (8010a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109f8:	2201      	movs	r2, #1
 80109fa:	fa02 f303 	lsl.w	r3, r2, r3
 80109fe:	43da      	mvns	r2, r3
 8010a00:	4b21      	ldr	r3, [pc, #132]	@ (8010a88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	4013      	ands	r3, r2
 8010a06:	4a20      	ldr	r2, [pc, #128]	@ (8010a88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010a08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a10:	d10a      	bne.n	8010a28 <prvAddCurrentTaskToDelayedList+0x58>
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d007      	beq.n	8010a28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a18:	4b1a      	ldr	r3, [pc, #104]	@ (8010a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3304      	adds	r3, #4
 8010a1e:	4619      	mov	r1, r3
 8010a20:	481a      	ldr	r0, [pc, #104]	@ (8010a8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8010a22:	f7fe fb26 	bl	800f072 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010a26:	e026      	b.n	8010a76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010a28:	68fa      	ldr	r2, [r7, #12]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010a30:	4b14      	ldr	r3, [pc, #80]	@ (8010a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010a38:	68ba      	ldr	r2, [r7, #8]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d209      	bcs.n	8010a54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a40:	4b13      	ldr	r3, [pc, #76]	@ (8010a90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	4b0f      	ldr	r3, [pc, #60]	@ (8010a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	3304      	adds	r3, #4
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	4610      	mov	r0, r2
 8010a4e:	f7fe fb34 	bl	800f0ba <vListInsert>
}
 8010a52:	e010      	b.n	8010a76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a54:	4b0f      	ldr	r3, [pc, #60]	@ (8010a94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	4b0a      	ldr	r3, [pc, #40]	@ (8010a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	3304      	adds	r3, #4
 8010a5e:	4619      	mov	r1, r3
 8010a60:	4610      	mov	r0, r2
 8010a62:	f7fe fb2a 	bl	800f0ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010a66:	4b0c      	ldr	r3, [pc, #48]	@ (8010a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	68ba      	ldr	r2, [r7, #8]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d202      	bcs.n	8010a76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010a70:	4a09      	ldr	r2, [pc, #36]	@ (8010a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	6013      	str	r3, [r2, #0]
}
 8010a76:	bf00      	nop
 8010a78:	3710      	adds	r7, #16
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	200008e4 	.word	0x200008e4
 8010a84:	200007e0 	.word	0x200007e0
 8010a88:	200008e8 	.word	0x200008e8
 8010a8c:	200008cc 	.word	0x200008cc
 8010a90:	2000089c 	.word	0x2000089c
 8010a94:	20000898 	.word	0x20000898
 8010a98:	20000900 	.word	0x20000900

08010a9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	60b9      	str	r1, [r7, #8]
 8010aa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	3b04      	subs	r3, #4
 8010aac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	3b04      	subs	r3, #4
 8010aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	f023 0201 	bic.w	r2, r3, #1
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	3b04      	subs	r3, #4
 8010aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010acc:	4a0c      	ldr	r2, [pc, #48]	@ (8010b00 <pxPortInitialiseStack+0x64>)
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	3b14      	subs	r3, #20
 8010ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	3b04      	subs	r3, #4
 8010ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f06f 0202 	mvn.w	r2, #2
 8010aea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	3b20      	subs	r3, #32
 8010af0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010af2:	68fb      	ldr	r3, [r7, #12]
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3714      	adds	r7, #20
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr
 8010b00:	08010b05 	.word	0x08010b05

08010b04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b0e:	4b13      	ldr	r3, [pc, #76]	@ (8010b5c <prvTaskExitError+0x58>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b16:	d00b      	beq.n	8010b30 <prvTaskExitError+0x2c>
	__asm volatile
 8010b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b1c:	f383 8811 	msr	BASEPRI, r3
 8010b20:	f3bf 8f6f 	isb	sy
 8010b24:	f3bf 8f4f 	dsb	sy
 8010b28:	60fb      	str	r3, [r7, #12]
}
 8010b2a:	bf00      	nop
 8010b2c:	bf00      	nop
 8010b2e:	e7fd      	b.n	8010b2c <prvTaskExitError+0x28>
	__asm volatile
 8010b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b34:	f383 8811 	msr	BASEPRI, r3
 8010b38:	f3bf 8f6f 	isb	sy
 8010b3c:	f3bf 8f4f 	dsb	sy
 8010b40:	60bb      	str	r3, [r7, #8]
}
 8010b42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010b44:	bf00      	nop
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d0fc      	beq.n	8010b46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b4c:	bf00      	nop
 8010b4e:	bf00      	nop
 8010b50:	3714      	adds	r7, #20
 8010b52:	46bd      	mov	sp, r7
 8010b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop
 8010b5c:	2000002c 	.word	0x2000002c

08010b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010b60:	4b07      	ldr	r3, [pc, #28]	@ (8010b80 <pxCurrentTCBConst2>)
 8010b62:	6819      	ldr	r1, [r3, #0]
 8010b64:	6808      	ldr	r0, [r1, #0]
 8010b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b6a:	f380 8809 	msr	PSP, r0
 8010b6e:	f3bf 8f6f 	isb	sy
 8010b72:	f04f 0000 	mov.w	r0, #0
 8010b76:	f380 8811 	msr	BASEPRI, r0
 8010b7a:	4770      	bx	lr
 8010b7c:	f3af 8000 	nop.w

08010b80 <pxCurrentTCBConst2>:
 8010b80:	200007e0 	.word	0x200007e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010b84:	bf00      	nop
 8010b86:	bf00      	nop

08010b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010b88:	4808      	ldr	r0, [pc, #32]	@ (8010bac <prvPortStartFirstTask+0x24>)
 8010b8a:	6800      	ldr	r0, [r0, #0]
 8010b8c:	6800      	ldr	r0, [r0, #0]
 8010b8e:	f380 8808 	msr	MSP, r0
 8010b92:	f04f 0000 	mov.w	r0, #0
 8010b96:	f380 8814 	msr	CONTROL, r0
 8010b9a:	b662      	cpsie	i
 8010b9c:	b661      	cpsie	f
 8010b9e:	f3bf 8f4f 	dsb	sy
 8010ba2:	f3bf 8f6f 	isb	sy
 8010ba6:	df00      	svc	0
 8010ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010baa:	bf00      	nop
 8010bac:	e000ed08 	.word	0xe000ed08

08010bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b086      	sub	sp, #24
 8010bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010bb6:	4b47      	ldr	r3, [pc, #284]	@ (8010cd4 <xPortStartScheduler+0x124>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	4a47      	ldr	r2, [pc, #284]	@ (8010cd8 <xPortStartScheduler+0x128>)
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d10b      	bne.n	8010bd8 <xPortStartScheduler+0x28>
	__asm volatile
 8010bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bc4:	f383 8811 	msr	BASEPRI, r3
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	f3bf 8f4f 	dsb	sy
 8010bd0:	613b      	str	r3, [r7, #16]
}
 8010bd2:	bf00      	nop
 8010bd4:	bf00      	nop
 8010bd6:	e7fd      	b.n	8010bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8010cd4 <xPortStartScheduler+0x124>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8010cdc <xPortStartScheduler+0x12c>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d10b      	bne.n	8010bfa <xPortStartScheduler+0x4a>
	__asm volatile
 8010be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010be6:	f383 8811 	msr	BASEPRI, r3
 8010bea:	f3bf 8f6f 	isb	sy
 8010bee:	f3bf 8f4f 	dsb	sy
 8010bf2:	60fb      	str	r3, [r7, #12]
}
 8010bf4:	bf00      	nop
 8010bf6:	bf00      	nop
 8010bf8:	e7fd      	b.n	8010bf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010bfa:	4b39      	ldr	r3, [pc, #228]	@ (8010ce0 <xPortStartScheduler+0x130>)
 8010bfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	22ff      	movs	r2, #255	@ 0xff
 8010c0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	781b      	ldrb	r3, [r3, #0]
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c14:	78fb      	ldrb	r3, [r7, #3]
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010c1c:	b2da      	uxtb	r2, r3
 8010c1e:	4b31      	ldr	r3, [pc, #196]	@ (8010ce4 <xPortStartScheduler+0x134>)
 8010c20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010c22:	4b31      	ldr	r3, [pc, #196]	@ (8010ce8 <xPortStartScheduler+0x138>)
 8010c24:	2207      	movs	r2, #7
 8010c26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c28:	e009      	b.n	8010c3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8010c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8010ce8 <xPortStartScheduler+0x138>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	4a2d      	ldr	r2, [pc, #180]	@ (8010ce8 <xPortStartScheduler+0x138>)
 8010c32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c34:	78fb      	ldrb	r3, [r7, #3]
 8010c36:	b2db      	uxtb	r3, r3
 8010c38:	005b      	lsls	r3, r3, #1
 8010c3a:	b2db      	uxtb	r3, r3
 8010c3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c3e:	78fb      	ldrb	r3, [r7, #3]
 8010c40:	b2db      	uxtb	r3, r3
 8010c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c46:	2b80      	cmp	r3, #128	@ 0x80
 8010c48:	d0ef      	beq.n	8010c2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010c4a:	4b27      	ldr	r3, [pc, #156]	@ (8010ce8 <xPortStartScheduler+0x138>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f1c3 0307 	rsb	r3, r3, #7
 8010c52:	2b04      	cmp	r3, #4
 8010c54:	d00b      	beq.n	8010c6e <xPortStartScheduler+0xbe>
	__asm volatile
 8010c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c5a:	f383 8811 	msr	BASEPRI, r3
 8010c5e:	f3bf 8f6f 	isb	sy
 8010c62:	f3bf 8f4f 	dsb	sy
 8010c66:	60bb      	str	r3, [r7, #8]
}
 8010c68:	bf00      	nop
 8010c6a:	bf00      	nop
 8010c6c:	e7fd      	b.n	8010c6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8010ce8 <xPortStartScheduler+0x138>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	021b      	lsls	r3, r3, #8
 8010c74:	4a1c      	ldr	r2, [pc, #112]	@ (8010ce8 <xPortStartScheduler+0x138>)
 8010c76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010c78:	4b1b      	ldr	r3, [pc, #108]	@ (8010ce8 <xPortStartScheduler+0x138>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010c80:	4a19      	ldr	r2, [pc, #100]	@ (8010ce8 <xPortStartScheduler+0x138>)
 8010c82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	b2da      	uxtb	r2, r3
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010c8c:	4b17      	ldr	r3, [pc, #92]	@ (8010cec <xPortStartScheduler+0x13c>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a16      	ldr	r2, [pc, #88]	@ (8010cec <xPortStartScheduler+0x13c>)
 8010c92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010c96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010c98:	4b14      	ldr	r3, [pc, #80]	@ (8010cec <xPortStartScheduler+0x13c>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4a13      	ldr	r2, [pc, #76]	@ (8010cec <xPortStartScheduler+0x13c>)
 8010c9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010ca2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010ca4:	f000 f8da 	bl	8010e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010ca8:	4b11      	ldr	r3, [pc, #68]	@ (8010cf0 <xPortStartScheduler+0x140>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010cae:	f000 f8f9 	bl	8010ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010cb2:	4b10      	ldr	r3, [pc, #64]	@ (8010cf4 <xPortStartScheduler+0x144>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8010cf4 <xPortStartScheduler+0x144>)
 8010cb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010cbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010cbe:	f7ff ff63 	bl	8010b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010cc2:	f7ff fb75 	bl	80103b0 <vTaskSwitchContext>
	prvTaskExitError();
 8010cc6:	f7ff ff1d 	bl	8010b04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010cca:	2300      	movs	r3, #0
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3718      	adds	r7, #24
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	e000ed00 	.word	0xe000ed00
 8010cd8:	410fc271 	.word	0x410fc271
 8010cdc:	410fc270 	.word	0x410fc270
 8010ce0:	e000e400 	.word	0xe000e400
 8010ce4:	2000090c 	.word	0x2000090c
 8010ce8:	20000910 	.word	0x20000910
 8010cec:	e000ed20 	.word	0xe000ed20
 8010cf0:	2000002c 	.word	0x2000002c
 8010cf4:	e000ef34 	.word	0xe000ef34

08010cf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8010cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d02:	f383 8811 	msr	BASEPRI, r3
 8010d06:	f3bf 8f6f 	isb	sy
 8010d0a:	f3bf 8f4f 	dsb	sy
 8010d0e:	607b      	str	r3, [r7, #4]
}
 8010d10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010d12:	4b10      	ldr	r3, [pc, #64]	@ (8010d54 <vPortEnterCritical+0x5c>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	3301      	adds	r3, #1
 8010d18:	4a0e      	ldr	r2, [pc, #56]	@ (8010d54 <vPortEnterCritical+0x5c>)
 8010d1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8010d54 <vPortEnterCritical+0x5c>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d110      	bne.n	8010d46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010d24:	4b0c      	ldr	r3, [pc, #48]	@ (8010d58 <vPortEnterCritical+0x60>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00b      	beq.n	8010d46 <vPortEnterCritical+0x4e>
	__asm volatile
 8010d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d32:	f383 8811 	msr	BASEPRI, r3
 8010d36:	f3bf 8f6f 	isb	sy
 8010d3a:	f3bf 8f4f 	dsb	sy
 8010d3e:	603b      	str	r3, [r7, #0]
}
 8010d40:	bf00      	nop
 8010d42:	bf00      	nop
 8010d44:	e7fd      	b.n	8010d42 <vPortEnterCritical+0x4a>
	}
}
 8010d46:	bf00      	nop
 8010d48:	370c      	adds	r7, #12
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d50:	4770      	bx	lr
 8010d52:	bf00      	nop
 8010d54:	2000002c 	.word	0x2000002c
 8010d58:	e000ed04 	.word	0xe000ed04

08010d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	b083      	sub	sp, #12
 8010d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010d62:	4b12      	ldr	r3, [pc, #72]	@ (8010dac <vPortExitCritical+0x50>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d10b      	bne.n	8010d82 <vPortExitCritical+0x26>
	__asm volatile
 8010d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d6e:	f383 8811 	msr	BASEPRI, r3
 8010d72:	f3bf 8f6f 	isb	sy
 8010d76:	f3bf 8f4f 	dsb	sy
 8010d7a:	607b      	str	r3, [r7, #4]
}
 8010d7c:	bf00      	nop
 8010d7e:	bf00      	nop
 8010d80:	e7fd      	b.n	8010d7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010d82:	4b0a      	ldr	r3, [pc, #40]	@ (8010dac <vPortExitCritical+0x50>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	3b01      	subs	r3, #1
 8010d88:	4a08      	ldr	r2, [pc, #32]	@ (8010dac <vPortExitCritical+0x50>)
 8010d8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010d8c:	4b07      	ldr	r3, [pc, #28]	@ (8010dac <vPortExitCritical+0x50>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d105      	bne.n	8010da0 <vPortExitCritical+0x44>
 8010d94:	2300      	movs	r3, #0
 8010d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	f383 8811 	msr	BASEPRI, r3
}
 8010d9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010da0:	bf00      	nop
 8010da2:	370c      	adds	r7, #12
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr
 8010dac:	2000002c 	.word	0x2000002c

08010db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010db0:	f3ef 8009 	mrs	r0, PSP
 8010db4:	f3bf 8f6f 	isb	sy
 8010db8:	4b15      	ldr	r3, [pc, #84]	@ (8010e10 <pxCurrentTCBConst>)
 8010dba:	681a      	ldr	r2, [r3, #0]
 8010dbc:	f01e 0f10 	tst.w	lr, #16
 8010dc0:	bf08      	it	eq
 8010dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dca:	6010      	str	r0, [r2, #0]
 8010dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010dd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010dd4:	f380 8811 	msr	BASEPRI, r0
 8010dd8:	f3bf 8f4f 	dsb	sy
 8010ddc:	f3bf 8f6f 	isb	sy
 8010de0:	f7ff fae6 	bl	80103b0 <vTaskSwitchContext>
 8010de4:	f04f 0000 	mov.w	r0, #0
 8010de8:	f380 8811 	msr	BASEPRI, r0
 8010dec:	bc09      	pop	{r0, r3}
 8010dee:	6819      	ldr	r1, [r3, #0]
 8010df0:	6808      	ldr	r0, [r1, #0]
 8010df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df6:	f01e 0f10 	tst.w	lr, #16
 8010dfa:	bf08      	it	eq
 8010dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010e00:	f380 8809 	msr	PSP, r0
 8010e04:	f3bf 8f6f 	isb	sy
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop
 8010e0c:	f3af 8000 	nop.w

08010e10 <pxCurrentTCBConst>:
 8010e10:	200007e0 	.word	0x200007e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010e14:	bf00      	nop
 8010e16:	bf00      	nop

08010e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8010e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e22:	f383 8811 	msr	BASEPRI, r3
 8010e26:	f3bf 8f6f 	isb	sy
 8010e2a:	f3bf 8f4f 	dsb	sy
 8010e2e:	607b      	str	r3, [r7, #4]
}
 8010e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e32:	f7ff fa03 	bl	801023c <xTaskIncrementTick>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d003      	beq.n	8010e44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e3c:	4b06      	ldr	r3, [pc, #24]	@ (8010e58 <SysTick_Handler+0x40>)
 8010e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e42:	601a      	str	r2, [r3, #0]
 8010e44:	2300      	movs	r3, #0
 8010e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	f383 8811 	msr	BASEPRI, r3
}
 8010e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010e50:	bf00      	nop
 8010e52:	3708      	adds	r7, #8
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	e000ed04 	.word	0xe000ed04

08010e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010e60:	4b0b      	ldr	r3, [pc, #44]	@ (8010e90 <vPortSetupTimerInterrupt+0x34>)
 8010e62:	2200      	movs	r2, #0
 8010e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010e66:	4b0b      	ldr	r3, [pc, #44]	@ (8010e94 <vPortSetupTimerInterrupt+0x38>)
 8010e68:	2200      	movs	r2, #0
 8010e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010e98 <vPortSetupTimerInterrupt+0x3c>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4a0a      	ldr	r2, [pc, #40]	@ (8010e9c <vPortSetupTimerInterrupt+0x40>)
 8010e72:	fba2 2303 	umull	r2, r3, r2, r3
 8010e76:	099b      	lsrs	r3, r3, #6
 8010e78:	4a09      	ldr	r2, [pc, #36]	@ (8010ea0 <vPortSetupTimerInterrupt+0x44>)
 8010e7a:	3b01      	subs	r3, #1
 8010e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010e7e:	4b04      	ldr	r3, [pc, #16]	@ (8010e90 <vPortSetupTimerInterrupt+0x34>)
 8010e80:	2207      	movs	r2, #7
 8010e82:	601a      	str	r2, [r3, #0]
}
 8010e84:	bf00      	nop
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	e000e010 	.word	0xe000e010
 8010e94:	e000e018 	.word	0xe000e018
 8010e98:	20000000 	.word	0x20000000
 8010e9c:	10624dd3 	.word	0x10624dd3
 8010ea0:	e000e014 	.word	0xe000e014

08010ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010eb4 <vPortEnableVFP+0x10>
 8010ea8:	6801      	ldr	r1, [r0, #0]
 8010eaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010eae:	6001      	str	r1, [r0, #0]
 8010eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010eb2:	bf00      	nop
 8010eb4:	e000ed88 	.word	0xe000ed88

08010eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010eb8:	b480      	push	{r7}
 8010eba:	b085      	sub	sp, #20
 8010ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010ebe:	f3ef 8305 	mrs	r3, IPSR
 8010ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	2b0f      	cmp	r3, #15
 8010ec8:	d915      	bls.n	8010ef6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010eca:	4a18      	ldr	r2, [pc, #96]	@ (8010f2c <vPortValidateInterruptPriority+0x74>)
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	4413      	add	r3, r2
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ed4:	4b16      	ldr	r3, [pc, #88]	@ (8010f30 <vPortValidateInterruptPriority+0x78>)
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	7afa      	ldrb	r2, [r7, #11]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d20b      	bcs.n	8010ef6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ee2:	f383 8811 	msr	BASEPRI, r3
 8010ee6:	f3bf 8f6f 	isb	sy
 8010eea:	f3bf 8f4f 	dsb	sy
 8010eee:	607b      	str	r3, [r7, #4]
}
 8010ef0:	bf00      	nop
 8010ef2:	bf00      	nop
 8010ef4:	e7fd      	b.n	8010ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8010f34 <vPortValidateInterruptPriority+0x7c>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010efe:	4b0e      	ldr	r3, [pc, #56]	@ (8010f38 <vPortValidateInterruptPriority+0x80>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d90b      	bls.n	8010f1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f0a:	f383 8811 	msr	BASEPRI, r3
 8010f0e:	f3bf 8f6f 	isb	sy
 8010f12:	f3bf 8f4f 	dsb	sy
 8010f16:	603b      	str	r3, [r7, #0]
}
 8010f18:	bf00      	nop
 8010f1a:	bf00      	nop
 8010f1c:	e7fd      	b.n	8010f1a <vPortValidateInterruptPriority+0x62>
	}
 8010f1e:	bf00      	nop
 8010f20:	3714      	adds	r7, #20
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop
 8010f2c:	e000e3f0 	.word	0xe000e3f0
 8010f30:	2000090c 	.word	0x2000090c
 8010f34:	e000ed0c 	.word	0xe000ed0c
 8010f38:	20000910 	.word	0x20000910

08010f3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b08a      	sub	sp, #40	@ 0x28
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010f44:	2300      	movs	r3, #0
 8010f46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010f48:	f7ff f8aa 	bl	80100a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010f4c:	4b5f      	ldr	r3, [pc, #380]	@ (80110cc <pvPortMalloc+0x190>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d101      	bne.n	8010f58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010f54:	f000 f92a 	bl	80111ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010f58:	4b5d      	ldr	r3, [pc, #372]	@ (80110d0 <pvPortMalloc+0x194>)
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	4013      	ands	r3, r2
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	f040 8095 	bne.w	8011090 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d01e      	beq.n	8010faa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010f6c:	2208      	movs	r2, #8
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4413      	add	r3, r2
 8010f72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f003 0307 	and.w	r3, r3, #7
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d015      	beq.n	8010faa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f023 0307 	bic.w	r3, r3, #7
 8010f84:	3308      	adds	r3, #8
 8010f86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f003 0307 	and.w	r3, r3, #7
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d00b      	beq.n	8010faa <pvPortMalloc+0x6e>
	__asm volatile
 8010f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f96:	f383 8811 	msr	BASEPRI, r3
 8010f9a:	f3bf 8f6f 	isb	sy
 8010f9e:	f3bf 8f4f 	dsb	sy
 8010fa2:	617b      	str	r3, [r7, #20]
}
 8010fa4:	bf00      	nop
 8010fa6:	bf00      	nop
 8010fa8:	e7fd      	b.n	8010fa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d06f      	beq.n	8011090 <pvPortMalloc+0x154>
 8010fb0:	4b48      	ldr	r3, [pc, #288]	@ (80110d4 <pvPortMalloc+0x198>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d86a      	bhi.n	8011090 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010fba:	4b47      	ldr	r3, [pc, #284]	@ (80110d8 <pvPortMalloc+0x19c>)
 8010fbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010fbe:	4b46      	ldr	r3, [pc, #280]	@ (80110d8 <pvPortMalloc+0x19c>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fc4:	e004      	b.n	8010fd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d903      	bls.n	8010fe2 <pvPortMalloc+0xa6>
 8010fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1f1      	bne.n	8010fc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010fe2:	4b3a      	ldr	r3, [pc, #232]	@ (80110cc <pvPortMalloc+0x190>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d051      	beq.n	8011090 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010fec:	6a3b      	ldr	r3, [r7, #32]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2208      	movs	r2, #8
 8010ff2:	4413      	add	r3, r2
 8010ff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff8:	681a      	ldr	r2, [r3, #0]
 8010ffa:	6a3b      	ldr	r3, [r7, #32]
 8010ffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011000:	685a      	ldr	r2, [r3, #4]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	1ad2      	subs	r2, r2, r3
 8011006:	2308      	movs	r3, #8
 8011008:	005b      	lsls	r3, r3, #1
 801100a:	429a      	cmp	r2, r3
 801100c:	d920      	bls.n	8011050 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801100e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	4413      	add	r3, r2
 8011014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	f003 0307 	and.w	r3, r3, #7
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00b      	beq.n	8011038 <pvPortMalloc+0xfc>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	613b      	str	r3, [r7, #16]
}
 8011032:	bf00      	nop
 8011034:	bf00      	nop
 8011036:	e7fd      	b.n	8011034 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801103a:	685a      	ldr	r2, [r3, #4]
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	1ad2      	subs	r2, r2, r3
 8011040:	69bb      	ldr	r3, [r7, #24]
 8011042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011046:	687a      	ldr	r2, [r7, #4]
 8011048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801104a:	69b8      	ldr	r0, [r7, #24]
 801104c:	f000 f910 	bl	8011270 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011050:	4b20      	ldr	r3, [pc, #128]	@ (80110d4 <pvPortMalloc+0x198>)
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	1ad3      	subs	r3, r2, r3
 801105a:	4a1e      	ldr	r2, [pc, #120]	@ (80110d4 <pvPortMalloc+0x198>)
 801105c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801105e:	4b1d      	ldr	r3, [pc, #116]	@ (80110d4 <pvPortMalloc+0x198>)
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	4b1e      	ldr	r3, [pc, #120]	@ (80110dc <pvPortMalloc+0x1a0>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	429a      	cmp	r2, r3
 8011068:	d203      	bcs.n	8011072 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801106a:	4b1a      	ldr	r3, [pc, #104]	@ (80110d4 <pvPortMalloc+0x198>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	4a1b      	ldr	r2, [pc, #108]	@ (80110dc <pvPortMalloc+0x1a0>)
 8011070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011074:	685a      	ldr	r2, [r3, #4]
 8011076:	4b16      	ldr	r3, [pc, #88]	@ (80110d0 <pvPortMalloc+0x194>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	431a      	orrs	r2, r3
 801107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801107e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011082:	2200      	movs	r2, #0
 8011084:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011086:	4b16      	ldr	r3, [pc, #88]	@ (80110e0 <pvPortMalloc+0x1a4>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	3301      	adds	r3, #1
 801108c:	4a14      	ldr	r2, [pc, #80]	@ (80110e0 <pvPortMalloc+0x1a4>)
 801108e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011090:	f7ff f814 	bl	80100bc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8011094:	69fb      	ldr	r3, [r7, #28]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d101      	bne.n	801109e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801109a:	f7ef fa3b 	bl	8000514 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801109e:	69fb      	ldr	r3, [r7, #28]
 80110a0:	f003 0307 	and.w	r3, r3, #7
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d00b      	beq.n	80110c0 <pvPortMalloc+0x184>
	__asm volatile
 80110a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ac:	f383 8811 	msr	BASEPRI, r3
 80110b0:	f3bf 8f6f 	isb	sy
 80110b4:	f3bf 8f4f 	dsb	sy
 80110b8:	60fb      	str	r3, [r7, #12]
}
 80110ba:	bf00      	nop
 80110bc:	bf00      	nop
 80110be:	e7fd      	b.n	80110bc <pvPortMalloc+0x180>
	return pvReturn;
 80110c0:	69fb      	ldr	r3, [r7, #28]
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3728      	adds	r7, #40	@ 0x28
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	2000891c 	.word	0x2000891c
 80110d0:	20008930 	.word	0x20008930
 80110d4:	20008920 	.word	0x20008920
 80110d8:	20008914 	.word	0x20008914
 80110dc:	20008924 	.word	0x20008924
 80110e0:	20008928 	.word	0x20008928

080110e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b086      	sub	sp, #24
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d04f      	beq.n	8011196 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80110f6:	2308      	movs	r3, #8
 80110f8:	425b      	negs	r3, r3
 80110fa:	697a      	ldr	r2, [r7, #20]
 80110fc:	4413      	add	r3, r2
 80110fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	685a      	ldr	r2, [r3, #4]
 8011108:	4b25      	ldr	r3, [pc, #148]	@ (80111a0 <vPortFree+0xbc>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4013      	ands	r3, r2
 801110e:	2b00      	cmp	r3, #0
 8011110:	d10b      	bne.n	801112a <vPortFree+0x46>
	__asm volatile
 8011112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011116:	f383 8811 	msr	BASEPRI, r3
 801111a:	f3bf 8f6f 	isb	sy
 801111e:	f3bf 8f4f 	dsb	sy
 8011122:	60fb      	str	r3, [r7, #12]
}
 8011124:	bf00      	nop
 8011126:	bf00      	nop
 8011128:	e7fd      	b.n	8011126 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801112a:	693b      	ldr	r3, [r7, #16]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d00b      	beq.n	801114a <vPortFree+0x66>
	__asm volatile
 8011132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011136:	f383 8811 	msr	BASEPRI, r3
 801113a:	f3bf 8f6f 	isb	sy
 801113e:	f3bf 8f4f 	dsb	sy
 8011142:	60bb      	str	r3, [r7, #8]
}
 8011144:	bf00      	nop
 8011146:	bf00      	nop
 8011148:	e7fd      	b.n	8011146 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	685a      	ldr	r2, [r3, #4]
 801114e:	4b14      	ldr	r3, [pc, #80]	@ (80111a0 <vPortFree+0xbc>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4013      	ands	r3, r2
 8011154:	2b00      	cmp	r3, #0
 8011156:	d01e      	beq.n	8011196 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d11a      	bne.n	8011196 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	685a      	ldr	r2, [r3, #4]
 8011164:	4b0e      	ldr	r3, [pc, #56]	@ (80111a0 <vPortFree+0xbc>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	43db      	mvns	r3, r3
 801116a:	401a      	ands	r2, r3
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011170:	f7fe ff96 	bl	80100a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	685a      	ldr	r2, [r3, #4]
 8011178:	4b0a      	ldr	r3, [pc, #40]	@ (80111a4 <vPortFree+0xc0>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4413      	add	r3, r2
 801117e:	4a09      	ldr	r2, [pc, #36]	@ (80111a4 <vPortFree+0xc0>)
 8011180:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011182:	6938      	ldr	r0, [r7, #16]
 8011184:	f000 f874 	bl	8011270 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011188:	4b07      	ldr	r3, [pc, #28]	@ (80111a8 <vPortFree+0xc4>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	3301      	adds	r3, #1
 801118e:	4a06      	ldr	r2, [pc, #24]	@ (80111a8 <vPortFree+0xc4>)
 8011190:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011192:	f7fe ff93 	bl	80100bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011196:	bf00      	nop
 8011198:	3718      	adds	r7, #24
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop
 80111a0:	20008930 	.word	0x20008930
 80111a4:	20008920 	.word	0x20008920
 80111a8:	2000892c 	.word	0x2000892c

080111ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80111ac:	b480      	push	{r7}
 80111ae:	b085      	sub	sp, #20
 80111b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80111b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80111b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80111b8:	4b27      	ldr	r3, [pc, #156]	@ (8011258 <prvHeapInit+0xac>)
 80111ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f003 0307 	and.w	r3, r3, #7
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d00c      	beq.n	80111e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	3307      	adds	r3, #7
 80111ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	f023 0307 	bic.w	r3, r3, #7
 80111d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80111d4:	68ba      	ldr	r2, [r7, #8]
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	4a1f      	ldr	r2, [pc, #124]	@ (8011258 <prvHeapInit+0xac>)
 80111dc:	4413      	add	r3, r2
 80111de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80111e4:	4a1d      	ldr	r2, [pc, #116]	@ (801125c <prvHeapInit+0xb0>)
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80111ea:	4b1c      	ldr	r3, [pc, #112]	@ (801125c <prvHeapInit+0xb0>)
 80111ec:	2200      	movs	r2, #0
 80111ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	68ba      	ldr	r2, [r7, #8]
 80111f4:	4413      	add	r3, r2
 80111f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80111f8:	2208      	movs	r2, #8
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	1a9b      	subs	r3, r3, r2
 80111fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	f023 0307 	bic.w	r3, r3, #7
 8011206:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	4a15      	ldr	r2, [pc, #84]	@ (8011260 <prvHeapInit+0xb4>)
 801120c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801120e:	4b14      	ldr	r3, [pc, #80]	@ (8011260 <prvHeapInit+0xb4>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	2200      	movs	r2, #0
 8011214:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011216:	4b12      	ldr	r3, [pc, #72]	@ (8011260 <prvHeapInit+0xb4>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2200      	movs	r2, #0
 801121c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	68fa      	ldr	r2, [r7, #12]
 8011226:	1ad2      	subs	r2, r2, r3
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801122c:	4b0c      	ldr	r3, [pc, #48]	@ (8011260 <prvHeapInit+0xb4>)
 801122e:	681a      	ldr	r2, [r3, #0]
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	4a0a      	ldr	r2, [pc, #40]	@ (8011264 <prvHeapInit+0xb8>)
 801123a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	685b      	ldr	r3, [r3, #4]
 8011240:	4a09      	ldr	r2, [pc, #36]	@ (8011268 <prvHeapInit+0xbc>)
 8011242:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011244:	4b09      	ldr	r3, [pc, #36]	@ (801126c <prvHeapInit+0xc0>)
 8011246:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801124a:	601a      	str	r2, [r3, #0]
}
 801124c:	bf00      	nop
 801124e:	3714      	adds	r7, #20
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr
 8011258:	20000914 	.word	0x20000914
 801125c:	20008914 	.word	0x20008914
 8011260:	2000891c 	.word	0x2000891c
 8011264:	20008924 	.word	0x20008924
 8011268:	20008920 	.word	0x20008920
 801126c:	20008930 	.word	0x20008930

08011270 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011270:	b480      	push	{r7}
 8011272:	b085      	sub	sp, #20
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011278:	4b28      	ldr	r3, [pc, #160]	@ (801131c <prvInsertBlockIntoFreeList+0xac>)
 801127a:	60fb      	str	r3, [r7, #12]
 801127c:	e002      	b.n	8011284 <prvInsertBlockIntoFreeList+0x14>
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	60fb      	str	r3, [r7, #12]
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	687a      	ldr	r2, [r7, #4]
 801128a:	429a      	cmp	r2, r3
 801128c:	d8f7      	bhi.n	801127e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	68ba      	ldr	r2, [r7, #8]
 8011298:	4413      	add	r3, r2
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	429a      	cmp	r2, r3
 801129e:	d108      	bne.n	80112b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	685a      	ldr	r2, [r3, #4]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	441a      	add	r2, r3
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	68ba      	ldr	r2, [r7, #8]
 80112bc:	441a      	add	r2, r3
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d118      	bne.n	80112f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	4b15      	ldr	r3, [pc, #84]	@ (8011320 <prvInsertBlockIntoFreeList+0xb0>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d00d      	beq.n	80112ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	685a      	ldr	r2, [r3, #4]
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	441a      	add	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	681a      	ldr	r2, [r3, #0]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	601a      	str	r2, [r3, #0]
 80112ec:	e008      	b.n	8011300 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80112ee:	4b0c      	ldr	r3, [pc, #48]	@ (8011320 <prvInsertBlockIntoFreeList+0xb0>)
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	601a      	str	r2, [r3, #0]
 80112f6:	e003      	b.n	8011300 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681a      	ldr	r2, [r3, #0]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011300:	68fa      	ldr	r2, [r7, #12]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	429a      	cmp	r2, r3
 8011306:	d002      	beq.n	801130e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801130e:	bf00      	nop
 8011310:	3714      	adds	r7, #20
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	20008914 	.word	0x20008914
 8011320:	2000891c 	.word	0x2000891c

08011324 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011328:	2201      	movs	r2, #1
 801132a:	490e      	ldr	r1, [pc, #56]	@ (8011364 <MX_USB_HOST_Init+0x40>)
 801132c:	480e      	ldr	r0, [pc, #56]	@ (8011368 <MX_USB_HOST_Init+0x44>)
 801132e:	f7fb fd77 	bl	800ce20 <USBH_Init>
 8011332:	4603      	mov	r3, r0
 8011334:	2b00      	cmp	r3, #0
 8011336:	d001      	beq.n	801133c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011338:	f7ef ff4c 	bl	80011d4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801133c:	490b      	ldr	r1, [pc, #44]	@ (801136c <MX_USB_HOST_Init+0x48>)
 801133e:	480a      	ldr	r0, [pc, #40]	@ (8011368 <MX_USB_HOST_Init+0x44>)
 8011340:	f7fb fe43 	bl	800cfca <USBH_RegisterClass>
 8011344:	4603      	mov	r3, r0
 8011346:	2b00      	cmp	r3, #0
 8011348:	d001      	beq.n	801134e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801134a:	f7ef ff43 	bl	80011d4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801134e:	4806      	ldr	r0, [pc, #24]	@ (8011368 <MX_USB_HOST_Init+0x44>)
 8011350:	f7fb fec7 	bl	800d0e2 <USBH_Start>
 8011354:	4603      	mov	r3, r0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d001      	beq.n	801135e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801135a:	f7ef ff3b 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801135e:	bf00      	nop
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	08011371 	.word	0x08011371
 8011368:	20008934 	.word	0x20008934
 801136c:	2000000c 	.word	0x2000000c

08011370 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011370:	b480      	push	{r7}
 8011372:	b083      	sub	sp, #12
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	460b      	mov	r3, r1
 801137a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801137c:	78fb      	ldrb	r3, [r7, #3]
 801137e:	3b01      	subs	r3, #1
 8011380:	2b04      	cmp	r3, #4
 8011382:	d819      	bhi.n	80113b8 <USBH_UserProcess+0x48>
 8011384:	a201      	add	r2, pc, #4	@ (adr r2, 801138c <USBH_UserProcess+0x1c>)
 8011386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801138a:	bf00      	nop
 801138c:	080113b9 	.word	0x080113b9
 8011390:	080113a9 	.word	0x080113a9
 8011394:	080113b9 	.word	0x080113b9
 8011398:	080113b1 	.word	0x080113b1
 801139c:	080113a1 	.word	0x080113a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80113a0:	4b09      	ldr	r3, [pc, #36]	@ (80113c8 <USBH_UserProcess+0x58>)
 80113a2:	2203      	movs	r2, #3
 80113a4:	701a      	strb	r2, [r3, #0]
  break;
 80113a6:	e008      	b.n	80113ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80113a8:	4b07      	ldr	r3, [pc, #28]	@ (80113c8 <USBH_UserProcess+0x58>)
 80113aa:	2202      	movs	r2, #2
 80113ac:	701a      	strb	r2, [r3, #0]
  break;
 80113ae:	e004      	b.n	80113ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80113b0:	4b05      	ldr	r3, [pc, #20]	@ (80113c8 <USBH_UserProcess+0x58>)
 80113b2:	2201      	movs	r2, #1
 80113b4:	701a      	strb	r2, [r3, #0]
  break;
 80113b6:	e000      	b.n	80113ba <USBH_UserProcess+0x4a>

  default:
  break;
 80113b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80113ba:	bf00      	nop
 80113bc:	370c      	adds	r7, #12
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr
 80113c6:	bf00      	nop
 80113c8:	20008d18 	.word	0x20008d18

080113cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b08a      	sub	sp, #40	@ 0x28
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80113d4:	f107 0314 	add.w	r3, r7, #20
 80113d8:	2200      	movs	r2, #0
 80113da:	601a      	str	r2, [r3, #0]
 80113dc:	605a      	str	r2, [r3, #4]
 80113de:	609a      	str	r2, [r3, #8]
 80113e0:	60da      	str	r2, [r3, #12]
 80113e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80113ec:	d147      	bne.n	801147e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80113ee:	2300      	movs	r3, #0
 80113f0:	613b      	str	r3, [r7, #16]
 80113f2:	4b25      	ldr	r3, [pc, #148]	@ (8011488 <HAL_HCD_MspInit+0xbc>)
 80113f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113f6:	4a24      	ldr	r2, [pc, #144]	@ (8011488 <HAL_HCD_MspInit+0xbc>)
 80113f8:	f043 0301 	orr.w	r3, r3, #1
 80113fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80113fe:	4b22      	ldr	r3, [pc, #136]	@ (8011488 <HAL_HCD_MspInit+0xbc>)
 8011400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011402:	f003 0301 	and.w	r3, r3, #1
 8011406:	613b      	str	r3, [r7, #16]
 8011408:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 801140a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011410:	2302      	movs	r3, #2
 8011412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011414:	2300      	movs	r3, #0
 8011416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011418:	2303      	movs	r3, #3
 801141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801141c:	230a      	movs	r3, #10
 801141e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011420:	f107 0314 	add.w	r3, r7, #20
 8011424:	4619      	mov	r1, r3
 8011426:	4819      	ldr	r0, [pc, #100]	@ (801148c <HAL_HCD_MspInit+0xc0>)
 8011428:	f7f2 f9d4 	bl	80037d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 801142c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011432:	2302      	movs	r3, #2
 8011434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011436:	2300      	movs	r3, #0
 8011438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 801143a:	f107 0314 	add.w	r3, r7, #20
 801143e:	4619      	mov	r1, r3
 8011440:	4812      	ldr	r0, [pc, #72]	@ (801148c <HAL_HCD_MspInit+0xc0>)
 8011442:	f7f2 f9c7 	bl	80037d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011446:	4b10      	ldr	r3, [pc, #64]	@ (8011488 <HAL_HCD_MspInit+0xbc>)
 8011448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801144a:	4a0f      	ldr	r2, [pc, #60]	@ (8011488 <HAL_HCD_MspInit+0xbc>)
 801144c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011450:	6353      	str	r3, [r2, #52]	@ 0x34
 8011452:	2300      	movs	r3, #0
 8011454:	60fb      	str	r3, [r7, #12]
 8011456:	4b0c      	ldr	r3, [pc, #48]	@ (8011488 <HAL_HCD_MspInit+0xbc>)
 8011458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801145a:	4a0b      	ldr	r2, [pc, #44]	@ (8011488 <HAL_HCD_MspInit+0xbc>)
 801145c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011460:	6453      	str	r3, [r2, #68]	@ 0x44
 8011462:	4b09      	ldr	r3, [pc, #36]	@ (8011488 <HAL_HCD_MspInit+0xbc>)
 8011464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801146a:	60fb      	str	r3, [r7, #12]
 801146c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801146e:	2200      	movs	r2, #0
 8011470:	2105      	movs	r1, #5
 8011472:	2043      	movs	r0, #67	@ 0x43
 8011474:	f7f0 fd66 	bl	8001f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011478:	2043      	movs	r0, #67	@ 0x43
 801147a:	f7f0 fd7f 	bl	8001f7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801147e:	bf00      	nop
 8011480:	3728      	adds	r7, #40	@ 0x28
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop
 8011488:	40023800 	.word	0x40023800
 801148c:	40020000 	.word	0x40020000

08011490 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801149e:	4618      	mov	r0, r3
 80114a0:	f7fc fad1 	bl	800da46 <USBH_LL_IncTimer>
}
 80114a4:	bf00      	nop
 80114a6:	3708      	adds	r7, #8
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b082      	sub	sp, #8
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fc fb15 	bl	800daea <USBH_LL_Connect>
}
 80114c0:	bf00      	nop
 80114c2:	3708      	adds	r7, #8
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7fc fb2a 	bl	800db30 <USBH_LL_Disconnect>
}
 80114dc:	bf00      	nop
 80114de:	3708      	adds	r7, #8
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b082      	sub	sp, #8
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	460b      	mov	r3, r1
 80114ee:	70fb      	strb	r3, [r7, #3]
 80114f0:	4613      	mov	r3, r2
 80114f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7fc fb5f 	bl	800dbbe <USBH_LL_NotifyURBChange>
#endif
}
 8011500:	bf00      	nop
 8011502:	3708      	adds	r7, #8
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011516:	4618      	mov	r0, r3
 8011518:	f7fc fabf 	bl	800da9a <USBH_LL_PortEnabled>
}
 801151c:	bf00      	nop
 801151e:	3708      	adds	r7, #8
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011532:	4618      	mov	r0, r3
 8011534:	f7fc facb 	bl	800dace <USBH_LL_PortDisabled>
}
 8011538:	bf00      	nop
 801153a:	3708      	adds	r7, #8
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801154e:	2b01      	cmp	r3, #1
 8011550:	d12a      	bne.n	80115a8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011552:	4a18      	ldr	r2, [pc, #96]	@ (80115b4 <USBH_LL_Init+0x74>)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	4a15      	ldr	r2, [pc, #84]	@ (80115b4 <USBH_LL_Init+0x74>)
 801155e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011562:	4b14      	ldr	r3, [pc, #80]	@ (80115b4 <USBH_LL_Init+0x74>)
 8011564:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8011568:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801156a:	4b12      	ldr	r3, [pc, #72]	@ (80115b4 <USBH_LL_Init+0x74>)
 801156c:	2208      	movs	r2, #8
 801156e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011570:	4b10      	ldr	r3, [pc, #64]	@ (80115b4 <USBH_LL_Init+0x74>)
 8011572:	2201      	movs	r2, #1
 8011574:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011576:	4b0f      	ldr	r3, [pc, #60]	@ (80115b4 <USBH_LL_Init+0x74>)
 8011578:	2200      	movs	r2, #0
 801157a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801157c:	4b0d      	ldr	r3, [pc, #52]	@ (80115b4 <USBH_LL_Init+0x74>)
 801157e:	2202      	movs	r2, #2
 8011580:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011582:	4b0c      	ldr	r3, [pc, #48]	@ (80115b4 <USBH_LL_Init+0x74>)
 8011584:	2200      	movs	r2, #0
 8011586:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011588:	480a      	ldr	r0, [pc, #40]	@ (80115b4 <USBH_LL_Init+0x74>)
 801158a:	f7f2 fb00 	bl	8003b8e <HAL_HCD_Init>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d001      	beq.n	8011598 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011594:	f7ef fe1e 	bl	80011d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011598:	4806      	ldr	r0, [pc, #24]	@ (80115b4 <USBH_LL_Init+0x74>)
 801159a:	f7f2 ff61 	bl	8004460 <HAL_HCD_GetCurrentFrame>
 801159e:	4603      	mov	r3, r0
 80115a0:	4619      	mov	r1, r3
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f7fc fa40 	bl	800da28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80115a8:	2300      	movs	r3, #0
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3708      	adds	r7, #8
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	20008d1c 	.word	0x20008d1c

080115b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115c0:	2300      	movs	r3, #0
 80115c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115c4:	2300      	movs	r3, #0
 80115c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7f2 fece 	bl	8004370 <HAL_HCD_Start>
 80115d4:	4603      	mov	r3, r0
 80115d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80115d8:	7bfb      	ldrb	r3, [r7, #15]
 80115da:	4618      	mov	r0, r3
 80115dc:	f000 f95e 	bl	801189c <USBH_Get_USB_Status>
 80115e0:	4603      	mov	r3, r0
 80115e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3710      	adds	r7, #16
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b084      	sub	sp, #16
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115f6:	2300      	movs	r3, #0
 80115f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115fa:	2300      	movs	r3, #0
 80115fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011604:	4618      	mov	r0, r3
 8011606:	f7f2 fed6 	bl	80043b6 <HAL_HCD_Stop>
 801160a:	4603      	mov	r3, r0
 801160c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801160e:	7bfb      	ldrb	r3, [r7, #15]
 8011610:	4618      	mov	r0, r3
 8011612:	f000 f943 	bl	801189c <USBH_Get_USB_Status>
 8011616:	4603      	mov	r3, r0
 8011618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801161a:	7bbb      	ldrb	r3, [r7, #14]
}
 801161c:	4618      	mov	r0, r3
 801161e:	3710      	adds	r7, #16
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801162c:	2301      	movs	r3, #1
 801162e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011636:	4618      	mov	r0, r3
 8011638:	f7f2 ff20 	bl	800447c <HAL_HCD_GetCurrentSpeed>
 801163c:	4603      	mov	r3, r0
 801163e:	2b02      	cmp	r3, #2
 8011640:	d00c      	beq.n	801165c <USBH_LL_GetSpeed+0x38>
 8011642:	2b02      	cmp	r3, #2
 8011644:	d80d      	bhi.n	8011662 <USBH_LL_GetSpeed+0x3e>
 8011646:	2b00      	cmp	r3, #0
 8011648:	d002      	beq.n	8011650 <USBH_LL_GetSpeed+0x2c>
 801164a:	2b01      	cmp	r3, #1
 801164c:	d003      	beq.n	8011656 <USBH_LL_GetSpeed+0x32>
 801164e:	e008      	b.n	8011662 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011650:	2300      	movs	r3, #0
 8011652:	73fb      	strb	r3, [r7, #15]
    break;
 8011654:	e008      	b.n	8011668 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011656:	2301      	movs	r3, #1
 8011658:	73fb      	strb	r3, [r7, #15]
    break;
 801165a:	e005      	b.n	8011668 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801165c:	2302      	movs	r3, #2
 801165e:	73fb      	strb	r3, [r7, #15]
    break;
 8011660:	e002      	b.n	8011668 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011662:	2301      	movs	r3, #1
 8011664:	73fb      	strb	r3, [r7, #15]
    break;
 8011666:	bf00      	nop
  }
  return  speed;
 8011668:	7bfb      	ldrb	r3, [r7, #15]
}
 801166a:	4618      	mov	r0, r3
 801166c:	3710      	adds	r7, #16
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}

08011672 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011672:	b580      	push	{r7, lr}
 8011674:	b084      	sub	sp, #16
 8011676:	af00      	add	r7, sp, #0
 8011678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801167a:	2300      	movs	r3, #0
 801167c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801167e:	2300      	movs	r3, #0
 8011680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011688:	4618      	mov	r0, r3
 801168a:	f7f2 feb1 	bl	80043f0 <HAL_HCD_ResetPort>
 801168e:	4603      	mov	r3, r0
 8011690:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011692:	7bfb      	ldrb	r3, [r7, #15]
 8011694:	4618      	mov	r0, r3
 8011696:	f000 f901 	bl	801189c <USBH_Get_USB_Status>
 801169a:	4603      	mov	r3, r0
 801169c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801169e:	7bbb      	ldrb	r3, [r7, #14]
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3710      	adds	r7, #16
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	460b      	mov	r3, r1
 80116b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80116ba:	78fa      	ldrb	r2, [r7, #3]
 80116bc:	4611      	mov	r1, r2
 80116be:	4618      	mov	r0, r3
 80116c0:	f7f2 feb9 	bl	8004436 <HAL_HCD_HC_GetXferCount>
 80116c4:	4603      	mov	r3, r0
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3708      	adds	r7, #8
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}

080116ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80116ce:	b590      	push	{r4, r7, lr}
 80116d0:	b089      	sub	sp, #36	@ 0x24
 80116d2:	af04      	add	r7, sp, #16
 80116d4:	6078      	str	r0, [r7, #4]
 80116d6:	4608      	mov	r0, r1
 80116d8:	4611      	mov	r1, r2
 80116da:	461a      	mov	r2, r3
 80116dc:	4603      	mov	r3, r0
 80116de:	70fb      	strb	r3, [r7, #3]
 80116e0:	460b      	mov	r3, r1
 80116e2:	70bb      	strb	r3, [r7, #2]
 80116e4:	4613      	mov	r3, r2
 80116e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116e8:	2300      	movs	r3, #0
 80116ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116ec:	2300      	movs	r3, #0
 80116ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80116f6:	787c      	ldrb	r4, [r7, #1]
 80116f8:	78ba      	ldrb	r2, [r7, #2]
 80116fa:	78f9      	ldrb	r1, [r7, #3]
 80116fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80116fe:	9302      	str	r3, [sp, #8]
 8011700:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011704:	9301      	str	r3, [sp, #4]
 8011706:	f897 3020 	ldrb.w	r3, [r7, #32]
 801170a:	9300      	str	r3, [sp, #0]
 801170c:	4623      	mov	r3, r4
 801170e:	f7f2 faa5 	bl	8003c5c <HAL_HCD_HC_Init>
 8011712:	4603      	mov	r3, r0
 8011714:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011716:	7bfb      	ldrb	r3, [r7, #15]
 8011718:	4618      	mov	r0, r3
 801171a:	f000 f8bf 	bl	801189c <USBH_Get_USB_Status>
 801171e:	4603      	mov	r3, r0
 8011720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011722:	7bbb      	ldrb	r3, [r7, #14]
}
 8011724:	4618      	mov	r0, r3
 8011726:	3714      	adds	r7, #20
 8011728:	46bd      	mov	sp, r7
 801172a:	bd90      	pop	{r4, r7, pc}

0801172c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	460b      	mov	r3, r1
 8011736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011738:	2300      	movs	r3, #0
 801173a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801173c:	2300      	movs	r3, #0
 801173e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011746:	78fa      	ldrb	r2, [r7, #3]
 8011748:	4611      	mov	r1, r2
 801174a:	4618      	mov	r0, r3
 801174c:	f7f2 fb3e 	bl	8003dcc <HAL_HCD_HC_Halt>
 8011750:	4603      	mov	r3, r0
 8011752:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011754:	7bfb      	ldrb	r3, [r7, #15]
 8011756:	4618      	mov	r0, r3
 8011758:	f000 f8a0 	bl	801189c <USBH_Get_USB_Status>
 801175c:	4603      	mov	r3, r0
 801175e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011760:	7bbb      	ldrb	r3, [r7, #14]
}
 8011762:	4618      	mov	r0, r3
 8011764:	3710      	adds	r7, #16
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}

0801176a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801176a:	b590      	push	{r4, r7, lr}
 801176c:	b089      	sub	sp, #36	@ 0x24
 801176e:	af04      	add	r7, sp, #16
 8011770:	6078      	str	r0, [r7, #4]
 8011772:	4608      	mov	r0, r1
 8011774:	4611      	mov	r1, r2
 8011776:	461a      	mov	r2, r3
 8011778:	4603      	mov	r3, r0
 801177a:	70fb      	strb	r3, [r7, #3]
 801177c:	460b      	mov	r3, r1
 801177e:	70bb      	strb	r3, [r7, #2]
 8011780:	4613      	mov	r3, r2
 8011782:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011784:	2300      	movs	r3, #0
 8011786:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011788:	2300      	movs	r3, #0
 801178a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8011792:	787c      	ldrb	r4, [r7, #1]
 8011794:	78ba      	ldrb	r2, [r7, #2]
 8011796:	78f9      	ldrb	r1, [r7, #3]
 8011798:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801179c:	9303      	str	r3, [sp, #12]
 801179e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80117a0:	9302      	str	r3, [sp, #8]
 80117a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117a4:	9301      	str	r3, [sp, #4]
 80117a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	4623      	mov	r3, r4
 80117ae:	f7f2 fb31 	bl	8003e14 <HAL_HCD_HC_SubmitRequest>
 80117b2:	4603      	mov	r3, r0
 80117b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80117b6:	7bfb      	ldrb	r3, [r7, #15]
 80117b8:	4618      	mov	r0, r3
 80117ba:	f000 f86f 	bl	801189c <USBH_Get_USB_Status>
 80117be:	4603      	mov	r3, r0
 80117c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3714      	adds	r7, #20
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd90      	pop	{r4, r7, pc}

080117cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	460b      	mov	r3, r1
 80117d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80117de:	78fa      	ldrb	r2, [r7, #3]
 80117e0:	4611      	mov	r1, r2
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7f2 fe12 	bl	800440c <HAL_HCD_HC_GetURBState>
 80117e8:	4603      	mov	r3, r0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3708      	adds	r7, #8
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b082      	sub	sp, #8
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
 80117fa:	460b      	mov	r3, r1
 80117fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8011804:	2b01      	cmp	r3, #1
 8011806:	d103      	bne.n	8011810 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011808:	78fb      	ldrb	r3, [r7, #3]
 801180a:	4618      	mov	r0, r3
 801180c:	f000 f872 	bl	80118f4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011810:	20c8      	movs	r0, #200	@ 0xc8
 8011812:	f7f0 fabb 	bl	8001d8c <HAL_Delay>
  return USBH_OK;
 8011816:	2300      	movs	r3, #0
}
 8011818:	4618      	mov	r0, r3
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011820:	b480      	push	{r7}
 8011822:	b085      	sub	sp, #20
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	460b      	mov	r3, r1
 801182a:	70fb      	strb	r3, [r7, #3]
 801182c:	4613      	mov	r3, r2
 801182e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011836:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011838:	78fa      	ldrb	r2, [r7, #3]
 801183a:	68f9      	ldr	r1, [r7, #12]
 801183c:	4613      	mov	r3, r2
 801183e:	011b      	lsls	r3, r3, #4
 8011840:	1a9b      	subs	r3, r3, r2
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	440b      	add	r3, r1
 8011846:	3317      	adds	r3, #23
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00a      	beq.n	8011864 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801184e:	78fa      	ldrb	r2, [r7, #3]
 8011850:	68f9      	ldr	r1, [r7, #12]
 8011852:	4613      	mov	r3, r2
 8011854:	011b      	lsls	r3, r3, #4
 8011856:	1a9b      	subs	r3, r3, r2
 8011858:	009b      	lsls	r3, r3, #2
 801185a:	440b      	add	r3, r1
 801185c:	333c      	adds	r3, #60	@ 0x3c
 801185e:	78ba      	ldrb	r2, [r7, #2]
 8011860:	701a      	strb	r2, [r3, #0]
 8011862:	e009      	b.n	8011878 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011864:	78fa      	ldrb	r2, [r7, #3]
 8011866:	68f9      	ldr	r1, [r7, #12]
 8011868:	4613      	mov	r3, r2
 801186a:	011b      	lsls	r3, r3, #4
 801186c:	1a9b      	subs	r3, r3, r2
 801186e:	009b      	lsls	r3, r3, #2
 8011870:	440b      	add	r3, r1
 8011872:	333d      	adds	r3, #61	@ 0x3d
 8011874:	78ba      	ldrb	r2, [r7, #2]
 8011876:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011878:	2300      	movs	r3, #0
}
 801187a:	4618      	mov	r0, r3
 801187c:	3714      	adds	r7, #20
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr

08011886 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011886:	b580      	push	{r7, lr}
 8011888:	b082      	sub	sp, #8
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f7f0 fa7c 	bl	8001d8c <HAL_Delay>
}
 8011894:	bf00      	nop
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801189c:	b480      	push	{r7}
 801189e:	b085      	sub	sp, #20
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	4603      	mov	r3, r0
 80118a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80118a6:	2300      	movs	r3, #0
 80118a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80118aa:	79fb      	ldrb	r3, [r7, #7]
 80118ac:	2b03      	cmp	r3, #3
 80118ae:	d817      	bhi.n	80118e0 <USBH_Get_USB_Status+0x44>
 80118b0:	a201      	add	r2, pc, #4	@ (adr r2, 80118b8 <USBH_Get_USB_Status+0x1c>)
 80118b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118b6:	bf00      	nop
 80118b8:	080118c9 	.word	0x080118c9
 80118bc:	080118cf 	.word	0x080118cf
 80118c0:	080118d5 	.word	0x080118d5
 80118c4:	080118db 	.word	0x080118db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80118c8:	2300      	movs	r3, #0
 80118ca:	73fb      	strb	r3, [r7, #15]
    break;
 80118cc:	e00b      	b.n	80118e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80118ce:	2302      	movs	r3, #2
 80118d0:	73fb      	strb	r3, [r7, #15]
    break;
 80118d2:	e008      	b.n	80118e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80118d4:	2301      	movs	r3, #1
 80118d6:	73fb      	strb	r3, [r7, #15]
    break;
 80118d8:	e005      	b.n	80118e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80118da:	2302      	movs	r3, #2
 80118dc:	73fb      	strb	r3, [r7, #15]
    break;
 80118de:	e002      	b.n	80118e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80118e0:	2302      	movs	r3, #2
 80118e2:	73fb      	strb	r3, [r7, #15]
    break;
 80118e4:	bf00      	nop
  }
  return usb_status;
 80118e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	3714      	adds	r7, #20
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr

080118f4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	4603      	mov	r3, r0
 80118fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80118fe:	79fb      	ldrb	r3, [r7, #7]
 8011900:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011902:	79fb      	ldrb	r3, [r7, #7]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d102      	bne.n	801190e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8011908:	2300      	movs	r3, #0
 801190a:	73fb      	strb	r3, [r7, #15]
 801190c:	e001      	b.n	8011912 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801190e:	2301      	movs	r3, #1
 8011910:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 8011912:	7bfb      	ldrb	r3, [r7, #15]
 8011914:	461a      	mov	r2, r3
 8011916:	2104      	movs	r1, #4
 8011918:	4803      	ldr	r0, [pc, #12]	@ (8011928 <MX_DriverVbusFS+0x34>)
 801191a:	f7f2 f91f 	bl	8003b5c <HAL_GPIO_WritePin>
}
 801191e:	bf00      	nop
 8011920:	3710      	adds	r7, #16
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	40020400 	.word	0x40020400

0801192c <malloc>:
 801192c:	4b02      	ldr	r3, [pc, #8]	@ (8011938 <malloc+0xc>)
 801192e:	4601      	mov	r1, r0
 8011930:	6818      	ldr	r0, [r3, #0]
 8011932:	f000 b82d 	b.w	8011990 <_malloc_r>
 8011936:	bf00      	nop
 8011938:	20000030 	.word	0x20000030

0801193c <free>:
 801193c:	4b02      	ldr	r3, [pc, #8]	@ (8011948 <free+0xc>)
 801193e:	4601      	mov	r1, r0
 8011940:	6818      	ldr	r0, [r3, #0]
 8011942:	f000 b903 	b.w	8011b4c <_free_r>
 8011946:	bf00      	nop
 8011948:	20000030 	.word	0x20000030

0801194c <sbrk_aligned>:
 801194c:	b570      	push	{r4, r5, r6, lr}
 801194e:	4e0f      	ldr	r6, [pc, #60]	@ (801198c <sbrk_aligned+0x40>)
 8011950:	460c      	mov	r4, r1
 8011952:	6831      	ldr	r1, [r6, #0]
 8011954:	4605      	mov	r5, r0
 8011956:	b911      	cbnz	r1, 801195e <sbrk_aligned+0x12>
 8011958:	f000 f8ae 	bl	8011ab8 <_sbrk_r>
 801195c:	6030      	str	r0, [r6, #0]
 801195e:	4621      	mov	r1, r4
 8011960:	4628      	mov	r0, r5
 8011962:	f000 f8a9 	bl	8011ab8 <_sbrk_r>
 8011966:	1c43      	adds	r3, r0, #1
 8011968:	d103      	bne.n	8011972 <sbrk_aligned+0x26>
 801196a:	f04f 34ff 	mov.w	r4, #4294967295
 801196e:	4620      	mov	r0, r4
 8011970:	bd70      	pop	{r4, r5, r6, pc}
 8011972:	1cc4      	adds	r4, r0, #3
 8011974:	f024 0403 	bic.w	r4, r4, #3
 8011978:	42a0      	cmp	r0, r4
 801197a:	d0f8      	beq.n	801196e <sbrk_aligned+0x22>
 801197c:	1a21      	subs	r1, r4, r0
 801197e:	4628      	mov	r0, r5
 8011980:	f000 f89a 	bl	8011ab8 <_sbrk_r>
 8011984:	3001      	adds	r0, #1
 8011986:	d1f2      	bne.n	801196e <sbrk_aligned+0x22>
 8011988:	e7ef      	b.n	801196a <sbrk_aligned+0x1e>
 801198a:	bf00      	nop
 801198c:	200090fc 	.word	0x200090fc

08011990 <_malloc_r>:
 8011990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011994:	1ccd      	adds	r5, r1, #3
 8011996:	f025 0503 	bic.w	r5, r5, #3
 801199a:	3508      	adds	r5, #8
 801199c:	2d0c      	cmp	r5, #12
 801199e:	bf38      	it	cc
 80119a0:	250c      	movcc	r5, #12
 80119a2:	2d00      	cmp	r5, #0
 80119a4:	4606      	mov	r6, r0
 80119a6:	db01      	blt.n	80119ac <_malloc_r+0x1c>
 80119a8:	42a9      	cmp	r1, r5
 80119aa:	d904      	bls.n	80119b6 <_malloc_r+0x26>
 80119ac:	230c      	movs	r3, #12
 80119ae:	6033      	str	r3, [r6, #0]
 80119b0:	2000      	movs	r0, #0
 80119b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a8c <_malloc_r+0xfc>
 80119ba:	f000 f869 	bl	8011a90 <__malloc_lock>
 80119be:	f8d8 3000 	ldr.w	r3, [r8]
 80119c2:	461c      	mov	r4, r3
 80119c4:	bb44      	cbnz	r4, 8011a18 <_malloc_r+0x88>
 80119c6:	4629      	mov	r1, r5
 80119c8:	4630      	mov	r0, r6
 80119ca:	f7ff ffbf 	bl	801194c <sbrk_aligned>
 80119ce:	1c43      	adds	r3, r0, #1
 80119d0:	4604      	mov	r4, r0
 80119d2:	d158      	bne.n	8011a86 <_malloc_r+0xf6>
 80119d4:	f8d8 4000 	ldr.w	r4, [r8]
 80119d8:	4627      	mov	r7, r4
 80119da:	2f00      	cmp	r7, #0
 80119dc:	d143      	bne.n	8011a66 <_malloc_r+0xd6>
 80119de:	2c00      	cmp	r4, #0
 80119e0:	d04b      	beq.n	8011a7a <_malloc_r+0xea>
 80119e2:	6823      	ldr	r3, [r4, #0]
 80119e4:	4639      	mov	r1, r7
 80119e6:	4630      	mov	r0, r6
 80119e8:	eb04 0903 	add.w	r9, r4, r3
 80119ec:	f000 f864 	bl	8011ab8 <_sbrk_r>
 80119f0:	4581      	cmp	r9, r0
 80119f2:	d142      	bne.n	8011a7a <_malloc_r+0xea>
 80119f4:	6821      	ldr	r1, [r4, #0]
 80119f6:	1a6d      	subs	r5, r5, r1
 80119f8:	4629      	mov	r1, r5
 80119fa:	4630      	mov	r0, r6
 80119fc:	f7ff ffa6 	bl	801194c <sbrk_aligned>
 8011a00:	3001      	adds	r0, #1
 8011a02:	d03a      	beq.n	8011a7a <_malloc_r+0xea>
 8011a04:	6823      	ldr	r3, [r4, #0]
 8011a06:	442b      	add	r3, r5
 8011a08:	6023      	str	r3, [r4, #0]
 8011a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8011a0e:	685a      	ldr	r2, [r3, #4]
 8011a10:	bb62      	cbnz	r2, 8011a6c <_malloc_r+0xdc>
 8011a12:	f8c8 7000 	str.w	r7, [r8]
 8011a16:	e00f      	b.n	8011a38 <_malloc_r+0xa8>
 8011a18:	6822      	ldr	r2, [r4, #0]
 8011a1a:	1b52      	subs	r2, r2, r5
 8011a1c:	d420      	bmi.n	8011a60 <_malloc_r+0xd0>
 8011a1e:	2a0b      	cmp	r2, #11
 8011a20:	d917      	bls.n	8011a52 <_malloc_r+0xc2>
 8011a22:	1961      	adds	r1, r4, r5
 8011a24:	42a3      	cmp	r3, r4
 8011a26:	6025      	str	r5, [r4, #0]
 8011a28:	bf18      	it	ne
 8011a2a:	6059      	strne	r1, [r3, #4]
 8011a2c:	6863      	ldr	r3, [r4, #4]
 8011a2e:	bf08      	it	eq
 8011a30:	f8c8 1000 	streq.w	r1, [r8]
 8011a34:	5162      	str	r2, [r4, r5]
 8011a36:	604b      	str	r3, [r1, #4]
 8011a38:	4630      	mov	r0, r6
 8011a3a:	f000 f82f 	bl	8011a9c <__malloc_unlock>
 8011a3e:	f104 000b 	add.w	r0, r4, #11
 8011a42:	1d23      	adds	r3, r4, #4
 8011a44:	f020 0007 	bic.w	r0, r0, #7
 8011a48:	1ac2      	subs	r2, r0, r3
 8011a4a:	bf1c      	itt	ne
 8011a4c:	1a1b      	subne	r3, r3, r0
 8011a4e:	50a3      	strne	r3, [r4, r2]
 8011a50:	e7af      	b.n	80119b2 <_malloc_r+0x22>
 8011a52:	6862      	ldr	r2, [r4, #4]
 8011a54:	42a3      	cmp	r3, r4
 8011a56:	bf0c      	ite	eq
 8011a58:	f8c8 2000 	streq.w	r2, [r8]
 8011a5c:	605a      	strne	r2, [r3, #4]
 8011a5e:	e7eb      	b.n	8011a38 <_malloc_r+0xa8>
 8011a60:	4623      	mov	r3, r4
 8011a62:	6864      	ldr	r4, [r4, #4]
 8011a64:	e7ae      	b.n	80119c4 <_malloc_r+0x34>
 8011a66:	463c      	mov	r4, r7
 8011a68:	687f      	ldr	r7, [r7, #4]
 8011a6a:	e7b6      	b.n	80119da <_malloc_r+0x4a>
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	42a3      	cmp	r3, r4
 8011a72:	d1fb      	bne.n	8011a6c <_malloc_r+0xdc>
 8011a74:	2300      	movs	r3, #0
 8011a76:	6053      	str	r3, [r2, #4]
 8011a78:	e7de      	b.n	8011a38 <_malloc_r+0xa8>
 8011a7a:	230c      	movs	r3, #12
 8011a7c:	6033      	str	r3, [r6, #0]
 8011a7e:	4630      	mov	r0, r6
 8011a80:	f000 f80c 	bl	8011a9c <__malloc_unlock>
 8011a84:	e794      	b.n	80119b0 <_malloc_r+0x20>
 8011a86:	6005      	str	r5, [r0, #0]
 8011a88:	e7d6      	b.n	8011a38 <_malloc_r+0xa8>
 8011a8a:	bf00      	nop
 8011a8c:	20009100 	.word	0x20009100

08011a90 <__malloc_lock>:
 8011a90:	4801      	ldr	r0, [pc, #4]	@ (8011a98 <__malloc_lock+0x8>)
 8011a92:	f000 b84b 	b.w	8011b2c <__retarget_lock_acquire_recursive>
 8011a96:	bf00      	nop
 8011a98:	20009240 	.word	0x20009240

08011a9c <__malloc_unlock>:
 8011a9c:	4801      	ldr	r0, [pc, #4]	@ (8011aa4 <__malloc_unlock+0x8>)
 8011a9e:	f000 b846 	b.w	8011b2e <__retarget_lock_release_recursive>
 8011aa2:	bf00      	nop
 8011aa4:	20009240 	.word	0x20009240

08011aa8 <memset>:
 8011aa8:	4402      	add	r2, r0
 8011aaa:	4603      	mov	r3, r0
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d100      	bne.n	8011ab2 <memset+0xa>
 8011ab0:	4770      	bx	lr
 8011ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8011ab6:	e7f9      	b.n	8011aac <memset+0x4>

08011ab8 <_sbrk_r>:
 8011ab8:	b538      	push	{r3, r4, r5, lr}
 8011aba:	4d06      	ldr	r5, [pc, #24]	@ (8011ad4 <_sbrk_r+0x1c>)
 8011abc:	2300      	movs	r3, #0
 8011abe:	4604      	mov	r4, r0
 8011ac0:	4608      	mov	r0, r1
 8011ac2:	602b      	str	r3, [r5, #0]
 8011ac4:	f7f0 f8ae 	bl	8001c24 <_sbrk>
 8011ac8:	1c43      	adds	r3, r0, #1
 8011aca:	d102      	bne.n	8011ad2 <_sbrk_r+0x1a>
 8011acc:	682b      	ldr	r3, [r5, #0]
 8011ace:	b103      	cbz	r3, 8011ad2 <_sbrk_r+0x1a>
 8011ad0:	6023      	str	r3, [r4, #0]
 8011ad2:	bd38      	pop	{r3, r4, r5, pc}
 8011ad4:	2000923c 	.word	0x2000923c

08011ad8 <__errno>:
 8011ad8:	4b01      	ldr	r3, [pc, #4]	@ (8011ae0 <__errno+0x8>)
 8011ada:	6818      	ldr	r0, [r3, #0]
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	20000030 	.word	0x20000030

08011ae4 <__libc_init_array>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	4d0d      	ldr	r5, [pc, #52]	@ (8011b1c <__libc_init_array+0x38>)
 8011ae8:	4c0d      	ldr	r4, [pc, #52]	@ (8011b20 <__libc_init_array+0x3c>)
 8011aea:	1b64      	subs	r4, r4, r5
 8011aec:	10a4      	asrs	r4, r4, #2
 8011aee:	2600      	movs	r6, #0
 8011af0:	42a6      	cmp	r6, r4
 8011af2:	d109      	bne.n	8011b08 <__libc_init_array+0x24>
 8011af4:	4d0b      	ldr	r5, [pc, #44]	@ (8011b24 <__libc_init_array+0x40>)
 8011af6:	4c0c      	ldr	r4, [pc, #48]	@ (8011b28 <__libc_init_array+0x44>)
 8011af8:	f000 f872 	bl	8011be0 <_init>
 8011afc:	1b64      	subs	r4, r4, r5
 8011afe:	10a4      	asrs	r4, r4, #2
 8011b00:	2600      	movs	r6, #0
 8011b02:	42a6      	cmp	r6, r4
 8011b04:	d105      	bne.n	8011b12 <__libc_init_array+0x2e>
 8011b06:	bd70      	pop	{r4, r5, r6, pc}
 8011b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b0c:	4798      	blx	r3
 8011b0e:	3601      	adds	r6, #1
 8011b10:	e7ee      	b.n	8011af0 <__libc_init_array+0xc>
 8011b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b16:	4798      	blx	r3
 8011b18:	3601      	adds	r6, #1
 8011b1a:	e7f2      	b.n	8011b02 <__libc_init_array+0x1e>
 8011b1c:	08011cb0 	.word	0x08011cb0
 8011b20:	08011cb0 	.word	0x08011cb0
 8011b24:	08011cb0 	.word	0x08011cb0
 8011b28:	08011cb4 	.word	0x08011cb4

08011b2c <__retarget_lock_acquire_recursive>:
 8011b2c:	4770      	bx	lr

08011b2e <__retarget_lock_release_recursive>:
 8011b2e:	4770      	bx	lr

08011b30 <memcpy>:
 8011b30:	440a      	add	r2, r1
 8011b32:	4291      	cmp	r1, r2
 8011b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b38:	d100      	bne.n	8011b3c <memcpy+0xc>
 8011b3a:	4770      	bx	lr
 8011b3c:	b510      	push	{r4, lr}
 8011b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b46:	4291      	cmp	r1, r2
 8011b48:	d1f9      	bne.n	8011b3e <memcpy+0xe>
 8011b4a:	bd10      	pop	{r4, pc}

08011b4c <_free_r>:
 8011b4c:	b538      	push	{r3, r4, r5, lr}
 8011b4e:	4605      	mov	r5, r0
 8011b50:	2900      	cmp	r1, #0
 8011b52:	d041      	beq.n	8011bd8 <_free_r+0x8c>
 8011b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b58:	1f0c      	subs	r4, r1, #4
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	bfb8      	it	lt
 8011b5e:	18e4      	addlt	r4, r4, r3
 8011b60:	f7ff ff96 	bl	8011a90 <__malloc_lock>
 8011b64:	4a1d      	ldr	r2, [pc, #116]	@ (8011bdc <_free_r+0x90>)
 8011b66:	6813      	ldr	r3, [r2, #0]
 8011b68:	b933      	cbnz	r3, 8011b78 <_free_r+0x2c>
 8011b6a:	6063      	str	r3, [r4, #4]
 8011b6c:	6014      	str	r4, [r2, #0]
 8011b6e:	4628      	mov	r0, r5
 8011b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b74:	f7ff bf92 	b.w	8011a9c <__malloc_unlock>
 8011b78:	42a3      	cmp	r3, r4
 8011b7a:	d908      	bls.n	8011b8e <_free_r+0x42>
 8011b7c:	6820      	ldr	r0, [r4, #0]
 8011b7e:	1821      	adds	r1, r4, r0
 8011b80:	428b      	cmp	r3, r1
 8011b82:	bf01      	itttt	eq
 8011b84:	6819      	ldreq	r1, [r3, #0]
 8011b86:	685b      	ldreq	r3, [r3, #4]
 8011b88:	1809      	addeq	r1, r1, r0
 8011b8a:	6021      	streq	r1, [r4, #0]
 8011b8c:	e7ed      	b.n	8011b6a <_free_r+0x1e>
 8011b8e:	461a      	mov	r2, r3
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	b10b      	cbz	r3, 8011b98 <_free_r+0x4c>
 8011b94:	42a3      	cmp	r3, r4
 8011b96:	d9fa      	bls.n	8011b8e <_free_r+0x42>
 8011b98:	6811      	ldr	r1, [r2, #0]
 8011b9a:	1850      	adds	r0, r2, r1
 8011b9c:	42a0      	cmp	r0, r4
 8011b9e:	d10b      	bne.n	8011bb8 <_free_r+0x6c>
 8011ba0:	6820      	ldr	r0, [r4, #0]
 8011ba2:	4401      	add	r1, r0
 8011ba4:	1850      	adds	r0, r2, r1
 8011ba6:	4283      	cmp	r3, r0
 8011ba8:	6011      	str	r1, [r2, #0]
 8011baa:	d1e0      	bne.n	8011b6e <_free_r+0x22>
 8011bac:	6818      	ldr	r0, [r3, #0]
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	6053      	str	r3, [r2, #4]
 8011bb2:	4408      	add	r0, r1
 8011bb4:	6010      	str	r0, [r2, #0]
 8011bb6:	e7da      	b.n	8011b6e <_free_r+0x22>
 8011bb8:	d902      	bls.n	8011bc0 <_free_r+0x74>
 8011bba:	230c      	movs	r3, #12
 8011bbc:	602b      	str	r3, [r5, #0]
 8011bbe:	e7d6      	b.n	8011b6e <_free_r+0x22>
 8011bc0:	6820      	ldr	r0, [r4, #0]
 8011bc2:	1821      	adds	r1, r4, r0
 8011bc4:	428b      	cmp	r3, r1
 8011bc6:	bf04      	itt	eq
 8011bc8:	6819      	ldreq	r1, [r3, #0]
 8011bca:	685b      	ldreq	r3, [r3, #4]
 8011bcc:	6063      	str	r3, [r4, #4]
 8011bce:	bf04      	itt	eq
 8011bd0:	1809      	addeq	r1, r1, r0
 8011bd2:	6021      	streq	r1, [r4, #0]
 8011bd4:	6054      	str	r4, [r2, #4]
 8011bd6:	e7ca      	b.n	8011b6e <_free_r+0x22>
 8011bd8:	bd38      	pop	{r3, r4, r5, pc}
 8011bda:	bf00      	nop
 8011bdc:	20009100 	.word	0x20009100

08011be0 <_init>:
 8011be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011be2:	bf00      	nop
 8011be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011be6:	bc08      	pop	{r3}
 8011be8:	469e      	mov	lr, r3
 8011bea:	4770      	bx	lr

08011bec <_fini>:
 8011bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bee:	bf00      	nop
 8011bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bf2:	bc08      	pop	{r3}
 8011bf4:	469e      	mov	lr, r3
 8011bf6:	4770      	bx	lr
